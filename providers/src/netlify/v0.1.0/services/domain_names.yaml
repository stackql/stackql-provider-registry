paths:
  /dns_zones:
    get:
      parameters:
        - in: query
          name: account_slug
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dnsZones'
          description: get all DNS zones the user has access to
        default:
          $ref: '#/components/responses/error'
      tags:
        - dnsZone
      operationId: getDnsZones
    post:
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dnsZone'
          description: Created
        default:
          $ref: '#/components/responses/error'
      tags:
        - dnsZone
      operationId: createDnsZone
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dnsZoneSetup'
        required: true
  /dns_zones/{zone_id}:
    delete:
      responses:
        '204':
          description: delete a single DNS zone
        default:
          $ref: '#/components/responses/error'
      tags:
        - dnsZone
      operationId: deleteDnsZone
      parameters: &ref_0
        - in: path
          name: zone_id
          required: true
          schema:
            type: string
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dnsZone'
          description: get a single DNS zone
        default:
          $ref: '#/components/responses/error'
      tags:
        - dnsZone
      operationId: getDnsZone
      parameters: *ref_0
  /dns_zones/{zone_id}/dns_records:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dnsRecords'
          description: get all DNS records for a single DNS zone
        default:
          $ref: '#/components/responses/error'
      tags:
        - dnsZone
      operationId: getDnsRecords
      parameters: &ref_1
        - in: path
          name: zone_id
          required: true
          schema:
            type: string
    post:
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dnsRecord'
          description: Created
        default:
          $ref: '#/components/responses/error'
      tags:
        - dnsZone
      operationId: createDnsRecord
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dnsRecordCreate'
        required: true
      parameters: *ref_1
  /dns_zones/{zone_id}/dns_records/{dns_record_id}:
    delete:
      responses:
        '204':
          description: record deleted
        default:
          $ref: '#/components/responses/error'
      tags:
        - dnsZone
      operationId: deleteDnsRecord
      parameters: &ref_2
        - in: path
          name: zone_id
          required: true
          schema:
            type: string
        - in: path
          name: dns_record_id
          required: true
          schema:
            type: string
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dnsRecord'
          description: get a single DNS record
        default:
          $ref: '#/components/responses/error'
      tags:
        - dnsZone
      operationId: getIndividualDnsRecord
      parameters: *ref_2
  /dns_zones/{zone_id}/transfer:
    put:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dnsZone'
          description: transfer a DNS zone to another account
        default:
          $ref: '#/components/responses/error'
      tags:
        - dnsZone
      operationId: transferDnsZone
      parameters:
        - in: path
          name: zone_id
          required: true
          schema:
            type: string
        - description: the account of the dns zone
          in: query
          name: account_id
          required: true
          schema:
            type: string
        - description: the account you want to transfer the dns zone to
          in: query
          name: transfer_account_id
          required: true
          schema:
            type: string
        - description: the user you want to transfer the dns zone to
          in: query
          name: transfer_user_id
          required: true
          schema:
            type: string
  /sites/{site_id}/dns:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/dnsZone'
                type: array
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - dnsZone
      operationId: getDNSForSite
      parameters: &ref_3
        - in: path
          name: site_id
          required: true
          schema:
            type: string
    put:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/dnsZone'
                type: array
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - dnsZone
      operationId: configureDNSForSite
      parameters: *ref_3
  /sites/{site_id}/ssl:
    get:
      parameters:
        - in: path
          name: site_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sniCertificate'
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - sniCertificate
      operationId: showSiteTLSCertificate
    post:
      parameters:
        - in: path
          name: site_id
          required: true
          schema:
            type: string
        - in: query
          name: certificate
          schema:
            type: string
        - in: query
          name: key
          schema:
            type: string
        - in: query
          name: ca_certificates
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sniCertificate'
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - sniCertificate
      operationId: provisionSiteTLSCertificate
components:
  schemas:
    dnsZones:
      items:
        $ref: '#/components/schemas/dnsZone'
      type: array
    dnsZone:
      properties:
        account_id:
          type: string
        account_name:
          type: string
        account_slug:
          type: string
        created_at:
          format: dateTime
          type: string
        dedicated:
          type: boolean
        dns_servers:
          items:
            type: string
          type: array
        domain:
          type: string
        errors:
          items:
            type: string
          type: array
        id:
          type: string
        ipv6_enabled:
          type: boolean
        name:
          type: string
        records:
          items:
            $ref: '#/components/schemas/dnsRecord'
          type: array
        site_id:
          type: string
        supported_record_types:
          items:
            type: string
          type: array
        updated_at:
          format: dateTime
          type: string
        user_id:
          type: string
      type: object
    error:
      properties:
        code:
          format: int64
          type: integer
        message:
          nullable: false
          type: string
      required:
        - message
      type: object
    dnsZoneSetup:
      properties:
        account_slug:
          type: string
        name:
          type: string
        site_id:
          type: string
      type: object
    dnsRecord:
      properties:
        dns_zone_id:
          type: string
        flag:
          type: integer
        hostname:
          type: string
        id:
          type: string
        managed:
          type: boolean
        priority:
          format: int64
          type: integer
        site_id:
          type: string
        tag:
          type: string
        ttl:
          format: int64
          type: integer
        type:
          type: string
        value:
          type: string
      type: object
    dnsRecords:
      items:
        $ref: '#/components/schemas/dnsRecord'
      type: array
    dnsRecordCreate:
      properties:
        flag:
          format: int64
          type: integer
        hostname:
          type: string
        port:
          format: int64
          type: integer
        priority:
          format: int64
          type: integer
        tag:
          type: string
        ttl:
          format: int64
          type: integer
        type:
          type: string
        value:
          type: string
        weight:
          format: int64
          type: integer
      type: object
    sniCertificate:
      properties:
        created_at:
          format: dateTime
          type: string
        domains:
          items:
            type: string
          type: array
        expires_at:
          format: dateTime
          type: string
        state:
          type: string
        updated_at:
          format: dateTime
          type: string
      type: object
  parameters: {}
  responses:
    error:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: error
  securitySchemes: {}
  callbacks: {}
  examples: {}
  requestBodies: {}
  headers: {}
  links: {}
  x-stackQL-resources:
    dnsRecords:
      id: netlify.domain_names.dnsRecords
      name: dnsRecords
      title: dnsRecords
      methods:
        getDnsRecords:
          operation:
            $ref: '#/paths/~1dns_zones~1{zone_id}~1dns_records/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createDnsRecord:
          operation:
            $ref: '#/paths/~1dns_zones~1{zone_id}~1dns_records/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        deleteDnsRecord:
          operation:
            $ref: '#/paths/~1dns_zones~1{zone_id}~1dns_records~1{dns_record_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        getIndividualDnsRecord:
          operation:
            $ref: '#/paths/~1dns_zones~1{zone_id}~1dns_records~1{dns_record_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/dnsRecords/methods/getIndividualDnsRecord'
          - $ref: '#/components/x-stackQL-resources/dnsRecords/methods/getDnsRecords'
        insert:
          - $ref: '#/components/x-stackQL-resources/dnsRecords/methods/createDnsRecord'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/dnsRecords/methods/deleteDnsRecord'
    dnsZone:
      id: netlify.domain_names.dnsZone
      name: dnsZone
      title: dnsZone
      methods:
        getDnsZones:
          operation:
            $ref: '#/paths/~1dns_zones/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createDnsZone:
          operation:
            $ref: '#/paths/~1dns_zones/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        deleteDnsZone:
          operation:
            $ref: '#/paths/~1dns_zones~1{zone_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        getDnsZone:
          operation:
            $ref: '#/paths/~1dns_zones~1{zone_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        transferDnsZone:
          operation:
            $ref: '#/paths/~1dns_zones~1{zone_id}~1transfer/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getDNSForSite:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1dns/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        configureDNSForSite:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1dns/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/dnsZone/methods/getDnsZone'
          - $ref: '#/components/x-stackQL-resources/dnsZone/methods/getDNSForSite'
          - $ref: '#/components/x-stackQL-resources/dnsZone/methods/getDnsZones'
        insert:
          - $ref: '#/components/x-stackQL-resources/dnsZone/methods/createDnsZone'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/dnsZone/methods/deleteDnsZone'
    sniCertificate:
      id: netlify.domain_names.sniCertificate
      name: sniCertificate
      title: sniCertificate
      methods:
        showSiteTLSCertificate:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1ssl/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        provisionSiteTLSCertificate:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1ssl/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
openapi: 3.0.0
servers:
  - url: https://api.netlify.com/api/v1
security:
  - netlifyAuth: []
tags:
  - name: ticket
    x-displayName: Ticket
  - name: accessToken
    x-displayName: Access token
  - name: user
    x-displayName: User
  - name: accountMembership
    x-displayName: Accounts
  - name: member
    x-displayName: Member
  - name: accountType
    x-displayName: Access type
  - name: paymentMethod
    x-displayName: Payment method
  - name: auditLog
    x-displayName: Audit log
  - name: site
    x-displayName: Site
  - name: file
    x-displayName: File
  - name: metadata
    x-displayName: Metadata
  - name: snippet
    x-displayName: Snippet
  - name: dnsZone
    x-displayName: DNS zone
  - name: sniCertificate
    x-displayName: SNI certificate
  - name: deploy
    x-displayName: Deploy
  - name: deployedBranch
    x-displayName: Deployed branch
  - name: deployKey
    x-displayName: Deploy key
  - name: build
    x-displayName: Build
  - name: buildLogMsg
    x-displayName: Build log message
  - name: hook
    x-displayName: Hook
  - name: hookType
    x-displayName: Hook type
  - name: buildHook
    x-displayName: Build hook
  - name: service
    x-displayName: Service
  - name: serviceInstance
    x-displayName: Service instance
  - name: function
    x-displayName: Function
  - name: form
    x-displayName: Form
  - name: submission
    x-displayName: Form submission
  - name: splitTest
    x-displayName: Split test
  - name: asset
    x-displayName: Asset
  - name: assetPublicSignature
    x-displayName: Asset public signature
externalDocs:
  description: Online documentation
  url: https://www.netlify.com/docs/api/
info:
  description: Domain Names
  termsOfService: https://www.netlify.com/legal/terms-of-use/
  title: Netlify's API documentation - domain_names
  version: 2.9.0
  x-logo:
    altText: Netlify
    href: https://www.netlify.com/docs/
    url: netlify-logo.png
