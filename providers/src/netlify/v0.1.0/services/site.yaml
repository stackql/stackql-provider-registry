paths:
  /deploys/{deploy_id}/files/{path}:
    put:
      parameters:
        - in: path
          name: deploy_id
          required: true
          schema:
            type: string
        - in: path
          name: path
          required: true
          schema:
            type: string
        - in: query
          name: size
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - file
      operationId: uploadDeployFile
      requestBody:
        content:
          application/json:
            schema:
              format: binary
              type: string
          application/octet-stream:
            schema:
              format: binary
              type: string
        required: true
  /sites:
    get:
      parameters:
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: filter
          schema:
            enum:
              - all
              - owner
              - guest
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/site'
                type: array
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - site
      operationId: listSites
    post:
      parameters:
        - in: query
          name: configure_dns
          schema:
            type: boolean
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/site'
          description: Created
        default:
          $ref: '#/components/responses/error'
      tags:
        - site
      operationId: createSite
      requestBody:
        $ref: '#/components/requestBodies/siteSetup'
  /sites/{site_id}:
    delete:
      responses:
        '204':
          description: Deleted
        default:
          $ref: '#/components/responses/error'
      tags:
        - site
      operationId: deleteSite
      parameters: &ref_0
        - in: path
          name: site_id
          required: true
          schema:
            type: string
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/site'
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - site
      operationId: getSite
      parameters: *ref_0
    patch:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/site'
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - site
      operationId: updateSite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/siteSetup'
        required: true
      parameters: *ref_0
  /sites/{site_id}/files:
    get:
      parameters:
        - in: path
          name: site_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/file'
                type: array
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - file
      operationId: listSiteFiles
  /sites/{site_id}/files/{file_path}:
    get:
      parameters:
        - in: path
          name: site_id
          required: true
          schema:
            type: string
        - in: path
          name: file_path
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/file'
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - file
      operationId: getSiteFileByPathName
  /sites/{site_id}/metadata:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metadata'
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - metadata
      operationId: getSiteMetadata
      parameters: &ref_1
        - in: path
          name: site_id
          required: true
          schema:
            type: string
    put:
      responses:
        '204':
          description: No content
        default:
          $ref: '#/components/responses/error'
      tags:
        - metadata
      operationId: updateSiteMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metadata'
        required: true
      parameters: *ref_1
  /sites/{site_id}/snippets:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/snippet'
                type: array
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - snippet
      operationId: listSiteSnippets
      parameters: &ref_2
        - in: path
          name: site_id
          required: true
          schema:
            type: string
    post:
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snippet'
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - snippet
      operationId: createSiteSnippet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snippet'
        required: true
      parameters: *ref_2
  /sites/{site_id}/snippets/{snippet_id}:
    delete:
      responses:
        '204':
          description: No content
        default:
          $ref: '#/components/responses/error'
      tags:
        - snippet
      operationId: deleteSiteSnippet
      parameters: &ref_3
        - in: path
          name: site_id
          required: true
          schema:
            type: string
        - in: path
          name: snippet_id
          required: true
          schema:
            type: string
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snippet'
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - snippet
      operationId: getSiteSnippet
      parameters: *ref_3
    put:
      responses:
        '204':
          description: No content
        default:
          $ref: '#/components/responses/error'
      tags:
        - snippet
      operationId: updateSiteSnippet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snippet'
        required: true
      parameters: *ref_3
  /sites/{site_id}/unlink_repo:
    put:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/site'
          description: OK
        '404':
          description: Site not found
      tags:
        - site
      description: |-
        [Beta] Unlinks the repo from the site.

        This action will also:
        - Delete associated deploy keys
        - Delete outgoing webhooks for the repo
        - Delete the site's build hooks
      operationId: unlinkSiteRepo
      parameters:
        - in: path
          name: site_id
          required: true
          schema:
            type: string
  /{account_slug}/sites:
    get:
      parameters:
        - in: query
          name: name
          schema:
            type: string
        - in: path
          name: account_slug
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/perPage'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/site'
                type: array
          description: OK
        default:
          $ref: '#/components/responses/error'
      tags:
        - site
      operationId: listSitesForAccount
    post:
      parameters:
        - in: query
          name: configure_dns
          schema:
            type: boolean
        - in: path
          name: account_slug
          required: true
          schema:
            type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/site'
          description: Created
        default:
          $ref: '#/components/responses/error'
      tags:
        - site
      operationId: createSiteInTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/siteSetup'
components:
  schemas:
    file:
      properties:
        id:
          type: string
        mime_type:
          type: string
        path:
          type: string
        sha:
          type: string
        size:
          format: int64
          type: integer
      type: object
    error:
      properties:
        code:
          format: int64
          type: integer
        message:
          nullable: false
          type: string
      required:
        - message
      type: object
    site:
      properties:
        account_name:
          type: string
        account_slug:
          type: string
        admin_url:
          type: string
        build_image:
          type: string
        build_settings:
          $ref: '#/components/schemas/repoInfo'
        capabilities:
          additionalProperties:
            type: object
          type: object
        created_at:
          format: dateTime
          type: string
        custom_domain:
          type: string
        default_hooks_data:
          properties:
            access_token:
              type: string
          type: object
        deploy_hook:
          type: string
        deploy_url:
          type: string
        domain_aliases:
          items:
            type: string
          type: array
        force_ssl:
          type: boolean
        git_provider:
          type: string
        id:
          type: string
        id_domain:
          type: string
        managed_dns:
          type: boolean
        name:
          type: string
        notification_email:
          type: string
        password:
          type: string
        plan:
          type: string
        prerender:
          type: string
        processing_settings:
          properties:
            css:
              $ref: '#/components/schemas/minifyOptions'
            html:
              properties:
                pretty_urls:
                  type: boolean
              type: object
            images:
              properties:
                optimize:
                  type: boolean
              type: object
            js:
              $ref: '#/components/schemas/minifyOptions'
            skip:
              type: boolean
          type: object
        published_deploy:
          $ref: '#/components/schemas/deploy'
        screenshot_url:
          type: string
        session_id:
          type: string
        ssl:
          type: boolean
        ssl_url:
          type: string
        state:
          type: string
        updated_at:
          format: dateTime
          type: string
        url:
          type: string
        user_id:
          type: string
      type: object
    repoInfo:
      properties:
        allowed_branches:
          items:
            type: string
          type: array
        cmd:
          type: string
        deploy_key_id:
          type: string
        dir:
          type: string
        env:
          additionalProperties:
            type: string
          type: object
        functions_dir:
          type: string
        id:
          type: integer
        installation_id:
          type: integer
        private_logs:
          type: boolean
        provider:
          type: string
        public_repo:
          type: boolean
        repo_branch:
          type: string
        repo_path:
          type: string
        repo_url:
          type: string
        stop_builds:
          type: boolean
      type: object
    minifyOptions:
      properties:
        bundle:
          type: boolean
        minify:
          type: boolean
      type: object
    deploy:
      properties:
        admin_url:
          type: string
        branch:
          type: string
        build_id:
          type: string
        commit_ref:
          type: string
        commit_url:
          type: string
        context:
          type: string
        created_at:
          format: dateTime
          type: string
        deploy_ssl_url:
          type: string
        deploy_url:
          type: string
        draft:
          type: boolean
        error_message:
          type: string
        framework:
          type: string
        function_schedules:
          items:
            $ref: '#/components/schemas/functionSchedule'
          type: array
        id:
          type: string
        locked:
          type: boolean
        name:
          type: string
        published_at:
          format: dateTime
          type: string
        required:
          items:
            type: string
          type: array
        required_functions:
          items:
            type: string
          type: array
        review_id:
          type: number
        review_url:
          type: string
        screenshot_url:
          type: string
        site_capabilities:
          properties:
            large_media_enabled:
              type: boolean
          type: object
        site_id:
          type: string
        skipped:
          type: boolean
        ssl_url:
          type: string
        state:
          type: string
        title:
          type: string
        updated_at:
          format: dateTime
          type: string
        url:
          type: string
        user_id:
          type: string
      type: object
    functionSchedule:
      properties:
        cron:
          type: string
        name:
          type: string
      type: object
    siteSetup:
      allOf:
        - $ref: '#/components/schemas/site'
        - properties:
            repo:
              $ref: '#/components/schemas/repoInfo'
          type: object
    metadata:
      type: object
    snippet:
      properties:
        general:
          type: string
        general_position:
          type: string
        goal:
          type: string
        goal_position:
          type: string
        id:
          format: int32
          type: integer
        site_id:
          type: string
        title:
          type: string
      type: object
  parameters:
    page:
      in: query
      name: page
      required: false
      schema:
        format: int32
        type: integer
    perPage:
      in: query
      name: per_page
      required: false
      schema:
        format: int32
        type: integer
  responses:
    error:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error'
      description: error
  securitySchemes: {}
  callbacks: {}
  examples: {}
  requestBodies:
    siteSetup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/siteSetup'
      required: true
  headers: {}
  links: {}
  x-stackQL-resources:
    file:
      id: netlify.site.file
      name: file
      title: file
      methods:
        uploadDeployFile:
          operation:
            $ref: '#/paths/~1deploys~1{deploy_id}~1files~1{path}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listSiteFiles:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1files/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        getSiteFileByPathName:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1files~1{file_path}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/file/methods/getSiteFileByPathName'
          - $ref: '#/components/x-stackQL-resources/file/methods/listSiteFiles'
        insert: []
        update: []
        delete: []
    site:
      id: netlify.site.site
      name: site
      title: site
      methods:
        listSites:
          operation:
            $ref: '#/paths/~1sites/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createSite:
          operation:
            $ref: '#/paths/~1sites/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        deleteSite:
          operation:
            $ref: '#/paths/~1sites~1{site_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        getSite:
          operation:
            $ref: '#/paths/~1sites~1{site_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateSite:
          operation:
            $ref: '#/paths/~1sites~1{site_id}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        unlinkSiteRepo:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1unlink_repo/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        listSitesForAccount:
          operation:
            $ref: '#/paths/~1{account_slug}~1sites/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createSiteInTeam:
          operation:
            $ref: '#/paths/~1{account_slug}~1sites/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/site/methods/getSite'
          - $ref: '#/components/x-stackQL-resources/site/methods/listSitesForAccount'
          - $ref: '#/components/x-stackQL-resources/site/methods/listSites'
        insert:
          - $ref: '#/components/x-stackQL-resources/site/methods/createSiteInTeam'
          - $ref: '#/components/x-stackQL-resources/site/methods/createSite'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/site/methods/deleteSite'
    metadata:
      id: netlify.site.metadata
      name: metadata
      title: metadata
      methods:
        getSiteMetadata:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1metadata/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateSiteMetadata:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1metadata/put'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/metadata/methods/getSiteMetadata'
        insert: []
        update: []
        delete: []
    snippet:
      id: netlify.site.snippet
      name: snippet
      title: snippet
      methods:
        listSiteSnippets:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1snippets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        createSiteSnippet:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1snippets/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        deleteSiteSnippet:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1snippets~1{snippet_id}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        getSiteSnippet:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1snippets~1{snippet_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        updateSiteSnippet:
          operation:
            $ref: '#/paths/~1sites~1{site_id}~1snippets~1{snippet_id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/snippet/methods/getSiteSnippet'
          - $ref: '#/components/x-stackQL-resources/snippet/methods/listSiteSnippets'
        insert:
          - $ref: '#/components/x-stackQL-resources/snippet/methods/createSiteSnippet'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/snippet/methods/deleteSiteSnippet'
openapi: 3.0.0
servers:
  - url: https://api.netlify.com/api/v1
security:
  - netlifyAuth: []
tags:
  - name: ticket
    x-displayName: Ticket
  - name: accessToken
    x-displayName: Access token
  - name: user
    x-displayName: User
  - name: accountMembership
    x-displayName: Accounts
  - name: member
    x-displayName: Member
  - name: accountType
    x-displayName: Access type
  - name: paymentMethod
    x-displayName: Payment method
  - name: auditLog
    x-displayName: Audit log
  - name: site
    x-displayName: Site
  - name: file
    x-displayName: File
  - name: metadata
    x-displayName: Metadata
  - name: snippet
    x-displayName: Snippet
  - name: dnsZone
    x-displayName: DNS zone
  - name: sniCertificate
    x-displayName: SNI certificate
  - name: deploy
    x-displayName: Deploy
  - name: deployedBranch
    x-displayName: Deployed branch
  - name: deployKey
    x-displayName: Deploy key
  - name: build
    x-displayName: Build
  - name: buildLogMsg
    x-displayName: Build log message
  - name: hook
    x-displayName: Hook
  - name: hookType
    x-displayName: Hook type
  - name: buildHook
    x-displayName: Build hook
  - name: service
    x-displayName: Service
  - name: serviceInstance
    x-displayName: Service instance
  - name: function
    x-displayName: Function
  - name: form
    x-displayName: Form
  - name: submission
    x-displayName: Form submission
  - name: splitTest
    x-displayName: Split test
  - name: asset
    x-displayName: Asset
  - name: assetPublicSignature
    x-displayName: Asset public signature
externalDocs:
  description: Online documentation
  url: https://www.netlify.com/docs/api/
info:
  description: Site
  termsOfService: https://www.netlify.com/legal/terms-of-use/
  title: Netlify's API documentation - site
  version: 2.9.0
  x-logo:
    altText: Netlify
    href: https://www.netlify.com/docs/
    url: netlify-logo.png
