openapi: 3.0.0
servers:
  - url: https://management.azure.com/
info:
  title: Azure Deployment Manager (Microsoft.DeploymentManager)
  description: REST APIs for orchestrating deployments using the Azure Deployment Manager (ADM). See https://docs.microsoft.com/en-us/azure-resource-manager/deployment-manager-overview for more information.
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  version: 2022-08-29-stackql-generated
security:
  - azure_auth:
      - user_impersonation
components:
  securitySchemes:
    azure_auth:
      description: Azure Active Directory OAuth2 Flow.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
          scopes:
            user_impersonation: impersonate your user account
  parameters:
    artifactSourceName:
      name: artifactSourceName
      in: path
      description: The name of the artifact source.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    serviceTopologyName:
      name: serviceTopologyName
      in: path
      description: The name of the service topology .
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    serviceName:
      name: serviceName
      in: path
      description: The name of the service resource.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    serviceUnitName:
      name: serviceUnitName
      in: path
      description: The name of the service unit resource.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    stepName:
      name: stepName
      in: path
      description: The name of the deployment step.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    subscriptionId:
      name: subscriptionId
      in: path
      description: Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
      required: true
      x-ms-parameter-location: client
      schema:
        type: string
    resourceGroupName:
      name: resourceGroupName
      in: path
      description: The name of the resource group. The name is case insensitive.
      required: true
      x-ms-parameter-location: method
      schema:
        pattern: ^[-\w\._\(\)]+$
        minLength: 1
        maxLength: 90
        type: string
    rolloutName:
      name: rolloutName
      in: path
      description: The rollout name.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    retryAttempt:
      name: retryAttempt
      in: query
      description: Rollout retry attempt ordinal to get the result of. If not specified, result of the latest attempt will be returned.
      required: false
      x-ms-parameter-location: method
      schema:
        type: integer
    ApiVersionParameter:
      name: api-version
      in: query
      description: The API version to use for this operation.
      required: true
      schema:
        minLength: 1
        type: string
    SubscriptionIdParameter:
      name: subscriptionId
      in: path
      description: The ID of the target subscription.
      required: true
      schema:
        minLength: 1
        type: string
    ResourceGroupNameParameter:
      name: resourceGroupName
      in: path
      description: The name of the resource group. The name is case insensitive.
      required: true
      x-ms-parameter-location: method
      schema:
        minLength: 1
        maxLength: 90
        type: string
  schemas:
    Identity:
      description: Identity for the resource.
      type: object
      properties:
        principalId:
          readOnly: true
          type: string
          description: The principal ID of resource identity.
        tenantId:
          readOnly: true
          type: string
          description: The tenant ID of resource.
        type:
          type: string
          description: The identity type.
          enum:
            - SystemAssigned
          x-ms-enum:
            name: ResourceIdentityType
            modelAsString: false
    RolloutRequest:
      description: Defines the PUT rollout request body.
      required:
        - identity
        - properties
      properties:
        tags:
          type: object
          additionalProperties:
            type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: Resource tags.
        location:
          type: string
          x-ms-mutability:
            - read
            - create
          description: The geo-location where the resource lives
        buildVersion:
          type: string
          description: The version of the build being deployed.
          example: 1.0.0.1
        artifactSourceId:
          type: string
          description: The reference to the artifact source resource Id where the payload is located.
          example: Microsoft.DeploymentManager/artifactSources/payloadStore1
        targetServiceTopologyId:
          type: string
          description: The resource Id of the service topology from which service units are being referenced in step groups to be deployed.
          example: Microsoft.DeploymentManager/serviceTopologies/myServiceTopology
        stepGroups:
          description: The list of step groups that define the orchestration.
          type: array
          items:
            $ref: '#/components/schemas/StepGroup'
        identity:
          description: Identity for the resource.
          $ref: '#/components/schemas/Identity'
      type: object
    RolloutRequestProperties:
      description: The properties for defining a rollout.
      properties:
        buildVersion:
          type: string
          description: The version of the build being deployed.
          example: 1.0.0.1
        artifactSourceId:
          type: string
          description: The reference to the artifact source resource Id where the payload is located.
          example: Microsoft.DeploymentManager/artifactSources/payloadStore1
        targetServiceTopologyId:
          type: string
          description: The resource Id of the service topology from which service units are being referenced in step groups to be deployed.
          example: Microsoft.DeploymentManager/serviceTopologies/myServiceTopology
        stepGroups:
          description: The list of step groups that define the orchestration.
          type: array
          items:
            $ref: '#/components/schemas/StepGroup'
      required:
        - stepGroups
        - targetServiceTopologyId
        - buildVersion
      type: object
    StepGroup:
      description: The properties that define a Step group in a rollout.
      properties:
        name:
          description: The name of the step group.
          type: string
        dependsOnStepGroups:
          description: The list of step group names on which this step group depends on.
          type: array
          items:
            type: string
          example:
            - stepGroup1
            - stepGroup2
        preDeploymentSteps:
          description: The list of steps to be run before deploying the target.
          type: array
          items:
            $ref: '#/components/schemas/PrePostStep'
        deploymentTargetId:
          description: The resource Id of service unit to be deployed. The service unit should be from the service topology referenced in targetServiceTopologyId
          type: string
          example: Microsoft.DeploymentManager/serviceTopologies/myServiceTopology/services/myService/serviceUnits/database
        postDeploymentSteps:
          description: The list of steps to be run after deploying the target.
          type: array
          items:
            $ref: '#/components/schemas/PrePostStep'
      required:
        - deploymentTargetId
        - name
      type: object
    PrePostStep:
      description: The properties that define a step.
      properties:
        stepId:
          type: string
          description: The resource Id of the step to be run.
          example: Microsoft.DeploymentManager/steps/healthCheckStep1
      required:
        - stepId
      type: object
    ArtifactSource:
      description: The resource that defines the source location where the artifacts are located.
      properties:
        tags:
          type: object
          additionalProperties:
            type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: Resource tags.
        location:
          type: string
          x-ms-mutability:
            - read
            - create
          description: The geo-location where the resource lives
        properties:
          description: The properties that define the artifact source.
          x-ms-client-flatten: true
          allOf:
            - $ref: '#/components/schemas/ArtifactSourceProperties'
      type: object
    ArtifactSourceProperties:
      description: The properties that define the source location where the artifacts are located.
      properties:
        sourceType:
          type: string
          description: The type of artifact source used.
          example: AzureStorage
        artifactRoot:
          type: string
          description: The path from the location that the 'authentication' property [say, a SAS URI to the blob container] refers to, to the location of the artifacts. This can be used to differentiate different versions of the artifacts. Or, different types of artifacts like binaries or templates. The location referenced by the authentication property concatenated with this optional artifactRoot path forms the artifact source location where the artifacts are expected to be found.
          example: binaries/2018.09.24
        authentication:
          description: The authentication method to use to access the artifact source.
          $ref: '#/components/schemas/Authentication'
      required:
        - sourceType
        - authentication
      type: object
    Authentication:
      description: Defines the authentication method and properties to access the artifacts.
      type: object
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
          description: The authentication type
      required:
        - type
    SasAuthentication:
      x-ms-discriminator-value: Sas
      description: Defines the properties to access the artifacts using an Azure Storage SAS URI.
      properties:
        type:
          type: string
          description: The authentication type
        sasUri:
          type: string
          description: The SAS URI to the Azure Storage blob container. Any offset from the root of the container to where the artifacts are located can be defined in the artifactRoot.
      type: object
    SasProperties:
      description: The properties that define SAS authentication.
      properties:
        sasUri:
          type: string
          description: The SAS URI to the Azure Storage blob container. Any offset from the root of the container to where the artifacts are located can be defined in the artifactRoot.
      required:
        - sasUri
      type: object
    Rollout:
      description: Defines the rollout.
      properties:
        tags:
          type: object
          additionalProperties:
            type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: Resource tags.
        location:
          type: string
          x-ms-mutability:
            - read
            - create
          description: The geo-location where the resource lives
        identity:
          description: Identity for the resource.
          $ref: '#/components/schemas/Identity'
        properties:
          description: The properties that define a rollout.
          x-ms-client-flatten: true
          allOf:
            - $ref: '#/components/schemas/RolloutRequestProperties'
            - $ref: '#/components/schemas/RolloutProperties'
      type: object
    RolloutProperties:
      description: Defines the properties of a rollout.
      properties:
        status:
          type: string
          readOnly: true
          description: The current status of the rollout.
        totalRetryAttempts:
          type: integer
          format: int32
          readOnly: true
          description: The cardinal count of total number of retries performed on the rollout at a given time.
        operationInfo:
          readOnly: true
          $ref: '#/components/schemas/RolloutOperationInfo'
          description: Operational information of the rollout.
        services:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Service'
          description: The detailed information on the services being deployed.
      type: object
    RolloutOperationInfo:
      description: Detailed runtime information of the rollout.
      properties:
        retryAttempt:
          type: integer
          format: int32
          readOnly: true
          description: The ordinal count of the number of retry attempts on a rollout. 0 if no retries of the rollout have been performed. If the rollout is updated with a PUT, this count is reset to 0.
        skipSucceededOnRetry:
          type: boolean
          readOnly: true
          description: True, if all steps that succeeded on the previous run/attempt were chosen to be skipped in this retry attempt. False, otherwise.
        startTime:
          type: string
          format: date-time
          readOnly: true
          description: The start time of the rollout in UTC.
        endTime:
          type: string
          format: date-time
          readOnly: true
          description: The start time of the rollout in UTC. This property will not be set if the rollout has not completed yet.
        error:
          description: The detailed error information for any failure.
          readOnly: true
          $ref: '#/components/schemas/CloudErrorBody'
      type: object
    ServiceTopologyResource:
      description: The resource representation of a service topology.
      required:
        - properties
      properties:
        tags:
          type: object
          additionalProperties:
            type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: Resource tags.
        location:
          type: string
          x-ms-mutability:
            - read
            - create
          description: The geo-location where the resource lives
        properties:
          description: The properties that define the service topology.
          x-ms-client-flatten: true
          allOf:
            - $ref: '#/components/schemas/ServiceTopologyProperties'
      type: object
    ServiceTopologyProperties:
      description: The properties of a service topology.
      properties:
        artifactSourceId:
          type: string
          description: The resource Id of the artifact source that contains the artifacts that can be referenced in the service units.
      type: object
    ServiceResource:
      description: The resource representation of a service in a service topology.
      required:
        - properties
      properties:
        tags:
          type: object
          additionalProperties:
            type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: Resource tags.
        location:
          type: string
          x-ms-mutability:
            - read
            - create
          description: The geo-location where the resource lives
        properties:
          description: The properties that define a service in a service topology.
          x-ms-client-flatten: true
          allOf:
            - $ref: '#/components/schemas/ServiceProperties'
      type: object
    Service:
      description: Defines a service.
      properties:
        targetLocation:
          type: string
          description: The Azure location to which the resources in the service belong to or should be deployed to.
        targetSubscriptionId:
          type: string
          description: The subscription to which the resources in the service belong to or should be deployed to.
        name:
          type: string
          description: Name of the service.
        serviceUnits:
          description: The detailed information about the units that make up the service.
          type: array
          items:
            $ref: '#/components/schemas/ServiceUnit'
      type: object
    ServiceProperties:
      description: The properties of a service.
      properties:
        targetLocation:
          type: string
          description: The Azure location to which the resources in the service belong to or should be deployed to.
        targetSubscriptionId:
          type: string
          description: The subscription to which the resources in the service belong to or should be deployed to.
      required:
        - targetLocation
        - targetSubscriptionId
      type: object
    ServiceUnitResource:
      description: Represents the response of a service unit resource.
      required:
        - properties
      properties:
        tags:
          type: object
          additionalProperties:
            type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: Resource tags.
        location:
          type: string
          x-ms-mutability:
            - read
            - create
          description: The geo-location where the resource lives
        properties:
          description: The properties that define the service unit.
          x-ms-client-flatten: true
          allOf:
            - $ref: '#/components/schemas/ServiceUnitProperties'
      type: object
    ServiceUnit:
      description: Defines a service unit.
      properties:
        targetResourceGroup:
          type: string
          description: The Azure Resource Group to which the resources in the service unit belong to or should be deployed to.
        deploymentMode:
          type: string
          enum:
            - Incremental
            - Complete
          x-ms-enum:
            name: DeploymentMode
            modelAsString: false
          description: Describes the type of ARM deployment to be performed on the resource.
        artifacts:
          type: object
          description: The artifacts for the service unit.
          $ref: '#/components/schemas/ServiceUnitArtifacts'
        name:
          type: string
          description: Name of the service unit.
        steps:
          type: array
          items:
            $ref: '#/components/schemas/RolloutStep'
          description: Detailed step information, if present.
      type: object
    ServiceUnitProperties:
      description: Defines the properties of a service unit.
      properties:
        targetResourceGroup:
          type: string
          description: The Azure Resource Group to which the resources in the service unit belong to or should be deployed to.
        deploymentMode:
          type: string
          enum:
            - Incremental
            - Complete
          x-ms-enum:
            name: DeploymentMode
            modelAsString: false
          description: Describes the type of ARM deployment to be performed on the resource.
        artifacts:
          type: object
          description: The artifacts for the service unit.
          $ref: '#/components/schemas/ServiceUnitArtifacts'
      required:
        - targetResourceGroup
        - deploymentMode
      type: object
    ServiceUnitArtifacts:
      description: Defines the artifacts of a service unit.
      properties:
        templateUri:
          type: string
          description: The full URI of the ARM template file with the SAS token.
          example: https://teststore.blob.core.windows.net/payloadcontainer/template.json?sasUri
        parametersUri:
          type: string
          description: The full URI of the ARM parameters file with the SAS token.
          example: https://teststore.blob.core.windows.net/payloadcontainer/parameters.json?sasUri
        templateArtifactSourceRelativePath:
          type: string
          description: The path to the ARM template file relative to the artifact source.
          example: /templates/resource1.template.json
        parametersArtifactSourceRelativePath:
          type: string
          description: The path to the ARM parameters file relative to the artifact source.
          example: /parameters/resource1.parameters.json
      type: object
    RolloutStep:
      description: Defines a specific step on a target service unit.
      properties:
        name:
          type: string
          description: Name of the step.
        status:
          type: string
          readOnly: true
          description: Current state of the step.
        stepGroup:
          type: string
          description: The step group the current step is part of.
        operationInfo:
          readOnly: true
          $ref: '#/components/schemas/StepOperationInfo'
          description: Detailed information of specific action execution.
        resourceOperations:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/ResourceOperation'
          description: Set of resource operations that were performed, if any, on an Azure resource.
        messages:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Message'
          description: Supplementary informative messages during rollout.
      required:
        - name
      type: object
    StepOperationInfo:
      description: Detailed information of a specific step run.
      properties:
        deploymentName:
          type: string
          readOnly: true
          description: The name of the ARM deployment initiated as part of the step.
        correlationId:
          type: string
          readOnly: true
          description: Unique identifier to track the request for ARM-based resources.
        startTime:
          type: string
          format: date-time
          readOnly: true
          description: Start time of the action in UTC.
        endTime:
          type: string
          format: date-time
          readOnly: true
          description: End time of the action in UTC.
        lastUpdatedTime:
          type: string
          format: date-time
          readOnly: true
          description: Last time in UTC this operation was updated.
        error:
          description: The errors, if any, for the action.
          $ref: '#/components/schemas/CloudErrorBody'
      type: object
    ResourceOperation:
      description: Individual resource operation information.
      properties:
        resourceName:
          type: string
          description: Name of the resource as specified in the artifacts. For ARM resources, this is the name of the resource specified in the template.
        operationId:
          type: string
          readOnly: true
          description: Unique identifier of the operation. For ARM resources, this is the operationId obtained from ARM service.
        resourceType:
          type: string
          description: Type of the resource as specified in the artifacts. For ARM resources, this is the type of the resource specified in the template.
        provisioningState:
          type: string
          readOnly: true
          description: State of the resource deployment. For ARM resources, this is the current provisioning state of the resource.
        statusMessage:
          type: string
          readOnly: true
          description: Descriptive information of the resource operation.
        statusCode:
          type: string
          readOnly: true
          description: Http status code of the operation.
      type: object
    Message:
      description: Supplementary contextual messages during a rollout.
      properties:
        timeStamp:
          type: string
          format: date-time
          readOnly: true
          description: Time in UTC this message was provided.
        message:
          type: string
          readOnly: true
          description: The actual message text.
      type: object
    CloudError:
      description: The error information object.
      x-ms-external: true
      properties:
        error:
          description: The properties that define the error.
          $ref: '#/components/schemas/CloudErrorBody'
      type: object
    CloudErrorBody:
      description: Detailed error information of any failure.
      properties:
        code:
          type: string
          readOnly: true
          description: Error code string.
        message:
          type: string
          readOnly: true
          description: Descriptive error information.
        target:
          type: string
          description: Error target
        details:
          type: array
          items:
            $ref: '#/components/schemas/CloudErrorBody'
          description: More detailed error information.
      type: object
    OperationsList:
      description: The operations response.
      type: object
      properties:
        value:
          type: array
          description: The list of supported operations
          $ref: '#/components/schemas/Operation'
    Operation:
      title: REST API Operation
      description: Details of a REST API operation, returned from the Resource Provider Operations API
      type: object
      properties:
        name:
          description: 'The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"'
          type: string
          readOnly: true
        isDataAction:
          description: Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
          type: boolean
          readOnly: true
        display:
          description: Localized display information for this particular operation.
          type: object
          properties:
            provider:
              description: The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
              type: string
              readOnly: true
            resource:
              description: The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
              type: string
              readOnly: true
            operation:
              description: The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
              type: string
              readOnly: true
            description:
              description: The short, localized friendly description of the operation; suitable for tool tips and detailed views.
              type: string
              readOnly: true
        origin:
          description: The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
          type: string
          readOnly: true
          enum:
            - user
            - system
            - user,system
          x-ms-enum:
            name: Origin
            modelAsString: true
        actionType:
          description: Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
          type: string
          readOnly: true
          enum:
            - Internal
          x-ms-enum:
            name: ActionType
            modelAsString: true
    OperationDetail:
      description: The detail about an operation.
      properties:
        provider:
          type: string
          description: The name of the provider that supports the operation.
        resource:
          type: string
          description: The resource type on which this operation can be performed.
        operation:
          type: string
          description: The name of the operation.
        description:
          type: string
          description: The description of the operation.
      type: object
    StepResource:
      description: The resource representation of a rollout step.
      required:
        - properties
      properties:
        tags:
          type: object
          additionalProperties:
            type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: Resource tags.
        location:
          type: string
          x-ms-mutability:
            - read
            - create
          description: The geo-location where the resource lives
        properties:
          description: The properties that define the step.
          $ref: '#/components/schemas/StepProperties'
      type: object
    StepProperties:
      description: The properties of a step resource.
      type: object
      discriminator:
        propertyName: stepType
      properties:
        stepType:
          type: string
          description: The type of step.
          enum:
            - Wait
            - HealthCheck
          x-ms-enum:
            name: StepType
            modelAsString: false
      required:
        - stepType
    HealthCheckStepProperties:
      x-ms-discriminator-value: HealthCheck
      description: Defines the properties of a health check step.
      required:
        - attributes
      properties:
        stepType:
          type: string
          description: The type of step.
          enum:
            - Wait
            - HealthCheck
          x-ms-enum:
            name: StepType
            modelAsString: false
        attributes:
          description: The health check step attributes
          $ref: '#/components/schemas/HealthCheckStepAttributes'
      type: object
    HealthCheckStepAttributes:
      type: object
      description: The attributes for the health check step.
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
          description: The type of health check.
          example: REST
        waitDuration:
          type: string
          description: The duration in ISO 8601 format for which health check waits idly without any checks.
          example: PT15M
        maxElasticDuration:
          type: string
          description: The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn't. Health check starts to enforce healthyStateDuration once resource becomes healthy.
          example: PT30M
        healthyStateDuration:
          type: string
          description: The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal.
          example: PT60M
      required:
        - type
        - healthyStateDuration
    RestHealthCheckStepAttributes:
      x-ms-discriminator-value: REST
      description: Defines the REST health check step properties.
      properties:
        type:
          type: string
          description: The type of health check.
          example: REST
        waitDuration:
          type: string
          description: The duration in ISO 8601 format for which health check waits idly without any checks.
          example: PT15M
        maxElasticDuration:
          type: string
          description: The duration in ISO 8601 format for which the health check waits for the resource to become healthy. Health check fails if it doesn't. Health check starts to enforce healthyStateDuration once resource becomes healthy.
          example: PT30M
        healthyStateDuration:
          type: string
          description: The duration in ISO 8601 format for which the resource is expected to be continuously healthy. If maxElasticDuration is specified, healthy state duration is enforced after the detection of first healthy signal.
          example: PT60M
        healthChecks:
          type: array
          items:
            $ref: '#/components/schemas/RestHealthCheck'
          description: The list of checks that form the health check step.
      type: object
    RestParameters:
      type: object
      description: The parameters for the REST health check.
      properties:
        healthChecks:
          type: array
          items:
            $ref: '#/components/schemas/RestHealthCheck'
          description: The list of checks that form the health check step.
      required:
        - healthChecks
    RestHealthCheck:
      type: object
      description: A REST based health check
      properties:
        name:
          type: string
          description: A unique name for this check.
        request:
          description: The request to the health provider.
          $ref: '#/components/schemas/RestRequest'
        response:
          description: The expected response from the health provider. If no expected response is provided, the default is to expect the received response to have an HTTP status code of 200 OK.
          $ref: '#/components/schemas/RestResponse'
      required:
        - name
        - request
    RestRequest:
      type: object
      description: The properties that make up a REST request
      properties:
        method:
          type: string
          description: The HTTP method to use for the request.
          enum:
            - GET
            - POST
          x-ms-enum:
            name: RestRequestMethod
            modelAsString: false
        uri:
          type: string
          description: The HTTP URI to use for the request.
        authentication:
          description: The authentication information required in the request to the health provider.
          $ref: '#/components/schemas/RestRequestAuthentication'
      required:
        - method
        - uri
        - authentication
    RestRequestAuthentication:
      type: object
      description: The authentication information required in the REST health check request to the health provider.
      discriminator:
        propertyName: type
      properties:
        type:
          type: string
          description: The authentication type.
          example: ApiKey
          enum:
            - ApiKey
            - RolloutIdentity
          x-ms-enum:
            name: RestAuthType
            modelAsString: false
      required:
        - type
    RolloutIdentityAuthentication:
      x-ms-discriminator-value: RolloutIdentity
      description: RolloutIdentity uses the user-assigned managed identity authentication context specified in the Identity property during rollout creation.
      properties:
        type:
          type: string
          description: The authentication type.
          example: ApiKey
          enum:
            - ApiKey
            - RolloutIdentity
          x-ms-enum:
            name: RestAuthType
            modelAsString: false
      type: object
    ApiKeyAuthentication:
      x-ms-discriminator-value: ApiKey
      description: ApiKey authentication gives a name and a value that can be included in either the request header or query parameters.
      required:
        - name
        - in
        - value
      properties:
        type:
          type: string
          description: The authentication type.
          example: ApiKey
          enum:
            - ApiKey
            - RolloutIdentity
          x-ms-enum:
            name: RestAuthType
            modelAsString: false
        name:
          type: string
          description: The key name of the authentication key/value pair.
        in:
          type: string
          description: The location of the authentication key/value pair in the request.
          enum:
            - Query
            - Header
          x-ms-enum:
            name: RestAuthLocation
            modelAsString: false
        value:
          type: string
          description: The value of the authentication key/value pair.
      type: object
    RestResponse:
      type: object
      description: The properties that make up the expected REST response
      properties:
        successStatusCodes:
          type: array
          description: The HTTP status codes expected in a successful health check response. The response is expected to match one of the given status codes. If no expected status codes are provided, default expected status code is 200 OK.
          items:
            type: string
          example:
            - Ok
            - No Content
        regex:
          type: object
          description: The regular expressions to match the response content with.
          properties:
            matches:
              type: array
              description: The list of regular expressions.
              items:
                type: string
              example:
                - Contoso-Service-EndToEnd
                - |-
                  (?i)"health_status":((.|
                  )*)"(green|yellow)"
                - '(?mi)^("application_host": 94781052)$'
            matchQuantifier:
              type: string
              description: Indicates whether any or all of the expressions should match with the response content.
              enum:
                - All
                - Any
              x-ms-enum:
                name: RestMatchQuantifier
                modelAsString: false
    WaitStepProperties:
      x-ms-discriminator-value: Wait
      description: Defines the properties of a Wait step.
      required:
        - attributes
      properties:
        stepType:
          type: string
          description: The type of step.
          enum:
            - Wait
            - HealthCheck
          x-ms-enum:
            name: StepType
            modelAsString: false
        attributes:
          description: The Wait attributes
          $ref: '#/components/schemas/WaitStepAttributes'
      type: object
    WaitStepAttributes:
      type: object
      description: The parameters for the wait step.
      properties:
        duration:
          type: string
          description: The duration in ISO 8601 format of how long the wait should be.
          example: PT30M
      required:
        - duration
    ServiceTopologiesListResult:
      description: The list of service topologies.
      type: array
      items:
        $ref: '#/components/schemas/ServiceTopologyResource'
    ServiceListResult:
      description: The list of services.
      type: array
      items:
        $ref: '#/components/schemas/ServiceResource'
    ServiceUnitListResult:
      description: The list of service units.
      type: array
      items:
        $ref: '#/components/schemas/ServiceUnitResource'
    StepResourceListResult:
      description: The list of steps.
      type: array
      items:
        $ref: '#/components/schemas/StepResource'
    ArtifactSourceListResult:
      description: The list of artifact sources.
      type: array
      items:
        $ref: '#/components/schemas/ArtifactSource'
    RolloutListResult:
      description: The list of rollouts.
      type: array
      items:
        $ref: '#/components/schemas/Rollout'
    Resource:
      title: Resource
      description: Common fields that are returned in the response for all Azure Resource Manager resources
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        name:
          readOnly: true
          type: string
          description: The name of the resource
        type:
          readOnly: true
          type: string
          description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
      x-ms-azure-resource: true
    AzureEntityResource:
      x-ms-client-name: AzureEntityResource
      title: Entity Resource
      description: The resource model definition for an Azure Resource Manager resource with an etag.
      properties:
        etag:
          type: string
          readOnly: true
          description: Resource Etag.
        id:
          readOnly: true
          type: string
          description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        name:
          readOnly: true
          type: string
          description: The name of the resource
        type:
          readOnly: true
          type: string
          description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
      type: object
    TrackedResource:
      title: Tracked Resource
      description: The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'
      required:
        - location
      properties:
        tags:
          type: object
          additionalProperties:
            type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: Resource tags.
        location:
          type: string
          x-ms-mutability:
            - read
            - create
          description: The geo-location where the resource lives
        id:
          readOnly: true
          type: string
          description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        name:
          readOnly: true
          type: string
          description: The name of the resource
        type:
          readOnly: true
          type: string
          description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
      type: object
    ProxyResource:
      title: Proxy Resource
      description: The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location
      properties:
        id:
          readOnly: true
          type: string
          description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        name:
          readOnly: true
          type: string
          description: The name of the resource
        type:
          readOnly: true
          type: string
          description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
      type: object
    ResourceModelWithAllowedPropertySet:
      description: The resource model definition containing the full set of allowed properties for a resource. Except properties bag, there cannot be a top level property outside of this set.
      type: object
      properties:
        id:
          readOnly: true
          type: string
          x-ms-mutability:
            - read
          description: Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        name:
          readOnly: true
          type: string
          description: The name of the resource
        type:
          readOnly: true
          type: string
          x-ms-mutability:
            - read
          description: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        location:
          type: string
          x-ms-mutability:
            - read
            - create
          description: The geo-location where the resource lives
        managedBy:
          type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.
        kind:
          type: string
          x-ms-mutability:
            - read
            - create
          description: Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
          pattern: ^[-\w\._,\(\)]+$
        etag:
          readOnly: true
          type: string
          description: 'The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. '
        tags:
          type: object
          additionalProperties:
            type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: Resource tags.
        identity:
          allOf:
            - $ref: '#/components/schemas/Identity'
        sku:
          allOf:
            - $ref: '#/components/schemas/Sku'
        plan:
          allOf:
            - $ref: '#/components/schemas/Plan'
      x-ms-azure-resource: true
    Sku:
      description: The resource model definition representing SKU
      type: object
      properties:
        name:
          type: string
          description: The name of the SKU. Ex - P3. It is typically a letter+number code
        tier:
          type: string
          enum:
            - Free
            - Basic
            - Standard
            - Premium
          x-ms-enum:
            name: SkuTier
            modelAsString: false
          description: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
        size:
          type: string
          description: 'The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. '
        family:
          type: string
          description: If the service has different generations of hardware, for the same SKU, then that can be captured here.
        capacity:
          type: integer
          format: int32
          description: If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.
      required:
        - name
    Plan:
      type: object
      properties:
        name:
          type: string
          description: A user defined name of the 3rd Party Artifact that is being procured.
        publisher:
          type: string
          description: The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
        product:
          type: string
          description: 'The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. '
        promotionCode:
          type: string
          description: A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        version:
          type: string
          description: The version of the desired product/artifact.
      description: Plan for the resource.
      required:
        - name
        - publisher
        - product
    ErrorResponse:
      title: Error Response
      description: Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.)
      type: object
      properties:
        code:
          readOnly: true
          type: string
          description: The error code.
        message:
          readOnly: true
          type: string
          description: The error message.
        target:
          readOnly: true
          type: string
          description: The error target.
        details:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ErrorResponse'
          x-ms-identifiers:
            - message
            - target
          description: The error details.
        additionalInfo:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ErrorAdditionalInfo'
          x-ms-identifiers: []
          description: The error additional info.
    ErrorAdditionalInfo:
      type: object
      properties:
        type:
          readOnly: true
          type: string
          description: The additional info type.
        info:
          readOnly: true
          type: object
          description: The additional info.
      description: The resource management error additional info.
    OperationListResult:
      description: A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.
      type: object
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
          x-ms-identifiers:
            - name
          description: List of operations supported by the resource provider
          readOnly: true
        nextLink:
          type: string
          description: URL to get the next set of operation list results (if there are any).
          readOnly: true
    locationData:
      description: Metadata pertaining to the geographic location of the resource.
      type: object
      properties:
        name:
          type: string
          maxLength: 256
          description: A canonical name for the geographic or physical location.
        city:
          type: string
          description: The city or locality where the resource is located.
        district:
          type: string
          description: The district, state, or province where the resource is located.
        countryOrRegion:
          type: string
          description: The country or region where the resource is located
      required:
        - name
    systemData:
      description: Metadata pertaining to creation and last modification of the resource.
      type: object
      readOnly: true
      properties:
        createdBy:
          type: string
          description: The identity that created the resource.
        createdByType:
          type: string
          description: The type of identity that created the resource.
          enum:
            - User
            - Application
            - ManagedIdentity
            - Key
          x-ms-enum:
            name: createdByType
            modelAsString: true
        createdAt:
          type: string
          format: date-time
          description: The timestamp of resource creation (UTC).
        lastModifiedBy:
          type: string
          description: The identity that last modified the resource.
        lastModifiedByType:
          type: string
          description: The type of identity that last modified the resource.
          enum:
            - User
            - Application
            - ManagedIdentity
            - Key
          x-ms-enum:
            name: createdByType
            modelAsString: true
        lastModifiedAt:
          type: string
          format: date-time
          description: The timestamp of resource last modification (UTC)
    encryptionProperties:
      description: Configuration of key for data encryption
      type: object
      properties:
        status:
          description: Indicates whether or not the encryption is enabled for container registry.
          enum:
            - enabled
            - disabled
          type: string
          x-ms-enum:
            name: EncryptionStatus
            modelAsString: true
        keyVaultProperties:
          $ref: '#/components/schemas/KeyVaultProperties'
          description: Key vault properties.
    KeyVaultProperties:
      type: object
      properties:
        keyIdentifier:
          description: Key vault uri to access the encryption key.
          type: string
        identity:
          description: The client ID of the identity which will be used to access key vault.
          type: string
  x-stackQL-resources:
    service_topologies:
      id: azure.deployment_manager.service_topologies
      name: service_topologies
      title: Service_topologies
      methods:
        ServiceTopologies_CreateOrUpdate:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1serviceTopologies~1{serviceTopologyName}~1?api-version=2019-11-01-preview/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        ServiceTopologies_Get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1serviceTopologies~1{serviceTopologyName}~1?api-version=2019-11-01-preview/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        ServiceTopologies_Delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1serviceTopologies~1{serviceTopologyName}~1?api-version=2019-11-01-preview/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        ServiceTopologies_List:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1serviceTopologies~1?api-version=2019-11-01-preview/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/service_topologies/methods/ServiceTopologies_List'
        insert:
          - $ref: '#/components/x-stackQL-resources/service_topologies/methods/ServiceTopologies_CreateOrUpdate'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/service_topologies/methods/ServiceTopologies_Delete'
    services:
      id: azure.deployment_manager.services
      name: services
      title: Services
      methods:
        Services_CreateOrUpdate:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1serviceTopologies~1{serviceTopologyName}~1services~1{serviceName}~1?api-version=2019-11-01-preview/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        Services_Get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1serviceTopologies~1{serviceTopologyName}~1services~1{serviceName}~1?api-version=2019-11-01-preview/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        Services_Delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1serviceTopologies~1{serviceTopologyName}~1services~1{serviceName}~1?api-version=2019-11-01-preview/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        Services_List:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1serviceTopologies~1{serviceTopologyName}~1services~1?api-version=2019-11-01-preview/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/services/methods/Services_List'
        insert:
          - $ref: '#/components/x-stackQL-resources/services/methods/Services_CreateOrUpdate'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/services/methods/Services_Delete'
    service_units:
      id: azure.deployment_manager.service_units
      name: service_units
      title: Service_units
      methods:
        ServiceUnits_CreateOrUpdate:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1serviceTopologies~1{serviceTopologyName}~1services~1{serviceName}~1serviceUnits~1{serviceUnitName}~1?api-version=2019-11-01-preview/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        ServiceUnits_Get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1serviceTopologies~1{serviceTopologyName}~1services~1{serviceName}~1serviceUnits~1{serviceUnitName}~1?api-version=2019-11-01-preview/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        ServiceUnits_Delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1serviceTopologies~1{serviceTopologyName}~1services~1{serviceName}~1serviceUnits~1{serviceUnitName}~1?api-version=2019-11-01-preview/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        ServiceUnits_List:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1serviceTopologies~1{serviceTopologyName}~1services~1{serviceName}~1serviceUnits~1?api-version=2019-11-01-preview/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/service_units/methods/ServiceUnits_List'
        insert:
          - $ref: '#/components/x-stackQL-resources/service_units/methods/ServiceUnits_CreateOrUpdate'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/service_units/methods/ServiceUnits_Delete'
    steps:
      id: azure.deployment_manager.steps
      name: steps
      title: Steps
      methods:
        Steps_CreateOrUpdate:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1steps~1{stepName}~1?api-version=2019-11-01-preview/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        Steps_Get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1steps~1{stepName}~1?api-version=2019-11-01-preview/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        Steps_Delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1steps~1{stepName}~1?api-version=2019-11-01-preview/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        Steps_List:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1steps~1?api-version=2019-11-01-preview/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/steps/methods/Steps_List'
        insert:
          - $ref: '#/components/x-stackQL-resources/steps/methods/Steps_CreateOrUpdate'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/steps/methods/Steps_Delete'
    rollouts:
      id: azure.deployment_manager.rollouts
      name: rollouts
      title: Rollouts
      methods:
        Rollouts_CreateOrUpdate:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1rollouts~1{rolloutName}~1?api-version=2019-11-01-preview/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        Rollouts_Get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1rollouts~1{rolloutName}~1?api-version=2019-11-01-preview/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        Rollouts_Delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1rollouts~1{rolloutName}~1?api-version=2019-11-01-preview/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        Rollouts_Cancel:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1rollouts~1{rolloutName}~1cancel~1?api-version=2019-11-01-preview/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        Rollouts_Restart:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1rollouts~1{rolloutName}~1restart~1?api-version=2019-11-01-preview/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        Rollouts_List:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1rollouts~1?api-version=2019-11-01-preview/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/rollouts/methods/Rollouts_List'
        insert:
          - $ref: '#/components/x-stackQL-resources/rollouts/methods/Rollouts_CreateOrUpdate'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/rollouts/methods/Rollouts_Delete'
    artifact_sources:
      id: azure.deployment_manager.artifact_sources
      name: artifact_sources
      title: Artifact_sources
      methods:
        ArtifactSources_CreateOrUpdate:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1artifactSources~1{artifactSourceName}~1?api-version=2019-11-01-preview/put'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        ArtifactSources_Get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1artifactSources~1{artifactSourceName}~1?api-version=2019-11-01-preview/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        ArtifactSources_Delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1artifactSources~1{artifactSourceName}~1?api-version=2019-11-01-preview/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        ArtifactSources_List:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.DeploymentManager~1artifactSources~1?api-version=2019-11-01-preview/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/artifact_sources/methods/ArtifactSources_List'
        insert:
          - $ref: '#/components/x-stackQL-resources/artifact_sources/methods/ArtifactSources_CreateOrUpdate'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/artifact_sources/methods/ArtifactSources_Delete'
    operations:
      id: azure.deployment_manager.operations
      name: operations
      title: Operations
      methods:
        Operations_List:
          operation:
            $ref: '#/paths/~1providers~1Microsoft.DeploymentManager~1operations~1?api-version=2019-11-01-preview/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/Operations_List'
        insert: []
        update: []
        delete: []
paths:
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/?api-version=2019-11-01-preview:
    put:
      tags:
        - ServiceTopologies
      operationId: ServiceTopologies_CreateOrUpdate
      summary: Creates or updates a service topology.
      description: Synchronously creates a new service topology or updates an existing service topology.
      requestBody:
        description: Source topology object defines the resource.
        required: true
        x-ms-requestBody-name: serviceTopologyInfo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceTopologyResource'
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/serviceTopologyName'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTopologyResource'
        default:
          description: All non-success conditions are handled using the standard Error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: service_topologies
      x-stackQL-verb: insert
    get:
      tags:
        - ServiceTopologies
      operationId: ServiceTopologies_Get
      summary: Gets the service topology.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/serviceTopologyName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTopologyResource'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: service_topologies
      x-stackQL-verb: exec
    delete:
      tags:
        - ServiceTopologies
      operationId: ServiceTopologies_Delete
      summary: Deletes the service topology.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/serviceTopologyName'
      responses:
        '200':
          description: The topology was successfully deleted.
        '204':
          description: The topology was not found and the operation is considered success.
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: service_topologies
      x-stackQL-verb: delete
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/?api-version=2019-11-01-preview:
    get:
      tags:
        - ServiceTopologies
      operationId: ServiceTopologies_List
      summary: Lists the service topologies in the resource group.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceTopologiesListResult'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: service_topologies
      x-stackQL-verb: select
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/?api-version=2019-11-01-preview:
    put:
      tags:
        - Services
      operationId: Services_CreateOrUpdate
      summary: Creates or updates a service in the service topology.
      description: Synchronously creates a new service or updates an existing service.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/serviceTopologyName'
        - $ref: '#/components/parameters/serviceName'
      requestBody:
        description: The service object
        required: true
        x-ms-requestBody-name: serviceInfo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceResource'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResource'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: services
      x-stackQL-verb: insert
    get:
      tags:
        - Services
      operationId: Services_Get
      summary: Gets the service.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/serviceTopologyName'
        - $ref: '#/components/parameters/serviceName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResource'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: services
      x-stackQL-verb: exec
    delete:
      tags:
        - Services
      operationId: Services_Delete
      summary: Deletes the service.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/serviceTopologyName'
        - $ref: '#/components/parameters/serviceName'
      responses:
        '200':
          description: The service was successfully deleted.
        '204':
          description: The service was not found and the operation is considered success.
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: services
      x-stackQL-verb: delete
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/?api-version=2019-11-01-preview:
    get:
      tags:
        - Services
      operationId: Services_List
      summary: Lists the services in the service topology.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/serviceTopologyName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceListResult'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: services
      x-stackQL-verb: select
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/{serviceUnitName}/?api-version=2019-11-01-preview:
    put:
      tags:
        - ServiceUnits
      operationId: ServiceUnits_CreateOrUpdate
      x-ms-long-running-operation: true
      summary: Creates or updates a service unit under the service in the service topology.
      description: This is an asynchronous operation and can be polled to completion using the operation resource returned by this operation.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/serviceTopologyName'
        - $ref: '#/components/parameters/serviceName'
        - $ref: '#/components/parameters/serviceUnitName'
      requestBody:
        description: The service unit resource object.
        required: true
        x-ms-requestBody-name: serviceUnitInfo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceUnitResource'
      responses:
        '201':
          description: This is a long running operation. The operation returns a 201 if the validation is complete. The response includes an Azure-AsyncOperation header that contains a status URL. Clients are expected to poll the status URL for the status of the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnitResource'
          headers:
            Azure-AsyncOperation:
              schema:
                type: string
              description: Contains the status URL on which clients are expected to poll the status of the operation.
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: service_units
      x-stackQL-verb: insert
    get:
      tags:
        - ServiceUnits
      operationId: ServiceUnits_Get
      summary: Gets the service unit.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/serviceTopologyName'
        - $ref: '#/components/parameters/serviceName'
        - $ref: '#/components/parameters/serviceUnitName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnitResource'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: service_units
      x-stackQL-verb: exec
    delete:
      tags:
        - ServiceUnits
      operationId: ServiceUnits_Delete
      summary: Deletes the service unit.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/serviceTopologyName'
        - $ref: '#/components/parameters/serviceName'
        - $ref: '#/components/parameters/serviceUnitName'
      responses:
        '200':
          description: The service unit was successfully deleted.
        '204':
          description: The service unit was not found and the operation is considered success.
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: service_units
      x-stackQL-verb: delete
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/serviceTopologies/{serviceTopologyName}/services/{serviceName}/serviceUnits/?api-version=2019-11-01-preview:
    get:
      tags:
        - ServiceUnits
      operationId: ServiceUnits_List
      summary: Lists the service units under a service in the service topology.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/serviceTopologyName'
        - $ref: '#/components/parameters/serviceName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnitListResult'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: service_units
      x-stackQL-verb: select
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/{stepName}/?api-version=2019-11-01-preview:
    put:
      tags:
        - Steps
      operationId: Steps_CreateOrUpdate
      summary: Creates or updates a rollout step with the given step properties.
      description: Synchronously creates a new step or updates an existing step.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/stepName'
      requestBody:
        description: The step object.
        x-ms-requestBody-name: stepInfo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepResource'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepResource'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: steps
      x-stackQL-verb: insert
    get:
      tags:
        - Steps
      operationId: Steps_Get
      summary: Gets the step.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/stepName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepResource'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: steps
      x-stackQL-verb: exec
    delete:
      tags:
        - Steps
      operationId: Steps_Delete
      summary: Deletes the step.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/stepName'
      responses:
        '200':
          description: The step was successfully deleted.
        '204':
          description: The step was not found and the operation is considered success.
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: steps
      x-stackQL-verb: delete
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/steps/?api-version=2019-11-01-preview:
    get:
      tags:
        - Steps
      operationId: Steps_List
      summary: Lists the steps in a resource group.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepResourceListResult'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: steps
      x-stackQL-verb: select
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}/?api-version=2019-11-01-preview:
    put:
      tags:
        - Rollouts
      operationId: Rollouts_CreateOrUpdate
      x-ms-long-running-operation: true
      summary: Creates or updates a rollout.
      description: This is an asynchronous operation and can be polled to completion using the location header returned by this operation.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/rolloutName'
      requestBody:
        description: Source rollout request object that defines the rollout.
        x-ms-requestBody-name: rolloutRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolloutRequest'
      responses:
        '201':
          description: This is a long running operation. The operation returns a 201 if the request was successfully registered and basic validation is successful. The response includes an Azure-AsyncOperation header that contains the operation status URL. Clients are expected to poll the status URL for the status of the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolloutRequest'
          headers:
            Azure-AsyncOperation:
              schema:
                type: string
              description: Contains the status URL on which clients are expected to poll the status of the operation.
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: rollouts
      x-stackQL-verb: insert
    get:
      tags:
        - Rollouts
      operationId: Rollouts_Get
      summary: Gets detailed information of a rollout.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/rolloutName'
        - $ref: '#/components/parameters/retryAttempt'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rollout'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: rollouts
      x-stackQL-verb: exec
    delete:
      tags:
        - Rollouts
      operationId: Rollouts_Delete
      summary: Deletes a rollout resource.
      description: Only rollouts in terminal state can be deleted.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/rolloutName'
      responses:
        '200':
          description: The rollout was successfully deleted.
        '204':
          description: The rollout was not found and the operation is considered success.
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: rollouts
      x-stackQL-verb: delete
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}/cancel/?api-version=2019-11-01-preview:
    post:
      tags:
        - Rollouts
      operationId: Rollouts_Cancel
      summary: Stops a running rollout.
      description: Only running rollouts can be canceled.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/rolloutName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rollout'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: rollouts
      x-stackQL-verb: exec
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/{rolloutName}/restart/?api-version=2019-11-01-preview:
    post:
      tags:
        - Rollouts
      operationId: Rollouts_Restart
      summary: Restarts a failed rollout and optionally skips all succeeded steps.
      description: Only failed rollouts can be restarted.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/rolloutName'
        - name: skipSucceeded
          in: query
          description: If true, will skip all succeeded steps so far in the rollout. If false, will execute the entire rollout again regardless of the current state of individual resources. Defaults to false if not specified.
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rollout'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: rollouts
      x-stackQL-verb: exec
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/rollouts/?api-version=2019-11-01-preview:
    get:
      tags:
        - Rollouts
      operationId: Rollouts_List
      summary: Lists the rollouts in a resource group.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolloutListResult'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: rollouts
      x-stackQL-verb: select
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/{artifactSourceName}/?api-version=2019-11-01-preview:
    put:
      tags:
        - ArtifactSources
      operationId: ArtifactSources_CreateOrUpdate
      summary: Creates or updates an artifact source.
      description: Synchronously creates a new artifact source or updates an existing artifact source.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/artifactSourceName'
      requestBody:
        description: Source object that defines the resource.
        x-ms-requestBody-name: artifactSourceInfo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtifactSource'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactSource'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: artifact_sources
      x-stackQL-verb: insert
    get:
      tags:
        - ArtifactSources
      operationId: ArtifactSources_Get
      summary: Gets an artifact source.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/artifactSourceName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactSource'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: artifact_sources
      x-stackQL-verb: exec
    delete:
      tags:
        - ArtifactSources
      operationId: ArtifactSources_Delete
      summary: Deletes an artifact source.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
        - $ref: '#/components/parameters/artifactSourceName'
      responses:
        '200':
          description: The artifact source was successfully deleted.
        '204':
          description: The artifact source was not found and the operation is considered success.
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: artifact_sources
      x-stackQL-verb: delete
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeploymentManager/artifactSources/?api-version=2019-11-01-preview:
    get:
      tags:
        - ArtifactSources
      operationId: ArtifactSources_List
      summary: Lists the artifact sources in a resource group.
      parameters:
        - $ref: '#/components/parameters/subscriptionId'
        - $ref: '#/components/parameters/resourceGroupName'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtifactSourceListResult'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: artifact_sources
      x-stackQL-verb: select
  /providers/Microsoft.DeploymentManager/operations/?api-version=2019-11-01-preview:
    get:
      tags:
        - Operations
      operationId: Operations_List
      summary: Lists the supported operations.
      parameters: []
      responses:
        '200':
          description: The operations are successfully returned. The response code does not determine if the request which this operation corresponds to is successful. Check the response content for the status and any error information on failures.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationsList'
        default:
          description: All non-success conditions are handled using the standard error contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudError'
      x-stackQL-resource: operations
      x-stackQL-verb: select
