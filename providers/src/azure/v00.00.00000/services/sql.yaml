openapi: 3.0.0
servers:
  - url: https://management.azure.com/
info:
  title: Azure SQL Database
  description: Build limitless, trusted, AI-ready apps on a fully managed SQL database
  contact:
    name: StackQL Studios
    url: https://stackql.io/
    email: info@stackql.io
  version: 2024-10-15-stackql-generated
security:
  - azure_auth:
      - user_impersonation
components:
  securitySchemes:
    azure_auth:
      description: Azure Active Directory OAuth2 Flow.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://login.microsoftonline.com/common/oauth2/authorize
          scopes:
            user_impersonation: impersonate your user account
  parameters:
    ServerNameParameter:
      name: serverName
      in: path
      description: The name of the server.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    DatabaseNameParameter:
      name: databaseName
      in: path
      description: The name of the database.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    ManagedInstanceNameParameter:
      name: managedInstanceName
      in: path
      description: The name of the managed instance.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    GeoBackupPolicyNameParameter:
      name: geoBackupPolicyName
      in: path
      description: The name of the geo backup policy.
      required: true
      x-ms-parameter-location: method
      schema:
        enum:
          - Default
        x-ms-enum:
          modelAsString: true
          name: GeoBackupPolicyName
        type: string
    DatabaseExpandParameter:
      name: $expand
      in: query
      description: 'A comma separated list of child objects to expand in the response. Possible properties: serviceTierAdvisors, transparentDataEncryption.'
      required: false
      x-ms-parameter-location: method
      schema:
        type: string
    BlobAuditingPolicyNameParameter:
      name: blobAuditingPolicyName
      in: path
      description: The name of the blob auditing policy.
      required: true
      x-ms-parameter-location: method
      schema:
        enum:
          - default
        x-ms-enum:
          name: blobAuditingPolicyName
          modelAsString: false
        type: string
    SubscriptionIdParameter:
      name: subscriptionId
      in: path
      description: The subscription ID that identifies an Azure subscription.
      required: true
      x-ms-parameter-location: client
      schema:
        type: string
    ApiVersionParameter:
      name: api-version
      in: query
      description: The API version to use for the request.
      required: false
      x-ms-parameter-location: client
      schema:
        type: string
    ResourceGroupNameParameter:
      name: resourceGroupName
      in: path
      description: The name of the resource group. The name is case insensitive.
      required: true
      x-ms-parameter-location: method
      schema:
        minLength: 1
        maxLength: 90
        type: string
    ManagementGroupNameParameter:
      name: managementGroupName
      in: path
      description: The name of the management group. The name is case insensitive.
      required: true
      x-ms-parameter-location: method
      schema:
        minLength: 1
        maxLength: 90
        type: string
    ScopeParameter:
      name: scope
      in: path
      description: The scope at which the operation is performed.
      required: true
      x-ms-skip-url-encoding: true
      x-ms-parameter-location: method
      schema:
        minLength: 1
        type: string
    TenantIdParameter:
      name: tenantId
      in: path
      description: The Azure tenant ID. This is a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000)
      required: true
      x-ms-parameter-location: method
      schema:
        format: uuid
        type: string
    OperationIdParameter:
      name: operationId
      in: path
      description: The ID of an ongoing async operation.
      required: true
      x-ms-parameter-location: method
      schema:
        minLength: 1
        type: string
    LocationParameter:
      name: location
      in: path
      description: The name of the Azure region.
      required: true
      x-ms-parameter-location: method
      schema:
        minLength: 1
        type: string
    If-Match:
      name: ifMatch
      in: header
      description: The If-Match header that makes a request conditional.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    If-None-Match:
      name: ifNoneMatch
      in: header
      description: The If-None-Match header that makes a request conditional.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    ResourceGroupParameter:
      name: resourceGroupName
      in: path
      description: The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    VirtualClusterNameParameter:
      name: virtualClusterName
      in: path
      description: The name of the virtual cluster.
      required: true
      x-ms-parameter-location: method
      schema:
        type: string
    DataMaskingPolicyNameParameter:
      name: dataMaskingPolicyName
      in: path
      description: The name of the database for which the data masking rule applies.
      required: true
      x-ms-parameter-location: method
      schema:
        enum:
          - Default
        x-ms-enum:
          modelAsString: false
          name: DataMaskingPolicyName
        type: string
  schemas:
    MetricValue:
      properties:
        count:
          readOnly: true
          type: number
          format: int32
          description: The number of values for the metric.
        average:
          readOnly: true
          type: number
          format: double
          description: The average value of the metric.
        maximum:
          readOnly: true
          type: number
          format: double
          description: The max value of the metric.
        minimum:
          readOnly: true
          type: number
          format: double
          description: The min value of the metric.
        timestamp:
          readOnly: true
          type: string
          format: date-time
          description: The metric timestamp (ISO-8601 format).
        total:
          readOnly: true
          type: number
          format: double
          description: The total value of the metric.
      description: Represents database metrics.
      type: object
    MetricName:
      properties:
        value:
          readOnly: true
          type: string
          description: The name of the database metric.
        localizedValue:
          readOnly: true
          type: string
          description: The friendly name of the database metric.
      description: A database metric name.
      type: object
    Metric:
      properties:
        startTime:
          readOnly: true
          type: string
          format: date-time
          description: The start time for the metric (ISO-8601 format).
        endTime:
          readOnly: true
          type: string
          format: date-time
          description: The end time for the metric (ISO-8601 format).
        timeGrain:
          readOnly: true
          type: string
          description: The time step to be used to summarize the metric values.
        unit:
          readOnly: true
          type: string
          description: The unit of the metric.
          enum:
            - count
            - bytes
            - seconds
            - percent
            - countPerSecond
            - bytesPerSecond
          x-ms-enum:
            modelAsString: true
            name: UnitType
        name:
          readOnly: true
          $ref: '#/components/schemas/MetricName'
          description: The name information for the metric.
        metricValues:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/MetricValue'
          description: The metric values for the specified time window and timestep.
      description: Database metrics.
      type: object
    MetricListResult:
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/Metric'
          description: The list of metrics for the database.
      required:
        - value
      description: The response to a list database metrics request.
      type: object
    MetricAvailability:
      properties:
        retention:
          readOnly: true
          type: string
          description: The length of retention for the database metric.
        timeGrain:
          readOnly: true
          type: string
          description: The granularity of the database metric.
      description: A metric availability value.
      type: object
    MetricDefinition:
      properties:
        name:
          readOnly: true
          $ref: '#/components/schemas/MetricName'
          description: The name information for the metric.
        primaryAggregationType:
          readOnly: true
          type: string
          description: The primary aggregation type defining how metric values are displayed.
          enum:
            - None
            - Average
            - Count
            - Minimum
            - Maximum
            - Total
          x-ms-enum:
            modelAsString: true
            name: PrimaryAggregationType
        resourceUri:
          readOnly: true
          type: string
          description: The resource uri of the database.
        unit:
          readOnly: true
          type: string
          description: The unit of the metric.
          enum:
            - Count
            - Bytes
            - Seconds
            - Percent
            - CountPerSecond
            - BytesPerSecond
          x-ms-enum:
            modelAsString: true
            name: UnitDefinitionType
        metricAvailabilities:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/MetricAvailability'
          description: The list of database metric availabilities for the metric.
      description: A database metric definition.
      type: object
    MetricDefinitionListResult:
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/MetricDefinition'
          description: The list of metric definitions for the database.
      required:
        - value
      description: The response to a list database metric definitions request.
      type: object
    InstancePool:
      description: An Azure SQL instance pool.
      required:
        - location
      properties:
        location:
          description: Resource location.
          type: string
          x-ms-mutability:
            - read
            - create
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
        sku:
          $ref: '#/components/schemas/Sku'
          description: The name and tier of the SKU.
        properties:
          $ref: '#/components/schemas/InstancePoolProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    InstancePoolListResult:
      description: A list of Azure SQL instance pools.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/InstancePool'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    InstancePoolProperties:
      description: Properties of an instance pool.
      required:
        - subnetId
        - vCores
        - licenseType
      type: object
      properties:
        subnetId:
          description: Resource ID of the subnet to place this instance pool in.
          type: string
          x-ms-mutability:
            - read
            - create
        vCores:
          format: int32
          description: Count of vCores belonging to this instance pool.
          type: integer
        licenseType:
          description: The license type. Possible values are 'LicenseIncluded' (price for SQL license is included) and 'BasePrice' (without SQL license price).
          enum:
            - LicenseIncluded
            - BasePrice
          type: string
          x-ms-enum:
            name: InstancePoolLicenseType
            modelAsString: true
        dnsZone:
          description: The Dns Zone that the managed instance pool is in.
          type: string
          readOnly: true
        maintenanceConfigurationId:
          description: Specifies maintenance configuration id to apply to this managed instance.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - type: Microsoft.Maintenance/publicMaintenanceConfigurations
    InstancePoolUpdate:
      description: An update to an Instance pool.
      properties:
        sku:
          $ref: '#/components/schemas/Sku'
          description: The name and tier of the SKU.
        properties:
          $ref: '#/components/schemas/InstancePoolProperties'
          description: Resource properties.
          x-ms-client-flatten: true
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
      type: object
    ElasticPoolOperationListResult:
      description: The response to a list elastic pool operations request
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ElasticPoolOperation'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ElasticPoolOperationProperties:
      description: The properties of a elastic pool operation.
      type: object
      properties:
        elasticPoolName:
          description: The name of the elastic pool the operation is being performed on.
          type: string
          readOnly: true
        operation:
          description: The name of operation.
          type: string
          readOnly: true
        operationFriendlyName:
          description: The friendly name of operation.
          type: string
          readOnly: true
        percentComplete:
          format: int32
          description: The percentage of the operation completed.
          type: integer
          readOnly: true
        serverName:
          description: The name of the server.
          type: string
          readOnly: true
        startTime:
          format: date-time
          description: The operation start time.
          type: string
          readOnly: true
        state:
          description: The operation state.
          type: string
          readOnly: true
        errorCode:
          format: int32
          description: The operation error code.
          type: integer
          readOnly: true
        errorDescription:
          description: The operation error description.
          type: string
          readOnly: true
        errorSeverity:
          format: int32
          description: The operation error severity.
          type: integer
          readOnly: true
        isUserError:
          description: Whether or not the error is a user error.
          type: boolean
          readOnly: true
        estimatedCompletionTime:
          format: date-time
          description: The estimated completion time of the operation.
          type: string
          readOnly: true
        description:
          description: The operation description.
          type: string
          readOnly: true
        isCancellable:
          description: Whether the operation can be cancelled.
          type: boolean
          readOnly: true
    ElasticPoolOperation:
      description: A elastic pool operation.
      properties:
        properties:
          $ref: '#/components/schemas/ElasticPoolOperationProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    FailoverGroup:
      description: A failover group.
      properties:
        location:
          description: Resource location.
          type: string
          readOnly: true
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
        properties:
          $ref: '#/components/schemas/FailoverGroupProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    FailoverGroupListResult:
      description: A list of failover groups.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/FailoverGroup'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    FailoverGroupProperties:
      description: Properties of a failover group.
      required:
        - readWriteEndpoint
        - partnerServers
      type: object
      properties:
        readWriteEndpoint:
          $ref: '#/components/schemas/FailoverGroupReadWriteEndpoint'
          description: Read-write endpoint of the failover group instance.
        readOnlyEndpoint:
          $ref: '#/components/schemas/FailoverGroupReadOnlyEndpoint'
          description: Read-only endpoint of the failover group instance.
        replicationRole:
          description: Local replication role of the failover group instance.
          enum:
            - Primary
            - Secondary
          type: string
          readOnly: true
          x-ms-enum:
            name: FailoverGroupReplicationRole
            modelAsString: true
        replicationState:
          description: Replication state of the failover group instance.
          type: string
          readOnly: true
        partnerServers:
          description: List of partner server information for the failover group.
          type: array
          items:
            $ref: '#/components/schemas/PartnerInfo'
        databases:
          description: List of databases in the failover group.
          type: array
          items:
            type: string
            format: arm-id
            x-ms-arm-id-details:
              allowedResources:
                - type: Microsoft.Sql/servers/databases
        secondaryType:
          description: Databases secondary type on partner server.
          enum:
            - Geo
            - Standby
          type: string
          x-ms-enum:
            name: FailoverGroupDatabasesSecondaryType
            modelAsString: true
          x-ms-mutability:
            - create
            - update
    FailoverGroupReadOnlyEndpoint:
      description: Read-only endpoint of the failover group instance.
      type: object
      properties:
        failoverPolicy:
          description: Failover policy of the read-only endpoint for the failover group.
          enum:
            - Disabled
            - Enabled
          type: string
          x-ms-enum:
            name: ReadOnlyEndpointFailoverPolicy
            modelAsString: true
        targetServer:
          description: The target partner server where the read-only endpoint points to.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - type: Microsoft.Sql/servers
    FailoverGroupReadWriteEndpoint:
      description: Read-write endpoint of the failover group instance.
      required:
        - failoverPolicy
      type: object
      properties:
        failoverPolicy:
          description: Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
          enum:
            - Manual
            - Automatic
          type: string
          x-ms-enum:
            name: ReadWriteEndpointFailoverPolicy
            modelAsString: true
        failoverWithDataLossGracePeriodMinutes:
          format: int32
          description: Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
          type: integer
    FailoverGroupUpdate:
      description: A failover group update request.
      properties:
        properties:
          $ref: '#/components/schemas/FailoverGroupUpdateProperties'
          description: Resource properties.
          x-ms-client-flatten: true
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
      type: object
    FailoverGroupUpdateProperties:
      description: Properties of a failover group update.
      type: object
      properties:
        readWriteEndpoint:
          $ref: '#/components/schemas/FailoverGroupReadWriteEndpoint'
          description: Read-write endpoint of the failover group instance.
        readOnlyEndpoint:
          $ref: '#/components/schemas/FailoverGroupReadOnlyEndpoint'
          description: Read-only endpoint of the failover group instance.
        databases:
          description: List of databases in the failover group.
          type: array
          items:
            type: string
            format: arm-id
            x-ms-arm-id-details:
              allowedResources:
                - type: Microsoft.Sql/servers/databases
        partnerServers:
          description: List of partner server information for the failover group.
          type: array
          items:
            $ref: '#/components/schemas/PartnerInfo'
        secondaryType:
          description: Databases secondary type on partner server.
          enum:
            - Geo
            - Standby
          type: string
          x-ms-enum:
            name: FailoverGroupDatabasesSecondaryType
            modelAsString: true
          x-ms-mutability:
            - create
            - update
    PartnerInfo:
      description: Partner server information for the failover group.
      required:
        - id
      type: object
      properties:
        id:
          description: Resource identifier of the partner server.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - type: Microsoft.Sql/servers
        location:
          description: Geo location of the partner server.
          type: string
          readOnly: true
        replicationRole:
          description: Replication role of the partner server.
          enum:
            - Primary
            - Secondary
          type: string
          readOnly: true
          x-ms-enum:
            name: FailoverGroupReplicationRole
            modelAsString: true
    DatabaseColumnListResult:
      description: A list of database columns.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DatabaseColumn'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    DatabaseColumnProperties:
      description: Database column properties.
      type: object
      properties:
        columnType:
          description: The column data type.
          enum:
            - image
            - text
            - uniqueidentifier
            - date
            - time
            - datetime2
            - datetimeoffset
            - tinyint
            - smallint
            - int
            - smalldatetime
            - real
            - money
            - datetime
            - float
            - sql_variant
            - ntext
            - bit
            - decimal
            - numeric
            - smallmoney
            - bigint
            - hierarchyid
            - geometry
            - geography
            - varbinary
            - varchar
            - binary
            - char
            - timestamp
            - nvarchar
            - nchar
            - xml
            - sysname
          type: string
          x-ms-enum:
            name: ColumnDataType
            modelAsString: true
        temporalType:
          description: The table temporal type.
          enum:
            - NonTemporalTable
            - HistoryTable
            - SystemVersionedTemporalTable
          type: string
          x-ms-enum:
            name: TableTemporalType
            modelAsString: true
        memoryOptimized:
          description: Whether or not the column belongs to a memory optimized table.
          type: boolean
        isComputed:
          description: Whether or not the column is computed.
          type: boolean
    DatabaseColumn:
      description: A database column resource.
      properties:
        properties:
          $ref: '#/components/schemas/DatabaseColumnProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseTableProperties:
      description: Database table properties.
      type: object
      properties:
        temporalType:
          description: The table temporal type.
          enum:
            - NonTemporalTable
            - HistoryTable
            - SystemVersionedTemporalTable
          type: string
          x-ms-enum:
            name: TableTemporalType
            modelAsString: true
        memoryOptimized:
          description: Whether or not the table is memory optimized.
          type: boolean
    DatabaseTable:
      description: A database table resource.
      properties:
        properties:
          $ref: '#/components/schemas/DatabaseTableProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseTableListResult:
      description: A list of database tables.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DatabaseTable'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    GeoBackupPolicyProperties:
      properties:
        state:
          type: string
          description: The state of the geo backup policy.
          enum:
            - Disabled
            - Enabled
          x-ms-enum:
            modelAsString: false
            name: GeoBackupPolicyState
        storageType:
          type: string
          description: The storage type of the geo backup policy.
          readOnly: true
      required:
        - state
      description: The properties of the geo backup policy.
      type: object
    GeoBackupPolicy:
      required:
        - properties
      description: A database geo backup policy.
      properties:
        properties:
          $ref: '#/components/schemas/GeoBackupPolicyProperties'
          description: The properties of the geo backup policy.
          x-ms-client-flatten: true
        kind:
          readOnly: true
          type: string
          description: Kind of geo backup policy.  This is metadata used for the Azure portal experience.
        location:
          type: string
          readOnly: true
          description: Backup policy location.
      type: object
    GeoBackupPolicyListResult:
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/GeoBackupPolicy'
          description: The list of geo backup policies.
      description: The response to a list geo backup policies request.
      type: object
    JobTargetGroupListResult:
      description: A list of target groups.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/JobTargetGroup'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    JobTargetGroupProperties:
      description: Properties of job target group.
      required:
        - members
      type: object
      properties:
        members:
          description: Members of the target group.
          type: array
          items:
            $ref: '#/components/schemas/JobTarget'
    JobTarget:
      description: A job target, for example a specific database or a container of databases that is evaluated during job execution.
      required:
        - type
      type: object
      properties:
        membershipType:
          description: Whether the target is included or excluded from the group.
          default: Include
          enum:
            - Include
            - Exclude
          type: string
          x-ms-enum:
            name: JobTargetGroupMembershipType
            modelAsString: false
        type:
          description: The target type.
          enum:
            - TargetGroup
            - SqlDatabase
            - SqlElasticPool
            - SqlShardMap
            - SqlServer
          type: string
          x-ms-enum:
            name: JobTargetType
            modelAsString: true
        serverName:
          description: The target server name.
          type: string
        databaseName:
          description: The target database name.
          type: string
        elasticPoolName:
          description: The target elastic pool name.
          type: string
        shardMapName:
          description: The target shard map.
          type: string
        refreshCredential:
          description: The resource ID of the credential that is used during job execution to connect to the target and determine the list of databases inside the target.
          type: string
    JobTargetGroup:
      description: A group of job targets.
      properties:
        properties:
          $ref: '#/components/schemas/JobTargetGroupProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedBackupShortTermRetentionPolicyProperties:
      description: Properties of a short term retention policy
      type: object
      properties:
        retentionDays:
          format: int32
          description: The backup retention period in days. This is how many days Point-in-Time Restore will be supported.
          type: integer
    ManagedBackupShortTermRetentionPolicy:
      description: A short term retention policy.
      properties:
        properties:
          $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedBackupShortTermRetentionPolicyListResult:
      description: A list of short term retention policies.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicy'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    DatabaseVulnerabilityAssessmentRuleBaselineProperties:
      description: Properties of a database Vulnerability Assessment rule baseline.
      required:
        - baselineResults
      type: object
      properties:
        baselineResults:
          description: The rule baseline result
          type: array
          items:
            $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentRuleBaselineItem'
    DatabaseVulnerabilityAssessmentRuleBaselineItem:
      description: Properties for an Azure SQL Database Vulnerability Assessment rule baseline's result.
      required:
        - result
      type: object
      properties:
        result:
          description: The rule baseline result
          type: array
          items:
            type: string
    DatabaseVulnerabilityAssessmentRuleBaseline:
      description: A database vulnerability assessment rule baseline.
      properties:
        properties:
          $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentRuleBaselineProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    VirtualNetworkRuleProperties:
      description: Properties of a virtual network rule.
      required:
        - virtualNetworkSubnetId
      type: object
      properties:
        virtualNetworkSubnetId:
          description: The ARM resource id of the virtual network subnet.
          type: string
        ignoreMissingVnetServiceEndpoint:
          description: Create firewall rule before the virtual network has vnet service endpoint enabled.
          type: boolean
        state:
          description: Virtual Network Rule State
          enum:
            - Initializing
            - InProgress
            - Ready
            - Failed
            - Deleting
            - Unknown
          type: string
          readOnly: true
          x-ms-enum:
            name: VirtualNetworkRuleState
            modelAsString: true
    VirtualNetworkRule:
      description: A virtual network rule.
      properties:
        properties:
          $ref: '#/components/schemas/VirtualNetworkRuleProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    VirtualNetworkRuleListResult:
      description: A list of virtual network rules.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/VirtualNetworkRule'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    BackupShortTermRetentionPolicyProperties:
      description: Properties of a short term retention policy
      type: object
      properties:
        retentionDays:
          format: int32
          description: The backup retention period in days. This is how many days Point-in-Time Restore will be supported.
          type: integer
        diffBackupIntervalInHours:
          format: int32
          description: The differential backup interval in hours. This is how many interval hours between each differential backup will be supported. This is only applicable to live databases but not dropped databases.
          enum:
            - '12'
            - '24'
          type: integer
          x-ms-enum:
            name: DiffBackupIntervalInHours
            modelAsString: true
    BackupShortTermRetentionPolicy:
      description: A short term retention policy.
      properties:
        properties:
          $ref: '#/components/schemas/BackupShortTermRetentionPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    BackupShortTermRetentionPolicyListResult:
      description: A list of short term retention policies.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/BackupShortTermRetentionPolicy'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ElasticPoolActivityProperties:
      properties:
        endTime:
          readOnly: true
          type: string
          format: date-time
          description: The time the operation finished (ISO8601 format).
        errorCode:
          readOnly: true
          type: integer
          format: int32
          description: The error code if available.
        errorMessage:
          readOnly: true
          type: string
          description: The error message if available.
        errorSeverity:
          readOnly: true
          type: integer
          format: int32
          description: The error severity if available.
        operation:
          readOnly: true
          type: string
          description: The operation name.
        operationId:
          readOnly: true
          type: string
          format: uuid
          description: The unique operation ID.
          nullable: false
        percentComplete:
          readOnly: true
          type: integer
          format: int32
          description: The percentage complete if available.
        requestedDatabaseDtuMax:
          readOnly: true
          type: integer
          format: int32
          description: The requested max DTU per database if available.
        requestedDatabaseDtuMin:
          readOnly: true
          type: integer
          format: int32
          description: The requested min DTU per database if available.
        requestedDtu:
          readOnly: true
          type: integer
          format: int32
          description: The requested DTU for the pool if available.
        requestedElasticPoolName:
          readOnly: true
          type: string
          description: The requested name for the elastic pool if available.
        requestedStorageLimitInGB:
          readOnly: true
          type: integer
          format: int64
          description: The requested storage limit for the pool in GB if available.
        elasticPoolName:
          readOnly: true
          type: string
          description: The name of the elastic pool.
        serverName:
          readOnly: true
          type: string
          description: The name of the server the elastic pool is in.
        startTime:
          readOnly: true
          type: string
          format: date-time
          description: The time the operation started (ISO8601 format).
        state:
          readOnly: true
          type: string
          description: The current state of the operation.
        requestedStorageLimitInMB:
          readOnly: true
          type: integer
          format: int32
          description: The requested storage limit in MB.
        requestedDatabaseDtuGuarantee:
          readOnly: true
          type: integer
          format: int32
          description: The requested per database DTU guarantee.
        requestedDatabaseDtuCap:
          readOnly: true
          type: integer
          format: int32
          description: The requested per database DTU cap.
        requestedDtuGuarantee:
          readOnly: true
          type: integer
          format: int32
          description: The requested DTU guarantee.
      description: Represents the properties of an elastic pool.
      type: object
    ElasticPoolActivity:
      description: Represents the activity on an elastic pool.
      properties:
        location:
          type: string
          x-ms-mutability:
            - read
            - create
          description: The geo-location where the resource lives
        properties:
          $ref: '#/components/schemas/ElasticPoolActivityProperties'
          description: The properties representing the resource.
          x-ms-client-flatten: true
      type: object
    ElasticPoolActivityListResult:
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/ElasticPoolActivity'
          description: The list of elastic pool activities.
      required:
        - value
      description: Represents the response to a list elastic pool activity request.
      type: object
    ElasticPoolDatabaseActivityProperties:
      properties:
        databaseName:
          readOnly: true
          type: string
          description: The database name.
        endTime:
          readOnly: true
          type: string
          format: date-time
          description: The time the operation finished (ISO8601 format).
        errorCode:
          readOnly: true
          type: integer
          format: int32
          description: The error code if available.
        errorMessage:
          readOnly: true
          type: string
          description: The error message if available.
        errorSeverity:
          readOnly: true
          type: integer
          format: int32
          description: The error severity if available.
        operation:
          readOnly: true
          type: string
          description: The operation name.
        operationId:
          readOnly: true
          type: string
          format: uuid
          description: The unique operation ID.
          nullable: false
        percentComplete:
          readOnly: true
          type: integer
          format: int32
          description: The percentage complete if available.
        requestedElasticPoolName:
          readOnly: true
          type: string
          description: The name for the elastic pool the database is moving into if available.
        currentElasticPoolName:
          readOnly: true
          type: string
          description: The name of the current elastic pool the database is in if available.
        currentServiceObjective:
          readOnly: true
          type: string
          description: The name of the current service objective if available.
        requestedServiceObjective:
          readOnly: true
          type: string
          description: The name of the requested service objective if available.
        serverName:
          readOnly: true
          type: string
          description: The name of the server the elastic pool is in.
        startTime:
          readOnly: true
          type: string
          format: date-time
          description: The time the operation started (ISO8601 format).
        state:
          readOnly: true
          type: string
          description: The current state of the operation.
      description: Represents the properties of an elastic pool database activity.
      type: object
    ElasticPoolDatabaseActivity:
      description: Represents the activity on an elastic pool.
      properties:
        location:
          type: string
          x-ms-mutability:
            - read
            - create
          description: The geo-location where the resource lives
        properties:
          $ref: '#/components/schemas/ElasticPoolDatabaseActivityProperties'
          description: The properties representing the resource.
          x-ms-client-flatten: true
      type: object
    ElasticPoolDatabaseActivityListResult:
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/ElasticPoolDatabaseActivity'
          description: The list of elastic pool database activities.
      required:
        - value
      description: Represents the response to a list elastic pool database activity request.
      type: object
    SloUsageMetric:
      properties:
        serviceLevelObjective:
          type: string
          description: The serviceLevelObjective for SLO usage metric.
          enum:
            - System
            - System0
            - System1
            - System2
            - System3
            - System4
            - System2L
            - System3L
            - System4L
            - Free
            - Basic
            - S0
            - S1
            - S2
            - S3
            - S4
            - S6
            - S7
            - S9
            - S12
            - P1
            - P2
            - P3
            - P4
            - P6
            - P11
            - P15
            - PRS1
            - PRS2
            - PRS4
            - PRS6
            - DW100
            - DW200
            - DW300
            - DW400
            - DW500
            - DW600
            - DW1000
            - DW1200
            - DW1000c
            - DW1500
            - DW1500c
            - DW2000
            - DW2000c
            - DW3000
            - DW2500c
            - DW3000c
            - DW6000
            - DW5000c
            - DW6000c
            - DW7500c
            - DW10000c
            - DW15000c
            - DW30000c
            - DS100
            - DS200
            - DS300
            - DS400
            - DS500
            - DS600
            - DS1000
            - DS1200
            - DS1500
            - DS2000
            - ElasticPool
          x-ms-enum:
            modelAsString: true
            name: ServiceObjectiveName
          readOnly: true
        serviceLevelObjectiveId:
          type: string
          format: uuid
          description: The serviceLevelObjectiveId for SLO usage metric.
          readOnly: true
          nullable: false
        inRangeTimeRatio:
          type: number
          format: double
          description: Gets or sets inRangeTimeRatio for SLO usage metric.
          readOnly: true
          nullable: false
      description: A Slo Usage Metric.
      type: object
    OperationImpact:
      properties:
        name:
          readOnly: true
          type: string
          description: The name of the impact dimension.
        unit:
          readOnly: true
          type: string
          description: The unit in which estimated impact to dimension is measured.
        changeValueAbsolute:
          readOnly: true
          type: number
          format: double
          description: The absolute impact to dimension.
        changeValueRelative:
          readOnly: true
          type: number
          format: double
          description: The relative impact to dimension (null if not applicable)
      description: The impact of an operation, both in absolute and relative terms.
      type: object
    SubscriptionUsageListResult:
      description: A list of subscription usage metrics in a location.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionUsage'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SubscriptionUsageProperties:
      description: Properties of a subscription usage.
      type: object
      properties:
        displayName:
          description: User-readable name of the metric.
          type: string
          readOnly: true
        currentValue:
          format: double
          description: Current value of the metric.
          type: number
          readOnly: true
        limit:
          format: double
          description: Boundary value of the metric.
          type: number
          readOnly: true
        unit:
          description: Unit of the metric.
          type: string
          readOnly: true
    SubscriptionUsage:
      description: Usage Metric of a Subscription in a Location.
      properties:
        properties:
          $ref: '#/components/schemas/SubscriptionUsageProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DataWarehouseUserActivitiesProperties:
      description: User activities of a data warehouse. This currently includes the count of running or suspended queries. For more information, please view the sys.dm_pdw_exec_requests dynamic management view (DMV).
      type: object
      properties:
        activeQueriesCount:
          format: int32
          description: Count of running and suspended queries.
          type: integer
          readOnly: true
    DataWarehouseUserActivities:
      description: User activities of a data warehouse
      properties:
        properties:
          $ref: '#/components/schemas/DataWarehouseUserActivitiesProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DataWarehouseUserActivitiesListResult:
      description: User activities of a data warehouse
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DataWarehouseUserActivities'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    AdministratorProperties:
      description: Properties of a active directory administrator.
      required:
        - administratorType
        - login
        - sid
      type: object
      properties:
        administratorType:
          description: Type of the sever administrator.
          enum:
            - ActiveDirectory
          type: string
          x-ms-enum:
            name: AdministratorType
            modelAsString: true
        login:
          description: Login name of the server administrator.
          type: string
        sid:
          format: uuid
          description: SID (object ID) of the server administrator.
          type: string
        tenantId:
          format: uuid
          description: Tenant ID of the administrator.
          type: string
        azureADOnlyAuthentication:
          description: Azure Active Directory only Authentication enabled.
          type: boolean
          readOnly: true
    ServerAzureADAdministrator:
      description: Azure Active Directory administrator.
      properties:
        properties:
          $ref: '#/components/schemas/AdministratorProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    AdministratorListResult:
      description: A list of active directory administrators.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerAzureADAdministrator'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    RestorePointListResult:
      description: A list of long term retention backups.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/RestorePoint'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    RestorePointProperties:
      description: Properties of a database restore point
      type: object
      properties:
        restorePointType:
          description: The type of restore point
          enum:
            - CONTINUOUS
            - DISCRETE
          type: string
          readOnly: true
          x-ms-enum:
            name: RestorePointType
            modelAsString: false
        earliestRestoreDate:
          format: date-time
          description: The earliest time to which this database can be restored
          type: string
          readOnly: true
        restorePointCreationDate:
          format: date-time
          description: The time the backup was taken
          type: string
          readOnly: true
        restorePointLabel:
          description: The label of restore point for backup request by user
          type: string
          readOnly: true
    RestorePoint:
      description: Database restore points.
      properties:
        location:
          description: Resource location.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/RestorePointProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    CreateDatabaseRestorePointDefinition:
      description: Contains the information necessary to perform a create database restore point operation.
      required:
        - restorePointLabel
      type: object
      properties:
        restorePointLabel:
          description: The restore point label to apply
          type: string
    ManagedDatabaseMoveOperationListResult:
      description: List of managed database move operations.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedDatabaseMoveOperationResult'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedDatabaseMoveOperationResult:
      description: A managed database move operation.
      properties:
        properties:
          $ref: '#/components/schemas/ManagedDatabaseMoveOperationResultProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedDatabaseMoveOperationResultProperties:
      description: Contains the operation result properties for managed database move operation.
      type: object
      properties:
        operation:
          description: The name of operation.
          type: string
          readOnly: true
        operationFriendlyName:
          description: The friendly name of operation.
          type: string
          readOnly: true
        startTime:
          format: date-time
          description: The operation start time.
          type: string
          readOnly: true
        state:
          description: The operation state.
          enum:
            - Pending
            - InProgress
            - Succeeded
            - Failed
            - CancelInProgress
            - Cancelled
          type: string
          readOnly: true
          x-ms-enum:
            name: ManagementOperationState
            modelAsString: true
        operationMode:
          description: Operation mode.
          enum:
            - Move
            - Copy
          type: string
          readOnly: true
          x-ms-enum:
            name: MoveOperationMode
            modelAsString: true
        sourceManagedInstanceName:
          description: Source Managed Instance name.
          type: string
          readOnly: true
        targetManagedInstanceName:
          description: Target Managed Instance name.
          type: string
          readOnly: true
        sourceManagedInstanceId:
          description: Source Managed Instance resource id.
          type: string
          readOnly: true
        targetManagedInstanceId:
          description: Target Managed instance resource id.
          type: string
          readOnly: true
        sourceDatabaseName:
          description: Source database name.
          type: string
          readOnly: true
        targetDatabaseName:
          description: Target database name.
          type: string
          readOnly: true
        isCancellable:
          description: Is move operation cancellable.
          type: boolean
          readOnly: true
        errorCode:
          format: int32
          description: The operation error code.
          type: integer
          readOnly: true
        errorDescription:
          description: The operation error description.
          type: string
          readOnly: true
        errorSeverity:
          format: int32
          description: The operation error severity.
          type: integer
          readOnly: true
        isUserError:
          description: Whether or not the error is a user error.
          type: boolean
          readOnly: true
    ServerTrustCertificate:
      description: Server trust certificate imported from box to enable connection between box and Sql Managed Instance.
      properties:
        properties:
          $ref: '#/components/schemas/ServerTrustCertificateProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServerTrustCertificateProperties:
      description: The properties of a server trust certificate.
      type: object
      properties:
        publicBlob:
          description: The certificate public blob
          type: string
          x-ms-secret: true
        thumbprint:
          description: The certificate thumbprint
          type: string
          readOnly: true
        certificateName:
          description: The certificate name
          type: string
          readOnly: true
    ServerTrustCertificatesListResult:
      description: A list of server trust certificates in instance.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerTrustCertificate'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SensitivityLabelProperties:
      description: Properties of a sensitivity label.
      type: object
      properties:
        schemaName:
          description: The schema name.
          type: string
          readOnly: true
        tableName:
          description: The table name.
          type: string
          readOnly: true
        columnName:
          description: The column name.
          type: string
          readOnly: true
        labelName:
          description: The label name.
          type: string
        labelId:
          description: The label ID.
          type: string
        informationType:
          description: The information type.
          type: string
        informationTypeId:
          description: The information type ID.
          type: string
        isDisabled:
          description: Is sensitivity recommendation disabled. Applicable for recommended sensitivity label only. Specifies whether the sensitivity recommendation on this column is disabled (dismissed) or not.
          type: boolean
          readOnly: true
        rank:
          enum:
            - None
            - Low
            - Medium
            - High
            - Critical
          type: string
          x-ms-enum:
            name: SensitivityLabelRank
            modelAsString: false
    SensitivityLabel:
      description: A sensitivity label.
      properties:
        managedBy:
          description: Resource that manages the sensitivity label.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/SensitivityLabelProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    SensitivityLabelListResult:
      description: A list of sensitivity labels.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SensitivityLabel'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SensitivityLabelUpdateList:
      description: A list of sensitivity label update operations.
      type: object
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/SensitivityLabelUpdate'
    SensitivityLabelUpdateProperties:
      description: Properties of an operation executed on a sensitivity label.
      required:
        - op
        - schema
        - table
        - column
      type: object
      properties:
        op:
          enum:
            - set
            - remove
          type: string
          x-ms-enum:
            name: SensitivityLabelUpdateKind
            modelAsString: false
        schema:
          description: Schema name of the column to update.
          type: string
        table:
          description: Table name of the column to update.
          type: string
        column:
          description: Column name to update.
          type: string
        sensitivityLabel:
          $ref: '#/components/schemas/SensitivityLabel'
          description: The sensitivity label information to apply on a column.
    SensitivityLabelUpdate:
      description: A sensitivity label update operation.
      properties:
        properties:
          $ref: '#/components/schemas/SensitivityLabelUpdateProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    RecommendedSensitivityLabelUpdateList:
      description: A list of recommended sensitivity label update operations.
      type: object
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/RecommendedSensitivityLabelUpdate'
    RecommendedSensitivityLabelUpdateProperties:
      description: Properties of an operation executed on a recommended sensitivity label.
      required:
        - op
        - schema
        - table
        - column
      type: object
      properties:
        op:
          enum:
            - enable
            - disable
          type: string
          x-ms-enum:
            name: RecommendedSensitivityLabelUpdateKind
            modelAsString: false
        schema:
          description: Schema name of the column to update.
          type: string
        table:
          description: Table name of the column to update.
          type: string
        column:
          description: Column name to update.
          type: string
    RecommendedSensitivityLabelUpdate:
      description: A recommended sensitivity label update operation.
      properties:
        properties:
          $ref: '#/components/schemas/RecommendedSensitivityLabelUpdateProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    IPv6FirewallRule:
      description: An IPv6 server firewall rule.
      properties:
        properties:
          $ref: '#/components/schemas/IPv6ServerFirewallRuleProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    IPv6FirewallRuleListResult:
      description: The response to a list IPv6 firewall rules request
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/IPv6FirewallRule'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    IPv6ServerFirewallRuleProperties:
      description: The properties of an IPv6 server firewall rule.
      type: object
      properties:
        startIPv6Address:
          description: The start IP address of the firewall rule. Must be IPv6 format.
          type: string
        endIPv6Address:
          description: The end IP address of the firewall rule. Must be IPv6 format. Must be greater than or equal to startIpv6Address.
          type: string
    ProxyResourceWithWritableName:
      description: ARM proxy resource.
      properties:
        id:
          description: Resource ID.
          type: string
          readOnly: true
        name:
          description: Resource name.
          type: string
        type:
          description: Resource type.
          type: string
          readOnly: true
      type: object
    ResourceWithWritableName:
      description: ARM resource.
      type: object
      properties:
        id:
          description: Resource ID.
          type: string
          readOnly: true
        name:
          description: Resource name.
          type: string
        type:
          description: Resource type.
          type: string
          readOnly: true
      x-ms-azure-resource: true
    DatabaseSchema:
      description: A database schema resource.
      properties: {}
      type: object
    DatabaseSchemaListResult:
      description: A list of database schemas.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DatabaseSchema'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    PrivateLinkResourceListResult:
      description: A list of private link resources
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/PrivateLinkResource'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    PrivateLinkResourceProperties:
      description: Properties of a private link resource.
      type: object
      properties:
        groupId:
          description: The private link resource group id.
          type: string
          readOnly: true
        requiredMembers:
          description: The private link resource required member names.
          type: array
          items:
            type: string
          readOnly: true
        requiredZoneNames:
          description: The private link resource required zone names.
          type: array
          items:
            type: string
          readOnly: true
    PrivateLinkResource:
      description: A private link resource
      properties:
        properties:
          $ref: '#/components/schemas/PrivateLinkResourceProperties'
          description: The private link resource group id.
          readOnly: true
      type: object
    TimeZoneListResult:
      description: A list of time zones.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/TimeZone'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    TimeZoneProperties:
      description: The properties of a time zone.
      type: object
      properties:
        timeZoneId:
          description: The time zone id
          type: string
          readOnly: true
        displayName:
          description: The time zone display name
          type: string
          readOnly: true
    TimeZone:
      description: Time Zone.
      properties:
        properties:
          $ref: '#/components/schemas/TimeZoneProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    JobExecutionListResult:
      description: A list of job executions.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/JobExecution'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    JobExecutionProperties:
      description: Properties for an Azure SQL Database Elastic job execution.
      type: object
      properties:
        jobVersion:
          format: int32
          description: The job version number.
          type: integer
          readOnly: true
        stepName:
          description: The job step name.
          type: string
          readOnly: true
        stepId:
          format: int32
          description: The job step id.
          type: integer
          readOnly: true
        jobExecutionId:
          format: uuid
          description: The unique identifier of the job execution.
          type: string
          readOnly: true
        lifecycle:
          description: The detailed state of the job execution.
          enum:
            - Created
            - InProgress
            - WaitingForChildJobExecutions
            - WaitingForRetry
            - Succeeded
            - SucceededWithSkipped
            - Failed
            - TimedOut
            - Canceled
            - Skipped
          type: string
          readOnly: true
          x-ms-enum:
            name: JobExecutionLifecycle
            modelAsString: true
        provisioningState:
          description: The ARM provisioning state of the job execution.
          enum:
            - Created
            - InProgress
            - Succeeded
            - Failed
            - Canceled
          type: string
          readOnly: true
          x-ms-enum:
            name: ProvisioningState
            modelAsString: true
        createTime:
          format: date-time
          description: The time that the job execution was created.
          type: string
          readOnly: true
        startTime:
          format: date-time
          description: The time that the job execution started.
          type: string
          readOnly: true
        endTime:
          format: date-time
          description: The time that the job execution completed.
          type: string
          readOnly: true
        currentAttempts:
          format: int32
          description: Number of times the job execution has been attempted.
          type: integer
        currentAttemptStartTime:
          format: date-time
          description: Start time of the current attempt.
          type: string
          readOnly: true
        lastMessage:
          description: The last status or error message.
          type: string
          readOnly: true
        target:
          $ref: '#/components/schemas/JobExecutionTarget'
          description: The target that this execution is executed on.
          readOnly: true
    JobExecutionTarget:
      description: The target that a job execution is executed on.
      type: object
      properties:
        type:
          description: The type of the target.
          enum:
            - TargetGroup
            - SqlDatabase
            - SqlElasticPool
            - SqlShardMap
            - SqlServer
          type: string
          readOnly: true
          x-ms-enum:
            name: JobTargetType
            modelAsString: true
        serverName:
          description: The server name.
          type: string
          readOnly: true
        databaseName:
          description: The database name.
          type: string
          readOnly: true
    JobExecution:
      description: An execution of a job
      properties:
        properties:
          $ref: '#/components/schemas/JobExecutionProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServerDnsAliasProperties:
      description: Properties of a server DNS alias.
      type: object
      properties:
        azureDnsRecord:
          description: The fully qualified DNS record for alias
          type: string
          readOnly: true
    ServerDnsAlias:
      description: A server DNS alias.
      properties:
        properties:
          $ref: '#/components/schemas/ServerDnsAliasProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServerDnsAliasListResult:
      description: A list of server DNS aliases.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerDnsAlias'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ServerDnsAliasAcquisition:
      description: A server dns alias acquisition request.
      required:
        - oldServerDnsAliasId
      type: object
      properties:
        oldServerDnsAliasId:
          description: The id of the server alias that will be acquired to point to this server instead.
          type: string
    DatabaseVulnerabilityAssessmentProperties:
      description: Properties of a database Vulnerability Assessment.
      type: object
      properties:
        storageContainerPath:
          description: A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).  It is required if server level vulnerability assessment policy doesn't set
          type: string
          x-ms-mutability:
            - create
            - update
        storageContainerSasKey:
          description: A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required.
          type: string
          x-ms-mutability:
            - create
            - update
        storageAccountAccessKey:
          description: Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required.
          type: string
          x-ms-mutability:
            - create
            - update
        recurringScans:
          $ref: '#/components/schemas/VulnerabilityAssessmentRecurringScansProperties'
          description: The recurring scans settings
    VulnerabilityAssessmentRecurringScansProperties:
      description: Properties of a Vulnerability Assessment recurring scans.
      type: object
      properties:
        isEnabled:
          description: Recurring scans state.
          type: boolean
        emailSubscriptionAdmins:
          description: Specifies that the schedule scan notification will be is sent to the subscription administrators.
          default: true
          type: boolean
        emails:
          description: Specifies an array of e-mail addresses to which the scan notification is sent.
          type: array
          items:
            type: string
    DatabaseVulnerabilityAssessment:
      description: A database vulnerability assessment.
      properties:
        properties:
          $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseVulnerabilityAssessmentListResult:
      description: A list of the database's vulnerability assessments.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DatabaseVulnerabilityAssessment'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedDatabaseRestoreDetailsBackupSetProperties:
      description: The managed database's restore details backup set properties.
      type: object
      properties:
        status:
          description: Backup set status.
          type: string
          readOnly: true
        firstStripeName:
          description: First stripe name.
          type: string
          readOnly: true
        numberOfStripes:
          format: int32
          description: Number of stripes.
          type: integer
          readOnly: true
        backupSizeMB:
          format: int32
          description: Backup size.
          type: integer
          readOnly: true
        restoreStartedTimestampUtc:
          format: date-time
          description: Last restored file time.
          type: string
          readOnly: true
        restoreFinishedTimestampUtc:
          format: date-time
          description: Last restored file time.
          type: string
          readOnly: true
    ManagedDatabaseRestoreDetailsProperties:
      description: The managed database's restore details properties.
      type: object
      properties:
        type:
          description: Restore type.
          type: string
          readOnly: true
        status:
          description: Restore status.
          type: string
          readOnly: true
        blockReason:
          description: The reason why restore is in Blocked state.
          type: string
          readOnly: true
        lastUploadedFileName:
          description: Last uploaded file name.
          type: string
          readOnly: true
        lastUploadedFileTime:
          format: date-time
          description: Last uploaded file time.
          type: string
          readOnly: true
        lastRestoredFileName:
          description: Last restored file name.
          type: string
          readOnly: true
        lastRestoredFileTime:
          format: date-time
          description: Last restored file time.
          type: string
          readOnly: true
        percentCompleted:
          format: int32
          description: Percent completed.
          type: integer
          readOnly: true
        currentRestoredSizeMB:
          format: int32
          description: Current restored size MB.
          type: integer
          readOnly: true
        currentRestorePlanSizeMB:
          format: int32
          description: Current restore plan size MB.
          type: integer
          readOnly: true
        currentBackupType:
          description: Current backup type.
          type: string
          readOnly: true
        currentRestoringFileName:
          description: Current restoring file name.
          type: string
          readOnly: true
        numberOfFilesDetected:
          format: int32
          description: Number of files detected.
          type: integer
          readOnly: true
        numberOfFilesQueued:
          format: int32
          description: Number of files queued.
          type: integer
          readOnly: true
        numberOfFilesSkipped:
          format: int32
          description: Number of files skipped.
          type: integer
          readOnly: true
        numberOfFilesRestoring:
          format: int32
          description: Number of files restoring.
          type: integer
          readOnly: true
        numberOfFilesRestored:
          format: int32
          description: Number of files restored.
          type: integer
          readOnly: true
        numberOfFilesUnrestorable:
          format: int32
          description: Number of files unrestorable.
          type: integer
          readOnly: true
        fullBackupSets:
          description: Full backup sets.
          type: array
          items:
            $ref: '#/components/schemas/ManagedDatabaseRestoreDetailsBackupSetProperties'
          readOnly: true
        diffBackupSets:
          description: Diff backup sets.
          type: array
          items:
            $ref: '#/components/schemas/ManagedDatabaseRestoreDetailsBackupSetProperties'
          readOnly: true
        logBackupSets:
          description: Log backup sets.
          type: array
          items:
            $ref: '#/components/schemas/ManagedDatabaseRestoreDetailsBackupSetProperties'
          readOnly: true
        unrestorableFiles:
          description: Unrestorable files.
          type: array
          items:
            $ref: '#/components/schemas/ManagedDatabaseRestoreDetailsUnrestorableFileProperties'
          readOnly: true
    ManagedDatabaseRestoreDetailsResult:
      description: A managed database restore details.
      properties:
        properties:
          $ref: '#/components/schemas/ManagedDatabaseRestoreDetailsProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedDatabaseRestoreDetailsUnrestorableFileProperties:
      description: The managed database's restore details unrestorable file properties.
      type: object
      properties:
        name:
          description: File name.
          type: string
          readOnly: true
    ManagedLedgerDigestUploads:
      description: Azure SQL Database ledger digest upload settings.
      properties:
        properties:
          $ref: '#/components/schemas/ManagedLedgerDigestUploadsProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedLedgerDigestUploadsListResult:
      description: A list of ledger digest upload settings.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedLedgerDigestUploads'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedLedgerDigestUploadsProperties:
      description: The properties of a database ledger digest upload settings.
      type: object
      properties:
        digestStorageEndpoint:
          description: The digest storage endpoint, which must be either an Azure blob storage endpoint or an URI for Azure Confidential Ledger.
          type: string
        state:
          description: Specifies the state of ledger digest upload.
          enum:
            - Enabled
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: ManagedLedgerDigestUploadsState
            modelAsString: true
    SecurityAlertsPolicyProperties:
      description: Properties of a security alert policy.
      required:
        - state
      type: object
      properties:
        state:
          description: Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
          enum:
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: SecurityAlertsPolicyState
            modelAsString: false
        disabledAlerts:
          description: 'Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action, Brute_Force'
          type: array
          items:
            type: string
        emailAddresses:
          description: Specifies an array of e-mail addresses to which the alert is sent.
          type: array
          items:
            type: string
        emailAccountAdmins:
          description: Specifies that the alert is sent to the account administrators.
          type: boolean
        storageEndpoint:
          description: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
          type: string
        storageAccountAccessKey:
          description: Specifies the identifier key of the Threat Detection audit storage account.
          type: string
        retentionDays:
          format: int32
          description: Specifies the number of days to keep in the Threat Detection audit logs.
          type: integer
        creationTime:
          format: date-time
          description: Specifies the UTC creation time of the policy.
          type: string
          readOnly: true
    ManagedServerSecurityAlertPolicy:
      description: A managed server security alert policy.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of SecurityAlertPolicyResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/SecurityAlertsPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedServerSecurityAlertPolicyListResult:
      description: A list of the managed Server's security alert policies.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedServerSecurityAlertPolicy'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    AdvisorProperties:
      description: Properties for a Database, Server or Elastic Pool Advisor.
      required:
        - autoExecuteStatus
      type: object
      properties:
        advisorStatus:
          description: Gets the status of availability of this advisor to customers. Possible values are 'GA', 'PublicPreview', 'LimitedPublicPreview' and 'PrivatePreview'.
          enum:
            - GA
            - PublicPreview
            - LimitedPublicPreview
            - PrivatePreview
          type: string
          readOnly: true
          x-ms-enum:
            name: AdvisorStatus
            modelAsString: false
        autoExecuteStatus:
          description: Gets the auto-execute status (whether to let the system execute the recommendations) of this advisor. Possible values are 'Enabled' and 'Disabled'
          enum:
            - Enabled
            - Disabled
            - Default
          type: string
          x-ms-enum:
            name: AutoExecuteStatus
            modelAsString: false
        autoExecuteStatusInheritedFrom:
          description: Gets the resource from which current value of auto-execute status is inherited. Auto-execute status can be set on (and inherited from) different levels in the resource hierarchy. Possible values are 'Subscription', 'Server', 'ElasticPool', 'Database' and 'Default' (when status is not explicitly set on any level).
          enum:
            - Default
            - Subscription
            - Server
            - ElasticPool
            - Database
          type: string
          readOnly: true
          x-ms-enum:
            name: AutoExecuteStatusInheritedFrom
            modelAsString: false
        recommendationsStatus:
          description: Gets that status of recommendations for this advisor and reason for not having any recommendations. Possible values include, but are not limited to, 'Ok' (Recommendations available),LowActivity (not enough workload to analyze), 'DbSeemsTuned' (Database is doing well), etc.
          type: string
          readOnly: true
        lastChecked:
          format: date-time
          description: Gets the time when the current resource was analyzed for recommendations by this advisor.
          type: string
          readOnly: true
        recommendedActions:
          description: Gets the recommended actions for this advisor.
          type: array
          items:
            $ref: '#/components/schemas/RecommendedAction'
          readOnly: true
    RecommendedActionProperties:
      description: Properties for a Database, Server or Elastic Pool Recommended Action.
      required:
        - state
      type: object
      properties:
        recommendationReason:
          description: Gets the reason for recommending this action. e.g., DuplicateIndex
          type: string
          readOnly: true
        validSince:
          format: date-time
          description: Gets the time since when this recommended action is valid.
          type: string
          readOnly: true
        lastRefresh:
          format: date-time
          description: Gets time when this recommended action was last refreshed.
          type: string
          readOnly: true
        state:
          $ref: '#/components/schemas/RecommendedActionStateInfo'
          description: Gets the info of the current state the recommended action is in.
        isExecutableAction:
          description: Gets if this recommended action is actionable by user
          type: boolean
          readOnly: true
        isRevertableAction:
          description: Gets if changes applied by this recommended action can be reverted by user
          type: boolean
          readOnly: true
        isArchivedAction:
          description: Gets if this recommended action was suggested some time ago but user chose to ignore this and system added a new recommended action again.
          type: boolean
          readOnly: true
        executeActionStartTime:
          format: date-time
          description: Gets the time when system started applying this recommended action on the user resource. e.g., index creation start time
          type: string
          readOnly: true
        executeActionDuration:
          description: Gets the time taken for applying this recommended action on user resource. e.g., time taken for index creation
          type: string
          readOnly: true
        revertActionStartTime:
          format: date-time
          description: Gets the time when system started reverting changes of this recommended action on user resource. e.g., time when index drop is executed.
          type: string
          readOnly: true
        revertActionDuration:
          description: Gets the time taken for reverting changes of this recommended action on user resource. e.g., time taken for dropping the created index.
          type: string
          readOnly: true
        executeActionInitiatedBy:
          description: Gets if approval for applying this recommended action was given by user/system.
          enum:
            - User
            - System
          type: string
          readOnly: true
          x-ms-enum:
            name: RecommendedActionInitiatedBy
            modelAsString: false
        executeActionInitiatedTime:
          format: date-time
          description: Gets the time when this recommended action was approved for execution.
          type: string
          readOnly: true
        revertActionInitiatedBy:
          description: Gets if approval for reverting this recommended action was given by user/system.
          enum:
            - User
            - System
          type: string
          readOnly: true
          x-ms-enum:
            name: RecommendedActionInitiatedBy
            modelAsString: false
        revertActionInitiatedTime:
          format: date-time
          description: Gets the time when this recommended action was approved for revert.
          type: string
          readOnly: true
        score:
          format: int32
          description: Gets the impact of this recommended action. Possible values are 1 - Low impact, 2 - Medium Impact and 3 - High Impact
          type: integer
          readOnly: true
        implementationDetails:
          $ref: '#/components/schemas/RecommendedActionImplementationInfo'
          description: Gets the implementation details of this recommended action for user to apply it manually.
          readOnly: true
        errorDetails:
          $ref: '#/components/schemas/RecommendedActionErrorInfo'
          description: Gets the error details if and why this recommended action is put to error state.
          readOnly: true
        estimatedImpact:
          description: Gets the estimated impact info for this recommended action e.g., Estimated CPU gain, Estimated Disk Space change
          type: array
          items:
            $ref: '#/components/schemas/RecommendedActionImpactRecord'
          readOnly: true
        observedImpact:
          description: Gets the observed/actual impact info for this recommended action e.g., Actual CPU gain, Actual Disk Space change
          type: array
          items:
            $ref: '#/components/schemas/RecommendedActionImpactRecord'
          readOnly: true
        timeSeries:
          description: Gets the time series info of metrics for this recommended action e.g., CPU consumption time series
          type: array
          items:
            $ref: '#/components/schemas/RecommendedActionMetricInfo'
          readOnly: true
        linkedObjects:
          description: Gets the linked objects, if any.
          type: array
          items:
            type: string
          readOnly: true
        details:
          description: Gets additional details specific to this recommended action.
          type: object
          additionalProperties:
            type: object
          readOnly: true
    RecommendedActionStateInfo:
      description: Contains information of current state for an Azure SQL Database, Server or Elastic Pool Recommended Action.
      required:
        - currentValue
      type: object
      properties:
        currentValue:
          description: 'Current state the recommended action is in. Some commonly used states are: Active      -> recommended action is active and no action has been taken yet. Pending     -> recommended action is approved for and is awaiting execution. Executing   -> recommended action is being applied on the user database. Verifying   -> recommended action was applied and is being verified of its usefulness by the system. Success     -> recommended action was applied and improvement found during verification. Pending Revert  -> verification found little or no improvement so recommended action is queued for revert or user has manually reverted. Reverting   -> changes made while applying recommended action are being reverted on the user database. Reverted    -> successfully reverted the changes made by recommended action on user database. Ignored     -> user explicitly ignored/discarded the recommended action. '
          enum:
            - Active
            - Pending
            - Executing
            - Verifying
            - PendingRevert
            - RevertCancelled
            - Reverting
            - Reverted
            - Ignored
            - Expired
            - Monitoring
            - Resolved
            - Success
            - Error
          type: string
          x-ms-enum:
            name: RecommendedActionCurrentState
            modelAsString: true
        actionInitiatedBy:
          description: 'Gets who initiated the execution of this recommended action. Possible Value are: User    -> When user explicity notified system to apply the recommended action. System  -> When auto-execute status of this advisor was set to ''Enabled'', in which case the system applied it.'
          enum:
            - User
            - System
          type: string
          readOnly: true
          x-ms-enum:
            name: RecommendedActionInitiatedBy
            modelAsString: false
        lastModified:
          format: date-time
          description: Gets the time when the state was last modified
          type: string
          readOnly: true
    RecommendedActionImplementationInfo:
      description: Contains information for manual implementation for an Azure SQL Database, Server or Elastic Pool Recommended Action.
      type: object
      properties:
        method:
          description: Gets the method in which this recommended action can be manually implemented. e.g., TSql, AzurePowerShell.
          enum:
            - TSql
            - AzurePowerShell
          type: string
          readOnly: true
          x-ms-enum:
            name: ImplementationMethod
            modelAsString: false
        script:
          description: Gets the manual implementation script. e.g., T-SQL script that could be executed on the database.
          type: string
          readOnly: true
    RecommendedActionErrorInfo:
      description: Contains error information for an Azure SQL Database, Server or Elastic Pool Recommended Action.
      type: object
      properties:
        errorCode:
          description: Gets the reason why the recommended action was put to error state. e.g., DatabaseHasQdsOff, IndexAlreadyExists
          type: string
          readOnly: true
        isRetryable:
          description: 'Gets whether the error could be ignored and recommended action could be retried. Possible values are: Yes/No'
          enum:
            - 'Yes'
            - 'No'
          type: string
          readOnly: true
          x-ms-enum:
            name: IsRetryable
            modelAsString: false
    RecommendedActionImpactRecord:
      description: Contains information of estimated or observed impact on various metrics for an Azure SQL Database, Server or Elastic Pool Recommended Action.
      type: object
      properties:
        dimensionName:
          description: Gets the name of the impact dimension. e.g., CPUChange, DiskSpaceChange, NumberOfQueriesAffected.
          type: string
          readOnly: true
        unit:
          description: Gets the name of the impact dimension. e.g., CPUChange, DiskSpaceChange, NumberOfQueriesAffected.
          type: string
          readOnly: true
        absoluteValue:
          format: double
          description: Gets the absolute value of this dimension if applicable. e.g., Number of Queries affected
          type: number
          readOnly: true
        changeValueAbsolute:
          format: double
          description: Gets the absolute change in the value of this dimension. e.g., Absolute Disk space change in Megabytes
          type: number
          readOnly: true
        changeValueRelative:
          format: double
          description: Gets the relative change in the value of this dimension. e.g., Relative Disk space change in Percentage
          type: number
          readOnly: true
    RecommendedActionMetricInfo:
      description: Contains time series of various impacted metrics for an Azure SQL Database, Server or Elastic Pool Recommended Action.
      type: object
      properties:
        metricName:
          description: Gets the name of the metric. e.g., CPU, Number of Queries.
          type: string
          readOnly: true
        unit:
          description: Gets the unit in which metric is measured. e.g., DTU, Frequency
          type: string
          readOnly: true
        timeGrain:
          description: Gets the duration of time interval for the value given by this MetricInfo. e.g., PT1H (1 hour)
          type: string
          readOnly: true
        startTime:
          format: date-time
          description: Gets the start time of time interval given by this MetricInfo.
          type: string
          readOnly: true
        value:
          format: double
          description: Gets the value of the metric in the time interval given by this MetricInfo.
          type: number
          readOnly: true
    RecommendedAction:
      description: Database, Server or Elastic Pool Recommended Action.
      properties:
        kind:
          description: Resource kind.
          type: string
          readOnly: true
        location:
          description: Resource location.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/RecommendedActionProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    Advisor:
      description: Database, Server or Elastic Pool Advisor.
      properties:
        kind:
          description: Resource kind.
          type: string
          readOnly: true
        location:
          description: Resource location.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/AdvisorProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    LongTermRetentionPolicy:
      description: A long term retention policy.
      properties:
        properties:
          $ref: '#/components/schemas/LongTermRetentionPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    LongTermRetentionPolicyListResult:
      description: A list of long term retention policies.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/LongTermRetentionPolicy'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    LongTermRetentionPolicyProperties:
      description: Properties of a long term retention policy
      type: object
      properties:
        makeBackupsImmutable:
          description: The setting whether to make LTR backups immutable
          type: boolean
        backupStorageAccessTier:
          description: The BackupStorageAccessTier for the LTR backups
          enum:
            - Hot
            - Archive
          type: string
          x-ms-enum:
            name: BackupStorageAccessTier
            modelAsString: true
        weeklyRetention:
          description: The weekly retention policy for an LTR backup in an ISO 8601 format.
          type: string
        monthlyRetention:
          description: The monthly retention policy for an LTR backup in an ISO 8601 format.
          type: string
        yearlyRetention:
          description: The yearly retention policy for an LTR backup in an ISO 8601 format.
          type: string
        weekOfYear:
          format: int32
          description: The week of year to take the yearly backup in an ISO 8601 format.
          type: integer
    ManagedInstancePrivateLinkListResult:
      description: A list of private link resources
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstancePrivateLink'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedInstancePrivateLinkProperties:
      description: Properties of a private link resource.
      type: object
      properties:
        groupId:
          description: The private link resource group id.
          type: string
          readOnly: true
        requiredMembers:
          description: The private link resource required member names.
          type: array
          items:
            type: string
          readOnly: true
    ManagedInstancePrivateLink:
      description: A private link resource
      properties:
        properties:
          $ref: '#/components/schemas/ManagedInstancePrivateLinkProperties'
          description: The private link resource group id.
          readOnly: true
      type: object
    DatabaseOperation:
      description: A database operation.
      properties:
        properties:
          $ref: '#/components/schemas/DatabaseOperationProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseOperationListResult:
      description: The response to a list database operations request
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DatabaseOperation'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    DatabaseOperationProperties:
      description: The properties of a database operation.
      type: object
      properties:
        databaseName:
          description: The name of the database the operation is being performed on.
          type: string
          readOnly: true
        operation:
          description: The name of operation.
          type: string
          readOnly: true
        operationFriendlyName:
          description: The friendly name of operation.
          type: string
          readOnly: true
        percentComplete:
          format: int32
          description: The percentage of the operation completed.
          type: integer
          readOnly: true
        serverName:
          description: The name of the server.
          type: string
          readOnly: true
        startTime:
          format: date-time
          description: The operation start time.
          type: string
          readOnly: true
        state:
          description: The operation state.
          enum:
            - Pending
            - InProgress
            - Succeeded
            - Failed
            - CancelInProgress
            - Cancelled
          type: string
          readOnly: true
          x-ms-enum:
            name: ManagementOperationState
            modelAsString: true
        errorCode:
          format: int32
          description: The operation error code.
          type: integer
          readOnly: true
        errorDescription:
          description: The operation error description.
          type: string
          readOnly: true
        errorSeverity:
          format: int32
          description: The operation error severity.
          type: integer
          readOnly: true
        isUserError:
          description: Whether or not the error is a user error.
          type: boolean
          readOnly: true
        estimatedCompletionTime:
          format: date-time
          description: The estimated completion time of the operation.
          type: string
          readOnly: true
        description:
          description: The operation description.
          type: string
          readOnly: true
        isCancellable:
          description: Whether the operation can be cancelled.
          type: boolean
          readOnly: true
        operationPhaseDetails:
          $ref: '#/components/schemas/PhaseDetails'
          description: The operation phase details.
          readOnly: true
    PhaseDetails:
      description: The phase details properties of a database operation.
      type: object
      properties:
        phase:
          description: The operation phase.
          enum:
            - Copying
            - Catchup
            - WaitingForCutover
            - CutoverInProgress
          type: string
          readOnly: true
          x-ms-enum:
            name: Phase
            modelAsString: true
        phaseInformation:
          description: The operation phase information.
          type: object
          additionalProperties:
            type: string
          readOnly: true
    TdeCertificateProperties:
      description: Properties of a TDE certificate.
      required:
        - privateBlob
      type: object
      properties:
        privateBlob:
          description: The base64 encoded certificate private blob.
          type: string
          x-ms-mutability:
            - create
            - update
        certPassword:
          description: The certificate password.
          type: string
          x-ms-mutability:
            - create
            - update
    TdeCertificate:
      description: A TDE certificate that can be uploaded into a server.
      properties:
        properties:
          $ref: '#/components/schemas/TdeCertificateProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseBlobAuditingPolicy:
      description: A database blob auditing policy.
      properties:
        kind:
          description: Resource kind.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/DatabaseBlobAuditingPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseBlobAuditingPolicyListResult:
      description: A list of database auditing settings.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DatabaseBlobAuditingPolicy'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    DatabaseBlobAuditingPolicyProperties:
      description: Properties of a database blob auditing policy.
      required:
        - state
      type: object
      properties:
        retentionDays:
          format: int32
          description: Specifies the number of days to keep in the audit logs in the storage account.
          type: integer
        auditActionsAndGroups:
          description: "Specifies the Actions-Groups and Actions to audit.\r\n\r\nThe recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:\r\n\r\nBATCH_COMPLETED_GROUP,\r\nSUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,\r\nFAILED_DATABASE_AUTHENTICATION_GROUP.\r\n\r\nThis above combination is also the set that is configured by default when enabling auditing from the Azure portal.\r\n\r\nThe supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):\r\n\r\nAPPLICATION_ROLE_CHANGE_PASSWORD_GROUP\r\nBACKUP_RESTORE_GROUP\r\nDATABASE_LOGOUT_GROUP\r\nDATABASE_OBJECT_CHANGE_GROUP\r\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP\r\nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP\r\nDATABASE_OPERATION_GROUP\r\nDATABASE_PERMISSION_CHANGE_GROUP\r\nDATABASE_PRINCIPAL_CHANGE_GROUP\r\nDATABASE_PRINCIPAL_IMPERSONATION_GROUP\r\nDATABASE_ROLE_MEMBER_CHANGE_GROUP\r\nFAILED_DATABASE_AUTHENTICATION_GROUP\r\nSCHEMA_OBJECT_ACCESS_GROUP\r\nSCHEMA_OBJECT_CHANGE_GROUP\r\nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP\r\nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP\r\nSUCCESSFUL_DATABASE_AUTHENTICATION_GROUP\r\nUSER_CHANGE_PASSWORD_GROUP\r\nBATCH_STARTED_GROUP\r\nBATCH_COMPLETED_GROUP\r\nDBCC_GROUP\r\nDATABASE_OWNERSHIP_CHANGE_GROUP\r\nDATABASE_CHANGE_GROUP\r\nLEDGER_OPERATION_GROUP\r\n\r\nThese are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.\r\n\r\nFor more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).\r\n\r\nFor Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:\r\nSELECT\r\nUPDATE\r\nINSERT\r\nDELETE\r\nEXECUTE\r\nRECEIVE\r\nREFERENCES\r\n\r\nThe general form for defining an action to be audited is:\r\n{action} ON {object} BY {principal}\r\n\r\nNote that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.\r\n\r\nFor example:\r\nSELECT on dbo.myTable by public\r\nSELECT on DATABASE::myDatabase by public\r\nSELECT on SCHEMA::mySchema by public\r\n\r\nFor more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)"
          type: array
          items:
            type: string
        isStorageSecondaryKeyInUse:
          description: Specifies whether storageAccountAccessKey value is the storage's secondary key.
          type: boolean
        isAzureMonitorTargetEnabled:
          description: "Specifies whether audit events are sent to Azure Monitor. \r\nIn order to send the events to Azure Monitor, specify 'State' as 'Enabled' and 'IsAzureMonitorTargetEnabled' as true.\r\n\r\nWhen using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.\r\nNote that for server level audit you should use the 'master' database as {databaseName}.\r\n\r\nDiagnostic Settings URI format:\r\nPUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview\r\n\r\nFor more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)\r\nor [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)\r\n"
          type: boolean
        queueDelayMs:
          format: int32
          description: "Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.\r\nThe default minimum value is 1000 (1 second). The maximum is 2,147,483,647."
          type: integer
        isManagedIdentityInUse:
          description: Specifies whether Managed Identity is used to access blob storage
          type: boolean
        state:
          description: Specifies the state of the audit. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
          enum:
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: BlobAuditingPolicyState
            modelAsString: false
        storageEndpoint:
          description: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
          type: string
        storageAccountAccessKey:
          description: "Specifies the identifier key of the auditing storage account. \r\nIf state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.\r\nPrerequisites for using managed identity authentication:\r\n1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).\r\n2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity.\r\nFor more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)"
          type: string
          x-ms-secret: true
          x-ms-mutability:
            - create
            - update
        storageAccountSubscriptionId:
          format: uuid
          description: Specifies the blob storage subscription Id.
          type: string
    ExtendedDatabaseBlobAuditingPolicy:
      description: An extended database blob auditing policy.
      properties:
        properties:
          $ref: '#/components/schemas/ExtendedDatabaseBlobAuditingPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ExtendedDatabaseBlobAuditingPolicyListResult:
      description: A list of database extended auditing settings.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ExtendedDatabaseBlobAuditingPolicy'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ExtendedDatabaseBlobAuditingPolicyProperties:
      description: Properties of an extended database blob auditing policy.
      required:
        - state
      type: object
      properties:
        predicateExpression:
          description: Specifies condition of where clause when creating an audit.
          type: string
        retentionDays:
          format: int32
          description: Specifies the number of days to keep in the audit logs in the storage account.
          type: integer
        auditActionsAndGroups:
          description: "Specifies the Actions-Groups and Actions to audit.\r\n\r\nThe recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:\r\n\r\nBATCH_COMPLETED_GROUP,\r\nSUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,\r\nFAILED_DATABASE_AUTHENTICATION_GROUP.\r\n\r\nThis above combination is also the set that is configured by default when enabling auditing from the Azure portal.\r\n\r\nThe supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):\r\n\r\nAPPLICATION_ROLE_CHANGE_PASSWORD_GROUP\r\nBACKUP_RESTORE_GROUP\r\nDATABASE_LOGOUT_GROUP\r\nDATABASE_OBJECT_CHANGE_GROUP\r\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP\r\nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP\r\nDATABASE_OPERATION_GROUP\r\nDATABASE_PERMISSION_CHANGE_GROUP\r\nDATABASE_PRINCIPAL_CHANGE_GROUP\r\nDATABASE_PRINCIPAL_IMPERSONATION_GROUP\r\nDATABASE_ROLE_MEMBER_CHANGE_GROUP\r\nFAILED_DATABASE_AUTHENTICATION_GROUP\r\nSCHEMA_OBJECT_ACCESS_GROUP\r\nSCHEMA_OBJECT_CHANGE_GROUP\r\nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP\r\nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP\r\nSUCCESSFUL_DATABASE_AUTHENTICATION_GROUP\r\nUSER_CHANGE_PASSWORD_GROUP\r\nBATCH_STARTED_GROUP\r\nBATCH_COMPLETED_GROUP\r\nDBCC_GROUP\r\nDATABASE_OWNERSHIP_CHANGE_GROUP\r\nDATABASE_CHANGE_GROUP\r\nLEDGER_OPERATION_GROUP\r\n\r\nThese are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.\r\n\r\nFor more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).\r\n\r\nFor Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:\r\nSELECT\r\nUPDATE\r\nINSERT\r\nDELETE\r\nEXECUTE\r\nRECEIVE\r\nREFERENCES\r\n\r\nThe general form for defining an action to be audited is:\r\n{action} ON {object} BY {principal}\r\n\r\nNote that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.\r\n\r\nFor example:\r\nSELECT on dbo.myTable by public\r\nSELECT on DATABASE::myDatabase by public\r\nSELECT on SCHEMA::mySchema by public\r\n\r\nFor more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)"
          type: array
          items:
            type: string
        isStorageSecondaryKeyInUse:
          description: Specifies whether storageAccountAccessKey value is the storage's secondary key.
          type: boolean
        isAzureMonitorTargetEnabled:
          description: "Specifies whether audit events are sent to Azure Monitor. \r\nIn order to send the events to Azure Monitor, specify 'State' as 'Enabled' and 'IsAzureMonitorTargetEnabled' as true.\r\n\r\nWhen using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.\r\nNote that for server level audit you should use the 'master' database as {databaseName}.\r\n\r\nDiagnostic Settings URI format:\r\nPUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview\r\n\r\nFor more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)\r\nor [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)\r\n"
          type: boolean
        queueDelayMs:
          format: int32
          description: "Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.\r\nThe default minimum value is 1000 (1 second). The maximum is 2,147,483,647."
          type: integer
        isManagedIdentityInUse:
          description: Specifies whether Managed Identity is used to access blob storage
          type: boolean
        state:
          description: Specifies the state of the audit. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
          enum:
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: BlobAuditingPolicyState
            modelAsString: false
        storageEndpoint:
          description: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
          type: string
        storageAccountAccessKey:
          description: "Specifies the identifier key of the auditing storage account. \r\nIf state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.\r\nPrerequisites for using managed identity authentication:\r\n1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).\r\n2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity.\r\nFor more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)"
          type: string
          x-ms-secret: true
          x-ms-mutability:
            - create
            - update
        storageAccountSubscriptionId:
          format: uuid
          description: Specifies the blob storage subscription Id.
          type: string
    ExtendedServerBlobAuditingPolicy:
      description: An extended server blob auditing policy.
      properties:
        properties:
          $ref: '#/components/schemas/ExtendedServerBlobAuditingPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ExtendedServerBlobAuditingPolicyListResult:
      description: A list of server extended auditing settings.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ExtendedServerBlobAuditingPolicy'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ExtendedServerBlobAuditingPolicyProperties:
      description: Properties of an extended server blob auditing policy.
      required:
        - state
      type: object
      properties:
        isDevopsAuditEnabled:
          description: "Specifies the state of devops audit. If state is Enabled, devops logs will be sent to Azure Monitor.\r\nIn order to send the events to Azure Monitor, specify 'State' as 'Enabled', 'IsAzureMonitorTargetEnabled' as true and 'IsDevopsAuditEnabled' as true\r\n\r\nWhen using REST API to configure auditing, Diagnostic Settings with 'DevOpsOperationsAudit' diagnostic logs category on the master database should also be created.\r\n\r\nDiagnostic Settings URI format:\r\nPUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/master/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview\r\n\r\nFor more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)\r\nor [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)\r\n"
          type: boolean
        predicateExpression:
          description: Specifies condition of where clause when creating an audit.
          type: string
        retentionDays:
          format: int32
          description: Specifies the number of days to keep in the audit logs in the storage account.
          type: integer
        auditActionsAndGroups:
          description: "Specifies the Actions-Groups and Actions to audit.\r\n\r\nThe recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:\r\n\r\nBATCH_COMPLETED_GROUP,\r\nSUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,\r\nFAILED_DATABASE_AUTHENTICATION_GROUP.\r\n\r\nThis above combination is also the set that is configured by default when enabling auditing from the Azure portal.\r\n\r\nThe supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):\r\n\r\nAPPLICATION_ROLE_CHANGE_PASSWORD_GROUP\r\nBACKUP_RESTORE_GROUP\r\nDATABASE_LOGOUT_GROUP\r\nDATABASE_OBJECT_CHANGE_GROUP\r\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP\r\nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP\r\nDATABASE_OPERATION_GROUP\r\nDATABASE_PERMISSION_CHANGE_GROUP\r\nDATABASE_PRINCIPAL_CHANGE_GROUP\r\nDATABASE_PRINCIPAL_IMPERSONATION_GROUP\r\nDATABASE_ROLE_MEMBER_CHANGE_GROUP\r\nFAILED_DATABASE_AUTHENTICATION_GROUP\r\nSCHEMA_OBJECT_ACCESS_GROUP\r\nSCHEMA_OBJECT_CHANGE_GROUP\r\nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP\r\nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP\r\nSUCCESSFUL_DATABASE_AUTHENTICATION_GROUP\r\nUSER_CHANGE_PASSWORD_GROUP\r\nBATCH_STARTED_GROUP\r\nBATCH_COMPLETED_GROUP\r\nDBCC_GROUP\r\nDATABASE_OWNERSHIP_CHANGE_GROUP\r\nDATABASE_CHANGE_GROUP\r\nLEDGER_OPERATION_GROUP\r\n\r\nThese are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.\r\n\r\nFor more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).\r\n\r\nFor Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:\r\nSELECT\r\nUPDATE\r\nINSERT\r\nDELETE\r\nEXECUTE\r\nRECEIVE\r\nREFERENCES\r\n\r\nThe general form for defining an action to be audited is:\r\n{action} ON {object} BY {principal}\r\n\r\nNote that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.\r\n\r\nFor example:\r\nSELECT on dbo.myTable by public\r\nSELECT on DATABASE::myDatabase by public\r\nSELECT on SCHEMA::mySchema by public\r\n\r\nFor more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)"
          type: array
          items:
            type: string
        isStorageSecondaryKeyInUse:
          description: Specifies whether storageAccountAccessKey value is the storage's secondary key.
          type: boolean
        isAzureMonitorTargetEnabled:
          description: "Specifies whether audit events are sent to Azure Monitor. \r\nIn order to send the events to Azure Monitor, specify 'State' as 'Enabled' and 'IsAzureMonitorTargetEnabled' as true.\r\n\r\nWhen using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.\r\nNote that for server level audit you should use the 'master' database as {databaseName}.\r\n\r\nDiagnostic Settings URI format:\r\nPUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview\r\n\r\nFor more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)\r\nor [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)\r\n"
          type: boolean
        queueDelayMs:
          format: int32
          description: "Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.\r\nThe default minimum value is 1000 (1 second). The maximum is 2,147,483,647."
          type: integer
        isManagedIdentityInUse:
          description: Specifies whether Managed Identity is used to access blob storage
          type: boolean
        state:
          description: Specifies the state of the audit. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
          enum:
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: BlobAuditingPolicyState
            modelAsString: false
        storageEndpoint:
          description: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
          type: string
        storageAccountAccessKey:
          description: "Specifies the identifier key of the auditing storage account. \r\nIf state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.\r\nPrerequisites for using managed identity authentication:\r\n1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).\r\n2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity.\r\nFor more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)"
          type: string
          x-ms-secret: true
          x-ms-mutability:
            - create
            - update
        storageAccountSubscriptionId:
          format: uuid
          description: Specifies the blob storage subscription Id.
          type: string
    ServerBlobAuditingPolicy:
      description: A server blob auditing policy.
      properties:
        properties:
          $ref: '#/components/schemas/ServerBlobAuditingPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServerBlobAuditingPolicyListResult:
      description: A list of server auditing settings.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerBlobAuditingPolicy'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ServerBlobAuditingPolicyProperties:
      description: Properties of a server blob auditing policy.
      required:
        - state
      type: object
      properties:
        isDevopsAuditEnabled:
          description: "Specifies the state of devops audit. If state is Enabled, devops logs will be sent to Azure Monitor.\r\nIn order to send the events to Azure Monitor, specify 'State' as 'Enabled', 'IsAzureMonitorTargetEnabled' as true and 'IsDevopsAuditEnabled' as true\r\n\r\nWhen using REST API to configure auditing, Diagnostic Settings with 'DevOpsOperationsAudit' diagnostic logs category on the master database should also be created.\r\n\r\nDiagnostic Settings URI format:\r\nPUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/master/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview\r\n\r\nFor more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)\r\nor [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)\r\n"
          type: boolean
        retentionDays:
          format: int32
          description: Specifies the number of days to keep in the audit logs in the storage account.
          type: integer
        auditActionsAndGroups:
          description: "Specifies the Actions-Groups and Actions to audit.\r\n\r\nThe recommended set of action groups to use is the following combination - this will audit all the queries and stored procedures executed against the database, as well as successful and failed logins:\r\n\r\nBATCH_COMPLETED_GROUP,\r\nSUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,\r\nFAILED_DATABASE_AUTHENTICATION_GROUP.\r\n\r\nThis above combination is also the set that is configured by default when enabling auditing from the Azure portal.\r\n\r\nThe supported action groups to audit are (note: choose only specific groups that cover your auditing needs. Using unnecessary groups could lead to very large quantities of audit records):\r\n\r\nAPPLICATION_ROLE_CHANGE_PASSWORD_GROUP\r\nBACKUP_RESTORE_GROUP\r\nDATABASE_LOGOUT_GROUP\r\nDATABASE_OBJECT_CHANGE_GROUP\r\nDATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP\r\nDATABASE_OBJECT_PERMISSION_CHANGE_GROUP\r\nDATABASE_OPERATION_GROUP\r\nDATABASE_PERMISSION_CHANGE_GROUP\r\nDATABASE_PRINCIPAL_CHANGE_GROUP\r\nDATABASE_PRINCIPAL_IMPERSONATION_GROUP\r\nDATABASE_ROLE_MEMBER_CHANGE_GROUP\r\nFAILED_DATABASE_AUTHENTICATION_GROUP\r\nSCHEMA_OBJECT_ACCESS_GROUP\r\nSCHEMA_OBJECT_CHANGE_GROUP\r\nSCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP\r\nSCHEMA_OBJECT_PERMISSION_CHANGE_GROUP\r\nSUCCESSFUL_DATABASE_AUTHENTICATION_GROUP\r\nUSER_CHANGE_PASSWORD_GROUP\r\nBATCH_STARTED_GROUP\r\nBATCH_COMPLETED_GROUP\r\nDBCC_GROUP\r\nDATABASE_OWNERSHIP_CHANGE_GROUP\r\nDATABASE_CHANGE_GROUP\r\nLEDGER_OPERATION_GROUP\r\n\r\nThese are groups that cover all sql statements and stored procedures executed against the database, and should not be used in combination with other groups as this will result in duplicate audit logs.\r\n\r\nFor more information, see [Database-Level Audit Action Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).\r\n\r\nFor Database auditing policy, specific Actions can also be specified (note that Actions cannot be specified for Server auditing policy). The supported actions to audit are:\r\nSELECT\r\nUPDATE\r\nINSERT\r\nDELETE\r\nEXECUTE\r\nRECEIVE\r\nREFERENCES\r\n\r\nThe general form for defining an action to be audited is:\r\n{action} ON {object} BY {principal}\r\n\r\nNote that <object> in the above format can refer to an object like a table, view, or stored procedure, or an entire database or schema. For the latter cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used, respectively.\r\n\r\nFor example:\r\nSELECT on dbo.myTable by public\r\nSELECT on DATABASE::myDatabase by public\r\nSELECT on SCHEMA::mySchema by public\r\n\r\nFor more information, see [Database-Level Audit Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)"
          type: array
          items:
            type: string
        isStorageSecondaryKeyInUse:
          description: Specifies whether storageAccountAccessKey value is the storage's secondary key.
          type: boolean
        isAzureMonitorTargetEnabled:
          description: "Specifies whether audit events are sent to Azure Monitor. \r\nIn order to send the events to Azure Monitor, specify 'State' as 'Enabled' and 'IsAzureMonitorTargetEnabled' as true.\r\n\r\nWhen using REST API to configure auditing, Diagnostic Settings with 'SQLSecurityAuditEvents' diagnostic logs category on the database should be also created.\r\nNote that for server level audit you should use the 'master' database as {databaseName}.\r\n\r\nDiagnostic Settings URI format:\r\nPUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview\r\n\r\nFor more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)\r\nor [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)\r\n"
          type: boolean
        queueDelayMs:
          format: int32
          description: "Specifies the amount of time in milliseconds that can elapse before audit actions are forced to be processed.\r\nThe default minimum value is 1000 (1 second). The maximum is 2,147,483,647."
          type: integer
        isManagedIdentityInUse:
          description: Specifies whether Managed Identity is used to access blob storage
          type: boolean
        state:
          description: Specifies the state of the audit. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
          enum:
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: BlobAuditingPolicyState
            modelAsString: false
        storageEndpoint:
          description: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
          type: string
        storageAccountAccessKey:
          description: "Specifies the identifier key of the auditing storage account. \r\nIf state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.\r\nPrerequisites for using managed identity authentication:\r\n1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).\r\n2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity.\r\nFor more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)"
          type: string
          x-ms-secret: true
          x-ms-mutability:
            - create
            - update
        storageAccountSubscriptionId:
          format: uuid
          description: Specifies the blob storage subscription Id.
          type: string
    ServerConfigurationOption:
      description: A server configuration option
      properties:
        properties:
          $ref: '#/components/schemas/ServerConfigurationOptionProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServerConfigurationOptionListResult:
      description: A list of server configuration options.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerConfigurationOption'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ServerConfigurationOptionProperties:
      description: The properties of server configuration option.
      required:
        - serverConfigurationOptionValue
      type: object
      properties:
        serverConfigurationOptionValue:
          format: int32
          description: Value of the server configuration option.
          type: integer
          x-ms-mutability:
            - read
            - update
        provisioningState:
          description: Provisioning state of server configuration option.
          enum:
            - Created
            - InProgress
            - Succeeded
            - Failed
            - Canceled
          type: string
          readOnly: true
          x-ms-enum:
            name: ProvisioningState
            modelAsString: true
    ManagedInstanceKeyListResult:
      description: A list of managed instance keys.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceKey'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedInstanceKeyProperties:
      description: Properties for a key execution.
      required:
        - serverKeyType
      type: object
      properties:
        serverKeyType:
          description: The key type like 'ServiceManaged', 'AzureKeyVault'.
          enum:
            - ServiceManaged
            - AzureKeyVault
          type: string
          x-ms-enum:
            name: ServerKeyType
            modelAsString: true
          x-ms-mutability:
            - create
        uri:
          description: The URI of the key. If the ServerKeyType is AzureKeyVault, then the URI is required.
          type: string
          x-ms-mutability:
            - create
        thumbprint:
          description: Thumbprint of the key.
          type: string
          readOnly: true
        creationDate:
          format: date-time
          description: The key creation date.
          type: string
          readOnly: true
        autoRotationEnabled:
          description: Key auto rotation opt-in flag. Either true or false.
          type: boolean
          readOnly: true
    ManagedInstanceKey:
      description: A managed instance key.
      properties:
        kind:
          description: Kind of encryption protector. This is metadata used for the Azure portal experience.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/ManagedInstanceKeyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedInstanceAdministratorListResult:
      description: A list of managed instance administrators.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceAdministrator'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedInstanceAdministratorProperties:
      description: The properties of a managed instance administrator.
      required:
        - administratorType
        - login
        - sid
      type: object
      properties:
        administratorType:
          description: Type of the managed instance administrator.
          enum:
            - ActiveDirectory
          type: string
          x-ms-enum:
            name: ManagedInstanceAdministratorType
            modelAsString: true
        login:
          description: Login name of the managed instance administrator.
          type: string
        sid:
          format: uuid
          description: SID (object ID) of the managed instance administrator.
          type: string
        tenantId:
          format: uuid
          description: Tenant ID of the managed instance administrator.
          type: string
    ManagedInstanceAdministrator:
      description: An Azure SQL managed instance administrator.
      properties:
        properties:
          $ref: '#/components/schemas/ManagedInstanceAdministratorProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseKey:
      description: Database level key used for encryption at rest.
      type: object
      properties:
        type:
          description: The database key type. Only supported value is 'AzureKeyVault'.
          enum:
            - AzureKeyVault
          type: string
          readOnly: true
          x-ms-enum:
            name: DatabaseKeyType
            modelAsString: true
        thumbprint:
          description: Thumbprint of the database key.
          type: string
          readOnly: true
        creationDate:
          format: date-time
          description: The database key creation date.
          type: string
          readOnly: true
        subregion:
          description: Subregion of the server key.
          type: string
          readOnly: true
    RecoverableDatabase:
      description: A recoverable database resource.
      properties:
        properties:
          $ref: '#/components/schemas/RecoverableDatabaseProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    RecoverableDatabaseListResult:
      description: A list of recoverable databases.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/RecoverableDatabase'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    RecoverableDatabaseProperties:
      description: The recoverable database's properties.
      type: object
      properties:
        edition:
          description: The edition of the database.
          type: string
          readOnly: true
        serviceLevelObjective:
          description: The service level objective name of the database.
          type: string
          readOnly: true
        elasticPoolName:
          description: The elastic pool name of the database
          type: string
          readOnly: true
        lastAvailableBackupDate:
          format: date-time
          description: The last available backup date.
          type: string
          readOnly: true
        keys:
          description: The resource ids of the user assigned identities to use
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DatabaseKey'
    SqlVulnerabilityAssessmentScanError:
      description: Properties of a vulnerability assessment scan error.
      type: object
      properties:
        code:
          description: The error code.
          type: string
          readOnly: true
        message:
          description: The error message.
          type: string
          readOnly: true
    SqlVulnerabilityAssessmentScanRecord:
      description: A vulnerability assessment scan record.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of SqlVulnerabilityAssessmentScanRecordResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/SqlVulnerabilityAssessmentScanRecordProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    SqlVulnerabilityAssessmentScanRecordListResult:
      description: A list of vulnerability assessment scan records.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SqlVulnerabilityAssessmentScanRecord'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SqlVulnerabilityAssessmentScanRecordProperties:
      description: Properties of a vulnerability assessment scan record.
      type: object
      properties:
        scanId:
          description: The scan ID.
          type: string
          readOnly: true
        triggerType:
          description: The scan trigger type.
          enum:
            - OnDemand
            - Recurring
          type: string
          readOnly: true
          x-ms-enum:
            name: VulnerabilityAssessmentScanTriggerType
            modelAsString: true
        state:
          description: The scan status.
          enum:
            - Passed
            - Failed
            - FailedToRun
            - InProgress
          type: string
          readOnly: true
          x-ms-enum:
            name: VulnerabilityAssessmentScanState
            modelAsString: true
        startTime:
          format: date-time
          description: The scan start time (UTC).
          type: string
          readOnly: true
        endTime:
          format: date-time
          description: The scan end time (UTC).
          type: string
          readOnly: true
        errors:
          description: The scan errors.
          type: array
          items:
            $ref: '#/components/schemas/SqlVulnerabilityAssessmentScanError'
          readOnly: true
        server:
          description: The server name.
          type: string
          readOnly: true
        database:
          description: The database name.
          type: string
          readOnly: true
        sqlVersion:
          description: The SQL version.
          type: string
          readOnly: true
        highSeverityFailedRulesCount:
          format: int32
          description: The number of failed rules with high severity.
          type: integer
          readOnly: true
        mediumSeverityFailedRulesCount:
          format: int32
          description: The number of failed rules with medium severity.
          type: integer
          readOnly: true
        lowSeverityFailedRulesCount:
          format: int32
          description: The number of failed rules with low severity.
          type: integer
          readOnly: true
        totalPassedRulesCount:
          format: int32
          description: The number of total passed rules.
          type: integer
          readOnly: true
        totalFailedRulesCount:
          format: int32
          description: The number of total failed rules.
          type: integer
          readOnly: true
        totalRulesCount:
          format: int32
          description: The number of total rules assessed.
          type: integer
          readOnly: true
        isBaselineApplied:
          description: Baseline created for this database, and has one or more rules.
          type: boolean
          readOnly: true
        lastScanTime:
          format: date-time
          description: The last scan time.
          type: string
          readOnly: true
    EndpointDependency:
      description: A domain name that the managed instance service needs to communicate with, along with additional details.
      type: object
      properties:
        domainName:
          description: The domain name of the dependency.
          type: string
          readOnly: true
        endpointDetails:
          description: The IP Addresses and Ports used when connecting to DomainName.
          type: array
          items:
            $ref: '#/components/schemas/EndpointDetail'
          readOnly: true
          x-ms-identifiers: []
    EndpointDetail:
      description: A domain name that the managed instance service needs to communicate with, along with additional details.
      type: object
      properties:
        port:
          format: int32
          description: The port an endpoint is connected to.
          type: integer
          readOnly: true
    ManagedInstance:
      description: An Azure SQL managed instance.
      required:
        - location
      properties:
        location:
          description: Resource location.
          type: string
          x-ms-mutability:
            - read
            - create
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
        identity:
          $ref: '#/components/schemas/ResourceIdentity'
          description: The Azure Active Directory identity of the managed instance.
          x-ms-mutability:
            - read
            - create
        sku:
          $ref: '#/components/schemas/Sku'
          description: 'Managed instance SKU. Allowed values for sku.name: GP_Gen5, GP_G8IM, GP_G8IH, BC_Gen5, BC_G8IM, BC_G8IH'
        properties:
          $ref: '#/components/schemas/ManagedInstanceProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedInstanceExternalAdministrator:
      description: Properties of a active directory administrator.
      type: object
      properties:
        administratorType:
          description: Type of the sever administrator.
          enum:
            - ActiveDirectory
          type: string
          x-ms-enum:
            name: AdministratorType
            modelAsString: true
        principalType:
          description: Principal Type of the sever administrator.
          enum:
            - User
            - Group
            - Application
          type: string
          x-ms-enum:
            name: PrincipalType
            modelAsString: true
        login:
          description: Login name of the server administrator.
          type: string
        sid:
          format: uuid
          description: SID (object ID) of the server administrator.
          type: string
        tenantId:
          format: uuid
          description: Tenant ID of the administrator.
          type: string
        azureADOnlyAuthentication:
          description: Azure Active Directory only Authentication enabled.
          type: boolean
    ManagedInstanceListResult:
      description: A list of managed instances.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstance'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedInstancePecProperty:
      description: A private endpoint connection under a managed instance
      properties:
        id:
          description: Resource ID.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/ManagedInstancePrivateEndpointConnectionProperties'
          description: Private endpoint connection properties
          readOnly: true
      type: object
    ManagedInstancePrivateEndpointConnectionProperties:
      description: Properties of a private endpoint connection.
      type: object
      properties:
        privateEndpoint:
          $ref: '#/components/schemas/ManagedInstancePrivateEndpointProperty'
          description: Private endpoint which the connection belongs to.
        privateLinkServiceConnectionState:
          $ref: '#/components/schemas/ManagedInstancePrivateLinkServiceConnectionStateProperty'
          description: Connection State of the Private Endpoint Connection.
        provisioningState:
          description: State of the Private Endpoint Connection.
          type: string
          readOnly: true
    ManagedInstancePrivateEndpointProperty:
      type: object
      properties:
        id:
          description: Resource id of the private endpoint.
          type: string
    ManagedInstancePrivateLinkServiceConnectionStateProperty:
      required:
        - status
        - description
      type: object
      properties:
        status:
          description: The private link service connection status.
          type: string
        description:
          description: The private link service connection description.
          type: string
        actionsRequired:
          description: The private link service connection description.
          type: string
          readOnly: true
    ManagedInstanceProperties:
      description: The properties of a managed instance.
      type: object
      properties:
        provisioningState:
          description: Provisioning state of managed instance.
          enum:
            - Created
            - InProgress
            - Succeeded
            - Failed
            - Canceled
          type: string
          readOnly: true
          x-ms-enum:
            name: ProvisioningState
            modelAsString: true
        managedInstanceCreateMode:
          description: "Specifies the mode of database creation.\r\n\r\nDefault: Regular instance creation.\r\n\r\nRestore: Creates an instance by restoring a set of backups to specific point in time. RestorePointInTime and SourceManagedInstanceId must be specified."
          enum:
            - Default
            - PointInTimeRestore
          type: string
          x-ms-enum:
            name: ManagedServerCreateMode
            modelAsString: true
          x-ms-mutability:
            - create
        fullyQualifiedDomainName:
          description: The fully qualified domain name of the managed instance.
          type: string
          readOnly: true
        isGeneralPurposeV2:
          description: Whether or not this is a GPv2 variant of General Purpose edition.
          type: boolean
        administratorLogin:
          description: Administrator username for the managed instance. Can only be specified when the managed instance is being created (and is required for creation).
          type: string
          x-ms-mutability:
            - read
            - create
        administratorLoginPassword:
          description: The administrator login password (required for managed instance creation).
          type: string
          x-ms-secret: true
          x-ms-mutability:
            - create
            - update
        subnetId:
          description: Subnet resource ID for the managed instance.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - type: Microsoft.Network/virtualNetworks/subnets
        state:
          description: The state of the managed instance.
          type: string
          readOnly: true
        licenseType:
          description: The license type. Possible values are 'LicenseIncluded' (regular price inclusive of a new SQL license) and 'BasePrice' (discounted AHB price for bringing your own SQL licenses).
          enum:
            - LicenseIncluded
            - BasePrice
          type: string
          x-ms-enum:
            name: ManagedInstanceLicenseType
            modelAsString: true
        hybridSecondaryUsage:
          description: Hybrid secondary usage. Possible values are 'Active' (default value) and 'Passive' (customer uses the secondary as Passive DR).
          enum:
            - Active
            - Passive
          type: string
          x-ms-enum:
            name: HybridSecondaryUsage
            modelAsString: true
        hybridSecondaryUsageDetected:
          description: Hybrid secondary usage detected. Possible values are 'Active' (customer does not meet the requirements to use the secondary as Passive DR) and 'Passive' (customer meets the requirements to use the secondary as Passive DR).
          enum:
            - Active
            - Passive
          type: string
          readOnly: true
          x-ms-enum:
            name: HybridSecondaryUsageDetected
            modelAsString: true
        vCores:
          format: int32
          description: 'The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.'
          type: integer
        storageSizeInGB:
          format: int32
          description: 'Storage size in GB. Minimum value: 32. Maximum value: 16384. Increments of 32 GB allowed only. Maximum value depends on the selected hardware family and number of vCores.'
          type: integer
        storageIOps:
          format: int32
          description: 'Storage IOps. Minimum value: 300. Maximum value: 80000. Increments of 1 IOps allowed only. Maximum value depends on the selected hardware family and number of vCores.'
          type: integer
        storageThroughputMBps:
          format: int32
          description: Storage throughput MBps parameter is not supported in the instance create/update operation.
          type: integer
        collation:
          description: Collation of the managed instance.
          type: string
          x-ms-mutability:
            - read
            - create
        dnsZone:
          description: The Dns Zone that the managed instance is in.
          type: string
          readOnly: true
        dnsZonePartner:
          description: The resource id of another managed instance whose DNS zone this managed instance will share after creation.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - {}
          x-ms-mutability:
            - create
        publicDataEndpointEnabled:
          description: Whether or not the public data endpoint is enabled.
          type: boolean
        sourceManagedInstanceId:
          description: The resource identifier of the source managed instance associated with create operation of this instance.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - {}
          x-ms-mutability:
            - create
        restorePointInTime:
          format: date-time
          description: Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
          type: string
          x-ms-mutability:
            - create
        proxyOverride:
          description: Connection type used for connecting to the instance.
          enum:
            - Proxy
            - Redirect
            - Default
          type: string
          x-ms-enum:
            name: ManagedInstanceProxyOverride
            modelAsString: true
        timezoneId:
          description: "Id of the timezone. Allowed values are timezones supported by Windows.\r\nWindows keeps details on supported timezones, including the id, in registry under\r\nKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones.\r\nYou can get those registry values via SQL Server by querying SELECT name AS timezone_id FROM sys.time_zone_info.\r\nList of Ids can also be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.\r\nAn example of valid timezone id is \"Pacific Standard Time\" or \"W. Europe Standard Time\"."
          type: string
          x-ms-mutability:
            - read
            - create
        instancePoolId:
          description: The Id of the instance pool this managed server belongs to.
          type: string
        maintenanceConfigurationId:
          description: Specifies maintenance configuration id to apply to this managed instance.
          type: string
        privateEndpointConnections:
          description: List of private endpoint connections on a managed instance.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstancePecProperty'
          readOnly: true
        minimalTlsVersion:
          description: 'Minimal TLS version. Allowed values: ''None'', ''1.0'', ''1.1'', ''1.2'''
          type: string
        currentBackupStorageRedundancy:
          description: The storage account type used to store backups for this instance. The options are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage), Geo (GeoRedundantStorage) and GeoZone(GeoZoneRedundantStorage)
          enum:
            - Geo
            - Local
            - Zone
            - GeoZone
          type: string
          readOnly: true
          x-ms-enum:
            name: BackupStorageRedundancy
            modelAsString: true
        requestedBackupStorageRedundancy:
          description: The storage account type to be used to store backups for this instance. The options are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage), Geo (GeoRedundantStorage) and GeoZone(GeoZoneRedundantStorage)
          enum:
            - Geo
            - Local
            - Zone
            - GeoZone
          type: string
          x-ms-enum:
            name: BackupStorageRedundancy
            modelAsString: true
          x-ms-mutability:
            - read
            - create
        zoneRedundant:
          description: Whether or not the multi-az is enabled.
          type: boolean
        primaryUserAssignedIdentityId:
          description: The resource id of a user assigned identity to be used by default.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - type: Microsoft.ManagedIdentity/userAssignedIdentities
        keyId:
          description: A CMK URI of the key to use for encryption.
          type: string
          x-ms-mutability:
            - read
            - create
        administrators:
          $ref: '#/components/schemas/ManagedInstanceExternalAdministrator'
          description: The Azure Active Directory administrator of the instance. This can only be used at instance create time. If used for instance update, it will be ignored or it will result in an error. For updates individual APIs will need to be used.
          x-ms-mutability:
            - read
            - create
        servicePrincipal:
          $ref: '#/components/schemas/ServicePrincipal'
          description: The managed instance's service principal.
        virtualClusterId:
          description: Virtual cluster resource id for the Managed Instance.
          type: string
          readOnly: true
        externalGovernanceStatus:
          description: Status of external governance.
          enum:
            - Enabled
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: ExternalGovernanceStatus
            modelAsString: true
        pricingModel:
          description: Weather or not Managed Instance is freemium.
          enum:
            - Regular
            - Freemium
          type: string
          x-ms-enum:
            name: FreemiumType
            modelAsString: true
        createTime:
          format: date-time
          description: Specifies the point in time (ISO8601 format) of the Managed Instance creation.
          type: string
          readOnly: true
        authenticationMetadata:
          description: The managed instance's authentication metadata lookup mode.
          enum:
            - AzureAD
            - Paired
            - Windows
          type: string
          x-ms-enum:
            name: AuthMetadataLookupModes
            modelAsString: true
        databaseFormat:
          description: Specifies the internal format of instance databases specific to the SQL engine version.
          enum:
            - AlwaysUpToDate
            - SQLServer2022
          type: string
          x-ms-enum:
            name: ManagedInstanceDatabaseFormat
            modelAsString: true
    ManagedInstanceUpdate:
      description: An update request for an Azure SQL Database managed instance.
      properties:
        sku:
          $ref: '#/components/schemas/Sku'
          description: Managed instance sku
        identity:
          $ref: '#/components/schemas/ResourceIdentity'
          description: Managed instance identity
        properties:
          $ref: '#/components/schemas/ManagedInstanceProperties'
          description: Resource properties.
          x-ms-client-flatten: true
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
      type: object
    OutboundEnvironmentEndpoint:
      description: An endpoint that the managed instance service requires outbound network access to.
      type: object
      properties:
        category:
          description: The type of service accessed by the managed instance service, e.g., Azure Storage, Azure Active Directory, etc.
          type: string
          readOnly: true
        endpoints:
          description: The endpoints that the managed instance service communicates with in order to function correctly.
          type: array
          items:
            $ref: '#/components/schemas/EndpointDependency'
          readOnly: true
          x-ms-identifiers: []
    OutboundEnvironmentEndpointCollection:
      description: A collection of endpoints that the managed instance service requires outbound network access to.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/OutboundEnvironmentEndpoint'
          readOnly: true
          x-ms-identifiers: []
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    QueryMetricInterval:
      description: Properties of a query metrics interval.
      type: object
      properties:
        intervalStartTime:
          description: The start time for the metric interval (ISO-8601 format).
          type: string
          readOnly: true
        intervalType:
          description: Interval type (length).
          enum:
            - PT1H
            - P1D
          type: string
          readOnly: true
          x-ms-enum:
            name: QueryTimeGrainType
            modelAsString: true
        executionCount:
          format: int64
          description: Execution count of a query in this interval.
          type: integer
          readOnly: true
        metrics:
          description: List of metric objects for this interval
          type: array
          items:
            $ref: '#/components/schemas/QueryMetricProperties'
    QueryMetricProperties:
      description: Properties of a topquery metric in one interval.
      type: object
      properties:
        name:
          description: The name information for the metric.
          type: string
          readOnly: true
        displayName:
          description: The UI appropriate name for the metric.
          type: string
          readOnly: true
        unit:
          description: The unit of the metric.
          enum:
            - percentage
            - KB
            - microseconds
            - count
          type: string
          readOnly: true
          x-ms-enum:
            name: QueryMetricUnitType
            modelAsString: true
        value:
          format: double
          description: The value of the metric.
          type: number
          readOnly: true
        min:
          format: double
          description: Metric value when min() aggregate function is used over the interval.
          type: number
          readOnly: true
        max:
          format: double
          description: Metric value when max() aggregate function is used over the interval.
          type: number
          readOnly: true
        avg:
          format: double
          description: Metric value when avg() aggregate function is used over the interval.
          type: number
          readOnly: true
        sum:
          format: double
          description: Metric value when sum() aggregate function is used over the interval.
          type: number
          readOnly: true
        stdev:
          format: double
          description: Metric value when stdev aggregate function is used over the interval.
          type: number
          readOnly: true
    QueryStatisticsProperties:
      description: Properties of a query execution statistics.
      type: object
      properties:
        databaseName:
          description: Database name of the database in which this query was executed.
          type: string
          readOnly: true
        queryId:
          description: Unique query id (unique within one database).
          type: string
          readOnly: true
        startTime:
          description: The start time for the metric (ISO-8601 format).
          type: string
          readOnly: true
        endTime:
          description: The end time for the metric (ISO-8601 format).
          type: string
          readOnly: true
        intervals:
          description: List of intervals with appropriate metric data
          type: array
          items:
            $ref: '#/components/schemas/QueryMetricInterval'
    RefreshExternalGovernanceStatusOperationResultMI:
      description: An RefreshExternalGovernanceStatus operation result resource.
      properties:
        properties:
          $ref: '#/components/schemas/RefreshExternalGovernanceStatusOperationResultPropertiesMI'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    RefreshExternalGovernanceStatusOperationResultPropertiesMI:
      description: Contains the operation result properties for refresh external governance status operation.
      type: object
      properties:
        requestId:
          format: uuid
          description: Request Id.
          type: string
          readOnly: true
        requestType:
          description: Request type.
          type: string
          readOnly: true
        queuedTime:
          description: Queued time.
          type: string
          readOnly: true
        managedInstanceName:
          description: Managed instance name.
          type: string
          readOnly: true
        status:
          description: Operation status.
          type: string
          readOnly: true
        errorMessage:
          description: Error message.
          type: string
          readOnly: true
    ServicePrincipal:
      description: The managed instance's service principal configuration for a resource.
      type: object
      properties:
        principalId:
          description: The Azure Active Directory application object id.
          type: string
          readOnly: true
        clientId:
          description: The Azure Active Directory application client id.
          type: string
          readOnly: true
        tenantId:
          description: The Azure Active Directory tenant id.
          type: string
          readOnly: true
        type:
          description: Service principal type.
          enum:
            - None
            - SystemAssigned
          type: string
          x-ms-enum:
            name: ServicePrincipalType
            modelAsString: true
    TopQueries:
      type: object
      properties:
        numberOfQueries:
          format: int32
          description: Requested number of top queries.
          type: integer
          readOnly: true
        aggregationFunction:
          description: Aggregation function used to calculate query metrics.
          type: string
          readOnly: true
        observationMetric:
          description: Metric used to rank queries.
          type: string
          readOnly: true
        intervalType:
          description: Interval type (length).
          enum:
            - PT1H
            - P1D
          type: string
          readOnly: true
          x-ms-enum:
            name: QueryTimeGrainType
            modelAsString: true
        startTime:
          description: The start time for the metric (ISO-8601 format).
          type: string
          readOnly: true
        endTime:
          description: The end time for the metric (ISO-8601 format).
          type: string
          readOnly: true
        queries:
          description: List of top resource consuming queries with appropriate metric data
          type: array
          items:
            $ref: '#/components/schemas/QueryStatisticsProperties'
          x-ms-identifiers: []
    TopQueriesListResult:
      description: A list of top resource consuming queries on managed instance
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/TopQueries'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    UserIdentity:
      description: Azure Active Directory identity configuration for a resource.
      type: object
      properties:
        principalId:
          format: uuid
          description: The Azure Active Directory principal id.
          type: string
          readOnly: true
        clientId:
          format: uuid
          description: The Azure Active Directory client id.
          type: string
          readOnly: true
    ManagedInstanceDtc:
      description: SQL Managed Instance DTC
      properties:
        properties:
          $ref: '#/components/schemas/ManagedInstanceDtcProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedInstanceDtcListResult:
      description: A list of managed instance's DTCs.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceDtc'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedInstanceDtcProperties:
      description: The properties of managed instance DTC.
      type: object
      properties:
        dtcEnabled:
          description: Active status of managed instance DTC.
          type: boolean
        securitySettings:
          $ref: '#/components/schemas/ManagedInstanceDtcSecuritySettings'
          description: Security settings of managed instance DTC.
        externalDnsSuffixSearchList:
          description: External dns suffix search list of managed instance DTC.
          type: array
          items:
            type: string
        dtcHostNameDnsSuffix:
          description: Host name dns suffix of managed instance DTC.
          type: string
          readOnly: true
        provisioningState:
          description: Provisioning state of managed instance DTC.
          enum:
            - Created
            - InProgress
            - Succeeded
            - Failed
            - Canceled
          type: string
          readOnly: true
          x-ms-enum:
            name: ProvisioningState
            modelAsString: true
    ManagedInstanceDtcSecuritySettings:
      description: The Security Settings of managed instance DTC.
      type: object
      properties:
        transactionManagerCommunicationSettings:
          $ref: '#/components/schemas/ManagedInstanceDtcTransactionManagerCommunicationSettings'
          description: Transaction Manager communication settings of managed instance DTC.
        xaTransactionsEnabled:
          description: Allow XA Transactions to managed instance DTC.
          type: boolean
        snaLu6point2TransactionsEnabled:
          description: Allow SNA LU 6.2 Transactions to managed instance DTC.
          type: boolean
        xaTransactionsDefaultTimeout:
          format: int32
          description: Default timeout for XA Transactions (in seconds).
          type: integer
        xaTransactionsMaximumTimeout:
          format: int32
          description: Maximum timeout for XA Transactions (in seconds).
          type: integer
    ManagedInstanceDtcTransactionManagerCommunicationSettings:
      description: The Transaction Manager Communication Settings of managed instance DTC.
      type: object
      properties:
        allowInboundEnabled:
          description: Allow Inbound traffic to managed instance DTC.
          type: boolean
        allowOutboundEnabled:
          description: Allow Outbound traffic of managed instance DTC.
          type: boolean
        authentication:
          description: Authentication type of managed instance DTC.
          type: string
    MaintenanceWindowsProperties:
      description: Maintenance windows resource properties.
      type: object
      properties:
        timeRanges:
          type: array
          items:
            $ref: '#/components/schemas/MaintenanceWindowTimeRange'
    MaintenanceWindowTimeRange:
      description: Maintenance window time range.
      type: object
      properties:
        dayOfWeek:
          description: Day of maintenance window.
          enum:
            - Sunday
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
          type: string
          x-ms-enum:
            name: DayOfWeek
            modelAsString: true
        startTime:
          description: Start time minutes offset from 12am.
          type: string
        duration:
          description: Duration of maintenance window in minutes.
          type: string
    MaintenanceWindows:
      description: Maintenance windows.
      properties:
        properties:
          $ref: '#/components/schemas/MaintenanceWindowsProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    Baseline:
      description: SQL Vulnerability Assessment baseline Details
      type: object
      properties:
        expectedResults:
          description: SQL Vulnerability Assessment baseline expected results
          type: array
          items:
            type: array
            items:
              type: string
          readOnly: true
        updatedTime:
          format: date-time
          description: SQL Vulnerability Assessment baseline update time (UTC)
          type: string
          readOnly: true
    BaselineAdjustedResult:
      description: SQL Vulnerability Assessment baseline adjusted results
      type: object
      properties:
        baseline:
          $ref: '#/components/schemas/Baseline'
          description: SQL Vulnerability Assessment baseline details
          readOnly: true
        status:
          description: SQL Vulnerability Assessment baseline status
          enum:
            - NonFinding
            - Finding
            - InternalError
          type: string
          readOnly: true
          x-ms-enum:
            name: RuleStatus
            modelAsString: true
        resultsNotInBaseline:
          description: SQL Vulnerability Assessment results that are not in baseline
          type: array
          items:
            type: array
            items:
              type: string
          readOnly: true
        resultsOnlyInBaseline:
          description: SQL Vulnerability Assessment results that are in baseline.
          type: array
          items:
            type: array
            items:
              type: string
          readOnly: true
    BenchmarkReference:
      description: SQL Vulnerability Assessment benchmark reference
      type: object
      properties:
        benchmark:
          description: SQL Vulnerability Assessment benchmark name
          type: string
          readOnly: true
        reference:
          description: SQL Vulnerability Assessment benchmark reference.
          type: string
          readOnly: true
    QueryCheck:
      description: SQL Vulnerability Assessment query check object.
      type: object
      properties:
        query:
          description: SQL Vulnerability Assessment rule query.
          type: string
          readOnly: true
        expectedResult:
          description: SQL Vulnerability Assessment query expected result.
          type: array
          items:
            type: array
            items:
              type: string
          readOnly: true
        columnNames:
          description: SQL Vulnerability Assessment column names of query expected result.
          type: array
          items:
            type: string
          readOnly: true
    Remediation:
      description: SQL Vulnerability Assessment remediation Details.
      type: object
      properties:
        description:
          description: SQL Vulnerability Assessment remediation description.
          type: string
          readOnly: true
        scripts:
          description: SQL Vulnerability Assessment remediation script.
          type: array
          items:
            type: string
          readOnly: true
        automated:
          description: SQL Vulnerability Assessment is remediation automated.
          type: boolean
          readOnly: true
        portalLink:
          description: SQL Vulnerability Assessment optional link to remediate in Azure Portal.
          type: string
          readOnly: true
    SQLVulnerabilityAssessmentScanListResult:
      description: A list of vulnerability assessment scan results.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SqlVulnerabilityAssessmentScanResults'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SqlVulnerabilityAssessmentScanResultProperties:
      description: SQL Vulnerability Assessment scan result properties for a single rule.
      type: object
      properties:
        ruleId:
          description: SQL Vulnerability Assessment rule Id.
          type: string
          readOnly: true
        status:
          description: SQL Vulnerability Assessment rule result status.
          enum:
            - NonFinding
            - Finding
            - InternalError
          type: string
          readOnly: true
          x-ms-enum:
            name: RuleStatus
            modelAsString: true
        errorMessage:
          description: SQL Vulnerability Assessment error message.
          type: string
          readOnly: true
        isTrimmed:
          description: SQL Vulnerability Assessment is the query results trimmed.
          type: boolean
          readOnly: true
        queryResults:
          description: SQL Vulnerability Assessment query results that was run.
          type: array
          items:
            type: array
            items:
              type: string
          readOnly: true
        remediation:
          $ref: '#/components/schemas/Remediation'
          description: SQL Vulnerability Assessment the remediation details.
          readOnly: true
        baselineAdjustedResult:
          $ref: '#/components/schemas/BaselineAdjustedResult'
          description: SQL Vulnerability Assessment rule result adjusted with baseline.
          readOnly: true
        ruleMetadata:
          $ref: '#/components/schemas/VaRule'
          description: SQL Vulnerability Assessment rule metadata.
          readOnly: true
    SqlVulnerabilityAssessmentScanResults:
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of AdvancedThreatProtectionResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/SqlVulnerabilityAssessmentScanResultProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    VaRule:
      description: SQL Vulnerability Assessment rule metadata details.
      type: object
      properties:
        ruleId:
          description: SQL Vulnerability Assessment rule Id.
          type: string
          readOnly: true
        severity:
          description: SQL Vulnerability Assessment rule severity.
          enum:
            - High
            - Medium
            - Low
            - Informational
            - Obsolete
          type: string
          readOnly: true
          x-ms-enum:
            name: RuleSeverity
            modelAsString: true
        category:
          description: SQL Vulnerability Assessment rule category.
          type: string
          readOnly: true
        ruleType:
          description: SQL Vulnerability Assessment rule type.
          enum:
            - Binary
            - BaselineExpected
            - PositiveList
            - NegativeList
          type: string
          readOnly: true
          x-ms-enum:
            name: RuleType
            modelAsString: true
        title:
          description: SQL Vulnerability Assessment rule title.
          type: string
          readOnly: true
        description:
          description: SQL Vulnerability Assessment rule description.
          type: string
          readOnly: true
        rationale:
          description: SQL Vulnerability Assessment rule rationale.
          type: string
          readOnly: true
        queryCheck:
          $ref: '#/components/schemas/QueryCheck'
          description: SQL Vulnerability Assessment rule query details.
          readOnly: true
        benchmarkReferences:
          description: SQL Vulnerability Assessment benchmark references.
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkReference'
          readOnly: true
    OutboundFirewallRuleProperties:
      description: The properties of an outbound firewall rule.
      type: object
      properties:
        provisioningState:
          description: The state of the outbound rule.
          type: string
          readOnly: true
    OutboundFirewallRule:
      description: An Azure SQL DB Server Outbound Firewall Rule.
      properties:
        properties:
          $ref: '#/components/schemas/OutboundFirewallRuleProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    OutboundFirewallRuleListResult:
      description: A list of outbound rules.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/OutboundFirewallRule'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SyncAgentProperties:
      description: Properties of an Azure SQL Database sync agent.
      type: object
      properties:
        name:
          description: Name of the sync agent.
          type: string
          readOnly: true
        syncDatabaseId:
          description: ARM resource id of the sync database in the sync agent.
          type: string
        lastAliveTime:
          format: date-time
          description: Last alive time of the sync agent.
          type: string
          readOnly: true
        state:
          description: State of the sync agent.
          enum:
            - Online
            - Offline
            - NeverConnected
          type: string
          readOnly: true
          x-ms-enum:
            name: SyncAgentState
            modelAsString: true
        isUpToDate:
          description: If the sync agent version is up to date.
          type: boolean
          readOnly: true
        expiryTime:
          format: date-time
          description: Expiration time of the sync agent version.
          type: string
          readOnly: true
        version:
          description: Version of the sync agent.
          type: string
          readOnly: true
    SyncAgent:
      description: An Azure SQL Database sync agent.
      properties:
        properties:
          $ref: '#/components/schemas/SyncAgentProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    SyncAgentListResult:
      description: A list of sync agents.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SyncAgent'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SyncAgentKeyProperties:
      description: Properties of an Azure SQL Database sync agent key.
      type: object
      properties:
        syncAgentKey:
          description: Key of sync agent.
          type: string
          readOnly: true
    SyncAgentLinkedDatabaseListResult:
      description: A list of sync agent linked databases.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SyncAgentLinkedDatabase'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SyncAgentLinkedDatabaseProperties:
      description: Properties of an Azure SQL Database sync agent linked database.
      type: object
      properties:
        databaseType:
          description: Type of the sync agent linked database.
          enum:
            - AzureSqlDatabase
            - SqlServerDatabase
          type: string
          readOnly: true
          x-ms-enum:
            name: SyncMemberDbType
            modelAsString: true
        databaseId:
          description: Id of the sync agent linked database.
          type: string
          readOnly: true
        description:
          description: Description of the sync agent linked database.
          type: string
          readOnly: true
        serverName:
          description: Server name of the sync agent linked database.
          type: string
          readOnly: true
        databaseName:
          description: Database name of the sync agent linked database.
          type: string
          readOnly: true
        userName:
          description: User name of the sync agent linked database.
          type: string
          readOnly: true
    SyncAgentLinkedDatabase:
      description: An Azure SQL Database sync agent linked database.
      properties:
        properties:
          $ref: '#/components/schemas/SyncAgentLinkedDatabaseProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    Resource:
      description: ARM resource.
      type: object
      properties:
        id:
          description: Resource ID.
          type: string
          readOnly: true
        name:
          description: Resource name.
          type: string
          readOnly: true
        type:
          description: Resource type.
          type: string
          readOnly: true
      x-ms-azure-resource: true
    AzureEntityResource:
      x-ms-client-name: AzureEntityResource
      title: Entity Resource
      description: The resource model definition for an Azure Resource Manager resource with an etag.
      properties:
        etag:
          type: string
          readOnly: true
          description: Resource Etag.
        id:
          description: Resource ID.
          type: string
          readOnly: true
        name:
          description: Resource name.
          type: string
          readOnly: true
        type:
          description: Resource type.
          type: string
          readOnly: true
      type: object
    TrackedResource:
      description: ARM tracked top level resource.
      required:
        - location
      properties:
        id:
          description: Resource ID.
          type: string
          readOnly: true
        name:
          description: Resource name.
          type: string
          readOnly: true
        type:
          description: Resource type.
          type: string
          readOnly: true
        location:
          description: Resource location.
          type: string
          x-ms-mutability:
            - read
            - create
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
      type: object
    ProxyResource:
      description: ARM proxy resource.
      properties:
        id:
          description: Resource ID.
          type: string
          readOnly: true
        name:
          description: Resource name.
          type: string
          readOnly: true
        type:
          description: Resource type.
          type: string
          readOnly: true
      type: object
    ResourceModelWithAllowedPropertySet:
      description: The resource model definition containing the full set of allowed properties for a resource. Except properties bag, there cannot be a top level property outside of this set.
      x-ms-azure-resource: true
      properties:
        managedBy:
          type: string
          x-ms-mutability:
            - read
            - create
            - update
          description: The fully qualified resource ID of the resource that manages this resource. Indicates if this resource is managed by another Azure resource. If this is present, complete mode deployment will not delete the resource if it is removed from the template since it is managed by another resource.
        kind:
          type: string
          x-ms-mutability:
            - read
            - create
          description: Metadata used by portal/tooling/etc to render different UX experiences for resources of the same type. E.g. ApiApps are a kind of Microsoft.Web/sites type.  If supported, the resource provider must validate and persist this value.
          pattern: ^[-\w\._,\(\)]+$
        etag:
          readOnly: true
          type: string
          description: 'The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. '
        identity:
          allOf:
            - $ref: '#/components/schemas/Identity'
        sku:
          allOf:
            - $ref: '#/components/schemas/Sku'
        plan:
          allOf:
            - $ref: '#/components/schemas/Plan'
        location:
          description: Resource location.
          type: string
          x-ms-mutability:
            - read
            - create
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
      type: object
    SkuTier:
      type: string
      enum:
        - Free
        - Basic
        - Standard
        - Premium
      x-ms-enum:
        name: SkuTier
        modelAsString: false
      description: This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.
    Sku:
      description: An ARM Resource SKU.
      required:
        - name
      type: object
      properties:
        name:
          description: The name of the SKU, typically, a letter + Number code, e.g. P3.
          type: string
        tier:
          description: The tier or edition of the particular SKU, e.g. Basic, Premium.
          type: string
        size:
          description: Size of the particular SKU
          type: string
        family:
          description: If the service has different generations of hardware, for the same SKU, then that can be captured here.
          type: string
        capacity:
          format: int32
          description: Capacity of the particular SKU.
          type: integer
    Identity:
      description: Identity for the resource.
      type: object
      properties:
        principalId:
          readOnly: true
          type: string
          format: uuid
          description: The principal ID of resource identity. The value must be an UUID.
        tenantId:
          readOnly: true
          type: string
          format: uuid
          description: The tenant ID of resource. The value must be an UUID.
        type:
          type: string
          description: The identity type.
          enum:
            - SystemAssigned
          x-ms-enum:
            name: ResourceIdentityType
            modelAsString: false
    Plan:
      type: object
      properties:
        name:
          type: string
          description: A user defined name of the 3rd Party Artifact that is being procured.
        publisher:
          type: string
          description: The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
        product:
          type: string
          description: 'The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. '
        promotionCode:
          type: string
          description: A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        version:
          type: string
          description: The version of the desired product/artifact.
      description: Plan for the resource.
      required:
        - name
        - publisher
        - product
    ErrorDetail:
      description: The error detail.
      type: object
      properties:
        code:
          readOnly: true
          type: string
          description: The error code.
        message:
          readOnly: true
          type: string
          description: The error message.
        target:
          readOnly: true
          type: string
          description: The error target.
        details:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
          x-ms-identifiers:
            - message
            - target
          description: The error details.
        additionalInfo:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ErrorAdditionalInfo'
          x-ms-identifiers: []
          description: The error additional info.
    ErrorResponse:
      title: Error response
      description: Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).
      type: object
      properties:
        error:
          description: The error object.
          $ref: '#/components/schemas/ErrorDetail'
    ErrorAdditionalInfo:
      type: object
      properties:
        type:
          readOnly: true
          type: string
          description: The additional info type.
        info:
          readOnly: true
          type: object
          description: The additional info.
      description: The resource management error additional info.
    Operation:
      description: SQL REST API operation definition.
      properties:
        name:
          description: The name of the operation being performed on this particular object.
          type: string
          readOnly: true
        display:
          $ref: '#/components/schemas/OperationDisplay'
          description: The localized display information for this particular operation / action.
          readOnly: true
        origin:
          description: The intended executor of the operation.
          enum:
            - user
            - system
          type: string
          readOnly: true
          x-ms-enum:
            name: OperationOrigin
            modelAsString: true
        properties:
          description: Additional descriptions for the operation.
          type: object
          additionalProperties:
            type: object
          readOnly: true
          x-ms-client-flatten: false
      type: object
    OperationListResult:
      description: Result of the request to list SQL operations.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    OperationStatusResult:
      description: The current status of an async operation.
      type: object
      required:
        - status
      properties:
        id:
          description: Fully qualified ID for the async operation.
          type: string
          format: arm-id
        resourceId:
          description: Fully qualified ID of the resource against which the original async operation was started.
          type: string
          format: arm-id
          readOnly: true
        name:
          description: Name of the async operation.
          type: string
        status:
          description: Operation status.
          type: string
        percentComplete:
          description: Percent of the operation that is complete.
          type: number
          minimum: 0
          maximum: 100
        startTime:
          description: The start time of the operation.
          type: string
          format: date-time
        endTime:
          description: The end time of the operation.
          type: string
          format: date-time
        operations:
          description: The operations list.
          type: array
          items:
            $ref: '#/components/schemas/OperationStatusResult'
        error:
          description: If present, details of the operation error.
          $ref: '#/components/schemas/ErrorDetail'
    locationData:
      description: Metadata pertaining to the geographic location of the resource.
      type: object
      properties:
        name:
          type: string
          maxLength: 256
          description: A canonical name for the geographic or physical location.
        city:
          type: string
          description: The city or locality where the resource is located.
        district:
          type: string
          description: The district, state, or province where the resource is located.
        countryOrRegion:
          type: string
          description: The country or region where the resource is located
      required:
        - name
    systemData:
      description: Metadata pertaining to creation and last modification of the resource.
      type: object
      readOnly: true
      properties:
        createdBy:
          type: string
          description: The identity that created the resource.
        createdByType:
          type: string
          description: The type of identity that created the resource.
          enum:
            - User
            - Application
            - ManagedIdentity
            - Key
          x-ms-enum:
            name: createdByType
            modelAsString: true
        createdAt:
          type: string
          format: date-time
          description: The timestamp of resource creation (UTC).
        lastModifiedBy:
          type: string
          description: The identity that last modified the resource.
        lastModifiedByType:
          type: string
          description: The type of identity that last modified the resource.
          enum:
            - User
            - Application
            - ManagedIdentity
            - Key
          x-ms-enum:
            name: createdByType
            modelAsString: true
        lastModifiedAt:
          type: string
          format: date-time
          description: The timestamp of resource last modification (UTC)
    encryptionProperties:
      description: Configuration of key for data encryption
      type: object
      properties:
        status:
          description: Indicates whether or not the encryption is enabled for container registry.
          enum:
            - enabled
            - disabled
          type: string
          x-ms-enum:
            name: EncryptionStatus
            modelAsString: true
        keyVaultProperties:
          $ref: '#/components/schemas/KeyVaultProperties'
          description: Key vault properties.
    KeyVaultProperties:
      type: object
      properties:
        keyIdentifier:
          description: Key vault uri to access the encryption key.
          type: string
        identity:
          description: The client ID of the identity which will be used to access key vault.
          type: string
    CheckNameAvailabilityRequest:
      description: A request to check whether the specified name for a resource is available.
      required:
        - name
        - type
      type: object
      properties:
        name:
          type: string
        type:
          enum:
            - Microsoft.Sql/servers
          type: string
          x-ms-enum:
            name: CheckNameAvailabilityResourceType
            modelAsString: false
    CheckNameAvailabilityResponse:
      description: The result of a name availability check.
      type: object
      properties:
        name:
          description: The name whose availability was checked.
          type: string
          readOnly: true
        available:
          description: True if the name is available, otherwise false.
          type: boolean
          readOnly: true
        reason:
          description: The reason code explaining why the name is unavailable. Will be undefined if the name is available.
          enum:
            - Invalid
            - AlreadyExists
          type: string
          readOnly: true
          x-ms-enum:
            name: CheckNameAvailabilityReason
            modelAsString: false
        message:
          description: A message explaining why the name is unavailable. Will be undefined if the name is available.
          type: string
          readOnly: true
    ChangeLongTermRetentionBackupAccessTierParameters:
      description: Contains the information necessary to change long term retention backup access tier and related operation mode.
      required:
        - backupStorageAccessTier
        - operationMode
      type: object
      properties:
        backupStorageAccessTier:
          description: The long term retention backup storage access tier
          type: string
        operationMode:
          description: The operation mode when updating ltr backup storage access tier
          type: string
    CopyLongTermRetentionBackupParameters:
      description: Contains the information necessary to perform long term retention backup copy operation.
      properties:
        properties:
          $ref: '#/components/schemas/CopyLongTermRetentionBackupParametersProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    CopyLongTermRetentionBackupParametersProperties:
      description: Contains the properties to perform long term retention backup copy operation.
      type: object
      properties:
        targetSubscriptionId:
          description: The subscription that owns the target server
          type: string
          x-ms-mutability:
            - create
        targetResourceGroup:
          description: The resource group that owns the target server
          type: string
          x-ms-mutability:
            - create
        targetServerResourceId:
          description: The resource Id of the target server that owns the database
          type: string
          x-ms-mutability:
            - create
        targetServerFullyQualifiedDomainName:
          description: The fully qualified domain name of the target server
          type: string
          x-ms-mutability:
            - create
        targetDatabaseName:
          description: The name of the database owns the copied backup.
          type: string
          x-ms-mutability:
            - create
        targetBackupStorageRedundancy:
          description: The storage redundancy type of the copied backup
          enum:
            - Geo
            - Local
            - Zone
            - GeoZone
          type: string
          x-ms-enum:
            name: BackupStorageRedundancy
            modelAsString: true
          x-ms-mutability:
            - create
    LongTermRetentionBackup:
      description: A long term retention backup.
      properties:
        properties:
          $ref: '#/components/schemas/LongTermRetentionBackupProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    LongTermRetentionBackupListResult:
      description: A list of long term retention backups.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/LongTermRetentionBackup'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    LongTermRetentionBackupOperationResult:
      description: A LongTermRetentionBackup operation result resource.
      properties:
        properties:
          $ref: '#/components/schemas/LongTermRetentionOperationResultProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    LongTermRetentionBackupProperties:
      description: Properties of a long term retention backup
      type: object
      properties:
        serverName:
          description: The server name that the backup database belong to.
          type: string
          readOnly: true
        serverCreateTime:
          format: date-time
          description: The create time of the server.
          type: string
          readOnly: true
        databaseName:
          description: The name of the database the backup belong to
          type: string
          readOnly: true
        databaseDeletionTime:
          format: date-time
          description: The delete time of the database
          type: string
          readOnly: true
        backupTime:
          format: date-time
          description: The time the backup was taken
          type: string
          readOnly: true
        backupExpirationTime:
          format: date-time
          description: The time the long term retention backup will expire.
          type: string
          readOnly: true
        backupStorageRedundancy:
          description: The storage redundancy type of the backup
          enum:
            - Geo
            - Local
            - Zone
            - GeoZone
          type: string
          readOnly: true
          x-ms-enum:
            name: BackupStorageRedundancy
            modelAsString: true
        requestedBackupStorageRedundancy:
          description: The storage redundancy type of the backup
          enum:
            - Geo
            - Local
            - Zone
            - GeoZone
          type: string
          x-ms-enum:
            name: BackupStorageRedundancy
            modelAsString: true
          x-ms-mutability:
            - create
            - update
        isBackupImmutable:
          description: The setting whether the LTR backup is immutable
          type: boolean
        backupStorageAccessTier:
          description: The BackupStorageAccessTier for the LTR backup
          enum:
            - Hot
            - Archive
          type: string
          readOnly: true
          x-ms-enum:
            name: BackupStorageAccessTier
            modelAsString: true
    LongTermRetentionOperationResultProperties:
      description: Contains the operation result properties for long term retention backup operation.
      type: object
      properties:
        requestId:
          format: uuid
          description: Request Id.
          type: string
          readOnly: true
        operationType:
          description: Operation type.
          type: string
          readOnly: true
        fromBackupResourceId:
          description: Source backup resource id
          type: string
          readOnly: true
        toBackupResourceId:
          description: Target backup resource id
          type: string
          readOnly: true
        targetBackupStorageRedundancy:
          description: The storage redundancy type of the copied backup
          enum:
            - Geo
            - Local
            - Zone
            - GeoZone
          type: string
          readOnly: true
          x-ms-enum:
            name: BackupStorageRedundancy
            modelAsString: true
        status:
          description: Operation status
          type: string
          readOnly: true
        message:
          description: Progress message
          type: string
          readOnly: true
    UpdateLongTermRetentionBackupParameters:
      description: Contains the information necessary to perform long term retention backup update operation.
      properties:
        properties:
          $ref: '#/components/schemas/UpdateLongTermRetentionBackupParametersProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    UpdateLongTermRetentionBackupParametersProperties:
      description: Contains the properties to perform long term retention backup copy operation.
      type: object
      properties:
        requestedBackupStorageRedundancy:
          description: The storage redundancy type of the copied backup
          enum:
            - Geo
            - Local
            - Zone
            - GeoZone
          type: string
          x-ms-enum:
            name: BackupStorageRedundancy
            modelAsString: true
          x-ms-mutability:
            - create
    DatabaseSqlVulnerabilityAssessmentRuleBaseline:
      description: A database sql vulnerability assessment rule baseline.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of DatabaseSqlVulnerabilityAssessmentRuleBaselineResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaselineProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseSqlVulnerabilityAssessmentRuleBaselineInput:
      description: A database sql vulnerability assessment rule baseline input.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of DatabaseSqlVulnerabilityAssessmentRuleBaselineInputResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaselineInputProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseSqlVulnerabilityAssessmentRuleBaselineInputProperties:
      description: Properties of a database Sql Vulnerability Assessment rule baseline.
      required:
        - latestScan
        - results
      type: object
      properties:
        latestScan:
          description: The latest scan flag
          type: boolean
        results:
          description: The rule baseline result
          type: array
          items:
            type: array
            items:
              type: string
    DatabaseSqlVulnerabilityAssessmentRuleBaselineListResult:
      description: A list of SQL Vulnerability Assessments rule baseline.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaseline'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    DatabaseSqlVulnerabilityAssessmentRuleBaselineProperties:
      description: Properties of a database Sql Vulnerability Assessment rule baseline.
      required:
        - results
      type: object
      properties:
        results:
          description: The rule baseline result
          type: array
          items:
            type: array
            items:
              type: string
    ServerUsage:
      properties:
        name:
          readOnly: true
          type: string
          description: Name of the server usage metric.
        resourceName:
          readOnly: true
          type: string
          description: The name of the resource.
        displayName:
          readOnly: true
          type: string
          description: The metric display name.
        currentValue:
          readOnly: true
          type: number
          format: double
          description: The current value of the metric.
        limit:
          readOnly: true
          type: number
          format: double
          description: The current limit of the metric.
        unit:
          readOnly: true
          type: string
          description: The units of the metric.
        nextResetTime:
          readOnly: true
          type: string
          format: date-time
          description: The next reset time for the metric (ISO8601 format).
      description: Represents server metrics.
      type: object
    ServerUsageListResult:
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/ServerUsage'
          description: The list of server metrics for the server.
      required:
        - value
      description: Represents the response to a list server metrics request.
      type: object
    WorkloadClassifierProperties:
      description: Workload classifier definition. For more information look at sys.workload_management_workload_classifiers (DMV).
      required:
        - memberName
      type: object
      properties:
        memberName:
          description: The workload classifier member name.
          type: string
        label:
          description: The workload classifier label.
          type: string
        context:
          description: The workload classifier context.
          type: string
        startTime:
          description: The workload classifier start time for classification.
          type: string
        endTime:
          description: The workload classifier end time for classification.
          type: string
        importance:
          description: The workload classifier importance.
          type: string
    WorkloadClassifier:
      description: Workload classifier operations for a data warehouse
      properties:
        properties:
          $ref: '#/components/schemas/WorkloadClassifierProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    WorkloadClassifierListResult:
      description: A list of workload classifiers for a workload group.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/WorkloadClassifier'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ServerCommunicationLinkProperties:
      properties:
        state:
          readOnly: true
          type: string
          description: The state.
        partnerServer:
          type: string
          x-ms-mutability:
            - create
            - read
          description: The name of the partner server.
      required:
        - partnerServer
      description: The properties of a server communication link.
      type: object
    ServerCommunicationLink:
      description: Server communication link.
      properties:
        properties:
          $ref: '#/components/schemas/ServerCommunicationLinkProperties'
          description: The properties of resource.
          x-ms-client-flatten: true
        location:
          type: string
          readOnly: true
          description: Communication link location.
        kind:
          type: string
          readOnly: true
          description: Communication link kind.  This property is used for Azure Portal metadata.
      type: object
    ServerCommunicationLinkListResult:
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/ServerCommunicationLink'
          description: The list of server communication links.
      description: A list of server communication links.
      type: object
    DatabaseSecurityAlertPolicy:
      description: A database security alert policy.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of SecurityAlertPolicyResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/SecurityAlertsPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseSecurityAlertListResult:
      description: A list of the database's security alert policies.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DatabaseSecurityAlertPolicy'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    DeletedServerListResult:
      description: A list of deleted servers.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DeletedServer'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    DeletedServerProperties:
      description: The properties of a deleted server.
      type: object
      properties:
        version:
          description: The version of the deleted server.
          type: string
          readOnly: true
        deletionTime:
          format: date-time
          description: The deletion time of the deleted server.
          type: string
          readOnly: true
        originalId:
          description: The original ID of the server before deletion.
          type: string
          readOnly: true
        fullyQualifiedDomainName:
          description: The fully qualified domain name of the server.
          type: string
          readOnly: true
    DeletedServer:
      description: A deleted server.
      properties:
        properties:
          $ref: '#/components/schemas/DeletedServerProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    SyncMemberProperties:
      description: Properties of a sync member.
      type: object
      properties:
        databaseType:
          description: Database type of the sync member.
          enum:
            - AzureSqlDatabase
            - SqlServerDatabase
          type: string
          x-ms-enum:
            name: SyncMemberDbType
            modelAsString: true
        syncAgentId:
          description: ARM resource id of the sync agent in the sync member.
          type: string
        sqlServerDatabaseId:
          format: uuid
          description: SQL Server database id of the sync member.
          type: string
        syncMemberAzureDatabaseResourceId:
          description: ARM resource id of the sync member logical database, for sync members in Azure.
          type: string
        usePrivateLinkConnection:
          description: Whether to use private link connection.
          type: boolean
        privateEndpointName:
          description: Private endpoint name of the sync member if use private link connection is enabled, for sync members in Azure.
          type: string
          readOnly: true
        serverName:
          description: Server name of the member database in the sync member
          type: string
        databaseName:
          description: Database name of the member database in the sync member.
          type: string
        userName:
          description: User name of the member database in the sync member.
          type: string
        password:
          description: Password of the member database in the sync member.
          type: string
          x-ms-mutability:
            - create
            - update
        syncDirection:
          description: Sync direction of the sync member.
          enum:
            - Bidirectional
            - OneWayMemberToHub
            - OneWayHubToMember
          type: string
          x-ms-enum:
            name: SyncDirection
            modelAsString: true
        syncState:
          description: Sync state of the sync member.
          enum:
            - SyncInProgress
            - SyncSucceeded
            - SyncFailed
            - DisabledTombstoneCleanup
            - DisabledBackupRestore
            - SyncSucceededWithWarnings
            - SyncCancelling
            - SyncCancelled
            - UnProvisioned
            - Provisioning
            - Provisioned
            - ProvisionFailed
            - DeProvisioning
            - DeProvisioned
            - DeProvisionFailed
            - Reprovisioning
            - ReprovisionFailed
            - UnReprovisioned
          type: string
          readOnly: true
          x-ms-enum:
            name: SyncMemberState
            modelAsString: true
    SyncMember:
      description: An Azure SQL Database sync member.
      properties:
        properties:
          $ref: '#/components/schemas/SyncMemberProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    SyncMemberListResult:
      description: A list of Azure SQL Database sync members.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SyncMember'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SyncFullSchemaPropertiesListResult:
      description: A list of sync schema properties.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SyncFullSchemaProperties'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SyncFullSchemaProperties:
      description: Properties of the database full schema.
      type: object
      properties:
        tables:
          description: List of tables in the database full schema.
          type: array
          items:
            $ref: '#/components/schemas/SyncFullSchemaTable'
          readOnly: true
        lastUpdateTime:
          format: date-time
          description: Last update time of the database schema.
          type: string
          readOnly: true
    SyncFullSchemaTable:
      description: Properties of the table in the database full schema.
      type: object
      properties:
        columns:
          description: List of columns in the table of database full schema.
          type: array
          items:
            $ref: '#/components/schemas/SyncFullSchemaTableColumn'
          readOnly: true
        errorId:
          description: Error id of the table.
          type: string
          readOnly: true
        hasError:
          description: If there is error in the table.
          type: boolean
          readOnly: true
        name:
          description: Name of the table.
          type: string
          readOnly: true
        quotedName:
          description: Quoted name of the table.
          type: string
          readOnly: true
    SyncFullSchemaTableColumn:
      description: Properties of the column in the table of database full schema.
      type: object
      properties:
        dataSize:
          description: Data size of the column.
          type: string
          readOnly: true
        dataType:
          description: Data type of the column.
          type: string
          readOnly: true
        errorId:
          description: Error id of the column.
          type: string
          readOnly: true
        hasError:
          description: If there is error in the table.
          type: boolean
          readOnly: true
        isPrimaryKey:
          description: If it is the primary key of the table.
          type: boolean
          readOnly: true
        name:
          description: Name of the column.
          type: string
          readOnly: true
        quotedName:
          description: Quoted name of the column.
          type: string
          readOnly: true
    ServerOperationListResult:
      description: The response to a list server operations request
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerOperation'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ServerOperationProperties:
      description: The properties of a server operation.
      type: object
      properties:
        operation:
          description: The name of operation.
          type: string
          readOnly: true
        operationFriendlyName:
          description: The friendly name of operation.
          type: string
          readOnly: true
        percentComplete:
          format: int32
          description: The percentage of the operation completed.
          type: integer
          readOnly: true
        serverName:
          description: The name of the server.
          type: string
          readOnly: true
        startTime:
          format: date-time
          description: The operation start time.
          type: string
          readOnly: true
        state:
          description: The operation state.
          enum:
            - Pending
            - InProgress
            - Succeeded
            - Failed
            - CancelInProgress
            - Cancelled
          type: string
          readOnly: true
          x-ms-enum:
            name: ManagementOperationState
            modelAsString: true
        errorCode:
          format: int32
          description: The operation error code.
          type: integer
          readOnly: true
        errorDescription:
          description: The operation error description.
          type: string
          readOnly: true
        errorSeverity:
          format: int32
          description: The operation error severity.
          type: integer
          readOnly: true
        isUserError:
          description: Whether or not the error is a user error.
          type: boolean
          readOnly: true
        estimatedCompletionTime:
          format: date-time
          description: The estimated completion time of the operation.
          type: string
          readOnly: true
        description:
          description: The operation description.
          type: string
          readOnly: true
        isCancellable:
          description: Whether the operation can be cancelled.
          type: boolean
          readOnly: true
    ServerOperation:
      description: A server operation.
      properties:
        properties:
          $ref: '#/components/schemas/ServerOperationProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    JobCredentialListResult:
      description: A list of job credentials.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/JobCredential'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    JobCredentialProperties:
      description: Properties of a job credential.
      required:
        - username
        - password
      type: object
      properties:
        username:
          description: The credential user name.
          type: string
        password:
          description: The credential password.
          type: string
          x-ms-mutability:
            - create
            - update
    JobCredential:
      description: A stored credential that can be used by a job to connect to target databases.
      properties:
        properties:
          $ref: '#/components/schemas/JobCredentialProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    PrivateEndpointConnection:
      description: A private endpoint connection
      properties:
        properties:
          $ref: '#/components/schemas/PrivateEndpointConnectionProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    PrivateEndpointConnectionListResult:
      description: A list of private endpoint connections.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/PrivateEndpointConnection'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    PrivateEndpointConnectionProperties:
      description: Properties of a private endpoint connection.
      type: object
      properties:
        privateEndpoint:
          $ref: '#/components/schemas/PrivateEndpointProperty'
          description: Private endpoint which the connection belongs to.
        groupIds:
          description: Group IDs.
          type: array
          items:
            type: string
          readOnly: true
        privateLinkServiceConnectionState:
          $ref: '#/components/schemas/PrivateLinkServiceConnectionStateProperty'
          description: Connection state of the private endpoint connection.
        provisioningState:
          description: State of the private endpoint connection.
          enum:
            - Approving
            - Ready
            - Dropping
            - Failed
            - Rejecting
          type: string
          readOnly: true
          x-ms-enum:
            name: PrivateEndpointProvisioningState
            modelAsString: true
    PrivateEndpointProperty:
      type: object
      properties:
        id:
          description: Resource id of the private endpoint.
          type: string
      x-ms-azure-resource: true
    PrivateLinkServiceConnectionStateProperty:
      required:
        - status
        - description
      type: object
      properties:
        status:
          description: The private link service connection status.
          enum:
            - Approved
            - Pending
            - Rejected
            - Disconnected
          type: string
          x-ms-enum:
            name: PrivateLinkServiceConnectionStateStatus
            modelAsString: true
        description:
          description: The private link service connection description.
          type: string
        actionsRequired:
          description: The actions required for private link service connection.
          enum:
            - None
          type: string
          readOnly: true
          x-ms-enum:
            name: PrivateLinkServiceConnectionStateActionsRequire
            modelAsString: true
    DatabaseUsageListResult:
      description: A list of database usage metrics.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DatabaseUsage'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    DatabaseUsageProperties:
      description: Properties of a database usage.
      type: object
      properties:
        displayName:
          description: User-readable name of the metric.
          type: string
          readOnly: true
        currentValue:
          format: double
          description: Current value of the metric.
          type: number
          readOnly: true
        limit:
          format: double
          description: Boundary value of the metric.
          type: number
          readOnly: true
        unit:
          description: Unit of the metric.
          type: string
          readOnly: true
    DatabaseUsage:
      description: Usage metric of a database.
      properties:
        properties:
          $ref: '#/components/schemas/DatabaseUsageProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServerVulnerabilityAssessmentProperties:
      description: Properties of a server Vulnerability Assessment.
      required:
        - storageContainerPath
      type: object
      properties:
        storageContainerPath:
          description: A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
          type: string
          x-ms-mutability:
            - create
            - update
        storageContainerSasKey:
          description: A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required. Applies only if the storage account is not behind a Vnet or a firewall
          type: string
          x-ms-mutability:
            - create
            - update
        storageAccountAccessKey:
          description: Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required. Applies only if the storage account is not behind a Vnet or a firewall
          type: string
          x-ms-mutability:
            - create
            - update
        recurringScans:
          $ref: '#/components/schemas/VulnerabilityAssessmentRecurringScansProperties'
          description: The recurring scans settings
    ServerVulnerabilityAssessment:
      description: A server vulnerability assessment.
      properties:
        properties:
          $ref: '#/components/schemas/ServerVulnerabilityAssessmentProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServerVulnerabilityAssessmentListResult:
      description: A list of the server's vulnerability assessments.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerVulnerabilityAssessment'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    RestorableDroppedManagedDatabaseListResult:
      description: A list of restorable dropped managed databases.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/RestorableDroppedManagedDatabase'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    RestorableDroppedManagedDatabaseProperties:
      description: The restorable dropped managed database's properties.
      type: object
      properties:
        databaseName:
          description: The name of the database.
          type: string
          readOnly: true
        creationDate:
          format: date-time
          description: The creation date of the database (ISO8601 format).
          type: string
          readOnly: true
        deletionDate:
          format: date-time
          description: The deletion date of the database (ISO8601 format).
          type: string
          readOnly: true
        earliestRestoreDate:
          format: date-time
          description: The earliest restore date of the database (ISO8601 format).
          type: string
          readOnly: true
    RestorableDroppedManagedDatabase:
      description: A restorable dropped managed database resource.
      required:
        - location
      properties:
        location:
          description: Resource location.
          type: string
          x-ms-mutability:
            - read
            - create
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
        properties:
          $ref: '#/components/schemas/RestorableDroppedManagedDatabaseProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    SynapseLinkWorkspace:
      description: Synapse link workspace resource
      properties:
        properties:
          $ref: '#/components/schemas/SynapseLinkWorkspaceProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    SynapseLinkWorkspaceInfoProperties:
      description: Properties of a Synapse link workspaces
      type: object
      properties:
        workspaceId:
          description: Synapse link workspace id.
          type: string
        linkConnectionName:
          description: Link connection name.
          type: string
    SynapseLinkWorkspaceListResult:
      description: A list of synapselink workspaces
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SynapseLinkWorkspace'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SynapseLinkWorkspaceProperties:
      description: Properties of a Synapse link workspaces
      type: object
      properties:
        workspaces:
          description: List of all synapselink workspaces
          type: array
          items:
            $ref: '#/components/schemas/SynapseLinkWorkspaceInfoProperties'
          x-ms-identifiers: []
    SecurityEventsFilterParameters:
      description: The properties that are supported in the $filter operation.
      type: object
      properties:
        eventTime:
          format: date-time
          description: Filter on the event time.
          type: string
        showServerRecords:
          description: Whether to show server records or not.
          type: boolean
    SecurityEventCollection:
      description: A list of security events.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SecurityEvent'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SecurityEventProperties:
      description: The properties of a security event.
      type: object
      properties:
        eventTime:
          format: date-time
          description: The time when the security event occurred.
          type: string
          readOnly: true
        securityEventType:
          description: The type of the security event.
          enum:
            - Undefined
            - SqlInjectionVulnerability
            - SqlInjectionExploit
          type: string
          readOnly: true
          x-ms-enum:
            name: SecurityEventType
            modelAsString: false
        subscription:
          description: The subscription name
          type: string
          readOnly: true
        server:
          description: The server name
          type: string
          readOnly: true
        database:
          description: The database name
          type: string
          readOnly: true
        clientIp:
          description: The IP address of the client who executed the statement.
          type: string
          readOnly: true
        applicationName:
          description: The application used to execute the statement.
          type: string
          readOnly: true
        principalName:
          description: The principal user who executed the statement
          type: string
          readOnly: true
        securityEventSqlInjectionAdditionalProperties:
          $ref: '#/components/schemas/SecurityEventSqlInjectionAdditionalProperties'
          description: The sql injection additional properties, populated only if the type of the security event is sql injection.
          readOnly: true
    SecurityEventSqlInjectionAdditionalProperties:
      description: The properties of a security event sql injection additional properties.
      type: object
      properties:
        threatId:
          description: The threat ID.
          type: string
          readOnly: true
        statement:
          description: The statement
          type: string
          readOnly: true
        statementHighlightOffset:
          format: int32
          description: The statement highlight offset
          type: integer
          readOnly: true
        statementHighlightLength:
          format: int32
          description: The statement highlight length
          type: integer
          readOnly: true
        errorCode:
          format: int32
          description: The sql error code
          type: integer
          readOnly: true
        errorSeverity:
          format: int32
          description: The sql error severity
          type: integer
          readOnly: true
        errorMessage:
          description: The sql error message
          type: string
          readOnly: true
    SecurityEvent:
      description: A security event.
      properties:
        properties:
          $ref: '#/components/schemas/SecurityEventProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseExtensionsProperties:
      description: Contains the database information after successful export.
      required:
        - operationMode
        - storageKeyType
        - storageKey
        - storageUri
      type: object
      properties:
        operationMode:
          description: Operation Mode.
          enum:
            - PolybaseImport
          type: string
          x-ms-enum:
            name: OperationMode
            modelAsString: true
          x-ms-mutability:
            - create
        storageKeyType:
          description: Storage key type.
          enum:
            - SharedAccessKey
            - StorageAccessKey
          type: string
          x-ms-enum:
            name: StorageKeyType
            modelAsString: true
          x-ms-mutability:
            - create
        storageKey:
          description: Storage key.
          type: string
          x-ms-mutability:
            - create
        storageUri:
          description: Storage Uri.
          type: string
          x-ms-mutability:
            - create
    DatabaseExtensions:
      description: An export managed database operation result resource.
      properties:
        properties:
          $ref: '#/components/schemas/DatabaseExtensionsProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ImportExportExtensionsOperationResultProperties:
      description: Contains the operation result properties for import/export operation.
      type: object
      properties:
        requestId:
          format: uuid
          description: Request Id.
          type: string
          readOnly: true
        requestType:
          description: Request type.
          type: string
          readOnly: true
        lastModifiedTime:
          description: Last modified time.
          type: string
          readOnly: true
        serverName:
          description: Server name.
          type: string
          readOnly: true
        databaseName:
          description: Database name.
          type: string
          readOnly: true
        status:
          description: Operation status.
          type: string
          readOnly: true
        errorMessage:
          description: Error message.
          type: string
          readOnly: true
    ImportExportExtensionsOperationResult:
      description: An Extension operation result resource.
      properties:
        properties:
          $ref: '#/components/schemas/ImportExportExtensionsOperationResultProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ImportExportExtensionsOperationListResult:
      description: Import export operation extensions list.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ImportExportExtensionsOperationResult'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ServerFirewallRuleProperties:
      description: The properties of a server firewall rule.
      type: object
      properties:
        startIpAddress:
          description: The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' for all Azure-internal IP addresses.
          type: string
        endIpAddress:
          description: The end IP address of the firewall rule. Must be IPv4 format. Must be greater than or equal to startIpAddress. Use value '0.0.0.0' for all Azure-internal IP addresses.
          type: string
    FirewallRule:
      description: A server firewall rule.
      properties:
        properties:
          $ref: '#/components/schemas/ServerFirewallRuleProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    FirewallRuleListResult:
      description: The response to a list firewall rules request
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/FirewallRule'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    FirewallRuleList:
      description: A list of server firewall rules.
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/FirewallRule'
    OperationDisplay:
      description: Display metadata associated with the operation.
      type: object
      properties:
        provider:
          description: The localized friendly form of the resource provider name.
          type: string
          readOnly: true
        resource:
          description: The localized friendly form of the resource type related to this action/operation.
          type: string
          readOnly: true
        operation:
          description: The localized friendly name for the operation.
          type: string
          readOnly: true
        description:
          description: The localized friendly description for the operation.
          type: string
          readOnly: true
    AzureADOnlyAuthProperties:
      description: Properties of a active directory only authentication.
      required:
        - azureADOnlyAuthentication
      type: object
      properties:
        azureADOnlyAuthentication:
          description: Azure Active Directory only Authentication enabled.
          type: boolean
    ServerAzureADOnlyAuthentication:
      description: Azure Active Directory only authentication.
      properties:
        properties:
          $ref: '#/components/schemas/AzureADOnlyAuthProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    AzureADOnlyAuthListResult:
      description: A list of active directory only authentications.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerAzureADOnlyAuthentication'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SqlVulnerabilityAssessment:
      description: A SQL Vulnerability Assessment.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of SqlVulnerabilityAssessmentResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/SqlVulnerabilityAssessmentPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    SqlVulnerabilityAssessmentListResult:
      description: A list of SQL Vulnerability Assessments.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SqlVulnerabilityAssessment'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SqlVulnerabilityAssessmentPolicyProperties:
      type: object
      properties:
        state:
          description: Specifies the state of the SQL Vulnerability Assessment, whether it is enabled or disabled or a state has not been applied yet on the specific database or server.
          enum:
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: SqlVulnerabilityAssessmentState
            modelAsString: false
    ServerTrustGroupProperties:
      description: Properties of a server trust group.
      required:
        - groupMembers
        - trustScopes
      type: object
      properties:
        groupMembers:
          description: Group members information for the server trust group.
          type: array
          items:
            $ref: '#/components/schemas/ServerInfo'
        trustScopes:
          description: Trust scope of the server trust group.
          type: array
          items:
            enum:
              - GlobalTransactions
              - ServiceBroker
            type: string
    ServerInfo:
      description: Server info for the server trust group.
      required:
        - serverId
      type: object
      properties:
        serverId:
          description: Server Id.
          type: string
    ServerTrustGroup:
      description: A server trust group.
      properties:
        properties:
          $ref: '#/components/schemas/ServerTrustGroupProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServerTrustGroupListResult:
      description: A list of server trust groups.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerTrustGroup'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    AdvancedThreatProtectionProperties:
      description: Properties of an Advanced Threat Protection state.
      required:
        - state
      type: object
      properties:
        state:
          description: Specifies the state of the Advanced Threat Protection, whether it is enabled or disabled or a state has not been applied yet on the specific database or server.
          enum:
            - New
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: AdvancedThreatProtectionState
            modelAsString: false
        creationTime:
          format: date-time
          description: Specifies the UTC creation time of the policy.
          type: string
          readOnly: true
    LogicalServerAdvancedThreatProtectionListResult:
      description: A list of the server's Advanced Threat Protection configurations.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerAdvancedThreatProtection'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ServerAdvancedThreatProtection:
      description: A server Advanced Threat Protection.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of AdvancedThreatProtectionResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/AdvancedThreatProtectionProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    SecurityAlertPolicyProperties:
      description: Properties of a security alert policy.
      required:
        - state
      type: object
      properties:
        state:
          description: Specifies the state of the policy, whether it is enabled or disabled or a policy has not been applied yet on the specific database.
          enum:
            - New
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: SecurityAlertPolicyState
            modelAsString: false
        disabledAlerts:
          description: 'Specifies an array of alerts that are disabled. Allowed values are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly, Data_Exfiltration, Unsafe_Action, Brute_Force'
          type: array
          items:
            type: string
        emailAddresses:
          description: Specifies an array of e-mail addresses to which the alert is sent.
          type: array
          items:
            type: string
        emailAccountAdmins:
          description: Specifies that the alert is sent to the account administrators.
          type: boolean
        storageEndpoint:
          description: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). This blob storage will hold all Threat Detection audit logs.
          type: string
        storageAccountAccessKey:
          description: Specifies the identifier key of the Threat Detection audit storage account.
          type: string
        retentionDays:
          format: int32
          description: Specifies the number of days to keep in the Threat Detection audit logs.
          type: integer
        creationTime:
          format: date-time
          description: Specifies the UTC creation time of the policy.
          type: string
          readOnly: true
    ManagedDatabaseSecurityAlertPolicy:
      description: A managed database security alert policy.
      properties:
        properties:
          $ref: '#/components/schemas/SecurityAlertPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedDatabaseSecurityAlertPolicyListResult:
      description: A list of the managed database's security alert policies.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedDatabaseSecurityAlertPolicy'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    BaseLongTermRetentionPolicyProperties:
      description: Properties of a long term retention policy
      type: object
      properties:
        weeklyRetention:
          description: The weekly retention policy for an LTR backup in an ISO 8601 format.
          type: string
        monthlyRetention:
          description: The monthly retention policy for an LTR backup in an ISO 8601 format.
          type: string
        yearlyRetention:
          description: The yearly retention policy for an LTR backup in an ISO 8601 format.
          type: string
        weekOfYear:
          format: int32
          description: The week of year to take the yearly backup in an ISO 8601 format.
          type: integer
    ManagedInstanceLongTermRetentionPolicy:
      description: A long term retention policy.
      properties:
        properties:
          $ref: '#/components/schemas/BaseLongTermRetentionPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedInstanceLongTermRetentionPolicyListResult:
      description: A list of long term retention policies.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceLongTermRetentionPolicy'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    JobStepListResult:
      description: A list of job steps.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/JobStep'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    JobStepProperties:
      description: Properties of a job step.
      required:
        - targetGroup
        - credential
        - action
      type: object
      properties:
        stepId:
          format: int32
          description: The job step's index within the job. If not specified when creating the job step, it will be created as the last step. If not specified when updating the job step, the step id is not modified.
          type: integer
        targetGroup:
          description: The resource ID of the target group that the job step will be executed on.
          type: string
        credential:
          description: The resource ID of the job credential that will be used to connect to the targets.
          type: string
        action:
          $ref: '#/components/schemas/JobStepAction'
          description: The action payload of the job step.
        output:
          $ref: '#/components/schemas/JobStepOutput'
          description: Output destination properties of the job step.
        executionOptions:
          $ref: '#/components/schemas/JobStepExecutionOptions'
          description: Execution options for the job step.
    JobStepAction:
      description: The action to be executed by a job step.
      required:
        - value
      type: object
      properties:
        type:
          description: Type of action being executed by the job step.
          default: TSql
          enum:
            - TSql
          type: string
          x-ms-enum:
            name: JobStepActionType
            modelAsString: true
        source:
          description: The source of the action to execute.
          default: Inline
          enum:
            - Inline
          type: string
          x-ms-enum:
            name: JobStepActionSource
            modelAsString: true
        value:
          description: The action value, for example the text of the T-SQL script to execute.
          type: string
    JobStepOutput:
      description: The output configuration of a job step.
      required:
        - serverName
        - databaseName
        - tableName
        - credential
      type: object
      properties:
        type:
          description: The output destination type.
          default: SqlDatabase
          enum:
            - SqlDatabase
          type: string
          x-ms-enum:
            name: JobStepOutputType
            modelAsString: true
        subscriptionId:
          format: uuid
          description: The output destination subscription id.
          type: string
        resourceGroupName:
          description: The output destination resource group.
          type: string
        serverName:
          description: The output destination server name.
          type: string
        databaseName:
          description: The output destination database.
          type: string
        schemaName:
          description: The output destination schema.
          default: dbo
          type: string
        tableName:
          description: The output destination table.
          type: string
        credential:
          description: The resource ID of the credential to use to connect to the output destination.
          type: string
    JobStepExecutionOptions:
      description: The execution options of a job step.
      type: object
      properties:
        timeoutSeconds:
          format: int32
          description: Execution timeout for the job step.
          default: 43200
          type: integer
        retryAttempts:
          format: int32
          description: Maximum number of times the job step will be reattempted if the first attempt fails.
          default: 10
          type: integer
        initialRetryIntervalSeconds:
          format: int32
          description: Initial delay between retries for job step execution.
          default: 1
          type: integer
        maximumRetryIntervalSeconds:
          format: int32
          description: The maximum amount of time to wait between retries for job step execution.
          default: 120
          type: integer
        retryIntervalBackoffMultiplier:
          format: float
          description: The backoff multiplier for the time between retries.
          default: 2
          type: number
    JobStep:
      description: A job step.
      properties:
        properties:
          $ref: '#/components/schemas/JobStepProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedInstanceEncryptionProtectorListResult:
      description: A list of managed instance encryption protectors.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceEncryptionProtector'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedInstanceEncryptionProtectorProperties:
      description: Properties for an encryption protector execution.
      required:
        - serverKeyType
      type: object
      properties:
        serverKeyName:
          description: The name of the managed instance key.
          type: string
        serverKeyType:
          description: The encryption protector type like 'ServiceManaged', 'AzureKeyVault'.
          enum:
            - ServiceManaged
            - AzureKeyVault
          type: string
          x-ms-enum:
            name: ServerKeyType
            modelAsString: true
        uri:
          description: The URI of the server key.
          type: string
          readOnly: true
        thumbprint:
          description: Thumbprint of the server key.
          type: string
          readOnly: true
        autoRotationEnabled:
          description: Key auto rotation opt-in flag. Either true or false.
          type: boolean
    ManagedInstanceEncryptionProtector:
      description: The managed instance encryption protector.
      properties:
        kind:
          description: Kind of encryption protector. This is metadata used for the Azure portal experience.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/ManagedInstanceEncryptionProtectorProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServerSecurityAlertPolicy:
      description: A server security alert policy.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of SecurityAlertPolicyResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/SecurityAlertsPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    LogicalServerSecurityAlertPolicyListResult:
      description: A list of the server's security alert policies.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerSecurityAlertPolicy'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ImportExportOperationResult:
      description: An ImportExport operation result resource.
      properties:
        properties:
          $ref: '#/components/schemas/ImportExportOperationResultProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ImportExportOperationResultProperties:
      description: Contains the operation result properties for import/export operation.
      type: object
      properties:
        requestId:
          format: uuid
          description: Request Id.
          type: string
          readOnly: true
        requestType:
          description: Request type.
          type: string
          readOnly: true
        queuedTime:
          description: Queued time.
          type: string
          readOnly: true
        lastModifiedTime:
          description: Last modified time.
          type: string
          readOnly: true
        blobUri:
          description: Blob Uri.
          type: string
          readOnly: true
        serverName:
          description: Server name.
          type: string
          readOnly: true
        databaseName:
          description: Database name.
          type: string
          readOnly: true
        status:
          description: Operation status.
          type: string
          readOnly: true
        errorMessage:
          description: Error message.
          type: string
          readOnly: true
        privateEndpointConnections:
          description: Gets the status of private endpoints associated with this request.
          type: array
          items:
            $ref: '#/components/schemas/PrivateEndpointConnectionRequestStatus'
          readOnly: true
    ImportNewDatabaseDefinition:
      description: Contains the information necessary to perform import operation for new database.
      required:
        - storageKeyType
        - storageKey
        - storageUri
        - administratorLogin
        - administratorLoginPassword
      type: object
      properties:
        databaseName:
          description: Name of the import database.
          type: string
          x-ms-mutability:
            - create
        edition:
          description: Edition of the import database.
          type: string
          x-ms-mutability:
            - create
        serviceObjectiveName:
          description: Service level objective name of the import database.
          type: string
          x-ms-mutability:
            - create
        maxSizeBytes:
          description: Max size in bytes for the import database.
          type: string
          x-ms-mutability:
            - create
        storageKeyType:
          description: Storage key type.
          enum:
            - SharedAccessKey
            - StorageAccessKey
          type: string
          x-ms-enum:
            name: StorageKeyType
            modelAsString: true
          x-ms-mutability:
            - create
        storageKey:
          description: Storage key.
          type: string
          x-ms-mutability:
            - create
        storageUri:
          description: Storage Uri.
          type: string
          x-ms-mutability:
            - create
        administratorLogin:
          description: Administrator login name.
          type: string
          x-ms-mutability:
            - create
        administratorLoginPassword:
          description: Administrator login password.
          type: string
          x-ms-secret: true
          x-ms-mutability:
            - create
        authenticationType:
          description: Authentication type.
          type: string
          x-ms-mutability:
            - create
        networkIsolation:
          $ref: '#/components/schemas/NetworkIsolationSettings'
          description: Optional resource information to enable network isolation for request.
          x-ms-mutability:
            - create
    NetworkIsolationSettings:
      description: Contains the ARM resources for which to create private endpoint connection.
      type: object
      properties:
        storageAccountResourceId:
          description: The resource id for the storage account used to store BACPAC file. If set, private endpoint connection will be created for the storage account. Must match storage account used for StorageUri parameter.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - {}
          x-ms-mutability:
            - create
        sqlServerResourceId:
          description: The resource id for the SQL server which is the target of this request. If set, private endpoint connection will be created for the SQL server. Must match server which is target of the operation.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - {}
          x-ms-mutability:
            - create
    PrivateEndpointConnectionRequestStatus:
      description: Contains the private endpoint connection requests status.
      type: object
      properties:
        privateLinkServiceId:
          description: Resource id for which the private endpoint is created.
          type: string
          readOnly: true
        privateEndpointConnectionName:
          description: The connection name for the private endpoint.
          type: string
          readOnly: true
        status:
          description: Status of this private endpoint connection.
          type: string
          readOnly: true
    RefreshExternalGovernanceStatusOperationResult:
      description: An RefreshExternalGovernanceStatus operation result resource.
      properties:
        properties:
          $ref: '#/components/schemas/RefreshExternalGovernanceStatusOperationResultProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    RefreshExternalGovernanceStatusOperationResultProperties:
      description: Contains the operation result properties for refresh external governance status operation.
      type: object
      properties:
        requestId:
          format: uuid
          description: Request Id.
          type: string
          readOnly: true
        requestType:
          description: Request type.
          type: string
          readOnly: true
        queuedTime:
          description: Queued time.
          type: string
          readOnly: true
        serverName:
          description: Server name.
          type: string
          readOnly: true
        status:
          description: Operation status.
          type: string
          readOnly: true
        errorMessage:
          description: Error message.
          type: string
          readOnly: true
    Server:
      description: An Azure SQL Database server.
      required:
        - location
      properties:
        location:
          description: Resource location.
          type: string
          x-ms-mutability:
            - read
            - create
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
        identity:
          $ref: '#/components/schemas/ResourceIdentity'
          description: The Azure Active Directory identity of the server.
        kind:
          description: Kind of sql server. This is metadata used for the Azure portal experience.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/ServerProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServerExternalAdministrator:
      description: Properties of a active directory administrator.
      type: object
      properties:
        administratorType:
          description: Type of the sever administrator.
          enum:
            - ActiveDirectory
          type: string
          x-ms-enum:
            name: AdministratorType
            modelAsString: true
        principalType:
          description: Principal Type of the sever administrator.
          enum:
            - User
            - Group
            - Application
          type: string
          x-ms-enum:
            name: PrincipalType
            modelAsString: true
        login:
          description: Login name of the server administrator.
          type: string
        sid:
          format: uuid
          description: SID (object ID) of the server administrator.
          type: string
        tenantId:
          format: uuid
          description: Tenant ID of the administrator.
          type: string
        azureADOnlyAuthentication:
          description: Azure Active Directory only Authentication enabled.
          type: boolean
    ServerListResult:
      description: A list of servers.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/Server'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ServerPrivateEndpointConnection:
      description: A private endpoint connection under a server
      properties:
        id:
          description: Resource ID.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/PrivateEndpointConnectionProperties'
          description: Private endpoint connection properties
          readOnly: true
      type: object
    ServerProperties:
      description: The properties of a server.
      type: object
      properties:
        administratorLogin:
          description: Administrator username for the server. Once created it cannot be changed.
          type: string
          x-ms-mutability:
            - read
            - create
        administratorLoginPassword:
          description: The administrator login password (required for server creation).
          type: string
          x-ms-secret: true
          x-ms-mutability:
            - create
            - update
        version:
          description: The version of the server.
          type: string
        state:
          description: The state of the server.
          type: string
          readOnly: true
        fullyQualifiedDomainName:
          description: The fully qualified domain name of the server.
          type: string
          readOnly: true
        privateEndpointConnections:
          description: List of private endpoint connections on a server
          type: array
          items:
            $ref: '#/components/schemas/ServerPrivateEndpointConnection'
          readOnly: true
        minimalTlsVersion:
          description: 'Minimal TLS version. Allowed values: ''None'', 1.0'', ''1.1'', ''1.2'', ''1.3'''
          enum:
            - None
            - '1.0'
            - '1.1'
            - '1.2'
            - '1.3'
          type: string
          x-ms-enum:
            name: MinimalTlsVersion
            modelAsString: true
        publicNetworkAccess:
          description: Whether or not public endpoint access is allowed for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled' or 'SecuredByPerimeter'
          enum:
            - Enabled
            - Disabled
            - SecuredByPerimeter
          type: string
          x-ms-enum:
            name: ServerPublicNetworkAccessFlag
            modelAsString: true
        workspaceFeature:
          description: Whether or not existing server has a workspace created and if it allows connection from workspace
          enum:
            - Connected
            - Disconnected
          type: string
          readOnly: true
          x-ms-enum:
            name: ServerWorkspaceFeature
            modelAsString: true
        primaryUserAssignedIdentityId:
          description: The resource id of a user assigned identity to be used by default.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - type: Microsoft.ManagedIdentity/userAssignedIdentities
        federatedClientId:
          format: uuid
          description: The Client id used for cross tenant CMK scenario
          type: string
        keyId:
          description: A CMK URI of the key to use for encryption.
          type: string
        administrators:
          $ref: '#/components/schemas/ServerExternalAdministrator'
          description: The Azure Active Directory administrator of the server. This can only be used at server create time. If used for server update, it will be ignored or it will result in an error. For updates individual APIs will need to be used.
          x-ms-mutability:
            - read
            - create
        restrictOutboundNetworkAccess:
          description: Whether or not to restrict outbound network access for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
          enum:
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: ServerNetworkAccessFlag
            modelAsString: true
        isIPv6Enabled:
          description: Whether or not to enable IPv6 support for this server.  Value is optional but if passed in, must be 'Enabled' or 'Disabled'
          enum:
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: ServerNetworkAccessFlag
            modelAsString: true
        externalGovernanceStatus:
          description: Status of external governance.
          enum:
            - Enabled
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: ExternalGovernanceStatus
            modelAsString: true
    ServerUpdate:
      description: An update request for an Azure SQL Database server.
      properties:
        identity:
          $ref: '#/components/schemas/ResourceIdentity'
          description: Server identity
        properties:
          $ref: '#/components/schemas/ServerProperties'
          description: Resource properties.
          x-ms-client-flatten: true
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
      type: object
    ServerDevOpsAuditingSettings:
      description: A server DevOps auditing settings.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of ServerDevOpsAuditSettingsResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/ServerDevOpsAuditSettingsProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServerDevOpsAuditSettingsListResult:
      description: A list of server DevOps audit settings.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerDevOpsAuditingSettings'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ServerDevOpsAuditSettingsProperties:
      description: Properties of a server DevOps audit settings.
      required:
        - state
      type: object
      properties:
        isAzureMonitorTargetEnabled:
          description: "Specifies whether DevOps audit events are sent to Azure Monitor. \r\nIn order to send the events to Azure Monitor, specify 'State' as 'Enabled' and 'IsAzureMonitorTargetEnabled' as true.\r\n\r\nWhen using REST API to configure DevOps audit, Diagnostic Settings with 'DevOpsOperationsAudit' diagnostic logs category on the master database should be also created.\r\n\r\nDiagnostic Settings URI format:\r\nPUT https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/master/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview\r\n\r\nFor more information, see [Diagnostic Settings REST API](https://go.microsoft.com/fwlink/?linkid=2033207)\r\nor [Diagnostic Settings PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)\r\n"
          type: boolean
        isManagedIdentityInUse:
          description: Specifies whether Managed Identity is used to access blob storage
          type: boolean
        state:
          description: Specifies the state of the audit. If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled are required.
          enum:
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: BlobAuditingPolicyState
            modelAsString: false
        storageEndpoint:
          description: Specifies the blob storage endpoint (e.g. https://MyAccount.blob.core.windows.net). If state is Enabled, storageEndpoint or isAzureMonitorTargetEnabled is required.
          type: string
        storageAccountAccessKey:
          description: "Specifies the identifier key of the auditing storage account. \r\nIf state is Enabled and storageEndpoint is specified, not specifying the storageAccountAccessKey will use SQL server system-assigned managed identity to access the storage.\r\nPrerequisites for using managed identity authentication:\r\n1. Assign SQL Server a system-assigned managed identity in Azure Active Directory (AAD).\r\n2. Grant SQL Server identity access to the storage account by adding 'Storage Blob Data Contributor' RBAC role to the server identity.\r\nFor more information, see [Auditing to storage using Managed Identity authentication](https://go.microsoft.com/fwlink/?linkid=2114355)"
          type: string
          x-ms-secret: true
          x-ms-mutability:
            - create
            - update
        storageAccountSubscriptionId:
          format: uuid
          description: Specifies the blob storage subscription Id.
          type: string
    ManagedInstancePrivateEndpointConnection:
      description: A private endpoint connection
      properties:
        properties:
          $ref: '#/components/schemas/ManagedInstancePrivateEndpointConnectionProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedInstancePrivateEndpointConnectionListResult:
      description: A list of private endpoint connections.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstancePrivateEndpointConnection'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedInstanceOperationListResult:
      description: The response to a list managed instance operations request
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceOperation'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedInstanceOperationProperties:
      description: The properties of a managed instance operation.
      type: object
      properties:
        managedInstanceName:
          description: The name of the managed instance the operation is being performed on.
          type: string
          readOnly: true
        operation:
          description: The name of operation.
          type: string
          readOnly: true
        operationFriendlyName:
          description: The friendly name of operation.
          type: string
          readOnly: true
        percentComplete:
          format: int32
          description: The percentage of the operation completed.
          type: integer
          readOnly: true
        startTime:
          format: date-time
          description: The operation start time.
          type: string
          readOnly: true
        state:
          description: The operation state.
          enum:
            - Pending
            - InProgress
            - Succeeded
            - Failed
            - CancelInProgress
            - Cancelled
          type: string
          readOnly: true
          x-ms-enum:
            name: ManagementOperationState
            modelAsString: true
        errorCode:
          format: int32
          description: The operation error code.
          type: integer
          readOnly: true
        errorDescription:
          description: The operation error description.
          type: string
          readOnly: true
        errorSeverity:
          format: int32
          description: The operation error severity.
          type: integer
          readOnly: true
        isUserError:
          description: Whether or not the error is a user error.
          type: boolean
          readOnly: true
        estimatedCompletionTime:
          format: date-time
          description: The estimated completion time of the operation.
          type: string
          readOnly: true
        description:
          description: The operation description.
          type: string
          readOnly: true
        isCancellable:
          description: Whether the operation can be cancelled.
          type: boolean
          readOnly: true
        operationParameters:
          $ref: '#/components/schemas/ManagedInstanceOperationParametersPair'
          description: The operation parameters.
          readOnly: true
        operationSteps:
          $ref: '#/components/schemas/ManagedInstanceOperationSteps'
          description: The operation steps.
          readOnly: true
    ManagedInstanceOperationParametersPair:
      description: The parameters of a managed instance operation.
      type: object
      properties:
        currentParameters:
          $ref: '#/components/schemas/UpsertManagedServerOperationParameters'
          description: The current parameters.
          readOnly: true
        requestedParameters:
          $ref: '#/components/schemas/UpsertManagedServerOperationParameters'
          description: The requested parameters.
          readOnly: true
    ManagedInstanceOperationSteps:
      description: The steps of a managed instance operation.
      type: object
      properties:
        totalSteps:
          description: The total number of operation steps.
          type: string
          readOnly: true
        currentStep:
          format: int32
          description: The number of current operation steps.
          type: integer
          readOnly: true
        stepsList:
          description: The operation steps list.
          type: array
          items:
            $ref: '#/components/schemas/UpsertManagedServerOperationStep'
          readOnly: true
    UpsertManagedServerOperationParameters:
      type: object
      properties:
        family:
          type: string
        tier:
          type: string
        vCores:
          format: int32
          type: integer
        storageSizeInGB:
          format: int32
          type: integer
    UpsertManagedServerOperationStep:
      type: object
      properties:
        order:
          format: int32
          type: integer
        name:
          type: string
        status:
          enum:
            - NotStarted
            - InProgress
            - SlowedDown
            - Completed
            - Failed
            - Canceled
          type: string
    ManagedInstanceOperation:
      description: A managed instance operation.
      properties:
        properties:
          $ref: '#/components/schemas/ManagedInstanceOperationProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedInstanceVulnerabilityAssessmentProperties:
      description: Properties of a managed instance vulnerability assessment.
      required:
        - storageContainerPath
      type: object
      properties:
        storageContainerPath:
          description: A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
          type: string
          x-ms-mutability:
            - create
            - update
        storageContainerSasKey:
          description: A shared access signature (SAS Key) that has write access to the blob container specified in 'storageContainerPath' parameter. If 'storageAccountAccessKey' isn't specified, StorageContainerSasKey is required. Applies only if the storage account is not behind a Vnet or a firewall
          type: string
          x-ms-mutability:
            - create
            - update
        storageAccountAccessKey:
          description: Specifies the identifier key of the storage account for vulnerability assessment scan results. If 'StorageContainerSasKey' isn't specified, storageAccountAccessKey is required. Applies only if the storage account is not behind a Vnet or a firewall
          type: string
          x-ms-mutability:
            - create
            - update
        recurringScans:
          $ref: '#/components/schemas/VulnerabilityAssessmentRecurringScansProperties'
          description: The recurring scans settings
    ManagedInstanceVulnerabilityAssessment:
      description: A managed instance vulnerability assessment.
      properties:
        properties:
          $ref: '#/components/schemas/ManagedInstanceVulnerabilityAssessmentProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedInstanceVulnerabilityAssessmentListResult:
      description: A list of the ManagedInstance's vulnerability assessments.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceVulnerabilityAssessment'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ResourceIdentity:
      description: Azure Active Directory identity configuration for a resource.
      type: object
      properties:
        principalId:
          format: uuid
          description: The Azure Active Directory principal id.
          type: string
          readOnly: true
        type:
          description: The identity type. Set this to 'SystemAssigned' in order to automatically create and assign an Azure Active Directory principal for the resource.
          enum:
            - None
            - SystemAssigned
            - UserAssigned
            - SystemAssigned,UserAssigned
          type: string
          x-ms-enum:
            name: IdentityType
            modelAsString: true
        tenantId:
          format: uuid
          description: The Azure Active Directory tenant id.
          type: string
          readOnly: true
    RecoverableManagedDatabaseListResult:
      description: A list of recoverable managed databases.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/RecoverableManagedDatabase'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    RecoverableManagedDatabaseProperties:
      description: The recoverable managed database's properties.
      type: object
      properties:
        lastAvailableBackupDate:
          description: The last available backup date.
          type: string
          readOnly: true
    RecoverableManagedDatabase:
      description: A recoverable managed database resource.
      properties:
        properties:
          $ref: '#/components/schemas/RecoverableManagedDatabaseProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    SqlAgentConfigurationProperties:
      description: Sql agent configuration properties.
      type: object
      properties:
        state:
          description: The state of Sql Agent.
          enum:
            - Enabled
            - Disabled
          type: string
    SqlAgentConfiguration:
      description: A recoverable managed database resource.
      properties:
        properties:
          $ref: '#/components/schemas/SqlAgentConfigurationProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServerConnectionPolicyProperties:
      description: The properties of a server connection policy.
      required:
        - connectionType
      type: object
      properties:
        connectionType:
          description: The server connection type.
          enum:
            - Default
            - Redirect
            - Proxy
          type: string
          x-ms-enum:
            name: ServerConnectionType
            modelAsString: true
    ServerConnectionPolicy:
      description: A server connection policy
      properties:
        location:
          description: Resource location.
          type: string
          readOnly: true
        kind:
          description: Metadata used for the Azure portal experience.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/ServerConnectionPolicyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServerConnectionPolicyListResult:
      description: A list of server connection policy objects.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerConnectionPolicy'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedInstanceLongTermRetentionBackupProperties:
      description: Properties of a long term retention backup
      type: object
      properties:
        managedInstanceName:
          description: The managed instance that the backup database belongs to.
          type: string
          readOnly: true
        managedInstanceCreateTime:
          format: date-time
          description: The create time of the instance.
          type: string
          readOnly: true
        databaseName:
          description: The name of the database the backup belong to
          type: string
          readOnly: true
        databaseDeletionTime:
          format: date-time
          description: The delete time of the database
          type: string
          readOnly: true
        backupTime:
          format: date-time
          description: The time the backup was taken
          type: string
          readOnly: true
        backupExpirationTime:
          format: date-time
          description: The time the long term retention backup will expire.
          type: string
          readOnly: true
        backupStorageRedundancy:
          description: The storage redundancy type of the backup
          enum:
            - Geo
            - Local
            - Zone
            - GeoZone
          type: string
          readOnly: true
          x-ms-enum:
            name: BackupStorageRedundancy
            modelAsString: true
    ManagedInstanceLongTermRetentionBackup:
      description: A long term retention backup for a managed database.
      properties:
        properties:
          $ref: '#/components/schemas/ManagedInstanceLongTermRetentionBackupProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedInstanceLongTermRetentionBackupListResult:
      description: A list of long term retention backups for managed database(s).
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceLongTermRetentionBackup'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    LedgerDigestUploadsProperties:
      description: The properties of a database ledger digest upload settings.
      type: object
      properties:
        digestStorageEndpoint:
          description: The digest storage endpoint, which must be either an Azure blob storage endpoint or an URI for Azure Confidential Ledger.
          type: string
        state:
          description: Specifies the state of ledger digest upload.
          enum:
            - Enabled
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: LedgerDigestUploadsState
            modelAsString: false
    LedgerDigestUploads:
      description: Azure SQL Database ledger digest upload settings.
      properties:
        properties:
          $ref: '#/components/schemas/LedgerDigestUploadsProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    LedgerDigestUploadsListResult:
      description: A list of ledger digest upload settings.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/LedgerDigestUploads'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedServerDnsAlias:
      description: A managed server DNS alias.
      properties:
        properties:
          $ref: '#/components/schemas/ManagedServerDnsAliasProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedServerDnsAliasAcquisition:
      description: A managed server DNS alias acquisition request.
      required:
        - oldManagedServerDnsAliasResourceId
      type: object
      properties:
        oldManagedServerDnsAliasResourceId:
          description: The resource ID of the managed server DNS alias that will be acquired to point to this managed server instead.
          type: string
    ManagedServerDnsAliasCreation:
      description: A managed server dns alias creation request.
      type: object
      properties:
        createDnsRecord:
          description: Whether or not DNS record should be created for this alias.
          default: true
          type: boolean
    ManagedServerDnsAliasListResult:
      description: A list of managed server DNS aliases.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedServerDnsAlias'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedServerDnsAliasProperties:
      description: Properties of a managed server DNS alias.
      type: object
      properties:
        azureDnsRecord:
          description: The fully qualified DNS record for managed server alias
          type: string
          readOnly: true
        publicAzureDnsRecord:
          description: The fully qualified public DNS record for managed server alias
          type: string
          readOnly: true
    ManagedInstanceAdvancedThreatProtection:
      description: A managed instance Advanced Threat Protection.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of AdvancedThreatProtectionResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/AdvancedThreatProtectionProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedInstanceAdvancedThreatProtectionListResult:
      description: A list of the managed instance's Advanced Threat Protection settings.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceAdvancedThreatProtection'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    DistributedAvailabilityGroup:
      description: Distributed availability group between box and Sql Managed Instance.
      properties:
        properties:
          $ref: '#/components/schemas/DistributedAvailabilityGroupProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DistributedAvailabilityGroupProperties:
      description: The properties of a distributed availability group.
      type: object
      properties:
        targetDatabase:
          description: The name of the target database
          type: string
        sourceEndpoint:
          description: The source endpoint
          type: string
        primaryAvailabilityGroupName:
          description: The primary availability group name
          type: string
        secondaryAvailabilityGroupName:
          description: The secondary availability group name
          type: string
        replicationMode:
          description: The replication mode of a distributed availability group. Parameter will be ignored during link creation.
          enum:
            - Async
            - Sync
          type: string
          x-ms-enum:
            name: ReplicationMode
            modelAsString: true
        distributedAvailabilityGroupId:
          format: uuid
          description: The distributed availability group id
          type: string
          readOnly: true
        sourceReplicaId:
          format: uuid
          description: The source replica id
          type: string
          readOnly: true
        targetReplicaId:
          format: uuid
          description: The target replica id
          type: string
          readOnly: true
        linkState:
          description: The link state
          type: string
          readOnly: true
        lastHardenedLsn:
          description: The last hardened lsn
          type: string
          readOnly: true
    DistributedAvailabilityGroupsListResult:
      description: A list of distributed availability groups in instance.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DistributedAvailabilityGroup'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    JobPrivateEndpoint:
      description: A job agent private endpoint.
      properties:
        properties:
          $ref: '#/components/schemas/JobPrivateEndpointProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    JobPrivateEndpointListResult:
      description: A list of job agent private endpoints.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/JobPrivateEndpoint'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    JobPrivateEndpointProperties:
      description: Properties of job agent private endpoint.
      required:
        - targetServerAzureResourceId
      type: object
      properties:
        targetServerAzureResourceId:
          description: ARM resource id of the server the private endpoint will target.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - type: Microsoft.Sql/servers
        privateEndpointId:
          description: Private endpoint id of the private endpoint.
          type: string
          readOnly: true
    EncryptionProtectorListResult:
      description: A list of server encryption protectors.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/EncryptionProtector'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    EncryptionProtectorProperties:
      description: Properties for an encryption protector execution.
      required:
        - serverKeyType
      type: object
      properties:
        subregion:
          description: Subregion of the encryption protector.
          type: string
          readOnly: true
        serverKeyName:
          description: The name of the server key.
          type: string
        serverKeyType:
          description: The encryption protector type like 'ServiceManaged', 'AzureKeyVault'.
          enum:
            - ServiceManaged
            - AzureKeyVault
          type: string
          x-ms-enum:
            name: ServerKeyType
            modelAsString: true
        uri:
          description: The URI of the server key.
          type: string
          readOnly: true
        thumbprint:
          description: Thumbprint of the server key.
          type: string
          readOnly: true
        autoRotationEnabled:
          description: Key auto rotation opt-in flag. Either true or false.
          type: boolean
    EncryptionProtector:
      description: The server encryption protector.
      properties:
        kind:
          description: Kind of encryption protector. This is metadata used for the Azure portal experience.
          type: string
          readOnly: true
        location:
          description: Resource location.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/EncryptionProtectorProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    MaintenanceWindowOptionsProperties:
      description: Maintenance window options properties.
      type: object
      properties:
        isEnabled:
          description: Whether maintenance windows are enabled for the database.
          type: boolean
        maintenanceWindowCycles:
          description: Available maintenance cycles e.g. {Saturday, 0, 48*60}, {Wednesday, 0, 24*60}.
          type: array
          items:
            $ref: '#/components/schemas/MaintenanceWindowTimeRange'
        minDurationInMinutes:
          format: int32
          description: Minimum duration of maintenance window.
          type: integer
        defaultDurationInMinutes:
          format: int32
          description: Default duration for maintenance window.
          type: integer
        minCycles:
          format: int32
          description: Minimum number of maintenance windows cycles to be set on the database.
          type: integer
        timeGranularityInMinutes:
          format: int32
          description: Time granularity in minutes for maintenance windows.
          type: integer
        allowMultipleMaintenanceWindowsPerCycle:
          description: Whether we allow multiple maintenance windows per cycle.
          type: boolean
    MaintenanceWindowOptions:
      description: Maintenance window options.
      properties:
        properties:
          $ref: '#/components/schemas/MaintenanceWindowOptionsProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ElasticPool:
      description: An elastic pool.
      required:
        - location
      properties:
        location:
          description: Resource location.
          type: string
          x-ms-mutability:
            - read
            - create
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
        sku:
          $ref: '#/components/schemas/Sku'
          description: "The elastic pool SKU.\r\n\r\nThe list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or the following command:\r\n\r\n```azurecli\r\naz sql elastic-pool list-editions -l <location> -o table\r\n````\r\n"
        kind:
          description: Kind of elastic pool. This is metadata used for the Azure portal experience.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/ElasticPoolProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ElasticPoolListResult:
      description: The result of an elastic pool list request.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ElasticPool'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ElasticPoolPerDatabaseSettings:
      description: Per database settings of an elastic pool.
      type: object
      properties:
        minCapacity:
          format: double
          description: The minimum capacity all databases are guaranteed.
          type: number
        maxCapacity:
          format: double
          description: The maximum capacity any one database can consume.
          type: number
    ElasticPoolProperties:
      description: Properties of an elastic pool
      type: object
      properties:
        state:
          description: The state of the elastic pool.
          enum:
            - Creating
            - Ready
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: ElasticPoolState
            modelAsString: true
        creationDate:
          format: date-time
          description: The creation date of the elastic pool (ISO8601 format).
          type: string
          readOnly: true
        maxSizeBytes:
          format: int64
          description: The storage limit for the database elastic pool in bytes.
          type: integer
        minCapacity:
          format: double
          description: Minimal capacity that serverless pool will not shrink below, if not paused
          type: number
        perDatabaseSettings:
          $ref: '#/components/schemas/ElasticPoolPerDatabaseSettings'
          description: The per database settings for the elastic pool.
        zoneRedundant:
          description: Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be spread across multiple availability zones.
          type: boolean
        licenseType:
          description: The license type to apply for this elastic pool.
          enum:
            - LicenseIncluded
            - BasePrice
          type: string
          x-ms-enum:
            name: ElasticPoolLicenseType
            modelAsString: true
        maintenanceConfigurationId:
          description: Maintenance configuration id assigned to the elastic pool. This configuration defines the period when the maintenance updates will will occur.
          type: string
        highAvailabilityReplicaCount:
          format: int32
          description: The number of secondary replicas associated with the elastic pool that are used to provide high availability. Applicable only to Hyperscale elastic pools.
          type: integer
        preferredEnclaveType:
          description: Type of enclave requested on the elastic pool.
          enum:
            - Default
            - VBS
          type: string
          x-ms-enum:
            name: AlwaysEncryptedEnclaveType
            modelAsString: true
        availabilityZone:
          description: Specifies the availability zone the pool's primary replica is pinned to.
          enum:
            - NoPreference
            - '1'
            - '2'
            - '3'
          type: string
          x-ms-enum:
            name: AvailabilityZoneType
            modelAsString: true
    ElasticPoolUpdate:
      description: An elastic pool update.
      properties:
        sku:
          $ref: '#/components/schemas/Sku'
        properties:
          $ref: '#/components/schemas/ElasticPoolUpdateProperties'
          description: Resource properties.
          x-ms-client-flatten: true
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
      type: object
    ElasticPoolUpdateProperties:
      description: Properties of an elastic pool
      type: object
      properties:
        maxSizeBytes:
          format: int64
          description: The storage limit for the database elastic pool in bytes.
          type: integer
        minCapacity:
          format: double
          description: Minimal capacity that serverless pool will not shrink below, if not paused
          type: number
        perDatabaseSettings:
          $ref: '#/components/schemas/ElasticPoolPerDatabaseSettings'
          description: The per database settings for the elastic pool.
        zoneRedundant:
          description: Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be spread across multiple availability zones.
          type: boolean
        licenseType:
          description: The license type to apply for this elastic pool.
          enum:
            - LicenseIncluded
            - BasePrice
          type: string
          x-ms-enum:
            name: ElasticPoolLicenseType
            modelAsString: true
        maintenanceConfigurationId:
          description: Maintenance configuration id assigned to the elastic pool. This configuration defines the period when the maintenance updates will will occur.
          type: string
        highAvailabilityReplicaCount:
          format: int32
          description: The number of secondary replicas associated with the elastic pool that are used to provide high availability. Applicable only to Hyperscale elastic pools.
          type: integer
        preferredEnclaveType:
          description: Type of enclave requested on the elastic pool.
          enum:
            - Default
            - VBS
          type: string
          x-ms-enum:
            name: AlwaysEncryptedEnclaveType
            modelAsString: true
        availabilityZone:
          description: Specifies the availability zone the pool's primary replica is pinned to.
          enum:
            - NoPreference
            - '1'
            - '2'
            - '3'
          type: string
          x-ms-enum:
            name: AvailabilityZoneType
            modelAsString: true
    JobVersionListResult:
      description: A list of job versions.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/JobVersion'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    JobVersion:
      description: A job version.
      properties: {}
      type: object
    ScheduleItem:
      description: Schedule info describing when the server should be started or stopped.
      required:
        - startDay
        - startTime
        - stopDay
        - stopTime
      type: object
      properties:
        startDay:
          description: Start day.
          enum:
            - Sunday
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
          type: string
          x-ms-enum:
            name: DayOfWeek
            modelAsString: true
        startTime:
          description: Start time.
          type: string
        stopDay:
          description: Stop day.
          enum:
            - Sunday
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
          type: string
          x-ms-enum:
            name: DayOfWeek
            modelAsString: true
        stopTime:
          description: Stop time.
          type: string
    StartStopManagedInstanceSchedule:
      description: Managed instance's Start/Stop schedule.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: System data of the scheduled resource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/StartStopManagedInstanceScheduleProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    StartStopManagedInstanceScheduleListResult:
      description: Managed instance's Start/Stop schedule list result.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/StartStopManagedInstanceSchedule'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    StartStopManagedInstanceScheduleProperties:
      description: Properties of managed instance's Start/Stop schedule.
      required:
        - scheduleList
      type: object
      properties:
        description:
          description: The description of the schedule.
          default: ''
          type: string
        timeZoneId:
          description: The time zone of the schedule.
          default: UTC
          type: string
        scheduleList:
          description: Schedule list.
          type: array
          items:
            $ref: '#/components/schemas/ScheduleItem'
          x-ms-identifiers: []
        nextRunAction:
          description: Next action to be executed (Start or Stop)
          type: string
          readOnly: true
        nextExecutionTime:
          description: Timestamp when the next action will be executed in the corresponding schedule time zone.
          type: string
          readOnly: true
    DatabaseSqlVulnerabilityAssessmentBaselineSet:
      description: A database sql vulnerability assessment baseline set.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of DatabaseSqlVulnerabilityAssessmentBaselineSetResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentBaselineSetProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseSqlVulnerabilityAssessmentBaselineSetListResult:
      description: A list of SQL Vulnerability Assessments baseline set.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentBaselineSet'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    DatabaseSqlVulnerabilityAssessmentBaselineSetProperties:
      description: Properties of a database Sql Vulnerability Assessment baseline set.
      required:
        - results
      type: object
      properties:
        results:
          description: The baseline set result
          type: object
          additionalProperties:
            type: array
            items:
              type: array
              items:
                type: string
    DatabaseSqlVulnerabilityAssessmentRuleBaselineListInput:
      description: A database sql vulnerability assessment rule baseline list input.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of DatabaseSqlVulnerabilityAssessmentRuleBaselineListInputResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaselineListInputProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseSqlVulnerabilityAssessmentRuleBaselineListInputProperties:
      description: Properties of a database Sql Vulnerability Assessment rule baseline.
      required:
        - latestScan
        - results
      type: object
      properties:
        latestScan:
          description: The latest scan flag
          type: boolean
        results:
          description: The rule baseline result list
          type: object
          additionalProperties:
            type: array
            items:
              type: array
              items:
                type: string
    SyncDatabaseIdListResult:
      description: A list of sync database ID properties.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SyncDatabaseIdProperties'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SyncDatabaseIdProperties:
      description: Properties of the sync database id.
      type: object
      properties:
        id:
          description: ARM resource id of sync database.
          type: string
          readOnly: true
    SyncGroupLogListResult:
      description: A list of sync group log properties.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SyncGroupLogProperties'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    SyncGroupLogProperties:
      description: Properties of an Azure SQL Database sync group log.
      type: object
      properties:
        timestamp:
          format: date-time
          description: Timestamp of the sync group log.
          type: string
          readOnly: true
        type:
          description: Type of the sync group log.
          enum:
            - All
            - Error
            - Warning
            - Success
          type: string
          readOnly: true
          x-ms-enum:
            name: SyncGroupLogType
            modelAsString: true
        source:
          description: Source of the sync group log.
          type: string
          readOnly: true
        details:
          description: Details of the sync group log.
          type: string
          readOnly: true
        tracingId:
          format: uuid
          description: TracingId of the sync group log.
          type: string
          readOnly: true
        operationStatus:
          description: OperationStatus of the sync group log.
          type: string
          readOnly: true
    SyncGroupProperties:
      description: Properties of a sync group.
      type: object
      properties:
        interval:
          format: int32
          description: Sync interval of the sync group.
          type: integer
        lastSyncTime:
          format: date-time
          description: Last sync time of the sync group.
          type: string
          readOnly: true
        conflictResolutionPolicy:
          description: Conflict resolution policy of the sync group.
          enum:
            - HubWin
            - MemberWin
          type: string
          x-ms-enum:
            name: SyncConflictResolutionPolicy
            modelAsString: true
        syncDatabaseId:
          description: ARM resource id of the sync database in the sync group.
          type: string
        hubDatabaseUserName:
          description: User name for the sync group hub database credential.
          type: string
        hubDatabasePassword:
          description: Password for the sync group hub database credential.
          type: string
          x-ms-mutability:
            - create
            - update
        syncState:
          description: Sync state of the sync group.
          enum:
            - NotReady
            - Error
            - Warning
            - Progressing
            - Good
          type: string
          readOnly: true
          x-ms-enum:
            name: SyncGroupState
            modelAsString: true
        schema:
          $ref: '#/components/schemas/SyncGroupSchema'
          description: Sync schema of the sync group.
        enableConflictLogging:
          description: If conflict logging is enabled.
          type: boolean
        conflictLoggingRetentionInDays:
          format: int32
          description: Conflict logging retention period.
          type: integer
        usePrivateLinkConnection:
          description: If use private link connection is enabled.
          type: boolean
        privateEndpointName:
          description: Private endpoint name of the sync group if use private link connection is enabled.
          type: string
          readOnly: true
    SyncGroupSchema:
      description: Properties of sync group schema.
      type: object
      properties:
        tables:
          description: List of tables in sync group schema.
          type: array
          items:
            $ref: '#/components/schemas/SyncGroupSchemaTable'
        masterSyncMemberName:
          description: Name of master sync member where the schema is from.
          type: string
    SyncGroupSchemaTable:
      description: Properties of table in sync group schema.
      type: object
      properties:
        columns:
          description: List of columns in sync group schema.
          type: array
          items:
            $ref: '#/components/schemas/SyncGroupSchemaTableColumn'
        quotedName:
          description: Quoted name of sync group schema table.
          type: string
    SyncGroupSchemaTableColumn:
      description: Properties of column in sync group table.
      type: object
      properties:
        quotedName:
          description: Quoted name of sync group table column.
          type: string
        dataSize:
          description: Data size of the column.
          type: string
        dataType:
          description: Data type of the column.
          type: string
    SyncGroup:
      description: An Azure SQL Database sync group.
      properties:
        sku:
          $ref: '#/components/schemas/Sku'
          description: The name and capacity of the SKU.
        properties:
          $ref: '#/components/schemas/SyncGroupProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    SyncGroupListResult:
      description: A list of sync groups.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/SyncGroup'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    RestorableDroppedDatabase:
      description: A restorable dropped database resource.
      properties:
        sku:
          $ref: '#/components/schemas/Sku'
          description: The name and tier of the SKU.
        location:
          description: Resource location.
          type: string
          x-ms-mutability:
            - read
            - create
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
        properties:
          $ref: '#/components/schemas/RestorableDroppedDatabaseProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    RestorableDroppedDatabaseListResult:
      description: A list of restorable dropped databases.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/RestorableDroppedDatabase'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    RestorableDroppedDatabaseProperties:
      description: The restorable dropped database's properties.
      type: object
      properties:
        databaseName:
          description: The name of the database.
          type: string
          readOnly: true
        maxSizeBytes:
          format: int64
          description: The max size of the database expressed in bytes.
          type: integer
          readOnly: true
        creationDate:
          format: date-time
          description: The creation date of the database (ISO8601 format).
          type: string
          readOnly: true
        deletionDate:
          format: date-time
          description: The deletion date of the database (ISO8601 format).
          type: string
          readOnly: true
        earliestRestoreDate:
          format: date-time
          description: The earliest restore date of the database (ISO8601 format).
          type: string
          readOnly: true
        backupStorageRedundancy:
          description: The storage account type used to store backups for this database.
          enum:
            - Geo
            - Local
            - Zone
            - GeoZone
          type: string
          readOnly: true
          x-ms-enum:
            name: BackupStorageRedundancy
            modelAsString: true
        keys:
          description: The resource ids of the user assigned identities to use
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DatabaseKey'
    DatabaseAutomaticTuningProperties:
      description: Database-level Automatic Tuning properties.
      type: object
      properties:
        desiredState:
          description: Automatic tuning desired state.
          enum:
            - Inherit
            - Custom
            - Auto
            - Unspecified
          type: string
          x-ms-enum:
            name: AutomaticTuningMode
            modelAsString: false
        actualState:
          description: Automatic tuning actual state.
          enum:
            - Inherit
            - Custom
            - Auto
            - Unspecified
          type: string
          readOnly: true
          x-ms-enum:
            name: AutomaticTuningMode
            modelAsString: false
        options:
          description: Automatic tuning options definition.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AutomaticTuningOptions'
    AutomaticTuningOptions:
      description: Automatic tuning properties for individual advisors.
      type: object
      properties:
        desiredState:
          description: Automatic tuning option desired state.
          enum:
            - 'Off'
            - 'On'
            - Default
          type: string
          x-ms-enum:
            name: AutomaticTuningOptionModeDesired
            modelAsString: false
        actualState:
          description: Automatic tuning option actual state.
          enum:
            - 'Off'
            - 'On'
          type: string
          readOnly: true
          x-ms-enum:
            name: AutomaticTuningOptionModeActual
            modelAsString: false
        reasonCode:
          format: int32
          description: Reason code if desired and actual state are different.
          type: integer
          readOnly: true
        reasonDesc:
          description: Reason description if desired and actual state are different.
          enum:
            - Default
            - Disabled
            - AutoConfigured
            - InheritedFromServer
            - QueryStoreOff
            - QueryStoreReadOnly
            - NotSupported
          type: string
          readOnly: true
          x-ms-enum:
            name: AutomaticTuningDisabledReason
            modelAsString: false
    DatabaseAutomaticTuning:
      description: Database-level Automatic Tuning.
      properties:
        properties:
          $ref: '#/components/schemas/DatabaseAutomaticTuningProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ServiceObjective:
      description: Represents a database service objective.
      properties:
        properties:
          x-ms-client-flatten: true
          $ref: '#/components/schemas/ServiceObjectiveProperties'
          description: Represents the properties of the resource.
      type: object
    ServiceObjectiveProperties:
      properties:
        serviceObjectiveName:
          readOnly: true
          type: string
          description: The name for the service objective.
        isDefault:
          readOnly: true
          type: boolean
          description: Gets whether the service level objective is the default service objective.
          nullable: false
        isSystem:
          readOnly: true
          type: boolean
          description: Gets whether the service level objective is a system service objective.
          nullable: false
        description:
          readOnly: true
          type: string
          description: The description for the service level objective.
        enabled:
          readOnly: true
          type: boolean
          description: Gets whether the service level objective is enabled.
          nullable: false
      description: Represents the properties of a database service objective.
      type: object
    ServiceObjectiveListResult:
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/ServiceObjective'
          description: The list of database service objectives.
      required:
        - value
      description: Represents the response to a get database service objectives request.
      type: object
    DatabaseVulnerabilityAssessmentScanExportProperties:
      description: Properties of the export operation's result.
      type: object
      properties:
        exportedReportLocation:
          description: Location of the exported report (e.g. https://myStorage.blob.core.windows.net/VaScans/scans/serverName/databaseName/scan_scanId.xlsx).
          type: string
          readOnly: true
    DatabaseVulnerabilityAssessmentScansExport:
      description: A database Vulnerability Assessment scan export resource.
      properties:
        properties:
          $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentScanExportProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    VulnerabilityAssessmentScanRecordListResult:
      description: A list of vulnerability assessment scan records.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/VulnerabilityAssessmentScanRecord'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    VulnerabilityAssessmentScanRecordProperties:
      description: Properties of a vulnerability assessment scan record.
      type: object
      properties:
        scanId:
          description: The scan ID.
          type: string
          readOnly: true
        triggerType:
          description: The scan trigger type.
          enum:
            - OnDemand
            - Recurring
          type: string
          readOnly: true
          x-ms-enum:
            name: VulnerabilityAssessmentScanTriggerType
            modelAsString: true
        state:
          description: The scan status.
          enum:
            - Passed
            - Failed
            - FailedToRun
            - InProgress
          type: string
          readOnly: true
          x-ms-enum:
            name: VulnerabilityAssessmentScanState
            modelAsString: true
        startTime:
          format: date-time
          description: The scan start time (UTC).
          type: string
          readOnly: true
        endTime:
          format: date-time
          description: The scan end time (UTC).
          type: string
          readOnly: true
        errors:
          description: The scan errors.
          type: array
          items:
            $ref: '#/components/schemas/VulnerabilityAssessmentScanError'
          readOnly: true
        storageContainerPath:
          description: The scan results storage container path.
          type: string
          readOnly: true
        numberOfFailedSecurityChecks:
          format: int32
          description: The number of failed security checks.
          type: integer
          readOnly: true
    VulnerabilityAssessmentScanError:
      description: Properties of a vulnerability assessment scan error.
      type: object
      properties:
        code:
          description: The error code.
          type: string
          readOnly: true
        message:
          description: The error message.
          type: string
          readOnly: true
    VulnerabilityAssessmentScanRecord:
      description: A vulnerability assessment scan record.
      properties:
        properties:
          $ref: '#/components/schemas/VulnerabilityAssessmentScanRecordProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedTransparentDataEncryptionProperties:
      description: Properties of a transparent data encryption.
      required:
        - state
      type: object
      properties:
        state:
          description: Specifies the state of the transparent data encryption.
          enum:
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: TransparentDataEncryptionState
            modelAsString: false
    ManagedTransparentDataEncryption:
      description: A managed database transparent data encryption state.
      properties:
        properties:
          $ref: '#/components/schemas/ManagedTransparentDataEncryptionProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedTransparentDataEncryptionListResult:
      description: A list of managed transparent data encryptions
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedTransparentDataEncryption'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    Database:
      description: A database resource.
      required:
        - location
      properties:
        location:
          description: Resource location.
          type: string
          x-ms-mutability:
            - read
            - create
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
        sku:
          $ref: '#/components/schemas/Sku'
          description: "The database SKU.\r\n\r\nThe list of SKUs may vary by region and support offer. To determine the SKUs (including the SKU name, tier/edition, family, and capacity) that are available to your subscription in an Azure region, use the `Capabilities_ListByLocation` REST API or one of the following commands:\r\n\r\n```azurecli\r\naz sql db list-editions -l <location> -o table\r\n````\r\n\r\n```powershell\r\nGet-AzSqlServerServiceObjective -Location <location>\r\n````\r\n"
        kind:
          description: Kind of database. This is metadata used for the Azure portal experience.
          type: string
          readOnly: true
        managedBy:
          description: Resource that manages the database.
          type: string
          readOnly: true
        identity:
          $ref: '#/components/schemas/DatabaseIdentity'
          description: The Azure Active Directory identity of the database.
          x-ms-mutability:
            - read
            - create
        properties:
          $ref: '#/components/schemas/DatabaseProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseIdentity:
      description: Azure Active Directory identity configuration for a resource.
      type: object
      properties:
        type:
          description: The identity type
          enum:
            - None
            - UserAssigned
          type: string
          x-ms-enum:
            name: DatabaseIdentityType
            modelAsString: true
        tenantId:
          format: uuid
          description: The Azure Active Directory tenant id.
          type: string
          readOnly: true
        userAssignedIdentities:
          description: The resource ids of the user assigned identities to use
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DatabaseUserIdentity'
    DatabaseListResult:
      description: A list of databases.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/Database'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    DatabaseProperties:
      description: The database's properties.
      type: object
      properties:
        createMode:
          description: "Specifies the mode of database creation.\r\n\r\nDefault: regular database creation.\r\n\r\nCopy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.\r\n\r\nSecondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.\r\n\r\nPointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.\r\n\r\nRecovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.\r\n\r\nRestore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.\r\n\r\nRestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.\r\n\r\nCopy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition."
          enum:
            - Default
            - Copy
            - Secondary
            - PointInTimeRestore
            - Restore
            - Recovery
            - RestoreExternalBackup
            - RestoreExternalBackupSecondary
            - RestoreLongTermRetentionBackup
            - OnlineSecondary
          type: string
          x-ms-enum:
            name: CreateMode
            modelAsString: true
          x-ms-mutability:
            - create
        collation:
          description: The collation of the database.
          type: string
          x-ms-mutability:
            - read
            - create
        maxSizeBytes:
          format: int64
          description: The max size of the database expressed in bytes.
          type: integer
        sampleName:
          description: The name of the sample schema to apply when creating this database.
          enum:
            - AdventureWorksLT
            - WideWorldImportersStd
            - WideWorldImportersFull
          type: string
          x-ms-enum:
            name: SampleName
            modelAsString: true
          x-ms-mutability:
            - create
        elasticPoolId:
          description: The resource identifier of the elastic pool containing this database.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - type: Microsoft.Sql/servers/elasticPools
        sourceDatabaseId:
          description: The resource identifier of the source database associated with create operation of this database.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - {}
          x-ms-mutability:
            - create
        status:
          description: The status of the database.
          enum:
            - Online
            - Restoring
            - RecoveryPending
            - Recovering
            - Suspect
            - Offline
            - Standby
            - Shutdown
            - EmergencyMode
            - AutoClosed
            - Copying
            - Creating
            - Inaccessible
            - OfflineSecondary
            - Pausing
            - Paused
            - Resuming
            - Scaling
            - OfflineChangingDwPerformanceTiers
            - OnlineChangingDwPerformanceTiers
            - Disabled
            - Stopping
            - Stopped
            - Starting
          type: string
          readOnly: true
          x-ms-enum:
            name: DatabaseStatus
            modelAsString: true
        databaseId:
          format: uuid
          description: The ID of the database.
          type: string
          readOnly: true
        creationDate:
          format: date-time
          description: The creation date of the database (ISO8601 format).
          type: string
          readOnly: true
        currentServiceObjectiveName:
          description: The current service level objective name of the database.
          type: string
          readOnly: true
        requestedServiceObjectiveName:
          description: The requested service level objective name of the database.
          type: string
          readOnly: true
        defaultSecondaryLocation:
          description: The default secondary region for this database.
          type: string
          readOnly: true
        failoverGroupId:
          description: Failover Group resource identifier that this database belongs to.
          type: string
          readOnly: true
        restorePointInTime:
          format: date-time
          description: Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
          type: string
          x-ms-mutability:
            - create
        sourceDatabaseDeletionDate:
          format: date-time
          description: Specifies the time that the database was deleted.
          type: string
          x-ms-mutability:
            - create
        recoveryServicesRecoveryPointId:
          description: The resource identifier of the recovery point associated with create operation of this database.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - {}
          x-ms-mutability:
            - create
        longTermRetentionBackupResourceId:
          description: The resource identifier of the long term retention backup associated with create operation of this database.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - type: Microsoft.Sql/locations/longTermRetentionBackups
          x-ms-mutability:
            - create
        recoverableDatabaseId:
          description: The resource identifier of the recoverable database associated with create operation of this database.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - {}
          x-ms-mutability:
            - create
        restorableDroppedDatabaseId:
          description: The resource identifier of the restorable dropped database associated with create operation of this database.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - {}
          x-ms-mutability:
            - create
        catalogCollation:
          description: Collation of the metadata catalog.
          enum:
            - DATABASE_DEFAULT
            - SQL_Latin1_General_CP1_CI_AS
          type: string
          x-ms-enum:
            name: CatalogCollationType
            modelAsString: true
          x-ms-mutability:
            - read
            - create
        zoneRedundant:
          description: Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
          type: boolean
        licenseType:
          description: The license type to apply for this database. `LicenseIncluded` if you need a license, or `BasePrice` if you have a license and are eligible for the Azure Hybrid Benefit.
          enum:
            - LicenseIncluded
            - BasePrice
          type: string
          x-ms-enum:
            name: DatabaseLicenseType
            modelAsString: true
        maxLogSizeBytes:
          format: int64
          description: The max log size for this database.
          type: integer
          readOnly: true
        earliestRestoreDate:
          format: date-time
          description: This records the earliest start date and time that restore is available for this database (ISO8601 format).
          type: string
          readOnly: true
        readScale:
          description: The state of read-only routing. If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica in the same region. Not applicable to a Hyperscale database within an elastic pool.
          enum:
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: DatabaseReadScale
            modelAsString: true
          x-ms-mutability:
            - read
            - update
        highAvailabilityReplicaCount:
          format: int32
          description: The number of secondary replicas associated with the database that are used to provide high availability. Not applicable to a Hyperscale database within an elastic pool.
          type: integer
        secondaryType:
          description: The secondary type of the database if it is a secondary.  Valid values are Geo, Named and Standby.
          enum:
            - Geo
            - Named
            - Standby
          type: string
          x-ms-enum:
            name: SecondaryType
            modelAsString: true
        currentSku:
          $ref: '#/components/schemas/Sku'
          description: The name and tier of the SKU.
          readOnly: true
        autoPauseDelay:
          format: int32
          description: Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled
          type: integer
        currentBackupStorageRedundancy:
          description: The storage account type used to store backups for this database.
          enum:
            - Geo
            - Local
            - Zone
            - GeoZone
          type: string
          readOnly: true
          x-ms-enum:
            name: BackupStorageRedundancy
            modelAsString: true
        requestedBackupStorageRedundancy:
          description: The storage account type to be used to store backups for this database.
          enum:
            - Geo
            - Local
            - Zone
            - GeoZone
          type: string
          x-ms-enum:
            name: BackupStorageRedundancy
            modelAsString: true
        minCapacity:
          format: double
          description: Minimal capacity that database will always have allocated, if not paused
          type: number
        pausedDate:
          format: date-time
          description: The date when database was paused by user configuration or action(ISO8601 format). Null if the database is ready.
          type: string
          readOnly: true
        resumedDate:
          format: date-time
          description: The date when database was resumed by user action or database login (ISO8601 format). Null if the database is paused.
          type: string
          readOnly: true
        maintenanceConfigurationId:
          description: Maintenance configuration id assigned to the database. This configuration defines the period when the maintenance updates will occur.
          type: string
        isLedgerOn:
          description: 'Whether or not this database is a ledger database, which means all tables in the database are ledger tables. Note: the value of this property cannot be changed after the database has been created.'
          type: boolean
        isInfraEncryptionEnabled:
          description: Infra encryption is enabled for this database.
          type: boolean
          readOnly: true
        federatedClientId:
          format: uuid
          description: The Client id used for cross tenant per database CMK scenario
          type: string
        keys:
          description: The resource ids of the user assigned identities to use
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DatabaseKey'
        encryptionProtector:
          description: The azure key vault URI of the database if it's configured with per Database Customer Managed Keys.
          type: string
        preferredEnclaveType:
          description: Type of enclave requested on the database i.e. Default or VBS enclaves.
          enum:
            - Default
            - VBS
          type: string
          x-ms-enum:
            name: AlwaysEncryptedEnclaveType
            modelAsString: true
        useFreeLimit:
          description: Whether or not the database uses free monthly limits. Allowed on one database in a subscription.
          type: boolean
        freeLimitExhaustionBehavior:
          description: "Specifies the behavior when monthly free limits are exhausted for the free database.\r\n\r\nAutoPause: The database will be auto paused upon exhaustion of free limits for remainder of the month.\r\n\r\nBillForUsage: The database will continue to be online upon exhaustion of free limits and any overage will be billed."
          enum:
            - AutoPause
            - BillOverUsage
          type: string
          x-ms-enum:
            name: FreeLimitExhaustionBehavior
            modelAsString: true
        sourceResourceId:
          description: "The resource identifier of the source associated with the create operation of this database.\r\n\r\nThis property is only supported for DataWarehouse edition and allows to restore across subscriptions.\r\n\r\nWhen sourceResourceId is specified, sourceDatabaseId, recoverableDatabaseId, restorableDroppedDatabaseId and sourceDatabaseDeletionDate must not be specified and CreateMode must be PointInTimeRestore, Restore or Recover.\r\n\r\nWhen createMode is PointInTimeRestore, sourceResourceId must be the resource ID of the existing database or existing sql pool, and restorePointInTime must be specified.\r\n\r\nWhen createMode is Restore, sourceResourceId must be the resource ID of restorable dropped database or restorable dropped sql pool.\r\n\r\nWhen createMode is Recover, sourceResourceId must be the resource ID of recoverable database or recoverable sql pool.\r\n\r\nWhen source subscription belongs to a different tenant than target subscription, “x-ms-authorization-auxiliary” header must contain authentication token for the source tenant. For more details about “x-ms-authorization-auxiliary” header see https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/authenticate-multi-tenant "
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - {}
          x-ms-mutability:
            - create
        manualCutover:
          description: "Whether or not customer controlled manual cutover needs to be done during Update Database operation to Hyperscale tier.\r\n\r\nThis property is only applicable when scaling database from Business Critical/General Purpose/Premium/Standard tier to Hyperscale tier.\r\n\r\nWhen manualCutover is specified, the scaling operation will wait for user input to trigger cutover to Hyperscale database.\r\n\r\nTo trigger cutover, please provide 'performCutover' parameter when the Scaling operation is in Waiting state."
          type: boolean
        performCutover:
          description: "To trigger customer controlled manual cutover during the wait state while Scaling operation is in progress.\r\n\r\nThis property parameter is only applicable for scaling operations that are initiated along with 'manualCutover' parameter.\r\n\r\nThis property is only applicable when scaling database from Business Critical/General Purpose/Premium/Standard tier to Hyperscale tier is already in progress.\r\n\r\nWhen performCutover is specified, the scaling operation will trigger cutover and perform role-change to Hyperscale database."
          type: boolean
        availabilityZone:
          description: Specifies the availability zone the database is pinned to.
          enum:
            - NoPreference
            - '1'
            - '2'
            - '3'
          type: string
          x-ms-enum:
            name: AvailabilityZoneType
            modelAsString: true
        encryptionProtectorAutoRotation:
          description: The flag to enable or disable auto rotation of database encryption protector AKV key.
          type: boolean
    DatabaseUpdate:
      description: A database update resource.
      properties:
        sku:
          $ref: '#/components/schemas/Sku'
          description: The name and tier of the SKU.
        identity:
          $ref: '#/components/schemas/DatabaseIdentity'
          description: Database identity
        properties:
          $ref: '#/components/schemas/DatabaseUpdateProperties'
          description: Resource properties.
          x-ms-client-flatten: true
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
      type: object
    DatabaseUpdateProperties:
      description: A database update properties.
      type: object
      properties:
        createMode:
          description: "Specifies the mode of database creation.\r\n\r\nDefault: regular database creation.\r\n\r\nCopy: creates a database as a copy of an existing database. sourceDatabaseId must be specified as the resource ID of the source database.\r\n\r\nSecondary: creates a database as a secondary replica of an existing database. sourceDatabaseId must be specified as the resource ID of the existing primary database.\r\n\r\nPointInTimeRestore: Creates a database by restoring a point in time backup of an existing database. sourceDatabaseId must be specified as the resource ID of the existing database, and restorePointInTime must be specified.\r\n\r\nRecovery: Creates a database by restoring a geo-replicated backup. sourceDatabaseId must be specified as the recoverable database resource ID to restore.\r\n\r\nRestore: Creates a database by restoring a backup of a deleted database. sourceDatabaseId must be specified. If sourceDatabaseId is the database's original resource ID, then sourceDatabaseDeletionDate must be specified. Otherwise sourceDatabaseId must be the restorable dropped database resource ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also be specified to restore from an earlier point in time.\r\n\r\nRestoreLongTermRetentionBackup: Creates a database by restoring from a long term retention vault. recoveryServicesRecoveryPointResourceId must be specified as the recovery point resource ID.\r\n\r\nCopy, Secondary, and RestoreLongTermRetentionBackup are not supported for DataWarehouse edition."
          enum:
            - Default
            - Copy
            - Secondary
            - PointInTimeRestore
            - Restore
            - Recovery
            - RestoreExternalBackup
            - RestoreExternalBackupSecondary
            - RestoreLongTermRetentionBackup
            - OnlineSecondary
          type: string
          x-ms-enum:
            name: CreateMode
            modelAsString: true
          x-ms-mutability:
            - create
        collation:
          description: The collation of the database.
          type: string
          x-ms-mutability:
            - read
            - create
        maxSizeBytes:
          format: int64
          description: The max size of the database expressed in bytes.
          type: integer
        sampleName:
          description: The name of the sample schema to apply when creating this database.
          enum:
            - AdventureWorksLT
            - WideWorldImportersStd
            - WideWorldImportersFull
          type: string
          x-ms-enum:
            name: SampleName
            modelAsString: true
          x-ms-mutability:
            - create
        elasticPoolId:
          description: The resource identifier of the elastic pool containing this database.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - type: Microsoft.Sql/servers/elasticPools
        sourceDatabaseId:
          description: The resource identifier of the source database associated with create operation of this database.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - {}
          x-ms-mutability:
            - create
        status:
          description: The status of the database.
          enum:
            - Online
            - Restoring
            - RecoveryPending
            - Recovering
            - Suspect
            - Offline
            - Standby
            - Shutdown
            - EmergencyMode
            - AutoClosed
            - Copying
            - Creating
            - Inaccessible
            - OfflineSecondary
            - Pausing
            - Paused
            - Resuming
            - Scaling
            - OfflineChangingDwPerformanceTiers
            - OnlineChangingDwPerformanceTiers
            - Disabled
            - Stopping
            - Stopped
            - Starting
          type: string
          readOnly: true
          x-ms-enum:
            name: DatabaseStatus
            modelAsString: true
        databaseId:
          format: uuid
          description: The ID of the database.
          type: string
          readOnly: true
        creationDate:
          format: date-time
          description: The creation date of the database (ISO8601 format).
          type: string
          readOnly: true
        currentServiceObjectiveName:
          description: The current service level objective name of the database.
          type: string
          readOnly: true
        requestedServiceObjectiveName:
          description: The requested service level objective name of the database.
          type: string
          readOnly: true
        defaultSecondaryLocation:
          description: The default secondary region for this database.
          type: string
          readOnly: true
        failoverGroupId:
          description: Failover Group resource identifier that this database belongs to.
          type: string
          readOnly: true
        restorePointInTime:
          format: date-time
          description: Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
          type: string
          x-ms-mutability:
            - create
        sourceDatabaseDeletionDate:
          format: date-time
          description: Specifies the time that the database was deleted.
          type: string
          x-ms-mutability:
            - create
        recoveryServicesRecoveryPointId:
          description: The resource identifier of the recovery point associated with create operation of this database.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - {}
          x-ms-mutability:
            - create
        longTermRetentionBackupResourceId:
          description: The resource identifier of the long term retention backup associated with create operation of this database.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - type: Microsoft.Sql/locations/longTermRetentionBackups
          x-ms-mutability:
            - create
        recoverableDatabaseId:
          description: The resource identifier of the recoverable database associated with create operation of this database.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - {}
          x-ms-mutability:
            - create
        restorableDroppedDatabaseId:
          description: The resource identifier of the restorable dropped database associated with create operation of this database.
          type: string
          format: arm-id
          x-ms-arm-id-details:
            allowedResources:
              - {}
          x-ms-mutability:
            - create
        catalogCollation:
          description: Collation of the metadata catalog.
          enum:
            - DATABASE_DEFAULT
            - SQL_Latin1_General_CP1_CI_AS
          type: string
          x-ms-enum:
            name: CatalogCollationType
            modelAsString: true
          x-ms-mutability:
            - read
            - create
        zoneRedundant:
          description: Whether or not this database is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
          type: boolean
        licenseType:
          description: The license type to apply for this database. `LicenseIncluded` if you need a license, or `BasePrice` if you have a license and are eligible for the Azure Hybrid Benefit.
          enum:
            - LicenseIncluded
            - BasePrice
          type: string
          x-ms-enum:
            name: DatabaseLicenseType
            modelAsString: true
        maxLogSizeBytes:
          format: int64
          description: The max log size for this database.
          type: integer
          readOnly: true
        earliestRestoreDate:
          format: date-time
          description: This records the earliest start date and time that restore is available for this database (ISO8601 format).
          type: string
          readOnly: true
        readScale:
          description: The state of read-only routing. If enabled, connections that have application intent set to readonly in their connection string may be routed to a readonly secondary replica in the same region. Not applicable to a Hyperscale database within an elastic pool.
          enum:
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: DatabaseReadScale
            modelAsString: true
          x-ms-mutability:
            - read
            - update
        highAvailabilityReplicaCount:
          format: int32
          description: The number of secondary replicas associated with the database that are used to provide high availability. Not applicable to a Hyperscale database within an elastic pool.
          type: integer
        secondaryType:
          description: The secondary type of the database if it is a secondary.  Valid values are Geo, Named and Standby.
          enum:
            - Geo
            - Named
            - Standby
          type: string
          x-ms-enum:
            name: SecondaryType
            modelAsString: true
        currentSku:
          $ref: '#/components/schemas/Sku'
          description: The name and tier of the SKU.
          readOnly: true
        autoPauseDelay:
          format: int32
          description: Time in minutes after which database is automatically paused. A value of -1 means that automatic pause is disabled
          type: integer
        currentBackupStorageRedundancy:
          description: The storage account type used to store backups for this database.
          enum:
            - Geo
            - Local
            - Zone
            - GeoZone
          type: string
          readOnly: true
          x-ms-enum:
            name: BackupStorageRedundancy
            modelAsString: true
        requestedBackupStorageRedundancy:
          description: The storage account type to be used to store backups for this database.
          enum:
            - Geo
            - Local
            - Zone
            - GeoZone
          type: string
          x-ms-enum:
            name: BackupStorageRedundancy
            modelAsString: true
        minCapacity:
          format: double
          description: Minimal capacity that database will always have allocated, if not paused
          type: number
        pausedDate:
          format: date-time
          description: The date when database was paused by user configuration or action(ISO8601 format). Null if the database is ready.
          type: string
          readOnly: true
        resumedDate:
          format: date-time
          description: The date when database was resumed by user action or database login (ISO8601 format). Null if the database is paused.
          type: string
          readOnly: true
        maintenanceConfigurationId:
          description: Maintenance configuration id assigned to the database. This configuration defines the period when the maintenance updates will occur.
          type: string
        isLedgerOn:
          description: 'Whether or not this database is a ledger database, which means all tables in the database are ledger tables. Note: the value of this property cannot be changed after the database has been created.'
          type: boolean
        isInfraEncryptionEnabled:
          description: Infra encryption is enabled for this database.
          type: boolean
          readOnly: true
        federatedClientId:
          format: uuid
          description: The Client id used for cross tenant per database CMK scenario
          type: string
        keys:
          description: The resource ids of the user assigned identities to use
          type: object
          additionalProperties:
            $ref: '#/components/schemas/DatabaseKey'
        encryptionProtector:
          description: The azure key vault URI of the database if it's configured with per Database Customer Managed Keys.
          type: string
        preferredEnclaveType:
          description: Type of enclave requested on the database i.e. Default or VBS enclaves.
          enum:
            - Default
            - VBS
          type: string
          x-ms-enum:
            name: AlwaysEncryptedEnclaveType
            modelAsString: true
        useFreeLimit:
          description: Whether or not the database uses free monthly limits. Allowed on one database in a subscription.
          type: boolean
        freeLimitExhaustionBehavior:
          description: "Specifies the behavior when monthly free limits are exhausted for the free database.\r\n\r\nAutoPause: The database will be auto paused upon exhaustion of free limits for remainder of the month.\r\n\r\nBillForUsage: The database will continue to be online upon exhaustion of free limits and any overage will be billed."
          enum:
            - AutoPause
            - BillOverUsage
          type: string
          x-ms-enum:
            name: FreeLimitExhaustionBehavior
            modelAsString: true
        manualCutover:
          description: "Whether or not customer controlled manual cutover needs to be done during Update Database operation to Hyperscale tier.\r\n\r\nThis property is only applicable when scaling database from Business Critical/General Purpose/Premium/Standard tier to Hyperscale tier.\r\n\r\nWhen manualCutover is specified, the scaling operation will wait for user input to trigger cutover to Hyperscale database.\r\n\r\nTo trigger cutover, please provide 'performCutover' parameter when the Scaling operation is in Waiting state."
          type: boolean
        performCutover:
          description: "To trigger customer controlled manual cutover during the wait state while Scaling operation is in progress.\r\n\r\nThis property parameter is only applicable for scaling operations that are initiated along with 'manualCutover' parameter.\r\n\r\nThis property is only applicable when scaling database from Business Critical/General Purpose/Premium/Standard tier to Hyperscale tier is already in progress.\r\n\r\nWhen performCutover is specified, the scaling operation will trigger cutover and perform role-change to Hyperscale database."
          type: boolean
        encryptionProtectorAutoRotation:
          description: The flag to enable or disable auto rotation of database encryption protector AKV key.
          type: boolean
    DatabaseUserIdentity:
      description: Azure Active Directory identity configuration for a resource.
      type: object
      properties:
        principalId:
          format: uuid
          description: The Azure Active Directory principal id.
          type: string
          readOnly: true
        clientId:
          format: uuid
          description: The Azure Active Directory client id.
          type: string
          readOnly: true
    ExportDatabaseDefinition:
      description: Contains the information necessary to perform export database operation.
      required:
        - storageKeyType
        - storageKey
        - storageUri
        - administratorLogin
        - administratorLoginPassword
      type: object
      properties:
        storageKeyType:
          description: Storage key type.
          enum:
            - SharedAccessKey
            - StorageAccessKey
          type: string
          x-ms-enum:
            name: StorageKeyType
            modelAsString: true
          x-ms-mutability:
            - create
        storageKey:
          description: Storage key.
          type: string
          x-ms-mutability:
            - create
        storageUri:
          description: Storage Uri.
          type: string
          x-ms-mutability:
            - create
        administratorLogin:
          description: Administrator login name.
          type: string
          x-ms-mutability:
            - create
        administratorLoginPassword:
          description: Administrator login password.
          type: string
          x-ms-secret: true
          x-ms-mutability:
            - create
        authenticationType:
          description: Authentication type.
          type: string
          x-ms-mutability:
            - create
        networkIsolation:
          $ref: '#/components/schemas/NetworkIsolationSettings'
          description: Optional resource information to enable network isolation for request.
          x-ms-mutability:
            - create
    ImportExistingDatabaseDefinition:
      description: Contains the information necessary to perform import operation for existing database.
      required:
        - storageKeyType
        - storageKey
        - storageUri
        - administratorLogin
        - administratorLoginPassword
      type: object
      properties:
        storageKeyType:
          description: Storage key type.
          enum:
            - SharedAccessKey
            - StorageAccessKey
          type: string
          x-ms-enum:
            name: StorageKeyType
            modelAsString: true
          x-ms-mutability:
            - create
        storageKey:
          description: Storage key.
          type: string
          x-ms-mutability:
            - create
        storageUri:
          description: Storage Uri.
          type: string
          x-ms-mutability:
            - create
        administratorLogin:
          description: Administrator login name.
          type: string
          x-ms-mutability:
            - create
        administratorLoginPassword:
          description: Administrator login password.
          type: string
          x-ms-secret: true
          x-ms-mutability:
            - create
        authenticationType:
          description: Authentication type.
          type: string
          x-ms-mutability:
            - create
        networkIsolation:
          $ref: '#/components/schemas/NetworkIsolationSettings'
          description: Optional resource information to enable network isolation for request.
          x-ms-mutability:
            - create
    ResourceMoveDefinition:
      description: Contains the information necessary to perform a resource move (rename).
      required:
        - id
      type: object
      properties:
        id:
          description: The target ID for the resource
          type: string
    ReplicationLink:
      description: A replication link.
      properties:
        properties:
          $ref: '#/components/schemas/ReplicationLinkProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ReplicationLinkListResult:
      description: A list of replication links.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ReplicationLink'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ReplicationLinkProperties:
      description: Properties of a replication link.
      type: object
      properties:
        partnerServer:
          description: Resource partner server.
          type: string
          readOnly: true
        partnerDatabase:
          description: Resource partner database.
          type: string
          readOnly: true
        partnerDatabaseId:
          description: Resource partner database Id.
          type: string
          readOnly: true
        partnerLocation:
          description: Resource partner location.
          type: string
          readOnly: true
        role:
          description: Local replication role.
          enum:
            - Primary
            - Secondary
            - NonReadableSecondary
            - Source
            - Copy
          type: string
          readOnly: true
          x-ms-enum:
            name: ReplicationRole
            modelAsString: false
        partnerRole:
          description: Partner replication role.
          enum:
            - Primary
            - Secondary
            - NonReadableSecondary
            - Source
            - Copy
          type: string
          readOnly: true
          x-ms-enum:
            name: ReplicationRole
            modelAsString: false
        replicationMode:
          description: Replication mode.
          type: string
          readOnly: true
        startTime:
          format: date-time
          description: Time at which the link was created.
          type: string
          readOnly: true
        percentComplete:
          format: int32
          description: Seeding completion percentage for the link.
          type: integer
          readOnly: true
        replicationState:
          description: Replication state (PENDING, SEEDING, CATCHUP, SUSPENDED).
          enum:
            - PENDING
            - SEEDING
            - CATCH_UP
            - SUSPENDED
          type: string
          readOnly: true
          x-ms-enum:
            name: ReplicationState
            modelAsString: true
        isTerminationAllowed:
          description: Whether the user is currently allowed to terminate the link.
          type: boolean
          readOnly: true
        linkType:
          description: Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
          enum:
            - GEO
            - NAMED
            - STANDBY
          type: string
          x-ms-enum:
            name: ReplicationLinkType
            modelAsString: true
    ReplicationLinkUpdate:
      description: A replication link update request.
      properties:
        properties:
          $ref: '#/components/schemas/ReplicationLinkUpdateProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ReplicationLinkUpdateProperties:
      description: Properties of a replication link update.
      type: object
      properties:
        linkType:
          description: Link type (GEO, NAMED, STANDBY). Update operation does not support NAMED.
          enum:
            - GEO
            - NAMED
            - STANDBY
          type: string
          x-ms-enum:
            name: ReplicationLinkType
            modelAsString: true
    UpdateVirtualClusterDnsServersOperation:
      description: A refresh DNS servers operation.
      properties:
        properties:
          $ref: '#/components/schemas/VirtualClusterDnsServersProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    VirtualCluster:
      description: An Azure SQL virtual cluster.
      required:
        - location
      properties:
        location:
          description: Resource location.
          type: string
          x-ms-mutability:
            - read
            - create
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
        properties:
          $ref: '#/components/schemas/VirtualClusterProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    VirtualClusterDnsServersProperties:
      description: The properties of dns servers on virtual cluster.
      type: object
      properties:
        status:
          description: The status of the DNS refresh operation.
          enum:
            - Succeeded
            - Failed
            - InProgress
          type: string
          readOnly: true
          x-ms-enum:
            name: DNSRefreshOperationStatus
            modelAsString: true
    VirtualClusterListResult:
      description: A list of virtual clusters.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/VirtualCluster'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    VirtualClusterProperties:
      description: The properties of a virtual cluster.
      type: object
      properties:
        subnetId:
          description: Subnet resource ID for the virtual cluster.
          type: string
          readOnly: true
        version:
          description: Virtual cluster version.
          type: string
        childResources:
          description: List of resources in this virtual cluster.
          type: array
          items:
            type: string
          readOnly: true
    VirtualClusterUpdate:
      description: An update request for virtual cluster.
      properties:
        properties:
          $ref: '#/components/schemas/VirtualClusterProperties'
          description: Resource properties.
          x-ms-client-flatten: true
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
      type: object
    JobAgentListResult:
      description: A list of Azure SQL job agents.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/JobAgent'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    JobAgentProperties:
      description: Properties of a job agent.
      required:
        - databaseId
      type: object
      properties:
        databaseId:
          description: Resource ID of the database to store job metadata in.
          type: string
          x-ms-mutability:
            - read
            - create
        state:
          description: The state of the job agent.
          enum:
            - Creating
            - Ready
            - Updating
            - Deleting
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: JobAgentState
            modelAsString: true
    JobAgent:
      description: An Azure SQL job agent.
      required:
        - location
      properties:
        location:
          description: Resource location.
          type: string
          x-ms-mutability:
            - read
            - create
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
        sku:
          $ref: '#/components/schemas/Sku'
          description: The name and tier of the SKU.
        properties:
          $ref: '#/components/schemas/JobAgentProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    JobAgentUpdate:
      description: An update to an Azure SQL job agent.
      type: object
      properties:
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
    ManagedDatabaseAdvancedThreatProtection:
      description: A managed database Advanced Threat Protection.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of AdvancedThreatProtectionResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/AdvancedThreatProtectionProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedDatabaseAdvancedThreatProtectionListResult:
      description: A list of the managed database's Advanced Threat Protection settings.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedDatabaseAdvancedThreatProtection'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    CompleteDatabaseRestoreDefinition:
      description: Contains the information necessary to perform a complete database restore operation.
      required:
        - lastBackupName
      type: object
      properties:
        lastBackupName:
          description: The last backup name to apply
          type: string
    ManagedDatabase:
      description: A managed database resource.
      required:
        - location
      properties:
        location:
          description: Resource location.
          type: string
          x-ms-mutability:
            - read
            - create
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
        properties:
          $ref: '#/components/schemas/ManagedDatabaseProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedDatabaseListResult:
      description: A list of managed databases.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedDatabase'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ManagedDatabaseMoveDefinition:
      description: Contains the information necessary to perform a managed database move.
      required:
        - destinationManagedDatabaseId
      type: object
      properties:
        destinationManagedDatabaseId:
          description: The destination managed database ID
          type: string
          format: arm-id
    ManagedDatabaseProperties:
      description: The managed database's properties.
      type: object
      properties:
        collation:
          description: Collation of the managed database.
          type: string
          x-ms-mutability:
            - read
            - create
        status:
          description: Status of the database.
          enum:
            - Online
            - Offline
            - Shutdown
            - Creating
            - Inaccessible
            - Restoring
            - Updating
            - Stopping
            - Stopped
            - Starting
            - DbMoving
            - DbCopying
          type: string
          readOnly: true
          x-ms-enum:
            name: ManagedDatabaseStatus
            modelAsString: true
        creationDate:
          format: date-time
          description: Creation date of the database.
          type: string
          readOnly: true
        earliestRestorePoint:
          format: date-time
          description: Earliest restore point in time for point in time restore.
          type: string
          readOnly: true
        restorePointInTime:
          format: date-time
          description: Conditional. If createMode is PointInTimeRestore, this value is required. Specifies the point in time (ISO8601 format) of the source database that will be restored to create the new database.
          type: string
          x-ms-mutability:
            - create
        defaultSecondaryLocation:
          description: Geo paired region.
          type: string
          readOnly: true
        catalogCollation:
          description: Collation of the metadata catalog.
          enum:
            - DATABASE_DEFAULT
            - SQL_Latin1_General_CP1_CI_AS
          type: string
          x-ms-enum:
            name: CatalogCollationType
            modelAsString: true
          x-ms-mutability:
            - read
            - create
        createMode:
          description: 'Managed database create mode. PointInTimeRestore: Create a database by restoring a point in time backup of an existing database. SourceDatabaseName, SourceManagedInstanceName and PointInTime must be specified. RestoreExternalBackup: Create a database by restoring from external backup files. Collation, StorageContainerUri and StorageContainerSasToken must be specified. Recovery: Creates a database by restoring a geo-replicated backup. RecoverableDatabaseId must be specified as the recoverable database resource ID to restore. RestoreLongTermRetentionBackup: Create a database by restoring from a long term retention backup (longTermRetentionBackupResourceId required).'
          enum:
            - Default
            - RestoreExternalBackup
            - PointInTimeRestore
            - Recovery
            - RestoreLongTermRetentionBackup
          type: string
          x-ms-enum:
            name: ManagedDatabaseCreateMode
            modelAsString: true
          x-ms-mutability:
            - create
        storageContainerUri:
          description: Conditional. If createMode is RestoreExternalBackup, this value is required. Specifies the uri of the storage container where backups for this restore are stored.
          type: string
          x-ms-mutability:
            - create
        sourceDatabaseId:
          description: The resource identifier of the source database associated with create operation of this database.
          type: string
          format: arm-id
          x-ms-mutability:
            - create
        crossSubscriptionSourceDatabaseId:
          description: The resource identifier of the cross-subscription source database associated with create operation of this database.
          type: string
          format: arm-id
          x-ms-mutability:
            - create
        restorableDroppedDatabaseId:
          description: The restorable dropped database resource id to restore when creating this database.
          type: string
          format: arm-id
          x-ms-mutability:
            - create
        crossSubscriptionRestorableDroppedDatabaseId:
          description: The restorable cross-subscription dropped database resource id to restore when creating this database.
          type: string
          format: arm-id
          x-ms-mutability:
            - create
        storageContainerIdentity:
          description: Conditional. If createMode is RestoreExternalBackup, this value is used. Specifies the identity used for storage container authentication. Can be 'SharedAccessSignature' or 'ManagedIdentity'; if not specified 'SharedAccessSignature' is assumed.
          type: string
          x-ms-mutability:
            - create
        storageContainerSasToken:
          description: Conditional. If createMode is RestoreExternalBackup and storageContainerIdentity is not ManagedIdentity, this value is required. Specifies the storage container sas token.
          type: string
          x-ms-mutability:
            - create
        failoverGroupId:
          description: Instance Failover Group resource identifier that this managed database belongs to.
          type: string
          readOnly: true
        recoverableDatabaseId:
          description: The resource identifier of the recoverable database associated with create operation of this database.
          type: string
          format: arm-id
          x-ms-mutability:
            - create
        longTermRetentionBackupResourceId:
          description: The name of the Long Term Retention backup to be used for restore of this managed database.
          type: string
          format: arm-id
          x-ms-mutability:
            - create
        autoCompleteRestore:
          description: Whether to auto complete restore of this managed database.
          type: boolean
          x-ms-mutability:
            - create
        lastBackupName:
          description: Last backup file name for restore of this managed database.
          type: string
          x-ms-mutability:
            - create
        crossSubscriptionTargetManagedInstanceId:
          description: Target managed instance id used in cross-subscription restore.
          type: string
          x-ms-mutability:
            - create
        isLedgerOn:
          description: 'Whether or not this database is a ledger database, which means all tables in the database are ledger tables. Note: the value of this property cannot be changed after the database has been created.'
          type: boolean
          x-ms-mutability:
            - read
            - create
    ManagedDatabaseStartMoveDefinition:
      description: Contains the information necessary to start a managed database move.
      required:
        - destinationManagedDatabaseId
      type: object
      properties:
        destinationManagedDatabaseId:
          description: The destination managed database ID
          type: string
          format: arm-id
        operationMode:
          description: The move operation mode.
          default: Move
          enum:
            - Move
            - Copy
          type: string
          x-ms-enum:
            name: MoveOperationMode
            modelAsString: true
    ManagedDatabaseUpdate:
      description: An managed database update.
      properties:
        properties:
          $ref: '#/components/schemas/ManagedDatabaseProperties'
          description: Resource properties.
          x-ms-client-flatten: true
        tags:
          description: Resource tags.
          type: object
          additionalProperties:
            type: string
      type: object
    LocationCapabilities:
      description: The location capability.
      type: object
      properties:
        name:
          description: The location name.
          type: string
          readOnly: true
        supportedServerVersions:
          description: The list of supported server versions.
          type: array
          items:
            $ref: '#/components/schemas/ServerVersionCapability'
          readOnly: true
        supportedManagedInstanceVersions:
          description: The list of supported managed instance versions.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceVersionCapability'
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    ServerVersionCapability:
      description: The server capability
      type: object
      properties:
        name:
          description: The server version name.
          type: string
          readOnly: true
        supportedEditions:
          description: The list of supported database editions.
          type: array
          items:
            $ref: '#/components/schemas/EditionCapability'
          readOnly: true
        supportedElasticPoolEditions:
          description: The list of supported elastic pool editions.
          type: array
          items:
            $ref: '#/components/schemas/ElasticPoolEditionCapability'
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    ManagedInstanceVersionCapability:
      description: The managed instance capability
      type: object
      properties:
        name:
          description: The server version name.
          type: string
          readOnly: true
        supportedEditions:
          description: The list of supported managed instance editions.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceEditionCapability'
          readOnly: true
        supportedInstancePoolEditions:
          description: The list of supported instance pool editions.
          type: array
          items:
            $ref: '#/components/schemas/InstancePoolEditionCapability'
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    EditionCapability:
      description: The edition capability.
      type: object
      properties:
        name:
          description: The database edition name.
          type: string
          readOnly: true
        supportedServiceLevelObjectives:
          description: The list of supported service objectives for the edition.
          type: array
          items:
            $ref: '#/components/schemas/ServiceObjectiveCapability'
          readOnly: true
        zoneRedundant:
          description: Whether or not zone redundancy is supported for the edition.
          type: boolean
          readOnly: true
        readScale:
          $ref: '#/components/schemas/ReadScaleCapability'
          description: The read scale capability for the edition.
          readOnly: true
        supportedStorageCapabilities:
          description: The list of supported storage capabilities for this edition
          type: array
          items:
            $ref: '#/components/schemas/StorageCapability'
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    ElasticPoolEditionCapability:
      description: The elastic pool edition capability.
      type: object
      properties:
        name:
          description: The elastic pool edition name.
          type: string
          readOnly: true
        supportedElasticPoolPerformanceLevels:
          description: The list of supported elastic pool DTU levels for the edition.
          type: array
          items:
            $ref: '#/components/schemas/ElasticPoolPerformanceLevelCapability'
          readOnly: true
        zoneRedundant:
          description: Whether or not zone redundancy is supported for the edition.
          type: boolean
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    ManagedInstanceEditionCapability:
      description: The managed server capability
      type: object
      properties:
        name:
          description: The managed server version name.
          type: string
          readOnly: true
        supportedFamilies:
          description: The supported families.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceFamilyCapability'
          readOnly: true
        supportedStorageCapabilities:
          description: The list of supported storage capabilities for this edition
          type: array
          items:
            $ref: '#/components/schemas/StorageCapability'
          readOnly: true
        zoneRedundant:
          description: Whether or not zone redundancy is supported for the edition.
          type: boolean
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    InstancePoolEditionCapability:
      description: The instance pool capability
      type: object
      properties:
        name:
          description: The instance pool version name.
          type: string
          readOnly: true
        supportedFamilies:
          description: The supported families.
          type: array
          items:
            $ref: '#/components/schemas/InstancePoolFamilyCapability'
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    ServiceObjectiveCapability:
      description: The service objectives capability.
      type: object
      properties:
        id:
          format: uuid
          description: The unique ID of the service objective.
          type: string
          readOnly: true
        name:
          description: The service objective name.
          type: string
          readOnly: true
        supportedMaxSizes:
          description: The list of supported maximum database sizes.
          type: array
          items:
            $ref: '#/components/schemas/MaxSizeRangeCapability'
          readOnly: true
        performanceLevel:
          $ref: '#/components/schemas/PerformanceLevelCapability'
          description: The performance level.
          readOnly: true
        sku:
          $ref: '#/components/schemas/Sku'
          description: The sku.
          readOnly: true
        supportedLicenseTypes:
          description: List of supported license types.
          type: array
          items:
            $ref: '#/components/schemas/LicenseTypeCapability'
          readOnly: true
        includedMaxSize:
          $ref: '#/components/schemas/MaxSizeCapability'
          description: The included (free) max size.
          readOnly: true
        zoneRedundant:
          description: Whether or not zone redundancy is supported for the service objective.
          type: boolean
          readOnly: true
        supportedAutoPauseDelay:
          $ref: '#/components/schemas/AutoPauseDelayTimeRange'
          description: Supported time range for auto pause delay
          readOnly: true
        supportedMinCapacities:
          description: List of supported min capacities
          type: array
          items:
            $ref: '#/components/schemas/MinCapacityCapability'
          readOnly: true
        computeModel:
          description: The compute model
          type: string
          readOnly: true
        supportedMaintenanceConfigurations:
          description: List of supported maintenance configurations
          type: array
          items:
            $ref: '#/components/schemas/MaintenanceConfigurationCapability'
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    ReadScaleCapability:
      description: The read scale capability.
      type: object
      properties:
        maxNumberOfReplicas:
          format: int32
          description: The maximum number of read scale replicas.
          type: integer
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    StorageCapability:
      description: The storage account type capability.
      type: object
      properties:
        storageAccountType:
          description: The storage account type for the database's backups.
          enum:
            - GRS
            - LRS
            - ZRS
          type: string
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    ElasticPoolPerformanceLevelCapability:
      description: The Elastic Pool performance level capability.
      type: object
      properties:
        performanceLevel:
          $ref: '#/components/schemas/PerformanceLevelCapability'
          description: The performance level for the pool.
          readOnly: true
        sku:
          $ref: '#/components/schemas/Sku'
          description: The sku.
          readOnly: true
        supportedLicenseTypes:
          description: List of supported license types.
          type: array
          items:
            $ref: '#/components/schemas/LicenseTypeCapability'
          readOnly: true
        maxDatabaseCount:
          format: int32
          description: The maximum number of databases supported.
          type: integer
          readOnly: true
        includedMaxSize:
          $ref: '#/components/schemas/MaxSizeCapability'
          description: The included (free) max size for this performance level.
          readOnly: true
        supportedMaxSizes:
          description: The list of supported max sizes.
          type: array
          items:
            $ref: '#/components/schemas/MaxSizeRangeCapability'
          readOnly: true
        supportedPerDatabaseMaxSizes:
          description: The list of supported per database max sizes.
          type: array
          items:
            $ref: '#/components/schemas/MaxSizeRangeCapability'
          readOnly: true
        supportedPerDatabaseMaxPerformanceLevels:
          description: The list of supported per database max performance levels.
          type: array
          items:
            $ref: '#/components/schemas/ElasticPoolPerDatabaseMaxPerformanceLevelCapability'
          readOnly: true
        zoneRedundant:
          description: Whether or not zone redundancy is supported for the performance level.
          type: boolean
          readOnly: true
        supportedMaintenanceConfigurations:
          description: List of supported maintenance configurations
          type: array
          items:
            $ref: '#/components/schemas/MaintenanceConfigurationCapability'
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    ManagedInstanceFamilyCapability:
      description: The managed server family capability.
      type: object
      properties:
        name:
          description: Family name.
          type: string
          readOnly: true
        sku:
          description: SKU name.
          type: string
          readOnly: true
        supportedLicenseTypes:
          description: List of supported license types.
          type: array
          items:
            $ref: '#/components/schemas/LicenseTypeCapability'
          readOnly: true
        supportedVcoresValues:
          description: List of supported virtual cores values.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceVcoresCapability'
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    InstancePoolFamilyCapability:
      description: The instance pool family capability.
      type: object
      properties:
        name:
          description: Family name.
          type: string
          readOnly: true
        supportedLicenseTypes:
          description: List of supported license types.
          type: array
          items:
            $ref: '#/components/schemas/LicenseTypeCapability'
          readOnly: true
        supportedVcoresValues:
          description: List of supported virtual cores values.
          type: array
          items:
            $ref: '#/components/schemas/InstancePoolVcoresCapability'
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    MaxSizeRangeCapability:
      description: The maximum size range capability.
      type: object
      properties:
        minValue:
          $ref: '#/components/schemas/MaxSizeCapability'
          description: Minimum value.
          readOnly: true
        maxValue:
          $ref: '#/components/schemas/MaxSizeCapability'
          description: Maximum value.
          readOnly: true
        scaleSize:
          $ref: '#/components/schemas/MaxSizeCapability'
          description: Scale/step size for discrete values between the minimum value and the maximum value.
          readOnly: true
        logSize:
          $ref: '#/components/schemas/LogSizeCapability'
          description: Size of transaction log.
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    PerformanceLevelCapability:
      description: The performance level capability.
      type: object
      properties:
        value:
          format: double
          description: Performance level value.
          type: number
          readOnly: true
        unit:
          description: Unit type used to measure performance level.
          enum:
            - DTU
            - VCores
          type: string
          readOnly: true
          x-ms-enum:
            name: PerformanceLevelUnit
            modelAsString: true
    LicenseTypeCapability:
      description: The license type capability
      type: object
      properties:
        name:
          description: License type identifier.
          type: string
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    MaxSizeCapability:
      description: The maximum size capability.
      type: object
      properties:
        limit:
          format: int32
          description: The maximum size limit (see 'unit' for the units).
          type: integer
          readOnly: true
        unit:
          description: The units that the limit is expressed in.
          enum:
            - Megabytes
            - Gigabytes
            - Terabytes
            - Petabytes
          type: string
          readOnly: true
          x-ms-enum:
            name: MaxSizeUnit
            modelAsString: true
    AutoPauseDelayTimeRange:
      description: Supported auto pause delay time range
      type: object
      properties:
        minValue:
          format: int32
          description: Minimum value
          type: integer
          readOnly: true
        maxValue:
          format: int32
          description: Maximum value
          type: integer
          readOnly: true
        stepSize:
          format: int32
          description: Step value for discrete values between the minimum value and the maximum value.
          type: integer
          readOnly: true
        default:
          format: int32
          description: Default value is no value is provided
          type: integer
          readOnly: true
        unit:
          description: Unit of time that delay is expressed in
          enum:
            - Minutes
          type: string
          readOnly: true
          x-ms-enum:
            name: PauseDelayTimeUnit
            modelAsString: true
        doNotPauseValue:
          format: int32
          description: Value that is used to not pause (infinite delay before pause)
          type: integer
          readOnly: true
    MinCapacityCapability:
      description: The min capacity capability
      type: object
      properties:
        value:
          format: double
          description: Min capacity value
          type: number
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    MaintenanceConfigurationCapability:
      description: The maintenance configuration capability
      type: object
      properties:
        name:
          description: Maintenance configuration name
          type: string
          readOnly: true
        zoneRedundant:
          description: Whether or not zone redundancy is supported for the maintenance configuration.
          type: boolean
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    ElasticPoolPerDatabaseMaxPerformanceLevelCapability:
      description: The max per-database performance level capability.
      type: object
      properties:
        limit:
          format: double
          description: The maximum performance level per database.
          type: number
          readOnly: true
        unit:
          description: Unit type used to measure performance level.
          enum:
            - DTU
            - VCores
          type: string
          readOnly: true
          x-ms-enum:
            name: PerformanceLevelUnit
            modelAsString: true
        supportedPerDatabaseMinPerformanceLevels:
          description: The list of supported min database performance levels.
          type: array
          items:
            $ref: '#/components/schemas/ElasticPoolPerDatabaseMinPerformanceLevelCapability'
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    ManagedInstanceVcoresCapability:
      description: The managed instance virtual cores capability.
      type: object
      properties:
        name:
          description: The virtual cores identifier.
          type: string
          readOnly: true
        value:
          format: int32
          description: The virtual cores value.
          type: integer
          readOnly: true
        includedMaxSize:
          $ref: '#/components/schemas/MaxSizeCapability'
          description: Included size.
          readOnly: true
        supportedStorageSizes:
          description: Storage size ranges.
          type: array
          items:
            $ref: '#/components/schemas/MaxSizeRangeCapability'
          readOnly: true
        instancePoolSupported:
          description: True if this service objective is supported for managed instances in an instance pool.
          type: boolean
          readOnly: true
        standaloneSupported:
          description: True if this service objective is supported for standalone managed instances.
          type: boolean
          readOnly: true
        supportedMaintenanceConfigurations:
          description: List of supported maintenance configurations
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceMaintenanceConfigurationCapability'
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    InstancePoolVcoresCapability:
      description: The managed instance virtual cores capability.
      type: object
      properties:
        name:
          description: The virtual cores identifier.
          type: string
          readOnly: true
        value:
          format: int32
          description: The virtual cores value.
          type: integer
          readOnly: true
        storageLimit:
          $ref: '#/components/schemas/MaxSizeCapability'
          description: Storage limit.
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    LogSizeCapability:
      description: The log size capability.
      type: object
      properties:
        limit:
          format: int32
          description: The log size limit (see 'unit' for the units).
          type: integer
          readOnly: true
        unit:
          description: The units that the limit is expressed in.
          enum:
            - Megabytes
            - Gigabytes
            - Terabytes
            - Petabytes
            - Percent
          type: string
          readOnly: true
          x-ms-enum:
            name: LogSizeUnit
            modelAsString: true
    ElasticPoolPerDatabaseMinPerformanceLevelCapability:
      description: The minimum per-database performance level capability.
      type: object
      properties:
        limit:
          format: double
          description: The minimum performance level per database.
          type: number
          readOnly: true
        unit:
          description: Unit type used to measure performance level.
          enum:
            - DTU
            - VCores
          type: string
          readOnly: true
          x-ms-enum:
            name: PerformanceLevelUnit
            modelAsString: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    ManagedInstanceMaintenanceConfigurationCapability:
      description: The maintenance configuration capability
      type: object
      properties:
        name:
          description: Maintenance configuration name
          type: string
          readOnly: true
        status:
          description: The status of the capability.
          enum:
            - Visible
            - Available
            - Default
            - Disabled
          type: string
          readOnly: true
          x-ms-enum:
            name: CapabilityStatus
            modelAsString: false
        reason:
          description: The reason for the capability not being available.
          type: string
    ManagedInstanceAzureADOnlyAuthProperties:
      description: Properties of a active directory only authentication for Managed Instance.
      required:
        - azureADOnlyAuthentication
      type: object
      properties:
        azureADOnlyAuthentication:
          description: Azure Active Directory only Authentication enabled.
          type: boolean
    ManagedInstanceAzureADOnlyAuthentication:
      description: Azure Active Directory only authentication.
      properties:
        properties:
          $ref: '#/components/schemas/ManagedInstanceAzureADOnlyAuthProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedInstanceAzureADOnlyAuthListResult:
      description: A list of active directory only authentications.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstanceAzureADOnlyAuthentication'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ServerKeyListResult:
      description: A list of server keys.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/ServerKey'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    ServerKeyProperties:
      description: Properties for a server key execution.
      required:
        - serverKeyType
      type: object
      properties:
        subregion:
          description: Subregion of the server key.
          type: string
          readOnly: true
        serverKeyType:
          description: The server key type like 'ServiceManaged', 'AzureKeyVault'.
          enum:
            - ServiceManaged
            - AzureKeyVault
          type: string
          x-ms-enum:
            name: ServerKeyType
            modelAsString: true
          x-ms-mutability:
            - create
        uri:
          description: The URI of the server key. If the ServerKeyType is AzureKeyVault, then the URI is required.
          type: string
          x-ms-mutability:
            - create
        thumbprint:
          description: Thumbprint of the server key.
          type: string
          readOnly: true
        creationDate:
          format: date-time
          description: The server key creation date.
          type: string
          readOnly: true
        autoRotationEnabled:
          description: Key auto rotation opt-in flag. Either true or false.
          type: boolean
          readOnly: true
    ServerKey:
      description: A server key.
      properties:
        kind:
          description: Kind of encryption protector. This is metadata used for the Azure portal experience.
          type: string
          readOnly: true
        location:
          description: Resource location.
          type: string
          readOnly: true
        properties:
          $ref: '#/components/schemas/ServerKeyProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    EndpointCertificate:
      description: Certificate used on an endpoint on the Managed Instance.
      properties:
        properties:
          $ref: '#/components/schemas/EndpointCertificateProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    EndpointCertificateListResult:
      description: A list of endpoint certificates on the target instance.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/EndpointCertificate'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    EndpointCertificateProperties:
      description: The properties of an endpoint certificate.
      type: object
      properties:
        publicBlob:
          description: The certificate public blob
          type: string
    QueryProperties:
      description: Properties of a database query.
      type: object
      properties:
        queryText:
          description: Query text.
          type: string
    ManagedInstanceQuery:
      description: Database query.
      properties:
        properties:
          $ref: '#/components/schemas/QueryProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    ManagedInstanceQueryStatistics:
      description: Execution statistics for one particular query
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/QueryStatistics'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    QueryStatistics:
      properties:
        properties:
          $ref: '#/components/schemas/QueryStatisticsProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    AutomaticTuningServerProperties:
      description: Server-level Automatic Tuning properties.
      type: object
      properties:
        desiredState:
          description: Automatic tuning desired state.
          enum:
            - Custom
            - Auto
            - Unspecified
          type: string
          x-ms-enum:
            name: AutomaticTuningServerMode
            modelAsString: false
        actualState:
          description: Automatic tuning actual state.
          enum:
            - Custom
            - Auto
            - Unspecified
          type: string
          readOnly: true
          x-ms-enum:
            name: AutomaticTuningServerMode
            modelAsString: false
        options:
          description: Automatic tuning options definition.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AutomaticTuningServerOptions'
    AutomaticTuningServerOptions:
      description: Automatic tuning properties for individual advisors.
      type: object
      properties:
        desiredState:
          description: Automatic tuning option desired state.
          enum:
            - 'Off'
            - 'On'
            - Default
          type: string
          x-ms-enum:
            name: AutomaticTuningOptionModeDesired
            modelAsString: false
        actualState:
          description: Automatic tuning option actual state.
          enum:
            - 'Off'
            - 'On'
          type: string
          readOnly: true
          x-ms-enum:
            name: AutomaticTuningOptionModeActual
            modelAsString: false
        reasonCode:
          format: int32
          description: Reason code if desired and actual state are different.
          type: integer
          readOnly: true
        reasonDesc:
          description: Reason description if desired and actual state are different.
          enum:
            - Default
            - Disabled
            - AutoConfigured
          type: string
          readOnly: true
          x-ms-enum:
            name: AutomaticTuningServerReason
            modelAsString: false
    ServerAutomaticTuning:
      description: Server-level Automatic Tuning.
      properties:
        properties:
          $ref: '#/components/schemas/AutomaticTuningServerProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    JobListResult:
      description: A list of jobs.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/Job'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    JobProperties:
      description: Properties of a job.
      type: object
      properties:
        description:
          description: User-defined description of the job.
          default: ''
          type: string
        version:
          format: int32
          description: The job version number.
          type: integer
          readOnly: true
        schedule:
          $ref: '#/components/schemas/JobSchedule'
          description: Schedule properties of the job.
    JobSchedule:
      description: Scheduling properties of a job.
      type: object
      properties:
        startTime:
          format: date-time
          description: Schedule start time.
          default: '0001-01-01T00:00:00+00:00'
          type: string
        endTime:
          format: date-time
          description: Schedule end time.
          default: '9999-12-31T11:59:59+00:00'
          type: string
        type:
          description: Schedule interval type
          default: Once
          enum:
            - Once
            - Recurring
          type: string
          x-ms-enum:
            name: JobScheduleType
            modelAsString: false
        enabled:
          description: Whether or not the schedule is enabled.
          type: boolean
        interval:
          description: Value of the schedule's recurring interval, if the ScheduleType is recurring. ISO8601 duration format.
          type: string
    Job:
      description: A job.
      properties:
        properties:
          $ref: '#/components/schemas/JobProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    LogicalDatabaseTransparentDataEncryption:
      description: A logical database transparent data encryption state.
      properties:
        properties:
          $ref: '#/components/schemas/TransparentDataEncryptionProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    LogicalDatabaseTransparentDataEncryptionListResult:
      description: A list of transparent data encryptions
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/LogicalDatabaseTransparentDataEncryption'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    TransparentDataEncryptionProperties:
      description: Properties of a transparent data encryption.
      required:
        - state
      type: object
      properties:
        state:
          description: Specifies the state of the transparent data encryption.
          enum:
            - Enabled
            - Disabled
          type: string
          x-ms-enum:
            name: TransparentDataEncryptionState
            modelAsString: false
    InstanceFailoverGroup:
      description: An instance failover group.
      properties:
        properties:
          $ref: '#/components/schemas/InstanceFailoverGroupProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    InstanceFailoverGroupListResult:
      description: A list of instance failover groups.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/InstanceFailoverGroup'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    InstanceFailoverGroupProperties:
      description: Properties of a instance failover group.
      required:
        - readWriteEndpoint
        - partnerRegions
        - managedInstancePairs
      type: object
      properties:
        secondaryType:
          description: Type of the geo-secondary instance. Set 'Standby' if the instance is used as a DR option only.
          enum:
            - Geo
            - Standby
          type: string
          x-ms-enum:
            name: SecondaryInstanceType
            modelAsString: true
        readWriteEndpoint:
          $ref: '#/components/schemas/InstanceFailoverGroupReadWriteEndpoint'
          description: Read-write endpoint of the failover group instance.
        readOnlyEndpoint:
          $ref: '#/components/schemas/InstanceFailoverGroupReadOnlyEndpoint'
          description: Read-only endpoint of the failover group instance.
        replicationRole:
          description: Local replication role of the failover group instance.
          enum:
            - Primary
            - Secondary
          type: string
          readOnly: true
          x-ms-enum:
            name: InstanceFailoverGroupReplicationRole
            modelAsString: true
        replicationState:
          description: Replication state of the failover group instance.
          type: string
          readOnly: true
        partnerRegions:
          description: Partner region information for the failover group.
          type: array
          items:
            $ref: '#/components/schemas/PartnerRegionInfo'
          x-ms-mutability:
            - read
            - create
        managedInstancePairs:
          description: List of managed instance pairs in the failover group.
          type: array
          items:
            $ref: '#/components/schemas/ManagedInstancePairInfo'
    InstanceFailoverGroupReadOnlyEndpoint:
      description: Read-only endpoint of the failover group instance.
      type: object
      properties:
        failoverPolicy:
          description: Failover policy of the read-only endpoint for the failover group.
          enum:
            - Disabled
            - Enabled
          type: string
          x-ms-enum:
            name: ReadOnlyEndpointFailoverPolicy
            modelAsString: true
    InstanceFailoverGroupReadWriteEndpoint:
      description: Read-write endpoint of the failover group instance.
      required:
        - failoverPolicy
      type: object
      properties:
        failoverPolicy:
          description: Failover policy of the read-write endpoint for the failover group. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
          enum:
            - Manual
            - Automatic
          type: string
          x-ms-enum:
            name: ReadWriteEndpointFailoverPolicy
            modelAsString: true
        failoverWithDataLossGracePeriodMinutes:
          format: int32
          description: Grace period before failover with data loss is attempted for the read-write endpoint. If failoverPolicy is Automatic then failoverWithDataLossGracePeriodMinutes is required.
          type: integer
    ManagedInstancePairInfo:
      description: Pairs of Managed Instances in the failover group.
      type: object
      properties:
        primaryManagedInstanceId:
          description: Id of Primary Managed Instance in pair.
          type: string
        partnerManagedInstanceId:
          description: Id of Partner Managed Instance in pair.
          type: string
    PartnerRegionInfo:
      description: Partner region information for the failover group.
      type: object
      properties:
        location:
          description: Geo location of the partner managed instances.
          type: string
        replicationRole:
          description: Replication role of the partner managed instances.
          enum:
            - Primary
            - Secondary
          type: string
          readOnly: true
          x-ms-enum:
            name: InstanceFailoverGroupReplicationRole
            modelAsString: true
    UsageListResult:
      description: A list of usages.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/Usage'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    Usage:
      description: ARM usage.
      type: object
      properties:
        id:
          description: Resource ID.
          type: string
          readOnly: true
        name:
          $ref: '#/components/schemas/Name'
          description: Resource name.
          readOnly: true
        type:
          description: Resource type.
          type: string
          readOnly: true
        unit:
          description: Usage unit.
          type: string
          readOnly: true
        currentValue:
          format: int32
          description: Usage current value.
          type: integer
          readOnly: true
        limit:
          format: int32
          description: Usage limit.
          type: integer
          readOnly: true
        requestedLimit:
          format: int32
          description: Usage requested limit.
          type: integer
          readOnly: true
    Name:
      description: ARM Usage Name
      type: object
      properties:
        value:
          description: Usage name value
          type: string
        localizedValue:
          description: Usage name localized value.
          type: string
    DataMaskingPolicyProperties:
      properties:
        dataMaskingState:
          type: string
          description: The state of the data masking policy.
          enum:
            - Disabled
            - Enabled
          x-ms-enum:
            modelAsString: false
            name: DataMaskingState
        exemptPrincipals:
          type: string
          description: The list of the exempt principals. Specifies the semicolon-separated list of database users for which the data masking policy does not apply. The specified users receive data results without masking for all of the database queries.
        applicationPrincipals:
          type: string
          description: The list of the application principals. This is a legacy parameter and is no longer used.
          readOnly: true
        maskingLevel:
          type: string
          description: The masking level. This is a legacy parameter and is no longer used.
          readOnly: true
      required:
        - dataMaskingState
      description: The properties of a database data masking policy.
      type: object
    DataMaskingPolicy:
      description: Represents a database data masking policy.
      properties:
        properties:
          x-ms-client-flatten: true
          $ref: '#/components/schemas/DataMaskingPolicyProperties'
          description: The properties of the data masking policy.
        location:
          type: string
          readOnly: true
          description: The location of the data masking policy.
        kind:
          type: string
          readOnly: true
          description: The kind of data masking policy. Metadata, used for Azure portal.
      type: object
    DataMaskingRuleProperties:
      properties:
        id:
          type: string
          description: The rule Id.
          readOnly: true
        aliasName:
          type: string
          description: The alias name. This is a legacy parameter and is no longer used.
        ruleState:
          type: string
          description: The rule state. Used to delete a rule. To delete an existing rule, specify the schemaName, tableName, columnName, maskingFunction, and specify ruleState as disabled. However, if the rule doesn't already exist, the rule will be created with ruleState set to enabled, regardless of the provided value of ruleState.
          enum:
            - Disabled
            - Enabled
          x-ms-enum:
            modelAsString: false
            name: DataMaskingRuleState
        schemaName:
          type: string
          description: The schema name on which the data masking rule is applied.
        tableName:
          type: string
          description: The table name on which the data masking rule is applied.
        columnName:
          type: string
          description: The column name on which the data masking rule is applied.
        maskingFunction:
          type: string
          description: The masking function that is used for the data masking rule.
          enum:
            - Default
            - CCN
            - Email
            - Number
            - SSN
            - Text
          x-ms-enum:
            modelAsString: false
            name: DataMaskingFunction
        numberFrom:
          type: string
          description: The numberFrom property of the masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.
        numberTo:
          type: string
          description: The numberTo property of the data masking rule. Required if maskingFunction is set to Number, otherwise this parameter will be ignored.
        prefixSize:
          type: string
          description: If maskingFunction is set to Text, the number of characters to show unmasked in the beginning of the string. Otherwise, this parameter will be ignored.
        suffixSize:
          type: string
          description: If maskingFunction is set to Text, the number of characters to show unmasked at the end of the string. Otherwise, this parameter will be ignored.
        replacementString:
          type: string
          description: If maskingFunction is set to Text, the character to use for masking the unexposed part of the string. Otherwise, this parameter will be ignored.
      required:
        - maskingFunction
        - schemaName
        - tableName
        - columnName
      description: The properties of a database data masking rule.
      type: object
    DataMaskingRule:
      description: Represents a database data masking rule.
      properties:
        properties:
          x-ms-client-flatten: true
          $ref: '#/components/schemas/DataMaskingRuleProperties'
          description: The properties of the resource.
        location:
          type: string
          readOnly: true
          description: The location of the data masking rule.
        kind:
          type: string
          readOnly: true
          description: The kind of Data Masking Rule. Metadata, used for Azure portal.
      type: object
    DataMaskingRuleListResult:
      properties:
        value:
          type: array
          items:
            $ref: '#/components/schemas/DataMaskingRule'
          description: The list of database data masking rules.
      description: The response to a list data masking rules request.
      type: object
    DatabaseAdvancedThreatProtection:
      description: A database Advanced Threat Protection.
      properties:
        systemData:
          $ref: '#/components/schemas/systemData'
          description: SystemData of AdvancedThreatProtectionResource.
          readOnly: true
        properties:
          $ref: '#/components/schemas/AdvancedThreatProtectionProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    DatabaseAdvancedThreatProtectionListResult:
      description: A list of the database's Advanced Threat Protection configurations.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/DatabaseAdvancedThreatProtection'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
    WorkloadGroupProperties:
      description: Workload group definition. For more information look at sys.workload_management_workload_groups (DMV).
      required:
        - minResourcePercent
        - maxResourcePercent
        - minResourcePercentPerRequest
      type: object
      properties:
        minResourcePercent:
          format: int32
          description: The workload group minimum percentage resource.
          type: integer
        maxResourcePercent:
          format: int32
          description: The workload group cap percentage resource.
          type: integer
        minResourcePercentPerRequest:
          format: double
          description: The workload group request minimum grant percentage.
          type: number
        maxResourcePercentPerRequest:
          format: double
          description: The workload group request maximum grant percentage.
          type: number
        importance:
          description: The workload group importance level.
          type: string
        queryExecutionTimeout:
          format: int32
          description: The workload group query execution timeout.
          type: integer
    WorkloadGroup:
      description: Workload group operations for a data warehouse
      properties:
        properties:
          $ref: '#/components/schemas/WorkloadGroupProperties'
          description: Resource properties.
          x-ms-client-flatten: true
      type: object
    WorkloadGroupListResult:
      description: A list of workload groups.
      type: object
      properties:
        value:
          description: Array of results.
          type: array
          items:
            $ref: '#/components/schemas/WorkloadGroup'
          readOnly: true
        nextLink:
          description: Link to retrieve next page of results.
          type: string
          readOnly: true
  x-stackQL-resources:
    databases_metrics:
      id: azure.sql.databases_metrics
      name: databases_metrics
      title: databases_metrics
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1metrics?api-version=2014-04-01/get'
            operationId: DatabasesMetrics_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: MetricListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/databases_metrics/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    databases_metric_definitions:
      id: azure.sql.databases_metric_definitions
      name: databases_metric_definitions
      title: databases_metric_definitions
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1metricDefinitions?api-version=2014-04-01/get'
            operationId: DatabasesMetricDefinitions_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: MetricDefinitionListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/databases_metric_definitions/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    elastic_pools_metrics:
      id: azure.sql.elastic_pools_metrics
      name: elastic_pools_metrics
      title: elastic_pools_metrics
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1elasticPools~1{elasticPoolName}~1metrics?api-version=2014-04-01/get'
            operationId: ElasticPoolsMetrics_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: MetricListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/elastic_pools_metrics/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    elastic_pools_metric_definitions:
      id: azure.sql.elastic_pools_metric_definitions
      name: elastic_pools_metric_definitions
      title: elastic_pools_metric_definitions
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1elasticPools~1{elasticPoolName}~1metricDefinitions?api-version=2014-04-01/get'
            operationId: ElasticPoolsMetricDefinitions_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: MetricDefinitionListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/elastic_pools_metric_definitions/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    instance_pools:
      id: azure.sql.instance_pools
      name: instance_pools
      title: instance_pools
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1instancePools?api-version=2023-05-01-preview/get'
            operationId: InstancePools_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: InstancePoolListResult
            objectKey: $.value
        list_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1instancePools?api-version=2023-05-01-preview/get'
            operationId: InstancePools_ListByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: InstancePoolListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1instancePools~1{instancePoolName}?api-version=2023-05-01-preview/get'
            operationId: InstancePools_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: InstancePool
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1instancePools~1{instancePoolName}?api-version=2023-05-01-preview/put'
            operationId: InstancePools_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: InstancePool
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1instancePools~1{instancePoolName}?api-version=2023-05-01-preview/delete'
            operationId: InstancePools_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1instancePools~1{instancePoolName}?api-version=2023-05-01-preview/patch'
            operationId: InstancePools_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: InstancePool
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/instance_pools/methods/get'
          - $ref: '#/components/x-stackQL-resources/instance_pools/methods/list_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/instance_pools/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/instance_pools/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/instance_pools/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/instance_pools/methods/delete'
    elastic_pool_operations:
      id: azure.sql.elastic_pool_operations
      name: elastic_pool_operations
      title: elastic_pool_operations
      methods:
        cancel:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1elasticPools~1{elasticPoolName}~1operations~1{operationId}~1cancel?api-version=2020-11-01-preview/post'
            operationId: ElasticPoolOperations_Cancel
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_elastic_pool:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1elasticPools~1{elasticPoolName}~1operations?api-version=2020-11-01-preview/get'
            operationId: ElasticPoolOperations_ListByElasticPool
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ElasticPoolOperationListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/elastic_pool_operations/methods/list_by_elastic_pool'
        insert: []
        update: []
        replace: []
        delete: []
    failover_groups:
      id: azure.sql.failover_groups
      name: failover_groups
      title: failover_groups
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1failoverGroups?api-version=2023-05-01-preview/get'
            operationId: FailoverGroups_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: FailoverGroupListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1failoverGroups~1{failoverGroupName}?api-version=2023-05-01-preview/get'
            operationId: FailoverGroups_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: FailoverGroup
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1failoverGroups~1{failoverGroupName}?api-version=2023-05-01-preview/put'
            operationId: FailoverGroups_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: FailoverGroup
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1failoverGroups~1{failoverGroupName}?api-version=2023-05-01-preview/delete'
            operationId: FailoverGroups_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1failoverGroups~1{failoverGroupName}?api-version=2023-05-01-preview/patch'
            operationId: FailoverGroups_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: FailoverGroup
        failover:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1failoverGroups~1{failoverGroupName}~1failover?api-version=2023-05-01-preview/post'
            operationId: FailoverGroups_Failover
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: FailoverGroup
        force_failover_allow_data_loss:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1failoverGroups~1{failoverGroupName}~1forceFailoverAllowDataLoss?api-version=2023-05-01-preview/post'
            operationId: FailoverGroups_ForceFailoverAllowDataLoss
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: FailoverGroup
        try_planned_before_forced_failover:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1failoverGroups~1{failoverGroupName}~1tryPlannedBeforeForcedFailover?api-version=2023-05-01-preview/post'
            operationId: FailoverGroups_TryPlannedBeforeForcedFailover
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: FailoverGroup
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/failover_groups/methods/get'
          - $ref: '#/components/x-stackQL-resources/failover_groups/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/failover_groups/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/failover_groups/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/failover_groups/methods/delete'
    database_columns:
      id: azure.sql.database_columns
      name: database_columns
      title: database_columns
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1columns?api-version=2020-11-01-preview/get'
            operationId: DatabaseColumns_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseColumnListResult
            objectKey: $.value
        list_by_table:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns?api-version=2020-11-01-preview/get'
            operationId: DatabaseColumns_ListByTable
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseColumnListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns~1{columnName}?api-version=2020-11-01-preview/get'
            operationId: DatabaseColumns_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseColumn
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_columns/methods/get'
          - $ref: '#/components/x-stackQL-resources/database_columns/methods/list_by_table'
          - $ref: '#/components/x-stackQL-resources/database_columns/methods/list_by_database'
        insert: []
        update: []
        replace: []
        delete: []
    managed_database_tables:
      id: azure.sql.managed_database_tables
      name: managed_database_tables
      title: managed_database_tables
      methods:
        list_by_schema:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseTables_ListBySchema
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseTableListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseTables_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseTable
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_tables/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_database_tables/methods/list_by_schema'
        insert: []
        update: []
        replace: []
        delete: []
    managed_database_columns:
      id: azure.sql.managed_database_columns
      name: managed_database_columns
      title: managed_database_columns
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1columns?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseColumns_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseColumnListResult
            objectKey: $.value
        list_by_table:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseColumns_ListByTable
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseColumnListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns~1{columnName}?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseColumns_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseColumn
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_columns/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_database_columns/methods/list_by_table'
          - $ref: '#/components/x-stackQL-resources/managed_database_columns/methods/list_by_database'
        insert: []
        update: []
        replace: []
        delete: []
    geo_backup_policies:
      id: azure.sql.geo_backup_policies
      name: geo_backup_policies
      title: geo_backup_policies
      methods:
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1geoBackupPolicies~1{geoBackupPolicyName}?api-version=2014-04-01/put'
            operationId: GeoBackupPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: GeoBackupPolicy
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1geoBackupPolicies~1{geoBackupPolicyName}?api-version=2014-04-01/get'
            operationId: GeoBackupPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: GeoBackupPolicy
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1geoBackupPolicies?api-version=2014-04-01/get'
            operationId: GeoBackupPolicies_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: GeoBackupPolicyListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/geo_backup_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/geo_backup_policies/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/geo_backup_policies/methods/create_or_update'
        update: []
        replace: []
        delete: []
    job_target_groups:
      id: azure.sql.job_target_groups
      name: job_target_groups
      title: job_target_groups
      methods:
        list_by_agent:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1targetGroups?api-version=2020-11-01-preview/get'
            operationId: JobTargetGroups_ListByAgent
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobTargetGroupListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1targetGroups~1{targetGroupName}?api-version=2020-11-01-preview/get'
            operationId: JobTargetGroups_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobTargetGroup
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1targetGroups~1{targetGroupName}?api-version=2020-11-01-preview/put'
            operationId: JobTargetGroups_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobTargetGroup
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1targetGroups~1{targetGroupName}?api-version=2020-11-01-preview/delete'
            operationId: JobTargetGroups_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/job_target_groups/methods/get'
          - $ref: '#/components/x-stackQL-resources/job_target_groups/methods/list_by_agent'
        insert:
          - $ref: '#/components/x-stackQL-resources/job_target_groups/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/job_target_groups/methods/delete'
    managed_restorable_dropped_database_backup_short_term_retention_policies:
      id: azure.sql.managed_restorable_dropped_database_backup_short_term_retention_policies
      name: managed_restorable_dropped_database_backup_short_term_retention_policies
      title: managed_restorable_dropped_database_backup_short_term_retention_policies
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1restorableDroppedDatabases~1{restorableDroppedDatabaseId}~1backupShortTermRetentionPolicies~1{policyName}?api-version=2020-11-01-preview/get'
            operationId: ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedBackupShortTermRetentionPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1restorableDroppedDatabases~1{restorableDroppedDatabaseId}~1backupShortTermRetentionPolicies~1{policyName}?api-version=2020-11-01-preview/put'
            operationId: ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedBackupShortTermRetentionPolicy
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1restorableDroppedDatabases~1{restorableDroppedDatabaseId}~1backupShortTermRetentionPolicies~1{policyName}?api-version=2020-11-01-preview/patch'
            operationId: ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedBackupShortTermRetentionPolicy
        list_by_restorable_dropped_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1restorableDroppedDatabases~1{restorableDroppedDatabaseId}~1backupShortTermRetentionPolicies?api-version=2020-11-01-preview/get'
            operationId: ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_ListByRestorableDroppedDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedBackupShortTermRetentionPolicyListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_restorable_dropped_database_backup_short_term_retention_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_restorable_dropped_database_backup_short_term_retention_policies/methods/list_by_restorable_dropped_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_restorable_dropped_database_backup_short_term_retention_policies/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/managed_restorable_dropped_database_backup_short_term_retention_policies/methods/update'
        replace: []
        delete: []
    database_vulnerability_assessment_rule_baselines:
      id: azure.sql.database_vulnerability_assessment_rule_baselines
      name: database_vulnerability_assessment_rule_baselines
      title: database_vulnerability_assessment_rule_baselines
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1rules~1{ruleId}~1baselines~1{baselineName}?api-version=2020-11-01-preview/get'
            operationId: DatabaseVulnerabilityAssessmentRuleBaselines_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseVulnerabilityAssessmentRuleBaseline
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1rules~1{ruleId}~1baselines~1{baselineName}?api-version=2020-11-01-preview/put'
            operationId: DatabaseVulnerabilityAssessmentRuleBaselines_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseVulnerabilityAssessmentRuleBaseline
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1rules~1{ruleId}~1baselines~1{baselineName}?api-version=2020-11-01-preview/delete'
            operationId: DatabaseVulnerabilityAssessmentRuleBaselines_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_vulnerability_assessment_rule_baselines/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/database_vulnerability_assessment_rule_baselines/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/database_vulnerability_assessment_rule_baselines/methods/delete'
    virtual_network_rules:
      id: azure.sql.virtual_network_rules
      name: virtual_network_rules
      title: virtual_network_rules
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1virtualNetworkRules~1{virtualNetworkRuleName}?api-version=2020-11-01-preview/get'
            operationId: VirtualNetworkRules_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualNetworkRule
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1virtualNetworkRules~1{virtualNetworkRuleName}?api-version=2020-11-01-preview/put'
            operationId: VirtualNetworkRules_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualNetworkRule
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1virtualNetworkRules~1{virtualNetworkRuleName}?api-version=2020-11-01-preview/delete'
            operationId: VirtualNetworkRules_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1virtualNetworkRules?api-version=2020-11-01-preview/get'
            operationId: VirtualNetworkRules_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualNetworkRuleListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/virtual_network_rules/methods/get'
          - $ref: '#/components/x-stackQL-resources/virtual_network_rules/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/virtual_network_rules/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/virtual_network_rules/methods/delete'
    backup_short_term_retention_policies:
      id: azure.sql.backup_short_term_retention_policies
      name: backup_short_term_retention_policies
      title: backup_short_term_retention_policies
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1backupShortTermRetentionPolicies~1{policyName}?api-version=2021-02-01-preview/get'
            operationId: BackupShortTermRetentionPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: BackupShortTermRetentionPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1backupShortTermRetentionPolicies~1{policyName}?api-version=2021-02-01-preview/put'
            operationId: BackupShortTermRetentionPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: BackupShortTermRetentionPolicy
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1backupShortTermRetentionPolicies~1{policyName}?api-version=2021-02-01-preview/patch'
            operationId: BackupShortTermRetentionPolicies_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: BackupShortTermRetentionPolicy
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1backupShortTermRetentionPolicies?api-version=2021-02-01-preview/get'
            operationId: BackupShortTermRetentionPolicies_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: BackupShortTermRetentionPolicyListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/backup_short_term_retention_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/backup_short_term_retention_policies/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/backup_short_term_retention_policies/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/backup_short_term_retention_policies/methods/update'
        replace: []
        delete: []
    elastic_pool_activities:
      id: azure.sql.elastic_pool_activities
      name: elastic_pool_activities
      title: elastic_pool_activities
      methods:
        list_by_elastic_pool:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1elasticPools~1{elasticPoolName}~1elasticPoolActivity?api-version=2014-04-01/get'
            operationId: ElasticPoolActivities_ListByElasticPool
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ElasticPoolActivityListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/elastic_pool_activities/methods/list_by_elastic_pool'
        insert: []
        update: []
        replace: []
        delete: []
    elastic_pool_database_activities:
      id: azure.sql.elastic_pool_database_activities
      name: elastic_pool_database_activities
      title: elastic_pool_database_activities
      methods:
        list_by_elastic_pool:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1elasticPools~1{elasticPoolName}~1elasticPoolDatabaseActivity?api-version=2014-04-01/get'
            operationId: ElasticPoolDatabaseActivities_ListByElasticPool
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ElasticPoolDatabaseActivityListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/elastic_pool_database_activities/methods/list_by_elastic_pool'
        insert: []
        update: []
        replace: []
        delete: []
    subscription_usages:
      id: azure.sql.subscription_usages
      name: subscription_usages
      title: subscription_usages
      methods:
        list_by_location:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1usages?api-version=2020-11-01-preview/get'
            operationId: SubscriptionUsages_ListByLocation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SubscriptionUsageListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1usages~1{usageName}?api-version=2020-11-01-preview/get'
            operationId: SubscriptionUsages_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SubscriptionUsage
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/subscription_usages/methods/get'
          - $ref: '#/components/x-stackQL-resources/subscription_usages/methods/list_by_location'
        insert: []
        update: []
        replace: []
        delete: []
    data_warehouse_user_activities:
      id: azure.sql.data_warehouse_user_activities
      name: data_warehouse_user_activities
      title: data_warehouse_user_activities
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1dataWarehouseUserActivities~1{dataWarehouseUserActivityName}?api-version=2020-11-01-preview/get'
            operationId: DataWarehouseUserActivities_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DataWarehouseUserActivities
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1dataWarehouseUserActivities?api-version=2020-11-01-preview/get'
            operationId: DataWarehouseUserActivities_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DataWarehouseUserActivitiesListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/data_warehouse_user_activities/methods/get'
          - $ref: '#/components/x-stackQL-resources/data_warehouse_user_activities/methods/list_by_database'
        insert: []
        update: []
        replace: []
        delete: []
    server_azure_ad_administrators:
      id: azure.sql.server_azure_ad_administrators
      name: server_azure_ad_administrators
      title: server_azure_ad_administrators
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1administrators~1{administratorName}?api-version=2020-11-01-preview/get'
            operationId: ServerAzureADAdministrators_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerAzureADAdministrator
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1administrators~1{administratorName}?api-version=2020-11-01-preview/put'
            operationId: ServerAzureADAdministrators_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerAzureADAdministrator
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1administrators~1{administratorName}?api-version=2020-11-01-preview/delete'
            operationId: ServerAzureADAdministrators_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1administrators?api-version=2020-11-01-preview/get'
            operationId: ServerAzureADAdministrators_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: AdministratorListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_azure_ad_administrators/methods/get'
          - $ref: '#/components/x-stackQL-resources/server_azure_ad_administrators/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_azure_ad_administrators/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/server_azure_ad_administrators/methods/delete'
    managed_backup_short_term_retention_policies:
      id: azure.sql.managed_backup_short_term_retention_policies
      name: managed_backup_short_term_retention_policies
      title: managed_backup_short_term_retention_policies
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1backupShortTermRetentionPolicies~1{policyName}?api-version=2020-11-01-preview/get'
            operationId: ManagedBackupShortTermRetentionPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedBackupShortTermRetentionPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1backupShortTermRetentionPolicies~1{policyName}?api-version=2020-11-01-preview/put'
            operationId: ManagedBackupShortTermRetentionPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedBackupShortTermRetentionPolicy
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1backupShortTermRetentionPolicies~1{policyName}?api-version=2020-11-01-preview/patch'
            operationId: ManagedBackupShortTermRetentionPolicies_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedBackupShortTermRetentionPolicy
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1backupShortTermRetentionPolicies?api-version=2020-11-01-preview/get'
            operationId: ManagedBackupShortTermRetentionPolicies_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedBackupShortTermRetentionPolicyListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_backup_short_term_retention_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_backup_short_term_retention_policies/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_backup_short_term_retention_policies/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/managed_backup_short_term_retention_policies/methods/update'
        replace: []
        delete: []
    restore_points:
      id: azure.sql.restore_points
      name: restore_points
      title: restore_points
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1restorePoints?api-version=2020-11-01-preview/get'
            operationId: RestorePoints_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RestorePointListResult
            objectKey: $.value
        create:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1restorePoints?api-version=2020-11-01-preview/post'
            operationId: RestorePoints_Create
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RestorePoint
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1restorePoints~1{restorePointName}?api-version=2020-11-01-preview/get'
            operationId: RestorePoints_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RestorePoint
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1restorePoints~1{restorePointName}?api-version=2020-11-01-preview/delete'
            operationId: RestorePoints_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/restore_points/methods/get'
          - $ref: '#/components/x-stackQL-resources/restore_points/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/restore_points/methods/create'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/restore_points/methods/delete'
    managed_database_move_operations:
      id: azure.sql.managed_database_move_operations
      name: managed_database_move_operations
      title: managed_database_move_operations
      methods:
        list_by_location:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1managedDatabaseMoveOperationResults?api-version=2022-05-01-preview/get'
            operationId: ManagedDatabaseMoveOperations_ListByLocation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabaseMoveOperationListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1managedDatabaseMoveOperationResults~1{operationId}?api-version=2022-05-01-preview/get'
            operationId: ManagedDatabaseMoveOperations_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabaseMoveOperationResult
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_move_operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_database_move_operations/methods/list_by_location'
        insert: []
        update: []
        replace: []
        delete: []
    server_trust_certificates_by_instances:
      id: azure.sql.server_trust_certificates_by_instances
      name: server_trust_certificates_by_instances
      title: server_trust_certificates_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1serverTrustCertificates?api-version=2021-11-01-preview/get'
            operationId: ServerTrustCertificatesByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerTrustCertificatesListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_trust_certificates_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    server_trust_certificates:
      id: azure.sql.server_trust_certificates
      name: server_trust_certificates
      title: server_trust_certificates
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1serverTrustCertificates~1{certificateName}?api-version=2021-11-01-preview/get'
            operationId: ServerTrustCertificates_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerTrustCertificate
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1serverTrustCertificates~1{certificateName}?api-version=2021-11-01-preview/put'
            operationId: ServerTrustCertificates_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerTrustCertificate
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1serverTrustCertificates~1{certificateName}?api-version=2021-11-01-preview/delete'
            operationId: ServerTrustCertificates_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_trust_certificates/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_trust_certificates/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/server_trust_certificates/methods/delete'
    managed_database_sensitivity_labels:
      id: azure.sql.managed_database_sensitivity_labels
      name: managed_database_sensitivity_labels
      title: managed_database_sensitivity_labels
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns~1{columnName}~1sensitivityLabels~1{sensitivityLabelSource}?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseSensitivityLabels_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SensitivityLabel
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns~1{columnName}~1sensitivityLabels~1{sensitivityLabelSource}?api-version=2020-11-01-preview/put'
            operationId: ManagedDatabaseSensitivityLabels_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SensitivityLabel
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns~1{columnName}~1sensitivityLabels~1{sensitivityLabelSource}?api-version=2020-11-01-preview/delete'
            operationId: ManagedDatabaseSensitivityLabels_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        disable_recommendation:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns~1{columnName}~1sensitivityLabels~1{sensitivityLabelSource}~1disable?api-version=2020-11-01-preview/post'
            operationId: ManagedDatabaseSensitivityLabels_DisableRecommendation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        enable_recommendation:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns~1{columnName}~1sensitivityLabels~1{sensitivityLabelSource}~1enable?api-version=2020-11-01-preview/post'
            operationId: ManagedDatabaseSensitivityLabels_EnableRecommendation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1currentSensitivityLabels?api-version=2020-11-01-preview/patch'
            operationId: ManagedDatabaseSensitivityLabels_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_sensitivity_labels/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_database_sensitivity_labels/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/managed_database_sensitivity_labels/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/managed_database_sensitivity_labels/methods/delete'
    managed_database_sensitivity_labels_current_by_databases:
      id: azure.sql.managed_database_sensitivity_labels_current_by_databases
      name: managed_database_sensitivity_labels_current_by_databases
      title: managed_database_sensitivity_labels_current_by_databases
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1currentSensitivityLabels?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseSensitivityLabelsCurrentByDatabase_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SensitivityLabelListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_sensitivity_labels_current_by_databases/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_database_sensitivity_labels_recommended_by_databases:
      id: azure.sql.managed_database_sensitivity_labels_recommended_by_databases
      name: managed_database_sensitivity_labels_recommended_by_databases
      title: managed_database_sensitivity_labels_recommended_by_databases
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1recommendedSensitivityLabels?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseSensitivityLabelsRecommendedByDatabase_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SensitivityLabelListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_sensitivity_labels_recommended_by_databases/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_database_recommended_sensitivity_labels:
      id: azure.sql.managed_database_recommended_sensitivity_labels
      name: managed_database_recommended_sensitivity_labels
      title: managed_database_recommended_sensitivity_labels
      methods:
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1recommendedSensitivityLabels?api-version=2020-11-01-preview/patch'
            operationId: ManagedDatabaseRecommendedSensitivityLabels_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/managed_database_recommended_sensitivity_labels/methods/update'
        replace: []
        delete: []
    ipv6_firewall_rules:
      id: azure.sql.ipv6_firewall_rules
      name: ipv6_firewall_rules
      title: ipv6_firewall_rules
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1ipv6FirewallRules?api-version=2022-11-01-preview/get'
            operationId: IPv6FirewallRules_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: IPv6FirewallRuleListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1ipv6FirewallRules~1{firewallRuleName}?api-version=2022-11-01-preview/get'
            operationId: IPv6FirewallRules_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: IPv6FirewallRule
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1ipv6FirewallRules~1{firewallRuleName}?api-version=2022-11-01-preview/put'
            operationId: IPv6FirewallRules_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: IPv6FirewallRule
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1ipv6FirewallRules~1{firewallRuleName}?api-version=2022-11-01-preview/delete'
            operationId: IPv6FirewallRules_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/ipv6_firewall_rules/methods/get'
          - $ref: '#/components/x-stackQL-resources/ipv6_firewall_rules/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/ipv6_firewall_rules/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/ipv6_firewall_rules/methods/delete'
    database_schemas:
      id: azure.sql.database_schemas
      name: database_schemas
      title: database_schemas
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1schemas?api-version=2020-11-01-preview/get'
            operationId: DatabaseSchemas_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSchemaListResult
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1schemas~1{schemaName}?api-version=2020-11-01-preview/get'
            operationId: DatabaseSchemas_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSchema
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_schemas/methods/get'
          - $ref: '#/components/x-stackQL-resources/database_schemas/methods/list_by_database'
        insert: []
        update: []
        replace: []
        delete: []
    private_link_resources:
      id: azure.sql.private_link_resources
      name: private_link_resources
      title: private_link_resources
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1privateLinkResources?api-version=2020-11-01-preview/get'
            operationId: PrivateLinkResources_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: PrivateLinkResourceListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1privateLinkResources~1{groupName}?api-version=2020-11-01-preview/get'
            operationId: PrivateLinkResources_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: PrivateLinkResource
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/private_link_resources/methods/get'
          - $ref: '#/components/x-stackQL-resources/private_link_resources/methods/list_by_server'
        insert: []
        update: []
        replace: []
        delete: []
    managed_database_vulnerability_assessment_rule_baselines:
      id: azure.sql.managed_database_vulnerability_assessment_rule_baselines
      name: managed_database_vulnerability_assessment_rule_baselines
      title: managed_database_vulnerability_assessment_rule_baselines
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1rules~1{ruleId}~1baselines~1{baselineName}?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseVulnerabilityAssessmentRuleBaselines_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseVulnerabilityAssessmentRuleBaseline
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1rules~1{ruleId}~1baselines~1{baselineName}?api-version=2020-11-01-preview/put'
            operationId: ManagedDatabaseVulnerabilityAssessmentRuleBaselines_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseVulnerabilityAssessmentRuleBaseline
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1rules~1{ruleId}~1baselines~1{baselineName}?api-version=2020-11-01-preview/delete'
            operationId: ManagedDatabaseVulnerabilityAssessmentRuleBaselines_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_vulnerability_assessment_rule_baselines/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_database_vulnerability_assessment_rule_baselines/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/managed_database_vulnerability_assessment_rule_baselines/methods/delete'
    time_zones:
      id: azure.sql.time_zones
      name: time_zones
      title: time_zones
      methods:
        list_by_location:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1timeZones?api-version=2020-11-01-preview/get'
            operationId: TimeZones_ListByLocation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: TimeZoneListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1timeZones~1{timeZoneId}?api-version=2020-11-01-preview/get'
            operationId: TimeZones_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: TimeZone
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/time_zones/methods/get'
          - $ref: '#/components/x-stackQL-resources/time_zones/methods/list_by_location'
        insert: []
        update: []
        replace: []
        delete: []
    job_executions:
      id: azure.sql.job_executions
      name: job_executions
      title: job_executions
      methods:
        list_by_agent:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1executions?api-version=2020-11-01-preview/get'
            operationId: JobExecutions_ListByAgent
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobExecutionListResult
            objectKey: $.value
        cancel:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1executions~1{jobExecutionId}~1cancel?api-version=2020-11-01-preview/post'
            operationId: JobExecutions_Cancel
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1start?api-version=2020-11-01-preview/post'
            operationId: JobExecutions_Create
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobExecution
        list_by_job:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1executions?api-version=2020-11-01-preview/get'
            operationId: JobExecutions_ListByJob
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobExecutionListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1executions~1{jobExecutionId}?api-version=2020-11-01-preview/get'
            operationId: JobExecutions_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobExecution
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1executions~1{jobExecutionId}?api-version=2020-11-01-preview/put'
            operationId: JobExecutions_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobExecution
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/job_executions/methods/get'
          - $ref: '#/components/x-stackQL-resources/job_executions/methods/list_by_job'
          - $ref: '#/components/x-stackQL-resources/job_executions/methods/list_by_agent'
        insert:
          - $ref: '#/components/x-stackQL-resources/job_executions/methods/create_or_update'
          - $ref: '#/components/x-stackQL-resources/job_executions/methods/create'
        update: []
        replace: []
        delete: []
    server_dns_aliases:
      id: azure.sql.server_dns_aliases
      name: server_dns_aliases
      title: server_dns_aliases
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1dnsAliases~1{dnsAliasName}?api-version=2020-11-01-preview/get'
            operationId: ServerDnsAliases_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerDnsAlias
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1dnsAliases~1{dnsAliasName}?api-version=2020-11-01-preview/put'
            operationId: ServerDnsAliases_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerDnsAlias
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1dnsAliases~1{dnsAliasName}?api-version=2020-11-01-preview/delete'
            operationId: ServerDnsAliases_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1dnsAliases?api-version=2020-11-01-preview/get'
            operationId: ServerDnsAliases_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerDnsAliasListResult
            objectKey: $.value
        acquire:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1dnsAliases~1{dnsAliasName}~1acquire?api-version=2020-11-01-preview/post'
            operationId: ServerDnsAliases_Acquire
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerDnsAlias
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_dns_aliases/methods/get'
          - $ref: '#/components/x-stackQL-resources/server_dns_aliases/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_dns_aliases/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/server_dns_aliases/methods/delete'
    managed_database_vulnerability_assessments:
      id: azure.sql.managed_database_vulnerability_assessments
      name: managed_database_vulnerability_assessments
      title: managed_database_vulnerability_assessments
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseVulnerabilityAssessments_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseVulnerabilityAssessment
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2020-11-01-preview/put'
            operationId: ManagedDatabaseVulnerabilityAssessments_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseVulnerabilityAssessment
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2020-11-01-preview/delete'
            operationId: ManagedDatabaseVulnerabilityAssessments_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1vulnerabilityAssessments?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseVulnerabilityAssessments_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseVulnerabilityAssessmentListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_vulnerability_assessments/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_database_vulnerability_assessments/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_database_vulnerability_assessments/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/managed_database_vulnerability_assessments/methods/delete'
    managed_database_restore_details:
      id: azure.sql.managed_database_restore_details
      name: managed_database_restore_details
      title: managed_database_restore_details
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1restoreDetails~1{restoreDetailsName}?api-version=2022-05-01-preview/get'
            operationId: ManagedDatabaseRestoreDetails_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabaseRestoreDetailsResult
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_restore_details/methods/get'
        insert: []
        update: []
        replace: []
        delete: []
    database_vulnerability_assessments:
      id: azure.sql.database_vulnerability_assessments
      name: database_vulnerability_assessments
      title: database_vulnerability_assessments
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2020-11-01-preview/get'
            operationId: DatabaseVulnerabilityAssessments_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseVulnerabilityAssessment
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2020-11-01-preview/put'
            operationId: DatabaseVulnerabilityAssessments_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseVulnerabilityAssessment
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2020-11-01-preview/delete'
            operationId: DatabaseVulnerabilityAssessments_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1vulnerabilityAssessments?api-version=2020-11-01-preview/get'
            operationId: DatabaseVulnerabilityAssessments_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseVulnerabilityAssessmentListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_vulnerability_assessments/methods/get'
          - $ref: '#/components/x-stackQL-resources/database_vulnerability_assessments/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/database_vulnerability_assessments/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/database_vulnerability_assessments/methods/delete'
    managed_ledger_digest_uploads:
      id: azure.sql.managed_ledger_digest_uploads
      name: managed_ledger_digest_uploads
      title: managed_ledger_digest_uploads
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1ledgerDigestUploads?api-version=2022-08-01-preview/get'
            operationId: ManagedLedgerDigestUploads_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedLedgerDigestUploadsListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1ledgerDigestUploads~1{ledgerDigestUploads}?api-version=2022-08-01-preview/get'
            operationId: ManagedLedgerDigestUploads_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedLedgerDigestUploads
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1ledgerDigestUploads~1{ledgerDigestUploads}?api-version=2022-08-01-preview/put'
            operationId: ManagedLedgerDigestUploads_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedLedgerDigestUploads
        disable:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1ledgerDigestUploads~1{ledgerDigestUploads}~1disable?api-version=2022-08-01-preview/post'
            operationId: ManagedLedgerDigestUploads_Disable
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedLedgerDigestUploads
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_ledger_digest_uploads/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_ledger_digest_uploads/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_ledger_digest_uploads/methods/create_or_update'
        update: []
        replace: []
        delete: []
    managed_server_security_alert_policies:
      id: azure.sql.managed_server_security_alert_policies
      name: managed_server_security_alert_policies
      title: managed_server_security_alert_policies
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1securityAlertPolicies~1{securityAlertPolicyName}?api-version=2020-11-01-preview/get'
            operationId: ManagedServerSecurityAlertPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedServerSecurityAlertPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1securityAlertPolicies~1{securityAlertPolicyName}?api-version=2020-11-01-preview/put'
            operationId: ManagedServerSecurityAlertPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedServerSecurityAlertPolicy
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_server_security_alert_policies/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_server_security_alert_policies/methods/create_or_update'
        update: []
        replace: []
        delete: []
    managed_server_security_alert_policies_by_instances:
      id: azure.sql.managed_server_security_alert_policies_by_instances
      name: managed_server_security_alert_policies_by_instances
      title: managed_server_security_alert_policies_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1securityAlertPolicies?api-version=2020-11-01-preview/get'
            operationId: ManagedServerSecurityAlertPoliciesByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedServerSecurityAlertPolicyListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_server_security_alert_policies_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    database_advisors:
      id: azure.sql.database_advisors
      name: database_advisors
      title: database_advisors
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1advisors?api-version=2020-11-01-preview/get'
            operationId: DatabaseAdvisors_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1advisors~1{advisorName}?api-version=2020-11-01-preview/get'
            operationId: DatabaseAdvisors_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Advisor
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1advisors~1{advisorName}?api-version=2020-11-01-preview/patch'
            operationId: DatabaseAdvisors_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Advisor
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_advisors/methods/get'
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/database_advisors/methods/update'
        replace: []
        delete: []
    long_term_retention_policies:
      id: azure.sql.long_term_retention_policies
      name: long_term_retention_policies
      title: long_term_retention_policies
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1backupLongTermRetentionPolicies?api-version=2023-05-01-preview/get'
            operationId: LongTermRetentionPolicies_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionPolicyListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1backupLongTermRetentionPolicies~1{policyName}?api-version=2023-05-01-preview/get'
            operationId: LongTermRetentionPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1backupLongTermRetentionPolicies~1{policyName}?api-version=2023-05-01-preview/put'
            operationId: LongTermRetentionPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionPolicy
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/long_term_retention_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_policies/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/long_term_retention_policies/methods/create_or_update'
        update: []
        replace: []
        delete: []
    managed_instance_private_link_resources_by_managed_instances:
      id: azure.sql.managed_instance_private_link_resources_by_managed_instances
      name: managed_instance_private_link_resources_by_managed_instances
      title: managed_instance_private_link_resources_by_managed_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1privateLinkResources?api-version=2020-11-01-preview/get'
            operationId: ManagedInstancePrivateLinkResourcesByManagedInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstancePrivateLinkListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_private_link_resources_by_managed_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instance_private_link_resources:
      id: azure.sql.managed_instance_private_link_resources
      name: managed_instance_private_link_resources
      title: managed_instance_private_link_resources
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1privateLinkResources~1{groupName}?api-version=2020-11-01-preview/get'
            operationId: ManagedInstancePrivateLinkResources_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstancePrivateLink
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_private_link_resources/methods/get'
        insert: []
        update: []
        replace: []
        delete: []
    database_operations:
      id: azure.sql.database_operations
      name: database_operations
      title: database_operations
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1operations?api-version=2022-11-01-preview/get'
            operationId: DatabaseOperations_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseOperationListResult
            objectKey: $.value
        cancel:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1operations~1{operationId}~1cancel?api-version=2022-11-01-preview/post'
            operationId: DatabaseOperations_Cancel
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_operations/methods/list_by_database'
        insert: []
        update: []
        replace: []
        delete: []
    tde_certificates:
      id: azure.sql.tde_certificates
      name: tde_certificates
      title: tde_certificates
      methods:
        create:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1tdeCertificates?api-version=2020-11-01-preview/post'
            operationId: TdeCertificates_Create
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/tde_certificates/methods/create'
        update: []
        replace: []
        delete: []
    server_blob_auditing_policies:
      id: azure.sql.server_blob_auditing_policies
      name: server_blob_auditing_policies
      title: server_blob_auditing_policies
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1auditingSettings?api-version=2021-11-01-preview/get'
            operationId: ServerBlobAuditingPolicies_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerBlobAuditingPolicyListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1auditingSettings~1{blobAuditingPolicyName}?api-version=2021-11-01-preview/get'
            operationId: ServerBlobAuditingPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerBlobAuditingPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1auditingSettings~1{blobAuditingPolicyName}?api-version=2021-11-01-preview/put'
            operationId: ServerBlobAuditingPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerBlobAuditingPolicy
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_blob_auditing_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/server_blob_auditing_policies/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_blob_auditing_policies/methods/create_or_update'
        update: []
        replace: []
        delete: []
    database_blob_auditing_policies:
      id: azure.sql.database_blob_auditing_policies
      name: database_blob_auditing_policies
      title: database_blob_auditing_policies
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1auditingSettings?api-version=2021-11-01-preview/get'
            operationId: DatabaseBlobAuditingPolicies_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseBlobAuditingPolicyListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1auditingSettings~1{blobAuditingPolicyName}?api-version=2021-11-01-preview/get'
            operationId: DatabaseBlobAuditingPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseBlobAuditingPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1auditingSettings~1{blobAuditingPolicyName}?api-version=2021-11-01-preview/put'
            operationId: DatabaseBlobAuditingPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseBlobAuditingPolicy
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_blob_auditing_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/database_blob_auditing_policies/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/database_blob_auditing_policies/methods/create_or_update'
        update: []
        replace: []
        delete: []
    extended_database_blob_auditing_policies:
      id: azure.sql.extended_database_blob_auditing_policies
      name: extended_database_blob_auditing_policies
      title: extended_database_blob_auditing_policies
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1extendedAuditingSettings?api-version=2021-11-01-preview/get'
            operationId: ExtendedDatabaseBlobAuditingPolicies_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ExtendedDatabaseBlobAuditingPolicyListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1extendedAuditingSettings~1{blobAuditingPolicyName}?api-version=2021-11-01-preview/get'
            operationId: ExtendedDatabaseBlobAuditingPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ExtendedDatabaseBlobAuditingPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1extendedAuditingSettings~1{blobAuditingPolicyName}?api-version=2021-11-01-preview/put'
            operationId: ExtendedDatabaseBlobAuditingPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ExtendedDatabaseBlobAuditingPolicy
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/extended_database_blob_auditing_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/extended_database_blob_auditing_policies/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/extended_database_blob_auditing_policies/methods/create_or_update'
        update: []
        replace: []
        delete: []
    extended_server_blob_auditing_policies:
      id: azure.sql.extended_server_blob_auditing_policies
      name: extended_server_blob_auditing_policies
      title: extended_server_blob_auditing_policies
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1extendedAuditingSettings?api-version=2021-11-01-preview/get'
            operationId: ExtendedServerBlobAuditingPolicies_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ExtendedServerBlobAuditingPolicyListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1extendedAuditingSettings~1{blobAuditingPolicyName}?api-version=2021-11-01-preview/get'
            operationId: ExtendedServerBlobAuditingPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ExtendedServerBlobAuditingPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1extendedAuditingSettings~1{blobAuditingPolicyName}?api-version=2021-11-01-preview/put'
            operationId: ExtendedServerBlobAuditingPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ExtendedServerBlobAuditingPolicy
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/extended_server_blob_auditing_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/extended_server_blob_auditing_policies/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/extended_server_blob_auditing_policies/methods/create_or_update'
        update: []
        replace: []
        delete: []
    server_configuration_options_by_managed_instances:
      id: azure.sql.server_configuration_options_by_managed_instances
      name: server_configuration_options_by_managed_instances
      title: server_configuration_options_by_managed_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1serverConfigurationOptions?api-version=2022-08-01-preview/get'
            operationId: ServerConfigurationOptionsByManagedInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerConfigurationOptionListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_configuration_options_by_managed_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    server_configuration_options:
      id: azure.sql.server_configuration_options
      name: server_configuration_options
      title: server_configuration_options
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1serverConfigurationOptions~1{serverConfigurationOptionName}?api-version=2022-08-01-preview/get'
            operationId: ServerConfigurationOptions_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerConfigurationOption
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1serverConfigurationOptions~1{serverConfigurationOptionName}?api-version=2022-08-01-preview/put'
            operationId: ServerConfigurationOptions_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerConfigurationOption
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_configuration_options/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_configuration_options/methods/create_or_update'
        update: []
        replace: []
        delete: []
    managed_instance_keys_by_instances:
      id: azure.sql.managed_instance_keys_by_instances
      name: managed_instance_keys_by_instances
      title: managed_instance_keys_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1keys?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceKeysByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceKeyListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_keys_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instance_keys:
      id: azure.sql.managed_instance_keys
      name: managed_instance_keys
      title: managed_instance_keys
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1keys~1{keyName}?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceKeys_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceKey
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1keys~1{keyName}?api-version=2020-11-01-preview/put'
            operationId: ManagedInstanceKeys_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceKey
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1keys~1{keyName}?api-version=2020-11-01-preview/delete'
            operationId: ManagedInstanceKeys_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_keys/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_instance_keys/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/managed_instance_keys/methods/delete'
    database_sql_vulnerability_assessment_execute_scans:
      id: azure.sql.database_sql_vulnerability_assessment_execute_scans
      name: database_sql_vulnerability_assessment_execute_scans
      title: database_sql_vulnerability_assessment_execute_scans
      methods:
        execute:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1initiateScan?api-version=2022-11-01-preview/post'
            operationId: DatabaseSqlVulnerabilityAssessmentExecuteScan_Execute
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    managed_instance_administrators_by_instances:
      id: azure.sql.managed_instance_administrators_by_instances
      name: managed_instance_administrators_by_instances
      title: managed_instance_administrators_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1administrators?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceAdministratorsByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceAdministratorListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_administrators_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instance_administrators:
      id: azure.sql.managed_instance_administrators
      name: managed_instance_administrators
      title: managed_instance_administrators
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1administrators~1{administratorName}?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceAdministrators_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceAdministrator
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1administrators~1{administratorName}?api-version=2020-11-01-preview/put'
            operationId: ManagedInstanceAdministrators_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceAdministrator
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1administrators~1{administratorName}?api-version=2020-11-01-preview/delete'
            operationId: ManagedInstanceAdministrators_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_administrators/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_instance_administrators/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/managed_instance_administrators/methods/delete'
    recoverable_databases:
      id: azure.sql.recoverable_databases
      name: recoverable_databases
      title: recoverable_databases
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1recoverableDatabases?api-version=2022-08-01-preview/get'
            operationId: RecoverableDatabases_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RecoverableDatabaseListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1recoverableDatabases~1{databaseName}?api-version=2022-08-01-preview/get'
            operationId: RecoverableDatabases_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RecoverableDatabase
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/recoverable_databases/methods/get'
          - $ref: '#/components/x-stackQL-resources/recoverable_databases/methods/list_by_server'
        insert: []
        update: []
        replace: []
        delete: []
    vulnerability_assessment_scans:
      id: azure.sql.vulnerability_assessment_scans
      name: vulnerability_assessment_scans
      title: vulnerability_assessment_scans
      methods:
        list_by_sql_vulnerability_assessments:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans?api-version=2022-11-01-preview/get'
            operationId: SqlVulnerabilityAssessmentScans_ListBySqlVulnerabilityAssessments
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SqlVulnerabilityAssessmentScanRecordListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans~1{scanId}?api-version=2022-11-01-preview/get'
            operationId: SqlVulnerabilityAssessmentScans_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SqlVulnerabilityAssessmentScanRecord
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessment_scans/methods/get'
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessment_scans/methods/list_by_sql_vulnerability_assessments'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instances:
      id: azure.sql.managed_instances
      name: managed_instances
      title: managed_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1managedInstances?api-version=2023-05-01-preview/get'
            operationId: ManagedInstances_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceListResult
            objectKey: $.value
        list_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances?api-version=2023-05-01-preview/get'
            operationId: ManagedInstances_ListByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}?api-version=2023-05-01-preview/get'
            operationId: ManagedInstances_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstance
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}?api-version=2023-05-01-preview/put'
            operationId: ManagedInstances_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstance
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}?api-version=2023-05-01-preview/delete'
            operationId: ManagedInstances_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}?api-version=2023-05-01-preview/patch'
            operationId: ManagedInstances_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstance
        failover:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1failover?api-version=2023-05-01-preview/post'
            operationId: ManagedInstances_Failover
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        refresh_status:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1refreshExternalGovernanceStatus?api-version=2023-05-01-preview/post'
            operationId: ManagedInstances_RefreshStatus
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RefreshExternalGovernanceStatusOperationResultMI
        start:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1start?api-version=2023-05-01-preview/post'
            operationId: ManagedInstances_Start
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstance
        stop:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1stop?api-version=2023-05-01-preview/post'
            operationId: ManagedInstances_Stop
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstance
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instances/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_instances/methods/list_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/managed_instances/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_instances/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/managed_instances/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/managed_instances/methods/delete'
    managed_instances_by_instance_pools:
      id: azure.sql.managed_instances_by_instance_pools
      name: managed_instances_by_instance_pools
      title: managed_instances_by_instance_pools
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1instancePools~1{instancePoolName}~1managedInstances?api-version=2023-05-01-preview/get'
            operationId: ManagedInstancesByInstancePool_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instances_by_instance_pools/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instances_outbound_network_dependencies_by_managed_instances:
      id: azure.sql.managed_instances_outbound_network_dependencies_by_managed_instances
      name: managed_instances_outbound_network_dependencies_by_managed_instances
      title: managed_instances_outbound_network_dependencies_by_managed_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1outboundNetworkDependenciesEndpoints?api-version=2023-05-01-preview/get'
            operationId: ManagedInstancesOutboundNetworkDependenciesByManagedInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: OutboundEnvironmentEndpointCollection
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instances_outbound_network_dependencies_by_managed_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instances_by_managed_instances:
      id: azure.sql.managed_instances_by_managed_instances
      name: managed_instances_by_managed_instances
      title: managed_instances_by_managed_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1topqueries?api-version=2023-05-01-preview/get'
            operationId: ManagedInstancesByManagedInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: TopQueriesListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instances_by_managed_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instance_dtcs_by_managed_instances:
      id: azure.sql.managed_instance_dtcs_by_managed_instances
      name: managed_instance_dtcs_by_managed_instances
      title: managed_instance_dtcs_by_managed_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1dtc?api-version=2022-05-01-preview/get'
            operationId: ManagedInstanceDtcsByManagedInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceDtcListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_dtcs_by_managed_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instance_dtcs:
      id: azure.sql.managed_instance_dtcs
      name: managed_instance_dtcs
      title: managed_instance_dtcs
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1dtc~1{dtcName}?api-version=2022-05-01-preview/get'
            operationId: ManagedInstanceDtcs_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceDtc
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1dtc~1{dtcName}?api-version=2022-05-01-preview/put'
            operationId: ManagedInstanceDtcs_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceDtc
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_dtcs/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_instance_dtcs/methods/create_or_update'
        update: []
        replace: []
        delete: []
    maintenance_windows:
      id: azure.sql.maintenance_windows
      name: maintenance_windows
      title: maintenance_windows
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1maintenanceWindows~1current?api-version=2020-11-01-preview/get'
            operationId: MaintenanceWindows_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: MaintenanceWindows
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1maintenanceWindows~1current?api-version=2020-11-01-preview/put'
            operationId: MaintenanceWindows_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/maintenance_windows/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/maintenance_windows/methods/create_or_update'
        update: []
        replace: []
        delete: []
    vulnerability_assessment_scan_results:
      id: azure.sql.vulnerability_assessment_scan_results
      name: vulnerability_assessment_scan_results
      title: vulnerability_assessment_scan_results
      methods:
        list_by_scan:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans~1{scanId}~1scanResults?api-version=2022-11-01-preview/get'
            operationId: SqlVulnerabilityAssessmentScanResult_ListByScan
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SQLVulnerabilityAssessmentScanListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans~1{scanId}~1scanResults~1{scanResultId}?api-version=2022-11-01-preview/get'
            operationId: SqlVulnerabilityAssessmentScanResult_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SqlVulnerabilityAssessmentScanResults
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessment_scan_results/methods/get'
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessment_scan_results/methods/list_by_scan'
        insert: []
        update: []
        replace: []
        delete: []
    outbound_firewall_rules:
      id: azure.sql.outbound_firewall_rules
      name: outbound_firewall_rules
      title: outbound_firewall_rules
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1outboundFirewallRules~1{outboundRuleFqdn}?api-version=2021-02-01-preview/get'
            operationId: OutboundFirewallRules_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: OutboundFirewallRule
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1outboundFirewallRules~1{outboundRuleFqdn}?api-version=2021-02-01-preview/put'
            operationId: OutboundFirewallRules_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: OutboundFirewallRule
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1outboundFirewallRules~1{outboundRuleFqdn}?api-version=2021-02-01-preview/delete'
            operationId: OutboundFirewallRules_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1outboundFirewallRules?api-version=2021-02-01-preview/get'
            operationId: OutboundFirewallRules_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: OutboundFirewallRuleListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/outbound_firewall_rules/methods/get'
          - $ref: '#/components/x-stackQL-resources/outbound_firewall_rules/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/outbound_firewall_rules/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/outbound_firewall_rules/methods/delete'
    sync_agents:
      id: azure.sql.sync_agents
      name: sync_agents
      title: sync_agents
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1syncAgents~1{syncAgentName}?api-version=2020-11-01-preview/get'
            operationId: SyncAgents_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncAgent
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1syncAgents~1{syncAgentName}?api-version=2020-11-01-preview/put'
            operationId: SyncAgents_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncAgent
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1syncAgents~1{syncAgentName}?api-version=2020-11-01-preview/delete'
            operationId: SyncAgents_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1syncAgents?api-version=2020-11-01-preview/get'
            operationId: SyncAgents_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncAgentListResult
            objectKey: $.value
        generate_key:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1syncAgents~1{syncAgentName}~1generateKey?api-version=2020-11-01-preview/post'
            operationId: SyncAgents_GenerateKey
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncAgentKeyProperties
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/sync_agents/methods/get'
          - $ref: '#/components/x-stackQL-resources/sync_agents/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/sync_agents/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/sync_agents/methods/delete'
    sync_agents_linked_databases:
      id: azure.sql.sync_agents_linked_databases
      name: sync_agents_linked_databases
      title: sync_agents_linked_databases
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1syncAgents~1{syncAgentName}~1linkedDatabases?api-version=2020-11-01-preview/get'
            operationId: SyncAgentsLinkedDatabases_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncAgentLinkedDatabaseListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/sync_agents_linked_databases/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instance_tde_certificates:
      id: azure.sql.managed_instance_tde_certificates
      name: managed_instance_tde_certificates
      title: managed_instance_tde_certificates
      methods:
        create:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1tdeCertificates?api-version=2020-11-01-preview/post'
            operationId: ManagedInstanceTdeCertificates_Create
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_instance_tde_certificates/methods/create'
        update: []
        replace: []
        delete: []
    long_term_retention_backups:
      id: azure.sql.long_term_retention_backups
      name: long_term_retention_backups
      title: long_term_retention_backups
      methods:
        list_by_location:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionBackups?api-version=2023-05-01-preview/get'
            operationId: LongTermRetentionBackups_ListByLocation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackupListResult
            objectKey: $.value
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionBackups?api-version=2023-05-01-preview/get'
            operationId: LongTermRetentionBackups_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackupListResult
            objectKey: $.value
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionDatabases~1{longTermRetentionDatabaseName}~1longTermRetentionBackups?api-version=2023-05-01-preview/get'
            operationId: LongTermRetentionBackups_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackupListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionDatabases~1{longTermRetentionDatabaseName}~1longTermRetentionBackups~1{backupName}?api-version=2023-05-01-preview/get'
            operationId: LongTermRetentionBackups_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackup
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionDatabases~1{longTermRetentionDatabaseName}~1longTermRetentionBackups~1{backupName}?api-version=2023-05-01-preview/delete'
            operationId: LongTermRetentionBackups_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        change_access_tier:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionDatabases~1{longTermRetentionDatabaseName}~1longTermRetentionBackups~1{backupName}~1changeAccessTier?api-version=2023-05-01-preview/post'
            operationId: LongTermRetentionBackups_ChangeAccessTier
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackup
        copy:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionDatabases~1{longTermRetentionDatabaseName}~1longTermRetentionBackups~1{backupName}~1copy?api-version=2023-05-01-preview/post'
            operationId: LongTermRetentionBackups_Copy
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackupOperationResult
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionDatabases~1{longTermRetentionDatabaseName}~1longTermRetentionBackups~1{backupName}~1update?api-version=2023-05-01-preview/post'
            operationId: LongTermRetentionBackups_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackupOperationResult
        list_by_resource_group_location:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionBackups?api-version=2023-05-01-preview/get'
            operationId: LongTermRetentionBackups_ListByResourceGroupLocation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackupListResult
            objectKey: $.value
        list_by_resource_group_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionBackups?api-version=2023-05-01-preview/get'
            operationId: LongTermRetentionBackups_ListByResourceGroupServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackupListResult
            objectKey: $.value
        list_by_resource_group_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionDatabases~1{longTermRetentionDatabaseName}~1longTermRetentionBackups?api-version=2023-05-01-preview/get'
            operationId: LongTermRetentionBackups_ListByResourceGroupDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackupListResult
            objectKey: $.value
        get_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionDatabases~1{longTermRetentionDatabaseName}~1longTermRetentionBackups~1{backupName}?api-version=2023-05-01-preview/get'
            operationId: LongTermRetentionBackups_GetByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackup
        delete_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionDatabases~1{longTermRetentionDatabaseName}~1longTermRetentionBackups~1{backupName}?api-version=2023-05-01-preview/delete'
            operationId: LongTermRetentionBackups_DeleteByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        change_access_tier_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionDatabases~1{longTermRetentionDatabaseName}~1longTermRetentionBackups~1{backupName}~1changeAccessTier?api-version=2023-05-01-preview/post'
            operationId: LongTermRetentionBackups_ChangeAccessTierByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackup
        copy_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionDatabases~1{longTermRetentionDatabaseName}~1longTermRetentionBackups~1{backupName}~1copy?api-version=2023-05-01-preview/post'
            operationId: LongTermRetentionBackups_CopyByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackupOperationResult
        update_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionServers~1{longTermRetentionServerName}~1longTermRetentionDatabases~1{longTermRetentionDatabaseName}~1longTermRetentionBackups~1{backupName}~1update?api-version=2023-05-01-preview/post'
            operationId: LongTermRetentionBackups_UpdateByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LongTermRetentionBackupOperationResult
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/long_term_retention_backups/methods/get_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_backups/methods/get'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_backups/methods/list_by_resource_group_database'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_backups/methods/list_by_database'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_backups/methods/list_by_resource_group_server'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_backups/methods/list_by_server'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_backups/methods/list_by_resource_group_location'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_backups/methods/list_by_location'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/long_term_retention_backups/methods/delete_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_backups/methods/delete'
    vulnerability_assessment_rule_baselines:
      id: azure.sql.vulnerability_assessment_rule_baselines
      name: vulnerability_assessment_rule_baselines
      title: vulnerability_assessment_rule_baselines
      methods:
        list_by_baseline:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines~1{baselineName}~1rules?api-version=2022-11-01-preview/get'
            operationId: SqlVulnerabilityAssessmentRuleBaseline_ListByBaseline
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSqlVulnerabilityAssessmentRuleBaselineListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines~1{baselineName}~1rules~1{ruleId}?api-version=2022-11-01-preview/get'
            operationId: SqlVulnerabilityAssessmentRuleBaseline_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSqlVulnerabilityAssessmentRuleBaseline
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines~1{baselineName}~1rules~1{ruleId}?api-version=2022-11-01-preview/put'
            operationId: SqlVulnerabilityAssessmentRuleBaseline_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSqlVulnerabilityAssessmentRuleBaseline
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines~1{baselineName}~1rules~1{ruleId}?api-version=2022-11-01-preview/delete'
            operationId: SqlVulnerabilityAssessmentRuleBaselines_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessment_rule_baselines/methods/get'
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessment_rule_baselines/methods/list_by_baseline'
        insert:
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessment_rule_baselines/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessment_rule_baselines/methods/delete'
    server_usages:
      id: azure.sql.server_usages
      name: server_usages
      title: server_usages
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1usages?api-version=2014-04-01/get'
            operationId: ServerUsages_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerUsageListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_usages/methods/list_by_server'
        insert: []
        update: []
        replace: []
        delete: []
    workload_classifiers:
      id: azure.sql.workload_classifiers
      name: workload_classifiers
      title: workload_classifiers
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1workloadGroups~1{workloadGroupName}~1workloadClassifiers~1{workloadClassifierName}?api-version=2020-11-01-preview/get'
            operationId: WorkloadClassifiers_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: WorkloadClassifier
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1workloadGroups~1{workloadGroupName}~1workloadClassifiers~1{workloadClassifierName}?api-version=2020-11-01-preview/put'
            operationId: WorkloadClassifiers_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: WorkloadClassifier
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1workloadGroups~1{workloadGroupName}~1workloadClassifiers~1{workloadClassifierName}?api-version=2020-11-01-preview/delete'
            operationId: WorkloadClassifiers_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_workload_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1workloadGroups~1{workloadGroupName}~1workloadClassifiers?api-version=2020-11-01-preview/get'
            operationId: WorkloadClassifiers_ListByWorkloadGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: WorkloadClassifierListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/workload_classifiers/methods/get'
          - $ref: '#/components/x-stackQL-resources/workload_classifiers/methods/list_by_workload_group'
        insert:
          - $ref: '#/components/x-stackQL-resources/workload_classifiers/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/workload_classifiers/methods/delete'
    vulnerability_assessment_execute_scans:
      id: azure.sql.vulnerability_assessment_execute_scans
      name: vulnerability_assessment_execute_scans
      title: vulnerability_assessment_execute_scans
      methods:
        execute:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1initiateScan?api-version=2022-11-01-preview/post'
            operationId: SqlVulnerabilityAssessmentExecuteScan_Execute
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    managed_database_schemas:
      id: azure.sql.managed_database_schemas
      name: managed_database_schemas
      title: managed_database_schemas
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1schemas?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseSchemas_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSchemaListResult
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1schemas~1{schemaName}?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseSchemas_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSchema
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_schemas/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_database_schemas/methods/list_by_database'
        insert: []
        update: []
        replace: []
        delete: []
    server_communication_links:
      id: azure.sql.server_communication_links
      name: server_communication_links
      title: server_communication_links
      methods:
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1communicationLinks~1{communicationLinkName}?api-version=2014-04-01/delete'
            operationId: ServerCommunicationLinks_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1communicationLinks~1{communicationLinkName}?api-version=2014-04-01/get'
            operationId: ServerCommunicationLinks_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerCommunicationLink
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1communicationLinks~1{communicationLinkName}?api-version=2014-04-01/put'
            operationId: ServerCommunicationLinks_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '201'
            schemaRef: ServerCommunicationLink
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1communicationLinks?api-version=2014-04-01/get'
            operationId: ServerCommunicationLinks_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerCommunicationLinkListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_communication_links/methods/get'
          - $ref: '#/components/x-stackQL-resources/server_communication_links/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_communication_links/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/server_communication_links/methods/delete'
    database_security_alert_policies:
      id: azure.sql.database_security_alert_policies
      name: database_security_alert_policies
      title: database_security_alert_policies
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1securityAlertPolicies~1{securityAlertPolicyName}?api-version=2020-11-01-preview/get'
            operationId: DatabaseSecurityAlertPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSecurityAlertPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1securityAlertPolicies~1{securityAlertPolicyName}?api-version=2020-11-01-preview/put'
            operationId: DatabaseSecurityAlertPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSecurityAlertPolicy
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1securityAlertPolicies?api-version=2020-11-01-preview/get'
            operationId: DatabaseSecurityAlertPolicies_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSecurityAlertListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_security_alert_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/database_security_alert_policies/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/database_security_alert_policies/methods/create_or_update'
        update: []
        replace: []
        delete: []
    deleted_servers:
      id: azure.sql.deleted_servers
      name: deleted_servers
      title: deleted_servers
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1deletedServers?api-version=2020-11-01-preview/get'
            operationId: DeletedServers_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DeletedServerListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1deletedServers~1{deletedServerName}?api-version=2020-11-01-preview/get'
            operationId: DeletedServers_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DeletedServer
        list_by_location:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1deletedServers?api-version=2020-11-01-preview/get'
            operationId: DeletedServers_ListByLocation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DeletedServerListResult
            objectKey: $.value
        recover:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1deletedServers~1{deletedServerName}~1recover?api-version=2020-11-01-preview/post'
            operationId: DeletedServers_Recover
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DeletedServer
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/deleted_servers/methods/get'
          - $ref: '#/components/x-stackQL-resources/deleted_servers/methods/list_by_location'
          - $ref: '#/components/x-stackQL-resources/deleted_servers/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    sync_members:
      id: azure.sql.sync_members
      name: sync_members
      title: sync_members
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}~1syncMembers~1{syncMemberName}?api-version=2020-11-01-preview/get'
            operationId: SyncMembers_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncMember
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}~1syncMembers~1{syncMemberName}?api-version=2020-11-01-preview/put'
            operationId: SyncMembers_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncMember
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}~1syncMembers~1{syncMemberName}?api-version=2020-11-01-preview/delete'
            operationId: SyncMembers_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}~1syncMembers~1{syncMemberName}?api-version=2020-11-01-preview/patch'
            operationId: SyncMembers_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncMember
        list_by_sync_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}~1syncMembers?api-version=2020-11-01-preview/get'
            operationId: SyncMembers_ListBySyncGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncMemberListResult
            objectKey: $.value
        refresh_member_schema:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}~1syncMembers~1{syncMemberName}~1refreshSchema?api-version=2020-11-01-preview/post'
            operationId: SyncMembers_RefreshMemberSchema
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/sync_members/methods/get'
          - $ref: '#/components/x-stackQL-resources/sync_members/methods/list_by_sync_group'
        insert:
          - $ref: '#/components/x-stackQL-resources/sync_members/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/sync_members/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/sync_members/methods/delete'
    sync_members_member_schemas:
      id: azure.sql.sync_members_member_schemas
      name: sync_members_member_schemas
      title: sync_members_member_schemas
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}~1syncMembers~1{syncMemberName}~1schemas?api-version=2020-11-01-preview/get'
            operationId: SyncMembersMemberSchemas_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncFullSchemaPropertiesListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/sync_members_member_schemas/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    server_operations:
      id: azure.sql.server_operations
      name: server_operations
      title: server_operations
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1operations?api-version=2020-11-01-preview/get'
            operationId: ServerOperations_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerOperationListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_operations/methods/list_by_server'
        insert: []
        update: []
        replace: []
        delete: []
    job_credentials:
      id: azure.sql.job_credentials
      name: job_credentials
      title: job_credentials
      methods:
        list_by_agent:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1credentials?api-version=2020-11-01-preview/get'
            operationId: JobCredentials_ListByAgent
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobCredentialListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1credentials~1{credentialName}?api-version=2020-11-01-preview/get'
            operationId: JobCredentials_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobCredential
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1credentials~1{credentialName}?api-version=2020-11-01-preview/put'
            operationId: JobCredentials_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobCredential
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1credentials~1{credentialName}?api-version=2020-11-01-preview/delete'
            operationId: JobCredentials_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/job_credentials/methods/get'
          - $ref: '#/components/x-stackQL-resources/job_credentials/methods/list_by_agent'
        insert:
          - $ref: '#/components/x-stackQL-resources/job_credentials/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/job_credentials/methods/delete'
    private_endpoint_connections:
      id: azure.sql.private_endpoint_connections
      name: private_endpoint_connections
      title: private_endpoint_connections
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1privateEndpointConnections?api-version=2022-08-01-preview/get'
            operationId: PrivateEndpointConnections_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: PrivateEndpointConnectionListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1privateEndpointConnections~1{privateEndpointConnectionName}?api-version=2022-08-01-preview/get'
            operationId: PrivateEndpointConnections_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: PrivateEndpointConnection
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1privateEndpointConnections~1{privateEndpointConnectionName}?api-version=2022-08-01-preview/put'
            operationId: PrivateEndpointConnections_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: PrivateEndpointConnection
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1privateEndpointConnections~1{privateEndpointConnectionName}?api-version=2022-08-01-preview/delete'
            operationId: PrivateEndpointConnections_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/private_endpoint_connections/methods/get'
          - $ref: '#/components/x-stackQL-resources/private_endpoint_connections/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/private_endpoint_connections/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/private_endpoint_connections/methods/delete'
    database_encryption_protectors:
      id: azure.sql.database_encryption_protectors
      name: database_encryption_protectors
      title: database_encryption_protectors
      methods:
        revalidate:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1encryptionProtector~1{encryptionProtectorName}~1revalidate?api-version=2022-08-01-preview/post'
            operationId: DatabaseEncryptionProtectors_Revalidate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        revert:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1encryptionProtector~1{encryptionProtectorName}~1revert?api-version=2022-08-01-preview/post'
            operationId: DatabaseEncryptionProtectors_Revert
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    database_usages:
      id: azure.sql.database_usages
      name: database_usages
      title: database_usages
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1usages?api-version=2021-02-01-preview/get'
            operationId: DatabaseUsages_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseUsageListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_usages/methods/list_by_database'
        insert: []
        update: []
        replace: []
        delete: []
    server_vulnerability_assessments:
      id: azure.sql.server_vulnerability_assessments
      name: server_vulnerability_assessments
      title: server_vulnerability_assessments
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2020-11-01-preview/get'
            operationId: ServerVulnerabilityAssessments_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerVulnerabilityAssessment
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2020-11-01-preview/put'
            operationId: ServerVulnerabilityAssessments_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerVulnerabilityAssessment
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2020-11-01-preview/delete'
            operationId: ServerVulnerabilityAssessments_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1vulnerabilityAssessments?api-version=2020-11-01-preview/get'
            operationId: ServerVulnerabilityAssessments_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerVulnerabilityAssessmentListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_vulnerability_assessments/methods/get'
          - $ref: '#/components/x-stackQL-resources/server_vulnerability_assessments/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_vulnerability_assessments/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/server_vulnerability_assessments/methods/delete'
    restorable_dropped_managed_databases_by_instances:
      id: azure.sql.restorable_dropped_managed_databases_by_instances
      name: restorable_dropped_managed_databases_by_instances
      title: restorable_dropped_managed_databases_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1restorableDroppedDatabases?api-version=2021-05-01-preview/get'
            operationId: RestorableDroppedManagedDatabasesByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RestorableDroppedManagedDatabaseListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/restorable_dropped_managed_databases_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    restorable_dropped_managed_databases:
      id: azure.sql.restorable_dropped_managed_databases
      name: restorable_dropped_managed_databases
      title: restorable_dropped_managed_databases
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1restorableDroppedDatabases~1{restorableDroppedDatabaseId}?api-version=2021-05-01-preview/get'
            operationId: RestorableDroppedManagedDatabases_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RestorableDroppedManagedDatabase
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/restorable_dropped_managed_databases/methods/get'
        insert: []
        update: []
        replace: []
        delete: []
    synapse_link_workspaces:
      id: azure.sql.synapse_link_workspaces
      name: synapse_link_workspaces
      title: synapse_link_workspaces
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1linkWorkspaces?api-version=2022-05-01-preview/get'
            operationId: SynapseLinkWorkspaces_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SynapseLinkWorkspaceListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/synapse_link_workspaces/methods/list_by_database'
        insert: []
        update: []
        replace: []
        delete: []
    job_target_executions:
      id: azure.sql.job_target_executions
      name: job_target_executions
      title: job_target_executions
      methods:
        list_by_job_execution:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1executions~1{jobExecutionId}~1targets?api-version=2020-11-01-preview/get'
            operationId: JobTargetExecutions_ListByJobExecution
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobExecutionListResult
            objectKey: $.value
        list_by_step:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1executions~1{jobExecutionId}~1steps~1{stepName}~1targets?api-version=2020-11-01-preview/get'
            operationId: JobTargetExecutions_ListByStep
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobExecutionListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1executions~1{jobExecutionId}~1steps~1{stepName}~1targets~1{targetId}?api-version=2020-11-01-preview/get'
            operationId: JobTargetExecutions_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobExecution
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/job_target_executions/methods/get'
          - $ref: '#/components/x-stackQL-resources/job_target_executions/methods/list_by_step'
          - $ref: '#/components/x-stackQL-resources/job_target_executions/methods/list_by_job_execution'
        insert: []
        update: []
        replace: []
        delete: []
    managed_database_security_events:
      id: azure.sql.managed_database_security_events
      name: managed_database_security_events
      title: managed_database_security_events
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1securityEvents?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseSecurityEvents_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SecurityEventCollection
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_security_events/methods/list_by_database'
        insert: []
        update: []
        replace: []
        delete: []
    sensitivity_labels_current_by_databases:
      id: azure.sql.sensitivity_labels_current_by_databases
      name: sensitivity_labels_current_by_databases
      title: sensitivity_labels_current_by_databases
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1currentSensitivityLabels?api-version=2020-11-01-preview/get'
            operationId: SensitivityLabelsCurrentByDatabase_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SensitivityLabelListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/sensitivity_labels_current_by_databases/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    sensitivity_labels:
      id: azure.sql.sensitivity_labels
      name: sensitivity_labels
      title: sensitivity_labels
      methods:
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1currentSensitivityLabels?api-version=2020-11-01-preview/patch'
            operationId: SensitivityLabels_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        enable_recommendation:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns~1{columnName}~1sensitivityLabels~1{sensitivityLabelSource}~1enable?api-version=2020-11-01-preview/post'
            operationId: SensitivityLabels_EnableRecommendation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        disable_recommendation:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns~1{columnName}~1sensitivityLabels~1{sensitivityLabelSource}~1disable?api-version=2020-11-01-preview/post'
            operationId: SensitivityLabels_DisableRecommendation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns~1{columnName}~1sensitivityLabels~1{sensitivityLabelSource}?api-version=2020-11-01-preview/get'
            operationId: SensitivityLabels_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SensitivityLabel
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns~1{columnName}~1sensitivityLabels~1{sensitivityLabelSource}?api-version=2020-11-01-preview/put'
            operationId: SensitivityLabels_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SensitivityLabel
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}~1columns~1{columnName}~1sensitivityLabels~1{sensitivityLabelSource}?api-version=2020-11-01-preview/delete'
            operationId: SensitivityLabels_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/sensitivity_labels/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/sensitivity_labels/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/sensitivity_labels/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/sensitivity_labels/methods/delete'
    sensitivity_labels_recommended_by_databases:
      id: azure.sql.sensitivity_labels_recommended_by_databases
      name: sensitivity_labels_recommended_by_databases
      title: sensitivity_labels_recommended_by_databases
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1recommendedSensitivityLabels?api-version=2020-11-01-preview/get'
            operationId: SensitivityLabelsRecommendedByDatabase_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SensitivityLabelListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/sensitivity_labels_recommended_by_databases/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    recommended_sensitivity_labels:
      id: azure.sql.recommended_sensitivity_labels
      name: recommended_sensitivity_labels
      title: recommended_sensitivity_labels
      methods:
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1recommendedSensitivityLabels?api-version=2020-11-01-preview/patch'
            operationId: RecommendedSensitivityLabels_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/recommended_sensitivity_labels/methods/update'
        replace: []
        delete: []
    database_extensions:
      id: azure.sql.database_extensions
      name: database_extensions
      title: database_extensions
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1extensions~1{extensionName}?api-version=2021-02-01-preview/get'
            operationId: DatabaseExtensions_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1extensions~1{extensionName}?api-version=2021-02-01-preview/put'
            operationId: DatabaseExtensions_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ImportExportExtensionsOperationResult
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1extensions?api-version=2021-02-01-preview/get'
            operationId: DatabaseExtensions_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ImportExportExtensionsOperationListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_extensions/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/database_extensions/methods/create_or_update'
        update: []
        replace: []
        delete: []
    firewall_rules:
      id: azure.sql.firewall_rules
      name: firewall_rules
      title: firewall_rules
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1firewallRules~1{firewallRuleName}?api-version=2020-11-01-preview/get'
            operationId: FirewallRules_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: FirewallRule
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1firewallRules~1{firewallRuleName}?api-version=2020-11-01-preview/put'
            operationId: FirewallRules_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: FirewallRule
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1firewallRules~1{firewallRuleName}?api-version=2020-11-01-preview/delete'
            operationId: FirewallRules_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1firewallRules?api-version=2020-11-01-preview/get'
            operationId: FirewallRules_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: FirewallRuleListResult
            objectKey: $.value
        replace:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1firewallRules?api-version=2020-11-01-preview/put'
            operationId: FirewallRules_Replace
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: FirewallRule
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/firewall_rules/methods/get'
          - $ref: '#/components/x-stackQL-resources/firewall_rules/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/firewall_rules/methods/create_or_update'
        update: []
        replace:
          - $ref: '#/components/x-stackQL-resources/firewall_rules/methods/replace'
        delete:
          - $ref: '#/components/x-stackQL-resources/firewall_rules/methods/delete'
    operations:
      id: azure.sql.operations
      name: operations
      title: operations
      methods:
        list:
          operation:
            $ref: '#/paths/~1providers~1Microsoft.Sql~1operations?api-version=2020-11-01-preview/get'
            operationId: Operations_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: OperationListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    server_azure_ad_only_authentications:
      id: azure.sql.server_azure_ad_only_authentications
      name: server_azure_ad_only_authentications
      title: server_azure_ad_only_authentications
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1azureADOnlyAuthentications~1{authenticationName}?api-version=2020-11-01-preview/get'
            operationId: ServerAzureADOnlyAuthentications_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerAzureADOnlyAuthentication
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1azureADOnlyAuthentications~1{authenticationName}?api-version=2020-11-01-preview/put'
            operationId: ServerAzureADOnlyAuthentications_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerAzureADOnlyAuthentication
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1azureADOnlyAuthentications~1{authenticationName}?api-version=2020-11-01-preview/delete'
            operationId: ServerAzureADOnlyAuthentications_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1azureADOnlyAuthentications?api-version=2020-11-01-preview/get'
            operationId: ServerAzureADOnlyAuthentications_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: AzureADOnlyAuthListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_azure_ad_only_authentications/methods/get'
          - $ref: '#/components/x-stackQL-resources/server_azure_ad_only_authentications/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_azure_ad_only_authentications/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/server_azure_ad_only_authentications/methods/delete'
    vulnerability_assessments_settings:
      id: azure.sql.vulnerability_assessments_settings
      name: vulnerability_assessments_settings
      title: vulnerability_assessments_settings
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments?api-version=2022-11-01-preview/get'
            operationId: SqlVulnerabilityAssessmentsSettings_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SqlVulnerabilityAssessmentListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2022-11-01-preview/get'
            operationId: SqlVulnerabilityAssessmentsSettings_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SqlVulnerabilityAssessment
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2022-11-01-preview/put'
            operationId: SqlVulnerabilityAssessmentsSettings_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SqlVulnerabilityAssessment
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessments_settings/methods/get'
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessments_settings/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessments_settings/methods/create_or_update'
        update: []
        replace: []
        delete: []
    vulnerability_assessments:
      id: azure.sql.vulnerability_assessments
      name: vulnerability_assessments
      title: vulnerability_assessments
      methods:
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2022-11-01-preview/delete'
            operationId: SqlVulnerabilityAssessments_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessments/methods/delete'
    server_trust_groups:
      id: azure.sql.server_trust_groups
      name: server_trust_groups
      title: server_trust_groups
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1serverTrustGroups~1{serverTrustGroupName}?api-version=2020-11-01-preview/get'
            operationId: ServerTrustGroups_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerTrustGroup
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1serverTrustGroups~1{serverTrustGroupName}?api-version=2020-11-01-preview/put'
            operationId: ServerTrustGroups_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerTrustGroup
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1serverTrustGroups~1{serverTrustGroupName}?api-version=2020-11-01-preview/delete'
            operationId: ServerTrustGroups_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_location:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1serverTrustGroups?api-version=2020-11-01-preview/get'
            operationId: ServerTrustGroups_ListByLocation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerTrustGroupListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_trust_groups/methods/get'
          - $ref: '#/components/x-stackQL-resources/server_trust_groups/methods/list_by_location'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_trust_groups/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/server_trust_groups/methods/delete'
    server_trust_groups_by_instances:
      id: azure.sql.server_trust_groups_by_instances
      name: server_trust_groups_by_instances
      title: server_trust_groups_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1serverTrustGroups?api-version=2020-11-01-preview/get'
            operationId: ServerTrustGroupsByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerTrustGroupListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_trust_groups_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    server_advanced_threat_protection_settings:
      id: azure.sql.server_advanced_threat_protection_settings
      name: server_advanced_threat_protection_settings
      title: server_advanced_threat_protection_settings
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1advancedThreatProtectionSettings?api-version=2021-11-01-preview/get'
            operationId: ServerAdvancedThreatProtectionSettings_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LogicalServerAdvancedThreatProtectionListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1advancedThreatProtectionSettings~1{advancedThreatProtectionName}?api-version=2021-11-01-preview/get'
            operationId: ServerAdvancedThreatProtectionSettings_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerAdvancedThreatProtection
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1advancedThreatProtectionSettings~1{advancedThreatProtectionName}?api-version=2021-11-01-preview/put'
            operationId: ServerAdvancedThreatProtectionSettings_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerAdvancedThreatProtection
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_advanced_threat_protection_settings/methods/get'
          - $ref: '#/components/x-stackQL-resources/server_advanced_threat_protection_settings/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_advanced_threat_protection_settings/methods/create_or_update'
        update: []
        replace: []
        delete: []
    managed_database_security_alert_policies:
      id: azure.sql.managed_database_security_alert_policies
      name: managed_database_security_alert_policies
      title: managed_database_security_alert_policies
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1securityAlertPolicies~1{securityAlertPolicyName}?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseSecurityAlertPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabaseSecurityAlertPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1securityAlertPolicies~1{securityAlertPolicyName}?api-version=2020-11-01-preview/put'
            operationId: ManagedDatabaseSecurityAlertPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabaseSecurityAlertPolicy
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1securityAlertPolicies?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseSecurityAlertPolicies_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabaseSecurityAlertPolicyListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_security_alert_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_database_security_alert_policies/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_database_security_alert_policies/methods/create_or_update'
        update: []
        replace: []
        delete: []
    managed_instance_long_term_retention_policies:
      id: azure.sql.managed_instance_long_term_retention_policies
      name: managed_instance_long_term_retention_policies
      title: managed_instance_long_term_retention_policies
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1backupLongTermRetentionPolicies~1{policyName}?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceLongTermRetentionPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceLongTermRetentionPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1backupLongTermRetentionPolicies~1{policyName}?api-version=2020-11-01-preview/put'
            operationId: ManagedInstanceLongTermRetentionPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceLongTermRetentionPolicy
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1backupLongTermRetentionPolicies?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceLongTermRetentionPolicies_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceLongTermRetentionPolicyListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_long_term_retention_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_instance_long_term_retention_policies/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_instance_long_term_retention_policies/methods/create_or_update'
        update: []
        replace: []
        delete: []
    job_steps:
      id: azure.sql.job_steps
      name: job_steps
      title: job_steps
      methods:
        list_by_version:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1versions~1{jobVersion}~1steps?api-version=2020-11-01-preview/get'
            operationId: JobSteps_ListByVersion
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobStepListResult
            objectKey: $.value
        get_by_version:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1versions~1{jobVersion}~1steps~1{stepName}?api-version=2020-11-01-preview/get'
            operationId: JobSteps_GetByVersion
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobStep
        list_by_job:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1steps?api-version=2020-11-01-preview/get'
            operationId: JobSteps_ListByJob
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobStepListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1steps~1{stepName}?api-version=2020-11-01-preview/get'
            operationId: JobSteps_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobStep
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1steps~1{stepName}?api-version=2020-11-01-preview/put'
            operationId: JobSteps_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobStep
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1steps~1{stepName}?api-version=2020-11-01-preview/delete'
            operationId: JobSteps_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/job_steps/methods/get_by_version'
          - $ref: '#/components/x-stackQL-resources/job_steps/methods/list_by_version'
          - $ref: '#/components/x-stackQL-resources/job_steps/methods/get'
          - $ref: '#/components/x-stackQL-resources/job_steps/methods/list_by_job'
        insert:
          - $ref: '#/components/x-stackQL-resources/job_steps/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/job_steps/methods/delete'
    server_advisors:
      id: azure.sql.server_advisors
      name: server_advisors
      title: server_advisors
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1advisors?api-version=2020-11-01-preview/get'
            operationId: ServerAdvisors_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1advisors~1{advisorName}?api-version=2020-11-01-preview/get'
            operationId: ServerAdvisors_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Advisor
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1advisors~1{advisorName}?api-version=2020-11-01-preview/patch'
            operationId: ServerAdvisors_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Advisor
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_advisors/methods/get'
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/server_advisors/methods/update'
        replace: []
        delete: []
    managed_instance_encryption_protectors:
      id: azure.sql.managed_instance_encryption_protectors
      name: managed_instance_encryption_protectors
      title: managed_instance_encryption_protectors
      methods:
        revalidate:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1encryptionProtector~1{encryptionProtectorName}~1revalidate?api-version=2020-11-01-preview/post'
            operationId: ManagedInstanceEncryptionProtectors_Revalidate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1encryptionProtector~1{encryptionProtectorName}?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceEncryptionProtectors_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceEncryptionProtector
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1encryptionProtector~1{encryptionProtectorName}?api-version=2020-11-01-preview/put'
            operationId: ManagedInstanceEncryptionProtectors_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceEncryptionProtector
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_encryption_protectors/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_instance_encryption_protectors/methods/create_or_update'
        update: []
        replace: []
        delete: []
    managed_instance_encryption_protectors_by_instances:
      id: azure.sql.managed_instance_encryption_protectors_by_instances
      name: managed_instance_encryption_protectors_by_instances
      title: managed_instance_encryption_protectors_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1encryptionProtector?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceEncryptionProtectorsByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceEncryptionProtectorListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_encryption_protectors_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    database_sql_vulnerability_assessment_rule_baselines:
      id: azure.sql.database_sql_vulnerability_assessment_rule_baselines
      name: database_sql_vulnerability_assessment_rule_baselines
      title: database_sql_vulnerability_assessment_rule_baselines
      methods:
        list_by_baseline:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines~1{baselineName}~1rules?api-version=2022-11-01-preview/get'
            operationId: DatabaseSqlVulnerabilityAssessmentRuleBaselines_ListByBaseline
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSqlVulnerabilityAssessmentRuleBaselineListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines~1{baselineName}~1rules~1{ruleId}?api-version=2022-11-01-preview/get'
            operationId: DatabaseSqlVulnerabilityAssessmentRuleBaselines_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSqlVulnerabilityAssessmentRuleBaseline
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines~1{baselineName}~1rules~1{ruleId}?api-version=2022-11-01-preview/put'
            operationId: DatabaseSqlVulnerabilityAssessmentRuleBaselines_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSqlVulnerabilityAssessmentRuleBaseline
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines~1{baselineName}~1rules~1{ruleId}?api-version=2022-11-01-preview/delete'
            operationId: DatabaseSqlVulnerabilityAssessmentRuleBaselines_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_sql_vulnerability_assessment_rule_baselines/methods/get'
          - $ref: '#/components/x-stackQL-resources/database_sql_vulnerability_assessment_rule_baselines/methods/list_by_baseline'
        insert:
          - $ref: '#/components/x-stackQL-resources/database_sql_vulnerability_assessment_rule_baselines/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/database_sql_vulnerability_assessment_rule_baselines/methods/delete'
    server_security_alert_policies:
      id: azure.sql.server_security_alert_policies
      name: server_security_alert_policies
      title: server_security_alert_policies
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1securityAlertPolicies~1{securityAlertPolicyName}?api-version=2020-11-01-preview/get'
            operationId: ServerSecurityAlertPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerSecurityAlertPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1securityAlertPolicies~1{securityAlertPolicyName}?api-version=2020-11-01-preview/put'
            operationId: ServerSecurityAlertPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerSecurityAlertPolicy
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1securityAlertPolicies?api-version=2020-11-01-preview/get'
            operationId: ServerSecurityAlertPolicies_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LogicalServerSecurityAlertPolicyListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_security_alert_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/server_security_alert_policies/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_security_alert_policies/methods/create_or_update'
        update: []
        replace: []
        delete: []
    servers:
      id: azure.sql.servers
      name: servers
      title: servers
      methods:
        check_name_availability:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1checkNameAvailability?api-version=2023-05-01-preview/post'
            operationId: Servers_CheckNameAvailability
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: CheckNameAvailabilityResponse
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1servers?api-version=2023-05-01-preview/get'
            operationId: Servers_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerListResult
            objectKey: $.value
        list_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers?api-version=2023-05-01-preview/get'
            operationId: Servers_ListByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}?api-version=2023-05-01-preview/get'
            operationId: Servers_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Server
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}?api-version=2023-05-01-preview/put'
            operationId: Servers_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Server
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}?api-version=2023-05-01-preview/delete'
            operationId: Servers_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}?api-version=2023-05-01-preview/patch'
            operationId: Servers_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Server
        import_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1import?api-version=2023-05-01-preview/post'
            operationId: Servers_ImportDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ImportExportOperationResult
        refresh_status:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1refreshExternalGovernanceStatus?api-version=2023-05-01-preview/post'
            operationId: Servers_RefreshStatus
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RefreshExternalGovernanceStatusOperationResult
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/servers/methods/get'
          - $ref: '#/components/x-stackQL-resources/servers/methods/list_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/servers/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/servers/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/servers/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/servers/methods/delete'
    database_recommended_actions:
      id: azure.sql.database_recommended_actions
      name: database_recommended_actions
      title: database_recommended_actions
      methods:
        list_by_database_advisor:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1advisors~1{advisorName}~1recommendedActions?api-version=2020-11-01-preview/get'
            operationId: DatabaseRecommendedActions_ListByDatabaseAdvisor
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1advisors~1{advisorName}~1recommendedActions~1{recommendedActionName}?api-version=2020-11-01-preview/get'
            operationId: DatabaseRecommendedActions_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RecommendedAction
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1advisors~1{advisorName}~1recommendedActions~1{recommendedActionName}?api-version=2020-11-01-preview/patch'
            operationId: DatabaseRecommendedActions_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RecommendedAction
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_recommended_actions/methods/get'
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/database_recommended_actions/methods/update'
        replace: []
        delete: []
    server_dev_ops_audit_settings:
      id: azure.sql.server_dev_ops_audit_settings
      name: server_dev_ops_audit_settings
      title: server_dev_ops_audit_settings
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1devOpsAuditingSettings?api-version=2022-02-01-preview/get'
            operationId: ServerDevOpsAuditSettings_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerDevOpsAuditSettingsListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1devOpsAuditingSettings~1{devOpsAuditingSettingsName}?api-version=2022-02-01-preview/get'
            operationId: ServerDevOpsAuditSettings_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerDevOpsAuditingSettings
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1devOpsAuditingSettings~1{devOpsAuditingSettingsName}?api-version=2022-02-01-preview/put'
            operationId: ServerDevOpsAuditSettings_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerDevOpsAuditingSettings
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_dev_ops_audit_settings/methods/get'
          - $ref: '#/components/x-stackQL-resources/server_dev_ops_audit_settings/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_dev_ops_audit_settings/methods/create_or_update'
        update: []
        replace: []
        delete: []
    database_sql_vulnerability_assessment_scans:
      id: azure.sql.database_sql_vulnerability_assessment_scans
      name: database_sql_vulnerability_assessment_scans
      title: database_sql_vulnerability_assessment_scans
      methods:
        list_by_sql_vulnerability_assessments:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans?api-version=2022-11-01-preview/get'
            operationId: DatabaseSqlVulnerabilityAssessmentScans_ListBySqlVulnerabilityAssessments
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SqlVulnerabilityAssessmentScanRecordListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans~1{scanId}?api-version=2022-11-01-preview/get'
            operationId: DatabaseSqlVulnerabilityAssessmentScans_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SqlVulnerabilityAssessmentScanRecord
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_sql_vulnerability_assessment_scans/methods/get'
          - $ref: '#/components/x-stackQL-resources/database_sql_vulnerability_assessment_scans/methods/list_by_sql_vulnerability_assessments'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instance_private_endpoint_connections:
      id: azure.sql.managed_instance_private_endpoint_connections
      name: managed_instance_private_endpoint_connections
      title: managed_instance_private_endpoint_connections
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1privateEndpointConnections~1{privateEndpointConnectionName}?api-version=2020-11-01-preview/get'
            operationId: ManagedInstancePrivateEndpointConnections_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstancePrivateEndpointConnection
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1privateEndpointConnections~1{privateEndpointConnectionName}?api-version=2020-11-01-preview/put'
            operationId: ManagedInstancePrivateEndpointConnections_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstancePrivateEndpointConnection
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1privateEndpointConnections~1{privateEndpointConnectionName}?api-version=2020-11-01-preview/delete'
            operationId: ManagedInstancePrivateEndpointConnections_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_private_endpoint_connections/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_instance_private_endpoint_connections/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/managed_instance_private_endpoint_connections/methods/delete'
    managed_instance_private_endpoint_connections_by_managed_instances:
      id: azure.sql.managed_instance_private_endpoint_connections_by_managed_instances
      name: managed_instance_private_endpoint_connections_by_managed_instances
      title: managed_instance_private_endpoint_connections_by_managed_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1privateEndpointConnections?api-version=2020-11-01-preview/get'
            operationId: ManagedInstancePrivateEndpointConnectionsByManagedInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstancePrivateEndpointConnectionListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_private_endpoint_connections_by_managed_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instance_operations_by_managed_instances:
      id: azure.sql.managed_instance_operations_by_managed_instances
      name: managed_instance_operations_by_managed_instances
      title: managed_instance_operations_by_managed_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1operations?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceOperationsByManagedInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceOperationListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_operations_by_managed_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instance_operations:
      id: azure.sql.managed_instance_operations
      name: managed_instance_operations
      title: managed_instance_operations
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1operations~1{operationId}?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceOperations_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceOperation
        cancel:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1operations~1{operationId}~1cancel?api-version=2020-11-01-preview/post'
            operationId: ManagedInstanceOperations_Cancel
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_operations/methods/get'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instance_vulnerability_assessments:
      id: azure.sql.managed_instance_vulnerability_assessments
      name: managed_instance_vulnerability_assessments
      title: managed_instance_vulnerability_assessments
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceVulnerabilityAssessments_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceVulnerabilityAssessment
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2020-11-01-preview/put'
            operationId: ManagedInstanceVulnerabilityAssessments_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceVulnerabilityAssessment
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2020-11-01-preview/delete'
            operationId: ManagedInstanceVulnerabilityAssessments_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_vulnerability_assessments/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_instance_vulnerability_assessments/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/managed_instance_vulnerability_assessments/methods/delete'
    managed_instance_vulnerability_assessments_by_instances:
      id: azure.sql.managed_instance_vulnerability_assessments_by_instances
      name: managed_instance_vulnerability_assessments_by_instances
      title: managed_instance_vulnerability_assessments_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1vulnerabilityAssessments?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceVulnerabilityAssessmentsByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceVulnerabilityAssessmentListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_vulnerability_assessments_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    recoverable_managed_databases_by_instances:
      id: azure.sql.recoverable_managed_databases_by_instances
      name: recoverable_managed_databases_by_instances
      title: recoverable_managed_databases_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1recoverableDatabases?api-version=2020-11-01-preview/get'
            operationId: RecoverableManagedDatabasesByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RecoverableManagedDatabaseListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/recoverable_managed_databases_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    recoverable_managed_databases:
      id: azure.sql.recoverable_managed_databases
      name: recoverable_managed_databases
      title: recoverable_managed_databases
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1recoverableDatabases~1{recoverableDatabaseName}?api-version=2020-11-01-preview/get'
            operationId: RecoverableManagedDatabases_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RecoverableManagedDatabase
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/recoverable_managed_databases/methods/get'
        insert: []
        update: []
        replace: []
        delete: []
    agents:
      id: azure.sql.agents
      name: agents
      title: agents
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1sqlAgent~1current?api-version=2020-11-01-preview/get'
            operationId: SqlAgent_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SqlAgentConfiguration
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1sqlAgent~1current?api-version=2020-11-01-preview/put'
            operationId: SqlAgent_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SqlAgentConfiguration
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/agents/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/agents/methods/create_or_update'
        update: []
        replace: []
        delete: []
    server_connection_policies:
      id: azure.sql.server_connection_policies
      name: server_connection_policies
      title: server_connection_policies
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1connectionPolicies~1{connectionPolicyName}?api-version=2021-05-01-preview/get'
            operationId: ServerConnectionPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerConnectionPolicy
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1connectionPolicies~1{connectionPolicyName}?api-version=2021-05-01-preview/put'
            operationId: ServerConnectionPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerConnectionPolicy
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1connectionPolicies?api-version=2021-05-01-preview/get'
            operationId: ServerConnectionPolicies_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerConnectionPolicyListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_connection_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/server_connection_policies/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_connection_policies/methods/create_or_update'
        update: []
        replace: []
        delete: []
    long_term_retention_managed_instance_backups:
      id: azure.sql.long_term_retention_managed_instance_backups
      name: long_term_retention_managed_instance_backups
      title: long_term_retention_managed_instance_backups
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionManagedInstances~1{managedInstanceName}~1longTermRetentionDatabases~1{databaseName}~1longTermRetentionManagedInstanceBackups~1{backupName}?api-version=2021-05-01-preview/get'
            operationId: LongTermRetentionManagedInstanceBackups_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceLongTermRetentionBackup
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionManagedInstances~1{managedInstanceName}~1longTermRetentionDatabases~1{databaseName}~1longTermRetentionManagedInstanceBackups~1{backupName}?api-version=2021-05-01-preview/delete'
            operationId: LongTermRetentionManagedInstanceBackups_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionManagedInstances~1{managedInstanceName}~1longTermRetentionDatabases~1{databaseName}~1longTermRetentionManagedInstanceBackups?api-version=2021-05-01-preview/get'
            operationId: LongTermRetentionManagedInstanceBackups_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceLongTermRetentionBackupListResult
            objectKey: $.value
        list_by_location:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionManagedInstanceBackups?api-version=2021-05-01-preview/get'
            operationId: LongTermRetentionManagedInstanceBackups_ListByLocation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceLongTermRetentionBackupListResult
            objectKey: $.value
        get_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionManagedInstances~1{managedInstanceName}~1longTermRetentionDatabases~1{databaseName}~1longTermRetentionManagedInstanceBackups~1{backupName}?api-version=2021-05-01-preview/get'
            operationId: LongTermRetentionManagedInstanceBackups_GetByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceLongTermRetentionBackup
        delete_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionManagedInstances~1{managedInstanceName}~1longTermRetentionDatabases~1{databaseName}~1longTermRetentionManagedInstanceBackups~1{backupName}?api-version=2021-05-01-preview/delete'
            operationId: LongTermRetentionManagedInstanceBackups_DeleteByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_resource_group_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionManagedInstances~1{managedInstanceName}~1longTermRetentionDatabases~1{databaseName}~1longTermRetentionManagedInstanceBackups?api-version=2021-05-01-preview/get'
            operationId: LongTermRetentionManagedInstanceBackups_ListByResourceGroupDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceLongTermRetentionBackupListResult
            objectKey: $.value
        list_by_resource_group_location:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionManagedInstanceBackups?api-version=2021-05-01-preview/get'
            operationId: LongTermRetentionManagedInstanceBackups_ListByResourceGroupLocation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceLongTermRetentionBackupListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/long_term_retention_managed_instance_backups/methods/get_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_managed_instance_backups/methods/get'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_managed_instance_backups/methods/list_by_resource_group_database'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_managed_instance_backups/methods/list_by_database'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_managed_instance_backups/methods/list_by_resource_group_location'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_managed_instance_backups/methods/list_by_location'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/long_term_retention_managed_instance_backups/methods/delete_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/long_term_retention_managed_instance_backups/methods/delete'
    long_term_retention_managed_instance_backups_by_instances:
      id: azure.sql.long_term_retention_managed_instance_backups_by_instances
      name: long_term_retention_managed_instance_backups_by_instances
      title: long_term_retention_managed_instance_backups_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionManagedInstances~1{managedInstanceName}~1longTermRetentionManagedInstanceBackups?api-version=2021-05-01-preview/get'
            operationId: LongTermRetentionManagedInstanceBackupsByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceLongTermRetentionBackupListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/long_term_retention_managed_instance_backups_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    long_term_retention_managed_instance_backups_by_resource_group_instances:
      id: azure.sql.long_term_retention_managed_instance_backups_by_resource_group_instances
      name: long_term_retention_managed_instance_backups_by_resource_group_instances
      title: long_term_retention_managed_instance_backups_by_resource_group_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1longTermRetentionManagedInstances~1{managedInstanceName}~1longTermRetentionManagedInstanceBackups?api-version=2021-05-01-preview/get'
            operationId: LongTermRetentionManagedInstanceBackupsByResourceGroupInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceLongTermRetentionBackupListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/long_term_retention_managed_instance_backups_by_resource_group_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    database_tables:
      id: azure.sql.database_tables
      name: database_tables
      title: database_tables
      methods:
        list_by_schema:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables?api-version=2020-11-01-preview/get'
            operationId: DatabaseTables_ListBySchema
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseTableListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1schemas~1{schemaName}~1tables~1{tableName}?api-version=2020-11-01-preview/get'
            operationId: DatabaseTables_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseTable
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_tables/methods/get'
          - $ref: '#/components/x-stackQL-resources/database_tables/methods/list_by_schema'
        insert: []
        update: []
        replace: []
        delete: []
    ledger_digest_uploads:
      id: azure.sql.ledger_digest_uploads
      name: ledger_digest_uploads
      title: ledger_digest_uploads
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1ledgerDigestUploads~1{ledgerDigestUploads}?api-version=2021-02-01-preview/get'
            operationId: LedgerDigestUploads_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LedgerDigestUploads
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1ledgerDigestUploads~1{ledgerDigestUploads}?api-version=2021-02-01-preview/put'
            operationId: LedgerDigestUploads_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LedgerDigestUploads
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1ledgerDigestUploads?api-version=2021-02-01-preview/get'
            operationId: LedgerDigestUploads_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LedgerDigestUploadsListResult
            objectKey: $.value
        disable:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1ledgerDigestUploads~1{ledgerDigestUploads}~1disable?api-version=2021-02-01-preview/post'
            operationId: LedgerDigestUploads_Disable
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LedgerDigestUploads
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/ledger_digest_uploads/methods/get'
          - $ref: '#/components/x-stackQL-resources/ledger_digest_uploads/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/ledger_digest_uploads/methods/create_or_update'
        update: []
        replace: []
        delete: []
    managed_server_dns_aliases_by_managed_instances:
      id: azure.sql.managed_server_dns_aliases_by_managed_instances
      name: managed_server_dns_aliases_by_managed_instances
      title: managed_server_dns_aliases_by_managed_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1dnsAliases?api-version=2021-11-01-preview/get'
            operationId: ManagedServerDnsAliasesByManagedInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedServerDnsAliasListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_server_dns_aliases_by_managed_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_server_dns_aliases:
      id: azure.sql.managed_server_dns_aliases
      name: managed_server_dns_aliases
      title: managed_server_dns_aliases
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1dnsAliases~1{dnsAliasName}?api-version=2021-11-01-preview/get'
            operationId: ManagedServerDnsAliases_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedServerDnsAlias
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1dnsAliases~1{dnsAliasName}?api-version=2021-11-01-preview/put'
            operationId: ManagedServerDnsAliases_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedServerDnsAlias
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1dnsAliases~1{dnsAliasName}?api-version=2021-11-01-preview/delete'
            operationId: ManagedServerDnsAliases_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        acquire:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1dnsAliases~1{dnsAliasName}~1acquire?api-version=2021-11-01-preview/post'
            operationId: ManagedServerDnsAliases_Acquire
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedServerDnsAlias
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_server_dns_aliases/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_server_dns_aliases/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/managed_server_dns_aliases/methods/delete'
    managed_instance_advanced_threat_protection_settings_by_instances:
      id: azure.sql.managed_instance_advanced_threat_protection_settings_by_instances
      name: managed_instance_advanced_threat_protection_settings_by_instances
      title: managed_instance_advanced_threat_protection_settings_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1advancedThreatProtectionSettings?api-version=2022-02-01-preview/get'
            operationId: ManagedInstanceAdvancedThreatProtectionSettingsByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceAdvancedThreatProtectionListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_advanced_threat_protection_settings_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instance_advanced_threat_protection_settings:
      id: azure.sql.managed_instance_advanced_threat_protection_settings
      name: managed_instance_advanced_threat_protection_settings
      title: managed_instance_advanced_threat_protection_settings
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1advancedThreatProtectionSettings~1{advancedThreatProtectionName}?api-version=2022-02-01-preview/get'
            operationId: ManagedInstanceAdvancedThreatProtectionSettings_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceAdvancedThreatProtection
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1advancedThreatProtectionSettings~1{advancedThreatProtectionName}?api-version=2022-02-01-preview/put'
            operationId: ManagedInstanceAdvancedThreatProtectionSettings_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceAdvancedThreatProtection
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_advanced_threat_protection_settings/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_instance_advanced_threat_protection_settings/methods/create_or_update'
        update: []
        replace: []
        delete: []
    distributed_availability_groups_by_instances:
      id: azure.sql.distributed_availability_groups_by_instances
      name: distributed_availability_groups_by_instances
      title: distributed_availability_groups_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1distributedAvailabilityGroups?api-version=2021-11-01-preview/get'
            operationId: DistributedAvailabilityGroupsByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DistributedAvailabilityGroupsListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/distributed_availability_groups_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    distributed_availability_groups:
      id: azure.sql.distributed_availability_groups
      name: distributed_availability_groups
      title: distributed_availability_groups
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1distributedAvailabilityGroups~1{distributedAvailabilityGroupName}?api-version=2021-11-01-preview/get'
            operationId: DistributedAvailabilityGroups_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DistributedAvailabilityGroup
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1distributedAvailabilityGroups~1{distributedAvailabilityGroupName}?api-version=2021-11-01-preview/put'
            operationId: DistributedAvailabilityGroups_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DistributedAvailabilityGroup
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1distributedAvailabilityGroups~1{distributedAvailabilityGroupName}?api-version=2021-11-01-preview/delete'
            operationId: DistributedAvailabilityGroups_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1distributedAvailabilityGroups~1{distributedAvailabilityGroupName}?api-version=2021-11-01-preview/patch'
            operationId: DistributedAvailabilityGroups_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DistributedAvailabilityGroup
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/distributed_availability_groups/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/distributed_availability_groups/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/distributed_availability_groups/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/distributed_availability_groups/methods/delete'
    job_step_executions:
      id: azure.sql.job_step_executions
      name: job_step_executions
      title: job_step_executions
      methods:
        list_by_job_execution:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1executions~1{jobExecutionId}~1steps?api-version=2020-11-01-preview/get'
            operationId: JobStepExecutions_ListByJobExecution
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobExecutionListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1executions~1{jobExecutionId}~1steps~1{stepName}?api-version=2020-11-01-preview/get'
            operationId: JobStepExecutions_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobExecution
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/job_step_executions/methods/get'
          - $ref: '#/components/x-stackQL-resources/job_step_executions/methods/list_by_job_execution'
        insert: []
        update: []
        replace: []
        delete: []
    job_private_endpoints:
      id: azure.sql.job_private_endpoints
      name: job_private_endpoints
      title: job_private_endpoints
      methods:
        list_by_agent:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1privateEndpoints?api-version=2023-05-01-preview/get'
            operationId: JobPrivateEndpoints_ListByAgent
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobPrivateEndpointListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1privateEndpoints~1{privateEndpointName}?api-version=2023-05-01-preview/get'
            operationId: JobPrivateEndpoints_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobPrivateEndpoint
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1privateEndpoints~1{privateEndpointName}?api-version=2023-05-01-preview/put'
            operationId: JobPrivateEndpoints_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobPrivateEndpoint
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1privateEndpoints~1{privateEndpointName}?api-version=2023-05-01-preview/delete'
            operationId: JobPrivateEndpoints_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/job_private_endpoints/methods/get'
          - $ref: '#/components/x-stackQL-resources/job_private_endpoints/methods/list_by_agent'
        insert:
          - $ref: '#/components/x-stackQL-resources/job_private_endpoints/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/job_private_endpoints/methods/delete'
    encryption_protectors:
      id: azure.sql.encryption_protectors
      name: encryption_protectors
      title: encryption_protectors
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1encryptionProtector?api-version=2020-11-01-preview/get'
            operationId: EncryptionProtectors_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: EncryptionProtectorListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1encryptionProtector~1{encryptionProtectorName}?api-version=2020-11-01-preview/get'
            operationId: EncryptionProtectors_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: EncryptionProtector
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1encryptionProtector~1{encryptionProtectorName}?api-version=2020-11-01-preview/put'
            operationId: EncryptionProtectors_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: EncryptionProtector
        revalidate:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1encryptionProtector~1{encryptionProtectorName}~1revalidate?api-version=2020-11-01-preview/post'
            operationId: EncryptionProtectors_Revalidate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/encryption_protectors/methods/get'
          - $ref: '#/components/x-stackQL-resources/encryption_protectors/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/encryption_protectors/methods/create_or_update'
        update: []
        replace: []
        delete: []
    database_sql_vulnerability_assessment_scan_results:
      id: azure.sql.database_sql_vulnerability_assessment_scan_results
      name: database_sql_vulnerability_assessment_scan_results
      title: database_sql_vulnerability_assessment_scan_results
      methods:
        list_by_scan:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans~1{scanId}~1scanResults?api-version=2022-11-01-preview/get'
            operationId: DatabaseSqlVulnerabilityAssessmentScanResult_ListByScan
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SQLVulnerabilityAssessmentScanListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans~1{scanId}~1scanResults~1{scanResultId}?api-version=2022-11-01-preview/get'
            operationId: DatabaseSqlVulnerabilityAssessmentScanResult_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SqlVulnerabilityAssessmentScanResults
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_sql_vulnerability_assessment_scan_results/methods/get'
          - $ref: '#/components/x-stackQL-resources/database_sql_vulnerability_assessment_scan_results/methods/list_by_scan'
        insert: []
        update: []
        replace: []
        delete: []
    maintenance_window_options:
      id: azure.sql.maintenance_window_options
      name: maintenance_window_options
      title: maintenance_window_options
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1maintenanceWindowOptions~1current?api-version=2020-11-01-preview/get'
            operationId: MaintenanceWindowOptions_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: MaintenanceWindowOptions
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/maintenance_window_options/methods/get'
        insert: []
        update: []
        replace: []
        delete: []
    elastic_pools:
      id: azure.sql.elastic_pools
      name: elastic_pools
      title: elastic_pools
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1elasticPools?api-version=2022-08-01-preview/get'
            operationId: ElasticPools_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ElasticPoolListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1elasticPools~1{elasticPoolName}?api-version=2022-08-01-preview/get'
            operationId: ElasticPools_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ElasticPool
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1elasticPools~1{elasticPoolName}?api-version=2022-08-01-preview/put'
            operationId: ElasticPools_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ElasticPool
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1elasticPools~1{elasticPoolName}?api-version=2022-08-01-preview/delete'
            operationId: ElasticPools_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1elasticPools~1{elasticPoolName}?api-version=2022-08-01-preview/patch'
            operationId: ElasticPools_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ElasticPool
        failover:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1elasticPools~1{elasticPoolName}~1failover?api-version=2022-08-01-preview/post'
            operationId: ElasticPools_Failover
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/elastic_pools/methods/get'
          - $ref: '#/components/x-stackQL-resources/elastic_pools/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/elastic_pools/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/elastic_pools/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/elastic_pools/methods/delete'
    job_versions:
      id: azure.sql.job_versions
      name: job_versions
      title: job_versions
      methods:
        list_by_job:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1versions?api-version=2020-11-01-preview/get'
            operationId: JobVersions_ListByJob
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobVersionListResult
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}~1versions~1{jobVersion}?api-version=2020-11-01-preview/get'
            operationId: JobVersions_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobVersion
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/job_versions/methods/get'
          - $ref: '#/components/x-stackQL-resources/job_versions/methods/list_by_job'
        insert: []
        update: []
        replace: []
        delete: []
    database_sql_vulnerability_assessments_settings:
      id: azure.sql.database_sql_vulnerability_assessments_settings
      name: database_sql_vulnerability_assessments_settings
      title: database_sql_vulnerability_assessments_settings
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments?api-version=2022-11-01-preview/get'
            operationId: DatabaseSqlVulnerabilityAssessmentsSettings_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SqlVulnerabilityAssessmentListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}?api-version=2022-11-01-preview/get'
            operationId: DatabaseSqlVulnerabilityAssessmentsSettings_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SqlVulnerabilityAssessment
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_sql_vulnerability_assessments_settings/methods/get'
          - $ref: '#/components/x-stackQL-resources/database_sql_vulnerability_assessments_settings/methods/list_by_database'
        insert: []
        update: []
        replace: []
        delete: []
    start_stop_managed_instance_schedules_by_instances:
      id: azure.sql.start_stop_managed_instance_schedules_by_instances
      name: start_stop_managed_instance_schedules_by_instances
      title: start_stop_managed_instance_schedules_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1startStopSchedules?api-version=2022-08-01-preview/get'
            operationId: StartStopManagedInstanceSchedulesByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: StartStopManagedInstanceScheduleListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/start_stop_managed_instance_schedules_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    start_stop_managed_instance_schedules:
      id: azure.sql.start_stop_managed_instance_schedules
      name: start_stop_managed_instance_schedules
      title: start_stop_managed_instance_schedules
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1startStopSchedules~1{startStopScheduleName}?api-version=2022-08-01-preview/get'
            operationId: StartStopManagedInstanceSchedules_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: StartStopManagedInstanceSchedule
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1startStopSchedules~1{startStopScheduleName}?api-version=2022-08-01-preview/put'
            operationId: StartStopManagedInstanceSchedules_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: StartStopManagedInstanceSchedule
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1startStopSchedules~1{startStopScheduleName}?api-version=2022-08-01-preview/delete'
            operationId: StartStopManagedInstanceSchedules_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/start_stop_managed_instance_schedules/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/start_stop_managed_instance_schedules/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/start_stop_managed_instance_schedules/methods/delete'
    vulnerability_assessment_baselines:
      id: azure.sql.vulnerability_assessment_baselines
      name: vulnerability_assessment_baselines
      title: vulnerability_assessment_baselines
      methods:
        list_by_sql_vulnerability_assessment:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines?api-version=2022-11-01-preview/get'
            operationId: SqlVulnerabilityAssessmentBaseline_ListBySqlVulnerabilityAssessment
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSqlVulnerabilityAssessmentBaselineSetListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines~1{baselineName}?api-version=2022-11-01-preview/get'
            operationId: SqlVulnerabilityAssessmentBaseline_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSqlVulnerabilityAssessmentBaselineSet
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines~1{baselineName}?api-version=2022-11-01-preview/put'
            operationId: SqlVulnerabilityAssessmentBaselines_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSqlVulnerabilityAssessmentBaselineSet
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessment_baselines/methods/get'
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessment_baselines/methods/list_by_sql_vulnerability_assessment'
        insert:
          - $ref: '#/components/x-stackQL-resources/vulnerability_assessment_baselines/methods/create_or_update'
        update: []
        replace: []
        delete: []
    database_sql_vulnerability_assessment_baselines:
      id: azure.sql.database_sql_vulnerability_assessment_baselines
      name: database_sql_vulnerability_assessment_baselines
      title: database_sql_vulnerability_assessment_baselines
      methods:
        list_by_sql_vulnerability_assessment:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines?api-version=2022-11-01-preview/get'
            operationId: DatabaseSqlVulnerabilityAssessmentBaselines_ListBySqlVulnerabilityAssessment
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSqlVulnerabilityAssessmentBaselineSetListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines~1{baselineName}?api-version=2022-11-01-preview/get'
            operationId: DatabaseSqlVulnerabilityAssessmentBaselines_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSqlVulnerabilityAssessmentBaselineSet
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1sqlVulnerabilityAssessments~1{vulnerabilityAssessmentName}~1baselines~1{baselineName}?api-version=2022-11-01-preview/put'
            operationId: DatabaseSqlVulnerabilityAssessmentBaselines_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseSqlVulnerabilityAssessmentBaselineSet
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_sql_vulnerability_assessment_baselines/methods/get'
          - $ref: '#/components/x-stackQL-resources/database_sql_vulnerability_assessment_baselines/methods/list_by_sql_vulnerability_assessment'
        insert:
          - $ref: '#/components/x-stackQL-resources/database_sql_vulnerability_assessment_baselines/methods/create_or_update'
        update: []
        replace: []
        delete: []
    sync_groups_sync_database_ids:
      id: azure.sql.sync_groups_sync_database_ids
      name: sync_groups_sync_database_ids
      title: sync_groups_sync_database_ids
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1syncDatabaseIds?api-version=2020-11-01-preview/get'
            operationId: SyncGroupsSyncDatabaseIds_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncDatabaseIdListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/sync_groups_sync_database_ids/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    sync_groups:
      id: azure.sql.sync_groups
      name: sync_groups
      title: sync_groups
      methods:
        refresh_hub_schema:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}~1refreshHubSchema?api-version=2020-11-01-preview/post'
            operationId: SyncGroups_RefreshHubSchema
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel_sync:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}~1cancelSync?api-version=2020-11-01-preview/post'
            operationId: SyncGroups_CancelSync
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        trigger_sync:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}~1triggerSync?api-version=2020-11-01-preview/post'
            operationId: SyncGroups_TriggerSync
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}?api-version=2020-11-01-preview/get'
            operationId: SyncGroups_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncGroup
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}?api-version=2020-11-01-preview/put'
            operationId: SyncGroups_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncGroup
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}?api-version=2020-11-01-preview/delete'
            operationId: SyncGroups_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}?api-version=2020-11-01-preview/patch'
            operationId: SyncGroups_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncGroup
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups?api-version=2020-11-01-preview/get'
            operationId: SyncGroups_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncGroupListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/sync_groups/methods/get'
          - $ref: '#/components/x-stackQL-resources/sync_groups/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/sync_groups/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/sync_groups/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/sync_groups/methods/delete'
    sync_groups_hub_schemas:
      id: azure.sql.sync_groups_hub_schemas
      name: sync_groups_hub_schemas
      title: sync_groups_hub_schemas
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}~1hubSchemas?api-version=2020-11-01-preview/get'
            operationId: SyncGroupsHubSchemas_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncFullSchemaPropertiesListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/sync_groups_hub_schemas/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    sync_groups_logs:
      id: azure.sql.sync_groups_logs
      name: sync_groups_logs
      title: sync_groups_logs
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1syncGroups~1{syncGroupName}~1logs?api-version=2020-11-01-preview/get'
            operationId: SyncGroupsLogs_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: SyncGroupLogListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/sync_groups_logs/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    restorable_dropped_databases:
      id: azure.sql.restorable_dropped_databases
      name: restorable_dropped_databases
      title: restorable_dropped_databases
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1restorableDroppedDatabases?api-version=2022-08-01-preview/get'
            operationId: RestorableDroppedDatabases_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RestorableDroppedDatabaseListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1restorableDroppedDatabases~1{restorableDroppedDatabaseId}?api-version=2022-08-01-preview/get'
            operationId: RestorableDroppedDatabases_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: RestorableDroppedDatabase
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/restorable_dropped_databases/methods/get'
          - $ref: '#/components/x-stackQL-resources/restorable_dropped_databases/methods/list_by_server'
        insert: []
        update: []
        replace: []
        delete: []
    database_automatic_tunings:
      id: azure.sql.database_automatic_tunings
      name: database_automatic_tunings
      title: database_automatic_tunings
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1automaticTuning~1current?api-version=2020-11-01-preview/get'
            operationId: DatabaseAutomaticTuning_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseAutomaticTuning
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1automaticTuning~1current?api-version=2020-11-01-preview/patch'
            operationId: DatabaseAutomaticTuning_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseAutomaticTuning
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_automatic_tunings/methods/get'
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/database_automatic_tunings/methods/update'
        replace: []
        delete: []
    service_objectives:
      id: azure.sql.service_objectives
      name: service_objectives
      title: service_objectives
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1serviceObjectives~1{serviceObjectiveName}?api-version=2014-04-01/get'
            operationId: ServiceObjectives_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServiceObjective
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1serviceObjectives?api-version=2014-04-01/get'
            operationId: ServiceObjectives_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServiceObjectiveListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/service_objectives/methods/get'
          - $ref: '#/components/x-stackQL-resources/service_objectives/methods/list_by_server'
        insert: []
        update: []
        replace: []
        delete: []
    managed_database_vulnerability_assessment_scans:
      id: azure.sql.managed_database_vulnerability_assessment_scans
      name: managed_database_vulnerability_assessment_scans
      title: managed_database_vulnerability_assessment_scans
      methods:
        initiate_scan:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans~1{scanId}~1initiateScan?api-version=2020-11-01-preview/post'
            operationId: ManagedDatabaseVulnerabilityAssessmentScans_InitiateScan
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        export:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans~1{scanId}~1export?api-version=2020-11-01-preview/post'
            operationId: ManagedDatabaseVulnerabilityAssessmentScans_Export
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseVulnerabilityAssessmentScansExport
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VulnerabilityAssessmentScanRecordListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans~1{scanId}?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseVulnerabilityAssessmentScans_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VulnerabilityAssessmentScanRecord
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_vulnerability_assessment_scans/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_database_vulnerability_assessment_scans/methods/list_by_database'
        insert: []
        update: []
        replace: []
        delete: []
    managed_database_transparent_data_encryptions:
      id: azure.sql.managed_database_transparent_data_encryptions
      name: managed_database_transparent_data_encryptions
      title: managed_database_transparent_data_encryptions
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1transparentDataEncryption~1{tdeName}?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseTransparentDataEncryption_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedTransparentDataEncryption
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1transparentDataEncryption~1{tdeName}?api-version=2020-11-01-preview/put'
            operationId: ManagedDatabaseTransparentDataEncryption_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedTransparentDataEncryption
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1transparentDataEncryption?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseTransparentDataEncryption_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedTransparentDataEncryptionListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_transparent_data_encryptions/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_database_transparent_data_encryptions/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_database_transparent_data_encryptions/methods/create_or_update'
        update: []
        replace: []
        delete: []
    databases:
      id: azure.sql.databases
      name: databases
      title: databases
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases?api-version=2023-02-01-preview/get'
            operationId: Databases_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}?api-version=2023-02-01-preview/get'
            operationId: Databases_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Database
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}?api-version=2023-02-01-preview/put'
            operationId: Databases_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Database
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}?api-version=2023-02-01-preview/delete'
            operationId: Databases_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}?api-version=2023-02-01-preview/patch'
            operationId: Databases_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Database
        export:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1export?api-version=2023-02-01-preview/post'
            operationId: Databases_Export
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ImportExportOperationResult
        failover:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1failover?api-version=2023-02-01-preview/post'
            operationId: Databases_Failover
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        import:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1import?api-version=2023-02-01-preview/post'
            operationId: Databases_Import
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ImportExportOperationResult
        rename:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1move?api-version=2023-02-01-preview/post'
            operationId: Databases_Rename
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        pause:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1pause?api-version=2023-02-01-preview/post'
            operationId: Databases_Pause
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Database
        resume:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1resume?api-version=2023-02-01-preview/post'
            operationId: Databases_Resume
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Database
        upgrade_data_warehouse:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1upgradeDataWarehouse?api-version=2023-02-01-preview/post'
            operationId: Databases_UpgradeDataWarehouse
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_elastic_pool:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1elasticPools~1{elasticPoolName}~1databases?api-version=2023-02-01-preview/get'
            operationId: Databases_ListByElasticPool
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/databases/methods/get'
          - $ref: '#/components/x-stackQL-resources/databases/methods/list_by_elastic_pool'
          - $ref: '#/components/x-stackQL-resources/databases/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/databases/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/databases/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/databases/methods/delete'
    databases_inaccessible_by_servers:
      id: azure.sql.databases_inaccessible_by_servers
      name: databases_inaccessible_by_servers
      title: databases_inaccessible_by_servers
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1inaccessibleDatabases?api-version=2023-02-01-preview/get'
            operationId: DatabasesInaccessibleByServer_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/databases_inaccessible_by_servers/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    database_vulnerability_assessment_scans:
      id: azure.sql.database_vulnerability_assessment_scans
      name: database_vulnerability_assessment_scans
      title: database_vulnerability_assessment_scans
      methods:
        initiate_scan:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans~1{scanId}~1initiateScan?api-version=2020-11-01-preview/post'
            operationId: DatabaseVulnerabilityAssessmentScans_InitiateScan
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans?api-version=2020-11-01-preview/get'
            operationId: DatabaseVulnerabilityAssessmentScans_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VulnerabilityAssessmentScanRecordListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans~1{scanId}?api-version=2020-11-01-preview/get'
            operationId: DatabaseVulnerabilityAssessmentScans_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VulnerabilityAssessmentScanRecord
        export:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1vulnerabilityAssessments~1{vulnerabilityAssessmentName}~1scans~1{scanId}~1export?api-version=2020-11-01-preview/post'
            operationId: DatabaseVulnerabilityAssessmentScans_Export
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseVulnerabilityAssessmentScansExport
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_vulnerability_assessment_scans/methods/get'
          - $ref: '#/components/x-stackQL-resources/database_vulnerability_assessment_scans/methods/list_by_database'
        insert: []
        update: []
        replace: []
        delete: []
    replication_links:
      id: azure.sql.replication_links
      name: replication_links
      title: replication_links
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1replicationLinks?api-version=2023-05-01-preview/get'
            operationId: ReplicationLinks_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ReplicationLinkListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1replicationLinks~1{linkId}?api-version=2023-05-01-preview/get'
            operationId: ReplicationLinks_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ReplicationLink
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1replicationLinks~1{linkId}?api-version=2023-05-01-preview/put'
            operationId: ReplicationLinks_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ReplicationLink
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1replicationLinks~1{linkId}?api-version=2023-05-01-preview/delete'
            operationId: ReplicationLinks_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1replicationLinks~1{linkId}?api-version=2023-05-01-preview/patch'
            operationId: ReplicationLinks_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ReplicationLink
        failover:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1replicationLinks~1{linkId}~1failover?api-version=2023-05-01-preview/post'
            operationId: ReplicationLinks_Failover
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ReplicationLink
        failover_allow_data_loss:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1replicationLinks~1{linkId}~1forceFailoverAllowDataLoss?api-version=2023-05-01-preview/post'
            operationId: ReplicationLinks_FailoverAllowDataLoss
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ReplicationLink
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1replicationLinks?api-version=2023-05-01-preview/get'
            operationId: ReplicationLinks_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ReplicationLinkListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/replication_links/methods/get'
          - $ref: '#/components/x-stackQL-resources/replication_links/methods/list_by_database'
          - $ref: '#/components/x-stackQL-resources/replication_links/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/replication_links/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/replication_links/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/replication_links/methods/delete'
    virtual_clusters:
      id: azure.sql.virtual_clusters
      name: virtual_clusters
      title: virtual_clusters
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1virtualClusters?api-version=2022-05-01-preview/get'
            operationId: VirtualClusters_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualClusterListResult
            objectKey: $.value
        list_by_resource_group:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1virtualClusters?api-version=2022-05-01-preview/get'
            operationId: VirtualClusters_ListByResourceGroup
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualClusterListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1virtualClusters~1{virtualClusterName}?api-version=2022-05-01-preview/get'
            operationId: VirtualClusters_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualCluster
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1virtualClusters~1{virtualClusterName}?api-version=2022-05-01-preview/delete'
            operationId: VirtualClusters_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1virtualClusters~1{virtualClusterName}?api-version=2022-05-01-preview/patch'
            operationId: VirtualClusters_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: VirtualCluster
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/virtual_clusters/methods/get'
          - $ref: '#/components/x-stackQL-resources/virtual_clusters/methods/list_by_resource_group'
          - $ref: '#/components/x-stackQL-resources/virtual_clusters/methods/list'
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/virtual_clusters/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/virtual_clusters/methods/delete'
    virtual_clusters_dns_servers:
      id: azure.sql.virtual_clusters_dns_servers
      name: virtual_clusters_dns_servers
      title: virtual_clusters_dns_servers
      methods:
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1virtualClusters~1{virtualClusterName}~1updateManagedInstanceDnsServers?api-version=2022-05-01-preview/post'
            operationId: VirtualClustersDnsServers_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: UpdateVirtualClusterDnsServersOperation
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    job_agents:
      id: azure.sql.job_agents
      name: job_agents
      title: job_agents
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents?api-version=2020-11-01-preview/get'
            operationId: JobAgents_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobAgentListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}?api-version=2020-11-01-preview/get'
            operationId: JobAgents_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobAgent
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}?api-version=2020-11-01-preview/put'
            operationId: JobAgents_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobAgent
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}?api-version=2020-11-01-preview/delete'
            operationId: JobAgents_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}?api-version=2020-11-01-preview/patch'
            operationId: JobAgents_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobAgent
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/job_agents/methods/get'
          - $ref: '#/components/x-stackQL-resources/job_agents/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/job_agents/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/job_agents/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/job_agents/methods/delete'
    managed_database_advanced_threat_protection_settings:
      id: azure.sql.managed_database_advanced_threat_protection_settings
      name: managed_database_advanced_threat_protection_settings
      title: managed_database_advanced_threat_protection_settings
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1advancedThreatProtectionSettings?api-version=2022-02-01-preview/get'
            operationId: ManagedDatabaseAdvancedThreatProtectionSettings_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabaseAdvancedThreatProtectionListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1advancedThreatProtectionSettings~1{advancedThreatProtectionName}?api-version=2022-02-01-preview/get'
            operationId: ManagedDatabaseAdvancedThreatProtectionSettings_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabaseAdvancedThreatProtection
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1advancedThreatProtectionSettings~1{advancedThreatProtectionName}?api-version=2022-02-01-preview/put'
            operationId: ManagedDatabaseAdvancedThreatProtectionSettings_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabaseAdvancedThreatProtection
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_advanced_threat_protection_settings/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_database_advanced_threat_protection_settings/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_database_advanced_threat_protection_settings/methods/create_or_update'
        update: []
        replace: []
        delete: []
    managed_databases_by_instances:
      id: azure.sql.managed_databases_by_instances
      name: managed_databases_by_instances
      title: managed_databases_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases?api-version=2022-08-01-preview/get'
            operationId: ManagedDatabasesByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabaseListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_databases_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    managed_databases:
      id: azure.sql.managed_databases
      name: managed_databases
      title: managed_databases
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}?api-version=2022-08-01-preview/get'
            operationId: ManagedDatabases_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabase
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}?api-version=2022-08-01-preview/put'
            operationId: ManagedDatabases_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabase
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}?api-version=2022-08-01-preview/delete'
            operationId: ManagedDatabases_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}?api-version=2022-08-01-preview/patch'
            operationId: ManagedDatabases_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabase
        cancel_move:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1cancelMove?api-version=2022-08-01-preview/post'
            operationId: ManagedDatabases_CancelMove
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        complete_move:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1completeMove?api-version=2022-08-01-preview/post'
            operationId: ManagedDatabases_CompleteMove
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        complete_restore:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1completeRestore?api-version=2022-08-01-preview/post'
            operationId: ManagedDatabases_CompleteRestore
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        start_move:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1startMove?api-version=2022-08-01-preview/post'
            operationId: ManagedDatabases_StartMove
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_databases/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_databases/methods/create_or_update'
        update:
          - $ref: '#/components/x-stackQL-resources/managed_databases/methods/update'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/managed_databases/methods/delete'
    managed_databases_inaccessible_by_instances:
      id: azure.sql.managed_databases_inaccessible_by_instances
      name: managed_databases_inaccessible_by_instances
      title: managed_databases_inaccessible_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1inaccessibleManagedDatabases?api-version=2022-08-01-preview/get'
            operationId: ManagedDatabasesInaccessibleByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedDatabaseListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_databases_inaccessible_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    capabilities:
      id: azure.sql.capabilities
      name: capabilities
      title: capabilities
      methods:
        list_by_location:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1providers~1Microsoft.Sql~1locations~1{locationName}~1capabilities?api-version=2020-11-01-preview/get'
            operationId: Capabilities_ListByLocation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LocationCapabilities
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/capabilities/methods/list_by_location'
        insert: []
        update: []
        replace: []
        delete: []
    managed_instance_azure_ad_only_authentications:
      id: azure.sql.managed_instance_azure_ad_only_authentications
      name: managed_instance_azure_ad_only_authentications
      title: managed_instance_azure_ad_only_authentications
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1azureADOnlyAuthentications~1{authenticationName}?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceAzureADOnlyAuthentications_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceAzureADOnlyAuthentication
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1azureADOnlyAuthentications~1{authenticationName}?api-version=2020-11-01-preview/put'
            operationId: ManagedInstanceAzureADOnlyAuthentications_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceAzureADOnlyAuthentication
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1azureADOnlyAuthentications~1{authenticationName}?api-version=2020-11-01-preview/delete'
            operationId: ManagedInstanceAzureADOnlyAuthentications_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_azure_ad_only_authentications/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_instance_azure_ad_only_authentications/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/managed_instance_azure_ad_only_authentications/methods/delete'
    managed_instance_azure_ad_only_authentications_by_instances:
      id: azure.sql.managed_instance_azure_ad_only_authentications_by_instances
      name: managed_instance_azure_ad_only_authentications_by_instances
      title: managed_instance_azure_ad_only_authentications_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1azureADOnlyAuthentications?api-version=2020-11-01-preview/get'
            operationId: ManagedInstanceAzureADOnlyAuthenticationsByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceAzureADOnlyAuthListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_instance_azure_ad_only_authentications_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    server_keys:
      id: azure.sql.server_keys
      name: server_keys
      title: server_keys
      methods:
        list_by_server:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1keys?api-version=2020-11-01-preview/get'
            operationId: ServerKeys_ListByServer
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerKeyListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1keys~1{keyName}?api-version=2020-11-01-preview/get'
            operationId: ServerKeys_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerKey
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1keys~1{keyName}?api-version=2020-11-01-preview/put'
            operationId: ServerKeys_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerKey
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1keys~1{keyName}?api-version=2020-11-01-preview/delete'
            operationId: ServerKeys_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_keys/methods/get'
          - $ref: '#/components/x-stackQL-resources/server_keys/methods/list_by_server'
        insert:
          - $ref: '#/components/x-stackQL-resources/server_keys/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/server_keys/methods/delete'
    endpoint_certificates_by_instances:
      id: azure.sql.endpoint_certificates_by_instances
      name: endpoint_certificates_by_instances
      title: endpoint_certificates_by_instances
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1endpointCertificates?api-version=2021-11-01-preview/get'
            operationId: EndpointCertificatesByInstance_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: EndpointCertificateListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/endpoint_certificates_by_instances/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    endpoint_certificates:
      id: azure.sql.endpoint_certificates
      name: endpoint_certificates
      title: endpoint_certificates
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1endpointCertificates~1{endpointType}?api-version=2021-11-01-preview/get'
            operationId: EndpointCertificates_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: EndpointCertificate
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/endpoint_certificates/methods/get'
        insert: []
        update: []
        replace: []
        delete: []
    managed_database_queries:
      id: azure.sql.managed_database_queries
      name: managed_database_queries
      title: managed_database_queries
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1queries~1{queryId}?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseQueries_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceQuery
        list_by_query:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1managedInstances~1{managedInstanceName}~1databases~1{databaseName}~1queries~1{queryId}~1statistics?api-version=2020-11-01-preview/get'
            operationId: ManagedDatabaseQueries_ListByQuery
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ManagedInstanceQueryStatistics
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_database_queries/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_database_queries/methods/list_by_query'
        insert: []
        update: []
        replace: []
        delete: []
    server_automatic_tunings:
      id: azure.sql.server_automatic_tunings
      name: server_automatic_tunings
      title: server_automatic_tunings
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1automaticTuning~1current?api-version=2020-11-01-preview/get'
            operationId: ServerAutomaticTuning_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerAutomaticTuning
        update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1automaticTuning~1current?api-version=2020-11-01-preview/patch'
            operationId: ServerAutomaticTuning_Update
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: ServerAutomaticTuning
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/server_automatic_tunings/methods/get'
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/server_automatic_tunings/methods/update'
        replace: []
        delete: []
    jobs:
      id: azure.sql.jobs
      name: jobs
      title: jobs
      methods:
        list_by_agent:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs?api-version=2020-11-01-preview/get'
            operationId: Jobs_ListByAgent
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: JobListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}?api-version=2020-11-01-preview/get'
            operationId: Jobs_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Job
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}?api-version=2020-11-01-preview/put'
            operationId: Jobs_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: Job
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1jobAgents~1{jobAgentName}~1jobs~1{jobName}?api-version=2020-11-01-preview/delete'
            operationId: Jobs_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/get'
          - $ref: '#/components/x-stackQL-resources/jobs/methods/list_by_agent'
        insert:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/delete'
    transparent_data_encryptions:
      id: azure.sql.transparent_data_encryptions
      name: transparent_data_encryptions
      title: transparent_data_encryptions
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1transparentDataEncryption?api-version=2022-08-01-preview/get'
            operationId: TransparentDataEncryptions_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LogicalDatabaseTransparentDataEncryptionListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1transparentDataEncryption~1{tdeName}?api-version=2022-08-01-preview/get'
            operationId: TransparentDataEncryptions_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LogicalDatabaseTransparentDataEncryption
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1transparentDataEncryption~1{tdeName}?api-version=2022-08-01-preview/put'
            operationId: TransparentDataEncryptions_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: LogicalDatabaseTransparentDataEncryption
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/transparent_data_encryptions/methods/get'
          - $ref: '#/components/x-stackQL-resources/transparent_data_encryptions/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/transparent_data_encryptions/methods/create_or_update'
        update: []
        replace: []
        delete: []
    instance_failover_groups:
      id: azure.sql.instance_failover_groups
      name: instance_failover_groups
      title: instance_failover_groups
      methods:
        list_by_location:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1instanceFailoverGroups?api-version=2022-05-01-preview/get'
            operationId: InstanceFailoverGroups_ListByLocation
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: InstanceFailoverGroupListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1instanceFailoverGroups~1{failoverGroupName}?api-version=2022-05-01-preview/get'
            operationId: InstanceFailoverGroups_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: InstanceFailoverGroup
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1instanceFailoverGroups~1{failoverGroupName}?api-version=2022-05-01-preview/put'
            operationId: InstanceFailoverGroups_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: InstanceFailoverGroup
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1instanceFailoverGroups~1{failoverGroupName}?api-version=2022-05-01-preview/delete'
            operationId: InstanceFailoverGroups_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        failover:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1instanceFailoverGroups~1{failoverGroupName}~1failover?api-version=2022-05-01-preview/post'
            operationId: InstanceFailoverGroups_Failover
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: InstanceFailoverGroup
        force_failover_allow_data_loss:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1locations~1{locationName}~1instanceFailoverGroups~1{failoverGroupName}~1forceFailoverAllowDataLoss?api-version=2022-05-01-preview/post'
            operationId: InstanceFailoverGroups_ForceFailoverAllowDataLoss
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: InstanceFailoverGroup
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/instance_failover_groups/methods/get'
          - $ref: '#/components/x-stackQL-resources/instance_failover_groups/methods/list_by_location'
        insert:
          - $ref: '#/components/x-stackQL-resources/instance_failover_groups/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/instance_failover_groups/methods/delete'
    usages_by_instance_pools:
      id: azure.sql.usages_by_instance_pools
      name: usages_by_instance_pools
      title: usages_by_instance_pools
      methods:
        list:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1instancePools~1{instancePoolName}~1usages?api-version=2021-02-01-preview/get'
            operationId: UsagesByInstancePool_List
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: UsageListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/usages_by_instance_pools/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    data_masking_policies:
      id: azure.sql.data_masking_policies
      name: data_masking_policies
      title: data_masking_policies
      methods:
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1dataMaskingPolicies~1{dataMaskingPolicyName}?api-version=2014-04-01/put'
            operationId: DataMaskingPolicies_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DataMaskingPolicy
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1dataMaskingPolicies~1{dataMaskingPolicyName}?api-version=2014-04-01/get'
            operationId: DataMaskingPolicies_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DataMaskingPolicy
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/data_masking_policies/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/data_masking_policies/methods/create_or_update'
        update: []
        replace: []
        delete: []
    data_masking_rules:
      id: azure.sql.data_masking_rules
      name: data_masking_rules
      title: data_masking_rules
      methods:
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1dataMaskingPolicies~1{dataMaskingPolicyName}~1rules~1{dataMaskingRuleName}?api-version=2014-04-01/put'
            operationId: DataMaskingRules_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DataMaskingRule
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1dataMaskingPolicies~1{dataMaskingPolicyName}~1rules?api-version=2014-04-01/get'
            operationId: DataMaskingRules_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DataMaskingRuleListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/data_masking_rules/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/data_masking_rules/methods/create_or_update'
        update: []
        replace: []
        delete: []
    database_advanced_threat_protection_settings:
      id: azure.sql.database_advanced_threat_protection_settings
      name: database_advanced_threat_protection_settings
      title: database_advanced_threat_protection_settings
      methods:
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1advancedThreatProtectionSettings?api-version=2021-11-01-preview/get'
            operationId: DatabaseAdvancedThreatProtectionSettings_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseAdvancedThreatProtectionListResult
            objectKey: $.value
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1advancedThreatProtectionSettings~1{advancedThreatProtectionName}?api-version=2021-11-01-preview/get'
            operationId: DatabaseAdvancedThreatProtectionSettings_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseAdvancedThreatProtection
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1advancedThreatProtectionSettings~1{advancedThreatProtectionName}?api-version=2021-11-01-preview/put'
            operationId: DatabaseAdvancedThreatProtectionSettings_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: DatabaseAdvancedThreatProtection
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/database_advanced_threat_protection_settings/methods/get'
          - $ref: '#/components/x-stackQL-resources/database_advanced_threat_protection_settings/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/database_advanced_threat_protection_settings/methods/create_or_update'
        update: []
        replace: []
        delete: []
    workload_groups:
      id: azure.sql.workload_groups
      name: workload_groups
      title: workload_groups
      methods:
        get:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1workloadGroups~1{workloadGroupName}?api-version=2020-11-01-preview/get'
            operationId: WorkloadGroups_Get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: WorkloadGroup
        create_or_update:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1workloadGroups~1{workloadGroupName}?api-version=2020-11-01-preview/put'
            operationId: WorkloadGroups_CreateOrUpdate
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: WorkloadGroup
        delete:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1workloadGroups~1{workloadGroupName}?api-version=2020-11-01-preview/delete'
            operationId: WorkloadGroups_Delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_by_database:
          operation:
            $ref: '#/paths/~1subscriptions~1{subscriptionId}~1resourceGroups~1{resourceGroupName}~1providers~1Microsoft.Sql~1servers~1{serverName}~1databases~1{databaseName}~1workloadGroups?api-version=2020-11-01-preview/get'
            operationId: WorkloadGroups_ListByDatabase
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: WorkloadGroupListResult
            objectKey: $.value
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/workload_groups/methods/get'
          - $ref: '#/components/x-stackQL-resources/workload_groups/methods/list_by_database'
        insert:
          - $ref: '#/components/x-stackQL-resources/workload_groups/methods/create_or_update'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/workload_groups/methods/delete'
    vw_instance_pools:
      id: azure.sql.vw_instance_pools
      name: vw_instance_pools
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              tags as tags,
              sku as sku,
              JSON_EXTRACT(properties, '$.subnetId') as "subnet_id",
              JSON_EXTRACT(properties, '$.vCores') as "v_cores",
              JSON_EXTRACT(properties, '$.licenseType') as "license_type",
              JSON_EXTRACT(properties, '$.dnsZone') as "dns_zone",
              JSON_EXTRACT(properties, '$.maintenanceConfigurationId') as "maintenance_configuration_id",
              subscriptionId,
              resourceGroupName,
              instancePoolName
              FROM azure.sql.instance_pools
              WHERE subscriptionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                tags as tags,
                sku as sku,
                json_extract_path_text(properties, '$.subnetId') as "subnet_id",
                json_extract_path_text(properties, '$.vCores') as "v_cores",
                json_extract_path_text(properties, '$.licenseType') as "license_type",
                json_extract_path_text(properties, '$.dnsZone') as "dns_zone",
                json_extract_path_text(properties, '$.maintenanceConfigurationId') as "maintenance_configuration_id",
                subscriptionId,
                resourceGroupName,
                instancePoolName
                FROM azure.sql.instance_pools
                WHERE subscriptionId = 'replace-me';
    vw_failover_groups:
      id: azure.sql.vw_failover_groups
      name: vw_failover_groups
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              tags as tags,
              JSON_EXTRACT(properties, '$.readWriteEndpoint') as "read_write_endpoint",
              JSON_EXTRACT(properties, '$.readOnlyEndpoint') as "read_only_endpoint",
              JSON_EXTRACT(properties, '$.replicationRole') as "replication_role",
              JSON_EXTRACT(properties, '$.replicationState') as "replication_state",
              JSON_EXTRACT(properties, '$.partnerServers') as "partner_servers",
              JSON_EXTRACT(properties, '$.databases') as "databases",
              JSON_EXTRACT(properties, '$.secondaryType') as "secondary_type",
              subscriptionId,
              resourceGroupName,
              serverName,
              failoverGroupName
              FROM azure.sql.failover_groups
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                tags as tags,
                json_extract_path_text(properties, '$.readWriteEndpoint') as "read_write_endpoint",
                json_extract_path_text(properties, '$.readOnlyEndpoint') as "read_only_endpoint",
                json_extract_path_text(properties, '$.replicationRole') as "replication_role",
                json_extract_path_text(properties, '$.replicationState') as "replication_state",
                json_extract_path_text(properties, '$.partnerServers') as "partner_servers",
                json_extract_path_text(properties, '$.databases') as "databases",
                json_extract_path_text(properties, '$.secondaryType') as "secondary_type",
                subscriptionId,
                resourceGroupName,
                serverName,
                failoverGroupName
                FROM azure.sql.failover_groups
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_database_columns:
      id: azure.sql.vw_database_columns
      name: vw_database_columns
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.columnType') as "column_type",
              JSON_EXTRACT(properties, '$.temporalType') as "temporal_type",
              JSON_EXTRACT(properties, '$.memoryOptimized') as "memory_optimized",
              JSON_EXTRACT(properties, '$.isComputed') as "is_computed",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              schemaName,
              tableName,
              columnName
              FROM azure.sql.database_columns
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.columnType') as "column_type",
                json_extract_path_text(properties, '$.temporalType') as "temporal_type",
                json_extract_path_text(properties, '$.memoryOptimized') as "memory_optimized",
                json_extract_path_text(properties, '$.isComputed') as "is_computed",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                schemaName,
                tableName,
                columnName
                FROM azure.sql.database_columns
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_managed_database_tables:
      id: azure.sql.vw_managed_database_tables
      name: vw_managed_database_tables
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.temporalType') as "temporal_type",
              JSON_EXTRACT(properties, '$.memoryOptimized') as "memory_optimized",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              schemaName,
              tableName
              FROM azure.sql.managed_database_tables
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me' AND schemaName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.temporalType') as "temporal_type",
                json_extract_path_text(properties, '$.memoryOptimized') as "memory_optimized",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                schemaName,
                tableName
                FROM azure.sql.managed_database_tables
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me' AND schemaName = 'replace-me';
    vw_managed_database_columns:
      id: azure.sql.vw_managed_database_columns
      name: vw_managed_database_columns
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.columnType') as "column_type",
              JSON_EXTRACT(properties, '$.temporalType') as "temporal_type",
              JSON_EXTRACT(properties, '$.memoryOptimized') as "memory_optimized",
              JSON_EXTRACT(properties, '$.isComputed') as "is_computed",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              schemaName,
              tableName,
              columnName
              FROM azure.sql.managed_database_columns
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.columnType') as "column_type",
                json_extract_path_text(properties, '$.temporalType') as "temporal_type",
                json_extract_path_text(properties, '$.memoryOptimized') as "memory_optimized",
                json_extract_path_text(properties, '$.isComputed') as "is_computed",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                schemaName,
                tableName,
                columnName
                FROM azure.sql.managed_database_columns
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
    vw_geo_backup_policies:
      id: azure.sql.vw_geo_backup_policies
      name: vw_geo_backup_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              kind as kind,
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.storageType') as "storage_type",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              geoBackupPolicyName
              FROM azure.sql.geo_backup_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                kind as kind,
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.storageType') as "storage_type",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                geoBackupPolicyName
                FROM azure.sql.geo_backup_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_job_target_groups:
      id: azure.sql.vw_job_target_groups
      name: vw_job_target_groups
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.members') as "members",
              subscriptionId,
              resourceGroupName,
              serverName,
              jobAgentName,
              targetGroupName
              FROM azure.sql.job_target_groups
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.members') as "members",
                subscriptionId,
                resourceGroupName,
                serverName,
                jobAgentName,
                targetGroupName
                FROM azure.sql.job_target_groups
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me';
    vw_managed_restorable_dropped_database_backup_short_term_retention_policies:
      id: azure.sql.vw_managed_restorable_dropped_database_backup_short_term_retention_policies
      name: vw_managed_restorable_dropped_database_backup_short_term_retention_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.retentionDays') as "retention_days",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              restorableDroppedDatabaseId,
              policyName
              FROM azure.sql.managed_restorable_dropped_database_backup_short_term_retention_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND restorableDroppedDatabaseId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.retentionDays') as "retention_days",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                restorableDroppedDatabaseId,
                policyName
                FROM azure.sql.managed_restorable_dropped_database_backup_short_term_retention_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND restorableDroppedDatabaseId = 'replace-me';
    vw_database_vulnerability_assessment_rule_baselines:
      id: azure.sql.vw_database_vulnerability_assessment_rule_baselines
      name: vw_database_vulnerability_assessment_rule_baselines
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.baselineResults') as "baseline_results",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              vulnerabilityAssessmentName,
              ruleId,
              baselineName
              FROM azure.sql.database_vulnerability_assessment_rule_baselines
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND ruleId = 'replace-me' AND baselineName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.baselineResults') as "baseline_results",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                vulnerabilityAssessmentName,
                ruleId,
                baselineName
                FROM azure.sql.database_vulnerability_assessment_rule_baselines
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND ruleId = 'replace-me' AND baselineName = 'replace-me';
    vw_virtual_network_rules:
      id: azure.sql.vw_virtual_network_rules
      name: vw_virtual_network_rules
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.virtualNetworkSubnetId') as "virtual_network_subnet_id",
              JSON_EXTRACT(properties, '$.ignoreMissingVnetServiceEndpoint') as "ignore_missing_vnet_service_endpoint",
              JSON_EXTRACT(properties, '$.state') as "state",
              subscriptionId,
              resourceGroupName,
              serverName,
              virtualNetworkRuleName
              FROM azure.sql.virtual_network_rules
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.virtualNetworkSubnetId') as "virtual_network_subnet_id",
                json_extract_path_text(properties, '$.ignoreMissingVnetServiceEndpoint') as "ignore_missing_vnet_service_endpoint",
                json_extract_path_text(properties, '$.state') as "state",
                subscriptionId,
                resourceGroupName,
                serverName,
                virtualNetworkRuleName
                FROM azure.sql.virtual_network_rules
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_backup_short_term_retention_policies:
      id: azure.sql.vw_backup_short_term_retention_policies
      name: vw_backup_short_term_retention_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.retentionDays') as "retention_days",
              JSON_EXTRACT(properties, '$.diffBackupIntervalInHours') as "diff_backup_interval_in_hours",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              policyName
              FROM azure.sql.backup_short_term_retention_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.retentionDays') as "retention_days",
                json_extract_path_text(properties, '$.diffBackupIntervalInHours') as "diff_backup_interval_in_hours",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                policyName
                FROM azure.sql.backup_short_term_retention_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_subscription_usages:
      id: azure.sql.vw_subscription_usages
      name: vw_subscription_usages
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.displayName') as "display_name",
              JSON_EXTRACT(properties, '$.currentValue') as "current_value",
              JSON_EXTRACT(properties, '$.limit') as "limit",
              JSON_EXTRACT(properties, '$.unit') as "unit",
              subscriptionId,
              locationName,
              usageName
              FROM azure.sql.subscription_usages
              WHERE subscriptionId = 'replace-me' AND locationName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.displayName') as "display_name",
                json_extract_path_text(properties, '$.currentValue') as "current_value",
                json_extract_path_text(properties, '$.limit') as "limit",
                json_extract_path_text(properties, '$.unit') as "unit",
                subscriptionId,
                locationName,
                usageName
                FROM azure.sql.subscription_usages
                WHERE subscriptionId = 'replace-me' AND locationName = 'replace-me';
    vw_data_warehouse_user_activities:
      id: azure.sql.vw_data_warehouse_user_activities
      name: vw_data_warehouse_user_activities
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.activeQueriesCount') as "active_queries_count",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              dataWarehouseUserActivityName
              FROM azure.sql.data_warehouse_user_activities
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.activeQueriesCount') as "active_queries_count",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                dataWarehouseUserActivityName
                FROM azure.sql.data_warehouse_user_activities
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_server_azure_ad_administrators:
      id: azure.sql.vw_server_azure_ad_administrators
      name: vw_server_azure_ad_administrators
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.administratorType') as "administrator_type",
              JSON_EXTRACT(properties, '$.login') as "login",
              JSON_EXTRACT(properties, '$.sid') as "sid",
              JSON_EXTRACT(properties, '$.tenantId') as "tenant_id",
              JSON_EXTRACT(properties, '$.azureADOnlyAuthentication') as "azure_ad_only_authentication",
              subscriptionId,
              resourceGroupName,
              serverName,
              administratorName
              FROM azure.sql.server_azure_ad_administrators
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.administratorType') as "administrator_type",
                json_extract_path_text(properties, '$.login') as "login",
                json_extract_path_text(properties, '$.sid') as "sid",
                json_extract_path_text(properties, '$.tenantId') as "tenant_id",
                json_extract_path_text(properties, '$.azureADOnlyAuthentication') as "azure_ad_only_authentication",
                subscriptionId,
                resourceGroupName,
                serverName,
                administratorName
                FROM azure.sql.server_azure_ad_administrators
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_managed_backup_short_term_retention_policies:
      id: azure.sql.vw_managed_backup_short_term_retention_policies
      name: vw_managed_backup_short_term_retention_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.retentionDays') as "retention_days",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              policyName
              FROM azure.sql.managed_backup_short_term_retention_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.retentionDays') as "retention_days",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                policyName
                FROM azure.sql.managed_backup_short_term_retention_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
    vw_restore_points:
      id: azure.sql.vw_restore_points
      name: vw_restore_points
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              JSON_EXTRACT(properties, '$.restorePointType') as "restore_point_type",
              JSON_EXTRACT(properties, '$.earliestRestoreDate') as "earliest_restore_date",
              JSON_EXTRACT(properties, '$.restorePointCreationDate') as "restore_point_creation_date",
              JSON_EXTRACT(properties, '$.restorePointLabel') as "restore_point_label",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              restorePointName
              FROM azure.sql.restore_points
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                json_extract_path_text(properties, '$.restorePointType') as "restore_point_type",
                json_extract_path_text(properties, '$.earliestRestoreDate') as "earliest_restore_date",
                json_extract_path_text(properties, '$.restorePointCreationDate') as "restore_point_creation_date",
                json_extract_path_text(properties, '$.restorePointLabel') as "restore_point_label",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                restorePointName
                FROM azure.sql.restore_points
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_managed_database_move_operations:
      id: azure.sql.vw_managed_database_move_operations
      name: vw_managed_database_move_operations
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.operation') as "operation",
              JSON_EXTRACT(properties, '$.operationFriendlyName') as "operation_friendly_name",
              JSON_EXTRACT(properties, '$.startTime') as "start_time",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.operationMode') as "operation_mode",
              JSON_EXTRACT(properties, '$.sourceManagedInstanceName') as "source_managed_instance_name",
              JSON_EXTRACT(properties, '$.targetManagedInstanceName') as "target_managed_instance_name",
              JSON_EXTRACT(properties, '$.sourceManagedInstanceId') as "source_managed_instance_id",
              JSON_EXTRACT(properties, '$.targetManagedInstanceId') as "target_managed_instance_id",
              JSON_EXTRACT(properties, '$.sourceDatabaseName') as "source_database_name",
              JSON_EXTRACT(properties, '$.targetDatabaseName') as "target_database_name",
              JSON_EXTRACT(properties, '$.isCancellable') as "is_cancellable",
              JSON_EXTRACT(properties, '$.errorCode') as "error_code",
              JSON_EXTRACT(properties, '$.errorDescription') as "error_description",
              JSON_EXTRACT(properties, '$.errorSeverity') as "error_severity",
              JSON_EXTRACT(properties, '$.isUserError') as "is_user_error",
              subscriptionId,
              resourceGroupName,
              locationName,
              operationId
              FROM azure.sql.managed_database_move_operations
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND locationName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.operation') as "operation",
                json_extract_path_text(properties, '$.operationFriendlyName') as "operation_friendly_name",
                json_extract_path_text(properties, '$.startTime') as "start_time",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.operationMode') as "operation_mode",
                json_extract_path_text(properties, '$.sourceManagedInstanceName') as "source_managed_instance_name",
                json_extract_path_text(properties, '$.targetManagedInstanceName') as "target_managed_instance_name",
                json_extract_path_text(properties, '$.sourceManagedInstanceId') as "source_managed_instance_id",
                json_extract_path_text(properties, '$.targetManagedInstanceId') as "target_managed_instance_id",
                json_extract_path_text(properties, '$.sourceDatabaseName') as "source_database_name",
                json_extract_path_text(properties, '$.targetDatabaseName') as "target_database_name",
                json_extract_path_text(properties, '$.isCancellable') as "is_cancellable",
                json_extract_path_text(properties, '$.errorCode') as "error_code",
                json_extract_path_text(properties, '$.errorDescription') as "error_description",
                json_extract_path_text(properties, '$.errorSeverity') as "error_severity",
                json_extract_path_text(properties, '$.isUserError') as "is_user_error",
                subscriptionId,
                resourceGroupName,
                locationName,
                operationId
                FROM azure.sql.managed_database_move_operations
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND locationName = 'replace-me';
    vw_server_trust_certificates:
      id: azure.sql.vw_server_trust_certificates
      name: vw_server_trust_certificates
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.publicBlob') as "public_blob",
              JSON_EXTRACT(properties, '$.thumbprint') as "thumbprint",
              JSON_EXTRACT(properties, '$.certificateName') as "certificate_name",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              certificateName
              FROM azure.sql.server_trust_certificates
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND certificateName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.publicBlob') as "public_blob",
                json_extract_path_text(properties, '$.thumbprint') as "thumbprint",
                json_extract_path_text(properties, '$.certificateName') as "certificate_name",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                certificateName
                FROM azure.sql.server_trust_certificates
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND certificateName = 'replace-me';
    vw_managed_database_sensitivity_labels:
      id: azure.sql.vw_managed_database_sensitivity_labels
      name: vw_managed_database_sensitivity_labels
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              managedBy as managed_by,
              JSON_EXTRACT(properties, '$.schemaName') as "schema_name",
              JSON_EXTRACT(properties, '$.tableName') as "table_name",
              JSON_EXTRACT(properties, '$.columnName') as "column_name",
              JSON_EXTRACT(properties, '$.labelName') as "label_name",
              JSON_EXTRACT(properties, '$.labelId') as "label_id",
              JSON_EXTRACT(properties, '$.informationType') as "information_type",
              JSON_EXTRACT(properties, '$.informationTypeId') as "information_type_id",
              JSON_EXTRACT(properties, '$.isDisabled') as "is_disabled",
              JSON_EXTRACT(properties, '$.rank') as "rank",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              schemaName,
              tableName,
              columnName,
              sensitivityLabelSource
              FROM azure.sql.managed_database_sensitivity_labels
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me' AND schemaName = 'replace-me' AND tableName = 'replace-me' AND columnName = 'replace-me' AND sensitivityLabelSource = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                managedBy as managed_by,
                json_extract_path_text(properties, '$.schemaName') as "schema_name",
                json_extract_path_text(properties, '$.tableName') as "table_name",
                json_extract_path_text(properties, '$.columnName') as "column_name",
                json_extract_path_text(properties, '$.labelName') as "label_name",
                json_extract_path_text(properties, '$.labelId') as "label_id",
                json_extract_path_text(properties, '$.informationType') as "information_type",
                json_extract_path_text(properties, '$.informationTypeId') as "information_type_id",
                json_extract_path_text(properties, '$.isDisabled') as "is_disabled",
                json_extract_path_text(properties, '$.rank') as "rank",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                schemaName,
                tableName,
                columnName,
                sensitivityLabelSource
                FROM azure.sql.managed_database_sensitivity_labels
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me' AND schemaName = 'replace-me' AND tableName = 'replace-me' AND columnName = 'replace-me' AND sensitivityLabelSource = 'replace-me';
    vw_ipv6_firewall_rules:
      id: azure.sql.vw_ipv6_firewall_rules
      name: vw_ipv6_firewall_rules
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.startIPv6Address') as "start_ipv6_address",
              JSON_EXTRACT(properties, '$.endIPv6Address') as "end_ipv6_address",
              subscriptionId,
              resourceGroupName,
              serverName,
              firewallRuleName
              FROM azure.sql.ipv6_firewall_rules
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.startIPv6Address') as "start_ipv6_address",
                json_extract_path_text(properties, '$.endIPv6Address') as "end_ipv6_address",
                subscriptionId,
                resourceGroupName,
                serverName,
                firewallRuleName
                FROM azure.sql.ipv6_firewall_rules
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_private_link_resources:
      id: azure.sql.vw_private_link_resources
      name: vw_private_link_resources
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.groupId') as "group_id",
              JSON_EXTRACT(properties, '$.requiredMembers') as "required_members",
              JSON_EXTRACT(properties, '$.requiredZoneNames') as "required_zone_names",
              subscriptionId,
              resourceGroupName,
              serverName,
              groupName
              FROM azure.sql.private_link_resources
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.groupId') as "group_id",
                json_extract_path_text(properties, '$.requiredMembers') as "required_members",
                json_extract_path_text(properties, '$.requiredZoneNames') as "required_zone_names",
                subscriptionId,
                resourceGroupName,
                serverName,
                groupName
                FROM azure.sql.private_link_resources
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_managed_database_vulnerability_assessment_rule_baselines:
      id: azure.sql.vw_managed_database_vulnerability_assessment_rule_baselines
      name: vw_managed_database_vulnerability_assessment_rule_baselines
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.baselineResults') as "baseline_results",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              vulnerabilityAssessmentName,
              ruleId,
              baselineName
              FROM azure.sql.managed_database_vulnerability_assessment_rule_baselines
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND ruleId = 'replace-me' AND baselineName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.baselineResults') as "baseline_results",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                vulnerabilityAssessmentName,
                ruleId,
                baselineName
                FROM azure.sql.managed_database_vulnerability_assessment_rule_baselines
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND ruleId = 'replace-me' AND baselineName = 'replace-me';
    vw_time_zones:
      id: azure.sql.vw_time_zones
      name: vw_time_zones
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.timeZoneId') as "time_zone_id",
              JSON_EXTRACT(properties, '$.displayName') as "display_name",
              subscriptionId,
              locationName,
              timeZoneId
              FROM azure.sql.time_zones
              WHERE subscriptionId = 'replace-me' AND locationName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.timeZoneId') as "time_zone_id",
                json_extract_path_text(properties, '$.displayName') as "display_name",
                subscriptionId,
                locationName,
                timeZoneId
                FROM azure.sql.time_zones
                WHERE subscriptionId = 'replace-me' AND locationName = 'replace-me';
    vw_job_executions:
      id: azure.sql.vw_job_executions
      name: vw_job_executions
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.jobVersion') as "job_version",
              JSON_EXTRACT(properties, '$.stepName') as "step_name",
              JSON_EXTRACT(properties, '$.stepId') as "step_id",
              JSON_EXTRACT(properties, '$.jobExecutionId') as "job_execution_id",
              JSON_EXTRACT(properties, '$.lifecycle') as "lifecycle",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              JSON_EXTRACT(properties, '$.createTime') as "create_time",
              JSON_EXTRACT(properties, '$.startTime') as "start_time",
              JSON_EXTRACT(properties, '$.endTime') as "end_time",
              JSON_EXTRACT(properties, '$.currentAttempts') as "current_attempts",
              JSON_EXTRACT(properties, '$.currentAttemptStartTime') as "current_attempt_start_time",
              JSON_EXTRACT(properties, '$.lastMessage') as "last_message",
              JSON_EXTRACT(properties, '$.target') as "target",
              subscriptionId,
              resourceGroupName,
              serverName,
              jobAgentName,
              jobName,
              jobExecutionId
              FROM azure.sql.job_executions
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.jobVersion') as "job_version",
                json_extract_path_text(properties, '$.stepName') as "step_name",
                json_extract_path_text(properties, '$.stepId') as "step_id",
                json_extract_path_text(properties, '$.jobExecutionId') as "job_execution_id",
                json_extract_path_text(properties, '$.lifecycle') as "lifecycle",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                json_extract_path_text(properties, '$.createTime') as "create_time",
                json_extract_path_text(properties, '$.startTime') as "start_time",
                json_extract_path_text(properties, '$.endTime') as "end_time",
                json_extract_path_text(properties, '$.currentAttempts') as "current_attempts",
                json_extract_path_text(properties, '$.currentAttemptStartTime') as "current_attempt_start_time",
                json_extract_path_text(properties, '$.lastMessage') as "last_message",
                json_extract_path_text(properties, '$.target') as "target",
                subscriptionId,
                resourceGroupName,
                serverName,
                jobAgentName,
                jobName,
                jobExecutionId
                FROM azure.sql.job_executions
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me';
    vw_server_dns_aliases:
      id: azure.sql.vw_server_dns_aliases
      name: vw_server_dns_aliases
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.azureDnsRecord') as "azure_dns_record",
              subscriptionId,
              resourceGroupName,
              serverName,
              dnsAliasName
              FROM azure.sql.server_dns_aliases
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.azureDnsRecord') as "azure_dns_record",
                subscriptionId,
                resourceGroupName,
                serverName,
                dnsAliasName
                FROM azure.sql.server_dns_aliases
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_managed_database_vulnerability_assessments:
      id: azure.sql.vw_managed_database_vulnerability_assessments
      name: vw_managed_database_vulnerability_assessments
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.storageContainerPath') as "storage_container_path",
              JSON_EXTRACT(properties, '$.storageContainerSasKey') as "storage_container_sas_key",
              JSON_EXTRACT(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
              JSON_EXTRACT(properties, '$.recurringScans') as "recurring_scans",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              vulnerabilityAssessmentName
              FROM azure.sql.managed_database_vulnerability_assessments
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.storageContainerPath') as "storage_container_path",
                json_extract_path_text(properties, '$.storageContainerSasKey') as "storage_container_sas_key",
                json_extract_path_text(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
                json_extract_path_text(properties, '$.recurringScans') as "recurring_scans",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                vulnerabilityAssessmentName
                FROM azure.sql.managed_database_vulnerability_assessments
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
    vw_managed_database_restore_details:
      id: azure.sql.vw_managed_database_restore_details
      name: vw_managed_database_restore_details
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.type') as "type",
              JSON_EXTRACT(properties, '$.status') as "status",
              JSON_EXTRACT(properties, '$.blockReason') as "block_reason",
              JSON_EXTRACT(properties, '$.lastUploadedFileName') as "last_uploaded_file_name",
              JSON_EXTRACT(properties, '$.lastUploadedFileTime') as "last_uploaded_file_time",
              JSON_EXTRACT(properties, '$.lastRestoredFileName') as "last_restored_file_name",
              JSON_EXTRACT(properties, '$.lastRestoredFileTime') as "last_restored_file_time",
              JSON_EXTRACT(properties, '$.percentCompleted') as "percent_completed",
              JSON_EXTRACT(properties, '$.currentRestoredSizeMB') as "current_restored_size_mb",
              JSON_EXTRACT(properties, '$.currentRestorePlanSizeMB') as "current_restore_plan_size_mb",
              JSON_EXTRACT(properties, '$.currentBackupType') as "current_backup_type",
              JSON_EXTRACT(properties, '$.currentRestoringFileName') as "current_restoring_file_name",
              JSON_EXTRACT(properties, '$.numberOfFilesDetected') as "number_of_files_detected",
              JSON_EXTRACT(properties, '$.numberOfFilesQueued') as "number_of_files_queued",
              JSON_EXTRACT(properties, '$.numberOfFilesSkipped') as "number_of_files_skipped",
              JSON_EXTRACT(properties, '$.numberOfFilesRestoring') as "number_of_files_restoring",
              JSON_EXTRACT(properties, '$.numberOfFilesRestored') as "number_of_files_restored",
              JSON_EXTRACT(properties, '$.numberOfFilesUnrestorable') as "number_of_files_unrestorable",
              JSON_EXTRACT(properties, '$.fullBackupSets') as "full_backup_sets",
              JSON_EXTRACT(properties, '$.diffBackupSets') as "diff_backup_sets",
              JSON_EXTRACT(properties, '$.logBackupSets') as "log_backup_sets",
              JSON_EXTRACT(properties, '$.unrestorableFiles') as "unrestorable_files",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              restoreDetailsName
              FROM azure.sql.managed_database_restore_details
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me' AND restoreDetailsName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.type') as "type",
                json_extract_path_text(properties, '$.status') as "status",
                json_extract_path_text(properties, '$.blockReason') as "block_reason",
                json_extract_path_text(properties, '$.lastUploadedFileName') as "last_uploaded_file_name",
                json_extract_path_text(properties, '$.lastUploadedFileTime') as "last_uploaded_file_time",
                json_extract_path_text(properties, '$.lastRestoredFileName') as "last_restored_file_name",
                json_extract_path_text(properties, '$.lastRestoredFileTime') as "last_restored_file_time",
                json_extract_path_text(properties, '$.percentCompleted') as "percent_completed",
                json_extract_path_text(properties, '$.currentRestoredSizeMB') as "current_restored_size_mb",
                json_extract_path_text(properties, '$.currentRestorePlanSizeMB') as "current_restore_plan_size_mb",
                json_extract_path_text(properties, '$.currentBackupType') as "current_backup_type",
                json_extract_path_text(properties, '$.currentRestoringFileName') as "current_restoring_file_name",
                json_extract_path_text(properties, '$.numberOfFilesDetected') as "number_of_files_detected",
                json_extract_path_text(properties, '$.numberOfFilesQueued') as "number_of_files_queued",
                json_extract_path_text(properties, '$.numberOfFilesSkipped') as "number_of_files_skipped",
                json_extract_path_text(properties, '$.numberOfFilesRestoring') as "number_of_files_restoring",
                json_extract_path_text(properties, '$.numberOfFilesRestored') as "number_of_files_restored",
                json_extract_path_text(properties, '$.numberOfFilesUnrestorable') as "number_of_files_unrestorable",
                json_extract_path_text(properties, '$.fullBackupSets') as "full_backup_sets",
                json_extract_path_text(properties, '$.diffBackupSets') as "diff_backup_sets",
                json_extract_path_text(properties, '$.logBackupSets') as "log_backup_sets",
                json_extract_path_text(properties, '$.unrestorableFiles') as "unrestorable_files",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                restoreDetailsName
                FROM azure.sql.managed_database_restore_details
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me' AND restoreDetailsName = 'replace-me';
    vw_database_vulnerability_assessments:
      id: azure.sql.vw_database_vulnerability_assessments
      name: vw_database_vulnerability_assessments
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.storageContainerPath') as "storage_container_path",
              JSON_EXTRACT(properties, '$.storageContainerSasKey') as "storage_container_sas_key",
              JSON_EXTRACT(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
              JSON_EXTRACT(properties, '$.recurringScans') as "recurring_scans",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              vulnerabilityAssessmentName
              FROM azure.sql.database_vulnerability_assessments
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.storageContainerPath') as "storage_container_path",
                json_extract_path_text(properties, '$.storageContainerSasKey') as "storage_container_sas_key",
                json_extract_path_text(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
                json_extract_path_text(properties, '$.recurringScans') as "recurring_scans",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                vulnerabilityAssessmentName
                FROM azure.sql.database_vulnerability_assessments
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_managed_ledger_digest_uploads:
      id: azure.sql.vw_managed_ledger_digest_uploads
      name: vw_managed_ledger_digest_uploads
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.digestStorageEndpoint') as "digest_storage_endpoint",
              JSON_EXTRACT(properties, '$.state') as "state",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              ledgerDigestUploads
              FROM azure.sql.managed_ledger_digest_uploads
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.digestStorageEndpoint') as "digest_storage_endpoint",
                json_extract_path_text(properties, '$.state') as "state",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                ledgerDigestUploads
                FROM azure.sql.managed_ledger_digest_uploads
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
    vw_managed_server_security_alert_policies:
      id: azure.sql.vw_managed_server_security_alert_policies
      name: vw_managed_server_security_alert_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.disabledAlerts') as "disabled_alerts",
              JSON_EXTRACT(properties, '$.emailAddresses') as "email_addresses",
              JSON_EXTRACT(properties, '$.emailAccountAdmins') as "email_account_admins",
              JSON_EXTRACT(properties, '$.storageEndpoint') as "storage_endpoint",
              JSON_EXTRACT(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
              JSON_EXTRACT(properties, '$.retentionDays') as "retention_days",
              JSON_EXTRACT(properties, '$.creationTime') as "creation_time",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              securityAlertPolicyName
              FROM azure.sql.managed_server_security_alert_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND securityAlertPolicyName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.disabledAlerts') as "disabled_alerts",
                json_extract_path_text(properties, '$.emailAddresses') as "email_addresses",
                json_extract_path_text(properties, '$.emailAccountAdmins') as "email_account_admins",
                json_extract_path_text(properties, '$.storageEndpoint') as "storage_endpoint",
                json_extract_path_text(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
                json_extract_path_text(properties, '$.retentionDays') as "retention_days",
                json_extract_path_text(properties, '$.creationTime') as "creation_time",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                securityAlertPolicyName
                FROM azure.sql.managed_server_security_alert_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND securityAlertPolicyName = 'replace-me';
    vw_database_advisors:
      id: azure.sql.vw_database_advisors
      name: vw_database_advisors
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              kind as kind,
              JSON_EXTRACT(properties, '$.advisorStatus') as "advisor_status",
              JSON_EXTRACT(properties, '$.autoExecuteStatus') as "auto_execute_status",
              JSON_EXTRACT(properties, '$.autoExecuteStatusInheritedFrom') as "auto_execute_status_inherited_from",
              JSON_EXTRACT(properties, '$.recommendationsStatus') as "recommendations_status",
              JSON_EXTRACT(properties, '$.lastChecked') as "last_checked",
              JSON_EXTRACT(properties, '$.recommendedActions') as "recommended_actions",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              advisorName
              FROM azure.sql.database_advisors
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND advisorName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                kind as kind,
                json_extract_path_text(properties, '$.advisorStatus') as "advisor_status",
                json_extract_path_text(properties, '$.autoExecuteStatus') as "auto_execute_status",
                json_extract_path_text(properties, '$.autoExecuteStatusInheritedFrom') as "auto_execute_status_inherited_from",
                json_extract_path_text(properties, '$.recommendationsStatus') as "recommendations_status",
                json_extract_path_text(properties, '$.lastChecked') as "last_checked",
                json_extract_path_text(properties, '$.recommendedActions') as "recommended_actions",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                advisorName
                FROM azure.sql.database_advisors
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND advisorName = 'replace-me';
    vw_long_term_retention_policies:
      id: azure.sql.vw_long_term_retention_policies
      name: vw_long_term_retention_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.makeBackupsImmutable') as "make_backups_immutable",
              JSON_EXTRACT(properties, '$.backupStorageAccessTier') as "backup_storage_access_tier",
              JSON_EXTRACT(properties, '$.weeklyRetention') as "weekly_retention",
              JSON_EXTRACT(properties, '$.monthlyRetention') as "monthly_retention",
              JSON_EXTRACT(properties, '$.yearlyRetention') as "yearly_retention",
              JSON_EXTRACT(properties, '$.weekOfYear') as "week_of_year",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              policyName
              FROM azure.sql.long_term_retention_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.makeBackupsImmutable') as "make_backups_immutable",
                json_extract_path_text(properties, '$.backupStorageAccessTier') as "backup_storage_access_tier",
                json_extract_path_text(properties, '$.weeklyRetention') as "weekly_retention",
                json_extract_path_text(properties, '$.monthlyRetention') as "monthly_retention",
                json_extract_path_text(properties, '$.yearlyRetention') as "yearly_retention",
                json_extract_path_text(properties, '$.weekOfYear') as "week_of_year",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                policyName
                FROM azure.sql.long_term_retention_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_managed_instance_private_link_resources:
      id: azure.sql.vw_managed_instance_private_link_resources
      name: vw_managed_instance_private_link_resources
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.groupId') as "group_id",
              JSON_EXTRACT(properties, '$.requiredMembers') as "required_members",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              groupName
              FROM azure.sql.managed_instance_private_link_resources
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND groupName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.groupId') as "group_id",
                json_extract_path_text(properties, '$.requiredMembers') as "required_members",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                groupName
                FROM azure.sql.managed_instance_private_link_resources
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND groupName = 'replace-me';
    vw_server_blob_auditing_policies:
      id: azure.sql.vw_server_blob_auditing_policies
      name: vw_server_blob_auditing_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.isDevopsAuditEnabled') as "is_devops_audit_enabled",
              JSON_EXTRACT(properties, '$.retentionDays') as "retention_days",
              JSON_EXTRACT(properties, '$.auditActionsAndGroups') as "audit_actions_and_groups",
              JSON_EXTRACT(properties, '$.isStorageSecondaryKeyInUse') as "is_storage_secondary_key_in_use",
              JSON_EXTRACT(properties, '$.isAzureMonitorTargetEnabled') as "is_azure_monitor_target_enabled",
              JSON_EXTRACT(properties, '$.queueDelayMs') as "queue_delay_ms",
              JSON_EXTRACT(properties, '$.isManagedIdentityInUse') as "is_managed_identity_in_use",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.storageEndpoint') as "storage_endpoint",
              JSON_EXTRACT(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
              JSON_EXTRACT(properties, '$.storageAccountSubscriptionId') as "storage_account_subscription_id",
              subscriptionId,
              resourceGroupName,
              serverName,
              blobAuditingPolicyName
              FROM azure.sql.server_blob_auditing_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.isDevopsAuditEnabled') as "is_devops_audit_enabled",
                json_extract_path_text(properties, '$.retentionDays') as "retention_days",
                json_extract_path_text(properties, '$.auditActionsAndGroups') as "audit_actions_and_groups",
                json_extract_path_text(properties, '$.isStorageSecondaryKeyInUse') as "is_storage_secondary_key_in_use",
                json_extract_path_text(properties, '$.isAzureMonitorTargetEnabled') as "is_azure_monitor_target_enabled",
                json_extract_path_text(properties, '$.queueDelayMs') as "queue_delay_ms",
                json_extract_path_text(properties, '$.isManagedIdentityInUse') as "is_managed_identity_in_use",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.storageEndpoint') as "storage_endpoint",
                json_extract_path_text(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
                json_extract_path_text(properties, '$.storageAccountSubscriptionId') as "storage_account_subscription_id",
                subscriptionId,
                resourceGroupName,
                serverName,
                blobAuditingPolicyName
                FROM azure.sql.server_blob_auditing_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_database_blob_auditing_policies:
      id: azure.sql.vw_database_blob_auditing_policies
      name: vw_database_blob_auditing_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              kind as kind,
              JSON_EXTRACT(properties, '$.retentionDays') as "retention_days",
              JSON_EXTRACT(properties, '$.auditActionsAndGroups') as "audit_actions_and_groups",
              JSON_EXTRACT(properties, '$.isStorageSecondaryKeyInUse') as "is_storage_secondary_key_in_use",
              JSON_EXTRACT(properties, '$.isAzureMonitorTargetEnabled') as "is_azure_monitor_target_enabled",
              JSON_EXTRACT(properties, '$.queueDelayMs') as "queue_delay_ms",
              JSON_EXTRACT(properties, '$.isManagedIdentityInUse') as "is_managed_identity_in_use",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.storageEndpoint') as "storage_endpoint",
              JSON_EXTRACT(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
              JSON_EXTRACT(properties, '$.storageAccountSubscriptionId') as "storage_account_subscription_id",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              blobAuditingPolicyName
              FROM azure.sql.database_blob_auditing_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                kind as kind,
                json_extract_path_text(properties, '$.retentionDays') as "retention_days",
                json_extract_path_text(properties, '$.auditActionsAndGroups') as "audit_actions_and_groups",
                json_extract_path_text(properties, '$.isStorageSecondaryKeyInUse') as "is_storage_secondary_key_in_use",
                json_extract_path_text(properties, '$.isAzureMonitorTargetEnabled') as "is_azure_monitor_target_enabled",
                json_extract_path_text(properties, '$.queueDelayMs') as "queue_delay_ms",
                json_extract_path_text(properties, '$.isManagedIdentityInUse') as "is_managed_identity_in_use",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.storageEndpoint') as "storage_endpoint",
                json_extract_path_text(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
                json_extract_path_text(properties, '$.storageAccountSubscriptionId') as "storage_account_subscription_id",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                blobAuditingPolicyName
                FROM azure.sql.database_blob_auditing_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_extended_database_blob_auditing_policies:
      id: azure.sql.vw_extended_database_blob_auditing_policies
      name: vw_extended_database_blob_auditing_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.predicateExpression') as "predicate_expression",
              JSON_EXTRACT(properties, '$.retentionDays') as "retention_days",
              JSON_EXTRACT(properties, '$.auditActionsAndGroups') as "audit_actions_and_groups",
              JSON_EXTRACT(properties, '$.isStorageSecondaryKeyInUse') as "is_storage_secondary_key_in_use",
              JSON_EXTRACT(properties, '$.isAzureMonitorTargetEnabled') as "is_azure_monitor_target_enabled",
              JSON_EXTRACT(properties, '$.queueDelayMs') as "queue_delay_ms",
              JSON_EXTRACT(properties, '$.isManagedIdentityInUse') as "is_managed_identity_in_use",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.storageEndpoint') as "storage_endpoint",
              JSON_EXTRACT(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
              JSON_EXTRACT(properties, '$.storageAccountSubscriptionId') as "storage_account_subscription_id",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              blobAuditingPolicyName
              FROM azure.sql.extended_database_blob_auditing_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.predicateExpression') as "predicate_expression",
                json_extract_path_text(properties, '$.retentionDays') as "retention_days",
                json_extract_path_text(properties, '$.auditActionsAndGroups') as "audit_actions_and_groups",
                json_extract_path_text(properties, '$.isStorageSecondaryKeyInUse') as "is_storage_secondary_key_in_use",
                json_extract_path_text(properties, '$.isAzureMonitorTargetEnabled') as "is_azure_monitor_target_enabled",
                json_extract_path_text(properties, '$.queueDelayMs') as "queue_delay_ms",
                json_extract_path_text(properties, '$.isManagedIdentityInUse') as "is_managed_identity_in_use",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.storageEndpoint') as "storage_endpoint",
                json_extract_path_text(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
                json_extract_path_text(properties, '$.storageAccountSubscriptionId') as "storage_account_subscription_id",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                blobAuditingPolicyName
                FROM azure.sql.extended_database_blob_auditing_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_extended_server_blob_auditing_policies:
      id: azure.sql.vw_extended_server_blob_auditing_policies
      name: vw_extended_server_blob_auditing_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.isDevopsAuditEnabled') as "is_devops_audit_enabled",
              JSON_EXTRACT(properties, '$.predicateExpression') as "predicate_expression",
              JSON_EXTRACT(properties, '$.retentionDays') as "retention_days",
              JSON_EXTRACT(properties, '$.auditActionsAndGroups') as "audit_actions_and_groups",
              JSON_EXTRACT(properties, '$.isStorageSecondaryKeyInUse') as "is_storage_secondary_key_in_use",
              JSON_EXTRACT(properties, '$.isAzureMonitorTargetEnabled') as "is_azure_monitor_target_enabled",
              JSON_EXTRACT(properties, '$.queueDelayMs') as "queue_delay_ms",
              JSON_EXTRACT(properties, '$.isManagedIdentityInUse') as "is_managed_identity_in_use",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.storageEndpoint') as "storage_endpoint",
              JSON_EXTRACT(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
              JSON_EXTRACT(properties, '$.storageAccountSubscriptionId') as "storage_account_subscription_id",
              subscriptionId,
              resourceGroupName,
              serverName,
              blobAuditingPolicyName
              FROM azure.sql.extended_server_blob_auditing_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.isDevopsAuditEnabled') as "is_devops_audit_enabled",
                json_extract_path_text(properties, '$.predicateExpression') as "predicate_expression",
                json_extract_path_text(properties, '$.retentionDays') as "retention_days",
                json_extract_path_text(properties, '$.auditActionsAndGroups') as "audit_actions_and_groups",
                json_extract_path_text(properties, '$.isStorageSecondaryKeyInUse') as "is_storage_secondary_key_in_use",
                json_extract_path_text(properties, '$.isAzureMonitorTargetEnabled') as "is_azure_monitor_target_enabled",
                json_extract_path_text(properties, '$.queueDelayMs') as "queue_delay_ms",
                json_extract_path_text(properties, '$.isManagedIdentityInUse') as "is_managed_identity_in_use",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.storageEndpoint') as "storage_endpoint",
                json_extract_path_text(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
                json_extract_path_text(properties, '$.storageAccountSubscriptionId') as "storage_account_subscription_id",
                subscriptionId,
                resourceGroupName,
                serverName,
                blobAuditingPolicyName
                FROM azure.sql.extended_server_blob_auditing_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_server_configuration_options:
      id: azure.sql.vw_server_configuration_options
      name: vw_server_configuration_options
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.serverConfigurationOptionValue') as "server_configuration_option_value",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              serverConfigurationOptionName
              FROM azure.sql.server_configuration_options
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND serverConfigurationOptionName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.serverConfigurationOptionValue') as "server_configuration_option_value",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                serverConfigurationOptionName
                FROM azure.sql.server_configuration_options
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND serverConfigurationOptionName = 'replace-me';
    vw_managed_instance_keys:
      id: azure.sql.vw_managed_instance_keys
      name: vw_managed_instance_keys
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              kind as kind,
              JSON_EXTRACT(properties, '$.serverKeyType') as "server_key_type",
              JSON_EXTRACT(properties, '$.uri') as "uri",
              JSON_EXTRACT(properties, '$.thumbprint') as "thumbprint",
              JSON_EXTRACT(properties, '$.creationDate') as "creation_date",
              JSON_EXTRACT(properties, '$.autoRotationEnabled') as "auto_rotation_enabled",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              keyName
              FROM azure.sql.managed_instance_keys
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND keyName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                kind as kind,
                json_extract_path_text(properties, '$.serverKeyType') as "server_key_type",
                json_extract_path_text(properties, '$.uri') as "uri",
                json_extract_path_text(properties, '$.thumbprint') as "thumbprint",
                json_extract_path_text(properties, '$.creationDate') as "creation_date",
                json_extract_path_text(properties, '$.autoRotationEnabled') as "auto_rotation_enabled",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                keyName
                FROM azure.sql.managed_instance_keys
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND keyName = 'replace-me';
    vw_managed_instance_administrators:
      id: azure.sql.vw_managed_instance_administrators
      name: vw_managed_instance_administrators
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.administratorType') as "administrator_type",
              JSON_EXTRACT(properties, '$.login') as "login",
              JSON_EXTRACT(properties, '$.sid') as "sid",
              JSON_EXTRACT(properties, '$.tenantId') as "tenant_id",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              administratorName
              FROM azure.sql.managed_instance_administrators
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND administratorName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.administratorType') as "administrator_type",
                json_extract_path_text(properties, '$.login') as "login",
                json_extract_path_text(properties, '$.sid') as "sid",
                json_extract_path_text(properties, '$.tenantId') as "tenant_id",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                administratorName
                FROM azure.sql.managed_instance_administrators
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND administratorName = 'replace-me';
    vw_recoverable_databases:
      id: azure.sql.vw_recoverable_databases
      name: vw_recoverable_databases
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.edition') as "edition",
              JSON_EXTRACT(properties, '$.serviceLevelObjective') as "service_level_objective",
              JSON_EXTRACT(properties, '$.elasticPoolName') as "elastic_pool_name",
              JSON_EXTRACT(properties, '$.lastAvailableBackupDate') as "last_available_backup_date",
              JSON_EXTRACT(properties, '$.keys') as "keys",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName
              FROM azure.sql.recoverable_databases
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.edition') as "edition",
                json_extract_path_text(properties, '$.serviceLevelObjective') as "service_level_objective",
                json_extract_path_text(properties, '$.elasticPoolName') as "elastic_pool_name",
                json_extract_path_text(properties, '$.lastAvailableBackupDate') as "last_available_backup_date",
                json_extract_path_text(properties, '$.keys') as "keys",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName
                FROM azure.sql.recoverable_databases
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_vulnerability_assessment_scans:
      id: azure.sql.vw_vulnerability_assessment_scans
      name: vw_vulnerability_assessment_scans
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.scanId') as "scan_id",
              JSON_EXTRACT(properties, '$.triggerType') as "trigger_type",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.startTime') as "start_time",
              JSON_EXTRACT(properties, '$.endTime') as "end_time",
              JSON_EXTRACT(properties, '$.errors') as "errors",
              JSON_EXTRACT(properties, '$.server') as "server",
              JSON_EXTRACT(properties, '$.database') as "database",
              JSON_EXTRACT(properties, '$.sqlVersion') as "sql_version",
              JSON_EXTRACT(properties, '$.highSeverityFailedRulesCount') as "high_severity_failed_rules_count",
              JSON_EXTRACT(properties, '$.mediumSeverityFailedRulesCount') as "medium_severity_failed_rules_count",
              JSON_EXTRACT(properties, '$.lowSeverityFailedRulesCount') as "low_severity_failed_rules_count",
              JSON_EXTRACT(properties, '$.totalPassedRulesCount') as "total_passed_rules_count",
              JSON_EXTRACT(properties, '$.totalFailedRulesCount') as "total_failed_rules_count",
              JSON_EXTRACT(properties, '$.totalRulesCount') as "total_rules_count",
              JSON_EXTRACT(properties, '$.isBaselineApplied') as "is_baseline_applied",
              JSON_EXTRACT(properties, '$.lastScanTime') as "last_scan_time",
              subscriptionId,
              resourceGroupName,
              serverName,
              vulnerabilityAssessmentName,
              scanId,
              systemDatabaseName
              FROM azure.sql.vulnerability_assessment_scans
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND systemDatabaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.scanId') as "scan_id",
                json_extract_path_text(properties, '$.triggerType') as "trigger_type",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.startTime') as "start_time",
                json_extract_path_text(properties, '$.endTime') as "end_time",
                json_extract_path_text(properties, '$.errors') as "errors",
                json_extract_path_text(properties, '$.server') as "server",
                json_extract_path_text(properties, '$.database') as "database",
                json_extract_path_text(properties, '$.sqlVersion') as "sql_version",
                json_extract_path_text(properties, '$.highSeverityFailedRulesCount') as "high_severity_failed_rules_count",
                json_extract_path_text(properties, '$.mediumSeverityFailedRulesCount') as "medium_severity_failed_rules_count",
                json_extract_path_text(properties, '$.lowSeverityFailedRulesCount') as "low_severity_failed_rules_count",
                json_extract_path_text(properties, '$.totalPassedRulesCount') as "total_passed_rules_count",
                json_extract_path_text(properties, '$.totalFailedRulesCount') as "total_failed_rules_count",
                json_extract_path_text(properties, '$.totalRulesCount') as "total_rules_count",
                json_extract_path_text(properties, '$.isBaselineApplied') as "is_baseline_applied",
                json_extract_path_text(properties, '$.lastScanTime') as "last_scan_time",
                subscriptionId,
                resourceGroupName,
                serverName,
                vulnerabilityAssessmentName,
                scanId,
                systemDatabaseName
                FROM azure.sql.vulnerability_assessment_scans
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND systemDatabaseName = 'replace-me';
    vw_managed_instances:
      id: azure.sql.vw_managed_instances
      name: vw_managed_instances
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              tags as tags,
              identity as identity,
              sku as sku,
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              JSON_EXTRACT(properties, '$.managedInstanceCreateMode') as "managed_instance_create_mode",
              JSON_EXTRACT(properties, '$.fullyQualifiedDomainName') as "fully_qualified_domain_name",
              JSON_EXTRACT(properties, '$.isGeneralPurposeV2') as "is_general_purpose_v2",
              JSON_EXTRACT(properties, '$.administratorLogin') as "administrator_login",
              JSON_EXTRACT(properties, '$.administratorLoginPassword') as "administrator_login_password",
              JSON_EXTRACT(properties, '$.subnetId') as "subnet_id",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.licenseType') as "license_type",
              JSON_EXTRACT(properties, '$.hybridSecondaryUsage') as "hybrid_secondary_usage",
              JSON_EXTRACT(properties, '$.hybridSecondaryUsageDetected') as "hybrid_secondary_usage_detected",
              JSON_EXTRACT(properties, '$.vCores') as "v_cores",
              JSON_EXTRACT(properties, '$.storageSizeInGB') as "storage_size_in_gb",
              JSON_EXTRACT(properties, '$.storageIOps') as "storage_i_ops",
              JSON_EXTRACT(properties, '$.storageThroughputMBps') as "storage_throughput_mbps",
              JSON_EXTRACT(properties, '$.collation') as "collation",
              JSON_EXTRACT(properties, '$.dnsZone') as "dns_zone",
              JSON_EXTRACT(properties, '$.dnsZonePartner') as "dns_zone_partner",
              JSON_EXTRACT(properties, '$.publicDataEndpointEnabled') as "public_data_endpoint_enabled",
              JSON_EXTRACT(properties, '$.sourceManagedInstanceId') as "source_managed_instance_id",
              JSON_EXTRACT(properties, '$.restorePointInTime') as "restore_point_in_time",
              JSON_EXTRACT(properties, '$.proxyOverride') as "proxy_override",
              JSON_EXTRACT(properties, '$.timezoneId') as "timezone_id",
              JSON_EXTRACT(properties, '$.instancePoolId') as "instance_pool_id",
              JSON_EXTRACT(properties, '$.maintenanceConfigurationId') as "maintenance_configuration_id",
              JSON_EXTRACT(properties, '$.privateEndpointConnections') as "private_endpoint_connections",
              JSON_EXTRACT(properties, '$.minimalTlsVersion') as "minimal_tls_version",
              JSON_EXTRACT(properties, '$.currentBackupStorageRedundancy') as "current_backup_storage_redundancy",
              JSON_EXTRACT(properties, '$.requestedBackupStorageRedundancy') as "requested_backup_storage_redundancy",
              JSON_EXTRACT(properties, '$.zoneRedundant') as "zone_redundant",
              JSON_EXTRACT(properties, '$.primaryUserAssignedIdentityId') as "primary_user_assigned_identity_id",
              JSON_EXTRACT(properties, '$.keyId') as "key_id",
              JSON_EXTRACT(properties, '$.administrators') as "administrators",
              JSON_EXTRACT(properties, '$.servicePrincipal') as "service_principal",
              JSON_EXTRACT(properties, '$.virtualClusterId') as "virtual_cluster_id",
              JSON_EXTRACT(properties, '$.externalGovernanceStatus') as "external_governance_status",
              JSON_EXTRACT(properties, '$.pricingModel') as "pricing_model",
              JSON_EXTRACT(properties, '$.createTime') as "create_time",
              JSON_EXTRACT(properties, '$.authenticationMetadata') as "authentication_metadata",
              JSON_EXTRACT(properties, '$.databaseFormat') as "database_format",
              subscriptionId,
              resourceGroupName,
              managedInstanceName
              FROM azure.sql.managed_instances
              WHERE subscriptionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                tags as tags,
                identity as identity,
                sku as sku,
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                json_extract_path_text(properties, '$.managedInstanceCreateMode') as "managed_instance_create_mode",
                json_extract_path_text(properties, '$.fullyQualifiedDomainName') as "fully_qualified_domain_name",
                json_extract_path_text(properties, '$.isGeneralPurposeV2') as "is_general_purpose_v2",
                json_extract_path_text(properties, '$.administratorLogin') as "administrator_login",
                json_extract_path_text(properties, '$.administratorLoginPassword') as "administrator_login_password",
                json_extract_path_text(properties, '$.subnetId') as "subnet_id",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.licenseType') as "license_type",
                json_extract_path_text(properties, '$.hybridSecondaryUsage') as "hybrid_secondary_usage",
                json_extract_path_text(properties, '$.hybridSecondaryUsageDetected') as "hybrid_secondary_usage_detected",
                json_extract_path_text(properties, '$.vCores') as "v_cores",
                json_extract_path_text(properties, '$.storageSizeInGB') as "storage_size_in_gb",
                json_extract_path_text(properties, '$.storageIOps') as "storage_i_ops",
                json_extract_path_text(properties, '$.storageThroughputMBps') as "storage_throughput_mbps",
                json_extract_path_text(properties, '$.collation') as "collation",
                json_extract_path_text(properties, '$.dnsZone') as "dns_zone",
                json_extract_path_text(properties, '$.dnsZonePartner') as "dns_zone_partner",
                json_extract_path_text(properties, '$.publicDataEndpointEnabled') as "public_data_endpoint_enabled",
                json_extract_path_text(properties, '$.sourceManagedInstanceId') as "source_managed_instance_id",
                json_extract_path_text(properties, '$.restorePointInTime') as "restore_point_in_time",
                json_extract_path_text(properties, '$.proxyOverride') as "proxy_override",
                json_extract_path_text(properties, '$.timezoneId') as "timezone_id",
                json_extract_path_text(properties, '$.instancePoolId') as "instance_pool_id",
                json_extract_path_text(properties, '$.maintenanceConfigurationId') as "maintenance_configuration_id",
                json_extract_path_text(properties, '$.privateEndpointConnections') as "private_endpoint_connections",
                json_extract_path_text(properties, '$.minimalTlsVersion') as "minimal_tls_version",
                json_extract_path_text(properties, '$.currentBackupStorageRedundancy') as "current_backup_storage_redundancy",
                json_extract_path_text(properties, '$.requestedBackupStorageRedundancy') as "requested_backup_storage_redundancy",
                json_extract_path_text(properties, '$.zoneRedundant') as "zone_redundant",
                json_extract_path_text(properties, '$.primaryUserAssignedIdentityId') as "primary_user_assigned_identity_id",
                json_extract_path_text(properties, '$.keyId') as "key_id",
                json_extract_path_text(properties, '$.administrators') as "administrators",
                json_extract_path_text(properties, '$.servicePrincipal') as "service_principal",
                json_extract_path_text(properties, '$.virtualClusterId') as "virtual_cluster_id",
                json_extract_path_text(properties, '$.externalGovernanceStatus') as "external_governance_status",
                json_extract_path_text(properties, '$.pricingModel') as "pricing_model",
                json_extract_path_text(properties, '$.createTime') as "create_time",
                json_extract_path_text(properties, '$.authenticationMetadata') as "authentication_metadata",
                json_extract_path_text(properties, '$.databaseFormat') as "database_format",
                subscriptionId,
                resourceGroupName,
                managedInstanceName
                FROM azure.sql.managed_instances
                WHERE subscriptionId = 'replace-me';
    vw_managed_instance_dtcs:
      id: azure.sql.vw_managed_instance_dtcs
      name: vw_managed_instance_dtcs
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.dtcEnabled') as "dtc_enabled",
              JSON_EXTRACT(properties, '$.securitySettings') as "security_settings",
              JSON_EXTRACT(properties, '$.externalDnsSuffixSearchList') as "external_dns_suffix_search_list",
              JSON_EXTRACT(properties, '$.dtcHostNameDnsSuffix') as "dtc_host_name_dns_suffix",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              dtcName
              FROM azure.sql.managed_instance_dtcs
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND dtcName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.dtcEnabled') as "dtc_enabled",
                json_extract_path_text(properties, '$.securitySettings') as "security_settings",
                json_extract_path_text(properties, '$.externalDnsSuffixSearchList') as "external_dns_suffix_search_list",
                json_extract_path_text(properties, '$.dtcHostNameDnsSuffix') as "dtc_host_name_dns_suffix",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                dtcName
                FROM azure.sql.managed_instance_dtcs
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND dtcName = 'replace-me';
    vw_maintenance_windows:
      id: azure.sql.vw_maintenance_windows
      name: vw_maintenance_windows
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.timeRanges') as "time_ranges",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              maintenanceWindowName
              FROM azure.sql.maintenance_windows
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND maintenanceWindowName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.timeRanges') as "time_ranges",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                maintenanceWindowName
                FROM azure.sql.maintenance_windows
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND maintenanceWindowName = 'replace-me';
    vw_vulnerability_assessment_scan_results:
      id: azure.sql.vw_vulnerability_assessment_scan_results
      name: vw_vulnerability_assessment_scan_results
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.ruleId') as "rule_id",
              JSON_EXTRACT(properties, '$.status') as "status",
              JSON_EXTRACT(properties, '$.errorMessage') as "error_message",
              JSON_EXTRACT(properties, '$.isTrimmed') as "is_trimmed",
              JSON_EXTRACT(properties, '$.queryResults') as "query_results",
              JSON_EXTRACT(properties, '$.remediation') as "remediation",
              JSON_EXTRACT(properties, '$.baselineAdjustedResult') as "baseline_adjusted_result",
              JSON_EXTRACT(properties, '$.ruleMetadata') as "rule_metadata",
              subscriptionId,
              resourceGroupName,
              serverName,
              vulnerabilityAssessmentName,
              scanId,
              scanResultId,
              systemDatabaseName
              FROM azure.sql.vulnerability_assessment_scan_results
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND scanId = 'replace-me' AND systemDatabaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.ruleId') as "rule_id",
                json_extract_path_text(properties, '$.status') as "status",
                json_extract_path_text(properties, '$.errorMessage') as "error_message",
                json_extract_path_text(properties, '$.isTrimmed') as "is_trimmed",
                json_extract_path_text(properties, '$.queryResults') as "query_results",
                json_extract_path_text(properties, '$.remediation') as "remediation",
                json_extract_path_text(properties, '$.baselineAdjustedResult') as "baseline_adjusted_result",
                json_extract_path_text(properties, '$.ruleMetadata') as "rule_metadata",
                subscriptionId,
                resourceGroupName,
                serverName,
                vulnerabilityAssessmentName,
                scanId,
                scanResultId,
                systemDatabaseName
                FROM azure.sql.vulnerability_assessment_scan_results
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND scanId = 'replace-me' AND systemDatabaseName = 'replace-me';
    vw_outbound_firewall_rules:
      id: azure.sql.vw_outbound_firewall_rules
      name: vw_outbound_firewall_rules
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              subscriptionId,
              resourceGroupName,
              serverName,
              outboundRuleFqdn
              FROM azure.sql.outbound_firewall_rules
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                subscriptionId,
                resourceGroupName,
                serverName,
                outboundRuleFqdn
                FROM azure.sql.outbound_firewall_rules
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_sync_agents:
      id: azure.sql.vw_sync_agents
      name: vw_sync_agents
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.name') as "name",
              JSON_EXTRACT(properties, '$.syncDatabaseId') as "sync_database_id",
              JSON_EXTRACT(properties, '$.lastAliveTime') as "last_alive_time",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.isUpToDate') as "is_up_to_date",
              JSON_EXTRACT(properties, '$.expiryTime') as "expiry_time",
              JSON_EXTRACT(properties, '$.version') as "version",
              subscriptionId,
              resourceGroupName,
              serverName,
              syncAgentName
              FROM azure.sql.sync_agents
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.name') as "name",
                json_extract_path_text(properties, '$.syncDatabaseId') as "sync_database_id",
                json_extract_path_text(properties, '$.lastAliveTime') as "last_alive_time",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.isUpToDate') as "is_up_to_date",
                json_extract_path_text(properties, '$.expiryTime') as "expiry_time",
                json_extract_path_text(properties, '$.version') as "version",
                subscriptionId,
                resourceGroupName,
                serverName,
                syncAgentName
                FROM azure.sql.sync_agents
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_long_term_retention_backups:
      id: azure.sql.vw_long_term_retention_backups
      name: vw_long_term_retention_backups
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.serverName') as "server_name",
              JSON_EXTRACT(properties, '$.serverCreateTime') as "server_create_time",
              JSON_EXTRACT(properties, '$.databaseName') as "database_name",
              JSON_EXTRACT(properties, '$.databaseDeletionTime') as "database_deletion_time",
              JSON_EXTRACT(properties, '$.backupTime') as "backup_time",
              JSON_EXTRACT(properties, '$.backupExpirationTime') as "backup_expiration_time",
              JSON_EXTRACT(properties, '$.backupStorageRedundancy') as "backup_storage_redundancy",
              JSON_EXTRACT(properties, '$.requestedBackupStorageRedundancy') as "requested_backup_storage_redundancy",
              JSON_EXTRACT(properties, '$.isBackupImmutable') as "is_backup_immutable",
              JSON_EXTRACT(properties, '$.backupStorageAccessTier') as "backup_storage_access_tier",
              subscriptionId,
              resourceGroupName,
              locationName,
              longTermRetentionServerName,
              longTermRetentionDatabaseName,
              backupName
              FROM azure.sql.long_term_retention_backups
              WHERE subscriptionId = 'replace-me' AND locationName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.serverName') as "server_name",
                json_extract_path_text(properties, '$.serverCreateTime') as "server_create_time",
                json_extract_path_text(properties, '$.databaseName') as "database_name",
                json_extract_path_text(properties, '$.databaseDeletionTime') as "database_deletion_time",
                json_extract_path_text(properties, '$.backupTime') as "backup_time",
                json_extract_path_text(properties, '$.backupExpirationTime') as "backup_expiration_time",
                json_extract_path_text(properties, '$.backupStorageRedundancy') as "backup_storage_redundancy",
                json_extract_path_text(properties, '$.requestedBackupStorageRedundancy') as "requested_backup_storage_redundancy",
                json_extract_path_text(properties, '$.isBackupImmutable') as "is_backup_immutable",
                json_extract_path_text(properties, '$.backupStorageAccessTier') as "backup_storage_access_tier",
                subscriptionId,
                resourceGroupName,
                locationName,
                longTermRetentionServerName,
                longTermRetentionDatabaseName,
                backupName
                FROM azure.sql.long_term_retention_backups
                WHERE subscriptionId = 'replace-me' AND locationName = 'replace-me';
    vw_vulnerability_assessment_rule_baselines:
      id: azure.sql.vw_vulnerability_assessment_rule_baselines
      name: vw_vulnerability_assessment_rule_baselines
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.results') as "results",
              subscriptionId,
              resourceGroupName,
              serverName,
              vulnerabilityAssessmentName,
              baselineName,
              ruleId,
              systemDatabaseName
              FROM azure.sql.vulnerability_assessment_rule_baselines
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND baselineName = 'replace-me' AND systemDatabaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.results') as "results",
                subscriptionId,
                resourceGroupName,
                serverName,
                vulnerabilityAssessmentName,
                baselineName,
                ruleId,
                systemDatabaseName
                FROM azure.sql.vulnerability_assessment_rule_baselines
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND baselineName = 'replace-me' AND systemDatabaseName = 'replace-me';
    vw_workload_classifiers:
      id: azure.sql.vw_workload_classifiers
      name: vw_workload_classifiers
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.memberName') as "member_name",
              JSON_EXTRACT(properties, '$.label') as "label",
              JSON_EXTRACT(properties, '$.context') as "context",
              JSON_EXTRACT(properties, '$.startTime') as "start_time",
              JSON_EXTRACT(properties, '$.endTime') as "end_time",
              JSON_EXTRACT(properties, '$.importance') as "importance",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              workloadGroupName,
              workloadClassifierName
              FROM azure.sql.workload_classifiers
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND workloadGroupName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.memberName') as "member_name",
                json_extract_path_text(properties, '$.label') as "label",
                json_extract_path_text(properties, '$.context') as "context",
                json_extract_path_text(properties, '$.startTime') as "start_time",
                json_extract_path_text(properties, '$.endTime') as "end_time",
                json_extract_path_text(properties, '$.importance') as "importance",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                workloadGroupName,
                workloadClassifierName
                FROM azure.sql.workload_classifiers
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND workloadGroupName = 'replace-me';
    vw_server_communication_links:
      id: azure.sql.vw_server_communication_links
      name: vw_server_communication_links
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              kind as kind,
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.partnerServer') as "partner_server",
              subscriptionId,
              resourceGroupName,
              serverName,
              communicationLinkName
              FROM azure.sql.server_communication_links
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                kind as kind,
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.partnerServer') as "partner_server",
                subscriptionId,
                resourceGroupName,
                serverName,
                communicationLinkName
                FROM azure.sql.server_communication_links
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_database_security_alert_policies:
      id: azure.sql.vw_database_security_alert_policies
      name: vw_database_security_alert_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.disabledAlerts') as "disabled_alerts",
              JSON_EXTRACT(properties, '$.emailAddresses') as "email_addresses",
              JSON_EXTRACT(properties, '$.emailAccountAdmins') as "email_account_admins",
              JSON_EXTRACT(properties, '$.storageEndpoint') as "storage_endpoint",
              JSON_EXTRACT(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
              JSON_EXTRACT(properties, '$.retentionDays') as "retention_days",
              JSON_EXTRACT(properties, '$.creationTime') as "creation_time",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              securityAlertPolicyName
              FROM azure.sql.database_security_alert_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.disabledAlerts') as "disabled_alerts",
                json_extract_path_text(properties, '$.emailAddresses') as "email_addresses",
                json_extract_path_text(properties, '$.emailAccountAdmins') as "email_account_admins",
                json_extract_path_text(properties, '$.storageEndpoint') as "storage_endpoint",
                json_extract_path_text(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
                json_extract_path_text(properties, '$.retentionDays') as "retention_days",
                json_extract_path_text(properties, '$.creationTime') as "creation_time",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                securityAlertPolicyName
                FROM azure.sql.database_security_alert_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_deleted_servers:
      id: azure.sql.vw_deleted_servers
      name: vw_deleted_servers
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.version') as "version",
              JSON_EXTRACT(properties, '$.deletionTime') as "deletion_time",
              JSON_EXTRACT(properties, '$.originalId') as "original_id",
              JSON_EXTRACT(properties, '$.fullyQualifiedDomainName') as "fully_qualified_domain_name",
              subscriptionId,
              locationName,
              deletedServerName
              FROM azure.sql.deleted_servers
              WHERE subscriptionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.version') as "version",
                json_extract_path_text(properties, '$.deletionTime') as "deletion_time",
                json_extract_path_text(properties, '$.originalId') as "original_id",
                json_extract_path_text(properties, '$.fullyQualifiedDomainName') as "fully_qualified_domain_name",
                subscriptionId,
                locationName,
                deletedServerName
                FROM azure.sql.deleted_servers
                WHERE subscriptionId = 'replace-me';
    vw_sync_members:
      id: azure.sql.vw_sync_members
      name: vw_sync_members
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.databaseType') as "database_type",
              JSON_EXTRACT(properties, '$.syncAgentId') as "sync_agent_id",
              JSON_EXTRACT(properties, '$.sqlServerDatabaseId') as "sql_server_database_id",
              JSON_EXTRACT(properties, '$.syncMemberAzureDatabaseResourceId') as "sync_member_azure_database_resource_id",
              JSON_EXTRACT(properties, '$.usePrivateLinkConnection') as "use_private_link_connection",
              JSON_EXTRACT(properties, '$.privateEndpointName') as "private_endpoint_name",
              JSON_EXTRACT(properties, '$.serverName') as "server_name",
              JSON_EXTRACT(properties, '$.databaseName') as "database_name",
              JSON_EXTRACT(properties, '$.userName') as "user_name",
              JSON_EXTRACT(properties, '$.password') as "password",
              JSON_EXTRACT(properties, '$.syncDirection') as "sync_direction",
              JSON_EXTRACT(properties, '$.syncState') as "sync_state",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              syncGroupName,
              syncMemberName
              FROM azure.sql.sync_members
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND syncGroupName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.databaseType') as "database_type",
                json_extract_path_text(properties, '$.syncAgentId') as "sync_agent_id",
                json_extract_path_text(properties, '$.sqlServerDatabaseId') as "sql_server_database_id",
                json_extract_path_text(properties, '$.syncMemberAzureDatabaseResourceId') as "sync_member_azure_database_resource_id",
                json_extract_path_text(properties, '$.usePrivateLinkConnection') as "use_private_link_connection",
                json_extract_path_text(properties, '$.privateEndpointName') as "private_endpoint_name",
                json_extract_path_text(properties, '$.serverName') as "server_name",
                json_extract_path_text(properties, '$.databaseName') as "database_name",
                json_extract_path_text(properties, '$.userName') as "user_name",
                json_extract_path_text(properties, '$.password') as "password",
                json_extract_path_text(properties, '$.syncDirection') as "sync_direction",
                json_extract_path_text(properties, '$.syncState') as "sync_state",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                syncGroupName,
                syncMemberName
                FROM azure.sql.sync_members
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND syncGroupName = 'replace-me';
    vw_job_credentials:
      id: azure.sql.vw_job_credentials
      name: vw_job_credentials
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.username') as "username",
              JSON_EXTRACT(properties, '$.password') as "password",
              subscriptionId,
              resourceGroupName,
              serverName,
              jobAgentName,
              credentialName
              FROM azure.sql.job_credentials
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.username') as "username",
                json_extract_path_text(properties, '$.password') as "password",
                subscriptionId,
                resourceGroupName,
                serverName,
                jobAgentName,
                credentialName
                FROM azure.sql.job_credentials
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me';
    vw_private_endpoint_connections:
      id: azure.sql.vw_private_endpoint_connections
      name: vw_private_endpoint_connections
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.privateEndpoint') as "private_endpoint",
              JSON_EXTRACT(properties, '$.groupIds') as "group_ids",
              JSON_EXTRACT(properties, '$.privateLinkServiceConnectionState') as "private_link_service_connection_state",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              subscriptionId,
              resourceGroupName,
              serverName,
              privateEndpointConnectionName
              FROM azure.sql.private_endpoint_connections
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.privateEndpoint') as "private_endpoint",
                json_extract_path_text(properties, '$.groupIds') as "group_ids",
                json_extract_path_text(properties, '$.privateLinkServiceConnectionState') as "private_link_service_connection_state",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                subscriptionId,
                resourceGroupName,
                serverName,
                privateEndpointConnectionName
                FROM azure.sql.private_endpoint_connections
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_server_vulnerability_assessments:
      id: azure.sql.vw_server_vulnerability_assessments
      name: vw_server_vulnerability_assessments
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.storageContainerPath') as "storage_container_path",
              JSON_EXTRACT(properties, '$.storageContainerSasKey') as "storage_container_sas_key",
              JSON_EXTRACT(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
              JSON_EXTRACT(properties, '$.recurringScans') as "recurring_scans",
              subscriptionId,
              resourceGroupName,
              serverName,
              vulnerabilityAssessmentName
              FROM azure.sql.server_vulnerability_assessments
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.storageContainerPath') as "storage_container_path",
                json_extract_path_text(properties, '$.storageContainerSasKey') as "storage_container_sas_key",
                json_extract_path_text(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
                json_extract_path_text(properties, '$.recurringScans') as "recurring_scans",
                subscriptionId,
                resourceGroupName,
                serverName,
                vulnerabilityAssessmentName
                FROM azure.sql.server_vulnerability_assessments
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_restorable_dropped_managed_databases:
      id: azure.sql.vw_restorable_dropped_managed_databases
      name: vw_restorable_dropped_managed_databases
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              tags as tags,
              JSON_EXTRACT(properties, '$.databaseName') as "database_name",
              JSON_EXTRACT(properties, '$.creationDate') as "creation_date",
              JSON_EXTRACT(properties, '$.deletionDate') as "deletion_date",
              JSON_EXTRACT(properties, '$.earliestRestoreDate') as "earliest_restore_date",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              restorableDroppedDatabaseId
              FROM azure.sql.restorable_dropped_managed_databases
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND restorableDroppedDatabaseId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                tags as tags,
                json_extract_path_text(properties, '$.databaseName') as "database_name",
                json_extract_path_text(properties, '$.creationDate') as "creation_date",
                json_extract_path_text(properties, '$.deletionDate') as "deletion_date",
                json_extract_path_text(properties, '$.earliestRestoreDate') as "earliest_restore_date",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                restorableDroppedDatabaseId
                FROM azure.sql.restorable_dropped_managed_databases
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND restorableDroppedDatabaseId = 'replace-me';
    vw_job_target_executions:
      id: azure.sql.vw_job_target_executions
      name: vw_job_target_executions
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.jobVersion') as "job_version",
              JSON_EXTRACT(properties, '$.stepName') as "step_name",
              JSON_EXTRACT(properties, '$.stepId') as "step_id",
              JSON_EXTRACT(properties, '$.jobExecutionId') as "job_execution_id",
              JSON_EXTRACT(properties, '$.lifecycle') as "lifecycle",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              JSON_EXTRACT(properties, '$.createTime') as "create_time",
              JSON_EXTRACT(properties, '$.startTime') as "start_time",
              JSON_EXTRACT(properties, '$.endTime') as "end_time",
              JSON_EXTRACT(properties, '$.currentAttempts') as "current_attempts",
              JSON_EXTRACT(properties, '$.currentAttemptStartTime') as "current_attempt_start_time",
              JSON_EXTRACT(properties, '$.lastMessage') as "last_message",
              JSON_EXTRACT(properties, '$.target') as "target",
              subscriptionId,
              resourceGroupName,
              serverName,
              jobAgentName,
              jobName,
              jobExecutionId,
              stepName,
              targetId
              FROM azure.sql.job_target_executions
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me' AND jobName = 'replace-me' AND jobExecutionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.jobVersion') as "job_version",
                json_extract_path_text(properties, '$.stepName') as "step_name",
                json_extract_path_text(properties, '$.stepId') as "step_id",
                json_extract_path_text(properties, '$.jobExecutionId') as "job_execution_id",
                json_extract_path_text(properties, '$.lifecycle') as "lifecycle",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                json_extract_path_text(properties, '$.createTime') as "create_time",
                json_extract_path_text(properties, '$.startTime') as "start_time",
                json_extract_path_text(properties, '$.endTime') as "end_time",
                json_extract_path_text(properties, '$.currentAttempts') as "current_attempts",
                json_extract_path_text(properties, '$.currentAttemptStartTime') as "current_attempt_start_time",
                json_extract_path_text(properties, '$.lastMessage') as "last_message",
                json_extract_path_text(properties, '$.target') as "target",
                subscriptionId,
                resourceGroupName,
                serverName,
                jobAgentName,
                jobName,
                jobExecutionId,
                stepName,
                targetId
                FROM azure.sql.job_target_executions
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me' AND jobName = 'replace-me' AND jobExecutionId = 'replace-me';
    vw_sensitivity_labels:
      id: azure.sql.vw_sensitivity_labels
      name: vw_sensitivity_labels
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              managedBy as managed_by,
              JSON_EXTRACT(properties, '$.schemaName') as "schema_name",
              JSON_EXTRACT(properties, '$.tableName') as "table_name",
              JSON_EXTRACT(properties, '$.columnName') as "column_name",
              JSON_EXTRACT(properties, '$.labelName') as "label_name",
              JSON_EXTRACT(properties, '$.labelId') as "label_id",
              JSON_EXTRACT(properties, '$.informationType') as "information_type",
              JSON_EXTRACT(properties, '$.informationTypeId') as "information_type_id",
              JSON_EXTRACT(properties, '$.isDisabled') as "is_disabled",
              JSON_EXTRACT(properties, '$.rank') as "rank",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              schemaName,
              tableName,
              columnName,
              sensitivityLabelSource
              FROM azure.sql.sensitivity_labels
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND schemaName = 'replace-me' AND tableName = 'replace-me' AND columnName = 'replace-me' AND sensitivityLabelSource = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                managedBy as managed_by,
                json_extract_path_text(properties, '$.schemaName') as "schema_name",
                json_extract_path_text(properties, '$.tableName') as "table_name",
                json_extract_path_text(properties, '$.columnName') as "column_name",
                json_extract_path_text(properties, '$.labelName') as "label_name",
                json_extract_path_text(properties, '$.labelId') as "label_id",
                json_extract_path_text(properties, '$.informationType') as "information_type",
                json_extract_path_text(properties, '$.informationTypeId') as "information_type_id",
                json_extract_path_text(properties, '$.isDisabled') as "is_disabled",
                json_extract_path_text(properties, '$.rank') as "rank",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                schemaName,
                tableName,
                columnName,
                sensitivityLabelSource
                FROM azure.sql.sensitivity_labels
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND schemaName = 'replace-me' AND tableName = 'replace-me' AND columnName = 'replace-me' AND sensitivityLabelSource = 'replace-me';
    vw_firewall_rules:
      id: azure.sql.vw_firewall_rules
      name: vw_firewall_rules
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.startIpAddress') as "start_ip_address",
              JSON_EXTRACT(properties, '$.endIpAddress') as "end_ip_address",
              subscriptionId,
              resourceGroupName,
              serverName,
              firewallRuleName
              FROM azure.sql.firewall_rules
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.startIpAddress') as "start_ip_address",
                json_extract_path_text(properties, '$.endIpAddress') as "end_ip_address",
                subscriptionId,
                resourceGroupName,
                serverName,
                firewallRuleName
                FROM azure.sql.firewall_rules
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_server_azure_ad_only_authentications:
      id: azure.sql.vw_server_azure_ad_only_authentications
      name: vw_server_azure_ad_only_authentications
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.azureADOnlyAuthentication') as "azure_ad_only_authentication",
              subscriptionId,
              resourceGroupName,
              serverName,
              authenticationName
              FROM azure.sql.server_azure_ad_only_authentications
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.azureADOnlyAuthentication') as "azure_ad_only_authentication",
                subscriptionId,
                resourceGroupName,
                serverName,
                authenticationName
                FROM azure.sql.server_azure_ad_only_authentications
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_vulnerability_assessments_settings:
      id: azure.sql.vw_vulnerability_assessments_settings
      name: vw_vulnerability_assessments_settings
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.state') as "state",
              subscriptionId,
              resourceGroupName,
              serverName,
              vulnerabilityAssessmentName
              FROM azure.sql.vulnerability_assessments_settings
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.state') as "state",
                subscriptionId,
                resourceGroupName,
                serverName,
                vulnerabilityAssessmentName
                FROM azure.sql.vulnerability_assessments_settings
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_server_trust_groups:
      id: azure.sql.vw_server_trust_groups
      name: vw_server_trust_groups
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.groupMembers') as "group_members",
              JSON_EXTRACT(properties, '$.trustScopes') as "trust_scopes",
              subscriptionId,
              resourceGroupName,
              locationName,
              serverTrustGroupName
              FROM azure.sql.server_trust_groups
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND locationName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.groupMembers') as "group_members",
                json_extract_path_text(properties, '$.trustScopes') as "trust_scopes",
                subscriptionId,
                resourceGroupName,
                locationName,
                serverTrustGroupName
                FROM azure.sql.server_trust_groups
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND locationName = 'replace-me';
    vw_server_advanced_threat_protection_settings:
      id: azure.sql.vw_server_advanced_threat_protection_settings
      name: vw_server_advanced_threat_protection_settings
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.creationTime') as "creation_time",
              subscriptionId,
              resourceGroupName,
              serverName,
              advancedThreatProtectionName
              FROM azure.sql.server_advanced_threat_protection_settings
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.creationTime') as "creation_time",
                subscriptionId,
                resourceGroupName,
                serverName,
                advancedThreatProtectionName
                FROM azure.sql.server_advanced_threat_protection_settings
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_managed_database_security_alert_policies:
      id: azure.sql.vw_managed_database_security_alert_policies
      name: vw_managed_database_security_alert_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.disabledAlerts') as "disabled_alerts",
              JSON_EXTRACT(properties, '$.emailAddresses') as "email_addresses",
              JSON_EXTRACT(properties, '$.emailAccountAdmins') as "email_account_admins",
              JSON_EXTRACT(properties, '$.storageEndpoint') as "storage_endpoint",
              JSON_EXTRACT(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
              JSON_EXTRACT(properties, '$.retentionDays') as "retention_days",
              JSON_EXTRACT(properties, '$.creationTime') as "creation_time",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              securityAlertPolicyName
              FROM azure.sql.managed_database_security_alert_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.disabledAlerts') as "disabled_alerts",
                json_extract_path_text(properties, '$.emailAddresses') as "email_addresses",
                json_extract_path_text(properties, '$.emailAccountAdmins') as "email_account_admins",
                json_extract_path_text(properties, '$.storageEndpoint') as "storage_endpoint",
                json_extract_path_text(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
                json_extract_path_text(properties, '$.retentionDays') as "retention_days",
                json_extract_path_text(properties, '$.creationTime') as "creation_time",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                securityAlertPolicyName
                FROM azure.sql.managed_database_security_alert_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
    vw_managed_instance_long_term_retention_policies:
      id: azure.sql.vw_managed_instance_long_term_retention_policies
      name: vw_managed_instance_long_term_retention_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.weeklyRetention') as "weekly_retention",
              JSON_EXTRACT(properties, '$.monthlyRetention') as "monthly_retention",
              JSON_EXTRACT(properties, '$.yearlyRetention') as "yearly_retention",
              JSON_EXTRACT(properties, '$.weekOfYear') as "week_of_year",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              policyName
              FROM azure.sql.managed_instance_long_term_retention_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.weeklyRetention') as "weekly_retention",
                json_extract_path_text(properties, '$.monthlyRetention') as "monthly_retention",
                json_extract_path_text(properties, '$.yearlyRetention') as "yearly_retention",
                json_extract_path_text(properties, '$.weekOfYear') as "week_of_year",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                policyName
                FROM azure.sql.managed_instance_long_term_retention_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
    vw_job_steps:
      id: azure.sql.vw_job_steps
      name: vw_job_steps
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.stepId') as "step_id",
              JSON_EXTRACT(properties, '$.targetGroup') as "target_group",
              JSON_EXTRACT(properties, '$.credential') as "credential",
              JSON_EXTRACT(properties, '$.action') as "action",
              JSON_EXTRACT(properties, '$.output') as "output",
              JSON_EXTRACT(properties, '$.executionOptions') as "execution_options",
              subscriptionId,
              resourceGroupName,
              serverName,
              jobAgentName,
              jobName,
              jobVersion,
              stepName
              FROM azure.sql.job_steps
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me' AND jobName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.stepId') as "step_id",
                json_extract_path_text(properties, '$.targetGroup') as "target_group",
                json_extract_path_text(properties, '$.credential') as "credential",
                json_extract_path_text(properties, '$.action') as "action",
                json_extract_path_text(properties, '$.output') as "output",
                json_extract_path_text(properties, '$.executionOptions') as "execution_options",
                subscriptionId,
                resourceGroupName,
                serverName,
                jobAgentName,
                jobName,
                jobVersion,
                stepName
                FROM azure.sql.job_steps
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me' AND jobName = 'replace-me';
    vw_server_advisors:
      id: azure.sql.vw_server_advisors
      name: vw_server_advisors
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              kind as kind,
              JSON_EXTRACT(properties, '$.advisorStatus') as "advisor_status",
              JSON_EXTRACT(properties, '$.autoExecuteStatus') as "auto_execute_status",
              JSON_EXTRACT(properties, '$.autoExecuteStatusInheritedFrom') as "auto_execute_status_inherited_from",
              JSON_EXTRACT(properties, '$.recommendationsStatus') as "recommendations_status",
              JSON_EXTRACT(properties, '$.lastChecked') as "last_checked",
              JSON_EXTRACT(properties, '$.recommendedActions') as "recommended_actions",
              subscriptionId,
              resourceGroupName,
              serverName,
              advisorName
              FROM azure.sql.server_advisors
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND advisorName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                kind as kind,
                json_extract_path_text(properties, '$.advisorStatus') as "advisor_status",
                json_extract_path_text(properties, '$.autoExecuteStatus') as "auto_execute_status",
                json_extract_path_text(properties, '$.autoExecuteStatusInheritedFrom') as "auto_execute_status_inherited_from",
                json_extract_path_text(properties, '$.recommendationsStatus') as "recommendations_status",
                json_extract_path_text(properties, '$.lastChecked') as "last_checked",
                json_extract_path_text(properties, '$.recommendedActions') as "recommended_actions",
                subscriptionId,
                resourceGroupName,
                serverName,
                advisorName
                FROM azure.sql.server_advisors
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND advisorName = 'replace-me';
    vw_managed_instance_encryption_protectors:
      id: azure.sql.vw_managed_instance_encryption_protectors
      name: vw_managed_instance_encryption_protectors
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              kind as kind,
              JSON_EXTRACT(properties, '$.serverKeyName') as "server_key_name",
              JSON_EXTRACT(properties, '$.serverKeyType') as "server_key_type",
              JSON_EXTRACT(properties, '$.uri') as "uri",
              JSON_EXTRACT(properties, '$.thumbprint') as "thumbprint",
              JSON_EXTRACT(properties, '$.autoRotationEnabled') as "auto_rotation_enabled",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              encryptionProtectorName
              FROM azure.sql.managed_instance_encryption_protectors
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND encryptionProtectorName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                kind as kind,
                json_extract_path_text(properties, '$.serverKeyName') as "server_key_name",
                json_extract_path_text(properties, '$.serverKeyType') as "server_key_type",
                json_extract_path_text(properties, '$.uri') as "uri",
                json_extract_path_text(properties, '$.thumbprint') as "thumbprint",
                json_extract_path_text(properties, '$.autoRotationEnabled') as "auto_rotation_enabled",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                encryptionProtectorName
                FROM azure.sql.managed_instance_encryption_protectors
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND encryptionProtectorName = 'replace-me';
    vw_database_sql_vulnerability_assessment_rule_baselines:
      id: azure.sql.vw_database_sql_vulnerability_assessment_rule_baselines
      name: vw_database_sql_vulnerability_assessment_rule_baselines
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.results') as "results",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              vulnerabilityAssessmentName,
              baselineName,
              ruleId
              FROM azure.sql.database_sql_vulnerability_assessment_rule_baselines
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND baselineName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.results') as "results",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                vulnerabilityAssessmentName,
                baselineName,
                ruleId
                FROM azure.sql.database_sql_vulnerability_assessment_rule_baselines
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND baselineName = 'replace-me';
    vw_server_security_alert_policies:
      id: azure.sql.vw_server_security_alert_policies
      name: vw_server_security_alert_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.disabledAlerts') as "disabled_alerts",
              JSON_EXTRACT(properties, '$.emailAddresses') as "email_addresses",
              JSON_EXTRACT(properties, '$.emailAccountAdmins') as "email_account_admins",
              JSON_EXTRACT(properties, '$.storageEndpoint') as "storage_endpoint",
              JSON_EXTRACT(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
              JSON_EXTRACT(properties, '$.retentionDays') as "retention_days",
              JSON_EXTRACT(properties, '$.creationTime') as "creation_time",
              subscriptionId,
              resourceGroupName,
              serverName,
              securityAlertPolicyName
              FROM azure.sql.server_security_alert_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.disabledAlerts') as "disabled_alerts",
                json_extract_path_text(properties, '$.emailAddresses') as "email_addresses",
                json_extract_path_text(properties, '$.emailAccountAdmins') as "email_account_admins",
                json_extract_path_text(properties, '$.storageEndpoint') as "storage_endpoint",
                json_extract_path_text(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
                json_extract_path_text(properties, '$.retentionDays') as "retention_days",
                json_extract_path_text(properties, '$.creationTime') as "creation_time",
                subscriptionId,
                resourceGroupName,
                serverName,
                securityAlertPolicyName
                FROM azure.sql.server_security_alert_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_servers:
      id: azure.sql.vw_servers
      name: vw_servers
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              tags as tags,
              identity as identity,
              kind as kind,
              JSON_EXTRACT(properties, '$.administratorLogin') as "administrator_login",
              JSON_EXTRACT(properties, '$.administratorLoginPassword') as "administrator_login_password",
              JSON_EXTRACT(properties, '$.version') as "version",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.fullyQualifiedDomainName') as "fully_qualified_domain_name",
              JSON_EXTRACT(properties, '$.privateEndpointConnections') as "private_endpoint_connections",
              JSON_EXTRACT(properties, '$.minimalTlsVersion') as "minimal_tls_version",
              JSON_EXTRACT(properties, '$.publicNetworkAccess') as "public_network_access",
              JSON_EXTRACT(properties, '$.workspaceFeature') as "workspace_feature",
              JSON_EXTRACT(properties, '$.primaryUserAssignedIdentityId') as "primary_user_assigned_identity_id",
              JSON_EXTRACT(properties, '$.federatedClientId') as "federated_client_id",
              JSON_EXTRACT(properties, '$.keyId') as "key_id",
              JSON_EXTRACT(properties, '$.administrators') as "administrators",
              JSON_EXTRACT(properties, '$.restrictOutboundNetworkAccess') as "restrict_outbound_network_access",
              JSON_EXTRACT(properties, '$.isIPv6Enabled') as "is_ipv6_enabled",
              JSON_EXTRACT(properties, '$.externalGovernanceStatus') as "external_governance_status",
              subscriptionId,
              resourceGroupName,
              serverName
              FROM azure.sql.servers
              WHERE subscriptionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                tags as tags,
                identity as identity,
                kind as kind,
                json_extract_path_text(properties, '$.administratorLogin') as "administrator_login",
                json_extract_path_text(properties, '$.administratorLoginPassword') as "administrator_login_password",
                json_extract_path_text(properties, '$.version') as "version",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.fullyQualifiedDomainName') as "fully_qualified_domain_name",
                json_extract_path_text(properties, '$.privateEndpointConnections') as "private_endpoint_connections",
                json_extract_path_text(properties, '$.minimalTlsVersion') as "minimal_tls_version",
                json_extract_path_text(properties, '$.publicNetworkAccess') as "public_network_access",
                json_extract_path_text(properties, '$.workspaceFeature') as "workspace_feature",
                json_extract_path_text(properties, '$.primaryUserAssignedIdentityId') as "primary_user_assigned_identity_id",
                json_extract_path_text(properties, '$.federatedClientId') as "federated_client_id",
                json_extract_path_text(properties, '$.keyId') as "key_id",
                json_extract_path_text(properties, '$.administrators') as "administrators",
                json_extract_path_text(properties, '$.restrictOutboundNetworkAccess') as "restrict_outbound_network_access",
                json_extract_path_text(properties, '$.isIPv6Enabled') as "is_ipv6_enabled",
                json_extract_path_text(properties, '$.externalGovernanceStatus') as "external_governance_status",
                subscriptionId,
                resourceGroupName,
                serverName
                FROM azure.sql.servers
                WHERE subscriptionId = 'replace-me';
    vw_database_recommended_actions:
      id: azure.sql.vw_database_recommended_actions
      name: vw_database_recommended_actions
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              kind as kind,
              JSON_EXTRACT(properties, '$.recommendationReason') as "recommendation_reason",
              JSON_EXTRACT(properties, '$.validSince') as "valid_since",
              JSON_EXTRACT(properties, '$.lastRefresh') as "last_refresh",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.isExecutableAction') as "is_executable_action",
              JSON_EXTRACT(properties, '$.isRevertableAction') as "is_revertable_action",
              JSON_EXTRACT(properties, '$.isArchivedAction') as "is_archived_action",
              JSON_EXTRACT(properties, '$.executeActionStartTime') as "execute_action_start_time",
              JSON_EXTRACT(properties, '$.executeActionDuration') as "execute_action_duration",
              JSON_EXTRACT(properties, '$.revertActionStartTime') as "revert_action_start_time",
              JSON_EXTRACT(properties, '$.revertActionDuration') as "revert_action_duration",
              JSON_EXTRACT(properties, '$.executeActionInitiatedBy') as "execute_action_initiated_by",
              JSON_EXTRACT(properties, '$.executeActionInitiatedTime') as "execute_action_initiated_time",
              JSON_EXTRACT(properties, '$.revertActionInitiatedBy') as "revert_action_initiated_by",
              JSON_EXTRACT(properties, '$.revertActionInitiatedTime') as "revert_action_initiated_time",
              JSON_EXTRACT(properties, '$.score') as "score",
              JSON_EXTRACT(properties, '$.implementationDetails') as "implementation_details",
              JSON_EXTRACT(properties, '$.errorDetails') as "error_details",
              JSON_EXTRACT(properties, '$.estimatedImpact') as "estimated_impact",
              JSON_EXTRACT(properties, '$.observedImpact') as "observed_impact",
              JSON_EXTRACT(properties, '$.timeSeries') as "time_series",
              JSON_EXTRACT(properties, '$.linkedObjects') as "linked_objects",
              JSON_EXTRACT(properties, '$.details') as "details",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              advisorName,
              recommendedActionName
              FROM azure.sql.database_recommended_actions
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND advisorName = 'replace-me' AND recommendedActionName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                kind as kind,
                json_extract_path_text(properties, '$.recommendationReason') as "recommendation_reason",
                json_extract_path_text(properties, '$.validSince') as "valid_since",
                json_extract_path_text(properties, '$.lastRefresh') as "last_refresh",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.isExecutableAction') as "is_executable_action",
                json_extract_path_text(properties, '$.isRevertableAction') as "is_revertable_action",
                json_extract_path_text(properties, '$.isArchivedAction') as "is_archived_action",
                json_extract_path_text(properties, '$.executeActionStartTime') as "execute_action_start_time",
                json_extract_path_text(properties, '$.executeActionDuration') as "execute_action_duration",
                json_extract_path_text(properties, '$.revertActionStartTime') as "revert_action_start_time",
                json_extract_path_text(properties, '$.revertActionDuration') as "revert_action_duration",
                json_extract_path_text(properties, '$.executeActionInitiatedBy') as "execute_action_initiated_by",
                json_extract_path_text(properties, '$.executeActionInitiatedTime') as "execute_action_initiated_time",
                json_extract_path_text(properties, '$.revertActionInitiatedBy') as "revert_action_initiated_by",
                json_extract_path_text(properties, '$.revertActionInitiatedTime') as "revert_action_initiated_time",
                json_extract_path_text(properties, '$.score') as "score",
                json_extract_path_text(properties, '$.implementationDetails') as "implementation_details",
                json_extract_path_text(properties, '$.errorDetails') as "error_details",
                json_extract_path_text(properties, '$.estimatedImpact') as "estimated_impact",
                json_extract_path_text(properties, '$.observedImpact') as "observed_impact",
                json_extract_path_text(properties, '$.timeSeries') as "time_series",
                json_extract_path_text(properties, '$.linkedObjects') as "linked_objects",
                json_extract_path_text(properties, '$.details') as "details",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                advisorName,
                recommendedActionName
                FROM azure.sql.database_recommended_actions
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND advisorName = 'replace-me' AND recommendedActionName = 'replace-me';
    vw_server_dev_ops_audit_settings:
      id: azure.sql.vw_server_dev_ops_audit_settings
      name: vw_server_dev_ops_audit_settings
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.isAzureMonitorTargetEnabled') as "is_azure_monitor_target_enabled",
              JSON_EXTRACT(properties, '$.isManagedIdentityInUse') as "is_managed_identity_in_use",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.storageEndpoint') as "storage_endpoint",
              JSON_EXTRACT(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
              JSON_EXTRACT(properties, '$.storageAccountSubscriptionId') as "storage_account_subscription_id",
              subscriptionId,
              resourceGroupName,
              serverName,
              devOpsAuditingSettingsName
              FROM azure.sql.server_dev_ops_audit_settings
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.isAzureMonitorTargetEnabled') as "is_azure_monitor_target_enabled",
                json_extract_path_text(properties, '$.isManagedIdentityInUse') as "is_managed_identity_in_use",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.storageEndpoint') as "storage_endpoint",
                json_extract_path_text(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
                json_extract_path_text(properties, '$.storageAccountSubscriptionId') as "storage_account_subscription_id",
                subscriptionId,
                resourceGroupName,
                serverName,
                devOpsAuditingSettingsName
                FROM azure.sql.server_dev_ops_audit_settings
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_database_sql_vulnerability_assessment_scans:
      id: azure.sql.vw_database_sql_vulnerability_assessment_scans
      name: vw_database_sql_vulnerability_assessment_scans
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.scanId') as "scan_id",
              JSON_EXTRACT(properties, '$.triggerType') as "trigger_type",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.startTime') as "start_time",
              JSON_EXTRACT(properties, '$.endTime') as "end_time",
              JSON_EXTRACT(properties, '$.errors') as "errors",
              JSON_EXTRACT(properties, '$.server') as "server",
              JSON_EXTRACT(properties, '$.database') as "database",
              JSON_EXTRACT(properties, '$.sqlVersion') as "sql_version",
              JSON_EXTRACT(properties, '$.highSeverityFailedRulesCount') as "high_severity_failed_rules_count",
              JSON_EXTRACT(properties, '$.mediumSeverityFailedRulesCount') as "medium_severity_failed_rules_count",
              JSON_EXTRACT(properties, '$.lowSeverityFailedRulesCount') as "low_severity_failed_rules_count",
              JSON_EXTRACT(properties, '$.totalPassedRulesCount') as "total_passed_rules_count",
              JSON_EXTRACT(properties, '$.totalFailedRulesCount') as "total_failed_rules_count",
              JSON_EXTRACT(properties, '$.totalRulesCount') as "total_rules_count",
              JSON_EXTRACT(properties, '$.isBaselineApplied') as "is_baseline_applied",
              JSON_EXTRACT(properties, '$.lastScanTime') as "last_scan_time",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              vulnerabilityAssessmentName,
              scanId
              FROM azure.sql.database_sql_vulnerability_assessment_scans
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.scanId') as "scan_id",
                json_extract_path_text(properties, '$.triggerType') as "trigger_type",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.startTime') as "start_time",
                json_extract_path_text(properties, '$.endTime') as "end_time",
                json_extract_path_text(properties, '$.errors') as "errors",
                json_extract_path_text(properties, '$.server') as "server",
                json_extract_path_text(properties, '$.database') as "database",
                json_extract_path_text(properties, '$.sqlVersion') as "sql_version",
                json_extract_path_text(properties, '$.highSeverityFailedRulesCount') as "high_severity_failed_rules_count",
                json_extract_path_text(properties, '$.mediumSeverityFailedRulesCount') as "medium_severity_failed_rules_count",
                json_extract_path_text(properties, '$.lowSeverityFailedRulesCount') as "low_severity_failed_rules_count",
                json_extract_path_text(properties, '$.totalPassedRulesCount') as "total_passed_rules_count",
                json_extract_path_text(properties, '$.totalFailedRulesCount') as "total_failed_rules_count",
                json_extract_path_text(properties, '$.totalRulesCount') as "total_rules_count",
                json_extract_path_text(properties, '$.isBaselineApplied') as "is_baseline_applied",
                json_extract_path_text(properties, '$.lastScanTime') as "last_scan_time",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                vulnerabilityAssessmentName,
                scanId
                FROM azure.sql.database_sql_vulnerability_assessment_scans
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me';
    vw_managed_instance_private_endpoint_connections:
      id: azure.sql.vw_managed_instance_private_endpoint_connections
      name: vw_managed_instance_private_endpoint_connections
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.privateEndpoint') as "private_endpoint",
              JSON_EXTRACT(properties, '$.privateLinkServiceConnectionState') as "private_link_service_connection_state",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              privateEndpointConnectionName
              FROM azure.sql.managed_instance_private_endpoint_connections
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND privateEndpointConnectionName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.privateEndpoint') as "private_endpoint",
                json_extract_path_text(properties, '$.privateLinkServiceConnectionState') as "private_link_service_connection_state",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                privateEndpointConnectionName
                FROM azure.sql.managed_instance_private_endpoint_connections
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND privateEndpointConnectionName = 'replace-me';
    vw_managed_instance_operations:
      id: azure.sql.vw_managed_instance_operations
      name: vw_managed_instance_operations
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.managedInstanceName') as "managed_instance_name",
              JSON_EXTRACT(properties, '$.operation') as "operation",
              JSON_EXTRACT(properties, '$.operationFriendlyName') as "operation_friendly_name",
              JSON_EXTRACT(properties, '$.percentComplete') as "percent_complete",
              JSON_EXTRACT(properties, '$.startTime') as "start_time",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.errorCode') as "error_code",
              JSON_EXTRACT(properties, '$.errorDescription') as "error_description",
              JSON_EXTRACT(properties, '$.errorSeverity') as "error_severity",
              JSON_EXTRACT(properties, '$.isUserError') as "is_user_error",
              JSON_EXTRACT(properties, '$.estimatedCompletionTime') as "estimated_completion_time",
              JSON_EXTRACT(properties, '$.description') as "description",
              JSON_EXTRACT(properties, '$.isCancellable') as "is_cancellable",
              JSON_EXTRACT(properties, '$.operationParameters') as "operation_parameters",
              JSON_EXTRACT(properties, '$.operationSteps') as "operation_steps",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              operationId
              FROM azure.sql.managed_instance_operations
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND operationId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.managedInstanceName') as "managed_instance_name",
                json_extract_path_text(properties, '$.operation') as "operation",
                json_extract_path_text(properties, '$.operationFriendlyName') as "operation_friendly_name",
                json_extract_path_text(properties, '$.percentComplete') as "percent_complete",
                json_extract_path_text(properties, '$.startTime') as "start_time",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.errorCode') as "error_code",
                json_extract_path_text(properties, '$.errorDescription') as "error_description",
                json_extract_path_text(properties, '$.errorSeverity') as "error_severity",
                json_extract_path_text(properties, '$.isUserError') as "is_user_error",
                json_extract_path_text(properties, '$.estimatedCompletionTime') as "estimated_completion_time",
                json_extract_path_text(properties, '$.description') as "description",
                json_extract_path_text(properties, '$.isCancellable') as "is_cancellable",
                json_extract_path_text(properties, '$.operationParameters') as "operation_parameters",
                json_extract_path_text(properties, '$.operationSteps') as "operation_steps",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                operationId
                FROM azure.sql.managed_instance_operations
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND operationId = 'replace-me';
    vw_managed_instance_vulnerability_assessments:
      id: azure.sql.vw_managed_instance_vulnerability_assessments
      name: vw_managed_instance_vulnerability_assessments
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.storageContainerPath') as "storage_container_path",
              JSON_EXTRACT(properties, '$.storageContainerSasKey') as "storage_container_sas_key",
              JSON_EXTRACT(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
              JSON_EXTRACT(properties, '$.recurringScans') as "recurring_scans",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              vulnerabilityAssessmentName
              FROM azure.sql.managed_instance_vulnerability_assessments
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.storageContainerPath') as "storage_container_path",
                json_extract_path_text(properties, '$.storageContainerSasKey') as "storage_container_sas_key",
                json_extract_path_text(properties, '$.storageAccountAccessKey') as "storage_account_access_key",
                json_extract_path_text(properties, '$.recurringScans') as "recurring_scans",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                vulnerabilityAssessmentName
                FROM azure.sql.managed_instance_vulnerability_assessments
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me';
    vw_recoverable_managed_databases:
      id: azure.sql.vw_recoverable_managed_databases
      name: vw_recoverable_managed_databases
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.lastAvailableBackupDate') as "last_available_backup_date",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              recoverableDatabaseName
              FROM azure.sql.recoverable_managed_databases
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND recoverableDatabaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.lastAvailableBackupDate') as "last_available_backup_date",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                recoverableDatabaseName
                FROM azure.sql.recoverable_managed_databases
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND recoverableDatabaseName = 'replace-me';
    vw_agents:
      id: azure.sql.vw_agents
      name: vw_agents
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.state') as "state",
              subscriptionId,
              resourceGroupName,
              managedInstanceName
              FROM azure.sql.agents
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.state') as "state",
                subscriptionId,
                resourceGroupName,
                managedInstanceName
                FROM azure.sql.agents
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me';
    vw_server_connection_policies:
      id: azure.sql.vw_server_connection_policies
      name: vw_server_connection_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              kind as kind,
              JSON_EXTRACT(properties, '$.connectionType') as "connection_type",
              subscriptionId,
              resourceGroupName,
              serverName,
              connectionPolicyName
              FROM azure.sql.server_connection_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                kind as kind,
                json_extract_path_text(properties, '$.connectionType') as "connection_type",
                subscriptionId,
                resourceGroupName,
                serverName,
                connectionPolicyName
                FROM azure.sql.server_connection_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_long_term_retention_managed_instance_backups:
      id: azure.sql.vw_long_term_retention_managed_instance_backups
      name: vw_long_term_retention_managed_instance_backups
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.managedInstanceName') as "managed_instance_name",
              JSON_EXTRACT(properties, '$.managedInstanceCreateTime') as "managed_instance_create_time",
              JSON_EXTRACT(properties, '$.databaseName') as "database_name",
              JSON_EXTRACT(properties, '$.databaseDeletionTime') as "database_deletion_time",
              JSON_EXTRACT(properties, '$.backupTime') as "backup_time",
              JSON_EXTRACT(properties, '$.backupExpirationTime') as "backup_expiration_time",
              JSON_EXTRACT(properties, '$.backupStorageRedundancy') as "backup_storage_redundancy",
              subscriptionId,
              resourceGroupName,
              locationName,
              managedInstanceName,
              databaseName,
              backupName
              FROM azure.sql.long_term_retention_managed_instance_backups
              WHERE subscriptionId = 'replace-me' AND locationName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.managedInstanceName') as "managed_instance_name",
                json_extract_path_text(properties, '$.managedInstanceCreateTime') as "managed_instance_create_time",
                json_extract_path_text(properties, '$.databaseName') as "database_name",
                json_extract_path_text(properties, '$.databaseDeletionTime') as "database_deletion_time",
                json_extract_path_text(properties, '$.backupTime') as "backup_time",
                json_extract_path_text(properties, '$.backupExpirationTime') as "backup_expiration_time",
                json_extract_path_text(properties, '$.backupStorageRedundancy') as "backup_storage_redundancy",
                subscriptionId,
                resourceGroupName,
                locationName,
                managedInstanceName,
                databaseName,
                backupName
                FROM azure.sql.long_term_retention_managed_instance_backups
                WHERE subscriptionId = 'replace-me' AND locationName = 'replace-me';
    vw_database_tables:
      id: azure.sql.vw_database_tables
      name: vw_database_tables
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.temporalType') as "temporal_type",
              JSON_EXTRACT(properties, '$.memoryOptimized') as "memory_optimized",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              schemaName,
              tableName
              FROM azure.sql.database_tables
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND schemaName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.temporalType') as "temporal_type",
                json_extract_path_text(properties, '$.memoryOptimized') as "memory_optimized",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                schemaName,
                tableName
                FROM azure.sql.database_tables
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND schemaName = 'replace-me';
    vw_ledger_digest_uploads:
      id: azure.sql.vw_ledger_digest_uploads
      name: vw_ledger_digest_uploads
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.digestStorageEndpoint') as "digest_storage_endpoint",
              JSON_EXTRACT(properties, '$.state') as "state",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              ledgerDigestUploads
              FROM azure.sql.ledger_digest_uploads
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.digestStorageEndpoint') as "digest_storage_endpoint",
                json_extract_path_text(properties, '$.state') as "state",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                ledgerDigestUploads
                FROM azure.sql.ledger_digest_uploads
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_managed_server_dns_aliases:
      id: azure.sql.vw_managed_server_dns_aliases
      name: vw_managed_server_dns_aliases
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.azureDnsRecord') as "azure_dns_record",
              JSON_EXTRACT(properties, '$.publicAzureDnsRecord') as "public_azure_dns_record",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              dnsAliasName
              FROM azure.sql.managed_server_dns_aliases
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND dnsAliasName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.azureDnsRecord') as "azure_dns_record",
                json_extract_path_text(properties, '$.publicAzureDnsRecord') as "public_azure_dns_record",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                dnsAliasName
                FROM azure.sql.managed_server_dns_aliases
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND dnsAliasName = 'replace-me';
    vw_managed_instance_advanced_threat_protection_settings:
      id: azure.sql.vw_managed_instance_advanced_threat_protection_settings
      name: vw_managed_instance_advanced_threat_protection_settings
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.creationTime') as "creation_time",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              advancedThreatProtectionName
              FROM azure.sql.managed_instance_advanced_threat_protection_settings
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND advancedThreatProtectionName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.creationTime') as "creation_time",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                advancedThreatProtectionName
                FROM azure.sql.managed_instance_advanced_threat_protection_settings
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND advancedThreatProtectionName = 'replace-me';
    vw_distributed_availability_groups:
      id: azure.sql.vw_distributed_availability_groups
      name: vw_distributed_availability_groups
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.targetDatabase') as "target_database",
              JSON_EXTRACT(properties, '$.sourceEndpoint') as "source_endpoint",
              JSON_EXTRACT(properties, '$.primaryAvailabilityGroupName') as "primary_availability_group_name",
              JSON_EXTRACT(properties, '$.secondaryAvailabilityGroupName') as "secondary_availability_group_name",
              JSON_EXTRACT(properties, '$.replicationMode') as "replication_mode",
              JSON_EXTRACT(properties, '$.distributedAvailabilityGroupId') as "distributed_availability_group_id",
              JSON_EXTRACT(properties, '$.sourceReplicaId') as "source_replica_id",
              JSON_EXTRACT(properties, '$.targetReplicaId') as "target_replica_id",
              JSON_EXTRACT(properties, '$.linkState') as "link_state",
              JSON_EXTRACT(properties, '$.lastHardenedLsn') as "last_hardened_lsn",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              distributedAvailabilityGroupName
              FROM azure.sql.distributed_availability_groups
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND distributedAvailabilityGroupName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.targetDatabase') as "target_database",
                json_extract_path_text(properties, '$.sourceEndpoint') as "source_endpoint",
                json_extract_path_text(properties, '$.primaryAvailabilityGroupName') as "primary_availability_group_name",
                json_extract_path_text(properties, '$.secondaryAvailabilityGroupName') as "secondary_availability_group_name",
                json_extract_path_text(properties, '$.replicationMode') as "replication_mode",
                json_extract_path_text(properties, '$.distributedAvailabilityGroupId') as "distributed_availability_group_id",
                json_extract_path_text(properties, '$.sourceReplicaId') as "source_replica_id",
                json_extract_path_text(properties, '$.targetReplicaId') as "target_replica_id",
                json_extract_path_text(properties, '$.linkState') as "link_state",
                json_extract_path_text(properties, '$.lastHardenedLsn') as "last_hardened_lsn",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                distributedAvailabilityGroupName
                FROM azure.sql.distributed_availability_groups
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND distributedAvailabilityGroupName = 'replace-me';
    vw_job_step_executions:
      id: azure.sql.vw_job_step_executions
      name: vw_job_step_executions
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.jobVersion') as "job_version",
              JSON_EXTRACT(properties, '$.stepName') as "step_name",
              JSON_EXTRACT(properties, '$.stepId') as "step_id",
              JSON_EXTRACT(properties, '$.jobExecutionId') as "job_execution_id",
              JSON_EXTRACT(properties, '$.lifecycle') as "lifecycle",
              JSON_EXTRACT(properties, '$.provisioningState') as "provisioning_state",
              JSON_EXTRACT(properties, '$.createTime') as "create_time",
              JSON_EXTRACT(properties, '$.startTime') as "start_time",
              JSON_EXTRACT(properties, '$.endTime') as "end_time",
              JSON_EXTRACT(properties, '$.currentAttempts') as "current_attempts",
              JSON_EXTRACT(properties, '$.currentAttemptStartTime') as "current_attempt_start_time",
              JSON_EXTRACT(properties, '$.lastMessage') as "last_message",
              JSON_EXTRACT(properties, '$.target') as "target",
              subscriptionId,
              resourceGroupName,
              serverName,
              jobAgentName,
              jobName,
              jobExecutionId,
              stepName
              FROM azure.sql.job_step_executions
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me' AND jobName = 'replace-me' AND jobExecutionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.jobVersion') as "job_version",
                json_extract_path_text(properties, '$.stepName') as "step_name",
                json_extract_path_text(properties, '$.stepId') as "step_id",
                json_extract_path_text(properties, '$.jobExecutionId') as "job_execution_id",
                json_extract_path_text(properties, '$.lifecycle') as "lifecycle",
                json_extract_path_text(properties, '$.provisioningState') as "provisioning_state",
                json_extract_path_text(properties, '$.createTime') as "create_time",
                json_extract_path_text(properties, '$.startTime') as "start_time",
                json_extract_path_text(properties, '$.endTime') as "end_time",
                json_extract_path_text(properties, '$.currentAttempts') as "current_attempts",
                json_extract_path_text(properties, '$.currentAttemptStartTime') as "current_attempt_start_time",
                json_extract_path_text(properties, '$.lastMessage') as "last_message",
                json_extract_path_text(properties, '$.target') as "target",
                subscriptionId,
                resourceGroupName,
                serverName,
                jobAgentName,
                jobName,
                jobExecutionId,
                stepName
                FROM azure.sql.job_step_executions
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me' AND jobName = 'replace-me' AND jobExecutionId = 'replace-me';
    vw_job_private_endpoints:
      id: azure.sql.vw_job_private_endpoints
      name: vw_job_private_endpoints
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.targetServerAzureResourceId') as "target_server_azure_resource_id",
              JSON_EXTRACT(properties, '$.privateEndpointId') as "private_endpoint_id",
              subscriptionId,
              resourceGroupName,
              serverName,
              jobAgentName,
              privateEndpointName
              FROM azure.sql.job_private_endpoints
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.targetServerAzureResourceId') as "target_server_azure_resource_id",
                json_extract_path_text(properties, '$.privateEndpointId') as "private_endpoint_id",
                subscriptionId,
                resourceGroupName,
                serverName,
                jobAgentName,
                privateEndpointName
                FROM azure.sql.job_private_endpoints
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me';
    vw_encryption_protectors:
      id: azure.sql.vw_encryption_protectors
      name: vw_encryption_protectors
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              kind as kind,
              JSON_EXTRACT(properties, '$.subregion') as "subregion",
              JSON_EXTRACT(properties, '$.serverKeyName') as "server_key_name",
              JSON_EXTRACT(properties, '$.serverKeyType') as "server_key_type",
              JSON_EXTRACT(properties, '$.uri') as "uri",
              JSON_EXTRACT(properties, '$.thumbprint') as "thumbprint",
              JSON_EXTRACT(properties, '$.autoRotationEnabled') as "auto_rotation_enabled",
              subscriptionId,
              resourceGroupName,
              serverName,
              encryptionProtectorName
              FROM azure.sql.encryption_protectors
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                kind as kind,
                json_extract_path_text(properties, '$.subregion') as "subregion",
                json_extract_path_text(properties, '$.serverKeyName') as "server_key_name",
                json_extract_path_text(properties, '$.serverKeyType') as "server_key_type",
                json_extract_path_text(properties, '$.uri') as "uri",
                json_extract_path_text(properties, '$.thumbprint') as "thumbprint",
                json_extract_path_text(properties, '$.autoRotationEnabled') as "auto_rotation_enabled",
                subscriptionId,
                resourceGroupName,
                serverName,
                encryptionProtectorName
                FROM azure.sql.encryption_protectors
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_database_sql_vulnerability_assessment_scan_results:
      id: azure.sql.vw_database_sql_vulnerability_assessment_scan_results
      name: vw_database_sql_vulnerability_assessment_scan_results
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.ruleId') as "rule_id",
              JSON_EXTRACT(properties, '$.status') as "status",
              JSON_EXTRACT(properties, '$.errorMessage') as "error_message",
              JSON_EXTRACT(properties, '$.isTrimmed') as "is_trimmed",
              JSON_EXTRACT(properties, '$.queryResults') as "query_results",
              JSON_EXTRACT(properties, '$.remediation') as "remediation",
              JSON_EXTRACT(properties, '$.baselineAdjustedResult') as "baseline_adjusted_result",
              JSON_EXTRACT(properties, '$.ruleMetadata') as "rule_metadata",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              vulnerabilityAssessmentName,
              scanId,
              scanResultId
              FROM azure.sql.database_sql_vulnerability_assessment_scan_results
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND scanId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.ruleId') as "rule_id",
                json_extract_path_text(properties, '$.status') as "status",
                json_extract_path_text(properties, '$.errorMessage') as "error_message",
                json_extract_path_text(properties, '$.isTrimmed') as "is_trimmed",
                json_extract_path_text(properties, '$.queryResults') as "query_results",
                json_extract_path_text(properties, '$.remediation') as "remediation",
                json_extract_path_text(properties, '$.baselineAdjustedResult') as "baseline_adjusted_result",
                json_extract_path_text(properties, '$.ruleMetadata') as "rule_metadata",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                vulnerabilityAssessmentName,
                scanId,
                scanResultId
                FROM azure.sql.database_sql_vulnerability_assessment_scan_results
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND scanId = 'replace-me';
    vw_maintenance_window_options:
      id: azure.sql.vw_maintenance_window_options
      name: vw_maintenance_window_options
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.isEnabled') as "is_enabled",
              JSON_EXTRACT(properties, '$.maintenanceWindowCycles') as "maintenance_window_cycles",
              JSON_EXTRACT(properties, '$.minDurationInMinutes') as "min_duration_in_minutes",
              JSON_EXTRACT(properties, '$.defaultDurationInMinutes') as "default_duration_in_minutes",
              JSON_EXTRACT(properties, '$.minCycles') as "min_cycles",
              JSON_EXTRACT(properties, '$.timeGranularityInMinutes') as "time_granularity_in_minutes",
              JSON_EXTRACT(properties, '$.allowMultipleMaintenanceWindowsPerCycle') as "allow_multiple_maintenance_windows_per_cycle",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              maintenanceWindowOptionsName
              FROM azure.sql.maintenance_window_options
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND maintenanceWindowOptionsName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.isEnabled') as "is_enabled",
                json_extract_path_text(properties, '$.maintenanceWindowCycles') as "maintenance_window_cycles",
                json_extract_path_text(properties, '$.minDurationInMinutes') as "min_duration_in_minutes",
                json_extract_path_text(properties, '$.defaultDurationInMinutes') as "default_duration_in_minutes",
                json_extract_path_text(properties, '$.minCycles') as "min_cycles",
                json_extract_path_text(properties, '$.timeGranularityInMinutes') as "time_granularity_in_minutes",
                json_extract_path_text(properties, '$.allowMultipleMaintenanceWindowsPerCycle') as "allow_multiple_maintenance_windows_per_cycle",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                maintenanceWindowOptionsName
                FROM azure.sql.maintenance_window_options
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND maintenanceWindowOptionsName = 'replace-me';
    vw_elastic_pools:
      id: azure.sql.vw_elastic_pools
      name: vw_elastic_pools
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              tags as tags,
              sku as sku,
              kind as kind,
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.creationDate') as "creation_date",
              JSON_EXTRACT(properties, '$.maxSizeBytes') as "max_size_bytes",
              JSON_EXTRACT(properties, '$.minCapacity') as "min_capacity",
              JSON_EXTRACT(properties, '$.perDatabaseSettings') as "per_database_settings",
              JSON_EXTRACT(properties, '$.zoneRedundant') as "zone_redundant",
              JSON_EXTRACT(properties, '$.licenseType') as "license_type",
              JSON_EXTRACT(properties, '$.maintenanceConfigurationId') as "maintenance_configuration_id",
              JSON_EXTRACT(properties, '$.highAvailabilityReplicaCount') as "high_availability_replica_count",
              JSON_EXTRACT(properties, '$.preferredEnclaveType') as "preferred_enclave_type",
              JSON_EXTRACT(properties, '$.availabilityZone') as "availability_zone",
              subscriptionId,
              resourceGroupName,
              serverName,
              elasticPoolName
              FROM azure.sql.elastic_pools
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                tags as tags,
                sku as sku,
                kind as kind,
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.creationDate') as "creation_date",
                json_extract_path_text(properties, '$.maxSizeBytes') as "max_size_bytes",
                json_extract_path_text(properties, '$.minCapacity') as "min_capacity",
                json_extract_path_text(properties, '$.perDatabaseSettings') as "per_database_settings",
                json_extract_path_text(properties, '$.zoneRedundant') as "zone_redundant",
                json_extract_path_text(properties, '$.licenseType') as "license_type",
                json_extract_path_text(properties, '$.maintenanceConfigurationId') as "maintenance_configuration_id",
                json_extract_path_text(properties, '$.highAvailabilityReplicaCount') as "high_availability_replica_count",
                json_extract_path_text(properties, '$.preferredEnclaveType') as "preferred_enclave_type",
                json_extract_path_text(properties, '$.availabilityZone') as "availability_zone",
                subscriptionId,
                resourceGroupName,
                serverName,
                elasticPoolName
                FROM azure.sql.elastic_pools
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_database_sql_vulnerability_assessments_settings:
      id: azure.sql.vw_database_sql_vulnerability_assessments_settings
      name: vw_database_sql_vulnerability_assessments_settings
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.state') as "state",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              vulnerabilityAssessmentName
              FROM azure.sql.database_sql_vulnerability_assessments_settings
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.state') as "state",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                vulnerabilityAssessmentName
                FROM azure.sql.database_sql_vulnerability_assessments_settings
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_start_stop_managed_instance_schedules:
      id: azure.sql.vw_start_stop_managed_instance_schedules
      name: vw_start_stop_managed_instance_schedules
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.description') as "description",
              JSON_EXTRACT(properties, '$.timeZoneId') as "time_zone_id",
              JSON_EXTRACT(properties, '$.scheduleList') as "schedule_list",
              JSON_EXTRACT(properties, '$.nextRunAction') as "next_run_action",
              JSON_EXTRACT(properties, '$.nextExecutionTime') as "next_execution_time",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              startStopScheduleName
              FROM azure.sql.start_stop_managed_instance_schedules
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND startStopScheduleName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.description') as "description",
                json_extract_path_text(properties, '$.timeZoneId') as "time_zone_id",
                json_extract_path_text(properties, '$.scheduleList') as "schedule_list",
                json_extract_path_text(properties, '$.nextRunAction') as "next_run_action",
                json_extract_path_text(properties, '$.nextExecutionTime') as "next_execution_time",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                startStopScheduleName
                FROM azure.sql.start_stop_managed_instance_schedules
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND startStopScheduleName = 'replace-me';
    vw_vulnerability_assessment_baselines:
      id: azure.sql.vw_vulnerability_assessment_baselines
      name: vw_vulnerability_assessment_baselines
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.results') as "results",
              subscriptionId,
              resourceGroupName,
              serverName,
              vulnerabilityAssessmentName,
              baselineName,
              systemDatabaseName
              FROM azure.sql.vulnerability_assessment_baselines
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND systemDatabaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.results') as "results",
                subscriptionId,
                resourceGroupName,
                serverName,
                vulnerabilityAssessmentName,
                baselineName,
                systemDatabaseName
                FROM azure.sql.vulnerability_assessment_baselines
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me' AND systemDatabaseName = 'replace-me';
    vw_database_sql_vulnerability_assessment_baselines:
      id: azure.sql.vw_database_sql_vulnerability_assessment_baselines
      name: vw_database_sql_vulnerability_assessment_baselines
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.results') as "results",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              vulnerabilityAssessmentName,
              baselineName
              FROM azure.sql.database_sql_vulnerability_assessment_baselines
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.results') as "results",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                vulnerabilityAssessmentName,
                baselineName
                FROM azure.sql.database_sql_vulnerability_assessment_baselines
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me';
    vw_sync_groups:
      id: azure.sql.vw_sync_groups
      name: vw_sync_groups
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              sku as sku,
              JSON_EXTRACT(properties, '$.interval') as "interval",
              JSON_EXTRACT(properties, '$.lastSyncTime') as "last_sync_time",
              JSON_EXTRACT(properties, '$.conflictResolutionPolicy') as "conflict_resolution_policy",
              JSON_EXTRACT(properties, '$.syncDatabaseId') as "sync_database_id",
              JSON_EXTRACT(properties, '$.hubDatabaseUserName') as "hub_database_user_name",
              JSON_EXTRACT(properties, '$.hubDatabasePassword') as "hub_database_password",
              JSON_EXTRACT(properties, '$.syncState') as "sync_state",
              JSON_EXTRACT(properties, '$.schema') as "schema",
              JSON_EXTRACT(properties, '$.enableConflictLogging') as "enable_conflict_logging",
              JSON_EXTRACT(properties, '$.conflictLoggingRetentionInDays') as "conflict_logging_retention_in_days",
              JSON_EXTRACT(properties, '$.usePrivateLinkConnection') as "use_private_link_connection",
              JSON_EXTRACT(properties, '$.privateEndpointName') as "private_endpoint_name",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              syncGroupName
              FROM azure.sql.sync_groups
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                sku as sku,
                json_extract_path_text(properties, '$.interval') as "interval",
                json_extract_path_text(properties, '$.lastSyncTime') as "last_sync_time",
                json_extract_path_text(properties, '$.conflictResolutionPolicy') as "conflict_resolution_policy",
                json_extract_path_text(properties, '$.syncDatabaseId') as "sync_database_id",
                json_extract_path_text(properties, '$.hubDatabaseUserName') as "hub_database_user_name",
                json_extract_path_text(properties, '$.hubDatabasePassword') as "hub_database_password",
                json_extract_path_text(properties, '$.syncState') as "sync_state",
                json_extract_path_text(properties, '$.schema') as "schema",
                json_extract_path_text(properties, '$.enableConflictLogging') as "enable_conflict_logging",
                json_extract_path_text(properties, '$.conflictLoggingRetentionInDays') as "conflict_logging_retention_in_days",
                json_extract_path_text(properties, '$.usePrivateLinkConnection') as "use_private_link_connection",
                json_extract_path_text(properties, '$.privateEndpointName') as "private_endpoint_name",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                syncGroupName
                FROM azure.sql.sync_groups
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_restorable_dropped_databases:
      id: azure.sql.vw_restorable_dropped_databases
      name: vw_restorable_dropped_databases
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              sku as sku,
              tags as tags,
              JSON_EXTRACT(properties, '$.databaseName') as "database_name",
              JSON_EXTRACT(properties, '$.maxSizeBytes') as "max_size_bytes",
              JSON_EXTRACT(properties, '$.creationDate') as "creation_date",
              JSON_EXTRACT(properties, '$.deletionDate') as "deletion_date",
              JSON_EXTRACT(properties, '$.earliestRestoreDate') as "earliest_restore_date",
              JSON_EXTRACT(properties, '$.backupStorageRedundancy') as "backup_storage_redundancy",
              JSON_EXTRACT(properties, '$.keys') as "keys",
              subscriptionId,
              resourceGroupName,
              serverName,
              restorableDroppedDatabaseId
              FROM azure.sql.restorable_dropped_databases
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                sku as sku,
                tags as tags,
                json_extract_path_text(properties, '$.databaseName') as "database_name",
                json_extract_path_text(properties, '$.maxSizeBytes') as "max_size_bytes",
                json_extract_path_text(properties, '$.creationDate') as "creation_date",
                json_extract_path_text(properties, '$.deletionDate') as "deletion_date",
                json_extract_path_text(properties, '$.earliestRestoreDate') as "earliest_restore_date",
                json_extract_path_text(properties, '$.backupStorageRedundancy') as "backup_storage_redundancy",
                json_extract_path_text(properties, '$.keys') as "keys",
                subscriptionId,
                resourceGroupName,
                serverName,
                restorableDroppedDatabaseId
                FROM azure.sql.restorable_dropped_databases
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_database_automatic_tunings:
      id: azure.sql.vw_database_automatic_tunings
      name: vw_database_automatic_tunings
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.desiredState') as "desired_state",
              JSON_EXTRACT(properties, '$.actualState') as "actual_state",
              JSON_EXTRACT(properties, '$.options') as "options",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName
              FROM azure.sql.database_automatic_tunings
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.desiredState') as "desired_state",
                json_extract_path_text(properties, '$.actualState') as "actual_state",
                json_extract_path_text(properties, '$.options') as "options",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName
                FROM azure.sql.database_automatic_tunings
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_service_objectives:
      id: azure.sql.vw_service_objectives
      name: vw_service_objectives
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.serviceObjectiveName') as "service_objective_name",
              JSON_EXTRACT(properties, '$.isDefault') as "is_default",
              JSON_EXTRACT(properties, '$.isSystem') as "is_system",
              JSON_EXTRACT(properties, '$.description') as "description",
              JSON_EXTRACT(properties, '$.enabled') as "enabled",
              subscriptionId,
              resourceGroupName,
              serverName,
              serviceObjectiveName
              FROM azure.sql.service_objectives
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.serviceObjectiveName') as "service_objective_name",
                json_extract_path_text(properties, '$.isDefault') as "is_default",
                json_extract_path_text(properties, '$.isSystem') as "is_system",
                json_extract_path_text(properties, '$.description') as "description",
                json_extract_path_text(properties, '$.enabled') as "enabled",
                subscriptionId,
                resourceGroupName,
                serverName,
                serviceObjectiveName
                FROM azure.sql.service_objectives
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_managed_database_vulnerability_assessment_scans:
      id: azure.sql.vw_managed_database_vulnerability_assessment_scans
      name: vw_managed_database_vulnerability_assessment_scans
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.scanId') as "scan_id",
              JSON_EXTRACT(properties, '$.triggerType') as "trigger_type",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.startTime') as "start_time",
              JSON_EXTRACT(properties, '$.endTime') as "end_time",
              JSON_EXTRACT(properties, '$.errors') as "errors",
              JSON_EXTRACT(properties, '$.storageContainerPath') as "storage_container_path",
              JSON_EXTRACT(properties, '$.numberOfFailedSecurityChecks') as "number_of_failed_security_checks",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              vulnerabilityAssessmentName,
              scanId
              FROM azure.sql.managed_database_vulnerability_assessment_scans
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.scanId') as "scan_id",
                json_extract_path_text(properties, '$.triggerType') as "trigger_type",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.startTime') as "start_time",
                json_extract_path_text(properties, '$.endTime') as "end_time",
                json_extract_path_text(properties, '$.errors') as "errors",
                json_extract_path_text(properties, '$.storageContainerPath') as "storage_container_path",
                json_extract_path_text(properties, '$.numberOfFailedSecurityChecks') as "number_of_failed_security_checks",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                vulnerabilityAssessmentName,
                scanId
                FROM azure.sql.managed_database_vulnerability_assessment_scans
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me';
    vw_managed_database_transparent_data_encryptions:
      id: azure.sql.vw_managed_database_transparent_data_encryptions
      name: vw_managed_database_transparent_data_encryptions
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.state') as "state",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              tdeName
              FROM azure.sql.managed_database_transparent_data_encryptions
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.state') as "state",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                tdeName
                FROM azure.sql.managed_database_transparent_data_encryptions
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
    vw_databases:
      id: azure.sql.vw_databases
      name: vw_databases
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              tags as tags,
              sku as sku,
              kind as kind,
              managedBy as managed_by,
              identity as identity,
              JSON_EXTRACT(properties, '$.createMode') as "create_mode",
              JSON_EXTRACT(properties, '$.collation') as "collation",
              JSON_EXTRACT(properties, '$.maxSizeBytes') as "max_size_bytes",
              JSON_EXTRACT(properties, '$.sampleName') as "sample_name",
              JSON_EXTRACT(properties, '$.elasticPoolId') as "elastic_pool_id",
              JSON_EXTRACT(properties, '$.sourceDatabaseId') as "source_database_id",
              JSON_EXTRACT(properties, '$.status') as "status",
              JSON_EXTRACT(properties, '$.databaseId') as "database_id",
              JSON_EXTRACT(properties, '$.creationDate') as "creation_date",
              JSON_EXTRACT(properties, '$.currentServiceObjectiveName') as "current_service_objective_name",
              JSON_EXTRACT(properties, '$.requestedServiceObjectiveName') as "requested_service_objective_name",
              JSON_EXTRACT(properties, '$.defaultSecondaryLocation') as "default_secondary_location",
              JSON_EXTRACT(properties, '$.failoverGroupId') as "failover_group_id",
              JSON_EXTRACT(properties, '$.restorePointInTime') as "restore_point_in_time",
              JSON_EXTRACT(properties, '$.sourceDatabaseDeletionDate') as "source_database_deletion_date",
              JSON_EXTRACT(properties, '$.recoveryServicesRecoveryPointId') as "recovery_services_recovery_point_id",
              JSON_EXTRACT(properties, '$.longTermRetentionBackupResourceId') as "long_term_retention_backup_resource_id",
              JSON_EXTRACT(properties, '$.recoverableDatabaseId') as "recoverable_database_id",
              JSON_EXTRACT(properties, '$.restorableDroppedDatabaseId') as "restorable_dropped_database_id",
              JSON_EXTRACT(properties, '$.catalogCollation') as "catalog_collation",
              JSON_EXTRACT(properties, '$.zoneRedundant') as "zone_redundant",
              JSON_EXTRACT(properties, '$.licenseType') as "license_type",
              JSON_EXTRACT(properties, '$.maxLogSizeBytes') as "max_log_size_bytes",
              JSON_EXTRACT(properties, '$.earliestRestoreDate') as "earliest_restore_date",
              JSON_EXTRACT(properties, '$.readScale') as "read_scale",
              JSON_EXTRACT(properties, '$.highAvailabilityReplicaCount') as "high_availability_replica_count",
              JSON_EXTRACT(properties, '$.secondaryType') as "secondary_type",
              JSON_EXTRACT(properties, '$.currentSku') as "current_sku",
              JSON_EXTRACT(properties, '$.autoPauseDelay') as "auto_pause_delay",
              JSON_EXTRACT(properties, '$.currentBackupStorageRedundancy') as "current_backup_storage_redundancy",
              JSON_EXTRACT(properties, '$.requestedBackupStorageRedundancy') as "requested_backup_storage_redundancy",
              JSON_EXTRACT(properties, '$.minCapacity') as "min_capacity",
              JSON_EXTRACT(properties, '$.pausedDate') as "paused_date",
              JSON_EXTRACT(properties, '$.resumedDate') as "resumed_date",
              JSON_EXTRACT(properties, '$.maintenanceConfigurationId') as "maintenance_configuration_id",
              JSON_EXTRACT(properties, '$.isLedgerOn') as "is_ledger_on",
              JSON_EXTRACT(properties, '$.isInfraEncryptionEnabled') as "is_infra_encryption_enabled",
              JSON_EXTRACT(properties, '$.federatedClientId') as "federated_client_id",
              JSON_EXTRACT(properties, '$.keys') as "keys",
              JSON_EXTRACT(properties, '$.encryptionProtector') as "encryption_protector",
              JSON_EXTRACT(properties, '$.preferredEnclaveType') as "preferred_enclave_type",
              JSON_EXTRACT(properties, '$.useFreeLimit') as "use_free_limit",
              JSON_EXTRACT(properties, '$.freeLimitExhaustionBehavior') as "free_limit_exhaustion_behavior",
              JSON_EXTRACT(properties, '$.sourceResourceId') as "source_resource_id",
              JSON_EXTRACT(properties, '$.manualCutover') as "manual_cutover",
              JSON_EXTRACT(properties, '$.performCutover') as "perform_cutover",
              JSON_EXTRACT(properties, '$.availabilityZone') as "availability_zone",
              JSON_EXTRACT(properties, '$.encryptionProtectorAutoRotation') as "encryption_protector_auto_rotation",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName
              FROM azure.sql.databases
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                tags as tags,
                sku as sku,
                kind as kind,
                managedBy as managed_by,
                identity as identity,
                json_extract_path_text(properties, '$.createMode') as "create_mode",
                json_extract_path_text(properties, '$.collation') as "collation",
                json_extract_path_text(properties, '$.maxSizeBytes') as "max_size_bytes",
                json_extract_path_text(properties, '$.sampleName') as "sample_name",
                json_extract_path_text(properties, '$.elasticPoolId') as "elastic_pool_id",
                json_extract_path_text(properties, '$.sourceDatabaseId') as "source_database_id",
                json_extract_path_text(properties, '$.status') as "status",
                json_extract_path_text(properties, '$.databaseId') as "database_id",
                json_extract_path_text(properties, '$.creationDate') as "creation_date",
                json_extract_path_text(properties, '$.currentServiceObjectiveName') as "current_service_objective_name",
                json_extract_path_text(properties, '$.requestedServiceObjectiveName') as "requested_service_objective_name",
                json_extract_path_text(properties, '$.defaultSecondaryLocation') as "default_secondary_location",
                json_extract_path_text(properties, '$.failoverGroupId') as "failover_group_id",
                json_extract_path_text(properties, '$.restorePointInTime') as "restore_point_in_time",
                json_extract_path_text(properties, '$.sourceDatabaseDeletionDate') as "source_database_deletion_date",
                json_extract_path_text(properties, '$.recoveryServicesRecoveryPointId') as "recovery_services_recovery_point_id",
                json_extract_path_text(properties, '$.longTermRetentionBackupResourceId') as "long_term_retention_backup_resource_id",
                json_extract_path_text(properties, '$.recoverableDatabaseId') as "recoverable_database_id",
                json_extract_path_text(properties, '$.restorableDroppedDatabaseId') as "restorable_dropped_database_id",
                json_extract_path_text(properties, '$.catalogCollation') as "catalog_collation",
                json_extract_path_text(properties, '$.zoneRedundant') as "zone_redundant",
                json_extract_path_text(properties, '$.licenseType') as "license_type",
                json_extract_path_text(properties, '$.maxLogSizeBytes') as "max_log_size_bytes",
                json_extract_path_text(properties, '$.earliestRestoreDate') as "earliest_restore_date",
                json_extract_path_text(properties, '$.readScale') as "read_scale",
                json_extract_path_text(properties, '$.highAvailabilityReplicaCount') as "high_availability_replica_count",
                json_extract_path_text(properties, '$.secondaryType') as "secondary_type",
                json_extract_path_text(properties, '$.currentSku') as "current_sku",
                json_extract_path_text(properties, '$.autoPauseDelay') as "auto_pause_delay",
                json_extract_path_text(properties, '$.currentBackupStorageRedundancy') as "current_backup_storage_redundancy",
                json_extract_path_text(properties, '$.requestedBackupStorageRedundancy') as "requested_backup_storage_redundancy",
                json_extract_path_text(properties, '$.minCapacity') as "min_capacity",
                json_extract_path_text(properties, '$.pausedDate') as "paused_date",
                json_extract_path_text(properties, '$.resumedDate') as "resumed_date",
                json_extract_path_text(properties, '$.maintenanceConfigurationId') as "maintenance_configuration_id",
                json_extract_path_text(properties, '$.isLedgerOn') as "is_ledger_on",
                json_extract_path_text(properties, '$.isInfraEncryptionEnabled') as "is_infra_encryption_enabled",
                json_extract_path_text(properties, '$.federatedClientId') as "federated_client_id",
                json_extract_path_text(properties, '$.keys') as "keys",
                json_extract_path_text(properties, '$.encryptionProtector') as "encryption_protector",
                json_extract_path_text(properties, '$.preferredEnclaveType') as "preferred_enclave_type",
                json_extract_path_text(properties, '$.useFreeLimit') as "use_free_limit",
                json_extract_path_text(properties, '$.freeLimitExhaustionBehavior') as "free_limit_exhaustion_behavior",
                json_extract_path_text(properties, '$.sourceResourceId') as "source_resource_id",
                json_extract_path_text(properties, '$.manualCutover') as "manual_cutover",
                json_extract_path_text(properties, '$.performCutover') as "perform_cutover",
                json_extract_path_text(properties, '$.availabilityZone') as "availability_zone",
                json_extract_path_text(properties, '$.encryptionProtectorAutoRotation') as "encryption_protector_auto_rotation",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName
                FROM azure.sql.databases
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_database_vulnerability_assessment_scans:
      id: azure.sql.vw_database_vulnerability_assessment_scans
      name: vw_database_vulnerability_assessment_scans
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.scanId') as "scan_id",
              JSON_EXTRACT(properties, '$.triggerType') as "trigger_type",
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.startTime') as "start_time",
              JSON_EXTRACT(properties, '$.endTime') as "end_time",
              JSON_EXTRACT(properties, '$.errors') as "errors",
              JSON_EXTRACT(properties, '$.storageContainerPath') as "storage_container_path",
              JSON_EXTRACT(properties, '$.numberOfFailedSecurityChecks') as "number_of_failed_security_checks",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              vulnerabilityAssessmentName,
              scanId
              FROM azure.sql.database_vulnerability_assessment_scans
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.scanId') as "scan_id",
                json_extract_path_text(properties, '$.triggerType') as "trigger_type",
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.startTime') as "start_time",
                json_extract_path_text(properties, '$.endTime') as "end_time",
                json_extract_path_text(properties, '$.errors') as "errors",
                json_extract_path_text(properties, '$.storageContainerPath') as "storage_container_path",
                json_extract_path_text(properties, '$.numberOfFailedSecurityChecks') as "number_of_failed_security_checks",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                vulnerabilityAssessmentName,
                scanId
                FROM azure.sql.database_vulnerability_assessment_scans
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND vulnerabilityAssessmentName = 'replace-me';
    vw_replication_links:
      id: azure.sql.vw_replication_links
      name: vw_replication_links
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.partnerServer') as "partner_server",
              JSON_EXTRACT(properties, '$.partnerDatabase') as "partner_database",
              JSON_EXTRACT(properties, '$.partnerDatabaseId') as "partner_database_id",
              JSON_EXTRACT(properties, '$.partnerLocation') as "partner_location",
              JSON_EXTRACT(properties, '$.role') as "role",
              JSON_EXTRACT(properties, '$.partnerRole') as "partner_role",
              JSON_EXTRACT(properties, '$.replicationMode') as "replication_mode",
              JSON_EXTRACT(properties, '$.startTime') as "start_time",
              JSON_EXTRACT(properties, '$.percentComplete') as "percent_complete",
              JSON_EXTRACT(properties, '$.replicationState') as "replication_state",
              JSON_EXTRACT(properties, '$.isTerminationAllowed') as "is_termination_allowed",
              JSON_EXTRACT(properties, '$.linkType') as "link_type",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              linkId
              FROM azure.sql.replication_links
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.partnerServer') as "partner_server",
                json_extract_path_text(properties, '$.partnerDatabase') as "partner_database",
                json_extract_path_text(properties, '$.partnerDatabaseId') as "partner_database_id",
                json_extract_path_text(properties, '$.partnerLocation') as "partner_location",
                json_extract_path_text(properties, '$.role') as "role",
                json_extract_path_text(properties, '$.partnerRole') as "partner_role",
                json_extract_path_text(properties, '$.replicationMode') as "replication_mode",
                json_extract_path_text(properties, '$.startTime') as "start_time",
                json_extract_path_text(properties, '$.percentComplete') as "percent_complete",
                json_extract_path_text(properties, '$.replicationState') as "replication_state",
                json_extract_path_text(properties, '$.isTerminationAllowed') as "is_termination_allowed",
                json_extract_path_text(properties, '$.linkType') as "link_type",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                linkId
                FROM azure.sql.replication_links
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_virtual_clusters:
      id: azure.sql.vw_virtual_clusters
      name: vw_virtual_clusters
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              tags as tags,
              JSON_EXTRACT(properties, '$.subnetId') as "subnet_id",
              JSON_EXTRACT(properties, '$.version') as "version",
              JSON_EXTRACT(properties, '$.childResources') as "child_resources",
              subscriptionId,
              resourceGroupName,
              virtualClusterName
              FROM azure.sql.virtual_clusters
              WHERE subscriptionId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                tags as tags,
                json_extract_path_text(properties, '$.subnetId') as "subnet_id",
                json_extract_path_text(properties, '$.version') as "version",
                json_extract_path_text(properties, '$.childResources') as "child_resources",
                subscriptionId,
                resourceGroupName,
                virtualClusterName
                FROM azure.sql.virtual_clusters
                WHERE subscriptionId = 'replace-me';
    vw_job_agents:
      id: azure.sql.vw_job_agents
      name: vw_job_agents
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              tags as tags,
              sku as sku,
              JSON_EXTRACT(properties, '$.databaseId') as "database_id",
              JSON_EXTRACT(properties, '$.state') as "state",
              subscriptionId,
              resourceGroupName,
              serverName,
              jobAgentName
              FROM azure.sql.job_agents
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                tags as tags,
                sku as sku,
                json_extract_path_text(properties, '$.databaseId') as "database_id",
                json_extract_path_text(properties, '$.state') as "state",
                subscriptionId,
                resourceGroupName,
                serverName,
                jobAgentName
                FROM azure.sql.job_agents
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_managed_database_advanced_threat_protection_settings:
      id: azure.sql.vw_managed_database_advanced_threat_protection_settings
      name: vw_managed_database_advanced_threat_protection_settings
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.creationTime') as "creation_time",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              advancedThreatProtectionName
              FROM azure.sql.managed_database_advanced_threat_protection_settings
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.creationTime') as "creation_time",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                advancedThreatProtectionName
                FROM azure.sql.managed_database_advanced_threat_protection_settings
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
    vw_managed_databases:
      id: azure.sql.vw_managed_databases
      name: vw_managed_databases
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              tags as tags,
              JSON_EXTRACT(properties, '$.collation') as "collation",
              JSON_EXTRACT(properties, '$.status') as "status",
              JSON_EXTRACT(properties, '$.creationDate') as "creation_date",
              JSON_EXTRACT(properties, '$.earliestRestorePoint') as "earliest_restore_point",
              JSON_EXTRACT(properties, '$.restorePointInTime') as "restore_point_in_time",
              JSON_EXTRACT(properties, '$.defaultSecondaryLocation') as "default_secondary_location",
              JSON_EXTRACT(properties, '$.catalogCollation') as "catalog_collation",
              JSON_EXTRACT(properties, '$.createMode') as "create_mode",
              JSON_EXTRACT(properties, '$.storageContainerUri') as "storage_container_uri",
              JSON_EXTRACT(properties, '$.sourceDatabaseId') as "source_database_id",
              JSON_EXTRACT(properties, '$.crossSubscriptionSourceDatabaseId') as "cross_subscription_source_database_id",
              JSON_EXTRACT(properties, '$.restorableDroppedDatabaseId') as "restorable_dropped_database_id",
              JSON_EXTRACT(properties, '$.crossSubscriptionRestorableDroppedDatabaseId') as "cross_subscription_restorable_dropped_database_id",
              JSON_EXTRACT(properties, '$.storageContainerIdentity') as "storage_container_identity",
              JSON_EXTRACT(properties, '$.storageContainerSasToken') as "storage_container_sas_token",
              JSON_EXTRACT(properties, '$.failoverGroupId') as "failover_group_id",
              JSON_EXTRACT(properties, '$.recoverableDatabaseId') as "recoverable_database_id",
              JSON_EXTRACT(properties, '$.longTermRetentionBackupResourceId') as "long_term_retention_backup_resource_id",
              JSON_EXTRACT(properties, '$.autoCompleteRestore') as "auto_complete_restore",
              JSON_EXTRACT(properties, '$.lastBackupName') as "last_backup_name",
              JSON_EXTRACT(properties, '$.crossSubscriptionTargetManagedInstanceId') as "cross_subscription_target_managed_instance_id",
              JSON_EXTRACT(properties, '$.isLedgerOn') as "is_ledger_on",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName
              FROM azure.sql.managed_databases
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                tags as tags,
                json_extract_path_text(properties, '$.collation') as "collation",
                json_extract_path_text(properties, '$.status') as "status",
                json_extract_path_text(properties, '$.creationDate') as "creation_date",
                json_extract_path_text(properties, '$.earliestRestorePoint') as "earliest_restore_point",
                json_extract_path_text(properties, '$.restorePointInTime') as "restore_point_in_time",
                json_extract_path_text(properties, '$.defaultSecondaryLocation') as "default_secondary_location",
                json_extract_path_text(properties, '$.catalogCollation') as "catalog_collation",
                json_extract_path_text(properties, '$.createMode') as "create_mode",
                json_extract_path_text(properties, '$.storageContainerUri') as "storage_container_uri",
                json_extract_path_text(properties, '$.sourceDatabaseId') as "source_database_id",
                json_extract_path_text(properties, '$.crossSubscriptionSourceDatabaseId') as "cross_subscription_source_database_id",
                json_extract_path_text(properties, '$.restorableDroppedDatabaseId') as "restorable_dropped_database_id",
                json_extract_path_text(properties, '$.crossSubscriptionRestorableDroppedDatabaseId') as "cross_subscription_restorable_dropped_database_id",
                json_extract_path_text(properties, '$.storageContainerIdentity') as "storage_container_identity",
                json_extract_path_text(properties, '$.storageContainerSasToken') as "storage_container_sas_token",
                json_extract_path_text(properties, '$.failoverGroupId') as "failover_group_id",
                json_extract_path_text(properties, '$.recoverableDatabaseId') as "recoverable_database_id",
                json_extract_path_text(properties, '$.longTermRetentionBackupResourceId') as "long_term_retention_backup_resource_id",
                json_extract_path_text(properties, '$.autoCompleteRestore') as "auto_complete_restore",
                json_extract_path_text(properties, '$.lastBackupName') as "last_backup_name",
                json_extract_path_text(properties, '$.crossSubscriptionTargetManagedInstanceId') as "cross_subscription_target_managed_instance_id",
                json_extract_path_text(properties, '$.isLedgerOn') as "is_ledger_on",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName
                FROM azure.sql.managed_databases
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me';
    vw_managed_instance_azure_ad_only_authentications:
      id: azure.sql.vw_managed_instance_azure_ad_only_authentications
      name: vw_managed_instance_azure_ad_only_authentications
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.azureADOnlyAuthentication') as "azure_ad_only_authentication",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              authenticationName
              FROM azure.sql.managed_instance_azure_ad_only_authentications
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND authenticationName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.azureADOnlyAuthentication') as "azure_ad_only_authentication",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                authenticationName
                FROM azure.sql.managed_instance_azure_ad_only_authentications
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND authenticationName = 'replace-me';
    vw_server_keys:
      id: azure.sql.vw_server_keys
      name: vw_server_keys
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              kind as kind,
              JSON_EXTRACT(properties, '$.subregion') as "subregion",
              JSON_EXTRACT(properties, '$.serverKeyType') as "server_key_type",
              JSON_EXTRACT(properties, '$.uri') as "uri",
              JSON_EXTRACT(properties, '$.thumbprint') as "thumbprint",
              JSON_EXTRACT(properties, '$.creationDate') as "creation_date",
              JSON_EXTRACT(properties, '$.autoRotationEnabled') as "auto_rotation_enabled",
              subscriptionId,
              resourceGroupName,
              serverName,
              keyName
              FROM azure.sql.server_keys
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                kind as kind,
                json_extract_path_text(properties, '$.subregion') as "subregion",
                json_extract_path_text(properties, '$.serverKeyType') as "server_key_type",
                json_extract_path_text(properties, '$.uri') as "uri",
                json_extract_path_text(properties, '$.thumbprint') as "thumbprint",
                json_extract_path_text(properties, '$.creationDate') as "creation_date",
                json_extract_path_text(properties, '$.autoRotationEnabled') as "auto_rotation_enabled",
                subscriptionId,
                resourceGroupName,
                serverName,
                keyName
                FROM azure.sql.server_keys
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_endpoint_certificates:
      id: azure.sql.vw_endpoint_certificates
      name: vw_endpoint_certificates
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.publicBlob') as "public_blob",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              endpointType
              FROM azure.sql.endpoint_certificates
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND endpointType = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.publicBlob') as "public_blob",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                endpointType
                FROM azure.sql.endpoint_certificates
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND endpointType = 'replace-me';
    vw_managed_database_queries:
      id: azure.sql.vw_managed_database_queries
      name: vw_managed_database_queries
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.queryText') as "query_text",
              subscriptionId,
              resourceGroupName,
              managedInstanceName,
              databaseName,
              queryId
              FROM azure.sql.managed_database_queries
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me' AND queryId = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.queryText') as "query_text",
                subscriptionId,
                resourceGroupName,
                managedInstanceName,
                databaseName,
                queryId
                FROM azure.sql.managed_database_queries
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND managedInstanceName = 'replace-me' AND databaseName = 'replace-me' AND queryId = 'replace-me';
    vw_server_automatic_tunings:
      id: azure.sql.vw_server_automatic_tunings
      name: vw_server_automatic_tunings
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.desiredState') as "desired_state",
              JSON_EXTRACT(properties, '$.actualState') as "actual_state",
              JSON_EXTRACT(properties, '$.options') as "options",
              subscriptionId,
              resourceGroupName,
              serverName
              FROM azure.sql.server_automatic_tunings
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.desiredState') as "desired_state",
                json_extract_path_text(properties, '$.actualState') as "actual_state",
                json_extract_path_text(properties, '$.options') as "options",
                subscriptionId,
                resourceGroupName,
                serverName
                FROM azure.sql.server_automatic_tunings
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me';
    vw_jobs:
      id: azure.sql.vw_jobs
      name: vw_jobs
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.description') as "description",
              JSON_EXTRACT(properties, '$.version') as "version",
              JSON_EXTRACT(properties, '$.schedule') as "schedule",
              subscriptionId,
              resourceGroupName,
              serverName,
              jobAgentName,
              jobName
              FROM azure.sql.jobs
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.description') as "description",
                json_extract_path_text(properties, '$.version') as "version",
                json_extract_path_text(properties, '$.schedule') as "schedule",
                subscriptionId,
                resourceGroupName,
                serverName,
                jobAgentName,
                jobName
                FROM azure.sql.jobs
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND jobAgentName = 'replace-me';
    vw_transparent_data_encryptions:
      id: azure.sql.vw_transparent_data_encryptions
      name: vw_transparent_data_encryptions
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.state') as "state",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              tdeName
              FROM azure.sql.transparent_data_encryptions
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.state') as "state",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                tdeName
                FROM azure.sql.transparent_data_encryptions
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_instance_failover_groups:
      id: azure.sql.vw_instance_failover_groups
      name: vw_instance_failover_groups
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.secondaryType') as "secondary_type",
              JSON_EXTRACT(properties, '$.readWriteEndpoint') as "read_write_endpoint",
              JSON_EXTRACT(properties, '$.readOnlyEndpoint') as "read_only_endpoint",
              JSON_EXTRACT(properties, '$.replicationRole') as "replication_role",
              JSON_EXTRACT(properties, '$.replicationState') as "replication_state",
              JSON_EXTRACT(properties, '$.partnerRegions') as "partner_regions",
              JSON_EXTRACT(properties, '$.managedInstancePairs') as "managed_instance_pairs",
              subscriptionId,
              resourceGroupName,
              locationName,
              failoverGroupName
              FROM azure.sql.instance_failover_groups
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND locationName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.secondaryType') as "secondary_type",
                json_extract_path_text(properties, '$.readWriteEndpoint') as "read_write_endpoint",
                json_extract_path_text(properties, '$.readOnlyEndpoint') as "read_only_endpoint",
                json_extract_path_text(properties, '$.replicationRole') as "replication_role",
                json_extract_path_text(properties, '$.replicationState') as "replication_state",
                json_extract_path_text(properties, '$.partnerRegions') as "partner_regions",
                json_extract_path_text(properties, '$.managedInstancePairs') as "managed_instance_pairs",
                subscriptionId,
                resourceGroupName,
                locationName,
                failoverGroupName
                FROM azure.sql.instance_failover_groups
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND locationName = 'replace-me';
    vw_data_masking_policies:
      id: azure.sql.vw_data_masking_policies
      name: vw_data_masking_policies
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              location as location,
              kind as kind,
              JSON_EXTRACT(properties, '$.dataMaskingState') as "data_masking_state",
              JSON_EXTRACT(properties, '$.exemptPrincipals') as "exempt_principals",
              JSON_EXTRACT(properties, '$.applicationPrincipals') as "application_principals",
              JSON_EXTRACT(properties, '$.maskingLevel') as "masking_level",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              dataMaskingPolicyName
              FROM azure.sql.data_masking_policies
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND dataMaskingPolicyName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                location as location,
                kind as kind,
                json_extract_path_text(properties, '$.dataMaskingState') as "data_masking_state",
                json_extract_path_text(properties, '$.exemptPrincipals') as "exempt_principals",
                json_extract_path_text(properties, '$.applicationPrincipals') as "application_principals",
                json_extract_path_text(properties, '$.maskingLevel') as "masking_level",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                dataMaskingPolicyName
                FROM azure.sql.data_masking_policies
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me' AND dataMaskingPolicyName = 'replace-me';
    vw_database_advanced_threat_protection_settings:
      id: azure.sql.vw_database_advanced_threat_protection_settings
      name: vw_database_advanced_threat_protection_settings
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              systemData as system_data,
              JSON_EXTRACT(properties, '$.state') as "state",
              JSON_EXTRACT(properties, '$.creationTime') as "creation_time",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              advancedThreatProtectionName
              FROM azure.sql.database_advanced_threat_protection_settings
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                systemData as system_data,
                json_extract_path_text(properties, '$.state') as "state",
                json_extract_path_text(properties, '$.creationTime') as "creation_time",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                advancedThreatProtectionName
                FROM azure.sql.database_advanced_threat_protection_settings
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
    vw_workload_groups:
      id: azure.sql.vw_workload_groups
      name: vw_workload_groups
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              JSON_EXTRACT(properties, '$.minResourcePercent') as "min_resource_percent",
              JSON_EXTRACT(properties, '$.maxResourcePercent') as "max_resource_percent",
              JSON_EXTRACT(properties, '$.minResourcePercentPerRequest') as "min_resource_percent_per_request",
              JSON_EXTRACT(properties, '$.maxResourcePercentPerRequest') as "max_resource_percent_per_request",
              JSON_EXTRACT(properties, '$.importance') as "importance",
              JSON_EXTRACT(properties, '$.queryExecutionTimeout') as "query_execution_timeout",
              subscriptionId,
              resourceGroupName,
              serverName,
              databaseName,
              workloadGroupName
              FROM azure.sql.workload_groups
              WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                json_extract_path_text(properties, '$.minResourcePercent') as "min_resource_percent",
                json_extract_path_text(properties, '$.maxResourcePercent') as "max_resource_percent",
                json_extract_path_text(properties, '$.minResourcePercentPerRequest') as "min_resource_percent_per_request",
                json_extract_path_text(properties, '$.maxResourcePercentPerRequest') as "max_resource_percent_per_request",
                json_extract_path_text(properties, '$.importance') as "importance",
                json_extract_path_text(properties, '$.queryExecutionTimeout') as "query_execution_timeout",
                subscriptionId,
                resourceGroupName,
                serverName,
                databaseName,
                workloadGroupName
                FROM azure.sql.workload_groups
                WHERE subscriptionId = 'replace-me' AND resourceGroupName = 'replace-me' AND serverName = 'replace-me' AND databaseName = 'replace-me';
paths:
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/metrics?api-version=2014-04-01:
    get:
      tags:
        - Databases
      operationId: DatabasesMetrics_List
      description: Returns database metrics.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database.
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: An OData filter expression that describes a subset of metrics to return.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricListResult'
      x-ms-pageable:
        nextLinkName: null
      x-ms-original-operationId: Databases_ListMetrics
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/metricDefinitions?api-version=2014-04-01:
    get:
      tags:
        - Databases
      operationId: DatabasesMetricDefinitions_List
      description: Returns database metric definitions.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricDefinitionListResult'
      x-ms-pageable:
        nextLinkName: null
      x-ms-original-operationId: Databases_ListMetricDefinitions
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/metrics?api-version=2014-04-01:
    get:
      tags:
        - ElasticPools
      operationId: ElasticPoolsMetrics_List
      description: Returns elastic pool  metrics.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: elasticPoolName
          in: path
          description: The name of the elastic pool.
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: An OData filter expression that describes a subset of metrics to return.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricListResult'
      x-ms-pageable:
        nextLinkName: null
      x-ms-original-operationId: ElasticPools_ListMetrics
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/metricDefinitions?api-version=2014-04-01:
    get:
      tags:
        - ElasticPools
      operationId: ElasticPoolsMetricDefinitions_List
      description: Returns elastic pool metric definitions.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: elasticPoolName
          in: path
          description: The name of the elastic pool.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricDefinitionListResult'
      x-ms-pageable:
        nextLinkName: null
      x-ms-original-operationId: ElasticPools_ListMetricDefinitions
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/instancePools?api-version=2023-05-01-preview:
    get:
      tags:
        - InstancePools
      description: Gets a list of all instance pools in the subscription.
      operationId: InstancePools_List
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of instance pools in a subscription.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePoolListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools?api-version=2023-05-01-preview:
    get:
      tags:
        - InstancePools
      description: Gets a list of instance pools in the resource group
      operationId: InstancePools_ListByResourceGroup
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of instance pools.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePoolListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidMinimalTlsVersion - Invalid minimal TLS version.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 DeleteOfManagedInstanceIsDisabled - Delete operation of managed instance is disabled.

             * 400 CustomMaintenanceWindowIsDisabled - Custom maintenance window is not enabled.

             * 400 MICantBeMovedFromOrToInstancePool - Existing managed instance can't be moved to managed instance pool.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}?api-version=2023-05-01-preview:
    get:
      tags:
        - InstancePools
      description: Gets an instance pool.
      operationId: InstancePools_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: instancePoolName
          in: path
          description: The name of the instance pool to be retrieved.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified instance pool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePool'
        default:
          description: |-
            *** Error Responses: ***

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidMinimalTlsVersion - Invalid minimal TLS version.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 DeleteOfManagedInstanceIsDisabled - Delete operation of managed instance is disabled.

             * 400 CustomMaintenanceWindowIsDisabled - Custom maintenance window is not enabled.

             * 400 MICantBeMovedFromOrToInstancePool - Existing managed instance can't be moved to managed instance pool.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 InstancePoolNotFound - An instance pool cannot be found

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
    put:
      tags:
        - InstancePools
      description: Creates or updates an instance pool.
      operationId: InstancePools_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: instancePoolName
          in: path
          description: The name of the instance pool to be created or updated.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested instance pool resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstancePool'
      responses:
        '200':
          description: Successfully updated the instance pool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePool'
        '201':
          description: Successfully created the instance pool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePool'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidMinimalTlsVersion - Invalid minimal TLS version.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 DeleteOfManagedInstanceIsDisabled - Delete operation of managed instance is disabled.

             * 400 CustomMaintenanceWindowIsDisabled - Custom maintenance window is not enabled.

             * 400 MICantBeMovedFromOrToInstancePool - Existing managed instance can't be moved to managed instance pool.

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 MissingSkuName - Sku name is required.

             * 400 InstancePoolRequestedVcoreCountIsInvalid - Requested vcore count for instance pool is invalid

             * 400 InstancePoolRequestMissingSku - Instance pool request is missing sku

             * 400 InstancePoolRequestMissingSkuTier - Instance pool request is missing sku tier

             * 400 InstancePoolRequestMissingSkuFamily - Instance pool request is missing sku family

             * 400 InstancePoolRequestedSubnetResourceIdIsInvalid - Subnet id for instance pool is null or empty

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 InstancePoolBusy - An instance pool is busy with another ongoing operation

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
    delete:
      tags:
        - InstancePools
      description: Deletes an instance pool
      operationId: InstancePools_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: instancePoolName
          in: path
          description: The name of the instance pool to be deleted
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the instance pool.
        '202':
          description: Accepted
        '204':
          description: The specified instance pool does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidMinimalTlsVersion - Invalid minimal TLS version.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 DeleteOfManagedInstanceIsDisabled - Delete operation of managed instance is disabled.

             * 400 CustomMaintenanceWindowIsDisabled - Custom maintenance window is not enabled.

             * 400 MICantBeMovedFromOrToInstancePool - Existing managed instance can't be moved to managed instance pool.

             * 400 InstancePoolNotEmpty - An instance pool is not empty

             * 404 InstancePoolNotFound - An instance pool cannot be found

             * 404 InstancePoolNotFound - An instance pool cannot be found

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 InstancePoolBusy - An instance pool is busy with another ongoing operation

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
    patch:
      tags:
        - InstancePools
      description: Updates an instance pool.
      operationId: InstancePools_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: instancePoolName
          in: path
          description: The name of the instance pool to be updated.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested instance pool resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstancePoolUpdate'
      responses:
        '200':
          description: Successfully updated the instance pool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstancePool'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidMinimalTlsVersion - Invalid minimal TLS version.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 DeleteOfManagedInstanceIsDisabled - Delete operation of managed instance is disabled.

             * 400 CustomMaintenanceWindowIsDisabled - Custom maintenance window is not enabled.

             * 400 MICantBeMovedFromOrToInstancePool - Existing managed instance can't be moved to managed instance pool.

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/operations/{operationId}/cancel?api-version=2020-11-01-preview:
    post:
      tags:
        - ElasticPoolOperations
      description: Cancels the asynchronous operation on the elastic pool.
      operationId: ElasticPoolOperations_Cancel
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: elasticPoolName
          in: path
          required: true
          schema:
            type: string
        - name: operationId
          in: path
          description: The operation identifier.
          required: true
          schema:
            format: uuid
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: The request for cancel has been executed successfully.
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/operations?api-version=2020-11-01-preview:
    get:
      tags:
        - ElasticPoolOperations
      description: Gets a list of operations performed on the elastic pool.
      operationId: ElasticPoolOperations_ListByElasticPool
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: elasticPoolName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: The request for getting elastic pool operations has been executed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElasticPoolOperationListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups?api-version=2023-05-01-preview:
    get:
      tags:
        - FailoverGroups
      description: Lists the failover groups in a server.
      operationId: FailoverGroups_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server containing the failover group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the failover groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailoverGroupListResult'
        default:
          description: "*** Error Responses: ***\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabases - The provided databases IDs are not properly constructed database resource IDs. For the example of proper formatting see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update failover group request body is empty or invalid. Please provide a valid value of this field. For examples of properly formatted requests see\_\r\nhttps://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the failover group. Please make sure the primary server and all of the given partner servers are unique.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabaseServer - One or more of the provided databases do not exist on the primary server of the failover group. Please make sure that all the databases exist on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner server for Failover Group is supported. Please modify your request accordingly. For examples of valid requests see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalid - The create or update failover group request body is empty or invalid.\n\n * 400 FailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the failover group are not allowed on a secondary server. Execute the request on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.\n\n * 400 FailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the failover group must be greater than or equal to the '{0}' minutes minimum grace period\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint. Please remove it from request.\n\n * 400 FailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update failover group request body should not modify the read-only property '{0}'.\n\n * 400 FailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of failover group.\n\n * 400 FailoverGroupPartnerServerFromDifferentSubscription - Primary server and the partner servers of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadOnlyEndpointTargetServer - The property targetServer of the read-only endpoint must be a valid server present among the partnerServers configured for the failover group.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCountForStandby - Only one partner server for Failover Group is supported for secondaryType standby. Please modify your request accordingly.\n\n * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.\n\n * 400 InvalidSku - The user specified an invalid sku.\n\n * 400 ServerNotFound - The requested server was not found.\n\n * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.\n\n * 400 TokenTooLong - The provided token is too long.\n\n * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.\n\n * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.\n\n * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.\n\n * 400 ResourcePoolNotFound - Specified elastic pool does not exist in the specified logical server.\n\n * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.\n\n * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.\n\n * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.\n\n * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.\n\n * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.\n\n * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. \n\n * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.\n\n * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.\n\n * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.\n\n * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.\n\n * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.\n\n * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.\n\n * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.\n\n * 400 InvalidFailoverGroupRegion - Servers specified in a Failover Group need to reside in different regions to provide isolation.\n\n * 400 FailoverGroupDoesNotExist - Failover group does not exist on a server.\n\n * 400 FailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a Failover Group.\n\n * 400 InvalidServerName - Invalid server name specified.\n\n * 400 DatabaseInFailoverGroupNotPrimary - GeoDR link for the database already exists, but its role is not 'Primary' or it is not continuous copy link.\n\n * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.\n\n * 400 UnableToCreateFailoverGroupDueToTableAuditing - Failover Group cannot be created for server that has table auditing turned on.\n\n * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.\n\n * 400 UnableToAddDbWithTableAuditingToFailoverGroup - Database with Table Auditing enabled will not be accessible through Failover Group endpoint.\n\n * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.\n\n * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.\n\n * 400 LimitOfFailoverGroupsPerServerExceeded - Creating new Failover Group will exceed the allowed number of Failover Groups per server.\n\n * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.\n\n * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.\n\n * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.\n\n * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.\n\n * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.\n\n * 400 FailoverGroupWithVirtualNetworkRulesNotSupported - Failover Groups configured with an automatic failover policy are currently not supported on servers configured with virtual network firewall rules. Please configure the failover group with manual failover policy.\n\n * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.\n\n * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.\n\n * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).\n\n * 404 ResourceNotFound - The requested resource was not found.\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.\n\n * 404 SourceDatabaseNotFound - The source database does not exist.\n\n * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.\n\n * 409 ConflictingServerOperation - An operation is currently in progress for the server.\n\n * 409 SubscriptionDisabled - Subscription is disabled.\n\n * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.\n\n * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.\n\n * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.\n\n * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.\n\n * 409 ServerKeyDoesNotExists - The server key does not exist.\n\n * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.\n\n * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.\n\n * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.\n\n * 409 FailoverGroupAlreadyExists - Failover group already exists on a given server. Please use different Failover Group name.\n\n * 409 FailoverGroupBusy - Failover Group is busy with another operation.\n\n * 409 DatabaseBelongsToOtherFailoverGroup - Database belongs to other Failover Group and cannot be consider a part of this one.\n\n * 409 DatabaseBeingAddedToFailoverGroup - The database is currently being added to Failover Group, customer needs to wait for this operation to finish to issue remove.\n\n * 409 DatabaseBeingRemovedFromFailoverGroup - The database is currently being removed from failover group, customer needs to wait for this operation to finish to issue add.\n\n * 409 FailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.\n\n * 409 InvalidFailoverGroupName - Invalid Failover Group name was supplied.\n\n * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.\n\n * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.\n\n * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.\n\n * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed\n\n * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .\n\n * 503 DatabaseUnavailable - The operation failed because the database is unavailable.\n\n * 504 RequestTimeout - Service request exceeded the allowed timeout."
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}?api-version=2023-05-01-preview:
    get:
      tags:
        - FailoverGroups
      description: Gets a failover group.
      operationId: FailoverGroups_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server containing the failover group.
          required: true
          schema:
            type: string
        - name: failoverGroupName
          in: path
          description: The name of the failover group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified failover group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailoverGroup'
        default:
          description: "*** Error Responses: ***\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabases - The provided databases IDs are not properly constructed database resource IDs. For the example of proper formatting see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update failover group request body is empty or invalid. Please provide a valid value of this field. For examples of properly formatted requests see\_\r\nhttps://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the failover group. Please make sure the primary server and all of the given partner servers are unique.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabaseServer - One or more of the provided databases do not exist on the primary server of the failover group. Please make sure that all the databases exist on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner server for Failover Group is supported. Please modify your request accordingly. For examples of valid requests see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalid - The create or update failover group request body is empty or invalid.\n\n * 400 FailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the failover group are not allowed on a secondary server. Execute the request on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.\n\n * 400 FailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the failover group must be greater than or equal to the '{0}' minutes minimum grace period\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint. Please remove it from request.\n\n * 400 FailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update failover group request body should not modify the read-only property '{0}'.\n\n * 400 FailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of failover group.\n\n * 400 FailoverGroupPartnerServerFromDifferentSubscription - Primary server and the partner servers of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadOnlyEndpointTargetServer - The property targetServer of the read-only endpoint must be a valid server present among the partnerServers configured for the failover group.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCountForStandby - Only one partner server for Failover Group is supported for secondaryType standby. Please modify your request accordingly.\n\n * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.\n\n * 400 InvalidSku - The user specified an invalid sku.\n\n * 400 ServerNotFound - The requested server was not found.\n\n * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.\n\n * 400 TokenTooLong - The provided token is too long.\n\n * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.\n\n * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.\n\n * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.\n\n * 400 ResourcePoolNotFound - Specified elastic pool does not exist in the specified logical server.\n\n * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.\n\n * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.\n\n * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.\n\n * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.\n\n * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.\n\n * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. \n\n * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.\n\n * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.\n\n * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.\n\n * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.\n\n * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.\n\n * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.\n\n * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.\n\n * 400 InvalidFailoverGroupRegion - Servers specified in a Failover Group need to reside in different regions to provide isolation.\n\n * 400 FailoverGroupDoesNotExist - Failover group does not exist on a server.\n\n * 400 FailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a Failover Group.\n\n * 400 InvalidServerName - Invalid server name specified.\n\n * 400 DatabaseInFailoverGroupNotPrimary - GeoDR link for the database already exists, but its role is not 'Primary' or it is not continuous copy link.\n\n * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.\n\n * 400 UnableToCreateFailoverGroupDueToTableAuditing - Failover Group cannot be created for server that has table auditing turned on.\n\n * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.\n\n * 400 UnableToAddDbWithTableAuditingToFailoverGroup - Database with Table Auditing enabled will not be accessible through Failover Group endpoint.\n\n * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.\n\n * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.\n\n * 400 LimitOfFailoverGroupsPerServerExceeded - Creating new Failover Group will exceed the allowed number of Failover Groups per server.\n\n * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.\n\n * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.\n\n * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.\n\n * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.\n\n * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.\n\n * 400 FailoverGroupWithVirtualNetworkRulesNotSupported - Failover Groups configured with an automatic failover policy are currently not supported on servers configured with virtual network firewall rules. Please configure the failover group with manual failover policy.\n\n * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.\n\n * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.\n\n * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).\n\n * 404 ResourceNotFound - The requested resource was not found.\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.\n\n * 404 SourceDatabaseNotFound - The source database does not exist.\n\n * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.\n\n * 409 ConflictingServerOperation - An operation is currently in progress for the server.\n\n * 409 SubscriptionDisabled - Subscription is disabled.\n\n * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.\n\n * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.\n\n * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.\n\n * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.\n\n * 409 ServerKeyDoesNotExists - The server key does not exist.\n\n * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.\n\n * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.\n\n * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.\n\n * 409 FailoverGroupAlreadyExists - Failover group already exists on a given server. Please use different Failover Group name.\n\n * 409 FailoverGroupBusy - Failover Group is busy with another operation.\n\n * 409 DatabaseBelongsToOtherFailoverGroup - Database belongs to other Failover Group and cannot be consider a part of this one.\n\n * 409 DatabaseBeingAddedToFailoverGroup - The database is currently being added to Failover Group, customer needs to wait for this operation to finish to issue remove.\n\n * 409 DatabaseBeingRemovedFromFailoverGroup - The database is currently being removed from failover group, customer needs to wait for this operation to finish to issue add.\n\n * 409 FailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.\n\n * 409 InvalidFailoverGroupName - Invalid Failover Group name was supplied.\n\n * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.\n\n * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.\n\n * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.\n\n * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed\n\n * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .\n\n * 503 DatabaseUnavailable - The operation failed because the database is unavailable.\n\n * 504 RequestTimeout - Service request exceeded the allowed timeout."
    put:
      tags:
        - FailoverGroups
      description: Creates or updates a failover group.
      operationId: FailoverGroups_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server containing the failover group.
          required: true
          schema:
            type: string
        - name: failoverGroupName
          in: path
          description: The name of the failover group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The failover group parameters.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FailoverGroup'
      responses:
        '200':
          description: Successfully updated the failover group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailoverGroup'
        '201':
          description: Successfully created the failover group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailoverGroup'
        '202':
          description: Accepted
        default:
          description: "*** Error Responses: ***\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabases - The provided databases IDs are not properly constructed database resource IDs. For the example of proper formatting see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update failover group request body is empty or invalid. Please provide a valid value of this field. For examples of properly formatted requests see\_\r\nhttps://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the failover group. Please make sure the primary server and all of the given partner servers are unique.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabaseServer - One or more of the provided databases do not exist on the primary server of the failover group. Please make sure that all the databases exist on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner server for Failover Group is supported. Please modify your request accordingly. For examples of valid requests see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalid - The create or update failover group request body is empty or invalid.\n\n * 400 FailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the failover group are not allowed on a secondary server. Execute the request on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.\n\n * 400 FailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the failover group must be greater than or equal to the '{0}' minutes minimum grace period\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint. Please remove it from request.\n\n * 400 FailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update failover group request body should not modify the read-only property '{0}'.\n\n * 400 FailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of failover group.\n\n * 400 FailoverGroupPartnerServerFromDifferentSubscription - Primary server and the partner servers of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadOnlyEndpointTargetServer - The property targetServer of the read-only endpoint must be a valid server present among the partnerServers configured for the failover group.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCountForStandby - Only one partner server for Failover Group is supported for secondaryType standby. Please modify your request accordingly.\n\n * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.\n\n * 400 InvalidSku - The user specified an invalid sku.\n\n * 400 ServerNotFound - The requested server was not found.\n\n * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.\n\n * 400 TokenTooLong - The provided token is too long.\n\n * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.\n\n * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.\n\n * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.\n\n * 400 ResourcePoolNotFound - Specified elastic pool does not exist in the specified logical server.\n\n * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.\n\n * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.\n\n * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.\n\n * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.\n\n * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.\n\n * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. \n\n * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.\n\n * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.\n\n * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.\n\n * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.\n\n * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.\n\n * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.\n\n * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.\n\n * 400 InvalidFailoverGroupRegion - Servers specified in a Failover Group need to reside in different regions to provide isolation.\n\n * 400 FailoverGroupDoesNotExist - Failover group does not exist on a server.\n\n * 400 FailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a Failover Group.\n\n * 400 InvalidServerName - Invalid server name specified.\n\n * 400 DatabaseInFailoverGroupNotPrimary - GeoDR link for the database already exists, but its role is not 'Primary' or it is not continuous copy link.\n\n * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.\n\n * 400 UnableToCreateFailoverGroupDueToTableAuditing - Failover Group cannot be created for server that has table auditing turned on.\n\n * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.\n\n * 400 UnableToAddDbWithTableAuditingToFailoverGroup - Database with Table Auditing enabled will not be accessible through Failover Group endpoint.\n\n * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.\n\n * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.\n\n * 400 LimitOfFailoverGroupsPerServerExceeded - Creating new Failover Group will exceed the allowed number of Failover Groups per server.\n\n * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.\n\n * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.\n\n * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.\n\n * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.\n\n * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.\n\n * 400 FailoverGroupWithVirtualNetworkRulesNotSupported - Failover Groups configured with an automatic failover policy are currently not supported on servers configured with virtual network firewall rules. Please configure the failover group with manual failover policy.\n\n * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.\n\n * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.\n\n * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).\n\n * 400 FailoverGroupCreateOrUpdatePartiallySucceeded - Some databases could not be added or removed.\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 ResourceNotFound - The requested resource was not found.\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.\n\n * 404 SourceDatabaseNotFound - The source database does not exist.\n\n * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.\n\n * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.\n\n * 409 OperationCancelled - The operation has been cancelled by user.\n\n * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.\n\n * 409 ConflictingServerOperation - An operation is currently in progress for the server.\n\n * 409 SubscriptionDisabled - Subscription is disabled.\n\n * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.\n\n * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.\n\n * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.\n\n * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.\n\n * 409 ServerKeyDoesNotExists - The server key does not exist.\n\n * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.\n\n * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.\n\n * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.\n\n * 409 FailoverGroupAlreadyExists - Failover group already exists on a given server. Please use different Failover Group name.\n\n * 409 FailoverGroupBusy - Failover Group is busy with another operation.\n\n * 409 DatabaseBelongsToOtherFailoverGroup - Database belongs to other Failover Group and cannot be consider a part of this one.\n\n * 409 DatabaseBeingAddedToFailoverGroup - The database is currently being added to Failover Group, customer needs to wait for this operation to finish to issue remove.\n\n * 409 DatabaseBeingRemovedFromFailoverGroup - The database is currently being removed from failover group, customer needs to wait for this operation to finish to issue add.\n\n * 409 FailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.\n\n * 409 InvalidFailoverGroupName - Invalid Failover Group name was supplied.\n\n * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.\n\n * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.\n\n * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.\n\n * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.\n\n * 409 FailoverGroupUnableToPerformGroupOperationOnDatabases - The list of databases to add/remove to/from Failover Group contains errors that are preventing operation to complete.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed\n\n * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .\n\n * 503 DatabaseUnavailable - The operation failed because the database is unavailable.\n\n * 504 RequestTimeout - Service request exceeded the allowed timeout."
      x-ms-long-running-operation: true
    delete:
      tags:
        - FailoverGroups
      description: Deletes a failover group.
      operationId: FailoverGroups_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server containing the failover group.
          required: true
          schema:
            type: string
        - name: failoverGroupName
          in: path
          description: The name of the failover group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the failover group.
        '202':
          description: Accepted
        '204':
          description: The specified failover group does not exist.
        default:
          description: "*** Error Responses: ***\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabases - The provided databases IDs are not properly constructed database resource IDs. For the example of proper formatting see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update failover group request body is empty or invalid. Please provide a valid value of this field. For examples of properly formatted requests see\_\r\nhttps://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the failover group. Please make sure the primary server and all of the given partner servers are unique.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabaseServer - One or more of the provided databases do not exist on the primary server of the failover group. Please make sure that all the databases exist on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner server for Failover Group is supported. Please modify your request accordingly. For examples of valid requests see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalid - The create or update failover group request body is empty or invalid.\n\n * 400 FailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the failover group are not allowed on a secondary server. Execute the request on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.\n\n * 400 FailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the failover group must be greater than or equal to the '{0}' minutes minimum grace period\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint. Please remove it from request.\n\n * 400 FailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update failover group request body should not modify the read-only property '{0}'.\n\n * 400 FailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of failover group.\n\n * 400 FailoverGroupPartnerServerFromDifferentSubscription - Primary server and the partner servers of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadOnlyEndpointTargetServer - The property targetServer of the read-only endpoint must be a valid server present among the partnerServers configured for the failover group.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCountForStandby - Only one partner server for Failover Group is supported for secondaryType standby. Please modify your request accordingly.\n\n * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.\n\n * 400 InvalidSku - The user specified an invalid sku.\n\n * 400 ServerNotFound - The requested server was not found.\n\n * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.\n\n * 400 TokenTooLong - The provided token is too long.\n\n * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.\n\n * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.\n\n * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.\n\n * 400 ResourcePoolNotFound - Specified elastic pool does not exist in the specified logical server.\n\n * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.\n\n * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.\n\n * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.\n\n * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.\n\n * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.\n\n * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. \n\n * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.\n\n * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.\n\n * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.\n\n * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.\n\n * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.\n\n * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.\n\n * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.\n\n * 400 InvalidFailoverGroupRegion - Servers specified in a Failover Group need to reside in different regions to provide isolation.\n\n * 400 FailoverGroupDoesNotExist - Failover group does not exist on a server.\n\n * 400 FailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a Failover Group.\n\n * 400 InvalidServerName - Invalid server name specified.\n\n * 400 DatabaseInFailoverGroupNotPrimary - GeoDR link for the database already exists, but its role is not 'Primary' or it is not continuous copy link.\n\n * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.\n\n * 400 UnableToCreateFailoverGroupDueToTableAuditing - Failover Group cannot be created for server that has table auditing turned on.\n\n * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.\n\n * 400 UnableToAddDbWithTableAuditingToFailoverGroup - Database with Table Auditing enabled will not be accessible through Failover Group endpoint.\n\n * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.\n\n * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.\n\n * 400 LimitOfFailoverGroupsPerServerExceeded - Creating new Failover Group will exceed the allowed number of Failover Groups per server.\n\n * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.\n\n * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.\n\n * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.\n\n * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.\n\n * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.\n\n * 400 FailoverGroupWithVirtualNetworkRulesNotSupported - Failover Groups configured with an automatic failover policy are currently not supported on servers configured with virtual network firewall rules. Please configure the failover group with manual failover policy.\n\n * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.\n\n * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.\n\n * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 ResourceNotFound - The requested resource was not found.\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.\n\n * 404 SourceDatabaseNotFound - The source database does not exist.\n\n * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.\n\n * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.\n\n * 409 OperationCancelled - The operation has been cancelled by user.\n\n * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.\n\n * 409 ConflictingServerOperation - An operation is currently in progress for the server.\n\n * 409 SubscriptionDisabled - Subscription is disabled.\n\n * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.\n\n * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.\n\n * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.\n\n * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.\n\n * 409 ServerKeyDoesNotExists - The server key does not exist.\n\n * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.\n\n * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.\n\n * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.\n\n * 409 FailoverGroupAlreadyExists - Failover group already exists on a given server. Please use different Failover Group name.\n\n * 409 FailoverGroupBusy - Failover Group is busy with another operation.\n\n * 409 DatabaseBelongsToOtherFailoverGroup - Database belongs to other Failover Group and cannot be consider a part of this one.\n\n * 409 DatabaseBeingAddedToFailoverGroup - The database is currently being added to Failover Group, customer needs to wait for this operation to finish to issue remove.\n\n * 409 DatabaseBeingRemovedFromFailoverGroup - The database is currently being removed from failover group, customer needs to wait for this operation to finish to issue add.\n\n * 409 FailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.\n\n * 409 InvalidFailoverGroupName - Invalid Failover Group name was supplied.\n\n * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.\n\n * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.\n\n * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.\n\n * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed\n\n * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .\n\n * 503 DatabaseUnavailable - The operation failed because the database is unavailable.\n\n * 504 RequestTimeout - Service request exceeded the allowed timeout."
      x-ms-long-running-operation: true
    patch:
      tags:
        - FailoverGroups
      description: Updates a failover group.
      operationId: FailoverGroups_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server containing the failover group.
          required: true
          schema:
            type: string
        - name: failoverGroupName
          in: path
          description: The name of the failover group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The failover group parameters.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FailoverGroupUpdate'
      responses:
        '200':
          description: Successfully updated the failover group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailoverGroup'
        '202':
          description: Accepted
        default:
          description: "*** Error Responses: ***\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabases - The provided databases IDs are not properly constructed database resource IDs. For the example of proper formatting see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update failover group request body is empty or invalid. Please provide a valid value of this field. For examples of properly formatted requests see\_\r\nhttps://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the failover group. Please make sure the primary server and all of the given partner servers are unique.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabaseServer - One or more of the provided databases do not exist on the primary server of the failover group. Please make sure that all the databases exist on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner server for Failover Group is supported. Please modify your request accordingly. For examples of valid requests see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalid - The create or update failover group request body is empty or invalid.\n\n * 400 FailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the failover group are not allowed on a secondary server. Execute the request on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.\n\n * 400 FailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the failover group must be greater than or equal to the '{0}' minutes minimum grace period\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint. Please remove it from request.\n\n * 400 FailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update failover group request body should not modify the read-only property '{0}'.\n\n * 400 FailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of failover group.\n\n * 400 FailoverGroupPartnerServerFromDifferentSubscription - Primary server and the partner servers of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadOnlyEndpointTargetServer - The property targetServer of the read-only endpoint must be a valid server present among the partnerServers configured for the failover group.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCountForStandby - Only one partner server for Failover Group is supported for secondaryType standby. Please modify your request accordingly.\n\n * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.\n\n * 400 InvalidSku - The user specified an invalid sku.\n\n * 400 ServerNotFound - The requested server was not found.\n\n * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.\n\n * 400 TokenTooLong - The provided token is too long.\n\n * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.\n\n * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.\n\n * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.\n\n * 400 ResourcePoolNotFound - Specified elastic pool does not exist in the specified logical server.\n\n * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.\n\n * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.\n\n * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.\n\n * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.\n\n * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.\n\n * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. \n\n * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.\n\n * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.\n\n * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.\n\n * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.\n\n * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.\n\n * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.\n\n * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.\n\n * 400 InvalidFailoverGroupRegion - Servers specified in a Failover Group need to reside in different regions to provide isolation.\n\n * 400 FailoverGroupDoesNotExist - Failover group does not exist on a server.\n\n * 400 FailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a Failover Group.\n\n * 400 InvalidServerName - Invalid server name specified.\n\n * 400 DatabaseInFailoverGroupNotPrimary - GeoDR link for the database already exists, but its role is not 'Primary' or it is not continuous copy link.\n\n * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.\n\n * 400 UnableToCreateFailoverGroupDueToTableAuditing - Failover Group cannot be created for server that has table auditing turned on.\n\n * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.\n\n * 400 UnableToAddDbWithTableAuditingToFailoverGroup - Database with Table Auditing enabled will not be accessible through Failover Group endpoint.\n\n * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.\n\n * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.\n\n * 400 LimitOfFailoverGroupsPerServerExceeded - Creating new Failover Group will exceed the allowed number of Failover Groups per server.\n\n * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.\n\n * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.\n\n * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.\n\n * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.\n\n * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.\n\n * 400 FailoverGroupWithVirtualNetworkRulesNotSupported - Failover Groups configured with an automatic failover policy are currently not supported on servers configured with virtual network firewall rules. Please configure the failover group with manual failover policy.\n\n * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.\n\n * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.\n\n * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).\n\n * 400 FailoverGroupCreateOrUpdatePartiallySucceeded - Some databases could not be added or removed.\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 ResourceNotFound - The requested resource was not found.\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.\n\n * 404 SourceDatabaseNotFound - The source database does not exist.\n\n * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.\n\n * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.\n\n * 409 OperationCancelled - The operation has been cancelled by user.\n\n * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.\n\n * 409 ConflictingServerOperation - An operation is currently in progress for the server.\n\n * 409 SubscriptionDisabled - Subscription is disabled.\n\n * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.\n\n * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.\n\n * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.\n\n * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.\n\n * 409 ServerKeyDoesNotExists - The server key does not exist.\n\n * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.\n\n * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.\n\n * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.\n\n * 409 FailoverGroupAlreadyExists - Failover group already exists on a given server. Please use different Failover Group name.\n\n * 409 FailoverGroupBusy - Failover Group is busy with another operation.\n\n * 409 DatabaseBelongsToOtherFailoverGroup - Database belongs to other Failover Group and cannot be consider a part of this one.\n\n * 409 DatabaseBeingAddedToFailoverGroup - The database is currently being added to Failover Group, customer needs to wait for this operation to finish to issue remove.\n\n * 409 DatabaseBeingRemovedFromFailoverGroup - The database is currently being removed from failover group, customer needs to wait for this operation to finish to issue add.\n\n * 409 FailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.\n\n * 409 InvalidFailoverGroupName - Invalid Failover Group name was supplied.\n\n * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.\n\n * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.\n\n * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.\n\n * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.\n\n * 409 FailoverGroupUnableToPerformGroupOperationOnDatabases - The list of databases to add/remove to/from Failover Group contains errors that are preventing operation to complete.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed\n\n * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .\n\n * 503 DatabaseUnavailable - The operation failed because the database is unavailable.\n\n * 504 RequestTimeout - Service request exceeded the allowed timeout."
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}/failover?api-version=2023-05-01-preview:
    post:
      tags:
        - FailoverGroups
      description: Fails over from the current primary server to this server.
      operationId: FailoverGroups_Failover
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server containing the failover group.
          required: true
          schema:
            type: string
        - name: failoverGroupName
          in: path
          description: The name of the failover group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully failed over.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailoverGroup'
        '202':
          description: Accepted
        default:
          description: "*** Error Responses: ***\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabases - The provided databases IDs are not properly constructed database resource IDs. For the example of proper formatting see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update failover group request body is empty or invalid. Please provide a valid value of this field. For examples of properly formatted requests see\_\r\nhttps://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the failover group. Please make sure the primary server and all of the given partner servers are unique.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabaseServer - One or more of the provided databases do not exist on the primary server of the failover group. Please make sure that all the databases exist on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner server for Failover Group is supported. Please modify your request accordingly. For examples of valid requests see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalid - The create or update failover group request body is empty or invalid.\n\n * 400 FailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the failover group are not allowed on a secondary server. Execute the request on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.\n\n * 400 FailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the failover group must be greater than or equal to the '{0}' minutes minimum grace period\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint. Please remove it from request.\n\n * 400 FailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update failover group request body should not modify the read-only property '{0}'.\n\n * 400 FailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of failover group.\n\n * 400 FailoverGroupPartnerServerFromDifferentSubscription - Primary server and the partner servers of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadOnlyEndpointTargetServer - The property targetServer of the read-only endpoint must be a valid server present among the partnerServers configured for the failover group.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCountForStandby - Only one partner server for Failover Group is supported for secondaryType standby. Please modify your request accordingly.\n\n * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.\n\n * 400 InvalidSku - The user specified an invalid sku.\n\n * 400 ServerNotFound - The requested server was not found.\n\n * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.\n\n * 400 TokenTooLong - The provided token is too long.\n\n * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.\n\n * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.\n\n * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.\n\n * 400 ResourcePoolNotFound - Specified elastic pool does not exist in the specified logical server.\n\n * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.\n\n * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.\n\n * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.\n\n * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.\n\n * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.\n\n * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. \n\n * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.\n\n * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.\n\n * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.\n\n * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.\n\n * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.\n\n * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.\n\n * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.\n\n * 400 InvalidFailoverGroupRegion - Servers specified in a Failover Group need to reside in different regions to provide isolation.\n\n * 400 FailoverGroupDoesNotExist - Failover group does not exist on a server.\n\n * 400 FailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a Failover Group.\n\n * 400 InvalidServerName - Invalid server name specified.\n\n * 400 DatabaseInFailoverGroupNotPrimary - GeoDR link for the database already exists, but its role is not 'Primary' or it is not continuous copy link.\n\n * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.\n\n * 400 UnableToCreateFailoverGroupDueToTableAuditing - Failover Group cannot be created for server that has table auditing turned on.\n\n * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.\n\n * 400 UnableToAddDbWithTableAuditingToFailoverGroup - Database with Table Auditing enabled will not be accessible through Failover Group endpoint.\n\n * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.\n\n * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.\n\n * 400 LimitOfFailoverGroupsPerServerExceeded - Creating new Failover Group will exceed the allowed number of Failover Groups per server.\n\n * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.\n\n * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.\n\n * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.\n\n * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.\n\n * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.\n\n * 400 FailoverGroupWithVirtualNetworkRulesNotSupported - Failover Groups configured with an automatic failover policy are currently not supported on servers configured with virtual network firewall rules. Please configure the failover group with manual failover policy.\n\n * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.\n\n * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.\n\n * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 ResourceNotFound - The requested resource was not found.\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.\n\n * 404 SourceDatabaseNotFound - The source database does not exist.\n\n * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.\n\n * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.\n\n * 409 OperationCancelled - The operation has been cancelled by user.\n\n * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.\n\n * 409 ConflictingServerOperation - An operation is currently in progress for the server.\n\n * 409 SubscriptionDisabled - Subscription is disabled.\n\n * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.\n\n * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.\n\n * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.\n\n * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.\n\n * 409 ServerKeyDoesNotExists - The server key does not exist.\n\n * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.\n\n * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.\n\n * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.\n\n * 409 FailoverGroupAlreadyExists - Failover group already exists on a given server. Please use different Failover Group name.\n\n * 409 FailoverGroupBusy - Failover Group is busy with another operation.\n\n * 409 DatabaseBelongsToOtherFailoverGroup - Database belongs to other Failover Group and cannot be consider a part of this one.\n\n * 409 DatabaseBeingAddedToFailoverGroup - The database is currently being added to Failover Group, customer needs to wait for this operation to finish to issue remove.\n\n * 409 DatabaseBeingRemovedFromFailoverGroup - The database is currently being removed from failover group, customer needs to wait for this operation to finish to issue add.\n\n * 409 FailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.\n\n * 409 InvalidFailoverGroupName - Invalid Failover Group name was supplied.\n\n * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.\n\n * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.\n\n * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.\n\n * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed\n\n * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .\n\n * 503 DatabaseUnavailable - The operation failed because the database is unavailable.\n\n * 504 RequestTimeout - Service request exceeded the allowed timeout."
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}/forceFailoverAllowDataLoss?api-version=2023-05-01-preview:
    post:
      tags:
        - FailoverGroups
      description: Fails over from the current primary server to this server. This operation might result in data loss.
      operationId: FailoverGroups_ForceFailoverAllowDataLoss
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server containing the failover group.
          required: true
          schema:
            type: string
        - name: failoverGroupName
          in: path
          description: The name of the failover group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully failed over.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailoverGroup'
        '202':
          description: Accepted
        default:
          description: "*** Error Responses: ***\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabases - The provided databases IDs are not properly constructed database resource IDs. For the example of proper formatting see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update failover group request body is empty or invalid. Please provide a valid value of this field. For examples of properly formatted requests see\_\r\nhttps://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the failover group. Please make sure the primary server and all of the given partner servers are unique.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabaseServer - One or more of the provided databases do not exist on the primary server of the failover group. Please make sure that all the databases exist on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner server for Failover Group is supported. Please modify your request accordingly. For examples of valid requests see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalid - The create or update failover group request body is empty or invalid.\n\n * 400 FailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the failover group are not allowed on a secondary server. Execute the request on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.\n\n * 400 FailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the failover group must be greater than or equal to the '{0}' minutes minimum grace period\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint. Please remove it from request.\n\n * 400 FailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update failover group request body should not modify the read-only property '{0}'.\n\n * 400 FailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of failover group.\n\n * 400 FailoverGroupPartnerServerFromDifferentSubscription - Primary server and the partner servers of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadOnlyEndpointTargetServer - The property targetServer of the read-only endpoint must be a valid server present among the partnerServers configured for the failover group.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCountForStandby - Only one partner server for Failover Group is supported for secondaryType standby. Please modify your request accordingly.\n\n * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.\n\n * 400 InvalidSku - The user specified an invalid sku.\n\n * 400 ServerNotFound - The requested server was not found.\n\n * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.\n\n * 400 TokenTooLong - The provided token is too long.\n\n * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.\n\n * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.\n\n * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.\n\n * 400 ResourcePoolNotFound - Specified elastic pool does not exist in the specified logical server.\n\n * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.\n\n * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.\n\n * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.\n\n * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.\n\n * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.\n\n * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. \n\n * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.\n\n * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.\n\n * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.\n\n * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.\n\n * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.\n\n * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.\n\n * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.\n\n * 400 InvalidFailoverGroupRegion - Servers specified in a Failover Group need to reside in different regions to provide isolation.\n\n * 400 FailoverGroupDoesNotExist - Failover group does not exist on a server.\n\n * 400 FailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a Failover Group.\n\n * 400 InvalidServerName - Invalid server name specified.\n\n * 400 DatabaseInFailoverGroupNotPrimary - GeoDR link for the database already exists, but its role is not 'Primary' or it is not continuous copy link.\n\n * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.\n\n * 400 UnableToCreateFailoverGroupDueToTableAuditing - Failover Group cannot be created for server that has table auditing turned on.\n\n * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.\n\n * 400 UnableToAddDbWithTableAuditingToFailoverGroup - Database with Table Auditing enabled will not be accessible through Failover Group endpoint.\n\n * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.\n\n * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.\n\n * 400 LimitOfFailoverGroupsPerServerExceeded - Creating new Failover Group will exceed the allowed number of Failover Groups per server.\n\n * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.\n\n * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.\n\n * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.\n\n * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.\n\n * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.\n\n * 400 FailoverGroupWithVirtualNetworkRulesNotSupported - Failover Groups configured with an automatic failover policy are currently not supported on servers configured with virtual network firewall rules. Please configure the failover group with manual failover policy.\n\n * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.\n\n * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.\n\n * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 ResourceNotFound - The requested resource was not found.\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.\n\n * 404 SourceDatabaseNotFound - The source database does not exist.\n\n * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.\n\n * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.\n\n * 409 OperationCancelled - The operation has been cancelled by user.\n\n * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.\n\n * 409 ConflictingServerOperation - An operation is currently in progress for the server.\n\n * 409 SubscriptionDisabled - Subscription is disabled.\n\n * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.\n\n * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.\n\n * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.\n\n * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.\n\n * 409 ServerKeyDoesNotExists - The server key does not exist.\n\n * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.\n\n * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.\n\n * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.\n\n * 409 FailoverGroupAlreadyExists - Failover group already exists on a given server. Please use different Failover Group name.\n\n * 409 FailoverGroupBusy - Failover Group is busy with another operation.\n\n * 409 DatabaseBelongsToOtherFailoverGroup - Database belongs to other Failover Group and cannot be consider a part of this one.\n\n * 409 DatabaseBeingAddedToFailoverGroup - The database is currently being added to Failover Group, customer needs to wait for this operation to finish to issue remove.\n\n * 409 DatabaseBeingRemovedFromFailoverGroup - The database is currently being removed from failover group, customer needs to wait for this operation to finish to issue add.\n\n * 409 FailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.\n\n * 409 InvalidFailoverGroupName - Invalid Failover Group name was supplied.\n\n * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.\n\n * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.\n\n * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.\n\n * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed\n\n * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .\n\n * 503 DatabaseUnavailable - The operation failed because the database is unavailable.\n\n * 504 RequestTimeout - Service request exceeded the allowed timeout."
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/failoverGroups/{failoverGroupName}/tryPlannedBeforeForcedFailover?api-version=2023-05-01-preview:
    post:
      tags:
        - FailoverGroups
      description: Fails over from the current primary server to this server. This operation tries planned before forced failover but might still result in data loss.
      operationId: FailoverGroups_TryPlannedBeforeForcedFailover
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: failoverGroupName
          in: path
          description: The name of the failover group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully failed over.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailoverGroup'
        '202':
          description: Accepted
          headers:
            Location:
              schema:
                type: string
        default:
          description: "*** Error Responses: ***\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabases - The provided databases IDs are not properly constructed database resource IDs. For the example of proper formatting see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update failover group request body is empty or invalid. Please provide a valid value of this field. For examples of properly formatted requests see\_\r\nhttps://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the failover group. Please make sure the primary server and all of the given partner servers are unique.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidDatabaseServer - One or more of the provided databases do not exist on the primary server of the failover group. Please make sure that all the databases exist on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner server for Failover Group is supported. Please modify your request accordingly. For examples of valid requests see https://docs.microsoft.com/en-us/rest/api/sql/failovergroups/createorupdate \n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalid - The create or update failover group request body is empty or invalid.\n\n * 400 FailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the failover group are not allowed on a secondary server. Execute the request on the primary server.\n\n * 400 FailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.\n\n * 400 FailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the failover group must be greater than or equal to the '{0}' minutes minimum grace period\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint. Please remove it from request.\n\n * 400 FailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update failover group request body should not modify the read-only property '{0}'.\n\n * 400 FailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of failover group.\n\n * 400 FailoverGroupPartnerServerFromDifferentSubscription - Primary server and the partner servers of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.\n\n * 400 FailoverGroupCreateOrUpdateRequestInvalidReadOnlyEndpointTargetServer - The property targetServer of the read-only endpoint must be a valid server present among the partnerServers configured for the failover group.\n\n * 400 FailoverGroupCreateOrUpdateRequestUnsupportedPartnerCountForStandby - Only one partner server for Failover Group is supported for secondaryType standby. Please modify your request accordingly.\n\n * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.\n\n * 400 InvalidSku - The user specified an invalid sku.\n\n * 400 ServerNotFound - The requested server was not found.\n\n * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.\n\n * 400 TokenTooLong - The provided token is too long.\n\n * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.\n\n * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.\n\n * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.\n\n * 400 ResourcePoolNotFound - Specified elastic pool does not exist in the specified logical server.\n\n * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.\n\n * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.\n\n * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.\n\n * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.\n\n * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.\n\n * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. \n\n * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.\n\n * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.\n\n * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.\n\n * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.\n\n * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.\n\n * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.\n\n * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.\n\n * 400 InvalidFailoverGroupRegion - Servers specified in a Failover Group need to reside in different regions to provide isolation.\n\n * 400 FailoverGroupDoesNotExist - Failover group does not exist on a server.\n\n * 400 FailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a Failover Group.\n\n * 400 InvalidServerName - Invalid server name specified.\n\n * 400 DatabaseInFailoverGroupNotPrimary - GeoDR link for the database already exists, but its role is not 'Primary' or it is not continuous copy link.\n\n * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.\n\n * 400 UnableToCreateFailoverGroupDueToTableAuditing - Failover Group cannot be created for server that has table auditing turned on.\n\n * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.\n\n * 400 UnableToAddDbWithTableAuditingToFailoverGroup - Database with Table Auditing enabled will not be accessible through Failover Group endpoint.\n\n * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.\n\n * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.\n\n * 400 LimitOfFailoverGroupsPerServerExceeded - Creating new Failover Group will exceed the allowed number of Failover Groups per server.\n\n * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.\n\n * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.\n\n * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.\n\n * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.\n\n * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.\n\n * 400 FailoverGroupWithVirtualNetworkRulesNotSupported - Failover Groups configured with an automatic failover policy are currently not supported on servers configured with virtual network firewall rules. Please configure the failover group with manual failover policy.\n\n * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.\n\n * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.\n\n * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 ResourceNotFound - The requested resource was not found.\n\n * 404 OperationIdNotFound - The operation with Id does not exist.\n\n * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.\n\n * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.\n\n * 404 SourceDatabaseNotFound - The source database does not exist.\n\n * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.\n\n * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.\n\n * 409 OperationCancelled - The operation has been cancelled by user.\n\n * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.\n\n * 409 ConflictingServerOperation - An operation is currently in progress for the server.\n\n * 409 SubscriptionDisabled - Subscription is disabled.\n\n * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.\n\n * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.\n\n * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.\n\n * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.\n\n * 409 ServerKeyDoesNotExists - The server key does not exist.\n\n * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.\n\n * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.\n\n * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.\n\n * 409 FailoverGroupAlreadyExists - Failover group already exists on a given server. Please use different Failover Group name.\n\n * 409 FailoverGroupBusy - Failover Group is busy with another operation.\n\n * 409 DatabaseBelongsToOtherFailoverGroup - Database belongs to other Failover Group and cannot be consider a part of this one.\n\n * 409 DatabaseBeingAddedToFailoverGroup - The database is currently being added to Failover Group, customer needs to wait for this operation to finish to issue remove.\n\n * 409 DatabaseBeingRemovedFromFailoverGroup - The database is currently being removed from failover group, customer needs to wait for this operation to finish to issue add.\n\n * 409 FailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.\n\n * 409 InvalidFailoverGroupName - Invalid Failover Group name was supplied.\n\n * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.\n\n * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.\n\n * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.\n\n * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.\n\n * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.\n\n * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed\n\n * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .\n\n * 503 DatabaseUnavailable - The operation failed because the database is unavailable.\n\n * 504 RequestTimeout - Service request exceeded the allowed timeout."
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/columns?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseColumns
      description: List database columns
      operationId: DatabaseColumns_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schema
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: table
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: column
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: orderBy
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: $skiptoken
          in: query
          description: An opaque token that identifies a starting point in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved database columns.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseColumnListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UnsupportedColumnOrderByProperty - The order-by property '{0}' is not supported. Allowed properties are: {1}.

             * 400 UnsupportedColumnSortDirection - The column sort direction '{0}' is not supported. Allowed values are: {1}.

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseColumns
      description: List database columns
      operationId: DatabaseColumns_ListByTable
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved database columns.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseColumnListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InvalidDatabaseSchema - Schema is missing in database.

             * 404 InvalidDatabaseTable - Table is missing in database.

             * 404 InvalidDatabaseColumn - Column is missing in table.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
      x-ms-odata: '#/components/schemas/DatabaseColumn'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseColumns
      description: Get database column
      operationId: DatabaseColumns_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: columnName
          in: path
          description: The name of the column.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved database column.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseColumn'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InvalidDatabaseSchema - Schema is missing in database.

             * 404 InvalidDatabaseTable - Table is missing in database.

             * 404 InvalidDatabaseColumn - Column is missing in table.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseTables
      description: List managed database tables
      operationId: ManagedDatabaseTables_ListBySchema
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved managed database tables.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseTableListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InvalidDatabaseSchema - Schema is missing in database.

             * 404 InvalidDatabaseTable - Table is missing in database.

             * 404 InvalidDatabaseColumn - Column is missing in table.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
      x-ms-odata: '#/components/schemas/DatabaseTable'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseTables
      description: Get managed database table
      operationId: ManagedDatabaseTables_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved managed database table.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseTable'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InvalidDatabaseSchema - Schema is missing in database.

             * 404 InvalidDatabaseTable - Table is missing in database.

             * 404 InvalidDatabaseColumn - Column is missing in table.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/columns?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseColumns
      description: List managed database columns
      operationId: ManagedDatabaseColumns_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schema
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: table
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: column
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: orderBy
          in: query
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: $skiptoken
          in: query
          description: An opaque token that identifies a starting point in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved database columns.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseColumnListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UnsupportedColumnOrderByProperty - The order-by property '{0}' is not supported. Allowed properties are: {1}.

             * 400 UnsupportedColumnSortDirection - The column sort direction '{0}' is not supported. Allowed values are: {1}.

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseColumns
      description: List managed database columns
      operationId: ManagedDatabaseColumns_ListByTable
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved managed database columns.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseColumnListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InvalidDatabaseSchema - Schema is missing in database.

             * 404 InvalidDatabaseTable - Table is missing in database.

             * 404 InvalidDatabaseColumn - Column is missing in table.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
      x-ms-odata: '#/components/schemas/DatabaseColumn'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseColumns
      description: Get managed database column
      operationId: ManagedDatabaseColumns_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: columnName
          in: path
          description: The name of the column.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved managed database column.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseColumn'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InvalidDatabaseSchema - Schema is missing in database.

             * 404 InvalidDatabaseTable - Table is missing in database.

             * 404 InvalidDatabaseColumn - Column is missing in table.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/geoBackupPolicies/{geoBackupPolicyName}?api-version=2014-04-01:
    put:
      tags:
        - GeoBackupPolicies
      operationId: GeoBackupPolicies_CreateOrUpdate
      description: Updates a database geo backup policy.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/GeoBackupPolicyNameParameter'
      requestBody:
        description: The required parameters for creating or updating the geo backup policy.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeoBackupPolicy'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoBackupPolicy'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoBackupPolicy'
    get:
      tags:
        - GeoBackupPolicies
      operationId: GeoBackupPolicies_Get
      description: Gets a geo backup policy.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/GeoBackupPolicyNameParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoBackupPolicy'
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/geoBackupPolicies?api-version=2014-04-01:
    get:
      tags:
        - GeoBackupPolicies
      operationId: GeoBackupPolicies_ListByDatabase
      description: Returns a list of geo backup policies.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoBackupPolicyListResult'
      x-ms-pageable:
        nextLinkName: null
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/targetGroups?api-version=2020-11-01-preview:
    get:
      tags:
        - JobTargetGroups
      description: Gets all target groups in an agent.
      operationId: JobTargetGroups_ListByAgent
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of target groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobTargetGroupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/targetGroups/{targetGroupName}?api-version=2020-11-01-preview:
    get:
      tags:
        - JobTargetGroups
      description: Gets a target group.
      operationId: JobTargetGroups_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: targetGroupName
          in: path
          description: The name of the target group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the target group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobTargetGroup'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - JobTargetGroups
      description: Creates or updates a target group.
      operationId: JobTargetGroups_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: targetGroupName
          in: path
          description: The name of the target group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested state of the target group.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobTargetGroup'
      responses:
        '200':
          description: Successfully updated the target group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobTargetGroup'
        '201':
          description: Successfully created the target group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobTargetGroup'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 MismatchingJobAccountNameWithUrl - The provided job account name did not match the name in the Url.

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
    delete:
      tags:
        - JobTargetGroups
      description: Deletes a target group.
      operationId: JobTargetGroups_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: targetGroupName
          in: path
          description: The name of the target group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the target group.
        '204':
          description: A target group with the specified name does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/restorableDroppedDatabases/{restorableDroppedDatabaseId}/backupShortTermRetentionPolicies/{policyName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies
      description: Gets a dropped database's short term retention policy.
      operationId: ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: restorableDroppedDatabaseId
          in: path
          required: true
          schema:
            type: string
        - name: policyName
          in: path
          description: The policy name.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: ManagedShortTermRetentionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies
      description: Sets a database's short term retention policy.
      operationId: ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: restorableDroppedDatabaseId
          in: path
          required: true
          schema:
            type: string
        - name: policyName
          in: path
          description: The policy name. Should always be "default".
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: ManagedShortTermRetentionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The short term retention policy info.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicy'
      responses:
        '200':
          description: Successfully updated the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicy'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    patch:
      tags:
        - ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies
      description: Sets a database's short term retention policy.
      operationId: ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: restorableDroppedDatabaseId
          in: path
          required: true
          schema:
            type: string
        - name: policyName
          in: path
          description: The policy name. Should always be "default".
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: ManagedShortTermRetentionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The short term retention policy info.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicy'
      responses:
        '200':
          description: Successfully updated the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicy'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/restorableDroppedDatabases/{restorableDroppedDatabaseId}/backupShortTermRetentionPolicies?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies
      description: Gets a dropped database's short term retention policy list.
      operationId: ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies_ListByRestorableDroppedDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: restorableDroppedDatabaseId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseVulnerabilityAssesmentRuleBaselines
      description: Gets a database's vulnerability assessment rule baseline.
      operationId: DatabaseVulnerabilityAssessmentRuleBaselines_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment rule baseline is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: ruleId
          in: path
          description: The vulnerability assessment rule ID.
          required: true
          schema:
            type: string
        - name: baselineName
          in: path
          description: The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
          required: true
          schema:
            enum:
              - master
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentPolicyBaselineName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully got the vulnerability assessment rule baseline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentRuleBaseline'
        default:
          description: |-
            *** Error Responses: ***

             * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account '{0}' .

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account '{0}' that was defined in the policy is invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule '{0}' does not exist.

             * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule '{0}'

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    put:
      tags:
        - DatabaseVulnerabilityAssesmentRuleBaselines
      description: Creates or updates a database's vulnerability assessment rule baseline.
      operationId: DatabaseVulnerabilityAssessmentRuleBaselines_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment rule baseline is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: ruleId
          in: path
          description: The vulnerability assessment rule ID.
          required: true
          schema:
            type: string
        - name: baselineName
          in: path
          description: The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
          required: true
          schema:
            enum:
              - master
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentPolicyBaselineName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested rule baseline resource.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentRuleBaseline'
      responses:
        '200':
          description: Successfully set the vulnerability assessment rule baseline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentRuleBaseline'
        default:
          description: |-
            *** Error Responses: ***

             * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account '{0}' .

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account '{0}' that was defined in the policy is invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule '{0}' does not exist.

             * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule '{0}'

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    delete:
      tags:
        - DatabaseVulnerabilityAssesmentRuleBaselines
      description: Removes the database's vulnerability assessment rule baseline.
      operationId: DatabaseVulnerabilityAssessmentRuleBaselines_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment rule baseline is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: ruleId
          in: path
          description: The vulnerability assessment rule ID.
          required: true
          schema:
            type: string
        - name: baselineName
          in: path
          description: The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
          required: true
          schema:
            enum:
              - master
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentPolicyBaselineName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully removed the database vulnerability assessment rule baseline.
        default:
          description: |-
            *** Error Responses: ***

             * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account '{0}' .

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account '{0}' that was defined in the policy is invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule '{0}' does not exist.

             * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule '{0}'

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/virtualNetworkRules/{virtualNetworkRuleName}?api-version=2020-11-01-preview:
    get:
      tags:
        - VirtualNetworkRules
      description: Gets a virtual network rule.
      operationId: VirtualNetworkRules_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: virtualNetworkRuleName
          in: path
          description: The name of the virtual network rule.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved a specified virtual network rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualNetworkRule'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - VirtualNetworkRules
      description: Creates or updates an existing virtual network rule.
      operationId: VirtualNetworkRules_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: virtualNetworkRuleName
          in: path
          description: The name of the virtual network rule.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested virtual Network Rule Resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualNetworkRule'
      responses:
        '200':
          description: Successfully updated a virtual network rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualNetworkRule'
        '201':
          description: Successfully created a virtual network rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualNetworkRule'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 NullVirtualNetworkRequest - Virtual Network Request is Null

             * 400 NullVirtualNetworkRequestParameters - Virtual Network Request Parameters are Null

             * 400 FirewallChangesDeniedBecausePublicEndpointDisabled - Unable to create or modify firewall rules when public network access for the server is disabled. (https://docs.microsoft.com/en-us/azure/azure-sql/database/connectivity-settings#deny-public-network-access)

             * 400 VirtualNetworkRuleBadRequest - Azure SQL Server Virtual Network Rule encountered an user error

             * 400 VirtualNetworkRuleWithFailoverGroupsNotSupported - Virtual network firewall rules are not currently supported on servers with failover groups configured with automatic failover policy. Please configure the failover groups on the server with manual failover policy.

             * 400 NullVirtualNetworkSubnetId - The Virtual Network Subnet Id is null

             * 403 VirtualNetworkRuleAccessDenied - Azure SQL Server Virtual Network Rule encountered permissions error

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 VirtualNetworkRuleNotEnabled - Azure SQL Server Virtual Network Rule feature is not enabled

             * 404 VirtualNetworkRuleResourceNotFound - Azure SQL Server Virtual Network Rule encountered a resource not found error

             * 404 VirtualNetworkRuleSubscriptionNotFound - Azure SQL Server Virtual Network Subscription id not found or is in disabled state 

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 504 VirtualNetworkRuleTimedOut - Azure SQL Server Virtual Network Rule encountered a timeout
      x-ms-long-running-operation: true
    delete:
      tags:
        - VirtualNetworkRules
      description: Deletes the virtual network rule with the given name.
      operationId: VirtualNetworkRules_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: virtualNetworkRuleName
          in: path
          description: The name of the virtual network rule.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the virtual network rule.
        '202':
          description: Accepted
        '204':
          description: The specified virtual network rule does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 NullVirtualNetworkRequest - Virtual Network Request is Null

             * 400 NullVirtualNetworkRequestParameters - Virtual Network Request Parameters are Null

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/virtualNetworkRules?api-version=2020-11-01-preview:
    get:
      tags:
        - VirtualNetworkRules
      description: Gets a list of virtual network rules in a server.
      operationId: VirtualNetworkRules_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of virtual network rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualNetworkRuleListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}?api-version=2021-02-01-preview:
    get:
      tags:
        - BackupShortTermRetentionPolicies
      description: Gets a database's short term retention policy.
      operationId: BackupShortTermRetentionPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: policyName
          in: path
          description: The policy name. Should always be "default".
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: ShortTermRetentionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupShortTermRetentionPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - BackupShortTermRetentionPolicies
      description: Updates a database's short term retention policy.
      operationId: BackupShortTermRetentionPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: policyName
          in: path
          description: The policy name. Should always be "default".
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: ShortTermRetentionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The short term retention policy info.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackupShortTermRetentionPolicy'
      responses:
        '200':
          description: Successfully updated the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupShortTermRetentionPolicy'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 InvalidDiffBackupIntervalHours - The differential backup interval hours of {0} is not a valid configuration. Valid differential backup interval must be {1} hours.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    patch:
      tags:
        - BackupShortTermRetentionPolicies
      description: Updates a database's short term retention policy.
      operationId: BackupShortTermRetentionPolicies_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: policyName
          in: path
          description: The policy name. Should always be "default".
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: ShortTermRetentionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The short term retention policy info.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackupShortTermRetentionPolicy'
      responses:
        '200':
          description: Successfully updated the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupShortTermRetentionPolicy'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 InvalidDiffBackupIntervalHours - The differential backup interval hours of {0} is not a valid configuration. Valid differential backup interval must be {1} hours.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupShortTermRetentionPolicies?api-version=2021-02-01-preview:
    get:
      tags:
        - BackupShortTermRetentionPolicies
      description: Gets a database's short term retention policy.
      operationId: BackupShortTermRetentionPolicies_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackupShortTermRetentionPolicyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/elasticPoolActivity?api-version=2014-04-01:
    get:
      tags:
        - ElasticPools
      operationId: ElasticPoolActivities_ListByElasticPool
      description: Returns elastic pool activities.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: elasticPoolName
          in: path
          description: The name of the elastic pool for which to get the current activity.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElasticPoolActivityListResult'
      x-ms-pageable:
        nextLinkName: null
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/elasticPoolDatabaseActivity?api-version=2014-04-01:
    get:
      tags:
        - ElasticPools
      operationId: ElasticPoolDatabaseActivities_ListByElasticPool
      description: Returns activity on databases inside of an elastic pool.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: elasticPoolName
          in: path
          description: The name of the elastic pool.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElasticPoolDatabaseActivityListResult'
      x-ms-pageable:
        nextLinkName: null
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages?api-version=2020-11-01-preview:
    get:
      tags:
        - SubscriptionUsages
      description: Gets all subscription usage metrics in a given location.
      operationId: SubscriptionUsages_ListByLocation
      parameters:
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the subscription location usages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionUsageListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidLocation - An invalid location was specified.

             * 400 SubscriptionNotFound - The requested subscription was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/usages/{usageName}?api-version=2020-11-01-preview:
    get:
      tags:
        - SubscriptionUsages
      description: Gets a subscription usage metric.
      operationId: SubscriptionUsages_Get
      parameters:
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - name: usageName
          in: path
          description: Name of usage metric to return.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved particular subscription location usage.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionUsage'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidLocation - An invalid location was specified.

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 404 ResourceNotFound - The requested resource was not found.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataWarehouseUserActivities/{dataWarehouseUserActivityName}?api-version=2020-11-01-preview:
    get:
      tags:
        - DataWarehouseUserActivities
      description: Gets the user activities of a data warehouse which includes running and suspended queries
      operationId: DataWarehouseUserActivities_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: dataWarehouseUserActivityName
          in: path
          description: 'The activity name of the data warehouse. '
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: DataWarehouseUserActivityName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully get the data warehouse user activities.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataWarehouseUserActivities'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceNotFound - The specified resource was not found.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataWarehouseUserActivities?api-version=2020-11-01-preview:
    get:
      tags:
        - DataWarehouseUserActivities
      description: List the user activities of a data warehouse which includes running and suspended queries
      operationId: DataWarehouseUserActivities_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully list the data warehouse user activities.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataWarehouseUserActivitiesListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceNotFound - The specified resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators/{administratorName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerAzureADAdministrators
      description: Gets a Azure Active Directory administrator.
      operationId: ServerAzureADAdministrators_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: administratorName
          in: path
          description: The name of server active directory administrator.
          required: true
          schema:
            enum:
              - ActiveDirectory
            x-ms-enum:
              name: AdministratorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved a specified Azure Active Directory administrator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerAzureADAdministrator'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - ServerAzureADAdministrators
      description: Creates or updates an existing Azure Active Directory administrator.
      operationId: ServerAzureADAdministrators_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: administratorName
          in: path
          description: The name of server active directory administrator.
          required: true
          schema:
            enum:
              - ActiveDirectory
            x-ms-enum:
              name: AdministratorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested Azure Active Directory administrator Resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerAzureADAdministrator'
      responses:
        '200':
          description: Successfully updated a Azure Active Directory administrator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerAzureADAdministrator'
        '201':
          description: Successfully created a Azure Active Directory administrator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerAzureADAdministrator'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerAzureADOnlyAuthenticationParameter - User tried to set AzureADOnlyAuthentication parameter to false which is not allowed, please use azureADOnlyAuthentications API instead.

             * 400 InvalidServerAzureADAdminDeleteOperation - User tried to delete server Azure Active Azure admin when AzureADOnlyAuthentication is set, please use azureADOnlyAuthentications API first.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
    delete:
      tags:
        - ServerAzureADAdministrators
      description: Deletes the Azure Active Directory administrator with the given name.
      operationId: ServerAzureADAdministrators_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: administratorName
          in: path
          description: The name of server active directory administrator.
          required: true
          schema:
            enum:
              - ActiveDirectory
            x-ms-enum:
              name: AdministratorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the Azure Active Directory administrator.
        '202':
          description: Accepted
        '204':
          description: The specified Azure Active Directory administrator does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerAzureADOnlyAuthenticationParameter - User tried to set AzureADOnlyAuthentication parameter to false which is not allowed, please use azureADOnlyAuthentications API instead.

             * 400 InvalidServerAzureADAdminDeleteOperation - User tried to delete server Azure Active Azure admin when AzureADOnlyAuthentication is set, please use azureADOnlyAuthentications API first.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/administrators?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerAzureADAdministrators
      description: Gets a list of Azure Active Directory administrators in a server.
      operationId: ServerAzureADAdministrators_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of Azure Active Directory administrators.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdministratorListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies/{policyName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedBackupShortTermRetentionPolicies
      description: Gets a managed database's short term retention policy.
      operationId: ManagedBackupShortTermRetentionPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: policyName
          in: path
          description: The policy name.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: ManagedShortTermRetentionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - ManagedBackupShortTermRetentionPolicies
      description: Updates a managed database's short term retention policy.
      operationId: ManagedBackupShortTermRetentionPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: policyName
          in: path
          description: The policy name. Should always be "default".
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: ManagedShortTermRetentionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The short term retention policy info.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicy'
      responses:
        '200':
          description: Successfully updated the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicy'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    patch:
      tags:
        - ManagedBackupShortTermRetentionPolicies
      description: Updates a managed database's short term retention policy.
      operationId: ManagedBackupShortTermRetentionPolicies_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: policyName
          in: path
          description: The policy name. Should always be "default".
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: ManagedShortTermRetentionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The short term retention policy info.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicy'
      responses:
        '200':
          description: Successfully updated the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicy'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupShortTermRetentionPolicies?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedBackupShortTermRetentionPolicies
      description: Gets a managed database's short term retention policy list.
      operationId: ManagedBackupShortTermRetentionPolicies_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedBackupShortTermRetentionPolicyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidBackupRetentionDays - The retention days of {0} is not a valid configuration. Valid backup retention must be in 7-day increments (7, 14, 21, etc.)

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints?api-version=2020-11-01-preview:
    get:
      tags:
        - RestorePoints
      description: Gets a list of database restore points.
      operationId: RestorePoints_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully returned restore points.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestorePointListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 BackupNotAllowedOnDeactivatedDatabase - Cannot create restore point on a deactivated database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 RestorePointLimitReached - A restore point cannot be created because database would exceed the allowed quota of restore points.

             * 400 RestorePointAttemptToDeleteSystemBackup - Cannot delete system restore point.

             * 404 DatabaseRestorePointNotFound - Can not find database restore point.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 408 DatabaseRestorePointTimedOut - Create database restore point failed.
      x-ms-pageable:
        nextLinkName: nextLink
    post:
      tags:
        - RestorePoints
      description: Creates a restore point for a data warehouse.
      operationId: RestorePoints_Create
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The definition for creating the restore point of this database.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDatabaseRestorePointDefinition'
      responses:
        '200':
          description: Successfully created the restore point request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestorePoint'
        '201':
          description: Successfully created the restore point request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestorePoint'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 BackupNotAllowedOnDeactivatedDatabase - Cannot create restore point on a deactivated database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 RestorePointLimitReached - A restore point cannot be created because database would exceed the allowed quota of restore points.

             * 400 RestorePointAttemptToDeleteSystemBackup - Cannot delete system restore point.

             * 404 DatabaseRestorePointNotFound - Can not find database restore point.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 408 DatabaseRestorePointTimedOut - Create database restore point failed.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/restorePoints/{restorePointName}?api-version=2020-11-01-preview:
    get:
      tags:
        - RestorePoints
      description: Gets a restore point.
      operationId: RestorePoints_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: restorePointName
          in: path
          description: The name of the restore point.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully returned the restore point.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestorePoint'
        default:
          description: |-
            *** Error Responses: ***

             * 400 BackupNotAllowedOnDeactivatedDatabase - Cannot create restore point on a deactivated database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 RestorePointLimitReached - A restore point cannot be created because database would exceed the allowed quota of restore points.

             * 400 RestorePointAttemptToDeleteSystemBackup - Cannot delete system restore point.

             * 404 DatabaseRestorePointNotFound - Can not find database restore point.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 408 DatabaseRestorePointTimedOut - Create database restore point failed.
    delete:
      tags:
        - RestorePoints
      description: Deletes a restore point.
      operationId: RestorePoints_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: restorePointName
          in: path
          description: The name of the restore point.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the restore point.
        default:
          description: |-
            *** Error Responses: ***

             * 400 BackupNotAllowedOnDeactivatedDatabase - Cannot create restore point on a deactivated database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 RestorePointLimitReached - A restore point cannot be created because database would exceed the allowed quota of restore points.

             * 400 RestorePointAttemptToDeleteSystemBackup - Cannot delete system restore point.

             * 404 DatabaseRestorePointNotFound - Can not find database restore point.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 408 DatabaseRestorePointTimedOut - Create database restore point failed.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/managedDatabaseMoveOperationResults?api-version=2022-05-01-preview:
    get:
      tags:
        - ManagedDatabaseMoveOperations
      description: Lists managed database move operations.
      operationId: ManagedDatabaseMoveOperations_ListByLocation
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          required: true
          schema:
            type: string
        - name: onlyLatestPerDatabase
          in: query
          description: Whether or not to only get the latest operation for each database. Has higher priority than $filter.
          required: false
          schema:
            type: boolean
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved move operation results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabaseMoveOperationListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPrimary - The given primary field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the instance failover group. Please make sure the primary server and all of the given partner servers are unique.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidManagedInstanceRegion - The provided partner managed instance region in the instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner region is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPairCount - Only one managed instance pair is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalid - The create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the instance failover group are not allowed on a secondary server. Execute the request on the primary server.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the instance failover group must be greater than or equal to the '{0}' minutes minimum grace period

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update instance failover group request body should not modify the read-only property '{0}'.

             * 400 InstanceFailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of instance failover group.

             * 400 InstanceFailoverGroupPartnerManagedInstanceFromDifferentSubscription - Primary server and the partner server of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.

             * 400 SystemDatabaseUnsupportedOperation - Unsupported operation for system database.

             * 400 XtpServerStateMismatch - Both source and target servers do not support memory optimized data.

             * 400 ManagedDatabaseGPFileSizeLimitExceeded - Creating a copy of a managed database on different SQL Managed Instance with General Purpose service tier would violate data file size limit. See: 'https://docs.microsoft.com/azure/azure-sql/managed-instance/resource-limits#service-tier-characteristics'.

             * 400 ManagedInstanceGPStorageAccountLimitExceeded - Creating a copy of a database on different SQL Managed Instance with General Purpose service tier would violate storage account size limit. See: 'https://docs.microsoft.com/azure/azure-sql/managed-instance/resource-limits#service-tier-characteristics'.

             * 400 TargetInsufficientStorage - Attempt to move/restore/copy database on the destination instance with insufficient space.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 400 CrossResourceOperationNotSupported - Cross resource operation is not supported.

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 ServerNotFound - The requested server was not found.

             * 400 ServerEditionMismatch - Edition must be the same as the primary server when creating a replica server.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidFailoverGroupRegion - Servers specified in an Instance Failover Group need to reside in different regions to provide isolation.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 InstanceFailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a instance failover group.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 FailoverGroupRegionMismatch - Partner region specified in Failover Group need to match the region of the partner managed instance indicated.

             * 400 DnsZoneMismatch - The DNSZone on the partner server is different from the DNSZone on the source server. This breaks InstanceFailoverGroup functionality.

             * 400 GeoDrInstanceSizeMismatch - Primary managed instance and partner managed instance do not have the same storage size.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 GeoDrSecondaryInstanceNotEmpty - Secondary managed instance has user databases. To create an instance failover group the secondary managed instance needs to be empty.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 TokenTooLong - The provided token is too long.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 ManagedDatabaseNameInUse - Database '{0}' already exists. Choose a different database name.

             * 400 PitrPointInTimeInvalid - The point in time {0} is not valid. Valid point in time range from {1} days early to now and not before source server creation time.

             * 400 NoMoreSpaceInManagedInstance - The managed instance has reached its storage limit. The storage usage for the managed instance cannot exceed (%d) MBs.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 StorageAccountFull - Managed Instance has reached the total capacity of underlying Azure storage account. Azure Premium Storage account is limited to 35TB of allocated space.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 ServerNotFound - The requested server was not found.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 DatabaseNumberLimitReached - Maximum number of databases for SQL Database Managed Instance reached.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 400 ManagedDatabaseMoveOperationResultsInvalidODataQuery - The specified OData query is either not valid or not supported

             * 404 ResourceNotFound - Invalid request specifying a non-existent resource.

             * 404 CrossManagedInstanceDatabaseMovementNotExist - Database movement does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 CannotFindServerCertificateWithThumbprint - Cannot find server certificate with thumbprint '{0}'. Please use PowerShell Cmdlet 'Add-AzureRmSqlManagedInstanceTransparentDataEncryptionCertificate' to create the certificate.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 RestoreSourceDatabaseNotFound - Could not find database '{0}' at time '{1}' that can be restored.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 ManagedInstanceHasHybridLink - User tried to initiate operation that is not supported when managed instance has a hybrid link configured.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 InstanceFailoverGroupAlreadyExists - Failover group already exists on a given server.

             * 409 InstanceFailoverGroupBusy - Instance failover group is busy with another operation.

             * 409 InstanceFailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 InvalidFailoverGroupName - Invalid Instance Failover Group name was supplied.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-odata: '#/components/schemas/ManagedDatabaseMoveOperationResult'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/managedDatabaseMoveOperationResults/{operationId}?api-version=2022-05-01-preview:
    get:
      tags:
        - ManagedDatabaseMoveOperations
      description: Gets a managed database move operation.
      operationId: ManagedDatabaseMoveOperations_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          required: true
          schema:
            type: string
        - name: operationId
          in: path
          required: true
          schema:
            format: uuid
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved move operation result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabaseMoveOperationResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPrimary - The given primary field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the instance failover group. Please make sure the primary server and all of the given partner servers are unique.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidManagedInstanceRegion - The provided partner managed instance region in the instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner region is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPairCount - Only one managed instance pair is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalid - The create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the instance failover group are not allowed on a secondary server. Execute the request on the primary server.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the instance failover group must be greater than or equal to the '{0}' minutes minimum grace period

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update instance failover group request body should not modify the read-only property '{0}'.

             * 400 InstanceFailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of instance failover group.

             * 400 InstanceFailoverGroupPartnerManagedInstanceFromDifferentSubscription - Primary server and the partner server of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.

             * 400 SystemDatabaseUnsupportedOperation - Unsupported operation for system database.

             * 400 XtpServerStateMismatch - Both source and target servers do not support memory optimized data.

             * 400 ManagedDatabaseGPFileSizeLimitExceeded - Creating a copy of a managed database on different SQL Managed Instance with General Purpose service tier would violate data file size limit. See: 'https://docs.microsoft.com/azure/azure-sql/managed-instance/resource-limits#service-tier-characteristics'.

             * 400 ManagedInstanceGPStorageAccountLimitExceeded - Creating a copy of a database on different SQL Managed Instance with General Purpose service tier would violate storage account size limit. See: 'https://docs.microsoft.com/azure/azure-sql/managed-instance/resource-limits#service-tier-characteristics'.

             * 400 TargetInsufficientStorage - Attempt to move/restore/copy database on the destination instance with insufficient space.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 400 CrossResourceOperationNotSupported - Cross resource operation is not supported.

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 ServerNotFound - The requested server was not found.

             * 400 ServerEditionMismatch - Edition must be the same as the primary server when creating a replica server.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidFailoverGroupRegion - Servers specified in an Instance Failover Group need to reside in different regions to provide isolation.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 InstanceFailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a instance failover group.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 FailoverGroupRegionMismatch - Partner region specified in Failover Group need to match the region of the partner managed instance indicated.

             * 400 DnsZoneMismatch - The DNSZone on the partner server is different from the DNSZone on the source server. This breaks InstanceFailoverGroup functionality.

             * 400 GeoDrInstanceSizeMismatch - Primary managed instance and partner managed instance do not have the same storage size.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 GeoDrSecondaryInstanceNotEmpty - Secondary managed instance has user databases. To create an instance failover group the secondary managed instance needs to be empty.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 TokenTooLong - The provided token is too long.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 ManagedDatabaseNameInUse - Database '{0}' already exists. Choose a different database name.

             * 400 PitrPointInTimeInvalid - The point in time {0} is not valid. Valid point in time range from {1} days early to now and not before source server creation time.

             * 400 NoMoreSpaceInManagedInstance - The managed instance has reached its storage limit. The storage usage for the managed instance cannot exceed (%d) MBs.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 StorageAccountFull - Managed Instance has reached the total capacity of underlying Azure storage account. Azure Premium Storage account is limited to 35TB of allocated space.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 ServerNotFound - The requested server was not found.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 DatabaseNumberLimitReached - Maximum number of databases for SQL Database Managed Instance reached.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 404 ResourceNotFound - Invalid request specifying a non-existent resource.

             * 404 CrossManagedInstanceDatabaseMovementNotExist - Database movement does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 CannotFindServerCertificateWithThumbprint - Cannot find server certificate with thumbprint '{0}'. Please use PowerShell Cmdlet 'Add-AzureRmSqlManagedInstanceTransparentDataEncryptionCertificate' to create the certificate.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 RestoreSourceDatabaseNotFound - Could not find database '{0}' at time '{1}' that can be restored.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 ManagedInstanceHasHybridLink - User tried to initiate operation that is not supported when managed instance has a hybrid link configured.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 InstanceFailoverGroupAlreadyExists - Failover group already exists on a given server.

             * 409 InstanceFailoverGroupBusy - Instance failover group is busy with another operation.

             * 409 InstanceFailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 InvalidFailoverGroupName - Invalid Instance Failover Group name was supplied.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/serverTrustCertificates?api-version=2021-11-01-preview:
    get:
      tags:
        - ServerTrustCertificates
      description: Gets a list of server trust certificates that were uploaded from box to the given Sql Managed Instance.
      operationId: ServerTrustCertificatesByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved a list of server trust certificates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTrustCertificatesListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ServerTrustCertificates_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/serverTrustCertificates/{certificateName}?api-version=2021-11-01-preview:
    get:
      tags:
        - ServerTrustCertificates
      description: Gets a server trust certificate that was uploaded from box to Sql Managed Instance.
      operationId: ServerTrustCertificates_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: certificateName
          in: path
          description: Name of of the certificate to get.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved a  server trust certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTrustCertificate'
        default:
          description: |-
            *** Error Responses: ***

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
    put:
      tags:
        - ServerTrustCertificates
      description: Uploads a server trust certificate from box to Sql Managed Instance.
      operationId: ServerTrustCertificates_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: certificateName
          in: path
          description: Name of of the certificate to upload.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The server trust certificate info.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerTrustCertificate'
      responses:
        '200':
          description: Certificate already existed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTrustCertificate'
        '201':
          description: Certificate is successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTrustCertificate'
        '202':
          description: Accepted request for creating server trust certificate.
        default:
          description: |-
            *** Error Responses: ***

             * 400 MissingPublicBlob - The public blob is missing.

             * 400 InvalidPublicBlob - Invalid public blob specified, reason: '{0}'.

             * 400 MissingCertificateName - The certificate name is missing.

             * 400 CertificateAlreadyExists - A certificate with a given name already exists or this certificate already has been added to the database.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
    delete:
      tags:
        - ServerTrustCertificates
      description: Deletes a server trust certificate that was uploaded from box to Sql Managed Instance.
      operationId: ServerTrustCertificates_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: certificateName
          in: path
          description: Name of of the certificate to delete.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Certificate successfully deleted.
        '202':
          description: Accepted request for deleting server trust certificate.
        '204':
          description: Certificate resource not found.
        default:
          description: |-
            *** Error Responses: ***

             * 400 MissingCertificateName - The certificate name is missing.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseSensitivityLabels
      description: Gets the sensitivity label of a given column
      operationId: ManagedDatabaseSensitivityLabels_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: columnName
          in: path
          description: The name of the column.
          required: true
          schema:
            type: string
        - name: sensitivityLabelSource
          in: path
          description: The source of the sensitivity label.
          required: true
          schema:
            enum:
              - current
              - recommended
            x-ms-enum:
              name: SensitivityLabelSource
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the sensitivity label.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensitivityLabel'
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelSourceNameNotSupported - The specified sensitivity label source is not valid

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SensitivityLabelsLabelNotFound - The specified sensitivity label could not be found

             * 404 SensitivityLabelsSchemaNotFound - The schema {0} could not be found

             * 404 SensitivityLabelsTableNotFound - The table {0} could not be found in schema {1}

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet
    put:
      tags:
        - ManagedDatabaseSensitivityLabels
      description: Creates or updates the sensitivity label of a given column
      operationId: ManagedDatabaseSensitivityLabels_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: columnName
          in: path
          description: The name of the column.
          required: true
          schema:
            type: string
        - name: sensitivityLabelSource
          in: path
          description: The source of the sensitivity label.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: WritableSensitivityLabelSource
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The column sensitivity label resource.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensitivityLabel'
      responses:
        '200':
          description: Successfully updated the sensitivity label.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensitivityLabel'
        '201':
          description: Successfully created the sensitivity label.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensitivityLabel'
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelSourceNameNotSupported - The specified sensitivity label source is not valid

             * 400 InvalidSensitivityLabelResource - The specified sensitivity label resource is not valid

             * 400 SensitivityLabelLabelNameAndInfoTypeNotProvided - At least one of LabelName and InformationType must be specified

             * 400 LabelNameTooLong - Label name cannot exceed {0} characters

             * 400 InformationTypeTooLong - Information type cannot exceed {0} characters

             * 400 LabelIdMustBeGuid - The provided ‘labelId’ is invalid. Value must be a GUID

             * 400 InformationTypeIdMustBeGuid - The provided ‘informationTypeId’ is invalid. Value must be a GUID

             * 400 LabelMissing - Label is required. At least one of ‘labelName’ or ‘labelId’ must be provided

             * 400 InformationTypeMissing - Information type is required. At least one of ‘informationType’ or ‘informationTypeId’ must be provided

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SensitivityLabelsLabelNotFound - The specified sensitivity label could not be found

             * 404 SensitivityLabelsSchemaNotFound - The schema {0} could not be found

             * 404 SensitivityLabelsTableNotFound - The table {0} could not be found in schema {1}

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet
    delete:
      tags:
        - ManagedDatabaseSensitivityLabels
      description: Deletes the sensitivity label of a given column
      operationId: ManagedDatabaseSensitivityLabels_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: columnName
          in: path
          description: The name of the column.
          required: true
          schema:
            type: string
        - name: sensitivityLabelSource
          in: path
          description: The source of the sensitivity label.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: WritableSensitivityLabelSource
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the sensitivity label.
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelSourceNameNotSupported - The specified sensitivity label source is not valid

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SensitivityLabelsLabelNotFound - The specified sensitivity label could not be found

             * 404 SensitivityLabelsSchemaNotFound - The schema {0} could not be found

             * 404 SensitivityLabelsTableNotFound - The table {0} could not be found in schema {1}

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}/disable?api-version=2020-11-01-preview:
    post:
      tags:
        - ManagedDatabaseSensitivityLabels
      description: Disables sensitivity recommendations on a given column
      operationId: ManagedDatabaseSensitivityLabels_DisableRecommendation
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: columnName
          in: path
          description: The name of the column.
          required: true
          schema:
            type: string
        - name: sensitivityLabelSource
          in: path
          required: true
          schema:
            enum:
              - recommended
            x-ms-enum:
              name: SensitivityLabelSource
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully disabled the sensitivity recommendations on the given column.
        default:
          description: |-
            *** Error Responses: ***

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}/enable?api-version=2020-11-01-preview:
    post:
      tags:
        - ManagedDatabaseSensitivityLabels
      description: Enables sensitivity recommendations on a given column (recommendations are enabled by default on all columns)
      operationId: ManagedDatabaseSensitivityLabels_EnableRecommendation
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: columnName
          in: path
          description: The name of the column.
          required: true
          schema:
            type: string
        - name: sensitivityLabelSource
          in: path
          required: true
          schema:
            enum:
              - recommended
            x-ms-enum:
              name: SensitivityLabelSource
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully enabled the sensitivity recommendations on the given column.
        default:
          description: |-
            *** Error Responses: ***

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/currentSensitivityLabels?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseSensitivityLabels
      description: Gets the sensitivity labels of a given database
      operationId: ManagedDatabaseSensitivityLabelsCurrentByDatabase_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: $skipToken
          in: query
          required: false
          schema:
            type: string
        - name: $count
          in: query
          required: false
          schema:
            type: boolean
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the sensitivity labels.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensitivityLabelListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelsInvalidODataQuery - The specified OData query is either not valid or not supported

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
      x-ms-odata: '#/components/schemas/SensitivityLabel'
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedDatabaseSensitivityLabels_ListCurrentByDatabase
    patch:
      tags:
        - ManagedDatabaseSensitivityLabels
      description: Update sensitivity labels of a given database using an operations batch.
      operationId: ManagedDatabaseSensitivityLabels_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensitivityLabelUpdateList'
      responses:
        '200':
          description: Successfully updated sensitivity labels.
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelSourceNameNotSupported - The specified sensitivity label source is not valid

             * 400 InvalidSensitivityLabelsBatch - The specified sensitivity labels batch is not valid. Please provide batch operations

             * 400 SensitivityLabelsMissingSchema - Operation[{0}]: Missing schema information

             * 400 SensitivityLabelsMissingTable - Operation[{0}]: Missing table information

             * 400 SensitivityLabelsMissingColumn - Operation[{0}]: Missing column information

             * 400 SensitivityLabelsUpdateSameColumnMoreThanOnce - The column {0} can not be updated more than once in a single command

             * 400 InvalidSensitivityLabelResource - The specified sensitivity label resource is not valid

             * 400 SensitivityLabelLabelNameAndInfoTypeNotProvided - At least one of LabelName and InformationType must be specified

             * 400 LabelNameTooLong - Label name cannot exceed {0} characters

             * 400 InformationTypeTooLong - Information type cannot exceed {0} characters

             * 400 LabelIdMustBeGuid - The provided ‘labelId’ is invalid. Value must be a GUID

             * 400 InformationTypeIdMustBeGuid - The provided ‘informationTypeId’ is invalid. Value must be a GUID

             * 400 LabelMissing - Label is required. At least one of ‘labelName’ or ‘labelId’ must be provided

             * 400 InformationTypeMissing - Information type is required. At least one of ‘informationType’ or ‘informationTypeId’ must be provided

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SensitivityLabelsLabelNotFound - The specified sensitivity label could not be found

             * 404 SensitivityLabelsSchemaNotFound - The schema {0} could not be found

             * 404 SensitivityLabelsTableNotFound - The table {0} could not be found in schema {1}

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/recommendedSensitivityLabels?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseSensitivityLabels
      description: Gets the sensitivity labels of a given database
      operationId: ManagedDatabaseSensitivityLabelsRecommendedByDatabase_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: $skipToken
          in: query
          required: false
          schema:
            type: string
        - name: includeDisabledRecommendations
          in: query
          description: Specifies whether to include disabled recommendations or not.
          required: false
          schema:
            type: boolean
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the sensitivity labels.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensitivityLabelListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelsInvalidODataQuery - The specified OData query is either not valid or not supported

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
      x-ms-odata: '#/components/schemas/SensitivityLabel'
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedDatabaseSensitivityLabels_ListRecommendedByDatabase
    patch:
      tags:
        - ManagedDatabaseSensitivityLabels
      description: Update recommended sensitivity labels states of a given database using an operations batch.
      operationId: ManagedDatabaseRecommendedSensitivityLabels_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecommendedSensitivityLabelUpdateList'
      responses:
        '200':
          description: Successfully updated recommended sensitivity labels.
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelSourceNameNotSupported - The specified sensitivity label source is not valid

             * 400 InvalidRecommendedSensitivityLabelsBatch - The specified recommended sensitivity labels operations are not valid

             * 400 SensitivityLabelsMissingSchema - Operation[{0}]: Missing schema information

             * 400 SensitivityLabelsMissingTable - Operation[{0}]: Missing table information

             * 400 SensitivityLabelsMissingColumn - Operation[{0}]: Missing column information

             * 400 SensitivityLabelsUpdateSameColumnMoreThanOnce - The column {0} can not be updated more than once in a single command

             * 400 InvalidSensitivityLabelResource - The specified sensitivity label resource is not valid

             * 400 SensitivityLabelLabelNameAndInfoTypeNotProvided - At least one of LabelName and InformationType must be specified

             * 400 LabelNameTooLong - Label name cannot exceed {0} characters

             * 400 InformationTypeTooLong - Information type cannot exceed {0} characters

             * 400 LabelIdMustBeGuid - The provided ‘labelId’ is invalid. Value must be a GUID

             * 400 InformationTypeIdMustBeGuid - The provided ‘informationTypeId’ is invalid. Value must be a GUID

             * 400 LabelMissing - Label is required. At least one of ‘labelName’ or ‘labelId’ must be provided

             * 400 InformationTypeMissing - Information type is required. At least one of ‘informationType’ or ‘informationTypeId’ must be provided

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SensitivityLabelsLabelNotFound - The specified sensitivity label could not be found

             * 404 SensitivityLabelsSchemaNotFound - The schema {0} could not be found

             * 404 SensitivityLabelsTableNotFound - The table {0} could not be found in schema {1}

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/ipv6FirewallRules?api-version=2022-11-01-preview:
    get:
      tags:
        - IPv6FirewallRules
      description: Gets a list of IPv6 firewall rules.
      operationId: IPv6FirewallRules_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of IPv6 firewall rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPv6FirewallRuleListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/ipv6FirewallRules/{firewallRuleName}?api-version=2022-11-01-preview:
    get:
      tags:
        - IPv6FirewallRules
      description: Gets an IPv6 firewall rule.
      operationId: IPv6FirewallRules_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: firewallRuleName
          in: path
          description: The name of the firewall rule.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified IPv6 firewall rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPv6FirewallRule'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - IPv6FirewallRules
      description: Creates or updates an IPv6 firewall rule.
      operationId: IPv6FirewallRules_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: firewallRuleName
          in: path
          description: The name of the firewall rule.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The required parameters for creating or updating an IPv6 firewall rule.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IPv6FirewallRule'
      responses:
        '200':
          description: Successfully updated the IPv6 firewall rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPv6FirewallRule'
        '201':
          description: Successfully created the IPv6 firewall rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPv6FirewallRule'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidIPv6ServerFirewallRuleResourceRequest - The IPv6 server firewall rule resource request is invalid.

             * 400 InvalidIPv6ServerFirewallRuleResourceParameters - The IPv6 server firewall rule resource parameter is invalid.

             * 400 DenyPublicEndpointEnabled - Unable to create or modify firewall rules when public network interface for the server is disabled. To manage server or database level firewall rules, please enable the public network interface.

             * 400 IPv6FirewallRuleNameEmpty - The provided IPv6 firewall rule name is empty

             * 400 FirewallRuleNotIPv6Address - The provided firewall rule address is not IPv6

             * 400 IPv6FirewallRuleNameTooLong - The provided IPv6 firewall rule name is too long

             * 400 IPv6FirewallRuleInvalidRange - The specified IPv6 firewall rule range is invalid.

             * 400 TooManyIPv6FirewallRules - The provided IPv6 firewall rules are over the limit.

             * 400 IPv6EndpointDisabled - The IPv6 endpoint is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
    delete:
      tags:
        - IPv6FirewallRules
      description: Deletes an IPv6 firewall rule.
      operationId: IPv6FirewallRules_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: firewallRuleName
          in: path
          description: The name of the firewall rule.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the IPv6 firewall rule.
        '204':
          description: The specified IPv6 firewall rule does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidIPv6ServerFirewallRuleResourceRequest - The IPv6 server firewall rule resource request is invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseSchemas
      description: List database schemas
      operationId: DatabaseSchemas_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved database schemas.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSchemaListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InvalidDatabaseSchema - Schema is missing in database.

             * 404 InvalidDatabaseTable - Table is missing in database.

             * 404 InvalidDatabaseColumn - Column is missing in table.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
      x-ms-odata: '#/components/schemas/DatabaseSchema'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseSchemas
      description: Get database schema
      operationId: DatabaseSchemas_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved database schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSchema'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InvalidDatabaseSchema - Schema is missing in database.

             * 404 InvalidDatabaseTable - Table is missing in database.

             * 404 InvalidDatabaseColumn - Column is missing in table.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/privateLinkResources?api-version=2020-11-01-preview:
    get:
      tags:
        - PrivateLinkResources
      description: Gets the private link resources for SQL server.
      operationId: PrivateLinkResources_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved private link resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateLinkResourceListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/privateLinkResources/{groupName}?api-version=2020-11-01-preview:
    get:
      tags:
        - PrivateLinkResources
      description: Gets a private link resource for SQL server.
      operationId: PrivateLinkResources_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: groupName
          in: path
          description: The name of the private link resource.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved private link resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateLinkResource'
        default:
          description: |-
            *** Error Responses: ***

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseVulnerabilityAssessmentRuleBaselines
      description: Gets a database's vulnerability assessment rule baseline.
      operationId: ManagedDatabaseVulnerabilityAssessmentRuleBaselines_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment rule baseline is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: ruleId
          in: path
          description: The vulnerability assessment rule ID.
          required: true
          schema:
            type: string
        - name: baselineName
          in: path
          description: The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
          required: true
          schema:
            enum:
              - master
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentPolicyBaselineName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully got the vulnerability assessment rule baseline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentRuleBaseline'
        default:
          description: |-
            *** Error Responses: ***

             * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account '{0}' .

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account '{0}' that was defined in the policy is invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule '{0}' does not exist.

             * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule '{0}'

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    put:
      tags:
        - ManagedDatabaseVulnerabilityAssessmentRuleBaselines
      description: Creates or updates a database's vulnerability assessment rule baseline.
      operationId: ManagedDatabaseVulnerabilityAssessmentRuleBaselines_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment rule baseline is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: ruleId
          in: path
          description: The vulnerability assessment rule ID.
          required: true
          schema:
            type: string
        - name: baselineName
          in: path
          description: The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
          required: true
          schema:
            enum:
              - master
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentPolicyBaselineName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested rule baseline resource.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentRuleBaseline'
      responses:
        '200':
          description: Successfully set the vulnerability assessment rule baseline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentRuleBaseline'
        default:
          description: |-
            *** Error Responses: ***

             * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account '{0}' .

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account '{0}' that was defined in the policy is invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule '{0}' does not exist.

             * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule '{0}'

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    delete:
      tags:
        - ManagedDatabaseVulnerabilityAssessmentRuleBaselines
      description: Removes the database's vulnerability assessment rule baseline.
      operationId: ManagedDatabaseVulnerabilityAssessmentRuleBaselines_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment rule baseline is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: ruleId
          in: path
          description: The vulnerability assessment rule ID.
          required: true
          schema:
            type: string
        - name: baselineName
          in: path
          description: The name of the vulnerability assessment rule baseline (default implies a baseline on a database level rule and master for server level rule).
          required: true
          schema:
            enum:
              - master
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentPolicyBaselineName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully removed the database vulnerability assessment rule baseline.
        default:
          description: |-
            *** Error Responses: ***

             * 400 VulnerabilityAssessmentStorageAuthenticationFailed - Could not authenticate to storage account '{0}' .

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 VulnerabilityAssessmentInvalidStorageAccount - The storage account '{0}' that was defined in the policy is invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 VulnerabilityAssessmentRuleDoesNotExists - Rule '{0}' does not exist.

             * 404 VulnerabilityAssessmentBaselineDoesNotExists - Baseline does not exist for rule '{0}'

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/timeZones?api-version=2020-11-01-preview:
    get:
      tags:
        - TimeZones
      description: Gets a list of managed instance time zones by location.
      operationId: TimeZones_ListByLocation
      parameters:
        - name: locationName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of time zones.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeZoneListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.

             * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.

             * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.

             * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.

             * 400 ManagedInstanceIpAddressRangeLimit - Cannot perform creation/scaling of the managed instance as there are not enough available IP addresses in the subnet for performing the operation.

             * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.

             * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.

             * 400 UpdateManagedServerWithMaintenanceWindowNotAllowed - Update of Managed Instance with maintenance window settings is not allowed.

             * 400 VnetPrepareNIPFailed - User tried to prepare subnet that has a conflict with NetworkIntentPolicy.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 ManagedInstanceDeprecatedHardwareFamily - Changing the hardware generation to deprecated {0} generation is not possible.

             * 400 ManagedInstanceBackupStorageTypeNotSupported - Backup storage type parameter is not allowed in the instance update operation.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough capacity

             * 400 ServerNotFound - The requested server was not found.

             * 400 ManagedInstanceZoneRedudantFeatureNotSupported - ZoneRedundant feature is not supported for the selected service tier. For more details visit aka.ms/sqlmi-service-tier-characteristics.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeEnabled - Enabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeDisabled - Disabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 TokenTooLong - The provided token is too long.

             * 400 ManagedInstanceSloUpdateFailed - SLO '{0}' operation cannot succeed as the memory usage of '{1}' exceeds the quota.

             * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 PasswordTooShort - The provided password is too short

             * 400 PasswordTooLong - The provided password is too long.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 GatewayInvalidEdition - '{0}' is not a valid database edition in this version of SQL Server.

             * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 400 InvalidLocation - An invalid location was specified.

             * 400 VnetInWrongRegion - Virtual network is in wrong region.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 VnetAddressRangeError - Virtual network address range is invalid.

             * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.

             * 400 InvalidCollation - Invalid collation.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.

             * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server '{0}', Database '{1}' due to unexpected delay. Please try again.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.

             * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.

             * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.

             * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.

             * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.

             * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.

             * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.

             * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.

             * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.

             * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 VnetResourceNotFound - Resource not found: '{0}'.

             * 400 InvalidTimezone - Invalid timezone.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.

             * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation 'SQL_Latin1_General_CP1_CI_AS'.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.

             * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.

             * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.

             * 405 InvalidStorageSizeValue - "Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerAlreadyExists - Duplicate server name.

             * 409 ServerOverridePreconditionFailed - Failed to apply server override on category '{0}', because physical db or instance '{1}' in server '{2}' is currently not in 'Ready' or 'Deactivated' state.

             * 409 ServerDisabled - Server is disabled.

             * 409 ManagedInstanceIsBusy - The server '{0}' is currently busy.  Please wait a few minutes before trying again.

             * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 GatewayInternalServerError - The server encountered an unexpected exception.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/timeZones/{timeZoneId}?api-version=2020-11-01-preview:
    get:
      tags:
        - TimeZones
      description: Gets a managed instance time zone.
      operationId: TimeZones_Get
      parameters:
        - name: locationName
          in: path
          required: true
          schema:
            type: string
        - name: timeZoneId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified time zone.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeZone'
        default:
          description: |-
            *** Error Responses: ***

             * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.

             * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.

             * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.

             * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.

             * 400 ManagedInstanceIpAddressRangeLimit - Cannot perform creation/scaling of the managed instance as there are not enough available IP addresses in the subnet for performing the operation.

             * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.

             * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.

             * 400 UpdateManagedServerWithMaintenanceWindowNotAllowed - Update of Managed Instance with maintenance window settings is not allowed.

             * 400 VnetPrepareNIPFailed - User tried to prepare subnet that has a conflict with NetworkIntentPolicy.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 ManagedInstanceDeprecatedHardwareFamily - Changing the hardware generation to deprecated {0} generation is not possible.

             * 400 ManagedInstanceBackupStorageTypeNotSupported - Backup storage type parameter is not allowed in the instance update operation.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough capacity

             * 400 ServerNotFound - The requested server was not found.

             * 400 ManagedInstanceZoneRedudantFeatureNotSupported - ZoneRedundant feature is not supported for the selected service tier. For more details visit aka.ms/sqlmi-service-tier-characteristics.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeEnabled - Enabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeDisabled - Disabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 TokenTooLong - The provided token is too long.

             * 400 ManagedInstanceSloUpdateFailed - SLO '{0}' operation cannot succeed as the memory usage of '{1}' exceeds the quota.

             * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 PasswordTooShort - The provided password is too short

             * 400 PasswordTooLong - The provided password is too long.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 GatewayInvalidEdition - '{0}' is not a valid database edition in this version of SQL Server.

             * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 400 InvalidLocation - An invalid location was specified.

             * 400 VnetInWrongRegion - Virtual network is in wrong region.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 VnetAddressRangeError - Virtual network address range is invalid.

             * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.

             * 400 InvalidCollation - Invalid collation.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.

             * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server '{0}', Database '{1}' due to unexpected delay. Please try again.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.

             * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.

             * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.

             * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.

             * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.

             * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.

             * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.

             * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.

             * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.

             * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 VnetResourceNotFound - Resource not found: '{0}'.

             * 400 InvalidTimezone - Invalid timezone.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.

             * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation 'SQL_Latin1_General_CP1_CI_AS'.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.

             * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.

             * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.

             * 405 InvalidStorageSizeValue - "Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerAlreadyExists - Duplicate server name.

             * 409 ServerOverridePreconditionFailed - Failed to apply server override on category '{0}', because physical db or instance '{1}' in server '{2}' is currently not in 'Ready' or 'Deactivated' state.

             * 409 ServerDisabled - Server is disabled.

             * 409 ManagedInstanceIsBusy - The server '{0}' is currently busy.  Please wait a few minutes before trying again.

             * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 GatewayInternalServerError - The server encountered an unexpected exception.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/executions?api-version=2020-11-01-preview:
    get:
      tags:
        - JobExecutions
      description: Lists all executions in a job agent.
      operationId: JobExecutions_ListByAgent
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: createTimeMin
          in: query
          description: If specified, only job executions created at or after the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: createTimeMax
          in: query
          description: If specified, only job executions created before the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: endTimeMin
          in: query
          description: If specified, only job executions completed at or after the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: endTimeMax
          in: query
          description: If specified, only job executions completed before the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: isActive
          in: query
          description: If specified, only active or only completed job executions are included.
          required: false
          schema:
            type: boolean
        - name: $skip
          in: query
          description: The number of elements in the collection to skip.
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of elements to return from the collection.
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved job executions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecutionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/cancel?api-version=2020-11-01-preview:
    post:
      tags:
        - JobExecutions
      description: Requests cancellation of a job execution.
      operationId: JobExecutions_Cancel
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job.
          required: true
          schema:
            type: string
        - name: jobExecutionId
          in: path
          description: The id of the job execution to cancel.
          required: true
          schema:
            format: uuid
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully requested cancellation of the job execution.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/start?api-version=2020-11-01-preview:
    post:
      tags:
        - JobExecutions
      description: Starts an elastic job execution.
      operationId: JobExecutions_Create
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to get.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully started an execution for the job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecution'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions?api-version=2020-11-01-preview:
    get:
      tags:
        - JobExecutions
      description: Lists a job's executions.
      operationId: JobExecutions_ListByJob
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to get.
          required: true
          schema:
            type: string
        - name: createTimeMin
          in: query
          description: If specified, only job executions created at or after the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: createTimeMax
          in: query
          description: If specified, only job executions created before the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: endTimeMin
          in: query
          description: If specified, only job executions completed at or after the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: endTimeMax
          in: query
          description: If specified, only job executions completed before the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: isActive
          in: query
          description: If specified, only active or only completed job executions are included.
          required: false
          schema:
            type: boolean
        - name: $skip
          in: query
          description: The number of elements in the collection to skip.
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of elements to return from the collection.
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved job executions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecutionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}?api-version=2020-11-01-preview:
    get:
      tags:
        - JobExecutions
      description: Gets a job execution.
      operationId: JobExecutions_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job.
          required: true
          schema:
            type: string
        - name: jobExecutionId
          in: path
          description: The id of the job execution
          required: true
          schema:
            format: uuid
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecution'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
    put:
      tags:
        - JobExecutions
      description: Creates or updates a job execution.
      operationId: JobExecutions_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to get.
          required: true
          schema:
            type: string
        - name: jobExecutionId
          in: path
          description: The job execution id to create the job execution under.
          required: true
          schema:
            format: uuid
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: A job execution for the job with the given id already existed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecution'
        '201':
          description: Successfully started an execution for the job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecution'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/dnsAliases/{dnsAliasName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerDnsAliases
      description: Gets a server DNS alias.
      operationId: ServerDnsAliases_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server that the alias is pointing to.
          required: true
          schema:
            type: string
        - name: dnsAliasName
          in: path
          description: The name of the server dns alias.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified server DNS alias.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerDnsAlias'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerDnsAliasAcquireRequest - The acquire server DNS alias request body is empty or invalid (it should contain the old server alias id, for example: /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-old-server/dnsAliases/dns-alias-name-1).

             * 400 ServerDnsAliasAcquireRequestInvalidOldServerDnsAliasId - The old server DNS alias id in request body is empty or invalid (it should have the form: /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-old-server/dnsAliases/dns-alias-name-1).

             * 400 ServerDnsAliasDoesNotExist - Server DNS Alias does not exist on a server.

             * 400 UnableToTurnOnTableAuditingForDbOnServerWithServerDnsAlias - Server Dns Aliases are not working correctly for database that has Table Auditing turned on

             * 400 UnableToCreateServerDnsAliasDueToTableAuditing - The Server DNS Alias cannot be created for server that has table auditing turned on.

             * 400 UnableToCreateServerDnsAliasDueToTableAuditingForDb - Server DNS Alias cannot be created for server '{0}' because database '{1}' has Table Auditing or Security Enabled Access feature enabled.

             * 400 LimitOfServerDnsAliasesPerServerExceeded - Creating new Server Dns Alias will exceed the allowed number of Server DNS Aliases per server.

             * 400 UnableToTurnOnTableAuditingForServerWithServerDnsAlias - Server Dns Aliases are not working correctly for server that has Table Auditing turned on

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 TokenTooLong - The provided token is too long.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidServerDnsAliasName - Invalid Server DNS Alias name was supplied.

             * 400 ServerNotFound - The requested server was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 409 ServerDnsAliasBusy - Server DNS Alias is busy with another operation.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerDnsAliasDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 ServerDnsAliasAlreadyExists - Server DNS Alias already exists on a given server.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
    put:
      tags:
        - ServerDnsAliases
      description: Creates a server DNS alias.
      operationId: ServerDnsAliases_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server that the alias is pointing to.
          required: true
          schema:
            type: string
        - name: dnsAliasName
          in: path
          description: The name of the server dns alias.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: The server DNS alias already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerDnsAlias'
        '201':
          description: Successfully created a server DNS alias.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerDnsAlias'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerDnsAliasAcquireRequest - The acquire server DNS alias request body is empty or invalid (it should contain the old server alias id, for example: /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-old-server/dnsAliases/dns-alias-name-1).

             * 400 ServerDnsAliasAcquireRequestInvalidOldServerDnsAliasId - The old server DNS alias id in request body is empty or invalid (it should have the form: /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-old-server/dnsAliases/dns-alias-name-1).

             * 400 ServerDnsAliasDoesNotExist - Server DNS Alias does not exist on a server.

             * 400 UnableToTurnOnTableAuditingForDbOnServerWithServerDnsAlias - Server Dns Aliases are not working correctly for database that has Table Auditing turned on

             * 400 UnableToCreateServerDnsAliasDueToTableAuditing - The Server DNS Alias cannot be created for server that has table auditing turned on.

             * 400 UnableToCreateServerDnsAliasDueToTableAuditingForDb - Server DNS Alias cannot be created for server '{0}' because database '{1}' has Table Auditing or Security Enabled Access feature enabled.

             * 400 LimitOfServerDnsAliasesPerServerExceeded - Creating new Server Dns Alias will exceed the allowed number of Server DNS Aliases per server.

             * 400 UnableToTurnOnTableAuditingForServerWithServerDnsAlias - Server Dns Aliases are not working correctly for server that has Table Auditing turned on

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 TokenTooLong - The provided token is too long.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidServerDnsAliasName - Invalid Server DNS Alias name was supplied.

             * 400 ServerNotFound - The requested server was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 409 ServerDnsAliasBusy - Server DNS Alias is busy with another operation.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerDnsAliasDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 ServerDnsAliasAlreadyExists - Server DNS Alias already exists on a given server.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    delete:
      tags:
        - ServerDnsAliases
      description: Deletes the server DNS alias with the given name.
      operationId: ServerDnsAliases_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server that the alias is pointing to.
          required: true
          schema:
            type: string
        - name: dnsAliasName
          in: path
          description: The name of the server dns alias.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the server DNS alias.
        '202':
          description: Accepted
        '204':
          description: The specified server DNS alias does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerDnsAliasAcquireRequest - The acquire server DNS alias request body is empty or invalid (it should contain the old server alias id, for example: /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-old-server/dnsAliases/dns-alias-name-1).

             * 400 ServerDnsAliasAcquireRequestInvalidOldServerDnsAliasId - The old server DNS alias id in request body is empty or invalid (it should have the form: /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-old-server/dnsAliases/dns-alias-name-1).

             * 400 ServerDnsAliasDoesNotExist - Server DNS Alias does not exist on a server.

             * 400 UnableToTurnOnTableAuditingForDbOnServerWithServerDnsAlias - Server Dns Aliases are not working correctly for database that has Table Auditing turned on

             * 400 UnableToCreateServerDnsAliasDueToTableAuditing - The Server DNS Alias cannot be created for server that has table auditing turned on.

             * 400 UnableToCreateServerDnsAliasDueToTableAuditingForDb - Server DNS Alias cannot be created for server '{0}' because database '{1}' has Table Auditing or Security Enabled Access feature enabled.

             * 400 LimitOfServerDnsAliasesPerServerExceeded - Creating new Server Dns Alias will exceed the allowed number of Server DNS Aliases per server.

             * 400 UnableToTurnOnTableAuditingForServerWithServerDnsAlias - Server Dns Aliases are not working correctly for server that has Table Auditing turned on

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 TokenTooLong - The provided token is too long.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidServerDnsAliasName - Invalid Server DNS Alias name was supplied.

             * 400 ServerNotFound - The requested server was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 409 ServerDnsAliasBusy - Server DNS Alias is busy with another operation.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerDnsAliasDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 ServerDnsAliasAlreadyExists - Server DNS Alias already exists on a given server.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/dnsAliases?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerDnsAliases
      description: Gets a list of server DNS aliases for a server.
      operationId: ServerDnsAliases_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server that the alias is pointing to.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of server DNS aliases.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerDnsAliasListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerDnsAliasAcquireRequest - The acquire server DNS alias request body is empty or invalid (it should contain the old server alias id, for example: /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-old-server/dnsAliases/dns-alias-name-1).

             * 400 ServerDnsAliasAcquireRequestInvalidOldServerDnsAliasId - The old server DNS alias id in request body is empty or invalid (it should have the form: /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-old-server/dnsAliases/dns-alias-name-1).

             * 400 ServerDnsAliasDoesNotExist - Server DNS Alias does not exist on a server.

             * 400 UnableToTurnOnTableAuditingForDbOnServerWithServerDnsAlias - Server Dns Aliases are not working correctly for database that has Table Auditing turned on

             * 400 UnableToCreateServerDnsAliasDueToTableAuditing - The Server DNS Alias cannot be created for server that has table auditing turned on.

             * 400 UnableToCreateServerDnsAliasDueToTableAuditingForDb - Server DNS Alias cannot be created for server '{0}' because database '{1}' has Table Auditing or Security Enabled Access feature enabled.

             * 400 LimitOfServerDnsAliasesPerServerExceeded - Creating new Server Dns Alias will exceed the allowed number of Server DNS Aliases per server.

             * 400 UnableToTurnOnTableAuditingForServerWithServerDnsAlias - Server Dns Aliases are not working correctly for server that has Table Auditing turned on

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 TokenTooLong - The provided token is too long.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidServerDnsAliasName - Invalid Server DNS Alias name was supplied.

             * 400 ServerNotFound - The requested server was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 409 ServerDnsAliasBusy - Server DNS Alias is busy with another operation.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerDnsAliasDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 ServerDnsAliasAlreadyExists - Server DNS Alias already exists on a given server.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/dnsAliases/{dnsAliasName}/acquire?api-version=2020-11-01-preview:
    post:
      tags:
        - ServerDnsAliases
      description: Acquires server DNS alias from another server.
      operationId: ServerDnsAliases_Acquire
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server that the alias is pointing to.
          required: true
          schema:
            type: string
        - name: dnsAliasName
          in: path
          description: The name of the server dns alias.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerDnsAliasAcquisition'
      responses:
        '200':
          description: Successfully acquired server DNS alias.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerDnsAlias'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerDnsAliasAcquireRequest - The acquire server DNS alias request body is empty or invalid (it should contain the old server alias id, for example: /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-old-server/dnsAliases/dns-alias-name-1).

             * 400 ServerDnsAliasAcquireRequestInvalidOldServerDnsAliasId - The old server DNS alias id in request body is empty or invalid (it should have the form: /subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/Default/providers/Microsoft.Sql/servers/dns-alias-old-server/dnsAliases/dns-alias-name-1).

             * 400 ServerDnsAliasDoesNotExist - Server DNS Alias does not exist on a server.

             * 400 UnableToTurnOnTableAuditingForDbOnServerWithServerDnsAlias - Server Dns Aliases are not working correctly for database that has Table Auditing turned on

             * 400 UnableToCreateServerDnsAliasDueToTableAuditing - The Server DNS Alias cannot be created for server that has table auditing turned on.

             * 400 UnableToCreateServerDnsAliasDueToTableAuditingForDb - Server DNS Alias cannot be created for server '{0}' because database '{1}' has Table Auditing or Security Enabled Access feature enabled.

             * 400 LimitOfServerDnsAliasesPerServerExceeded - Creating new Server Dns Alias will exceed the allowed number of Server DNS Aliases per server.

             * 400 UnableToTurnOnTableAuditingForServerWithServerDnsAlias - Server Dns Aliases are not working correctly for server that has Table Auditing turned on

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 TokenTooLong - The provided token is too long.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidServerDnsAliasName - Invalid Server DNS Alias name was supplied.

             * 400 ServerNotFound - The requested server was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ServerDnsAliasBusy - Server DNS Alias is busy with another operation.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerDnsAliasDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 ServerDnsAliasAlreadyExists - Server DNS Alias already exists on a given server.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseVulnerabilityAssessments
      description: Gets the database's vulnerability assessment.
      operationId: ManagedDatabaseVulnerabilityAssessments_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database vulnerability assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessment'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentUnsupportedStorageAccount - The provided storage account is unsupported.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    put:
      tags:
        - ManagedDatabaseVulnerabilityAssessments
      description: Creates or updates the database's vulnerability assessment.
      operationId: ManagedDatabaseVulnerabilityAssessments_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested resource.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseVulnerabilityAssessment'
      responses:
        '200':
          description: Successfully set the vulnerability assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessment'
        '201':
          description: Successfully created the vulnerability assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessment'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentUnsupportedStorageAccount - The provided storage account is unsupported.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    delete:
      tags:
        - ManagedDatabaseVulnerabilityAssessments
      description: Removes the database's vulnerability assessment.
      operationId: ManagedDatabaseVulnerabilityAssessments_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully removed the database vulnerability assessment.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentUnsupportedStorageAccount - The provided storage account is unsupported.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseVulnerabilityAssessments
      description: Lists the vulnerability assessments of a managed database.
      operationId: ManagedDatabaseVulnerabilityAssessments_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment is defined.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database vulnerability assessments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentUnsupportedStorageAccount - The provided storage account is unsupported.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/restoreDetails/{restoreDetailsName}?api-version=2022-05-01-preview:
    get:
      tags:
        - ManagedDatabaseRestoreDetails
      description: Gets managed database restore details.
      operationId: ManagedDatabaseRestoreDetails_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: restoreDetailsName
          in: path
          description: The name of the restore details to retrieve.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: RestoreDetailsName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved restore details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabaseRestoreDetailsResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 RestoreDetailsNotAvailableOrExpired - Requested restore details are not available, or have expired.

             * 400 AutoCompleteMissingLastBackupName - Auto complete restore request must have lastBackupName parameter provided.

             * 400 MissingThumbprint - Can not find server certificate.

             * 400 BlobStorageServerFailure - Blob storage server failure has occurred.

             * 400 BackupSetNotFound - No backups were found to restore the database. Please contact support to restore the database.

             * 400 FullBackupNotFound - Full backup can not be found.

             * 400 RestoreFromStripedBackupsNotEnabled - Restoring from striped backups is not supported.

             * 400 BrokenRestorePlanNoFullBackup - The restore plan is broken because there is no full backup.

             * 400 BrokenRestorePlanWrongLogBackupLSN - The restore plan is broken because firstLsn of current log backup is not <= lastLsn of next log backup.

             * 400 BrokenRestorePlanWrongDiffBackupLSN - The restore plan is broken because firstLsn of diff backup is not >= firstLsn of full backup.

             * 400 BrokenRestorePlanGapInLogBackups - The restore plan is broken because firstLsn of current log backup is not equal to lastLsn of prev log backup.

             * 400 TargetServerDoesNotExist - The target server {0} does not exist or is not ready yet. Please check that it exists and retry the restore request.

             * 400 TargetServerRestoreNotAllowed - The target server {0} is currently not in a state that allows a restore to be started.

             * 400 XtpInitializedDuringRestore - Memory-optimized filegroup must be empty in order to be restored on General Purpose tier of SQL Database Managed Instance.

             * 400 FullBackupMissingChecksum - Provided full backup is missing checksum.

             * 400 FullBackupDamaged - Provided full backup is damaged.

             * 400 MissingStripeInBackupSet - Provided backup set has one or more missing stripes.

             * 400 BackupsFromMultipleDatabasesDetectedInTheContainerWhileRestoreInProgress - There are backups from multiple databases in the container folder. Please make sure the container folder has backups from a single database.{0}

             * 400 BrokenRestorePlanWrongDiffBaseGUID - The restore plan is broken because DifferentialBaseGuid of diff backup does not match BackupSetGuid of full backup.

             * 400 CorruptedPagesInBackupSet - Operation was aborted because RESTORE detected one or more corrupted pages in the backup set.

             * 400 ManagedIdentityIssueDetectedWhileRestoreInProgress - Managed identity is not set up properly. Please verify and try again.

             * 400 CorruptedPagesListMaintenance - Operation was aborted because an internal error occurred while processing the backup taken without checksum.

             * 400 PartiallyContainedDatabaseUnsupported - "Backup for a partially contained database is not supported."

             * 400 RequiredBackupIsNotLastRestored - Migration cannot be completed because provided backup file name is not the name of the last backup file that is restored.

             * 400 ManagedInstanceStorageLimitHit - The managed instance has reached its storage limit.

             * 400 IncompatiblePhysicalLayoutTooFewDataFiles - Database backup contains incompatible physical layout. No data files are found in the backup.

             * 400 IncompatiblePhysicalLayoutNonOnlineDataFilesExist - Database backup contains incompatible physical layout. Non-online data files exist.

             * 400 IncompatiblePhysicalLayoutWrongNumberOfLogFiles - Database backup contains incompatible physical layout. Multiple log files are not supported.

             * 400 IncompatiblePhysicalLayoutNonOnlineLogFilesExist - Database backup contains incompatible physical layout. Non-online log files exist.

             * 400 IncompatiblePhysicalLayoutTooManyNonDataLogFiles - Database backup contains incompatible physical layout. Too many non-data/log files.

             * 400 ExternalBackupAlreadySignaledToComplete - The restore request has already been signaled to complete.

             * 400 ExternalBackupRestoreHasNotBeenStarted - The restore request can only be completed once the restore has started.

             * 400 ExternalBackupUpgradeInProgress - The restore request cannot be completed, since upgrade is in progress.

             * 400 IncompatiblePhysicalLayoutTooManyXTPFiles - Database backup contains incompatible physical layout. Multiple files found in the filegroup that contains MEMORY_OPTIMIZED_DATA.

             * 400 BlobStorageFailure - Blob storage failure has occurred.

             * 400 BackupsFromMultipleDatabasesDetectedInTheContainerFromTheStart - There are backups from multiple databases in the container folder. Please make sure the container folder has backups from a single database.{0}

             * 400 ManagedIdentityIssueDetectedFromTheStart - Managed identity is not set up properly. Please verify and try again.

             * 400 BackupSetBroken - Backup set is broken.

             * 400 SqlRestoreError - Non retriable error occurred while restoring backup with index {0} - {1} {2}

             * 400 ManagedDatabaseNotInRestoringState - Managed database is not in Restoring state.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseVulnerabilityAssessments
      description: Gets the database's vulnerability assessment.
      operationId: DatabaseVulnerabilityAssessments_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database vulnerability assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessment'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentUnsupportedStorageAccount - The provided storage account is unsupported.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    put:
      tags:
        - DatabaseVulnerabilityAssessments
      description: Creates or updates the database's vulnerability assessment.
      operationId: DatabaseVulnerabilityAssessments_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested resource.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseVulnerabilityAssessment'
      responses:
        '200':
          description: Successfully set the vulnerability assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessment'
        '201':
          description: Successfully created the vulnerability assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessment'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentUnsupportedStorageAccount - The provided storage account is unsupported.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    delete:
      tags:
        - DatabaseVulnerabilityAssessments
      description: Removes the database's vulnerability assessment.
      operationId: DatabaseVulnerabilityAssessments_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully removed the database vulnerability assessment.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentUnsupportedStorageAccount - The provided storage account is unsupported.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseVulnerabilityAssessments
      description: Lists the vulnerability assessment policies associated with a database.
      operationId: DatabaseVulnerabilityAssessments_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database for which the vulnerability assessment policies are defined.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database vulnerability assessment policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/ledgerDigestUploads?api-version=2022-08-01-preview:
    get:
      tags:
        - ManagedLedgerDigestUploads
      description: Gets all ledger digest upload settings on a database.
      operationId: ManagedLedgerDigestUploads_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved ledger upload settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedLedgerDigestUploadsListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 LedgerInvalidDigestStorageTargetUpdateRequest - The database ledger digest storage upload request does not exist or has no properties object.

             * 400 InvalidDigestStorageEndpoint - The specified digestStorageEndpoint is invalid. It must be an Azure blob storage or Azure Confidential Ledger endpoint.

             * 400 MalformedDigestStorageEndpoint - The specified digest storage endpoint is a malformed URI.

             * 400 InvalidLedgerDigestUploadsName - The ledger digest upload name is not supported. Please use the key name “current”.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/ledgerDigestUploads/{ledgerDigestUploads}?api-version=2022-08-01-preview:
    get:
      tags:
        - ManagedLedgerDigestUploads
      description: Gets the current ledger digest upload configuration for a database.
      operationId: ManagedLedgerDigestUploads_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: ledgerDigestUploads
          in: path
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: ManagedLedgerDigestUploadsName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the ledger digest configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedLedgerDigestUploads'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 LedgerInvalidDigestStorageTargetUpdateRequest - The database ledger digest storage upload request does not exist or has no properties object.

             * 400 InvalidDigestStorageEndpoint - The specified digestStorageEndpoint is invalid. It must be an Azure blob storage or Azure Confidential Ledger endpoint.

             * 400 MalformedDigestStorageEndpoint - The specified digest storage endpoint is a malformed URI.

             * 400 InvalidLedgerDigestUploadsName - The ledger digest upload name is not supported. Please use the key name “current”.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
    put:
      tags:
        - ManagedLedgerDigestUploads
      description: Enables upload ledger digests to an Azure Storage account or an Azure Confidential Ledger instance.
      operationId: ManagedLedgerDigestUploads_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: ledgerDigestUploads
          in: path
          description: The name of the Ledger Digest Upload Configurations.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: ManagedLedgerDigestUploadsName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The Ledger Digest Storage Endpoint.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedLedgerDigestUploads'
      responses:
        '200':
          description: Successfully updated the ledger digest upload configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedLedgerDigestUploads'
        '202':
          description: Updating the ledger digest upload configuration is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 LedgerInvalidDigestStorageTargetUpdateRequest - The database ledger digest storage upload request does not exist or has no properties object.

             * 400 InvalidDigestStorageEndpoint - The specified digestStorageEndpoint is invalid. It must be an Azure blob storage or Azure Confidential Ledger endpoint.

             * 400 MalformedDigestStorageEndpoint - The specified digest storage endpoint is a malformed URI.

             * 400 InvalidLedgerDigestUploadsName - The ledger digest upload name is not supported. Please use the key name “current”.

             * 400 LedgerMissingDigestStorageEndPoint - User attempted to configure ledger digest storage without providing an endpoint

             * 400 LedgerException - The server encountered an unexpected exception

             * 400 LedgerDigestUploadsNotSupportedOnGeoSecondary - The ledger digest storage cannot be configured on secondary databases.

             * 400 InsufficientStorageAccountPermissions - Read or write operations are not allowed on the storage account.

             * 400 StorageAccountIsDisabled - The storage account is disabled.

             * 400 InvalidStorageAccountName - The specified storage account is not valid or does not exist.

             * 400 PreviousOperationInProgress - Uploading ledger digests is being enabled or disabled for database. Please wait for the previous request to complete.

             * 400 NoServerIdentity - No identity is configured for specified server. For information on how to configure an identity for the server see https://go.microsoft.com/fwlink/?linkid=2156804

             * 400 SubscriptionDoesNotHaveServer - Subscription does not contain server.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered. The error message from Active Directory Authentication library (ADAL) is {0}.

             * 400 LedgerDigestUploadIsNotSupportedOnResourceType - Uploading ledger digests is currently not supported for this resource type.

             * 400 InvalidOperationOnNamedReplicas - The ledger digest storage cannot be configured on a named replica.

             * 400 LedgerDigestUploadsNotSupportedOnGeoChaining - User attempted to set automatic upload of ledger digest in database configured with secondaries of secondaries.

             * 400 InvalidDigestStorageEndpoint - The specified digestStorageEndpoint is invalid. It must be an Azure blob storage or Azure Confidential Ledger endpoint.

             * 400 InvalidStorageAccountName - The specified storage account is not valid or does not exist.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SourceDatabaseNotFound - Specified database does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/ledgerDigestUploads/{ledgerDigestUploads}/disable?api-version=2022-08-01-preview:
    post:
      tags:
        - ManagedLedgerDigestUploads
      description: Disables uploading ledger digests to an Azure Storage account or an Azure Confidential Ledger instance.
      operationId: ManagedLedgerDigestUploads_Disable
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: ledgerDigestUploads
          in: path
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: ManagedLedgerDigestUploadsName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully disabled uploading ledger digests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedLedgerDigestUploads'
        '202':
          description: Disabling the ledger digest upload is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 LedgerInvalidDigestStorageTargetUpdateRequest - The database ledger digest storage upload request does not exist or has no properties object.

             * 400 InvalidDigestStorageEndpoint - The specified digestStorageEndpoint is invalid. It must be an Azure blob storage or Azure Confidential Ledger endpoint.

             * 400 MalformedDigestStorageEndpoint - The specified digest storage endpoint is a malformed URI.

             * 400 InvalidLedgerDigestUploadsName - The ledger digest upload name is not supported. Please use the key name “current”.

             * 400 LedgerMissingDigestStorageEndPoint - User attempted to configure ledger digest storage without providing an endpoint

             * 400 LedgerException - The server encountered an unexpected exception

             * 400 LedgerDigestUploadsNotSupportedOnGeoSecondary - The ledger digest storage cannot be configured on secondary databases.

             * 400 InsufficientStorageAccountPermissions - Read or write operations are not allowed on the storage account.

             * 400 StorageAccountIsDisabled - The storage account is disabled.

             * 400 InvalidStorageAccountName - The specified storage account is not valid or does not exist.

             * 400 PreviousOperationInProgress - Uploading ledger digests is being enabled or disabled for database. Please wait for the previous request to complete.

             * 400 NoServerIdentity - No identity is configured for specified server. For information on how to configure an identity for the server see https://go.microsoft.com/fwlink/?linkid=2156804

             * 400 SubscriptionDoesNotHaveServer - Subscription does not contain server.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered. The error message from Active Directory Authentication library (ADAL) is {0}.

             * 400 LedgerDigestUploadIsNotSupportedOnResourceType - Uploading ledger digests is currently not supported for this resource type.

             * 400 InvalidOperationOnNamedReplicas - The ledger digest storage cannot be configured on a named replica.

             * 400 LedgerDigestUploadsNotSupportedOnGeoChaining - User attempted to set automatic upload of ledger digest in database configured with secondaries of secondaries.

             * 400 InvalidDigestStorageEndpoint - The specified digestStorageEndpoint is invalid. It must be an Azure blob storage or Azure Confidential Ledger endpoint.

             * 400 InvalidStorageAccountName - The specified storage account is not valid or does not exist.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SourceDatabaseNotFound - Specified database does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/securityAlertPolicies/{securityAlertPolicyName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedServerSecurityAlertPolicies
      description: Get a managed server's threat detection policy.
      operationId: ManagedServerSecurityAlertPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: securityAlertPolicyName
          in: path
          description: The name of the security alert policy.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: SecurityAlertPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the managed server threat detection policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedServerSecurityAlertPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAlertPoliciesInvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 SecurityAlertPoliciesInvalidStorageAccountCredentials - The provided storage account access key is not valid.

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting server Threat Detection settings is not allowed on a server with a paused Data Warehouse database

             * 400 SecurityAlertPoliciesInsufficientDiskSpace - Insufficient disk space to save security alert policy metadata in the database

             * 400 SecurityAlertPoliciesInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

             * 400 SecurityAlertPoliciesStorageAccountIsDisabled - The storage account provided in the threat detection policy is disabled.

             * 400 InvalidServerSecurityAlertPolicyCreateRequest - The create server Threat Detection security alert policy request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 409 ServerSecurityAlertPolicyInProgress - Set server security alert policy is already in progress

             * 409 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 GetServerSecurityAlertPolicyFailed - Failed to get Threat Detection settings
    put:
      tags:
        - ManagedServerSecurityAlertPolicies
      description: Creates or updates a threat detection policy.
      operationId: ManagedServerSecurityAlertPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: securityAlertPolicyName
          in: path
          description: The name of the security alert policy.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: SecurityAlertPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The managed server security alert policy.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedServerSecurityAlertPolicy'
      responses:
        '200':
          description: Successfully updated the threat detection policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedServerSecurityAlertPolicy'
        '202':
          description: Created request to set the server threat detection policy.
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAlertPoliciesInvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 SecurityAlertPoliciesInvalidStorageAccountCredentials - The provided storage account access key is not valid.

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting server Threat Detection settings is not allowed on a server with a paused Data Warehouse database

             * 400 SecurityAlertPoliciesInsufficientDiskSpace - Insufficient disk space to save security alert policy metadata in the database

             * 400 SecurityAlertPoliciesInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

             * 400 SecurityAlertPoliciesStorageAccountIsDisabled - The storage account provided in the threat detection policy is disabled.

             * 400 InvalidServerSecurityAlertPolicyCreateRequest - The create server Threat Detection security alert policy request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 409 ServerSecurityAlertPolicyInProgress - Set server security alert policy is already in progress

             * 409 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/securityAlertPolicies?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedServerSecurityAlertPolicies
      description: Get the managed server's threat detection policies.
      operationId: ManagedServerSecurityAlertPoliciesByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the managed server threat detection policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedServerSecurityAlertPolicyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAlertPoliciesInvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 SecurityAlertPoliciesInvalidStorageAccountCredentials - The provided storage account access key is not valid.

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting server Threat Detection settings is not allowed on a server with a paused Data Warehouse database

             * 400 SecurityAlertPoliciesInsufficientDiskSpace - Insufficient disk space to save security alert policy metadata in the database

             * 400 SecurityAlertPoliciesInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

             * 400 SecurityAlertPoliciesStorageAccountIsDisabled - The storage account provided in the threat detection policy is disabled.

             * 400 InvalidServerSecurityAlertPolicyCreateRequest - The create server Threat Detection security alert policy request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 409 ServerSecurityAlertPolicyInProgress - Set server security alert policy is already in progress

             * 409 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 GetServerSecurityAlertPolicyFailed - Failed to get Threat Detection settings
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedServerSecurityAlertPolicies_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseAdvisors
      description: Gets a list of database advisors.
      operationId: DatabaseAdvisors_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: $expand
          in: query
          description: The child resources to include in the response.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of database advisors.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Advisor'
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 DataWarehouseNotSupported - Automatic tuning is not supported for SQL Data Warehouse.

             * 404 DatabaseDoesNotExist - The requested database was not found

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SubscriptionDoesNotHaveElasticPool - The requested elastic pool was not found

             * 404 AdvisorNotFound - The requested advisor was not found.

             * 405 NotSupported - This functionality is not supported.

             * 409 Conflict - Request could not be processed because of conflict in the request.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseAdvisors
      description: Gets a database advisor.
      operationId: DatabaseAdvisors_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: advisorName
          in: path
          description: The name of the Database Advisor.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved details of specified database advisor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advisor'
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 DataWarehouseNotSupported - Automatic tuning is not supported for SQL Data Warehouse.

             * 404 DatabaseDoesNotExist - The requested database was not found

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SubscriptionDoesNotHaveElasticPool - The requested elastic pool was not found

             * 404 AdvisorNotFound - The requested advisor was not found.

             * 405 NotSupported - This functionality is not supported.

             * 409 Conflict - Request could not be processed because of conflict in the request.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.
    patch:
      tags:
        - DatabaseAdvisors
      description: Updates a database advisor.
      operationId: DatabaseAdvisors_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: advisorName
          in: path
          description: The name of the Database Advisor.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested advisor resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Advisor'
      responses:
        '200':
          description: Successfully updated the specified database advisor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advisor'
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 DataWarehouseNotSupported - Automatic tuning is not supported for SQL Data Warehouse.

             * 400 InvalidAdvisorUpsertRequest - The update advisor request body does not exist or has no properties object.

             * 400 InvalidAdvisorAutoExecuteStatus - Specified auto-execute status for the advisor is not allowed.

             * 404 DatabaseDoesNotExist - The requested database was not found

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SubscriptionDoesNotHaveElasticPool - The requested elastic pool was not found

             * 404 AdvisorNotFound - The requested advisor was not found.

             * 404 AutomaticTuningOptionNotFound - The requested automatic tuning option was not found.

             * 405 NotSupported - This functionality is not supported.

             * 409 Conflict - Request could not be processed because of conflict in the request.

             * 409 DisabledBySystem - This option is disabled by system

             * 409 DefaultAdvisorStateNotAllowedInCustomDbMode - DEFAULT advisor state is not allowed in CUSTOM mode

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies?api-version=2023-05-01-preview:
    get:
      tags:
        - LongTermRetentionPolicies
      description: Gets a database's long term retention policy.
      operationId: LongTermRetentionPolicies_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully get the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionPolicyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 LtrConfigPolicyUnsupportedIfAutoPauseEnabled - Enabling long-term backup retention for a serverless database is not supported if auto-pause is enabled.

             * 400 LtrConfigPolicyDuringVldbMigration - Enabling long-term backup retention for a database during migration to the Hyperscale service tier is not supported.

             * 400 LtrConfigPolicyDuringVldbReverseMigration - Enabling long-term backup retention for a database during a reverse migration from Hyperscale is not supported.

             * 400 DatabaseNamedReplicaBackupRetentionConfigurationNotSupported - User attempted configuring backup retention policy on a Named Replica.

             * 400 LTRHyperscaleSetPolicyError - An error has occurred while enabling Long-term backup retention for this database. Please reach out to Microsoft support to enable long-term backup retention.

             * 400 LTRNotSupportedForPerDBCMK - Long-term Backup Retention is not supported when Database-level CMK is configured in preview.

             * 400 LTRArchiveStorageDisabledOnHyperscaleEdition - Archiving long-term retention backups on Hyperscale databases is not enabled.

             * 400 LongTermRetentionPolicyNotSupported - Long Term Retention is not supported on this database.

             * 400 LTRArchiveStorageFailedOnZoneRedundantBackupStorage - Setting a long-term retention policy with the backup storage access tier set to 'archive' is not supported on zone-redundant backup storage. Use either locally redundant or geo-redundant storage types.

             * 400 LongTermRetentionPolicyInvalid - Long Term Retention policy is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 409 ConflictingServerOperation - Server '{0}' is busy with another operation. Please try your operation later.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/backupLongTermRetentionPolicies/{policyName}?api-version=2023-05-01-preview:
    get:
      tags:
        - LongTermRetentionPolicies
      description: Gets a database's long term retention policy.
      operationId: LongTermRetentionPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: policyName
          in: path
          description: The policy name. Should always be Default.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: LongTermRetentionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully get the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 LtrConfigPolicyUnsupportedIfAutoPauseEnabled - Enabling long-term backup retention for a serverless database is not supported if auto-pause is enabled.

             * 400 LtrConfigPolicyDuringVldbMigration - Enabling long-term backup retention for a database during migration to the Hyperscale service tier is not supported.

             * 400 LtrConfigPolicyDuringVldbReverseMigration - Enabling long-term backup retention for a database during a reverse migration from Hyperscale is not supported.

             * 400 DatabaseNamedReplicaBackupRetentionConfigurationNotSupported - User attempted configuring backup retention policy on a Named Replica.

             * 400 LTRHyperscaleSetPolicyError - An error has occurred while enabling Long-term backup retention for this database. Please reach out to Microsoft support to enable long-term backup retention.

             * 400 LTRNotSupportedForPerDBCMK - Long-term Backup Retention is not supported when Database-level CMK is configured in preview.

             * 400 LTRArchiveStorageDisabledOnHyperscaleEdition - Archiving long-term retention backups on Hyperscale databases is not enabled.

             * 400 LongTermRetentionPolicyNotSupported - Long Term Retention is not supported on this database.

             * 400 LTRArchiveStorageFailedOnZoneRedundantBackupStorage - Setting a long-term retention policy with the backup storage access tier set to 'archive' is not supported on zone-redundant backup storage. Use either locally redundant or geo-redundant storage types.

             * 400 LongTermRetentionPolicyInvalid - Long Term Retention policy is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 409 ConflictingServerOperation - Server '{0}' is busy with another operation. Please try your operation later.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - LongTermRetentionPolicies
      description: Set or update a database's long term retention policy.
      operationId: LongTermRetentionPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: policyName
          in: path
          description: The policy name. Should always be Default.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: LongTermRetentionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The long term retention policy info.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LongTermRetentionPolicy'
      responses:
        '200':
          description: Successfully updated the policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionPolicy'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 LongTermRetentionMissingWeekOfYear - WeekOfYear is required to be set between 1 and 52 in order to set yearly retention.

             * 400 LtrConfigPolicyUnsupportedIfAutoPauseEnabled - Enabling long-term backup retention for a serverless database is not supported if auto-pause is enabled.

             * 400 LtrConfigPolicyDuringVldbMigration - Enabling long-term backup retention for a database during migration to the Hyperscale service tier is not supported.

             * 400 LtrConfigPolicyDuringVldbReverseMigration - Enabling long-term backup retention for a database during a reverse migration from Hyperscale is not supported.

             * 400 DatabaseNamedReplicaBackupRetentionConfigurationNotSupported - User attempted configuring backup retention policy on a Named Replica.

             * 400 LTRHyperscaleSetPolicyError - An error has occurred while enabling Long-term backup retention for this database. Please reach out to Microsoft support to enable long-term backup retention.

             * 400 LTRNotSupportedForPerDBCMK - Long-term Backup Retention is not supported when Database-level CMK is configured in preview.

             * 400 LTRArchiveStorageDisabledOnHyperscaleEdition - Archiving long-term retention backups on Hyperscale databases is not enabled.

             * 400 LongTermRetentionPolicyNotSupported - Long Term Retention is not supported on this database.

             * 400 LTRArchiveStorageFailedOnZoneRedundantBackupStorage - Setting a long-term retention policy with the backup storage access tier set to 'archive' is not supported on zone-redundant backup storage. Use either locally redundant or geo-redundant storage types.

             * 400 LongTermRetentionPolicyInvalid - Long Term Retention policy is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ConflictingServerOperation - Server '{0}' is busy with another operation. Please try your operation later.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/privateLinkResources?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstancePrivateLinkResources
      description: Gets the private link resources for SQL server.
      operationId: ManagedInstancePrivateLinkResourcesByManagedInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved private link resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstancePrivateLinkListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedInstancePrivateLinkResources_ListByManagedInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/privateLinkResources/{groupName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstancePrivateLinkResources
      description: Gets a private link resource for SQL server.
      operationId: ManagedInstancePrivateLinkResources_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: groupName
          in: path
          description: The name of the private link resource.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved private link resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstancePrivateLink'
        default:
          description: |-
            *** Error Responses: ***

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/operations?api-version=2022-11-01-preview:
    get:
      tags:
        - DatabaseOperations
      description: Gets a list of operations performed on the database.
      operationId: DatabaseOperations_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: The request for getting database operations has been executed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseOperationListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 UnsupportedBackupStorageRedundancy - Specified Backup Storage Redundancy is not supported in target region.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 CannotUpdateIsLedgerDatabase - The ledger property of an existing database cannot be updated.

             * 400 LTRSterlingToVldbMigrationNotSupported - Cannot change service objective for database  to Hyperscale as long-term retention is not yet supported on Hyperscale. Please disable long-term retention on the database and retry.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 UpdateNotAllowedInCurrentReplicationState - The operation is disallowed on the database in its current replication state.

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.

             * 400 MaintenanceWindowNotSupportedForNamedReplica - User tried to create or update named replica with non-default maintenance window which is not supported.

             * 400 ReplicationSourceAndTargetMustHaveSameName - The replication source and target databases must have the same name.

             * 400 ReplicationSourceAndTargetMustBeInDifferentServers - The replication source and target databases must be in different logical servers.

             * 400 ChangeUnsupportedOnEntity - User attempted an unsupported create/update/delete operation on a given entity.

             * 400 InvalidStandbyGeoReadScale - User attempted to enable read scale on a standby geo database that does not support it.

             * 400 PerDatabaseCMKKeyRotationAttemptedWhileOldThumbprintInUse - Key Rotation for the TDE Protector at the database level is blocked when active transactions are holding up the log encrypted with old keys. Please refer to aka.ms/azuresqldbkeyrotation for possible strategies to workaround this issue.

             * 400 TierChangeUnsupportedDueToCDCEnabledDatabase - The database cannot update its sku because it is enabled for CDC.

             * 400 PerDBCMKNotSupportedWithLTR - Database-level CMK is not supported when Long-term Backup Retention is enabled on the database.

             * 400 PerDatabaseCMKCopyOrReplicationAttemptedWithoutDatabaseLevelEncryptionProtector - Database-level encryption protector must be set on the target database while attempting to copy or replicate a database encrypted with a database level key.

             * 400 PerDatabaseCMKCopyOrReplicationAttemptedWithoutCurrentKeys - While attempting to replicate a database configured with database level encryption protector, the current keys being used by the primary must be passed to the secondary database.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 PerDatabaseCMKGeoPrimaryIsNotConfiguredWithDatabaseLevelEncryptionProtector - The geo-primary database must be configured with a database level encryption protector before setting a database level encryption protector on the geo-secondary.

             * 400 PerDatabaseCMKGeoPrimaryIsConfiguredWithDatabaseLevelEncryptionProtector - The geo-primary database must not be configured with a database level encryption protector when failing over to a geo-secondary without a database level encryption protector.

             * 400 TierChangeUnsupportedDueToMemoryOptimizedObject - The database cannot update its sku because it has memory-optimized objects.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 InvalidDatabaseCreateMode - Invalid request to create a database.

             * 400 MissingAsymmetricKeyOnTargetServer - Target server does not have access to an asymmetric key.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MultipleDroppedDatabasesWithTheSameName - Found multiple dropped databases with the same name on server.

             * 400 AzureKeyVaultClientError - The Azure Key Vault client encountered an error.

             * 400 AzureKeyVaultClientInfoError - An error occurred while obtaining information for the Azure Key Vault client.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 TokenTooLong - The provided token is too long.

             * 400 IsLedgerDatabaseIsNotSupportedOnResourceType - Changing the ledger property is not supported for this resource type.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 OfferDisabledOnSubscription - Subscription offer type is restricted from provisioning the requested resource.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 UnableToCreateGeoChain - User attempted to create secondary database (chaining) even though automatic upload of ledger digests has been configured

             * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 TargetElasticPoolDoesNotExist - The elastic pool does not exist on a server.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 ElasticPoolSkuCombinationInvalid - Elastic pool and sku can be specified together only if sku is specified as 'ElasticPool'.

             * 400 ElasticPoolTierCombinationInvalid - The database tier is different than the elastic pool service tier.

             * 400 ElasticPoolNameRequired - User tried to create or update database to elastic pool service objective without specifying the name of the elastic pool.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 InvalidReadScaleEdition - User attempted to enable read scale on a database type that does not support it.

             * 400 InvalidReadScaleUnits - User attempted to provide a read scale value that is not supported.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 ElasticPoolDatabaseCountOverLimit - Attempting to create or add database to elastic pool when the database count limit of the elastic pool has been reached.

             * 400 CannotChangeToOrFromDataWarehouseTier - User attempted to change the sku of a database from DataWarehouse tier to non DataWarehouse tiers or vice versa.

             * 400 GeoSecondaryMaxSizeUpdateFailed - The geo-secondary database is of a SLO that does not support the requested maxsize value or the geo-secondary is in an unsupported region or an update operation is already in progress on the geo-secondary database.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 RequestedDatabaseSizeRequiresShrink - User attempted to ALTER DATABASE MODIFY MAXSIZE to modify the MAXSIZE for a database to a smaller size then the current size.

             * 400 CurrentDatabaseSizeExceedsDbMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 UnsupportedCapacity - User tried to create or update database with capacity which is not supported.

             * 400 RestoreToFreeEditionNotSupported - Restore and GeoRestore target cannot be free database.

             * 400 RestoreNotSupportedForFreeEdition - Restore and GeoRestore are not supported for free database.

             * 400 InvalidDroppedDatabase - Source database dropped does not exist on server within the supported recovery period.

             * 400 InvalidLiveDatabase - Source database does not exist on server within the supported recovery period. If restoring a dropped database, please specify its deletion date.

             * 400 InvalidVldbRecoverySlo - The Hyperscale edition recovery requires both source and target databases to use Hyperscale service level objective.

             * 400 InvalidVldbRestoreSlo - The Hyperscale edition Point-In-Time restore requires both source and target databases to use Hyperscale service level objective.

             * 400 CannotSpecifyPoolOrSlo - Specifying an elastic pool and/or changing the service level objective or edition is not supported for edition.

             * 400 CannotMoveOrDropJobAccountDatabase - Cannot drop database associated with job account.

             * 400 JobAgentDatabaseEditionUnsupported - The specified database's service level objective is not supported for use as a job agent database.

             * 400 CannotUpdateToFreeDatabase - Updating a database to the free sku is not supported.

             * 400 InvalidBackupStorageAccountType - User passed zrs/lrs during create/update of a database but it failed either because the customer is not whitelisted or because zrs is not available in the specified region.

             * 400 DatabaseInvalidSkuPropertyCombination - The properties of the requested sku are inconsistent. Please check that a valid combination is specified. See https://docs.microsoft.com/en-us/rest/api/sql/capabilities/listbylocation#serviceobjectivecapability for more details.

             * 400 DatabaseNamedReplicaPerDatabaseLimitExceeded - User tried create a named replica that would exceed the allowed number per primary database

             * 400 UnsupportedBackupStorageRedundancyForEdition - The requested backup storage redundancy is not supported for edition

             * 400 DatabaseIsCurrentlyPinned - Microsoft has pinned your database SQL Server engine version. To ensure your database does not hit production issues, any future scale operations on your database will be blocked until it has been un-pinned. Please contact Microsoft support for assistance with scaling.

             * 400 RestoreTargetEditionSizeInsufficient - User attempted to restore a database to an edition that is a smaller size than the current allocated size of the source.

             * 400 InvalidIdentityId - One or more identity id(s) provided are not valid ARM resource id(s). Please input valid id(s) and try again.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 DatabaseCreationBlockedForNonActivatedCMKServer - SQL Pool creations are blocked for CMK enabled workspaces until the workspace is activated. First, enable purge protection and grant the workspace Managed Identity the required permissions (Get, Wrap Key, Unwrap Key) on the Azure Key Vault of the workspace key.  Next, activate your workspace after you have granted access.

             * 400 InvalidNumberOfIdentities - Only one user assigned managed identity is supported at the Database Level.

             * 400 NoRestorePointAvailable - The source database has not yet accomplished its first backup in order to support restore operations. Please retry the restore request later.

             * 400 DatabaseNamedReplicaChainingNotAllowed - User tried to create a named replica of a named replica which is not allowed.

             * 400 DatabaseNamedReplicaInvalidOperation - User attempted an unsupported operation on a named replica.

             * 400 ServerNotFound - The requested server was not found.

             * 400 DatabaseNamedReplicaInvalidSourceDatabase - User attempted to create a named replica in a different subscription or region than the source database.

             * 400 CannotAssignIdentityToMaster - Cannot assign an identity to a system database. Database identity cannot be assigned to 'master', 'model', 'tempdb', 'msdb', or 'resource' databases.

             * 400 PerDatabaseCMKDWNotSupported - Database-level CMK in preview is not supported for Datawarehouse edition.

             * 400 CannotMoveOrDropSyncMetadataDatabase - Cannot drop database used as sync metadata database.

             * 400 MissingThumbprintCrm - The restore operation of a CRM database failed because a required TDE certificate was missing. Please retry the restore operation to an existing elastic pool.

             * 400 ElasticPoolOverStorage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 RestoreTargetEditionSizeInsufficientV2 - User attempted to restore a database to an edition that is a smaller size than the allocated size of the restored database.

             * 400 ResourcePoolStorageLimitHitDuringRestore - The restored database can't be restored into the resource pool due to the remaining storage capacity in the pool.

             * 400 PerDatabaseCMKRestoreNotSupported - Database restore is not supported when Database-level CMK is configured in preview.

             * 400 PerDatabaseCMKHSNotSupported - Database-level CMK in preview is not supported for Hyperscale edition.

             * 400 PerDatabaseCMKGeoReplicationNotSupported - Geo Replication and Database Copy is not supported when Database-level CMK is configured in preview.

             * 400 InvalidStandbyGeoEdition - User attempted to create a DTU based standby geo.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 GeoRestoreBackupStorageTypeNotSupported - Database recovery requests are invalid when issued against a database that is not configured to use geo-redundant backup storage.

             * 400 RestoreHyperscaleToNonHyperscale - Restoring a Hyperscale database backup to a non-Hyperscale service tier or vice versa is not supported.

             * 400 SubscriptionDoesNotHaveAccessToServer - The subscription does not have access to the specified server(s)

             * 400 RecoveryPointDoesNotExist - The specified recovery point either does not exist or is not valid.

             * 400 LtrBackupNotFound - The specified long term retention backup does not exist.

             * 400 InvalidPointInTime - The specified point in time is not valid for the database.

             * 400 GeoRestoreCannotResolveTargetCluster - Cannot resolve target cluster for server

             * 400 CannotSpecifyEditionOrSloWhenRestoringToPool - Specifying the target service level objective or edition is not supported when restoring to an elastic pool.

             * 400 RestoreNotSupportedForGeoDrSecondary - Point-in-time restore and database recovery operations are not supported on databases that are currently configured as geo-secondaries.

             * 400 DatabaseNamedReplicaBackupRetentionConfigurationNotSupported - User attempted configuring backup retention policy on a Named Replica.

             * 400 GeoRedundantBackupsNotPermittedForSubscription - Geo-redundant backup storage is blocked for all databases under subscription '{0}' by preview feature 'Azure SQL Database Block Geo-redundant Backup Storage'. Please select a different backup storage redundancy.

             * 400 RestoreHyperscaleToNonHyperscaleElasticPool - Restoring a Hyperscale database to an elastic pool which is not Hyperscale or restoring a database which is not Hyperscale to a Hyperscale elastic pool is not supported.

             * 400 RestoreIneligibleDatabaseName - The specified target database name, '{0}', is reserved and cannot be used in a restore operation.

             * 400 RestoreNotSupportedForSystemDb - Restore and database recovery are not supported for system databases.

             * 400 RestoreIneligibleDroppedDatabaseShortLifespan - The source database, '{0}', dropped on '{1}', has not existed long enough to support restores.

             * 400 RestoreIneligibleLiveDatabaseShortLifespan - The source database, '{0}', has not yet accomplished its first backup in order to support restore operations. Please wait until at least the indicated earliest restore date '{1}' and resubmit the request.

             * 400 RestoreCrossServerDisabled - For point-in-time restores, the target logical server must be the same as the source logical server. Consider restoring to the source database's server, or using database copy or database recovery.

             * 400 InvalidMaxSizeTierCombination - The specified tier does not support the specified database max size.

             * 400 RestoreSameServerRecoveryDisabled - Same-server recovery is currently not supported. Consider using point-in-time restore or recovering to a different server.

             * 400 RestoreNotSupportedFromLtrBackupToEdition - Restore from long-term retention backup to '{0}' edition not supported.

             * 400 RestoreNotSupportedFromExternalBackupToEdition - Restore from external backup to '{0}' edition not supported.

             * 400 UpdateToServerlessIfLtrIsNotDisabled - Enabling auto-pause for a serverless database is not supported if long-term backup retention is enabled.

             * 400 DuplicateRestoreOperation - A restore request with the same target database name '{0}' on server '{1}' already exists.

             * 400 ExternalBackupUriMalformed - The external backup storage container URI is malformed.

             * 400 ExternalBackupUriHostNotAllowed - The host name for the external backup storage container URI is not allowed.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 ExternalBackupUriInvalidSchemeOrPort - The external backup storage container URI uses an invalid scheme or port. Please use https and port 443.

             * 400 ExternalBackupVldbUnsupported - Hyperscale does not support external backup restore requests.

             * 400 InvalidPitrPriorToVldbMigration - For database '{0}', specified point-in-time '{1}' is prior to the Hyperscale migration time of '{2}'. Please specify a target edition or service level objective which is not Hyperscale when restoring to a point earlier than the Hyperscale migration.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 LedgerNoDropPrimary - The Geo-primary database cannot be dropped because the database has Ledger Digest Uploads enabled. Disable Ledger Digest Uploads and retry the operation.

             * 400 CannotDropDatabaseAKVError - The database {0} on server {1} cannot be safely dropped because it is encrypted with a customer managed key that is no longer accessible to take the last backup before drop. Please restore Azure Key Vault Access on the server and revalidate the keys to make this database accessible and then proceed with the drop. For details see https://aka.ms/tdecmkrestorability

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 CannotMoveOrDropJobAccountDatabase - Cannot drop database associated with job account.

             * 400 CannotMoveOrDropSyncMetadataDatabase - Cannot drop database used as sync metadata database.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 InvalidOperationForDatabaseInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 FreeDbAlreadyExists - Only one free database can exist for a subscription per region.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 SkuAssignmentInProgress - The current assignment request cannot be processed because a previous request has not completed.

             * 409 CurrentMemoryUsageExceedsSkuQuota - User attempted an sku update operation that cannot be completed due to the higher resource consumption.

             * 409 ServerDtuQuotaExceeded - Could not perform the operation because server would exceed the allowed Database Throughput Unit quota.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 UnableToAlterDatabaseInReplication - User altered edition on a database in a replication relationship.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 UpdateSloFailedDatabaseTooBusy - Update SLO operation could not complete because database was too busy.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 ElasticPoolBusy - A management operation was attempted on an elastic pool which is busy.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 TargetElasticPoolBeingUpdated - The update of elastic pool cannot be started because there is copy operation in progress for one of the databases in this elastic pool

             * 409 DatabaseCopyLimitPerReplicaReached - User reached the limit of concurrent database copies.

             * 409 ConflictRequestToUpdateBackupRedundancy - A conflict request to change backup storage redundancy is still in progress.

             * 409 DatabaseElasticPoolMaintenanceConflict - User tried to create or update a database with a specified maintenance configuration that conflicted with that of the elastic pool of the database.

             * 409 SubscriptionVcoreQuotaExceeded - Could not perform the operation because subscription would exceed the allowed vCore quota.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/operations/{operationId}/cancel?api-version=2022-11-01-preview:
    post:
      tags:
        - DatabaseOperations
      description: Cancels the asynchronous operation on the database.
      operationId: DatabaseOperations_Cancel
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: operationId
          in: path
          description: The operation identifier.
          required: true
          schema:
            format: uuid
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: The request for cancel has been executed successfully.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 UnsupportedBackupStorageRedundancy - Specified Backup Storage Redundancy is not supported in target region.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 CannotUpdateIsLedgerDatabase - The ledger property of an existing database cannot be updated.

             * 400 LTRSterlingToVldbMigrationNotSupported - Cannot change service objective for database  to Hyperscale as long-term retention is not yet supported on Hyperscale. Please disable long-term retention on the database and retry.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 UpdateNotAllowedInCurrentReplicationState - The operation is disallowed on the database in its current replication state.

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.

             * 400 MaintenanceWindowNotSupportedForNamedReplica - User tried to create or update named replica with non-default maintenance window which is not supported.

             * 400 ReplicationSourceAndTargetMustHaveSameName - The replication source and target databases must have the same name.

             * 400 ReplicationSourceAndTargetMustBeInDifferentServers - The replication source and target databases must be in different logical servers.

             * 400 ChangeUnsupportedOnEntity - User attempted an unsupported create/update/delete operation on a given entity.

             * 400 InvalidStandbyGeoReadScale - User attempted to enable read scale on a standby geo database that does not support it.

             * 400 PerDatabaseCMKKeyRotationAttemptedWhileOldThumbprintInUse - Key Rotation for the TDE Protector at the database level is blocked when active transactions are holding up the log encrypted with old keys. Please refer to aka.ms/azuresqldbkeyrotation for possible strategies to workaround this issue.

             * 400 TierChangeUnsupportedDueToCDCEnabledDatabase - The database cannot update its sku because it is enabled for CDC.

             * 400 PerDBCMKNotSupportedWithLTR - Database-level CMK is not supported when Long-term Backup Retention is enabled on the database.

             * 400 PerDatabaseCMKCopyOrReplicationAttemptedWithoutDatabaseLevelEncryptionProtector - Database-level encryption protector must be set on the target database while attempting to copy or replicate a database encrypted with a database level key.

             * 400 PerDatabaseCMKCopyOrReplicationAttemptedWithoutCurrentKeys - While attempting to replicate a database configured with database level encryption protector, the current keys being used by the primary must be passed to the secondary database.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 PerDatabaseCMKGeoPrimaryIsNotConfiguredWithDatabaseLevelEncryptionProtector - The geo-primary database must be configured with a database level encryption protector before setting a database level encryption protector on the geo-secondary.

             * 400 PerDatabaseCMKGeoPrimaryIsConfiguredWithDatabaseLevelEncryptionProtector - The geo-primary database must not be configured with a database level encryption protector when failing over to a geo-secondary without a database level encryption protector.

             * 400 TierChangeUnsupportedDueToMemoryOptimizedObject - The database cannot update its sku because it has memory-optimized objects.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 InvalidDatabaseCreateMode - Invalid request to create a database.

             * 400 MissingAsymmetricKeyOnTargetServer - Target server does not have access to an asymmetric key.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MultipleDroppedDatabasesWithTheSameName - Found multiple dropped databases with the same name on server.

             * 400 AzureKeyVaultClientError - The Azure Key Vault client encountered an error.

             * 400 AzureKeyVaultClientInfoError - An error occurred while obtaining information for the Azure Key Vault client.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 TokenTooLong - The provided token is too long.

             * 400 IsLedgerDatabaseIsNotSupportedOnResourceType - Changing the ledger property is not supported for this resource type.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 OfferDisabledOnSubscription - Subscription offer type is restricted from provisioning the requested resource.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 UnableToCreateGeoChain - User attempted to create secondary database (chaining) even though automatic upload of ledger digests has been configured

             * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 TargetElasticPoolDoesNotExist - The elastic pool does not exist on a server.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 ElasticPoolSkuCombinationInvalid - Elastic pool and sku can be specified together only if sku is specified as 'ElasticPool'.

             * 400 ElasticPoolTierCombinationInvalid - The database tier is different than the elastic pool service tier.

             * 400 ElasticPoolNameRequired - User tried to create or update database to elastic pool service objective without specifying the name of the elastic pool.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 InvalidReadScaleEdition - User attempted to enable read scale on a database type that does not support it.

             * 400 InvalidReadScaleUnits - User attempted to provide a read scale value that is not supported.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 ElasticPoolDatabaseCountOverLimit - Attempting to create or add database to elastic pool when the database count limit of the elastic pool has been reached.

             * 400 CannotChangeToOrFromDataWarehouseTier - User attempted to change the sku of a database from DataWarehouse tier to non DataWarehouse tiers or vice versa.

             * 400 GeoSecondaryMaxSizeUpdateFailed - The geo-secondary database is of a SLO that does not support the requested maxsize value or the geo-secondary is in an unsupported region or an update operation is already in progress on the geo-secondary database.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 RequestedDatabaseSizeRequiresShrink - User attempted to ALTER DATABASE MODIFY MAXSIZE to modify the MAXSIZE for a database to a smaller size then the current size.

             * 400 CurrentDatabaseSizeExceedsDbMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 UnsupportedCapacity - User tried to create or update database with capacity which is not supported.

             * 400 RestoreToFreeEditionNotSupported - Restore and GeoRestore target cannot be free database.

             * 400 RestoreNotSupportedForFreeEdition - Restore and GeoRestore are not supported for free database.

             * 400 InvalidDroppedDatabase - Source database dropped does not exist on server within the supported recovery period.

             * 400 InvalidLiveDatabase - Source database does not exist on server within the supported recovery period. If restoring a dropped database, please specify its deletion date.

             * 400 InvalidVldbRecoverySlo - The Hyperscale edition recovery requires both source and target databases to use Hyperscale service level objective.

             * 400 InvalidVldbRestoreSlo - The Hyperscale edition Point-In-Time restore requires both source and target databases to use Hyperscale service level objective.

             * 400 CannotSpecifyPoolOrSlo - Specifying an elastic pool and/or changing the service level objective or edition is not supported for edition.

             * 400 CannotMoveOrDropJobAccountDatabase - Cannot drop database associated with job account.

             * 400 JobAgentDatabaseEditionUnsupported - The specified database's service level objective is not supported for use as a job agent database.

             * 400 CannotUpdateToFreeDatabase - Updating a database to the free sku is not supported.

             * 400 InvalidBackupStorageAccountType - User passed zrs/lrs during create/update of a database but it failed either because the customer is not whitelisted or because zrs is not available in the specified region.

             * 400 DatabaseInvalidSkuPropertyCombination - The properties of the requested sku are inconsistent. Please check that a valid combination is specified. See https://docs.microsoft.com/en-us/rest/api/sql/capabilities/listbylocation#serviceobjectivecapability for more details.

             * 400 DatabaseNamedReplicaPerDatabaseLimitExceeded - User tried create a named replica that would exceed the allowed number per primary database

             * 400 UnsupportedBackupStorageRedundancyForEdition - The requested backup storage redundancy is not supported for edition

             * 400 DatabaseIsCurrentlyPinned - Microsoft has pinned your database SQL Server engine version. To ensure your database does not hit production issues, any future scale operations on your database will be blocked until it has been un-pinned. Please contact Microsoft support for assistance with scaling.

             * 400 RestoreTargetEditionSizeInsufficient - User attempted to restore a database to an edition that is a smaller size than the current allocated size of the source.

             * 400 InvalidIdentityId - One or more identity id(s) provided are not valid ARM resource id(s). Please input valid id(s) and try again.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 DatabaseCreationBlockedForNonActivatedCMKServer - SQL Pool creations are blocked for CMK enabled workspaces until the workspace is activated. First, enable purge protection and grant the workspace Managed Identity the required permissions (Get, Wrap Key, Unwrap Key) on the Azure Key Vault of the workspace key.  Next, activate your workspace after you have granted access.

             * 400 InvalidNumberOfIdentities - Only one user assigned managed identity is supported at the Database Level.

             * 400 NoRestorePointAvailable - The source database has not yet accomplished its first backup in order to support restore operations. Please retry the restore request later.

             * 400 DatabaseNamedReplicaChainingNotAllowed - User tried to create a named replica of a named replica which is not allowed.

             * 400 DatabaseNamedReplicaInvalidOperation - User attempted an unsupported operation on a named replica.

             * 400 ServerNotFound - The requested server was not found.

             * 400 DatabaseNamedReplicaInvalidSourceDatabase - User attempted to create a named replica in a different subscription or region than the source database.

             * 400 CannotAssignIdentityToMaster - Cannot assign an identity to a system database. Database identity cannot be assigned to 'master', 'model', 'tempdb', 'msdb', or 'resource' databases.

             * 400 PerDatabaseCMKDWNotSupported - Database-level CMK in preview is not supported for Datawarehouse edition.

             * 400 CannotMoveOrDropSyncMetadataDatabase - Cannot drop database used as sync metadata database.

             * 400 MissingThumbprintCrm - The restore operation of a CRM database failed because a required TDE certificate was missing. Please retry the restore operation to an existing elastic pool.

             * 400 ElasticPoolOverStorage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 RestoreTargetEditionSizeInsufficientV2 - User attempted to restore a database to an edition that is a smaller size than the allocated size of the restored database.

             * 400 ResourcePoolStorageLimitHitDuringRestore - The restored database can't be restored into the resource pool due to the remaining storage capacity in the pool.

             * 400 PerDatabaseCMKRestoreNotSupported - Database restore is not supported when Database-level CMK is configured in preview.

             * 400 PerDatabaseCMKHSNotSupported - Database-level CMK in preview is not supported for Hyperscale edition.

             * 400 PerDatabaseCMKGeoReplicationNotSupported - Geo Replication and Database Copy is not supported when Database-level CMK is configured in preview.

             * 400 InvalidStandbyGeoEdition - User attempted to create a DTU based standby geo.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 GeoRestoreBackupStorageTypeNotSupported - Database recovery requests are invalid when issued against a database that is not configured to use geo-redundant backup storage.

             * 400 RestoreHyperscaleToNonHyperscale - Restoring a Hyperscale database backup to a non-Hyperscale service tier or vice versa is not supported.

             * 400 SubscriptionDoesNotHaveAccessToServer - The subscription does not have access to the specified server(s)

             * 400 RecoveryPointDoesNotExist - The specified recovery point either does not exist or is not valid.

             * 400 LtrBackupNotFound - The specified long term retention backup does not exist.

             * 400 InvalidPointInTime - The specified point in time is not valid for the database.

             * 400 GeoRestoreCannotResolveTargetCluster - Cannot resolve target cluster for server

             * 400 CannotSpecifyEditionOrSloWhenRestoringToPool - Specifying the target service level objective or edition is not supported when restoring to an elastic pool.

             * 400 RestoreNotSupportedForGeoDrSecondary - Point-in-time restore and database recovery operations are not supported on databases that are currently configured as geo-secondaries.

             * 400 DatabaseNamedReplicaBackupRetentionConfigurationNotSupported - User attempted configuring backup retention policy on a Named Replica.

             * 400 GeoRedundantBackupsNotPermittedForSubscription - Geo-redundant backup storage is blocked for all databases under subscription '{0}' by preview feature 'Azure SQL Database Block Geo-redundant Backup Storage'. Please select a different backup storage redundancy.

             * 400 RestoreHyperscaleToNonHyperscaleElasticPool - Restoring a Hyperscale database to an elastic pool which is not Hyperscale or restoring a database which is not Hyperscale to a Hyperscale elastic pool is not supported.

             * 400 RestoreIneligibleDatabaseName - The specified target database name, '{0}', is reserved and cannot be used in a restore operation.

             * 400 RestoreNotSupportedForSystemDb - Restore and database recovery are not supported for system databases.

             * 400 RestoreIneligibleDroppedDatabaseShortLifespan - The source database, '{0}', dropped on '{1}', has not existed long enough to support restores.

             * 400 RestoreIneligibleLiveDatabaseShortLifespan - The source database, '{0}', has not yet accomplished its first backup in order to support restore operations. Please wait until at least the indicated earliest restore date '{1}' and resubmit the request.

             * 400 RestoreCrossServerDisabled - For point-in-time restores, the target logical server must be the same as the source logical server. Consider restoring to the source database's server, or using database copy or database recovery.

             * 400 InvalidMaxSizeTierCombination - The specified tier does not support the specified database max size.

             * 400 RestoreSameServerRecoveryDisabled - Same-server recovery is currently not supported. Consider using point-in-time restore or recovering to a different server.

             * 400 RestoreNotSupportedFromLtrBackupToEdition - Restore from long-term retention backup to '{0}' edition not supported.

             * 400 RestoreNotSupportedFromExternalBackupToEdition - Restore from external backup to '{0}' edition not supported.

             * 400 UpdateToServerlessIfLtrIsNotDisabled - Enabling auto-pause for a serverless database is not supported if long-term backup retention is enabled.

             * 400 DuplicateRestoreOperation - A restore request with the same target database name '{0}' on server '{1}' already exists.

             * 400 ExternalBackupUriMalformed - The external backup storage container URI is malformed.

             * 400 ExternalBackupUriHostNotAllowed - The host name for the external backup storage container URI is not allowed.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 ExternalBackupUriInvalidSchemeOrPort - The external backup storage container URI uses an invalid scheme or port. Please use https and port 443.

             * 400 ExternalBackupVldbUnsupported - Hyperscale does not support external backup restore requests.

             * 400 InvalidPitrPriorToVldbMigration - For database '{0}', specified point-in-time '{1}' is prior to the Hyperscale migration time of '{2}'. Please specify a target edition or service level objective which is not Hyperscale when restoring to a point earlier than the Hyperscale migration.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 LedgerNoDropPrimary - The Geo-primary database cannot be dropped because the database has Ledger Digest Uploads enabled. Disable Ledger Digest Uploads and retry the operation.

             * 400 CannotDropDatabaseAKVError - The database {0} on server {1} cannot be safely dropped because it is encrypted with a customer managed key that is no longer accessible to take the last backup before drop. Please restore Azure Key Vault Access on the server and revalidate the keys to make this database accessible and then proceed with the drop. For details see https://aka.ms/tdecmkrestorability

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 CannotMoveOrDropJobAccountDatabase - Cannot drop database associated with job account.

             * 400 CannotMoveOrDropSyncMetadataDatabase - Cannot drop database used as sync metadata database.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 InvalidOperationForDatabaseInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 FreeDbAlreadyExists - Only one free database can exist for a subscription per region.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 SkuAssignmentInProgress - The current assignment request cannot be processed because a previous request has not completed.

             * 409 CurrentMemoryUsageExceedsSkuQuota - User attempted an sku update operation that cannot be completed due to the higher resource consumption.

             * 409 ServerDtuQuotaExceeded - Could not perform the operation because server would exceed the allowed Database Throughput Unit quota.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 UnableToAlterDatabaseInReplication - User altered edition on a database in a replication relationship.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 UpdateSloFailedDatabaseTooBusy - Update SLO operation could not complete because database was too busy.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 ElasticPoolBusy - A management operation was attempted on an elastic pool which is busy.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 TargetElasticPoolBeingUpdated - The update of elastic pool cannot be started because there is copy operation in progress for one of the databases in this elastic pool

             * 409 DatabaseCopyLimitPerReplicaReached - User reached the limit of concurrent database copies.

             * 409 ConflictRequestToUpdateBackupRedundancy - A conflict request to change backup storage redundancy is still in progress.

             * 409 DatabaseElasticPoolMaintenanceConflict - User tried to create or update a database with a specified maintenance configuration that conflicted with that of the elastic pool of the database.

             * 409 SubscriptionVcoreQuotaExceeded - Could not perform the operation because subscription would exceed the allowed vCore quota.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/tdeCertificates?api-version=2020-11-01-preview:
    post:
      tags:
        - TdeCertificates
      description: Creates a TDE certificate for a given server.
      operationId: TdeCertificates_Create
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested TDE certificate to be created or updated.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TdeCertificate'
      responses:
        '200':
          description: Successfully created the TDE certificate.
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 MissingPrivateBlob - The private blob is missing.

             * 400 InvalidPrivateBlobOrPassword - Invalid private blob or password specified.

             * 400 PrivateBlobWithoutPrivateKey - The provided blob does not contain private key.

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingSettings?api-version=2021-11-01-preview:
    get:
      tags:
        - BlobAuditing
      description: Lists auditing settings of a server.
      operationId: ServerBlobAuditingPolicies_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved server auditing settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerBlobAuditingPolicyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/auditingSettings/{blobAuditingPolicyName}?api-version=2021-11-01-preview:
    get:
      tags:
        - BlobAuditing
      description: Gets a server's blob auditing policy.
      operationId: ServerBlobAuditingPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/BlobAuditingPolicyNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the server blob auditing policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerBlobAuditingPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
    put:
      tags:
        - BlobAuditing
      description: Creates or updates a server's blob auditing policy.
      operationId: ServerBlobAuditingPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/BlobAuditingPolicyNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: Properties of blob auditing policy
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerBlobAuditingPolicy'
      responses:
        '200':
          description: Successfully updated the auditing settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerBlobAuditingPolicy'
        '202':
          description: Updating the auditing settings is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerBlobAuditingPolicyCreateRequest - The create server blob auditing policy request does not exist or has no properties object.

             * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 BlobAuditingInvalidStorageAccountCredentials - The provided storage account or access key is not valid.

             * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.

             * 400 InsufficientDiskSpaceForAuditing - Insufficient disk space to save auditing metadata in the database

             * 400 InvalidBlobAuditActions - Invalid audit action

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 409 ServerBlobAuditingPolicyInProgress - Set server blob auditing is already in progress.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings?api-version=2021-11-01-preview:
    get:
      tags:
        - BlobAuditing
      description: Lists auditing settings of a database.
      operationId: DatabaseBlobAuditingPolicies_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved database auditing settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseBlobAuditingPolicyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/auditingSettings/{blobAuditingPolicyName}?api-version=2021-11-01-preview:
    get:
      tags:
        - BlobAuditing
      description: Gets a database's blob auditing policy.
      operationId: DatabaseBlobAuditingPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/BlobAuditingPolicyNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database blob auditing policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseBlobAuditingPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    put:
      tags:
        - BlobAuditing
      description: Creates or updates a database's blob auditing policy.
      operationId: DatabaseBlobAuditingPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/BlobAuditingPolicyNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The database blob auditing policy.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseBlobAuditingPolicy'
      responses:
        '200':
          description: Successfully set the database blob auditing policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseBlobAuditingPolicy'
        '201':
          description: Successfully created the database blob auditing policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseBlobAuditingPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.

             * 400 InvalidDatabaseBlobAuditingPolicyCreateRequest - The create database blob auditing policy request does not exist or has no properties object.

             * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 BlobAuditingInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

             * 400 BlobAuditingStorageAccountIsDisabled - The provided storage account is disabled.

             * 400 BlobAuditingNoServerIdentity - The server identity is not correctly configured.

             * 400 BlobAuditingStorageOutboundFirewallNotAllowed - Storage account is not in the list of allowed FQDNs, and, therefore, the outbound firewall rules will block the request.

             * 400 InvalidBlobAuditActionsAndGroupsForDW - Unsupported audit actions or action groups for DW.

             * 400 BlobAuditingAdalTokenError - The operation could not get access token for the storage account because an Azure Active Directory error was encountered.

             * 400 BlobAuditingInvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 BlobAuditingInvalidStorageAccountCredentials - The provided storage account or access key is not valid.

             * 400 BlobAuditingIsNotSupportedOnGeoDr - Blob auditing can be configured on primary databases only.

             * 400 InsufficientDiskSpaceForAuditing - Insufficient disk space to save auditing metadata in the database

             * 400 InvalidBlobAuditActions - Invalid audit action

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extendedAuditingSettings?api-version=2021-11-01-preview:
    get:
      tags:
        - BlobAuditing
      description: Lists extended auditing settings of a database.
      operationId: ExtendedDatabaseBlobAuditingPolicies_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database extended auditing settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedDatabaseBlobAuditingPolicyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extendedAuditingSettings/{blobAuditingPolicyName}?api-version=2021-11-01-preview:
    get:
      tags:
        - BlobAuditing
      description: Gets an extended database's blob auditing policy.
      operationId: ExtendedDatabaseBlobAuditingPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/BlobAuditingPolicyNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the extended database blob auditing policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedDatabaseBlobAuditingPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    put:
      tags:
        - BlobAuditing
      description: Creates or updates an extended database's blob auditing policy.
      operationId: ExtendedDatabaseBlobAuditingPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/BlobAuditingPolicyNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The extended database blob auditing policy.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedDatabaseBlobAuditingPolicy'
      responses:
        '200':
          description: Successfully set the extended database blob auditing policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedDatabaseBlobAuditingPolicy'
        '201':
          description: Successfully created the extended database blob auditing policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedDatabaseBlobAuditingPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 BlobAuditingIsNotSupportedOnResourceType - Blob Auditing is currently not supported for this resource type.

             * 400 BlobAuditingPredicateExpressionSyntaxError - Invalid value of parameter 'predicateExpression'.

             * 400 InvalidDatabaseBlobAuditingPolicyCreateRequest - The create database blob auditing policy request does not exist or has no properties object.

             * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 BlobAuditingPredicateExpressionEmpty - Invalid parameter 'predicateExpression', value can not be empty.

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 BlobAuditingInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

             * 400 BlobAuditingStorageAccountIsDisabled - The provided storage account is disabled.

             * 400 BlobAuditingNoServerIdentity - The server identity is not correctly configured.

             * 400 BlobAuditingStorageOutboundFirewallNotAllowed - Storage account is not in the list of allowed FQDNs, and, therefore, the outbound firewall rules will block the request.

             * 400 InvalidBlobAuditActionsAndGroupsForDW - Unsupported audit actions or action groups for DW.

             * 400 BlobAuditingAdalTokenError - The operation could not get access token for the storage account because an Azure Active Directory error was encountered.

             * 400 BlobAuditingInvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 BlobAuditingInvalidStorageAccountCredentials - The provided storage account or access key is not valid.

             * 400 BlobAuditingIsNotSupportedOnGeoDr - Blob auditing can be configured on primary databases only.

             * 400 InsufficientDiskSpaceForAuditing - Insufficient disk space to save auditing metadata in the database

             * 400 InvalidBlobAuditActions - Invalid audit action

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/extendedAuditingSettings?api-version=2021-11-01-preview:
    get:
      tags:
        - BlobAuditing
      description: Lists extended auditing settings of a server.
      operationId: ExtendedServerBlobAuditingPolicies_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved extended server auditing settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedServerBlobAuditingPolicyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/extendedAuditingSettings/{blobAuditingPolicyName}?api-version=2021-11-01-preview:
    get:
      tags:
        - BlobAuditing
      description: Gets an extended server's blob auditing policy.
      operationId: ExtendedServerBlobAuditingPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/BlobAuditingPolicyNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the extended server blob auditing policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedServerBlobAuditingPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
    put:
      tags:
        - BlobAuditing
      description: Creates or updates an extended server's blob auditing policy.
      operationId: ExtendedServerBlobAuditingPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/BlobAuditingPolicyNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: Properties of extended blob auditing policy
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExtendedServerBlobAuditingPolicy'
      responses:
        '200':
          description: Successfully updated the extended auditing settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedServerBlobAuditingPolicy'
        '202':
          description: Updating the extended auditing settings is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerBlobAuditingPolicyCreateRequest - The create server blob auditing policy request does not exist or has no properties object.

             * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 BlobAuditingPredicateExpressionEmpty - Invalid parameter 'predicateExpression', value can not be empty.

             * 400 BlobAuditingInvalidStorageAccountCredentials - The provided storage account or access key is not valid.

             * 400 InvalidBlobAuditActionsAndGroups - Invalid audit actions or action groups.

             * 400 InsufficientDiskSpaceForAuditing - Insufficient disk space to save auditing metadata in the database

             * 400 InvalidBlobAuditActions - Invalid audit action

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 409 ServerBlobAuditingPolicyInProgress - Set server blob auditing is already in progress.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/serverConfigurationOptions?api-version=2022-08-01-preview:
    get:
      tags:
        - ServerConfigurationOptions
      description: Gets a list of managed instance server configuration options.
      operationId: ServerConfigurationOptionsByManagedInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved managed instance server configuration options.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConfigurationOptionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 EmptySubscriptionId - Subscription ID is empty.

             * 400 ServerConfigurationOptionFeatureDisabled - User tried to interact with Azure SQL Managed Instance Server Configuration Option but feature is currently not supported.

             * 404 SubscriptionDoesNotHaveServerInResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - Specified server does not exist in the specified subscription.

             * 404 ResourceNotFound - Resource was not found.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ServerConfigurationOptions_ListByManagedInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/serverConfigurationOptions/{serverConfigurationOptionName}?api-version=2022-08-01-preview:
    get:
      tags:
        - ServerConfigurationOptions
      description: Gets managed instance server configuration option.
      operationId: ServerConfigurationOptions_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: serverConfigurationOptionName
          in: path
          description: The name of the server configuration option.
          required: true
          schema:
            enum:
              - allowPolybaseExport
            x-ms-enum:
              name: ServerConfigurationOptionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified managed instance server configuration option.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConfigurationOption'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerConfigurationOptionName - User specified server configuration option name that is not supported.

             * 400 InvalidServerConfigurationOptionValue - Server configuration option value "{0}" is not supported for server configuration option "{1}".

             * 400 InvalidServerConfigurationOptionProperties - The provided set of parameters in the body of the request is either empty or invalid.

             * 400 EmptySubscriptionId - Subscription ID is empty.

             * 400 ServerConfigurationOptionFeatureDisabled - User tried to interact with Azure SQL Managed Instance Server Configuration Option but feature is currently not supported.

             * 404 SubscriptionDoesNotHaveServerInResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - Specified server does not exist in the specified subscription.

             * 404 ResourceNotFound - Resource was not found.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - ServerConfigurationOptions
      description: Updates managed instance server configuration option.
      operationId: ServerConfigurationOptions_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: serverConfigurationOptionName
          in: path
          description: The name of the server configuration option.
          required: true
          schema:
            enum:
              - allowPolybaseExport
            x-ms-enum:
              name: ServerConfigurationOptionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: Server configuration option parameters.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConfigurationOption'
      responses:
        '200':
          description: Updating managed instance server configuration option is in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConfigurationOption'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerConfigurationOptionName - User specified server configuration option name that is not supported.

             * 400 InvalidServerConfigurationOptionValue - Server configuration option value "{0}" is not supported for server configuration option "{1}".

             * 400 InvalidServerConfigurationOptionProperties - The provided set of parameters in the body of the request is either empty or invalid.

             * 400 UpdateWithUnsupportedServerConfigurationOptionName - User specified server configuration option name that is not supported.

             * 400 UpdateWithUnsupportedServerConfigurationOptionValue - User specified server configuration option value that is not supported.

             * 400 EmptySubscriptionId - Subscription ID is empty.

             * 400 ServerConfigurationOptionFeatureDisabled - User tried to interact with Azure SQL Managed Instance Server Configuration Option but feature is currently not supported.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state.

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state.

             * 404 ResourceNotFound - Resource was not found.

             * 404 SubscriptionDoesNotHaveServerInResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - Specified server does not exist in the specified subscription.

             * 404 ServerNotFound - The requested server was not found.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ServerBusy - Operation cannot be executed as server is busy with another operation.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/keys?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceKeys
      description: Gets a list of managed instance keys.
      operationId: ManagedInstanceKeysByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of managed instance keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceKeyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedInstanceKeys_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/keys/{keyName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceKeys
      description: Gets a managed instance key.
      operationId: ManagedInstanceKeys_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: keyName
          in: path
          description: The name of the managed instance key to be retrieved.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified managed instance key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceKey'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - ManagedInstanceKeys
      description: Creates or updates a managed instance key.
      operationId: ManagedInstanceKeys_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: keyName
          in: path
          description: The name of the managed instance key to be operated on (updated or created).
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested managed instance key resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedInstanceKey'
      responses:
        '200':
          description: Successfully updated the managed instance key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceKey'
        '201':
          description: Successfully created the managed instance key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceKey'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultMismatchError - Unexpected Key Vault region found in the http response.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 401 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 401 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 401 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 401 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 401 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .
      x-ms-long-running-operation: true
    delete:
      tags:
        - ManagedInstanceKeys
      description: Deletes the managed instance key with the given name.
      operationId: ManagedInstanceKeys_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: keyName
          in: path
          description: The name of the managed instance key to be deleted.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the managed instance key.
        '202':
          description: Accepted
        '204':
          description: The specified managed instance key does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultMismatchError - Unexpected Key Vault region found in the http response.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 401 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 401 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 401 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 401 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 401 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/initiateScan?api-version=2022-11-01-preview:
    post:
      tags:
        - DatabaseSqlVulnerabilityAssessmentExecuteScan
      description: Executes a Vulnerability Assessment database scan.
      operationId: DatabaseSqlVulnerabilityAssessmentExecuteScan_Execute
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully executed a Vulnerability Assessment database scan.
        '202':
          description: Successfully started a Vulnerability Assessment database scan.
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 VulnerabilityAssessmentStoragelessIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceAdministrators
      description: Gets a list of managed instance administrators.
      operationId: ManagedInstanceAdministratorsByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of managed instance administrators.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceAdministratorListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedInstanceAdministrators_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/administrators/{administratorName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceAdministrators
      description: Gets a managed instance administrator.
      operationId: ManagedInstanceAdministrators_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: administratorName
          in: path
          required: true
          schema:
            enum:
              - ActiveDirectory
            x-ms-enum:
              name: AdministratorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the the specified managed instance administrator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceAdministrator'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 InvalidManagedServerAzureADAdminDeleteOperation - User tried to delete managed server Azure Active Azure admin when AzureADOnlyAuthentication is set, please use azureADOnlyAuthentications API first.

             * 400 InvalidManagedServerAADOnlyAuthTypePropertyName - Managed Server Azure Active Directory only authentication type should be Default

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
    put:
      tags:
        - ManagedInstanceAdministrators
      description: Creates or updates a managed instance administrator.
      operationId: ManagedInstanceAdministrators_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: administratorName
          in: path
          required: true
          schema:
            enum:
              - ActiveDirectory
            x-ms-enum:
              name: AdministratorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested administrator parameters.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedInstanceAdministrator'
      responses:
        '200':
          description: Successfully updated the managed instance administrator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceAdministrator'
        '201':
          description: Successfully created the managed instance administrator.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceAdministrator'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 InvalidManagedServerAzureADAdminDeleteOperation - User tried to delete managed server Azure Active Azure admin when AzureADOnlyAuthentication is set, please use azureADOnlyAuthentications API first.

             * 400 InvalidManagedServerAADOnlyAuthTypePropertyName - Managed Server Azure Active Directory only authentication type should be Default

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 PrincipalNotFoundInTenant - AzureAD Lookup returned no results for this name.

             * 400 ServerPrincipalHasDuplicateDisplayNameInAad - AzureAD Lookup returned multiple results for this name.

             * 400 ManagedInstanceIsBusy - Managed Instance is busy with another request.

             * 400 InvalidPrincipalType - This principal type is not supported in Windows Azure SQL Database.

             * 400 ServicePrincipalLookupInAadFailed - AzureAD Lookup failed due to service infrastructure errors.

             * 400 TenantNotFoundInActiveDirectory - Tenant is not available in active directory.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 ManagedInstanceHasNoPermissionsToAccessAad - Attempt to perform operation, which involves a non-existing login or login on which executing principal has no permissions.

             * 403 ServicePrincipalLookupInAadFailedIdentityForbidden - AzureAD Lookup failed because MSI was not granted read permissions on AAD.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ServerPrincipalAlreadyExists - Attempt to create server principal with non-unique name.

             * 409 ServerPrincipalCurrentlyLoggedIn - Self-explanatory.

             * 409 ServerPrincipalOwnsJobs - Attempt to remove a login when it has active jobs.

             * 409 ServerPrincipalIsGrantorOfPermissions - Attempt to drop a server principal, which is a grantor of permissions.

             * 409 ServerPrincipalOwnsDatabase - Change the owner of the database(s) before dropping the login.

             * 409 ServerPrincipalUsedInTriggerOrEventNotification - Attempt to drop login, which is used as an execution context of a trigger or event notification.

             * 409 ServerPrincipalOwnsObjects - Attempt to drop a login, which owns objects.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 ActiveDirectoryLookupTimedOut - The operation could not be completed at this time. Please try again later.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    delete:
      tags:
        - ManagedInstanceAdministrators
      description: Deletes a managed instance administrator.
      operationId: ManagedInstanceAdministrators_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: administratorName
          in: path
          required: true
          schema:
            enum:
              - ActiveDirectory
            x-ms-enum:
              name: AdministratorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the managed instance administrator.
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 400 InvalidManagedServerAdministratorType - Invalid administrator type specified in properties.

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 InvalidManagedServerAzureADAdminDeleteOperation - User tried to delete managed server Azure Active Azure admin when AzureADOnlyAuthentication is set, please use azureADOnlyAuthentications API first.

             * 400 InvalidManagedServerAADOnlyAuthTypePropertyName - Managed Server Azure Active Directory only authentication type should be Default

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 PrincipalNotFoundInTenant - AzureAD Lookup returned no results for this name.

             * 400 ServerPrincipalHasDuplicateDisplayNameInAad - AzureAD Lookup returned multiple results for this name.

             * 400 ManagedInstanceIsBusy - Managed Instance is busy with another request.

             * 400 InvalidPrincipalType - This principal type is not supported in Windows Azure SQL Database.

             * 400 ServicePrincipalLookupInAadFailed - AzureAD Lookup failed due to service infrastructure errors.

             * 400 TenantNotFoundInActiveDirectory - Tenant is not available in active directory.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 ManagedInstanceHasNoPermissionsToAccessAad - Attempt to perform operation, which involves a non-existing login or login on which executing principal has no permissions.

             * 403 ServicePrincipalLookupInAadFailedIdentityForbidden - AzureAD Lookup failed because MSI was not granted read permissions on AAD.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ServerPrincipalAlreadyExists - Attempt to create server principal with non-unique name.

             * 409 ServerPrincipalCurrentlyLoggedIn - Self-explanatory.

             * 409 ServerPrincipalOwnsJobs - Attempt to remove a login when it has active jobs.

             * 409 ServerPrincipalIsGrantorOfPermissions - Attempt to drop a server principal, which is a grantor of permissions.

             * 409 ServerPrincipalOwnsDatabase - Change the owner of the database(s) before dropping the login.

             * 409 ServerPrincipalUsedInTriggerOrEventNotification - Attempt to drop login, which is used as an execution context of a trigger or event notification.

             * 409 ServerPrincipalOwnsObjects - Attempt to drop a login, which owns objects.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 ActiveDirectoryLookupTimedOut - The operation could not be completed at this time. Please try again later.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recoverableDatabases?api-version=2022-08-01-preview:
    get:
      tags:
        - RecoverableDatabases
      description: Gets a list of recoverable databases.
      operationId: RecoverableDatabases_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of recoverable databases.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecoverableDatabaseListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/recoverableDatabases/{databaseName}?api-version=2022-08-01-preview:
    get:
      tags:
        - RecoverableDatabases
      description: Gets a recoverable database.
      operationId: RecoverableDatabases_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: $expand
          in: query
          description: The child resources to include in the response.
          required: false
          schema:
            type: string
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified recoverable database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecoverableDatabase'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidRecoverableDatabaseId - Invalid recoverable database identifier.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-odata: '#/components/schemas/RecoverableDatabase'
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans?api-version=2022-11-01-preview:
    get:
      tags:
        - SqlVulnerabilityAssessmentScans
      description: Lists the vulnerability assessment scans of a database.
      operationId: SqlVulnerabilityAssessmentScans_ListBySqlVulnerabilityAssessments
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: systemDatabaseName
          in: query
          description: The vulnerability assessment system database name.
          required: true
          schema:
            enum:
              - master
            x-ms-enum:
              name: VulnerabilityAssessmentSystemDatabaseName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database vulnerability assessment scan records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlVulnerabilityAssessmentScanRecordListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}?api-version=2022-11-01-preview:
    get:
      tags:
        - SqlVulnerabilityAssessmentScans
      description: Get a system database vulnerability assessment scan record.
      operationId: SqlVulnerabilityAssessmentScans_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: scanId
          in: path
          required: true
          schema:
            type: string
        - name: systemDatabaseName
          in: query
          description: The vulnerability assessment system database name.
          required: true
          schema:
            enum:
              - master
            x-ms-enum:
              name: VulnerabilityAssessmentSystemDatabaseName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database vulnerability assessment scan record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlVulnerabilityAssessmentScanRecord'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/managedInstances?api-version=2023-05-01-preview:
    get:
      tags:
        - ManagedInstances
      description: Gets a list of all managed instances in the subscription.
      operationId: ManagedInstances_List
      parameters:
        - name: $expand
          in: query
          description: The child resources to include in the response.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of managed instances.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceListResult'
        default:
          description: '*** Error Responses: ***'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/managedInstances?api-version=2023-05-01-preview:
    get:
      tags:
        - ManagedInstances
      description: Gets a list of all managed instances in an instance pool.
      operationId: ManagedInstancesByInstancePool_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: instancePoolName
          in: path
          description: The instance pool name.
          required: true
          schema:
            type: string
        - name: $expand
          in: query
          description: The child resources to include in the response.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of managed instances.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 InstancePoolNotFound - An instance pool cannot be found
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedInstances_ListByInstancePool
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances?api-version=2023-05-01-preview:
    get:
      tags:
        - ManagedInstances
      description: Gets a list of managed instances in a resource group.
      operationId: ManagedInstances_ListByResourceGroup
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: $expand
          in: query
          description: The child resources to include in the response.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of managed instances.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubnetMissingRequiredDelegation - Selected subnet is not delegated for SQL Managed Instance.

             * 400 ManagementServiceManagedServerDisabled - Operation failed since Managed Instance '{0}' is disabled. Please enable Managed Instance and try again.

             * 400 MiGeoRestoreWithWrongBackupStorageRedundancy - Geo-Restore is not allowed for managed instances with LRS/ZRS backup storage redundancy.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 400 AadOnlyAuthenticationIsEnabled - Azure Active Directory Only Authentication is enabled. Please contact your system administrator.

             * 400 UpdatingInstanceAndBackupRedundancy - Instance zone redundancy and backup storage redundancy cannot be updated in the same request.

             * 400 DeleteOfManagedInstanceIsDisabled - Delete operation of managed instance is disabled.

             * 400 RequestCantLandOnPaaSv2Platform - Request needs to land on PaaSv2 platform but PaaSv2 is not enabled.

             * 400 CustomMaintenanceWindowIsDisabled - Custom maintenance window is not enabled.

             * 400 DeleteOfVersion2VirtualClusterIsDisabled - Delete of virtual cluster with version 2 is not enabled.

             * 400 DeleteOfVirtualClusterIsDisabled - Delete of virtual cluster is not enabled.

             * 400 MICantBeMovedFromOrToInstancePool - Existing managed instance can't be moved to managed instance pool.

             * 400 DnsRefreshOnVirtualClusterIsDisabled - Refresh of DNS records on virtual cluster is not enabled.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 MiCreateFailedNonDelegatedSubnet - User tried to deploy Managed Instance or Managed Instance pool in subnet that is not delegated to Microsoft.Sql/managedInstances.

             * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.

             * 409 BackupRedundancyUpdateAndInstanceRedundancyConflict - The instance is multi-az but backup storage is being updated from zone redundant to non-zone redundant.

             * 409 InstanceRedundancyUpdateWhileBackupRedundancyUpdateInProgress - Cannot update instance redundancy because backup storage redundancy update is in progress.

             * 409 InstanceRedundancyUpdateAndBackupRedundancyConflict - The backup storage is non-zone redundant but instance redundancy is being updated to zone redundant.

             * 409 BackupRedundancyUpdateConflict - Cannot update backup storage redundancy because a backup storage redundancy update is already in progress.

             * 409 MiDropFailedOnAuthLocks - User tried to drop last Managed Instance in subnet that has Lock applied on resource(s).

             * 412 InstanceNotReadyForBackupRedundancyUpdate - Cannot update backup storage redundancy because the instance is not ready.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}?api-version=2023-05-01-preview:
    get:
      tags:
        - ManagedInstances
      description: Gets a managed instance.
      operationId: ManagedInstances_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: $expand
          in: query
          description: The child resources to include in the response.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified managed instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstance'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubnetMissingRequiredDelegation - Selected subnet is not delegated for SQL Managed Instance.

             * 400 ManagementServiceManagedServerDisabled - Operation failed since Managed Instance '{0}' is disabled. Please enable Managed Instance and try again.

             * 400 MiGeoRestoreWithWrongBackupStorageRedundancy - Geo-Restore is not allowed for managed instances with LRS/ZRS backup storage redundancy.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 400 AadOnlyAuthenticationIsEnabled - Azure Active Directory Only Authentication is enabled. Please contact your system administrator.

             * 400 UpdatingInstanceAndBackupRedundancy - Instance zone redundancy and backup storage redundancy cannot be updated in the same request.

             * 400 DeleteOfManagedInstanceIsDisabled - Delete operation of managed instance is disabled.

             * 400 RequestCantLandOnPaaSv2Platform - Request needs to land on PaaSv2 platform but PaaSv2 is not enabled.

             * 400 CustomMaintenanceWindowIsDisabled - Custom maintenance window is not enabled.

             * 400 DeleteOfVersion2VirtualClusterIsDisabled - Delete of virtual cluster with version 2 is not enabled.

             * 400 DeleteOfVirtualClusterIsDisabled - Delete of virtual cluster is not enabled.

             * 400 MICantBeMovedFromOrToInstancePool - Existing managed instance can't be moved to managed instance pool.

             * 400 DnsRefreshOnVirtualClusterIsDisabled - Refresh of DNS records on virtual cluster is not enabled.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 MiCreateFailedNonDelegatedSubnet - User tried to deploy Managed Instance or Managed Instance pool in subnet that is not delegated to Microsoft.Sql/managedInstances.

             * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.

             * 409 BackupRedundancyUpdateAndInstanceRedundancyConflict - The instance is multi-az but backup storage is being updated from zone redundant to non-zone redundant.

             * 409 InstanceRedundancyUpdateWhileBackupRedundancyUpdateInProgress - Cannot update instance redundancy because backup storage redundancy update is in progress.

             * 409 InstanceRedundancyUpdateAndBackupRedundancyConflict - The backup storage is non-zone redundant but instance redundancy is being updated to zone redundant.

             * 409 BackupRedundancyUpdateConflict - Cannot update backup storage redundancy because a backup storage redundancy update is already in progress.

             * 409 MiDropFailedOnAuthLocks - User tried to drop last Managed Instance in subnet that has Lock applied on resource(s).

             * 412 InstanceNotReadyForBackupRedundancyUpdate - Cannot update backup storage redundancy because the instance is not ready.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
    put:
      tags:
        - ManagedInstances
      description: Creates or updates a managed instance.
      operationId: ManagedInstances_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested managed instance resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedInstance'
      responses:
        '200':
          description: Successfully updated the managed instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstance'
        '201':
          description: Successfully created the managed instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstance'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubnetMissingRequiredDelegation - Selected subnet is not delegated for SQL Managed Instance.

             * 400 InvalidDnsZone - The operation has failed because you are attempting to deploy managed instance as a geo-replication secondary to the subnet {0} in which there already exists a managed instance. Deploying managed instance as a geo-replication secondary is supported only in cases when managed instance is the first instance deployed in a subnet. Consider deploying managed instance as a geo-replication secondary to a different subnet in which there are no existing managed instances, or if deploying to a subnet with existing managed instance disable the geo-replication option.

             * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.

             * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.

             * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.

             * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.

             * 400 ManagedInstanceIpAddressRangeLimit - Cannot perform creation/scaling of the managed instance as there are not enough available IP addresses in the subnet for performing the operation.

             * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.

             * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.

             * 400 UpdateManagedServerWithMaintenanceWindowNotAllowed - Update of Managed Instance with maintenance window settings is not allowed.

             * 400 VnetPrepareNIPFailed - User tried to prepare subnet that has a conflict with NetworkIntentPolicy.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 ManagedInstanceDeprecatedHardwareFamily - Changing the hardware generation to deprecated {0} generation is not possible.

             * 400 ManagedInstanceBackupStorageTypeNotSupported - Backup storage type parameter is not allowed in the instance update operation.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 EmptyPDCInvalidDnsZone - This managed instance cannot be deployed because its DNS-zone does not match the DNS-prefix of its intended virtual cluster for subnet {0}. Although this virtual cluster is empty, its DNS-prefix cannot be changed. Empty virtual clusters will be automatically removed after several hours. Consider waiting for this virtual cluster to expire or manually deleting this virtual cluster and then creating the managed instance.

             * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough capacity

             * 400 ManagedInstanceFreemiumNotAvailableForInputParameters - Managed instance creation or update executed with SLO that is not allowed for freemium.

             * 400 ManagedInstanceFreemiumNotAvailableOnRegion - Creation of a freemium managed instance on a region that is not allowlisted for freemium.

             * 400 ManagementServiceSubnetMaintenanceInProgress - User tried to initiate managed instance create/update while incompatible maintenance is in progress.

             * 400 ServerNotFound - The requested server was not found.

             * 400 ManagedInstanceFreemiumNotAvailableForSubscription - Freemium is not enabled for this subscription type.

             * 400 ManagedInstanceInvalidEditionForInstancePool - User tried to select invalid service tier for managed instance inside an existing instance pool.

             * 400 MissingIdentityId - No user assigned identity is provided when the identity type is set to UserAssigned

             * 400 ManagedInstanceInvalidSubnetForInstancePool - User tried to select invalid subnet for managed instance inside an existing instance pool.

             * 400 InvalidPrimaryIdentityId - User provides a value for PrimaryUserIdentityId but the same is not listed in the IdentityId parameter

             * 400 ManagedInstanceZoneRedudantFeatureNotSupported - ZoneRedundant feature is not supported for the selected service tier. For more details visit aka.ms/sqlmi-service-tier-characteristics.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeEnabled - Enabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeDisabled - Disabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 TokenTooLong - The provided token is too long.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 MissingPrimaryIdentity - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SubnetIdCantBeUpdated - Changing managed instance subnet is not supported operation. Please remove this parameter from the request.

             * 400 MigrationToAnotherVNetNotSupported - Selected subnet is in another Virtual Network. Moving managed instance to another Virtual Network is not possible. Please provide subnet from Virtual Network {0}.

             * 400 MigrationToSubnetWithDifferentDnsZoneNotSupported - Provided subnet is having different DNS zone from the current. Changing instance DNS zone is not supported. Please provide subnet with same DNS zone, create a new subnet or provide empty one.

             * 400 MigrationToGen4SubnetNotSupported - It is not possible to update subnet while running on Gen4 hardware as it is being deprecated. Please upgrade your hardware from Gen4 to Gen5 as part of the changing managed instance subnet operation by specifying both parameters at the same time: destination subnet and hardware generation.

             * 400 PrimaryIdentityMissingPermissionForKeyId - KeyId is provided by user during create but PrimaryUserAssignedIdentityId is not provided in the API call

             * 400 InvalidIdentityTypeForKeyId - KeyId is provided by user during create but identity type is not set to 'UserAssigned'

             * 400 ManagedInstanceFileExceededMaxAzureStorageFileSizeLimit - The operation could not be completed because some of the database files are exceeding maximum General Purpose file size limit of {0} GB.

             * 400 CloudLifterUnsupportedFeature - The functionality is not available on the Managed Instance at this time.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 OperationCanNotStartDueToMiLink - The '{0}' operation cannot be completed as there exists a database in a process of creation through Managed Instance link. Please wait for the link creation to complete, or delete the link, and retry the operation again.

             * 400 ManagedInstanceSloUpdateFailed - SLO '{0}' operation cannot succeed as the memory usage of '{1}' exceeds the quota.

             * 400 SourceAndTargetSubnetsMustBeVnetPeered - Subnet currently used by managed instance and provided destination subnet are part of the virtual networks that are not connected with virtual network peering, or have peering established but don't have allowed traffic. In order to move managed instance from one subnet to another, virtual network peering needs to be established from both source and target virtual network. Please configure virtual network requirements and then try the operation again. Learn more https://docs.microsoft.com/en-us/azure/virtual-network/tutorial-connect-virtual-networks-portal#peer-virtual-networks. 

             * 400 ManagedInstanceAndSubnetAreNotOnTheSameSubscription - Subnet provided for managed instance deployment is located on subscription different than the one submitted for managed instance. Managed instance and subnet used for deploying the instance must be on the same subscription. Please provide another subnet or switch to the subnet subscription and then try the operation again.

             * 400 CreateManagedInstanceInvalidSubnetSize - User attempted to create managed instance in a subnet that is smaller than the allowed minimal subnet size.

             * 400 AddressRangeOfTargetSubnetAndSubnetOfGeoDRReplicaCantOverlap - Subnet selected for managed instance migration has address range that overlaps with address range of subnet that holds geo replicated secondary instance. Please verify that your subnet is configured according to guidelines in https://aka.ms/move-managed-instance. 

             * 400 TargetSubnetMustBeConfiguredToAllowGeoDRReplication - Subnet selected for managed instance migration is not configured to enable communication with a geo replicated secondary instance. Please check if all of the required ports are open. To properly configure your subnet read the guidelines in https://aka.ms/move-managed-instance. 

             * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 PasswordTooShort - The provided password is too short

             * 400 PasswordTooLong - The provided password is too long.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 GatewayInvalidEdition - '{0}' is not a valid database edition in this version of SQL Server.

             * 400 ManagedInstanceInvalidHardwareFamilyForInstancePool - User tried to select invalid hardware family for managed instance inside an existing instance pool.

             * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.

             * 400 ManagedInstanceInvalidLicenseTypeForInstancePool - User tried to select invalid license type for managed instance inside an existing instance pool.

             * 400 ManagedInstanceUpdateSloFromVersionlessToVersionedNotAllowed - Changing the database format from '{0}' to '{1}' is not supported. Check the database format property value specified and visit https://aka.ms/sqlmidatabaseformat  for more details.

             * 400 ManagedInstanceUpdateSloFromNewerToOlderVersionEditionNotAllowed - Changing the database format from '{0}' to '{1}' is not supported. Check the database format property value specified and visit https://aka.ms/sqlmidatabaseformat  for more details.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 ManagedInstanceUpdateSloFromVersionedToVersionlessWorkerCLNotAllowed - Changing the database format is not supported for this managed instance. Check the database format property value specified and visit https://aka.ms/sqlmi-fwnov2022  for more details.

             * 400 InvalidLocation - An invalid location was specified.

             * 400 ManagedInstanceVersionEditionParameterNotAllowedForUsing - Specifying the database format property value is not supported at this time.

             * 400 ManagedInstanceFreemiumInvalidArchitecture - A freemium instance can not be created in the specified subnet '(0)'.

             * 400 VnetInWrongRegion - Virtual network is in wrong region.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 VnetAddressRangeError - Virtual network address range is invalid.

             * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.

             * 400 StorageIOpsNotSupported - Storage IOps parameter is not allowed in the instance create/update operation.

             * 400 InvalidCollation - Invalid collation.

             * 400 StorageThroughputMBpsNotSupported - Storage throughput MBps parameter is not allowed in the instance create/update operation.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 StorageIOpsNotSupportedForSpecifiedEdition - Storage IOps parameter is not allowed in the instance create/update operation for the specified edition.

             * 400 StorageThroughputMBpsNotSupportedForSpecifiedEdition - Storage throughput MBps parameter is not allowed in the instance create/update operation for the specified edition.

             * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.

             * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server '{0}', Database '{1}' due to unexpected delay. Please try again.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.

             * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.

             * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.

             * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.

             * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.

             * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.

             * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.

             * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.

             * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.

             * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 VnetResourceNotFound - Resource not found: '{0}'.

             * 400 InvalidTimezone - Invalid timezone.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.

             * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation 'SQL_Latin1_General_CP1_CI_AS'.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.

             * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.

             * 400 InvalidManagedServerDnsZonePartner - The resource URI of the geo-primary managed instance specified in the create request is invalid. Please ensure that the property is of the format /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/managedInstances/{managedInstanceName}

             * 400 ManagementServiceManagedServerDisabled - Operation failed since Managed Instance '{0}' is disabled. Please enable Managed Instance and try again.

             * 400 MiGeoRestoreWithWrongBackupStorageRedundancy - Geo-Restore is not allowed for managed instances with LRS/ZRS backup storage redundancy.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 400 AadOnlyAuthenticationIsEnabled - Azure Active Directory Only Authentication is enabled. Please contact your system administrator.

             * 400 UpdatingInstanceAndBackupRedundancy - Instance zone redundancy and backup storage redundancy cannot be updated in the same request.

             * 400 DeleteOfManagedInstanceIsDisabled - Delete operation of managed instance is disabled.

             * 400 RequestCantLandOnPaaSv2Platform - Request needs to land on PaaSv2 platform but PaaSv2 is not enabled.

             * 400 CustomMaintenanceWindowIsDisabled - Custom maintenance window is not enabled.

             * 400 DeleteOfVersion2VirtualClusterIsDisabled - Delete of virtual cluster with version 2 is not enabled.

             * 400 DeleteOfVirtualClusterIsDisabled - Delete of virtual cluster is not enabled.

             * 400 MICantBeMovedFromOrToInstancePool - Existing managed instance can't be moved to managed instance pool.

             * 400 DnsRefreshOnVirtualClusterIsDisabled - Refresh of DNS records on virtual cluster is not enabled.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidMinimalTlsVersion - Invalid minimal TLS version.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 DeleteOfManagedInstanceIsDisabled - Delete operation of managed instance is disabled.

             * 400 CustomMaintenanceWindowIsDisabled - Custom maintenance window is not enabled.

             * 400 MICantBeMovedFromOrToInstancePool - Existing managed instance can't be moved to managed instance pool.

             * 400 InvalidMaintenanceWindowSettings - Invalid maintenance window settings.

             * 400 InvalidMaintenanceWindowProperty - Invalid maintenance window property was specified.

             * 400 InvalidMaintenanceWindowPropertyNull - Invalid maintenance window with required properties null.

             * 400 InvalidMaintenanceWindowTypeWithPropertySpecified - Maintenance window type must not have certain properties specified.

             * 400 UpdateOfParameterNotSupported - Update of '{0}' is not supported.

             * 400 AadOnlyAuthenticationIsEnabled - Azure Active Directory Only Authentication is enabled. Please contact your system administrator.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidExternalAdministratorLogin - Invalid or missing external administrator login name.

             * 400 InvalidExternalAdministratorSid - Invalid or missing external administrator object id.

             * 400 InvalidExternalAdministratorTenantId - Invalid or missing external administrator tenant id.

             * 400 ExternalAdministratorPrincipalType - Invalid or missing external administrator principal type. Please select from User, Application or Group.

             * 400 MissingExternalAdministratorWithAadOnlyAuth - In order to use Azure AD Only Authentication, please provide details of an external administrator.

             * 400 ExternalAdministratorLoginSameAsSqlAdmin - The names of the Azure Active Directory administrator and of the server admin account must be different. Please provide different values.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 MissingKeyVaultUriForRestore - Azure Key Vault key URI '{0}' is required to successfully restore the database '{1}' under server '{2}'.

             * 400 AzureKeyVaultKeyUsedOnGeoPrimary - The operation could not be completed because the Azure Key Vault Key name {0} is currently set as encryption protector on geo-primary.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 PerDatabaseCMKDWNotSupported - Database-level CMK in preview is not supported for Datawarehouse edition.

             * 400 BlockSystemAssignedIdentityForCrossTenantCMK - Cross tenant CMK can only be configured when the server is configured with a User Assigned Managed Identity. Refer to https://aka.ms/sqltdebyokumi to configure User Assigned Managed Identity.

             * 400 CreateDatabaseAttemptedWithRotationInProgress - The create database operation can not be performed at this time due to ongoing Transparent Data Encryption (TDE) key rotation on the server. Please try the operation again later.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 PerDatabaseCMKRestoreNotSupported - Database restore is not supported when Database-level CMK is configured in preview.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 PerDatabaseCMKHSNotSupported - Database-level CMK in preview is not supported for Hyperscale edition.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 CMKOperationNotAllowed - User tried to perform an operation on the server when the server did not have Azure Key Vault Access.

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InstancePoolNotFound - An instance pool cannot be found

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ResourceNotFound - The requested resource was not found.

             * 405 InvalidStorageIOpsLimitValue - Invalid storage IOps limit: {0} IOps. Storage IOps limit must be specified between {1} IOps and {2} IOps, in increments of {3} IOps.

             * 405 InvalidStorageThroughputMBpsLimitValue - Invalid storage throughput limit: {0} MBps. Storage throughput limit must be specified between {1} MBps and {2} MBps, in increments of {3} MBps.

             * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.

             * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.

             * 405 InvalidStorageSizeValue - "Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerAlreadyExists - Duplicate server name.

             * 409 ServerOverridePreconditionFailed - Failed to apply server override on category '{0}', because physical db or instance '{1}' in server '{2}' is currently not in 'Ready' or 'Deactivated' state.

             * 409 ServerDisabled - Server is disabled.

             * 409 ManagedInstanceIsBusy - The server '{0}' is currently busy. Please wait a few minutes before trying again.

             * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.

             * 409 MiCreateFailedNonDelegatedSubnet - User tried to deploy Managed Instance or Managed Instance pool in subnet that is not delegated to Microsoft.Sql/managedInstances.

             * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.

             * 409 BackupRedundancyUpdateAndInstanceRedundancyConflict - The instance is multi-az but backup storage is being updated from zone redundant to non-zone redundant.

             * 409 InstanceRedundancyUpdateWhileBackupRedundancyUpdateInProgress - Cannot update instance redundancy because backup storage redundancy update is in progress.

             * 409 InstanceRedundancyUpdateAndBackupRedundancyConflict - The backup storage is non-zone redundant but instance redundancy is being updated to zone redundant.

             * 409 BackupRedundancyUpdateConflict - Cannot update backup storage redundancy because a backup storage redundancy update is already in progress.

             * 409 MiDropFailedOnAuthLocks - User tried to drop last Managed Instance in subnet that has Lock applied on resource(s).

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 412 InstanceNotReadyForBackupRedundancyUpdate - Cannot update backup storage redundancy because the instance is not ready.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 GatewayInternalServerError - The server encountered an unexpected exception.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    delete:
      tags:
        - ManagedInstances
      description: Deletes a managed instance.
      operationId: ManagedInstances_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the managed instance.
        '202':
          description: Successfully initiated deletion of the managed instance.
        '204':
          description: The specified managed instance does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubnetMissingRequiredDelegation - Selected subnet is not delegated for SQL Managed Instance.

             * 400 ManagementServiceManagedServerDisabled - Operation failed since Managed Instance '{0}' is disabled. Please enable Managed Instance and try again.

             * 400 MiGeoRestoreWithWrongBackupStorageRedundancy - Geo-Restore is not allowed for managed instances with LRS/ZRS backup storage redundancy.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 400 AadOnlyAuthenticationIsEnabled - Azure Active Directory Only Authentication is enabled. Please contact your system administrator.

             * 400 UpdatingInstanceAndBackupRedundancy - Instance zone redundancy and backup storage redundancy cannot be updated in the same request.

             * 400 DeleteOfManagedInstanceIsDisabled - Delete operation of managed instance is disabled.

             * 400 RequestCantLandOnPaaSv2Platform - Request needs to land on PaaSv2 platform but PaaSv2 is not enabled.

             * 400 CustomMaintenanceWindowIsDisabled - Custom maintenance window is not enabled.

             * 400 DeleteOfVersion2VirtualClusterIsDisabled - Delete of virtual cluster with version 2 is not enabled.

             * 400 DeleteOfVirtualClusterIsDisabled - Delete of virtual cluster is not enabled.

             * 400 MICantBeMovedFromOrToInstancePool - Existing managed instance can't be moved to managed instance pool.

             * 400 DnsRefreshOnVirtualClusterIsDisabled - Refresh of DNS records on virtual cluster is not enabled.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 MiCreateFailedNonDelegatedSubnet - User tried to deploy Managed Instance or Managed Instance pool in subnet that is not delegated to Microsoft.Sql/managedInstances.

             * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.

             * 409 BackupRedundancyUpdateAndInstanceRedundancyConflict - The instance is multi-az but backup storage is being updated from zone redundant to non-zone redundant.

             * 409 InstanceRedundancyUpdateWhileBackupRedundancyUpdateInProgress - Cannot update instance redundancy because backup storage redundancy update is in progress.

             * 409 InstanceRedundancyUpdateAndBackupRedundancyConflict - The backup storage is non-zone redundant but instance redundancy is being updated to zone redundant.

             * 409 BackupRedundancyUpdateConflict - Cannot update backup storage redundancy because a backup storage redundancy update is already in progress.

             * 409 MiDropFailedOnAuthLocks - User tried to drop last Managed Instance in subnet that has Lock applied on resource(s).

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 412 InstanceNotReadyForBackupRedundancyUpdate - Cannot update backup storage redundancy because the instance is not ready.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    patch:
      tags:
        - ManagedInstances
      description: Updates a managed instance.
      operationId: ManagedInstances_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested managed instance resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedInstanceUpdate'
      responses:
        '200':
          description: Successfully updated the managed instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstance'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubnetMissingRequiredDelegation - Selected subnet is not delegated for SQL Managed Instance.

             * 400 InvalidDnsZone - The operation has failed because you are attempting to deploy managed instance as a geo-replication secondary to the subnet {0} in which there already exists a managed instance. Deploying managed instance as a geo-replication secondary is supported only in cases when managed instance is the first instance deployed in a subnet. Consider deploying managed instance as a geo-replication secondary to a different subnet in which there are no existing managed instances, or if deploying to a subnet with existing managed instance disable the geo-replication option.

             * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.

             * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.

             * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.

             * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.

             * 400 ManagedInstanceIpAddressRangeLimit - Cannot perform creation/scaling of the managed instance as there are not enough available IP addresses in the subnet for performing the operation.

             * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.

             * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.

             * 400 UpdateManagedServerWithMaintenanceWindowNotAllowed - Update of Managed Instance with maintenance window settings is not allowed.

             * 400 VnetPrepareNIPFailed - User tried to prepare subnet that has a conflict with NetworkIntentPolicy.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 ManagedInstanceDeprecatedHardwareFamily - Changing the hardware generation to deprecated {0} generation is not possible.

             * 400 ManagedInstanceBackupStorageTypeNotSupported - Backup storage type parameter is not allowed in the instance update operation.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 EmptyPDCInvalidDnsZone - This managed instance cannot be deployed because its DNS-zone does not match the DNS-prefix of its intended virtual cluster for subnet {0}. Although this virtual cluster is empty, its DNS-prefix cannot be changed. Empty virtual clusters will be automatically removed after several hours. Consider waiting for this virtual cluster to expire or manually deleting this virtual cluster and then creating the managed instance.

             * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough capacity

             * 400 ManagedInstanceFreemiumNotAvailableForInputParameters - Managed instance creation or update executed with SLO that is not allowed for freemium.

             * 400 ManagedInstanceFreemiumNotAvailableOnRegion - Creation of a freemium managed instance on a region that is not allowlisted for freemium.

             * 400 ManagementServiceSubnetMaintenanceInProgress - User tried to initiate managed instance create/update while incompatible maintenance is in progress.

             * 400 ServerNotFound - The requested server was not found.

             * 400 ManagedInstanceFreemiumNotAvailableForSubscription - Freemium is not enabled for this subscription type.

             * 400 ManagedInstanceInvalidEditionForInstancePool - User tried to select invalid service tier for managed instance inside an existing instance pool.

             * 400 MissingIdentityId - No user assigned identity is provided when the identity type is set to UserAssigned

             * 400 ManagedInstanceInvalidSubnetForInstancePool - User tried to select invalid subnet for managed instance inside an existing instance pool.

             * 400 InvalidPrimaryIdentityId - User provides a value for PrimaryUserIdentityId but the same is not listed in the IdentityId parameter

             * 400 ManagedInstanceZoneRedudantFeatureNotSupported - ZoneRedundant feature is not supported for the selected service tier. For more details visit aka.ms/sqlmi-service-tier-characteristics.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeEnabled - Enabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeDisabled - Disabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 TokenTooLong - The provided token is too long.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 MissingPrimaryIdentity - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SubnetIdCantBeUpdated - Changing managed instance subnet is not supported operation. Please remove this parameter from the request.

             * 400 MigrationToAnotherVNetNotSupported - Selected subnet is in another Virtual Network. Moving managed instance to another Virtual Network is not possible. Please provide subnet from Virtual Network {0}.

             * 400 MigrationToSubnetWithDifferentDnsZoneNotSupported - Provided subnet is having different DNS zone from the current. Changing instance DNS zone is not supported. Please provide subnet with same DNS zone, create a new subnet or provide empty one.

             * 400 MigrationToGen4SubnetNotSupported - It is not possible to update subnet while running on Gen4 hardware as it is being deprecated. Please upgrade your hardware from Gen4 to Gen5 as part of the changing managed instance subnet operation by specifying both parameters at the same time: destination subnet and hardware generation.

             * 400 PrimaryIdentityMissingPermissionForKeyId - KeyId is provided by user during create but PrimaryUserAssignedIdentityId is not provided in the API call

             * 400 InvalidIdentityTypeForKeyId - KeyId is provided by user during create but identity type is not set to 'UserAssigned'

             * 400 ManagedInstanceFileExceededMaxAzureStorageFileSizeLimit - The operation could not be completed because some of the database files are exceeding maximum General Purpose file size limit of {0} GB.

             * 400 CloudLifterUnsupportedFeature - The functionality is not available on the Managed Instance at this time.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 OperationCanNotStartDueToMiLink - The '{0}' operation cannot be completed as there exists a database in a process of creation through Managed Instance link. Please wait for the link creation to complete, or delete the link, and retry the operation again.

             * 400 ManagedInstanceSloUpdateFailed - SLO '{0}' operation cannot succeed as the memory usage of '{1}' exceeds the quota.

             * 400 SourceAndTargetSubnetsMustBeVnetPeered - Subnet currently used by managed instance and provided destination subnet are part of the virtual networks that are not connected with virtual network peering, or have peering established but don't have allowed traffic. In order to move managed instance from one subnet to another, virtual network peering needs to be established from both source and target virtual network. Please configure virtual network requirements and then try the operation again. Learn more https://docs.microsoft.com/en-us/azure/virtual-network/tutorial-connect-virtual-networks-portal#peer-virtual-networks. 

             * 400 ManagedInstanceAndSubnetAreNotOnTheSameSubscription - Subnet provided for managed instance deployment is located on subscription different than the one submitted for managed instance. Managed instance and subnet used for deploying the instance must be on the same subscription. Please provide another subnet or switch to the subnet subscription and then try the operation again.

             * 400 CreateManagedInstanceInvalidSubnetSize - User attempted to create managed instance in a subnet that is smaller than the allowed minimal subnet size.

             * 400 AddressRangeOfTargetSubnetAndSubnetOfGeoDRReplicaCantOverlap - Subnet selected for managed instance migration has address range that overlaps with address range of subnet that holds geo replicated secondary instance. Please verify that your subnet is configured according to guidelines in https://aka.ms/move-managed-instance. 

             * 400 TargetSubnetMustBeConfiguredToAllowGeoDRReplication - Subnet selected for managed instance migration is not configured to enable communication with a geo replicated secondary instance. Please check if all of the required ports are open. To properly configure your subnet read the guidelines in https://aka.ms/move-managed-instance. 

             * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 PasswordTooShort - The provided password is too short

             * 400 PasswordTooLong - The provided password is too long.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 GatewayInvalidEdition - '{0}' is not a valid database edition in this version of SQL Server.

             * 400 ManagedInstanceInvalidHardwareFamilyForInstancePool - User tried to select invalid hardware family for managed instance inside an existing instance pool.

             * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.

             * 400 ManagedInstanceInvalidLicenseTypeForInstancePool - User tried to select invalid license type for managed instance inside an existing instance pool.

             * 400 ManagedInstanceUpdateSloFromVersionlessToVersionedNotAllowed - Changing the database format from '{0}' to '{1}' is not supported. Check the database format property value specified and visit https://aka.ms/sqlmidatabaseformat  for more details.

             * 400 ManagedInstanceUpdateSloFromNewerToOlderVersionEditionNotAllowed - Changing the database format from '{0}' to '{1}' is not supported. Check the database format property value specified and visit https://aka.ms/sqlmidatabaseformat  for more details.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 ManagedInstanceUpdateSloFromVersionedToVersionlessWorkerCLNotAllowed - Changing the database format is not supported for this managed instance. Check the database format property value specified and visit https://aka.ms/sqlmi-fwnov2022  for more details.

             * 400 InvalidLocation - An invalid location was specified.

             * 400 ManagedInstanceVersionEditionParameterNotAllowedForUsing - Specifying the database format property value is not supported at this time.

             * 400 ManagedInstanceFreemiumInvalidArchitecture - A freemium instance can not be created in the specified subnet '(0)'.

             * 400 VnetInWrongRegion - Virtual network is in wrong region.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 VnetAddressRangeError - Virtual network address range is invalid.

             * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.

             * 400 StorageIOpsNotSupported - Storage IOps parameter is not allowed in the instance create/update operation.

             * 400 InvalidCollation - Invalid collation.

             * 400 StorageThroughputMBpsNotSupported - Storage throughput MBps parameter is not allowed in the instance create/update operation.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 StorageIOpsNotSupportedForSpecifiedEdition - Storage IOps parameter is not allowed in the instance create/update operation for the specified edition.

             * 400 StorageThroughputMBpsNotSupportedForSpecifiedEdition - Storage throughput MBps parameter is not allowed in the instance create/update operation for the specified edition.

             * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.

             * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server '{0}', Database '{1}' due to unexpected delay. Please try again.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.

             * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.

             * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.

             * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.

             * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.

             * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.

             * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.

             * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.

             * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.

             * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 VnetResourceNotFound - Resource not found: '{0}'.

             * 400 InvalidTimezone - Invalid timezone.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.

             * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation 'SQL_Latin1_General_CP1_CI_AS'.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.

             * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.

             * 400 ManagementServiceManagedServerDisabled - Operation failed since Managed Instance '{0}' is disabled. Please enable Managed Instance and try again.

             * 400 MiGeoRestoreWithWrongBackupStorageRedundancy - Geo-Restore is not allowed for managed instances with LRS/ZRS backup storage redundancy.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 400 AadOnlyAuthenticationIsEnabled - Azure Active Directory Only Authentication is enabled. Please contact your system administrator.

             * 400 UpdatingInstanceAndBackupRedundancy - Instance zone redundancy and backup storage redundancy cannot be updated in the same request.

             * 400 DeleteOfManagedInstanceIsDisabled - Delete operation of managed instance is disabled.

             * 400 RequestCantLandOnPaaSv2Platform - Request needs to land on PaaSv2 platform but PaaSv2 is not enabled.

             * 400 CustomMaintenanceWindowIsDisabled - Custom maintenance window is not enabled.

             * 400 DeleteOfVersion2VirtualClusterIsDisabled - Delete of virtual cluster with version 2 is not enabled.

             * 400 DeleteOfVirtualClusterIsDisabled - Delete of virtual cluster is not enabled.

             * 400 MICantBeMovedFromOrToInstancePool - Existing managed instance can't be moved to managed instance pool.

             * 400 DnsRefreshOnVirtualClusterIsDisabled - Refresh of DNS records on virtual cluster is not enabled.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidMinimalTlsVersion - Invalid minimal TLS version.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 DeleteOfManagedInstanceIsDisabled - Delete operation of managed instance is disabled.

             * 400 CustomMaintenanceWindowIsDisabled - Custom maintenance window is not enabled.

             * 400 MICantBeMovedFromOrToInstancePool - Existing managed instance can't be moved to managed instance pool.

             * 400 AadOnlyAuthenticationIsEnabled - Azure Active Directory Only Authentication is enabled. Please contact your system administrator.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidExternalAdministratorLogin - Invalid or missing external administrator login name.

             * 400 InvalidExternalAdministratorSid - Invalid or missing external administrator object id.

             * 400 InvalidExternalAdministratorTenantId - Invalid or missing external administrator tenant id.

             * 400 ExternalAdministratorPrincipalType - Invalid or missing external administrator principal type. Please select from User, Application or Group.

             * 400 MissingExternalAdministratorWithAadOnlyAuth - In order to use Azure AD Only Authentication, please provide details of an external administrator.

             * 400 ExternalAdministratorLoginSameAsSqlAdmin - The names of the Azure Active Directory administrator and of the server admin account must be different. Please provide different values.

             * 400 InvalidMaintenanceWindowSettings - Invalid maintenance window settings.

             * 400 InvalidMaintenanceWindowProperty - Invalid maintenance window property was specified.

             * 400 InvalidMaintenanceWindowPropertyNull - Invalid maintenance window with required properties null.

             * 400 InvalidMaintenanceWindowTypeWithPropertySpecified - Maintenance window type must not have certain properties specified.

             * 400 UpdateOfParameterNotSupported - Update of '{0}' is not supported.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 MissingKeyVaultUriForRestore - Azure Key Vault key URI '{0}' is required to successfully restore the database '{1}' under server '{2}'.

             * 400 AzureKeyVaultKeyUsedOnGeoPrimary - The operation could not be completed because the Azure Key Vault Key name {0} is currently set as encryption protector on geo-primary.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 PerDatabaseCMKDWNotSupported - Database-level CMK in preview is not supported for Datawarehouse edition.

             * 400 BlockSystemAssignedIdentityForCrossTenantCMK - Cross tenant CMK can only be configured when the server is configured with a User Assigned Managed Identity. Refer to https://aka.ms/sqltdebyokumi to configure User Assigned Managed Identity.

             * 400 CreateDatabaseAttemptedWithRotationInProgress - The create database operation can not be performed at this time due to ongoing Transparent Data Encryption (TDE) key rotation on the server. Please try the operation again later.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 PerDatabaseCMKRestoreNotSupported - Database restore is not supported when Database-level CMK is configured in preview.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 PerDatabaseCMKHSNotSupported - Database-level CMK in preview is not supported for Hyperscale edition.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 CMKOperationNotAllowed - User tried to perform an operation on the server when the server did not have Azure Key Vault Access.

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InstancePoolNotFound - An instance pool cannot be found

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ResourceNotFound - The requested resource was not found.

             * 405 InvalidStorageIOpsLimitValue - Invalid storage IOps limit: {0} IOps. Storage IOps limit must be specified between {1} IOps and {2} IOps, in increments of {3} IOps.

             * 405 InvalidStorageThroughputMBpsLimitValue - Invalid storage throughput limit: {0} MBps. Storage throughput limit must be specified between {1} MBps and {2} MBps, in increments of {3} MBps.

             * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.

             * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.

             * 405 InvalidStorageSizeValue - "Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerAlreadyExists - Duplicate server name.

             * 409 ServerOverridePreconditionFailed - Failed to apply server override on category '{0}', because physical db or instance '{1}' in server '{2}' is currently not in 'Ready' or 'Deactivated' state.

             * 409 ServerDisabled - Server is disabled.

             * 409 ManagedInstanceIsBusy - The server '{0}' is currently busy. Please wait a few minutes before trying again.

             * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.

             * 409 MiCreateFailedNonDelegatedSubnet - User tried to deploy Managed Instance or Managed Instance pool in subnet that is not delegated to Microsoft.Sql/managedInstances.

             * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.

             * 409 BackupRedundancyUpdateAndInstanceRedundancyConflict - The instance is multi-az but backup storage is being updated from zone redundant to non-zone redundant.

             * 409 InstanceRedundancyUpdateWhileBackupRedundancyUpdateInProgress - Cannot update instance redundancy because backup storage redundancy update is in progress.

             * 409 InstanceRedundancyUpdateAndBackupRedundancyConflict - The backup storage is non-zone redundant but instance redundancy is being updated to zone redundant.

             * 409 BackupRedundancyUpdateConflict - Cannot update backup storage redundancy because a backup storage redundancy update is already in progress.

             * 409 MiDropFailedOnAuthLocks - User tried to drop last Managed Instance in subnet that has Lock applied on resource(s).

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 412 InstanceNotReadyForBackupRedundancyUpdate - Cannot update backup storage redundancy because the instance is not ready.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 GatewayInternalServerError - The server encountered an unexpected exception.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/failover?api-version=2023-05-01-preview:
    post:
      tags:
        - ManagedInstances
      description: Failovers a managed instance.
      operationId: ManagedInstances_Failover
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance to failover.
          required: true
          schema:
            type: string
        - name: replicaType
          in: query
          description: The type of replica to be failed over.
          required: false
          schema:
            enum:
              - Primary
              - ReadableSecondary
            x-ms-enum:
              name: ReplicaType
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully completed managed instance failover.
        '202':
          description: Managed instance failover is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceFailoverThrottled - There was a recent failover on the managed instance.

             * 400 ManagedInstanceFailoverNotSupportedOnSKU - This type of customer initiated failover is not supported on the given SKU.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ManagedInstanceFailoverFullBackupMissing - Automated backup needs to complete the first full backup for a new database.

             * 409 ManagedInstanceNotInStateToFailover - The managed instance is currently in a state such that failover cannot be issued.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/outboundNetworkDependenciesEndpoints?api-version=2023-05-01-preview:
    get:
      tags:
        - ManagedInstances
      description: Gets the collection of outbound network dependencies for the given managed instance.
      operationId: ManagedInstancesOutboundNetworkDependenciesByManagedInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the outbound network dependencies for this managed instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutboundEnvironmentEndpointCollection'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedInstances_ListOutboundNetworkDependenciesByManagedInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/refreshExternalGovernanceStatus?api-version=2023-05-01-preview:
    post:
      tags:
        - ManagedInstances
      description: Refresh external governance enablement status.
      operationId: ManagedInstances_RefreshStatus
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully refreshed external governance enablement status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshExternalGovernanceStatusOperationResultMI'
        '202':
          description: Refreshing external governance enablement status.
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubnetMissingRequiredDelegation - Selected subnet is not delegated for SQL Managed Instance.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/start?api-version=2023-05-01-preview:
    post:
      tags:
        - ManagedInstances
      description: Starts the managed instance.
      operationId: ManagedInstances_Start
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully started the managed instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstance'
        '202':
          description: Starting the managed instance is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 StartStopOfManagedInstanceIsDisabled - Start and stop operation on managed instance is not enabled.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 ManagementServiceStartStopManagedInstanceSubscriptionNotEnabledForFeature - User attempted to use Start/Stop feature without having the subscription allowlisted for the appropriate subscription feature.

             * 400 ManagementServiceStartManagedInstanceFeatureDisabled - User attempted to use the Start Azure SQL Managed Instance feature, which is disabled.

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 ManagementServiceStartManagedInstanceNotSupportedOnSKU - Start operation is not supported on the given SKU.

             * 400 ManagementServiceStartManagedInstanceTriggeredWhileStartInProgress - User attempted to Start Azure SQL Managed Instance that is not in Stopped state.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/stop?api-version=2023-05-01-preview:
    post:
      tags:
        - ManagedInstances
      description: Stops the managed instance.
      operationId: ManagedInstances_Stop
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully stopped the managed instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstance'
        '202':
          description: Stopping the managed instance is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagementServiceStopManagedInstanceZoneRedundant - Stop executed on instance with zone redundancy enabled.

             * 400 ManagementServiceStopManagedInstancePartOfFailoverGroup - Stop executed on the instance that is part of failover group.

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 ManagementServiceStartStopManagedInstanceSubscriptionNotEnabledForFeature - User attempted to use Start/Stop feature without having the subscription allowlisted for the appropriate subscription feature.

             * 400 ManagementServiceStopManagedInstanceNotSupportedOnSKU - Stop operation is not supported on the given SKU.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 StartStopOfManagedInstanceIsDisabled - Start and stop operation on managed instance is not enabled.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 ManagementServiceStopManagedInstanceUsingMILink - Stop executed on the instance that has Managed Instance link configured.

             * 400 ManagementServiceStopManagedInstanceFeatureDisabled - User attempted to use the Stop Azure SQL Managed Instance feature, which is disabled.

             * 400 ManagementServiceStopManagedInstanceHostedOnRdfePlatform - Stop executed on the instance that is not running with Feature Wave November 2022

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ManagementServiceStopManagedInstanceAlreadyInProgress - Stop operation submitted for operation that is in stopping/stopped state.

             * 409 ManagementServiceStopManagedInstanceConflictingOperation - Stop Azure SQL Managed Instance conflicting operation message.

             * 409 ManagementServiceStopManagedInstanceDroppedDuringStop - Stop executed on instance that is in deleting state or removed in the meantime.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/topqueries?api-version=2023-05-01-preview:
    get:
      tags:
        - ManagedInstances
      description: Get top resource consuming queries of a managed instance.
      operationId: ManagedInstancesByManagedInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: numberOfQueries
          in: query
          description: How many 'top queries' to return. Default is 5.
          required: false
          schema:
            format: int32
            type: integer
        - name: databases
          in: query
          description: Comma separated list of databases to be included into search. All DB's are included if this parameter is not specified.
          required: false
          schema:
            type: string
        - name: startTime
          in: query
          description: Start time for observed period.
          required: false
          schema:
            type: string
        - name: endTime
          in: query
          description: End time for observed period.
          required: false
          schema:
            type: string
        - name: interval
          in: query
          description: The time step to be used to summarize the metric values. Default value is PT1H
          required: false
          schema:
            enum:
              - PT1H
              - P1D
            x-ms-enum:
              name: QueryTimeGrainType
              modelAsString: true
            type: string
        - name: aggregationFunction
          in: query
          description: Aggregation function to be used, default value is 'sum'
          required: false
          schema:
            enum:
              - avg
              - min
              - max
              - stdev
              - sum
            x-ms-enum:
              name: AggregationFunctionType
              modelAsString: true
            type: string
        - name: observationMetric
          in: query
          description: Metric to be used for ranking top queries. Default is 'cpu'
          required: false
          schema:
            enum:
              - cpu
              - io
              - logIo
              - duration
              - dtu
            x-ms-enum:
              name: MetricType
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved top queries for managed instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopQueriesListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedInstances_ListByManagedInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/dtc?api-version=2022-05-01-preview:
    get:
      tags:
        - ManagedInstanceDtcs
      description: Gets a list of managed instance DTC settings.
      operationId: ManagedInstanceDtcsByManagedInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified managed instance DTC settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceDtcListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidDtcVirtualClusterVersion - Virtual cluster version of the Azure SQL Managed Instance "{0}" is not supported.

             * 400 ManagementServiceManagedInstanceDtcFeatureDisabled - User tried to interact with Azure SQL Managed Instance DTC settings but DTC feature is currently not supported.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedInstanceDtcs_ListByManagedInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/dtc/{dtcName}?api-version=2022-05-01-preview:
    get:
      tags:
        - ManagedInstanceDtcs
      description: Gets managed instance DTC settings.
      operationId: ManagedInstanceDtcs_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: dtcName
          in: path
          description: The name of the managed instance DTC.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: DtcName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified managed instance DTC settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceDtc'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidDtcName - User tried to interact with Azure SQL Managed Instance DTC settings with a DTC name different from 'current'.

             * 400 InvalidUpdateDtcOperationParameters - The provided set of parameters in the body of the request is either empty or invalid.

             * 400 InvalidDtcAuthenticationMethod - DTC authentication method "{0}" is not supported.

             * 400 InvalidDtcVirtualClusterVersion - Virtual cluster version of the Azure SQL Managed Instance "{0}" is not supported.

             * 400 ManagementServiceManagedInstanceDtcFeatureDisabled - User tried to interact with Azure SQL Managed Instance DTC settings but DTC feature is currently not supported.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - ManagedInstanceDtcs
      description: Updates managed instance DTC settings.
      operationId: ManagedInstanceDtcs_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: dtcName
          in: path
          description: The name of the managed instance DTC.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: DtcName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: Managed instance DTC settings.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedInstanceDtc'
      responses:
        '200':
          description: Applying DTC settings is in progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceDtc'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidDtcName - User tried to interact with Azure SQL Managed Instance DTC settings with a DTC name different from 'current'.

             * 400 InvalidUpdateDtcOperationParameters - The provided set of parameters in the body of the request is either empty or invalid.

             * 400 InvalidDtcAuthenticationMethod - DTC authentication method "{0}" is not supported.

             * 400 InvalidDtcXaTransactionsDefaultTimeoutValue - Invalid DTC XA Transactions default timeout value.

             * 400 InvalidDtcXaTransactionsMaximumTimeoutValue - Invalid DTC XA Transactions maximum timeout value.

             * 400 InvalidDtcVirtualClusterVersion - Virtual cluster version of the Azure SQL Managed Instance "{0}" is not supported.

             * 400 ManagementServiceManagedInstanceDtcFeatureDisabled - User tried to interact with Azure SQL Managed Instance DTC settings but DTC feature is currently not supported.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/maintenanceWindows/current?api-version=2020-11-01-preview:
    get:
      tags:
        - MaintenanceWindows
      description: Gets maintenance windows settings for a database.
      operationId: MaintenanceWindows_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database to get maintenance windows for.
          required: true
          schema:
            type: string
        - name: maintenanceWindowName
          in: query
          description: Maintenance window name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved maintenance windows settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceWindows'
        default:
          description: '*** Error Responses: ***'
    put:
      tags:
        - MaintenanceWindows
      description: Sets maintenance windows settings for a database.
      operationId: MaintenanceWindows_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database to set maintenance windows for.
          required: true
          schema:
            type: string
        - name: maintenanceWindowName
          in: query
          description: Maintenance window name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceWindows'
      responses:
        '200':
          description: Successfully set maintenance windows settings.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidMaintenanceWindowSelection - Invalid maintenance window selection.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/scanResults?api-version=2022-11-01-preview:
    get:
      tags:
        - SqlVulnerabilityAssessmentScanResult
      description: Gets a vulnerability assessment scan record of a database.
      operationId: SqlVulnerabilityAssessmentScanResult_ListByScan
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the SQL Vulnerability Assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: SqlVulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: scanId
          in: path
          description: The scan id of the SQL Vulnerability Assessment scan to retrieve result from.
          required: true
          schema:
            type: string
        - name: systemDatabaseName
          in: query
          description: The SQL vulnerability assessment system database name.
          required: true
          schema:
            enum:
              - master
            x-ms-enum:
              name: VulnerabilityAssessmentSystemDatabaseName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved SQL Vulnerability Assessment scan results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SQLVulnerabilityAssessmentScanListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/scanResults/{scanResultId}?api-version=2022-11-01-preview:
    get:
      tags:
        - SqlVulnerabilityAssessmentScanResult
      description: Gets a vulnerability assessment scan record of a database.
      operationId: SqlVulnerabilityAssessmentScanResult_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the SQL Vulnerability Assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: SqlVulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: scanId
          in: path
          description: The scan id of the SQL Vulnerability Assessment scan to retrieve result from.
          required: true
          schema:
            type: string
        - name: scanResultId
          in: path
          description: The scan result id of the specific result to retrieve.
          required: true
          schema:
            type: string
        - name: systemDatabaseName
          in: query
          description: The SQL vulnerability assessment system database name.
          required: true
          schema:
            enum:
              - master
            x-ms-enum:
              name: VulnerabilityAssessmentSystemDatabaseName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved SQL Vulnerability Assessment scan results for id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlVulnerabilityAssessmentScanResults'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/outboundFirewallRules/{outboundRuleFqdn}?api-version=2021-02-01-preview:
    get:
      tags:
        - OutboundFirewallRules
      description: Gets an outbound firewall rule.
      operationId: OutboundFirewallRules_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: outboundRuleFqdn
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved a specified outbound firewall rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutboundFirewallRule'
        default:
          description: |-
            *** Error Responses: ***

             * 400 OutboundFirewallRulesNotAllowedOnSynapse - Outbound Firewall Rules are not allowed on SQL DB servers connected to Synapse

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - OutboundFirewallRules
      description: Create a outbound firewall rule with a given name.
      operationId: OutboundFirewallRules_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: outboundRuleFqdn
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OutboundFirewallRule'
      responses:
        '200':
          description: Successfully created outbound firewall rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutboundFirewallRule'
        '201':
          description: Successfully created outbound firewall rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutboundFirewallRule'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 OutboundFirewallRulesNotAllowedOnSynapse - Outbound Firewall Rules are not allowed on SQL DB servers connected to Synapse

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
    delete:
      tags:
        - OutboundFirewallRules
      description: Deletes a outbound firewall rule with a given name.
      operationId: OutboundFirewallRules_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: outboundRuleFqdn
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted outbound firewall rule.
        '202':
          description: Accepted
        '204':
          description: Outbound firewall rule does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 OutboundFirewallRulesNotAllowedOnSynapse - Outbound Firewall Rules are not allowed on SQL DB servers connected to Synapse

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/outboundFirewallRules?api-version=2021-02-01-preview:
    get:
      tags:
        - OutboundFirewallRules
      description: Gets all outbound firewall rules on a server.
      operationId: OutboundFirewallRules_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved outbound firewall rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutboundFirewallRuleListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 OutboundFirewallRulesNotAllowedOnSynapse - Outbound Firewall Rules are not allowed on SQL DB servers connected to Synapse

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents/{syncAgentName}?api-version=2020-11-01-preview:
    get:
      tags:
        - SyncAgents
      description: Gets a sync agent.
      operationId: SyncAgents_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server on which the sync agent is hosted.
          required: true
          schema:
            type: string
        - name: syncAgentName
          in: path
          description: The name of the sync agent.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified sync agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncAgent'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 CannotDeleteInUseSyncAgent - Cannot delete sync agent because it is used by sync member.

             * 400 InvalidSyncAgent - Sync agent is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SyncOperation_AgentAlreadyExists - The sync agent with the same name already exists.

             * 409 SyncOperation_AgentIdAlreadyExists - The sync agent with the same id already exists.
    put:
      tags:
        - SyncAgents
      description: Creates or updates a sync agent.
      operationId: SyncAgents_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server on which the sync agent is hosted.
          required: true
          schema:
            type: string
        - name: syncAgentName
          in: path
          description: The name of the sync agent.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested sync agent resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncAgent'
      responses:
        '200':
          description: Successfully updated the sync agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncAgent'
        '201':
          description: Successfully created the sync agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncAgent'
        '202':
          description: Creating or updating the sync agent is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 CannotDeleteInUseSyncAgent - Cannot delete sync agent because it is used by sync member.

             * 400 InvalidSyncAgent - Sync agent is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SyncOperation_AgentAlreadyExists - The sync agent with the same name already exists.

             * 409 SyncOperation_AgentIdAlreadyExists - The sync agent with the same id already exists.
      x-ms-long-running-operation: true
    delete:
      tags:
        - SyncAgents
      description: Deletes a sync agent.
      operationId: SyncAgents_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server on which the sync agent is hosted.
          required: true
          schema:
            type: string
        - name: syncAgentName
          in: path
          description: The name of the sync agent.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the sync agent.
        '202':
          description: Deleting the sync agent is in progress.
        '204':
          description: The specified sync agent does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 CannotDeleteInUseSyncAgent - Cannot delete sync agent because it is used by sync member.

             * 400 InvalidSyncAgent - Sync agent is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SyncOperation_AgentAlreadyExists - The sync agent with the same name already exists.

             * 409 SyncOperation_AgentIdAlreadyExists - The sync agent with the same id already exists.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents?api-version=2020-11-01-preview:
    get:
      tags:
        - SyncAgents
      description: Lists sync agents in a server.
      operationId: SyncAgents_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server on which the sync agent is hosted.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of sync agents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncAgentListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 CannotDeleteInUseSyncAgent - Cannot delete sync agent because it is used by sync member.

             * 400 InvalidSyncAgent - Sync agent is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SyncOperation_AgentAlreadyExists - The sync agent with the same name already exists.

             * 409 SyncOperation_AgentIdAlreadyExists - The sync agent with the same id already exists.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents/{syncAgentName}/generateKey?api-version=2020-11-01-preview:
    post:
      tags:
        - SyncAgents
      description: Generates a sync agent key.
      operationId: SyncAgents_GenerateKey
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server on which the sync agent is hosted.
          required: true
          schema:
            type: string
        - name: syncAgentName
          in: path
          description: The name of the sync agent.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully generate a sync agent key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncAgentKeyProperties'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 CannotDeleteInUseSyncAgent - Cannot delete sync agent because it is used by sync member.

             * 400 InvalidSyncAgent - Sync agent is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SyncOperation_AgentAlreadyExists - The sync agent with the same name already exists.

             * 409 SyncOperation_AgentIdAlreadyExists - The sync agent with the same id already exists.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/syncAgents/{syncAgentName}/linkedDatabases?api-version=2020-11-01-preview:
    get:
      tags:
        - SyncAgents
      description: Lists databases linked to a sync agent.
      operationId: SyncAgentsLinkedDatabases_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server on which the sync agent is hosted.
          required: true
          schema:
            type: string
        - name: syncAgentName
          in: path
          description: The name of the sync agent.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved sync agent linked SQL server databases.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncAgentLinkedDatabaseListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 CannotDeleteInUseSyncAgent - Cannot delete sync agent because it is used by sync member.

             * 400 InvalidSyncAgent - Sync agent is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SyncOperation_AgentAlreadyExists - The sync agent with the same name already exists.

             * 409 SyncOperation_AgentIdAlreadyExists - The sync agent with the same id already exists.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: SyncAgents_ListLinkedDatabases
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/tdeCertificates?api-version=2020-11-01-preview:
    post:
      tags:
        - ManagedInstanceTdeCertificates
      description: Creates a TDE certificate for a given server.
      operationId: ManagedInstanceTdeCertificates_Create
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested TDE certificate to be created or updated.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TdeCertificate'
      responses:
        '200':
          description: Successfully created the TDE certificate.
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 MissingPrivateBlob - The private blob is missing.

             * 400 InvalidPrivateBlobOrPassword - Invalid private blob or password specified.

             * 400 PrivateBlobWithoutPrivateKey - The provided blob does not contain private key.

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups?api-version=2023-05-01-preview:
    get:
      tags:
        - LongTermRetentionBackups
      description: Lists the long term retention backups for a given location.
      operationId: LongTermRetentionBackups_ListByLocation
      parameters:
        - name: locationName
          in: path
          description: The location of the database
          required: true
          schema:
            type: string
        - name: onlyLatestPerDatabase
          in: query
          description: Whether or not to only get the latest backup for each database.
          required: false
          schema:
            type: boolean
        - name: databaseState
          in: query
          description: Whether to query against just live databases, just deleted databases, or all databases.
          required: false
          schema:
            enum:
              - All
              - Live
              - Deleted
            x-ms-enum:
              name: databaseState
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of backups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups?api-version=2023-05-01-preview:
    get:
      tags:
        - LongTermRetentionBackups
      description: Lists the long term retention backups for a given server.
      operationId: LongTermRetentionBackups_ListByServer
      parameters:
        - name: locationName
          in: path
          description: The location of the database
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          description: The name of the server
          required: true
          schema:
            type: string
        - name: onlyLatestPerDatabase
          in: query
          description: Whether or not to only get the latest backup for each database.
          required: false
          schema:
            type: boolean
        - name: databaseState
          in: query
          description: Whether to query against just live databases, just deleted databases, or all databases.
          required: false
          schema:
            enum:
              - All
              - Live
              - Deleted
            x-ms-enum:
              name: databaseState
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of backups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups?api-version=2023-05-01-preview:
    get:
      tags:
        - LongTermRetentionBackups
      description: Lists all long term retention backups for a database.
      operationId: LongTermRetentionBackups_ListByDatabase
      parameters:
        - name: locationName
          in: path
          description: The location of the database
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          description: The name of the server
          required: true
          schema:
            type: string
        - name: longTermRetentionDatabaseName
          in: path
          description: The name of the database
          required: true
          schema:
            type: string
        - name: onlyLatestPerDatabase
          in: query
          description: Whether or not to only get the latest backup for each database.
          required: false
          schema:
            type: boolean
        - name: databaseState
          in: query
          description: Whether to query against just live databases, just deleted databases, or all databases.
          required: false
          schema:
            enum:
              - All
              - Live
              - Deleted
            x-ms-enum:
              name: databaseState
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of backups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}?api-version=2023-05-01-preview:
    get:
      tags:
        - LongTermRetentionBackups
      description: Gets a long term retention backup.
      operationId: LongTermRetentionBackups_Get
      parameters:
        - name: locationName
          in: path
          description: The location of the database.
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          description: The name of the server
          required: true
          schema:
            type: string
        - name: longTermRetentionDatabaseName
          in: path
          description: The name of the database
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          description: The backup name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the backup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackup'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier for SQL DBs.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 LongTermRetentionMismatchingSubscriptionId - The provided subscription id did not match the id in the other input

             * 400 LongTermRetentionMismatchingResourceGroupName - The provided resource group name did not match the name in the other input

             * 400 LongTermRetentionMismatchingServerName - The provided server name did not match the name in the other input

             * 400 DeleteLtrSubscriptionMissing - The subscription ID is required to delete a long-term retention backup.

             * 400 DeleteLtrServerMissing - The server name is required to delete a long-term retention backup.

             * 400 DeleteLtrDatabaseMissing - The database name is required to delete a long-term retention backup.

             * 400 LtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 UpdateBackupStorageAccessTierLTRFailedOnZoneRedundantBackupStorage - Archiving long-term retention backups on zone redundant backup storage is not supported. Use locally redundant or geo-redundant storage types instead.

             * 400 UpdateBackupStorageAccessTierLtrSubscriptionMissing - The subscription ID is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrServerMissing - The server name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrDatabaseMissing - The database name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - LongTermRetentionBackups
      description: Deletes a long term retention backup.
      operationId: LongTermRetentionBackups_Delete
      parameters:
        - name: locationName
          in: path
          description: The location of the database
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          description: The name of the server
          required: true
          schema:
            type: string
        - name: longTermRetentionDatabaseName
          in: path
          description: The name of the database
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          description: The backup name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the backup.
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier for SQL DBs.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 LongTermRetentionMismatchingSubscriptionId - The provided subscription id did not match the id in the other input

             * 400 LongTermRetentionMismatchingResourceGroupName - The provided resource group name did not match the name in the other input

             * 400 LongTermRetentionMismatchingServerName - The provided server name did not match the name in the other input

             * 400 DeleteLtrSubscriptionMissing - The subscription ID is required to delete a long-term retention backup.

             * 400 DeleteLtrServerMissing - The server name is required to delete a long-term retention backup.

             * 400 DeleteLtrDatabaseMissing - The database name is required to delete a long-term retention backup.

             * 400 LtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 UpdateBackupStorageAccessTierLTRFailedOnZoneRedundantBackupStorage - Archiving long-term retention backups on zone redundant backup storage is not supported. Use locally redundant or geo-redundant storage types instead.

             * 400 UpdateBackupStorageAccessTierLtrSubscriptionMissing - The subscription ID is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrServerMissing - The server name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrDatabaseMissing - The database name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/changeAccessTier?api-version=2023-05-01-preview:
    post:
      tags:
        - LongTermRetentionBackups
      description: Change a long term retention backup access tier.
      operationId: LongTermRetentionBackups_ChangeAccessTier
      parameters:
        - name: locationName
          in: path
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          required: true
          schema:
            type: string
        - name: longTermRetentionDatabaseName
          in: path
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeLongTermRetentionBackupAccessTierParameters'
      responses:
        '200':
          description: Successfully changed the long term retention backup access tier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackup'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier for SQL DBs.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 LongTermRetentionMismatchingSubscriptionId - The provided subscription id did not match the id in the other input

             * 400 LongTermRetentionMismatchingResourceGroupName - The provided resource group name did not match the name in the other input

             * 400 LongTermRetentionMismatchingServerName - The provided server name did not match the name in the other input

             * 400 DeleteLtrSubscriptionMissing - The subscription ID is required to delete a long-term retention backup.

             * 400 DeleteLtrServerMissing - The server name is required to delete a long-term retention backup.

             * 400 DeleteLtrDatabaseMissing - The database name is required to delete a long-term retention backup.

             * 400 LtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 UpdateBackupStorageAccessTierLTRFailedOnZoneRedundantBackupStorage - Archiving long-term retention backups on zone redundant backup storage is not supported. Use locally redundant or geo-redundant storage types instead.

             * 400 UpdateBackupStorageAccessTierLtrSubscriptionMissing - The subscription ID is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrServerMissing - The server name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrDatabaseMissing - The database name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 LongTermRetentionMigrationRequestNotSupported - Subscription is not allowed LTR backup Migration feature.

             * 400 LongTermRetentionMigrationCrossClusterRequestNotSupported - Source and target subscriptions are not allowed to communicate for LTR backup copy feature.

             * 400 LongTermRetentionMigrationParameterMissing - Required parameter missing for the operation.

             * 400 LongTermRetentionMigrationSameServerNotSupported - LTR Copy feature is not supported to copy LTR backups within same server.

             * 400 LongTermRetentionMigrationTargetServerNotFound - Target server does not exists or is not ready for LTR backup copy operation.

             * 400 LongTermRetentionMigrationTargetDatabaseNotFound - Target Database does not exists on the server.

             * 400 LongTermRetentionMigrationStorageTypeNotSupported - Specified Backup Storage Redundancy is not supported in target region.

             * 400 LongTermRetentionMigrationStorageMismatch - Active backup redundancy of database does not match backup redundancy requested by customer.

             * 400 LtrOperationFailedBackupImmutable - Deleting Long Term Retention backup failed because the backup is immutable.

             * 400 LongTermRetentionMigrationDatabaseTypeNotSupported - LTR migration is only supported for managed instance and Azure SQL DB LTR backups.

             * 400 LongTermRetentionMigrationBackupStorageRedundancyNotAllowed - Changing backup storage redundancy is not allowed for LTR Copy operations.

             * 400 LtrRestoreFailedArchiveStorageTier - Restoring archived long-term retention backup is not supported. Restore can be performed only on rehydrated or regular long-term retention backups.

             * 400 LtrArchiveStorageTierNotEnabled - 

             * 400 LtrArchiveWrongParameters - ChangeLongTermRetentionBackupAccessTier is not supported for the desired (backupStorageAccessTier, operationMode) combination. Only (Archive, Move) and (Hot, Copy) are allowed.

             * 400 LTRArchiveRedundancyChangeFailed - Updating the backup storage redundancy type to zone-redundant storage is not supported when a long-term retention policy with the 'archive' backup storage access tier is set

             * 400 LongTermRetentionMigrationSubscriptionNotFound - The subscription could not be found.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 LongTermRetentionMigrationBackupNotFound - LTR backup specified does not exists.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 LongTermRetentionMigrationRequestConflict - A conflict operation on this LTR backup is still in progress.

             * 409 LongTermRetentionMigrationBackupConflict - Another LTR backup with same backup time for target database exists.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 LongTermRetentionMigrationRequestFailedToStartOnTarget - Failed to start LTR backup copy request in target region.

             * 500 LongTermRetentionMigrationRequestCopyFailed - Copy operation failed for LTR backup blobs.

             * 500 LongTermRetentionMigrationRestoreVerExceeded - Restore verification failed after max attempts were reached.

             * 500 LongTermRetentionMigrationRestoreVerFailed - Restore verification failed.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/copy?api-version=2023-05-01-preview:
    post:
      tags:
        - LongTermRetentionBackups
      description: Copy an existing long term retention backup.
      operationId: LongTermRetentionBackups_Copy
      parameters:
        - name: locationName
          in: path
          description: The location of the database.
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          description: The name of the server
          required: true
          schema:
            type: string
        - name: longTermRetentionDatabaseName
          in: path
          description: The name of the database
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          description: The backup name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The parameters needed for long term retention copy request
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyLongTermRetentionBackupParameters'
      responses:
        '200':
          description: Successfully copied the backup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackupOperationResult'
        '202':
          description: Copying the backup is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier for SQL DBs.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 LongTermRetentionMismatchingSubscriptionId - The provided subscription id did not match the id in the other input

             * 400 LongTermRetentionMismatchingResourceGroupName - The provided resource group name did not match the name in the other input

             * 400 LongTermRetentionMismatchingServerName - The provided server name did not match the name in the other input

             * 400 DeleteLtrSubscriptionMissing - The subscription ID is required to delete a long-term retention backup.

             * 400 DeleteLtrServerMissing - The server name is required to delete a long-term retention backup.

             * 400 DeleteLtrDatabaseMissing - The database name is required to delete a long-term retention backup.

             * 400 LtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 UpdateBackupStorageAccessTierLTRFailedOnZoneRedundantBackupStorage - Archiving long-term retention backups on zone redundant backup storage is not supported. Use locally redundant or geo-redundant storage types instead.

             * 400 UpdateBackupStorageAccessTierLtrSubscriptionMissing - The subscription ID is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrServerMissing - The server name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrDatabaseMissing - The database name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 LongTermRetentionMigrationRequestNotSupported - Subscription is not allowed LTR backup Migration feature.

             * 400 LongTermRetentionMigrationCrossClusterRequestNotSupported - Source and target subscriptions are not allowed to communicate for LTR backup copy feature.

             * 400 LongTermRetentionMigrationParameterMissing - Required parameter missing for the operation.

             * 400 LongTermRetentionMigrationSameServerNotSupported - LTR Copy feature is not supported to copy LTR backups within same server.

             * 400 LongTermRetentionMigrationTargetServerNotFound - Target server does not exists or is not ready for LTR backup copy operation.

             * 400 LongTermRetentionMigrationTargetDatabaseNotFound - Target Database does not exists on the server.

             * 400 LongTermRetentionMigrationStorageTypeNotSupported - Specified Backup Storage Redundancy is not supported in target region.

             * 400 LongTermRetentionMigrationStorageMismatch - Active backup redundancy of database does not match backup redundancy requested by customer.

             * 400 LtrOperationFailedBackupImmutable - Deleting Long Term Retention backup failed because the backup is immutable.

             * 400 LongTermRetentionMigrationDatabaseTypeNotSupported - LTR migration is only supported for managed instance and Azure SQL DB LTR backups.

             * 400 LongTermRetentionMigrationBackupStorageRedundancyNotAllowed - Changing backup storage redundancy is not allowed for LTR Copy operations.

             * 400 LtrRestoreFailedArchiveStorageTier - Restoring archived long-term retention backup is not supported. Restore can be performed only on rehydrated or regular long-term retention backups.

             * 400 LtrArchiveStorageTierNotEnabled - 

             * 400 LtrArchiveWrongParameters - ChangeLongTermRetentionBackupAccessTier is not supported for the desired (backupStorageAccessTier, operationMode) combination. Only (Archive, Move) and (Hot, Copy) are allowed.

             * 400 LTRArchiveRedundancyChangeFailed - Updating the backup storage redundancy type to zone-redundant storage is not supported when a long-term retention policy with the 'archive' backup storage access tier is set

             * 400 LongTermRetentionMigrationSubscriptionNotFound - The subscription could not be found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 LongTermRetentionMigrationBackupNotFound - LTR backup specified does not exists.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 LongTermRetentionMigrationRequestConflict - A conflict operation on this LTR backup is still in progress.

             * 409 LongTermRetentionMigrationBackupConflict - Another LTR backup with same backup time for target database exists.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 LongTermRetentionMigrationRequestFailedToStartOnTarget - Failed to start LTR backup copy request in target region.

             * 500 LongTermRetentionMigrationRequestCopyFailed - Copy operation failed for LTR backup blobs.

             * 500 LongTermRetentionMigrationRestoreVerExceeded - Restore verification failed after max attempts were reached.

             * 500 LongTermRetentionMigrationRestoreVerFailed - Restore verification failed.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/update?api-version=2023-05-01-preview:
    post:
      tags:
        - LongTermRetentionBackups
      description: Updates an existing long term retention backup.
      operationId: LongTermRetentionBackups_Update
      parameters:
        - name: locationName
          in: path
          description: The location of the database.
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          description: The name of the server
          required: true
          schema:
            type: string
        - name: longTermRetentionDatabaseName
          in: path
          description: The name of the database
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          description: The backup name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested backup resource state
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLongTermRetentionBackupParameters'
      responses:
        '200':
          description: Successfully updated the backup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackupOperationResult'
        '202':
          description: Updating the backup is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier for SQL DBs.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 LongTermRetentionMismatchingSubscriptionId - The provided subscription id did not match the id in the other input

             * 400 LongTermRetentionMismatchingResourceGroupName - The provided resource group name did not match the name in the other input

             * 400 LongTermRetentionMismatchingServerName - The provided server name did not match the name in the other input

             * 400 DeleteLtrSubscriptionMissing - The subscription ID is required to delete a long-term retention backup.

             * 400 DeleteLtrServerMissing - The server name is required to delete a long-term retention backup.

             * 400 DeleteLtrDatabaseMissing - The database name is required to delete a long-term retention backup.

             * 400 LtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 UpdateBackupStorageAccessTierLTRFailedOnZoneRedundantBackupStorage - Archiving long-term retention backups on zone redundant backup storage is not supported. Use locally redundant or geo-redundant storage types instead.

             * 400 UpdateBackupStorageAccessTierLtrSubscriptionMissing - The subscription ID is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrServerMissing - The server name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrDatabaseMissing - The database name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 LongTermRetentionMigrationRequestNotSupported - Subscription is not allowed LTR backup Migration feature.

             * 400 LongTermRetentionMigrationCrossClusterRequestNotSupported - Source and target subscriptions are not allowed to communicate for LTR backup copy feature.

             * 400 LongTermRetentionMigrationParameterMissing - Required parameter missing for the operation.

             * 400 LongTermRetentionMigrationSameServerNotSupported - LTR Copy feature is not supported to copy LTR backups within same server.

             * 400 LongTermRetentionMigrationTargetServerNotFound - Target server does not exists or is not ready for LTR backup copy operation.

             * 400 LongTermRetentionMigrationTargetDatabaseNotFound - Target Database does not exists on the server.

             * 400 LongTermRetentionMigrationStorageTypeNotSupported - Specified Backup Storage Redundancy is not supported in target region.

             * 400 LongTermRetentionMigrationStorageMismatch - Active backup redundancy of database does not match backup redundancy requested by customer.

             * 400 LtrOperationFailedBackupImmutable - Deleting Long Term Retention backup failed because the backup is immutable.

             * 400 LongTermRetentionMigrationDatabaseTypeNotSupported - LTR migration is only supported for managed instance and Azure SQL DB LTR backups.

             * 400 LongTermRetentionMigrationBackupStorageRedundancyNotAllowed - Changing backup storage redundancy is not allowed for LTR Copy operations.

             * 400 LtrRestoreFailedArchiveStorageTier - Restoring archived long-term retention backup is not supported. Restore can be performed only on rehydrated or regular long-term retention backups.

             * 400 LtrArchiveStorageTierNotEnabled - 

             * 400 LtrArchiveWrongParameters - ChangeLongTermRetentionBackupAccessTier is not supported for the desired (backupStorageAccessTier, operationMode) combination. Only (Archive, Move) and (Hot, Copy) are allowed.

             * 400 LTRArchiveRedundancyChangeFailed - Updating the backup storage redundancy type to zone-redundant storage is not supported when a long-term retention policy with the 'archive' backup storage access tier is set

             * 400 LongTermRetentionMigrationSubscriptionNotFound - The subscription could not be found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 LongTermRetentionMigrationBackupNotFound - LTR backup specified does not exists.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 LongTermRetentionMigrationRequestConflict - A conflict operation on this LTR backup is still in progress.

             * 409 LongTermRetentionMigrationBackupConflict - Another LTR backup with same backup time for target database exists.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 LongTermRetentionMigrationRequestFailedToStartOnTarget - Failed to start LTR backup copy request in target region.

             * 500 LongTermRetentionMigrationRequestCopyFailed - Copy operation failed for LTR backup blobs.

             * 500 LongTermRetentionMigrationRestoreVerExceeded - Restore verification failed after max attempts were reached.

             * 500 LongTermRetentionMigrationRestoreVerFailed - Restore verification failed.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionBackups?api-version=2023-05-01-preview:
    get:
      tags:
        - LongTermRetentionBackups
      description: Lists the long term retention backups for a given location based on resource group.
      operationId: LongTermRetentionBackups_ListByResourceGroupLocation
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The location of the database
          required: true
          schema:
            type: string
        - name: onlyLatestPerDatabase
          in: query
          description: Whether or not to only get the latest backup for each database.
          required: false
          schema:
            type: boolean
        - name: databaseState
          in: query
          description: Whether to query against just live databases, just deleted databases, or all databases.
          required: false
          schema:
            enum:
              - All
              - Live
              - Deleted
            x-ms-enum:
              name: databaseState
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of backups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionBackups?api-version=2023-05-01-preview:
    get:
      tags:
        - LongTermRetentionBackups
      description: Lists the long term retention backups for a given server based on resource groups.
      operationId: LongTermRetentionBackups_ListByResourceGroupServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The location of the database
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          description: The name of the server
          required: true
          schema:
            type: string
        - name: onlyLatestPerDatabase
          in: query
          description: Whether or not to only get the latest backup for each database.
          required: false
          schema:
            type: boolean
        - name: databaseState
          in: query
          description: Whether to query against just live databases, just deleted databases, or all databases.
          required: false
          schema:
            enum:
              - All
              - Live
              - Deleted
            x-ms-enum:
              name: databaseState
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of backups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups?api-version=2023-05-01-preview:
    get:
      tags:
        - LongTermRetentionBackups
      description: Lists all long term retention backups for a database based on a particular resource group.
      operationId: LongTermRetentionBackups_ListByResourceGroupDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The location of the database
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          description: The name of the server
          required: true
          schema:
            type: string
        - name: longTermRetentionDatabaseName
          in: path
          description: The name of the database
          required: true
          schema:
            type: string
        - name: onlyLatestPerDatabase
          in: query
          description: Whether or not to only get the latest backup for each database.
          required: false
          schema:
            type: boolean
        - name: databaseState
          in: query
          description: Whether to query against just live databases, just deleted databases, or all databases.
          required: false
          schema:
            enum:
              - All
              - Live
              - Deleted
            x-ms-enum:
              name: databaseState
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of backups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}?api-version=2023-05-01-preview:
    get:
      tags:
        - LongTermRetentionBackups
      description: Gets a long term retention backup.
      operationId: LongTermRetentionBackups_GetByResourceGroup
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The location of the database.
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          description: The name of the server
          required: true
          schema:
            type: string
        - name: longTermRetentionDatabaseName
          in: path
          description: The name of the database
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          description: The backup name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the backup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackup'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier for SQL DBs.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 LongTermRetentionMismatchingSubscriptionId - The provided subscription id did not match the id in the other input

             * 400 LongTermRetentionMismatchingResourceGroupName - The provided resource group name did not match the name in the other input

             * 400 LongTermRetentionMismatchingServerName - The provided server name did not match the name in the other input

             * 400 DeleteLtrSubscriptionMissing - The subscription ID is required to delete a long-term retention backup.

             * 400 DeleteLtrServerMissing - The server name is required to delete a long-term retention backup.

             * 400 DeleteLtrDatabaseMissing - The database name is required to delete a long-term retention backup.

             * 400 LtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 UpdateBackupStorageAccessTierLTRFailedOnZoneRedundantBackupStorage - Archiving long-term retention backups on zone redundant backup storage is not supported. Use locally redundant or geo-redundant storage types instead.

             * 400 UpdateBackupStorageAccessTierLtrSubscriptionMissing - The subscription ID is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrServerMissing - The server name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrDatabaseMissing - The database name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - LongTermRetentionBackups
      description: Deletes a long term retention backup.
      operationId: LongTermRetentionBackups_DeleteByResourceGroup
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The location of the database
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          description: The name of the server
          required: true
          schema:
            type: string
        - name: longTermRetentionDatabaseName
          in: path
          description: The name of the database
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          description: The backup name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the backup.
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier for SQL DBs.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 LongTermRetentionMismatchingSubscriptionId - The provided subscription id did not match the id in the other input

             * 400 LongTermRetentionMismatchingResourceGroupName - The provided resource group name did not match the name in the other input

             * 400 LongTermRetentionMismatchingServerName - The provided server name did not match the name in the other input

             * 400 DeleteLtrSubscriptionMissing - The subscription ID is required to delete a long-term retention backup.

             * 400 DeleteLtrServerMissing - The server name is required to delete a long-term retention backup.

             * 400 DeleteLtrDatabaseMissing - The database name is required to delete a long-term retention backup.

             * 400 LtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 UpdateBackupStorageAccessTierLTRFailedOnZoneRedundantBackupStorage - Archiving long-term retention backups on zone redundant backup storage is not supported. Use locally redundant or geo-redundant storage types instead.

             * 400 UpdateBackupStorageAccessTierLtrSubscriptionMissing - The subscription ID is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrServerMissing - The server name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrDatabaseMissing - The database name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/changeAccessTier?api-version=2023-05-01-preview:
    post:
      tags:
        - LongTermRetentionBackups
      description: Change a long term retention backup access tier.
      operationId: LongTermRetentionBackups_ChangeAccessTierByResourceGroup
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          required: true
          schema:
            type: string
        - name: longTermRetentionDatabaseName
          in: path
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeLongTermRetentionBackupAccessTierParameters'
      responses:
        '200':
          description: Successfully changed the long term retention backup access tier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackup'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier for SQL DBs.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 LongTermRetentionMismatchingSubscriptionId - The provided subscription id did not match the id in the other input

             * 400 LongTermRetentionMismatchingResourceGroupName - The provided resource group name did not match the name in the other input

             * 400 LongTermRetentionMismatchingServerName - The provided server name did not match the name in the other input

             * 400 DeleteLtrSubscriptionMissing - The subscription ID is required to delete a long-term retention backup.

             * 400 DeleteLtrServerMissing - The server name is required to delete a long-term retention backup.

             * 400 DeleteLtrDatabaseMissing - The database name is required to delete a long-term retention backup.

             * 400 LtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 UpdateBackupStorageAccessTierLTRFailedOnZoneRedundantBackupStorage - Archiving long-term retention backups on zone redundant backup storage is not supported. Use locally redundant or geo-redundant storage types instead.

             * 400 UpdateBackupStorageAccessTierLtrSubscriptionMissing - The subscription ID is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrServerMissing - The server name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrDatabaseMissing - The database name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 LongTermRetentionMigrationRequestNotSupported - Subscription is not allowed LTR backup Migration feature.

             * 400 LongTermRetentionMigrationCrossClusterRequestNotSupported - Source and target subscriptions are not allowed to communicate for LTR backup copy feature.

             * 400 LongTermRetentionMigrationParameterMissing - Required parameter missing for the operation.

             * 400 LongTermRetentionMigrationSameServerNotSupported - LTR Copy feature is not supported to copy LTR backups within same server.

             * 400 LongTermRetentionMigrationTargetServerNotFound - Target server does not exists or is not ready for LTR backup copy operation.

             * 400 LongTermRetentionMigrationTargetDatabaseNotFound - Target Database does not exists on the server.

             * 400 LongTermRetentionMigrationStorageTypeNotSupported - Specified Backup Storage Redundancy is not supported in target region.

             * 400 LongTermRetentionMigrationStorageMismatch - Active backup redundancy of database does not match backup redundancy requested by customer.

             * 400 LtrOperationFailedBackupImmutable - Deleting Long Term Retention backup failed because the backup is immutable.

             * 400 LongTermRetentionMigrationDatabaseTypeNotSupported - LTR migration is only supported for managed instance and Azure SQL DB LTR backups.

             * 400 LongTermRetentionMigrationBackupStorageRedundancyNotAllowed - Changing backup storage redundancy is not allowed for LTR Copy operations.

             * 400 LtrRestoreFailedArchiveStorageTier - Restoring archived long-term retention backup is not supported. Restore can be performed only on rehydrated or regular long-term retention backups.

             * 400 LtrArchiveStorageTierNotEnabled - 

             * 400 LtrArchiveWrongParameters - ChangeLongTermRetentionBackupAccessTier is not supported for the desired (backupStorageAccessTier, operationMode) combination. Only (Archive, Move) and (Hot, Copy) are allowed.

             * 400 LTRArchiveRedundancyChangeFailed - Updating the backup storage redundancy type to zone-redundant storage is not supported when a long-term retention policy with the 'archive' backup storage access tier is set

             * 400 LongTermRetentionMigrationSubscriptionNotFound - The subscription could not be found.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 LongTermRetentionMigrationBackupNotFound - LTR backup specified does not exists.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 LongTermRetentionMigrationRequestConflict - A conflict operation on this LTR backup is still in progress.

             * 409 LongTermRetentionMigrationBackupConflict - Another LTR backup with same backup time for target database exists.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 LongTermRetentionMigrationRequestFailedToStartOnTarget - Failed to start LTR backup copy request in target region.

             * 500 LongTermRetentionMigrationRequestCopyFailed - Copy operation failed for LTR backup blobs.

             * 500 LongTermRetentionMigrationRestoreVerExceeded - Restore verification failed after max attempts were reached.

             * 500 LongTermRetentionMigrationRestoreVerFailed - Restore verification failed.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/copy?api-version=2023-05-01-preview:
    post:
      tags:
        - LongTermRetentionBackups
      description: Copy an existing long term retention backup to a different server.
      operationId: LongTermRetentionBackups_CopyByResourceGroup
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The location of the database.
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          description: The name of the server
          required: true
          schema:
            type: string
        - name: longTermRetentionDatabaseName
          in: path
          description: The name of the database
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          description: The backup name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The parameters needed for long term retention copy request
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CopyLongTermRetentionBackupParameters'
      responses:
        '200':
          description: Successfully Copied the backup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackupOperationResult'
        '202':
          description: Copying the backup is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier for SQL DBs.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 LongTermRetentionMismatchingSubscriptionId - The provided subscription id did not match the id in the other input

             * 400 LongTermRetentionMismatchingResourceGroupName - The provided resource group name did not match the name in the other input

             * 400 LongTermRetentionMismatchingServerName - The provided server name did not match the name in the other input

             * 400 DeleteLtrSubscriptionMissing - The subscription ID is required to delete a long-term retention backup.

             * 400 DeleteLtrServerMissing - The server name is required to delete a long-term retention backup.

             * 400 DeleteLtrDatabaseMissing - The database name is required to delete a long-term retention backup.

             * 400 LtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 UpdateBackupStorageAccessTierLTRFailedOnZoneRedundantBackupStorage - Archiving long-term retention backups on zone redundant backup storage is not supported. Use locally redundant or geo-redundant storage types instead.

             * 400 UpdateBackupStorageAccessTierLtrSubscriptionMissing - The subscription ID is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrServerMissing - The server name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrDatabaseMissing - The database name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 LongTermRetentionMigrationRequestNotSupported - Subscription is not allowed LTR backup Migration feature.

             * 400 LongTermRetentionMigrationCrossClusterRequestNotSupported - Source and target subscriptions are not allowed to communicate for LTR backup copy feature.

             * 400 LongTermRetentionMigrationParameterMissing - Required parameter missing for the operation.

             * 400 LongTermRetentionMigrationSameServerNotSupported - LTR Copy feature is not supported to copy LTR backups within same server.

             * 400 LongTermRetentionMigrationTargetServerNotFound - Target server does not exists or is not ready for LTR backup copy operation.

             * 400 LongTermRetentionMigrationTargetDatabaseNotFound - Target Database does not exists on the server.

             * 400 LongTermRetentionMigrationStorageTypeNotSupported - Specified Backup Storage Redundancy is not supported in target region.

             * 400 LongTermRetentionMigrationStorageMismatch - Active backup redundancy of database does not match backup redundancy requested by customer.

             * 400 LtrOperationFailedBackupImmutable - Deleting Long Term Retention backup failed because the backup is immutable.

             * 400 LongTermRetentionMigrationDatabaseTypeNotSupported - LTR migration is only supported for managed instance and Azure SQL DB LTR backups.

             * 400 LongTermRetentionMigrationBackupStorageRedundancyNotAllowed - Changing backup storage redundancy is not allowed for LTR Copy operations.

             * 400 LtrRestoreFailedArchiveStorageTier - Restoring archived long-term retention backup is not supported. Restore can be performed only on rehydrated or regular long-term retention backups.

             * 400 LtrArchiveStorageTierNotEnabled - 

             * 400 LtrArchiveWrongParameters - ChangeLongTermRetentionBackupAccessTier is not supported for the desired (backupStorageAccessTier, operationMode) combination. Only (Archive, Move) and (Hot, Copy) are allowed.

             * 400 LTRArchiveRedundancyChangeFailed - Updating the backup storage redundancy type to zone-redundant storage is not supported when a long-term retention policy with the 'archive' backup storage access tier is set

             * 400 LongTermRetentionMigrationSubscriptionNotFound - The subscription could not be found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 LongTermRetentionMigrationBackupNotFound - LTR backup specified does not exists.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 LongTermRetentionMigrationRequestConflict - A conflict operation on this LTR backup is still in progress.

             * 409 LongTermRetentionMigrationBackupConflict - Another LTR backup with same backup time for target database exists.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 LongTermRetentionMigrationRequestFailedToStartOnTarget - Failed to start LTR backup copy request in target region.

             * 500 LongTermRetentionMigrationRequestCopyFailed - Copy operation failed for LTR backup blobs.

             * 500 LongTermRetentionMigrationRestoreVerExceeded - Restore verification failed after max attempts were reached.

             * 500 LongTermRetentionMigrationRestoreVerFailed - Restore verification failed.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionServers/{longTermRetentionServerName}/longTermRetentionDatabases/{longTermRetentionDatabaseName}/longTermRetentionBackups/{backupName}/update?api-version=2023-05-01-preview:
    post:
      tags:
        - LongTermRetentionBackups
      description: Updates an existing long term retention backup.
      operationId: LongTermRetentionBackups_UpdateByResourceGroup
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The location of the database.
          required: true
          schema:
            type: string
        - name: longTermRetentionServerName
          in: path
          description: The name of the server
          required: true
          schema:
            type: string
        - name: longTermRetentionDatabaseName
          in: path
          description: The name of the database
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          description: The backup name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested backup resource state
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLongTermRetentionBackupParameters'
      responses:
        '200':
          description: Successfully updated the backup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongTermRetentionBackupOperationResult'
        '202':
          description: Updating the backup is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidLongTermRetentionBackupId - Invalid long term retention backup identifier for SQL DBs.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 LongTermRetentionMismatchingSubscriptionId - The provided subscription id did not match the id in the other input

             * 400 LongTermRetentionMismatchingResourceGroupName - The provided resource group name did not match the name in the other input

             * 400 LongTermRetentionMismatchingServerName - The provided server name did not match the name in the other input

             * 400 DeleteLtrSubscriptionMissing - The subscription ID is required to delete a long-term retention backup.

             * 400 DeleteLtrServerMissing - The server name is required to delete a long-term retention backup.

             * 400 DeleteLtrDatabaseMissing - The database name is required to delete a long-term retention backup.

             * 400 LtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 UpdateBackupStorageAccessTierLTRFailedOnZoneRedundantBackupStorage - Archiving long-term retention backups on zone redundant backup storage is not supported. Use locally redundant or geo-redundant storage types instead.

             * 400 UpdateBackupStorageAccessTierLtrSubscriptionMissing - The subscription ID is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrServerMissing - The server name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrDatabaseMissing - The database name is required to update the long-term retention backup.

             * 400 UpdateBackupStorageAccessTierLtrBackupResourceIdIncorrect - The provided long-term retention backup resource ID or backup name is incorrect.

             * 400 LongTermRetentionMigrationRequestNotSupported - Subscription is not allowed LTR backup Migration feature.

             * 400 LongTermRetentionMigrationCrossClusterRequestNotSupported - Source and target subscriptions are not allowed to communicate for LTR backup copy feature.

             * 400 LongTermRetentionMigrationParameterMissing - Required parameter missing for the operation.

             * 400 LongTermRetentionMigrationSameServerNotSupported - LTR Copy feature is not supported to copy LTR backups within same server.

             * 400 LongTermRetentionMigrationTargetServerNotFound - Target server does not exists or is not ready for LTR backup copy operation.

             * 400 LongTermRetentionMigrationTargetDatabaseNotFound - Target Database does not exists on the server.

             * 400 LongTermRetentionMigrationStorageTypeNotSupported - Specified Backup Storage Redundancy is not supported in target region.

             * 400 LongTermRetentionMigrationStorageMismatch - Active backup redundancy of database does not match backup redundancy requested by customer.

             * 400 LtrOperationFailedBackupImmutable - Deleting Long Term Retention backup failed because the backup is immutable.

             * 400 LongTermRetentionMigrationDatabaseTypeNotSupported - LTR migration is only supported for managed instance and Azure SQL DB LTR backups.

             * 400 LongTermRetentionMigrationBackupStorageRedundancyNotAllowed - Changing backup storage redundancy is not allowed for LTR Copy operations.

             * 400 LtrRestoreFailedArchiveStorageTier - Restoring archived long-term retention backup is not supported. Restore can be performed only on rehydrated or regular long-term retention backups.

             * 400 LtrArchiveStorageTierNotEnabled - 

             * 400 LtrArchiveWrongParameters - ChangeLongTermRetentionBackupAccessTier is not supported for the desired (backupStorageAccessTier, operationMode) combination. Only (Archive, Move) and (Hot, Copy) are allowed.

             * 400 LTRArchiveRedundancyChangeFailed - Updating the backup storage redundancy type to zone-redundant storage is not supported when a long-term retention policy with the 'archive' backup storage access tier is set

             * 400 LongTermRetentionMigrationSubscriptionNotFound - The subscription could not be found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 LongTermRetentionMigrationBackupNotFound - LTR backup specified does not exists.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 LongTermRetentionMigrationRequestConflict - A conflict operation on this LTR backup is still in progress.

             * 409 LongTermRetentionMigrationBackupConflict - Another LTR backup with same backup time for target database exists.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 LongTermRetentionMigrationRequestFailedToStartOnTarget - Failed to start LTR backup copy request in target region.

             * 500 LongTermRetentionMigrationRequestCopyFailed - Copy operation failed for LTR backup blobs.

             * 500 LongTermRetentionMigrationRestoreVerExceeded - Restore verification failed after max attempts were reached.

             * 500 LongTermRetentionMigrationRestoreVerFailed - Restore verification failed.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules?api-version=2022-11-01-preview:
    get:
      tags:
        - SqlVulnerabilityAssessmentRuleBaseline
      description: Gets a system database's sql vulnerability assessment rule baseline.
      operationId: SqlVulnerabilityAssessmentRuleBaseline_ListByBaseline
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: baselineName
          in: path
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: BaselineName
              modelAsString: true
            type: string
        - name: systemDatabaseName
          in: query
          description: The vulnerability assessment system database name.
          required: true
          schema:
            enum:
              - master
            x-ms-enum:
              name: VulnerabilityAssessmentSystemDatabaseName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully got the sql vulnerability assessment rule baseline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaselineListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules/{ruleId}?api-version=2022-11-01-preview:
    get:
      tags:
        - SqlVulnerabilityAssessmentRuleBaseline
      description: Gets a system database's sql vulnerability assessment rule baseline.
      operationId: SqlVulnerabilityAssessmentRuleBaseline_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: baselineName
          in: path
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: BaselineName
              modelAsString: true
            type: string
        - name: ruleId
          in: path
          description: The vulnerability assessment rule ID.
          required: true
          schema:
            type: string
        - name: systemDatabaseName
          in: query
          description: The vulnerability assessment system database name.
          required: true
          schema:
            enum:
              - master
            x-ms-enum:
              name: VulnerabilityAssessmentSystemDatabaseName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully got the sql vulnerability assessment rule baseline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaseline'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    put:
      tags:
        - SqlVulnerabilityAssessmentRuleBaseline
      description: Creates or updates a database's vulnerability assessment rule baseline.
      operationId: SqlVulnerabilityAssessmentRuleBaseline_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: baselineName
          in: path
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: BaselineName
              modelAsString: true
            type: string
        - name: ruleId
          in: path
          description: The vulnerability assessment rule ID.
          required: true
          schema:
            type: string
        - name: systemDatabaseName
          in: query
          description: The vulnerability assessment system database name.
          required: true
          schema:
            enum:
              - master
            x-ms-enum:
              name: VulnerabilityAssessmentSystemDatabaseName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested rule baseline resource.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaselineInput'
      responses:
        '200':
          description: Successfully set the vulnerability assessment rule baseline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaseline'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    delete:
      tags:
        - SqlVulnerabilityAssessmentRuleBaseline
      description: Removes the database's vulnerability assessment rule baseline.
      operationId: SqlVulnerabilityAssessmentRuleBaselines_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: baselineName
          in: path
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: BaselineName
              modelAsString: true
            type: string
        - name: ruleId
          in: path
          description: The vulnerability assessment rule ID.
          required: true
          schema:
            type: string
        - name: systemDatabaseName
          in: query
          description: The vulnerability assessment system database name.
          required: true
          schema:
            enum:
              - master
            x-ms-enum:
              name: VulnerabilityAssessmentSystemDatabaseName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully removed the database vulnerability assessment rule baseline.
        '204':
          description: The specified rule baseline does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/usages?api-version=2014-04-01:
    get:
      tags:
        - Servers
      operationId: ServerUsages_ListByServer
      description: Returns server usages.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerUsageListResult'
      x-ms-pageable:
        nextLinkName: null
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/workloadGroups/{workloadGroupName}/workloadClassifiers/{workloadClassifierName}?api-version=2020-11-01-preview:
    get:
      tags:
        - WorkloadClassifiers
      description: Gets a workload classifier
      operationId: WorkloadClassifiers_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: workloadGroupName
          in: path
          description: The name of the workload group from which to receive the classifier from.
          required: true
          schema:
            type: string
        - name: workloadClassifierName
          in: path
          description: The name of the workload classifier.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specifies workload classifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadClassifier'
        default:
          description: |-
            *** Error Responses: ***

             * 400 OperationNotAllowedOnPausedDatabase - Operation is not allowed on a paused database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
    put:
      tags:
        - WorkloadClassifiers
      description: Creates or updates a workload classifier.
      operationId: WorkloadClassifiers_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: workloadGroupName
          in: path
          description: The name of the workload group from which to receive the classifier from.
          required: true
          schema:
            type: string
        - name: workloadClassifierName
          in: path
          description: The name of the workload classifier to create/update.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The properties of the workload classifier.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadClassifier'
      responses:
        '200':
          description: Successfully updated the workload classifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadClassifier'
        '201':
          description: Successfully created the workload classifier.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadClassifier'
        '202':
          description: Create or update for the workload classifier is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 OperationNotAllowedOnPausedDatabase - Operation is not allowed on a paused database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidMemberNameParameter - Invalid member name parameter for this workload classifier.

             * 400 InvalidStartTimeAndEndTimeParameters - Invalid start time and end time parameters for the workload classifier.

             * 400 InvalidImportanceParameter - Importance must be one of the following strings: Low, Below_Normal, Normal, Above_Normal, High.

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    delete:
      tags:
        - WorkloadClassifiers
      description: Deletes a workload classifier.
      operationId: WorkloadClassifiers_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: workloadGroupName
          in: path
          description: The name of the workload group from which to receive the classifier from.
          required: true
          schema:
            type: string
        - name: workloadClassifierName
          in: path
          description: The name of the workload classifier to delete.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the workload classifier.
        '202':
          description: Deleting the workload classifier is in progress.
        '204':
          description: The specified workload classifier does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 OperationNotAllowedOnPausedDatabase - Operation is not allowed on a paused database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/workloadGroups/{workloadGroupName}/workloadClassifiers?api-version=2020-11-01-preview:
    get:
      tags:
        - WorkloadClassifiers
      description: Gets the list of workload classifiers for a workload group
      operationId: WorkloadClassifiers_ListByWorkloadGroup
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: workloadGroupName
          in: path
          description: The name of the workload group from which to receive the classifiers from.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of workload groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadClassifierListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 OperationNotAllowedOnPausedDatabase - Operation is not allowed on a paused database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/initiateScan?api-version=2022-11-01-preview:
    post:
      tags:
        - SqlVulnerabilityAssessmentExecuteScan
      description: Executes a Vulnerability Assessment database scan.
      operationId: SqlVulnerabilityAssessmentExecuteScan_Execute
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: systemDatabaseName
          in: query
          description: The vulnerability assessment system database name.
          required: true
          schema:
            enum:
              - master
            x-ms-enum:
              name: VulnerabilityAssessmentSystemDatabaseName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully executed a Vulnerability Assessment database scan.
        '202':
          description: Successfully started a Vulnerability Assessment database scan.
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 VulnerabilityAssessmentStoragelessIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseSchemas
      description: List managed database schemas
      operationId: ManagedDatabaseSchemas_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved managed database schemas.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSchemaListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InvalidDatabaseSchema - Schema is missing in database.

             * 404 InvalidDatabaseTable - Table is missing in database.

             * 404 InvalidDatabaseColumn - Column is missing in table.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
      x-ms-odata: '#/components/schemas/DatabaseSchema'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/schemas/{schemaName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseSchemas
      description: Get managed database schema
      operationId: ManagedDatabaseSchemas_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved managed database schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSchema'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InvalidDatabaseSchema - Schema is missing in database.

             * 404 InvalidDatabaseTable - Table is missing in database.

             * 404 InvalidDatabaseColumn - Column is missing in table.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks/{communicationLinkName}?api-version=2014-04-01:
    delete:
      tags:
        - ServerCommunicationLinks
      operationId: ServerCommunicationLinks_Delete
      description: Deletes a server communication link.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: communicationLinkName
          in: path
          description: The name of the server communication link.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
    get:
      tags:
        - ServerCommunicationLinks
      operationId: ServerCommunicationLinks_Get
      description: Returns a server communication link.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: communicationLinkName
          in: path
          description: The name of the server communication link.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerCommunicationLink'
    put:
      tags:
        - ServerCommunicationLinks
      operationId: ServerCommunicationLinks_CreateOrUpdate
      description: Creates a server communication link.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: communicationLinkName
          in: path
          description: The name of the server communication link.
          required: true
          schema:
            type: string
      requestBody:
        description: The required parameters for creating a server communication link.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerCommunicationLink'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerCommunicationLink'
        '202':
          description: Accepted
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/communicationLinks?api-version=2014-04-01:
    get:
      tags:
        - ServerCommunicationLinks
      operationId: ServerCommunicationLinks_ListByServer
      description: Gets a list of server communication links.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerCommunicationLinkListResult'
      x-ms-pageable:
        nextLinkName: null
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseSecurityAlertPolicies
      description: Gets a database's security alert policy.
      operationId: DatabaseSecurityAlertPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the  server.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the  database for which the security alert policy is defined.
          required: true
          schema:
            type: string
        - name: securityAlertPolicyName
          in: path
          description: The name of the security alert policy.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: SecurityAlertPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the  database security alert policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSecurityAlertPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 SecurityAlertPoliciesInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

             * 400 SecurityAlertPoliciesStorageAccountIsDisabled - The storage account provided in the threat detection policy is disabled.

             * 400 SecurityAlertPoliciesInsufficientDiskSpace - Insufficient disk space to save security alert policy metadata in the database

             * 400 SecurityAlertPoliciesInvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 SecurityAlertPoliciesInvalidStorageAccountCredentials - The provided storage account access key is not valid.

             * 400 InvalidDatabaseSecurityAlertPolicyCreateRequest - The create database Threat Detection security alert policy request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 400 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 409 DatabaseSecurityAlertPolicyInProgress - Set database security alert policy is already in progress

             * 409 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 GetDatabaseSecurityAlertPolicyFailed - Failed to get Threat Detection settings
    put:
      tags:
        - DatabaseSecurityAlertPolicies
      description: Creates or updates a database's security alert policy.
      operationId: DatabaseSecurityAlertPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the  server.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the  database for which the security alert policy is defined.
          required: true
          schema:
            type: string
        - name: securityAlertPolicyName
          in: path
          description: The name of the security alert policy.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: SecurityAlertPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The database security alert policy.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseSecurityAlertPolicy'
      responses:
        '200':
          description: Successfully set the  database security alert policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSecurityAlertPolicy'
        '201':
          description: Successfully created the  database security alert policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSecurityAlertPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 SecurityAlertPoliciesInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

             * 400 SecurityAlertPoliciesStorageAccountIsDisabled - The storage account provided in the threat detection policy is disabled.

             * 400 SecurityAlertPoliciesInsufficientDiskSpace - Insufficient disk space to save security alert policy metadata in the database

             * 400 SecurityAlertPoliciesInvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 SecurityAlertPoliciesInvalidStorageAccountCredentials - The provided storage account access key is not valid.

             * 400 InvalidDatabaseSecurityAlertPolicyCreateRequest - The create database Threat Detection security alert policy request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 400 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 409 DatabaseSecurityAlertPolicyInProgress - Set database security alert policy is already in progress

             * 409 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 GetDatabaseSecurityAlertPolicyFailed - Failed to get Threat Detection settings
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/securityAlertPolicies?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseSecurityAlertPolicies
      description: Gets a list of database's security alert policies.
      operationId: DatabaseSecurityAlertPolicies_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the  server.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the  database for which the security alert policy is defined.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the  database security alert policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSecurityAlertListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 SecurityAlertPoliciesInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

             * 400 SecurityAlertPoliciesStorageAccountIsDisabled - The storage account provided in the threat detection policy is disabled.

             * 400 SecurityAlertPoliciesInsufficientDiskSpace - Insufficient disk space to save security alert policy metadata in the database

             * 400 SecurityAlertPoliciesInvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 SecurityAlertPoliciesInvalidStorageAccountCredentials - The provided storage account access key is not valid.

             * 400 InvalidDatabaseSecurityAlertPolicyCreateRequest - The create database Threat Detection security alert policy request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 400 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 409 DatabaseSecurityAlertPolicyInProgress - Set database security alert policy is already in progress

             * 409 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertDatabaseSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 GetDatabaseSecurityAlertPolicyFailed - Failed to get Threat Detection settings
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/deletedServers?api-version=2020-11-01-preview:
    get:
      tags:
        - DeletedServers
      description: Gets a list of all deleted servers in a subscription.
      operationId: DeletedServers_List
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of deleted servers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedServerListResult'
        default:
          description: '*** Error Responses: ***'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/deletedServers/{deletedServerName}?api-version=2020-11-01-preview:
    get:
      tags:
        - DeletedServers
      description: Gets a deleted server.
      operationId: DeletedServers_Get
      parameters:
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - name: deletedServerName
          in: path
          description: The name of the deleted server.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified deleted server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedServer'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidLocation - An invalid location was specified.

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 404 ResourceNotFound - The requested resource was not found.
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/deletedServers?api-version=2020-11-01-preview:
    get:
      tags:
        - DeletedServers
      description: Gets a list of deleted servers for a location.
      operationId: DeletedServers_ListByLocation
      parameters:
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of deleted servers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedServerListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidLocation - An invalid location was specified.

             * 400 SubscriptionNotFound - The requested subscription was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/deletedServers/{deletedServerName}/recover?api-version=2020-11-01-preview:
    post:
      tags:
        - DeletedServers
      description: Recovers a deleted server.
      operationId: DeletedServers_Recover
      parameters:
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - name: deletedServerName
          in: path
          description: The name of the deleted server.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully recover the deleted server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedServer'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidLocation - An invalid location was specified.

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}?api-version=2020-11-01-preview:
    get:
      tags:
        - SyncMembers
      description: Gets a sync member.
      operationId: SyncMembers_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group on which the sync member is hosted.
          required: true
          schema:
            type: string
        - name: syncMemberName
          in: path
          description: The name of the sync member.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified sync member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncMember'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 InvalidSyncMember - Sync member is invalid.

             * 400 InvalidSyncAgent - Sync agent is invalid.

             * 400 CannotCreateSyncMemberDueToQuotaExceeded - Cannot create sync member due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncMemberDrop - The sync member is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncMemberName - Cannot create sync member because the sync member with the same name already exists.
    put:
      tags:
        - SyncMembers
      description: Creates or updates a sync member.
      operationId: SyncMembers_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group on which the sync member is hosted.
          required: true
          schema:
            type: string
        - name: syncMemberName
          in: path
          description: The name of the sync member.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested sync member resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncMember'
      responses:
        '200':
          description: Successfully updated the sync member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncMember'
        '201':
          description: Successfully created the sync member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncMember'
        '202':
          description: Creating or updating the sync member is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 InvalidSyncMember - Sync member is invalid.

             * 400 InvalidSyncAgent - Sync agent is invalid.

             * 400 CannotCreateSyncMemberDueToQuotaExceeded - Cannot create sync member due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncMemberDrop - The sync member is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncMemberName - Cannot create sync member because the sync member with the same name already exists.
      x-ms-long-running-operation: true
    delete:
      tags:
        - SyncMembers
      description: Deletes a sync member.
      operationId: SyncMembers_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group on which the sync member is hosted.
          required: true
          schema:
            type: string
        - name: syncMemberName
          in: path
          description: The name of the sync member.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the sync member.
        '202':
          description: Deleting the sync member is in progress.
        '204':
          description: The specified sync member does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 InvalidSyncMember - Sync member is invalid.

             * 400 InvalidSyncAgent - Sync agent is invalid.

             * 400 CannotCreateSyncMemberDueToQuotaExceeded - Cannot create sync member due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncMemberDrop - The sync member is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncMemberName - Cannot create sync member because the sync member with the same name already exists.
      x-ms-long-running-operation: true
    patch:
      tags:
        - SyncMembers
      description: Updates an existing sync member.
      operationId: SyncMembers_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group on which the sync member is hosted.
          required: true
          schema:
            type: string
        - name: syncMemberName
          in: path
          description: The name of the sync member.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested sync member resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncMember'
      responses:
        '200':
          description: Successfully updated the sync member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncMember'
        '202':
          description: Updating the sync member is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 InvalidSyncMember - Sync member is invalid.

             * 400 InvalidSyncAgent - Sync agent is invalid.

             * 400 CannotCreateSyncMemberDueToQuotaExceeded - Cannot create sync member due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncMemberDrop - The sync member is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncMemberName - Cannot create sync member because the sync member with the same name already exists.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers?api-version=2020-11-01-preview:
    get:
      tags:
        - SyncMembers
      description: Lists sync members in the given sync group.
      operationId: SyncMembers_ListBySyncGroup
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of sync members.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncMemberListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 InvalidSyncMember - Sync member is invalid.

             * 400 InvalidSyncAgent - Sync agent is invalid.

             * 400 CannotCreateSyncMemberDueToQuotaExceeded - Cannot create sync member due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncMemberDrop - The sync member is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncMemberName - Cannot create sync member because the sync member with the same name already exists.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}/schemas?api-version=2020-11-01-preview:
    get:
      tags:
        - SyncMembers
      description: Gets a sync member database schema.
      operationId: SyncMembersMemberSchemas_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group on which the sync member is hosted.
          required: true
          schema:
            type: string
        - name: syncMemberName
          in: path
          description: The name of the sync member.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully get a sync member schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncFullSchemaPropertiesListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 InvalidSyncMember - Sync member is invalid.

             * 400 InvalidSyncAgent - Sync agent is invalid.

             * 400 CannotCreateSyncMemberDueToQuotaExceeded - Cannot create sync member due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncMemberDrop - The sync member is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncMemberName - Cannot create sync member because the sync member with the same name already exists.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: SyncMembers_ListMemberSchemas
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/syncMembers/{syncMemberName}/refreshSchema?api-version=2020-11-01-preview:
    post:
      tags:
        - SyncMembers
      description: Refreshes a sync member database schema.
      operationId: SyncMembers_RefreshMemberSchema
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group on which the sync member is hosted.
          required: true
          schema:
            type: string
        - name: syncMemberName
          in: path
          description: The name of the sync member.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully refreshed a sync member schema.
        '202':
          description: The sync member schema refresh operation is on going.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 InvalidSyncMember - Sync member is invalid.

             * 400 InvalidSyncAgent - Sync agent is invalid.

             * 400 CannotCreateSyncMemberDueToQuotaExceeded - Cannot create sync member due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncMemberDrop - The sync member is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 SyncOperation_DuplicateSyncMemberName - Cannot create sync member because the sync member with the same name already exists.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/operations?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerOperations
      description: Gets a list of operations performed on the server.
      operationId: ServerOperations_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: The request for getting server operations has been executed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerOperationListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 PECsNotExistingToDenyPublicNetworkAccess - Unable to set Deny Public Network Access to Yes since there is no private endpoint enabled to access the server. Please set up private endpoints and retry the operation (https://docs.microsoft.com/azure/sql-database/sql-database-private-endpoint-overview#how-to-set-up-private-link-for-azure-sql-database).

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 PasswordTooShort - The provided password is too short

             * 400 AadOnlyAuthenticationIsEnabled - Azure Active Directory Only Authentication is enabled. Please contact your system administrator.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 PasswordTooLong - The provided password is too long.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidLocation - An invalid location was specified.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 TokenTooLong - The provided token is too long.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 ServerNotFound - The requested server was not found.

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 UpsertLogicalServerRequestAlreadyInProgress - An ongoing logical server request is already in progress, please try your request again later.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.

             * 409 ServerAlreadyExists - Duplicate server name.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 DropLogicalServerAlreadyInProgress - Server is already being dropped.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/credentials?api-version=2020-11-01-preview:
    get:
      tags:
        - JobCredentials
      description: Gets a list of jobs credentials.
      operationId: JobCredentials_ListByAgent
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of job credentials.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCredentialListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/credentials/{credentialName}?api-version=2020-11-01-preview:
    get:
      tags:
        - JobCredentials
      description: Gets a jobs credential.
      operationId: JobCredentials_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: credentialName
          in: path
          description: The name of the credential.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the job credential.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCredential'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - JobCredentials
      description: Creates or updates a job credential.
      operationId: JobCredentials_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: credentialName
          in: path
          description: The name of the credential.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested job credential state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobCredential'
      responses:
        '200':
          description: Successfully updated the credential.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCredential'
        '201':
          description: Successfully created the credential.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobCredential'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 InvalidJobCredentialUsername - Invalid credential username.

             * 403 JobCredentialPermissionError - Azure Resource Manager does not have permission to use or manage the credential.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
    delete:
      tags:
        - JobCredentials
      description: Deletes a job credential.
      operationId: JobCredentials_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: credentialName
          in: path
          description: The name of the credential.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the credential.
        '204':
          description: A credential with the specified name does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 403 JobCredentialPermissionError - Azure Resource Manager does not have permission to use or manage the credential.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/privateEndpointConnections?api-version=2022-08-01-preview:
    get:
      tags:
        - PrivateEndpointConnections
      description: Gets all private endpoint connections on a server.
      operationId: PrivateEndpointConnections_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved private endpoint connections.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateEndpointConnectionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 PrivateEndpointConnectionDoesNotExist - Private Endpoint Connection does not exist

             * 400 PrivateEndpointConnectionStatusNotPending - Private Endpoint Connection Status is not Pending

             * 400 NullRemotePrivateLinkServiceConnectionState - Remote Private Link Service Connection State is Null

             * 400 NullPrivateEndpointConnectionProperties - Private Endpoint Connection Properties is Null

             * 400 NullRemotePrivateLinkServiceConnectionStateStatus - Remote Private Link Service Connection State Status is Null

             * 400 IncorrectPrivateLinkServiceConnectionStateStatus - Private Link Service Connection State Status must be "Approved" or "Rejected"

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/privateEndpointConnections/{privateEndpointConnectionName}?api-version=2022-08-01-preview:
    get:
      tags:
        - PrivateEndpointConnections
      description: Gets a private endpoint connection.
      operationId: PrivateEndpointConnections_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: privateEndpointConnectionName
          in: path
          description: The name of the private endpoint connection.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved a specified private endpoint connection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateEndpointConnection'
        default:
          description: |-
            *** Error Responses: ***

             * 400 PrivateEndpointConnectionDoesNotExist - Private Endpoint Connection does not exist

             * 400 PrivateEndpointConnectionStatusNotPending - Private Endpoint Connection Status is not Pending

             * 400 NullRemotePrivateLinkServiceConnectionState - Remote Private Link Service Connection State is Null

             * 400 NullPrivateEndpointConnectionProperties - Private Endpoint Connection Properties is Null

             * 400 NullRemotePrivateLinkServiceConnectionStateStatus - Remote Private Link Service Connection State Status is Null

             * 400 IncorrectPrivateLinkServiceConnectionStateStatus - Private Link Service Connection State Status must be "Approved" or "Rejected"

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - PrivateEndpointConnections
      description: Approve or reject a private endpoint connection with a given name.
      operationId: PrivateEndpointConnections_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: privateEndpointConnectionName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateEndpointConnection'
      responses:
        '200':
          description: Successfully approved or rejected private endpoint connection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateEndpointConnection'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 PrivateEndpointConnectionDoesNotExist - Private Endpoint Connection does not exist

             * 400 PrivateEndpointConnectionStatusNotPending - Private Endpoint Connection Status is not Pending

             * 400 NullRemotePrivateLinkServiceConnectionState - Remote Private Link Service Connection State is Null

             * 400 NullPrivateEndpointConnectionProperties - Private Endpoint Connection Properties is Null

             * 400 NullRemotePrivateLinkServiceConnectionStateStatus - Remote Private Link Service Connection State Status is Null

             * 400 IncorrectPrivateLinkServiceConnectionStateStatus - Private Link Service Connection State Status must be "Approved" or "Rejected"

             * 400 NetworkingSubscriptionNotRegisteredWithSqlRp - Subscription used for network-side Private Endpoint is not registered with SQL resource provider

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 PrivateEndpointConnectionDroppedByOtherWorkflow - {0}

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
    delete:
      tags:
        - PrivateEndpointConnections
      description: Deletes a private endpoint connection with a given name.
      operationId: PrivateEndpointConnections_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: privateEndpointConnectionName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted private endpoint connection.
        '202':
          description: Accepted
        '204':
          description: Private endpoint connection does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 NetworkingSubscriptionNotRegisteredWithSqlRp - Subscription used for network-side Private Endpoint is not registered with SQL resource provider

             * 400 PrivateEndpointConnectionDoesNotExist - Private Endpoint Connection does not exist

             * 400 PrivateEndpointConnectionStatusNotPending - Private Endpoint Connection Status is not Pending

             * 400 NullRemotePrivateLinkServiceConnectionState - Remote Private Link Service Connection State is Null

             * 400 NullPrivateEndpointConnectionProperties - Private Endpoint Connection Properties is Null

             * 400 NullRemotePrivateLinkServiceConnectionStateStatus - Remote Private Link Service Connection State Status is Null

             * 400 IncorrectPrivateLinkServiceConnectionStateStatus - Private Link Service Connection State Status must be "Approved" or "Rejected"

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 PrivateEndpointConnectionDroppedByOtherWorkflow - {0}

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/encryptionProtector/{encryptionProtectorName}/revalidate?api-version=2022-08-01-preview:
    post:
      tags:
        - DatabaseEncryptionProtectorRevalidate
      description: Revalidates an existing encryption protector for a particular database.
      operationId: DatabaseEncryptionProtectors_Revalidate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: encryptionProtectorName
          in: path
          description: The name of the encryption protector to be updated.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: EncryptionProtectorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully revalidated the encryption protector.
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 DatabaseLevelEncryptionProtectorDoesNotExist - Database-level encryption protector does not exist.

             * 400 RevertDatabaseLevelKeyOnlySupportedWithSMK - Database-level encryption protector can only be reverted to the server level encryption when the server is configured with Microsoft Managed Key.

             * 400 InvalidEncryptionProtectorName - The encryption protector key name is not supported.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 PerDatabaseCMKDWNotSupported - Database-level CMK in preview is not supported for Datawarehouse edition.

             * 400 BlockSystemAssignedIdentityForCrossTenantCMK - Cross tenant CMK can only be configured when the server is configured with a User Assigned Managed Identity. Refer to https://aka.ms/sqltdebyokumi to configure User Assigned Managed Identity.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 PerDatabaseCMKRestoreNotSupported - Database restore is not supported when Database-level CMK is configured in preview.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 PerDatabaseCMKHSNotSupported - Database-level CMK in preview is not supported for Hyperscale edition.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 CMKOperationNotAllowed - User tried to perform an operation on the server when the server did not have Azure Key Vault Access.

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerKeyNotFound - The requested server key was not found on the current subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 EncryptionProtectorChangeInProgress - Cannot update database encryption key protector while protector change is already in progress

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/usages?api-version=2021-02-01-preview:
    get:
      tags:
        - DatabaseUsages
      description: Gets database usages.
      operationId: DatabaseUsages_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database usages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseUsageListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 TierChangeUnsupportedDueToMemoryOptimizedObject - The database cannot update its sku because it has memory-optimized objects.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidDatabaseCreateMode - Invalid request to create a database.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 InvalidBackupStorageAccountType - User passed zrs/lrs during create/update of a database but it failed either because the customer is not whitelisted or because zrs is not available in the specified region.

             * 400 CannotUpdateToFreeDatabase - Updating a database to the free sku is not supported.

             * 400 DatabaseInvalidSkuPropertyCombination - The properties of the requested sku are inconsistent. Please check that a valid combination is specified. See https://docs.microsoft.com/en-us/rest/api/sql/capabilities/listbylocation#serviceobjectivecapability for more details.

             * 400 DatabaseNamedReplicaPerDatabaseLimitExceeded - User tried create a named replica that would exceed the allowed number per primary database

             * 400 DatabaseIsCurrentlyPinned - Microsoft has pinned your database SQL Server engine version. To ensure your database does not hit production issues, any future scale operations on your database will be blocked until it has been un-pinned. Please contact Microsoft support for assistance with scaling.

             * 400 RestoreTargetEditionSizeInsufficient - User attempted to restore a database to an edition that is a smaller size than the current allocated size of the source.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 ServerNotFound - The requested server was not found.

             * 400 TokenTooLong - The provided token is too long.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 OfferDisabledOnSubscription - Subscription offer type is restricted from provisioning the requested resource.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 DatabaseCreationBlockedForNonActivatedCMKServer - SQL Pool creations are blocked for CMK enabled workspaces until the workspace is activated. First, enable purge protection and grant the workspace Managed Identity the required permissions (Get, Wrap Key, Unwrap Key) on the Azure Key Vault of the workspace key.  Next, activate your workspace after you have granted access.

             * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 TargetElasticPoolDoesNotExist - The elastic pool does not exist on a server.

             * 400 ElasticPoolSkuCombinationInvalid - Elastic pool and sku can be specified together only if sku is specified as 'ElasticPool'.

             * 400 ElasticPoolTierCombinationInvalid - The database tier is different than the elastic pool service tier.

             * 400 ElasticPoolNameRequired - User tried to create or update database to elastic pool service objective without specifying the name of the elastic pool.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 TierChangeUnsupportedDueToCDCEnabledDatabase - The database cannot update its sku because it is enabled for CDC.

             * 400 ElasticPoolDatabaseCountOverLimit - Attempting to create or add database to elastic pool when the database count limit of the elastic pool has been reached.

             * 400 CannotChangeToOrFromDataWarehouseTier - User attempted to change the sku of a database from DataWarehouse tier to non DataWarehouse tiers or vice versa.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 InvalidMaxSizeTierCombination - The specified tier does not support the specified database max size.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 InvalidReadScaleEdition - User attempted to enable read scale on a database type that does not support it.

             * 400 InvalidReadScaleUnits - User attempted to provide a read scale value that is not supported.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 GeoSecondaryMaxSizeUpdateFailed - The geo-secondary database is of a SLO that does not support the requested maxsize value or the geo-secondary is in an unsupported region or an update operation is already in progress on the geo-secondary database.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 400 RequestedDatabaseSizeRequiresShrink - User attempted to ALTER DATABASE MODIFY MAXSIZE to modify the MAXSIZE for a database to a smaller size then the current size.

             * 400 CurrentDatabaseSizeExceedsDbMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultMismatchError - Unexpected Key Vault region found in the http response.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 UpdateNotAllowedInCurrentReplicationState - The operation is disallowed on the database in its current replication state.

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.

             * 400 UnsupportedCapacity - User tried to create or update database with capacity which is not supported.

             * 400 ReplicationSourceAndTargetMustHaveSameName - The replication source and target databases must have the same name.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 ReplicationSourceAndTargetMustBeInDifferentServers - The replication source and target databases must be in different logical servers.

             * 400 CannotUpdateIsLedgerDatabase - The ledger property of an existing database cannot be updated.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 CannotMoveOrDropSyncMetadataDatabase - Cannot drop database used as sync metadata database.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 RestoreToFreeEditionNotSupported - Restore and GeoRestore target cannot be free database.

             * 400 CannotMoveOrDropJobAccountDatabase - Cannot drop database associated with job account.

             * 400 RestoreNotSupportedForFreeEdition - Restore and GeoRestore are not supported for free database.

             * 400 JobAgentDatabaseEditionUnsupported - The specified database's service level objective is not supported for use as a job agent database.

             * 400 InvalidDroppedDatabase - Source database dropped does not exist on server within the supported recovery period.

             * 400 InvalidLiveDatabase - Source database does not exist on server within the supported recovery period. If restoring a dropped database, please specify its deletion date.

             * 400 InvalidVldbRecoverySlo - The Hyperscale edition recovery requires both source and target databases to use Hyperscale service level objective.

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 InvalidVldbRestoreSlo - The Hyperscale edition Point-In-Time restore requires both source and target databases to use Hyperscale service level objective.

             * 400 CannotSpecifyPoolOrSlo - Specifying an elastic pool and/or changing the service level objective or edition is not supported for edition.

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 400 ChangeUnsupportedOnEntity - User attempted an unsupported create/update/delete operation on a given entity.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 FreeDbAlreadyExists - Only one free database can exist for a subscription per region.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 ConflictRequestToUpdateBackupRedundancy - A conflict request to change backup storage redundancy is still in progress.

             * 409 SkuAssignmentInProgress - The current assignment request cannot be processed because a previous request has not completed.

             * 409 DatabaseElasticPoolMaintenanceConflict - User tried to create or update a database with a specified maintenance configuration that conflicted with that of the elastic pool of the database.

             * 409 ServerDtuQuotaExceeded - Could not perform the operation because server would exceed the allowed Database Throughput Unit quota.

             * 409 UnableToAlterDatabaseInReplication - User altered edition on a database in a replication relationship.

             * 409 CurrentMemoryUsageExceedsSkuQuota - User attempted an sku update operation that cannot be completed due to the higher resource consumption.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 UpdateSloFailedDatabaseTooBusy - Update SLO operation could not complete because database was too busy.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 TargetElasticPoolBeingUpdated - The update of elastic pool cannot be started because there is copy operation in progress for one of the databases in this elastic pool

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 InvalidOperationForDatabaseInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 DatabaseCopyLimitPerReplicaReached - User reached the limit of concurrent database copies.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerVulnerabilityAssessments
      description: Gets the server's vulnerability assessment.
      operationId: ServerVulnerabilityAssessments_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server for which the vulnerability assessment is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the server vulnerability assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerVulnerabilityAssessment'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentUnsupportedStorageAccount - The provided storage account is unsupported.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
    put:
      tags:
        - ServerVulnerabilityAssessments
      description: Creates or updates the server's vulnerability assessment. Learn more about setting SQL vulnerability assessment with managed identity - https://docs.microsoft.com/azure/azure-sql/database/sql-database-vulnerability-assessment-storage
      operationId: ServerVulnerabilityAssessments_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server for which the vulnerability assessment is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested resource.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerVulnerabilityAssessment'
      responses:
        '200':
          description: Successfully set the vulnerability assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerVulnerabilityAssessment'
        '201':
          description: Successfully created the vulnerability assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerVulnerabilityAssessment'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentUnsupportedStorageAccount - The provided storage account is unsupported.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
    delete:
      tags:
        - ServerVulnerabilityAssessments
      description: Removes the server's vulnerability assessment.
      operationId: ServerVulnerabilityAssessments_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server for which the vulnerability assessment is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully removed the server vulnerability assessment.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentUnsupportedStorageAccount - The provided storage account is unsupported.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/vulnerabilityAssessments?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerVulnerabilityAssessments
      description: Lists the vulnerability assessment policies associated with a server.
      operationId: ServerVulnerabilityAssessments_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the server vulnerability assessment policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerVulnerabilityAssessmentListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentUnsupportedStorageAccount - The provided storage account is unsupported.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/restorableDroppedDatabases?api-version=2021-05-01-preview:
    get:
      tags:
        - RestorableDroppedManagedDatabases
      description: Gets a list of restorable dropped managed databases.
      operationId: RestorableDroppedManagedDatabasesByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of restorable dropped databases.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestorableDroppedManagedDatabaseListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: RestorableDroppedManagedDatabases_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/restorableDroppedDatabases/{restorableDroppedDatabaseId}?api-version=2021-05-01-preview:
    get:
      tags:
        - RestorableDroppedManagedDatabases
      description: Gets a restorable dropped managed database.
      operationId: RestorableDroppedManagedDatabases_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: restorableDroppedDatabaseId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified restorable dropped database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestorableDroppedManagedDatabase'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/linkWorkspaces?api-version=2022-05-01-preview:
    get:
      tags:
        - SynapseLinkWorkspaces
      description: Gets all synapselink workspaces for a database.
      operationId: SynapseLinkWorkspaces_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved synapselink workspaces.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SynapseLinkWorkspaceListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SourceDatabaseNotFound - The source database does not exist.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/targets?api-version=2020-11-01-preview:
    get:
      tags:
        - JobTargetExecutions
      description: Lists target executions for all steps of a job execution.
      operationId: JobTargetExecutions_ListByJobExecution
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to get.
          required: true
          schema:
            type: string
        - name: jobExecutionId
          in: path
          description: The id of the job execution
          required: true
          schema:
            format: uuid
            type: string
        - name: createTimeMin
          in: query
          description: If specified, only job executions created at or after the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: createTimeMax
          in: query
          description: If specified, only job executions created before the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: endTimeMin
          in: query
          description: If specified, only job executions completed at or after the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: endTimeMax
          in: query
          description: If specified, only job executions completed before the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: isActive
          in: query
          description: If specified, only active or only completed job executions are included.
          required: false
          schema:
            type: boolean
        - name: $skip
          in: query
          description: The number of elements in the collection to skip.
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of elements to return from the collection.
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the target executions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecutionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps/{stepName}/targets?api-version=2020-11-01-preview:
    get:
      tags:
        - JobTargetExecutions
      description: Lists the target executions of a job step execution.
      operationId: JobTargetExecutions_ListByStep
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to get.
          required: true
          schema:
            type: string
        - name: jobExecutionId
          in: path
          description: The id of the job execution
          required: true
          schema:
            format: uuid
            type: string
        - name: stepName
          in: path
          description: The name of the step.
          required: true
          schema:
            type: string
        - name: createTimeMin
          in: query
          description: If specified, only job executions created at or after the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: createTimeMax
          in: query
          description: If specified, only job executions created before the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: endTimeMin
          in: query
          description: If specified, only job executions completed at or after the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: endTimeMax
          in: query
          description: If specified, only job executions completed before the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: isActive
          in: query
          description: If specified, only active or only completed job executions are included.
          required: false
          schema:
            type: boolean
        - name: $skip
          in: query
          description: The number of elements in the collection to skip.
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of elements to return from the collection.
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the target executions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecutionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps/{stepName}/targets/{targetId}?api-version=2020-11-01-preview:
    get:
      tags:
        - JobTargetExecutions
      description: Gets a target execution.
      operationId: JobTargetExecutions_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to get.
          required: true
          schema:
            type: string
        - name: jobExecutionId
          in: path
          description: The unique id of the job execution
          required: true
          schema:
            format: uuid
            type: string
        - name: stepName
          in: path
          description: The name of the step.
          required: true
          schema:
            type: string
        - name: targetId
          in: path
          description: The target id.
          required: true
          schema:
            format: uuid
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the target execution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecution'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/securityEvents?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseSecurityEvents
      description: Gets a list of security events.
      operationId: ManagedDatabaseSecurityEvents_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: databaseName
          in: path
          description: The name of the managed database for which the security events are retrieved.
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - name: $skip
          in: query
          description: The number of elements in the collection to skip.
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of elements to return from the collection.
          required: false
          schema:
            type: integer
        - name: $skiptoken
          in: query
          description: An opaque token that identifies a starting point in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of security events.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityEventCollection'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-odata: '#/components/schemas/SecurityEventsFilterParameters'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/currentSensitivityLabels?api-version=2020-11-01-preview:
    get:
      tags:
        - SensitivityLabels
      description: Gets the sensitivity labels of a given database
      operationId: SensitivityLabelsCurrentByDatabase_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: $skipToken
          in: query
          required: false
          schema:
            type: string
        - name: $count
          in: query
          required: false
          schema:
            type: boolean
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the sensitivity labels.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensitivityLabelListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelsInvalidODataQuery - The specified OData query is either not valid or not supported

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
      x-ms-odata: '#/components/schemas/SensitivityLabel'
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: SensitivityLabels_ListCurrentByDatabase
    patch:
      tags:
        - SensitivityLabels
      description: Update sensitivity labels of a given database using an operations batch.
      operationId: SensitivityLabels_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensitivityLabelUpdateList'
      responses:
        '200':
          description: Successfully updated sensitivity labels.
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelSourceNameNotSupported - The specified sensitivity label source is not valid

             * 400 InvalidSensitivityLabelsBatch - The specified sensitivity labels batch is not valid. Please provide batch operations

             * 400 SensitivityLabelsMissingSchema - Operation[{0}]: Missing schema information

             * 400 SensitivityLabelsMissingTable - Operation[{0}]: Missing table information

             * 400 SensitivityLabelsMissingColumn - Operation[{0}]: Missing column information

             * 400 SensitivityLabelsUpdateSameColumnMoreThanOnce - The column {0} can not be updated more than once in a single command

             * 400 InvalidSensitivityLabelResource - The specified sensitivity label resource is not valid

             * 400 SensitivityLabelLabelNameAndInfoTypeNotProvided - At least one of LabelName and InformationType must be specified

             * 400 LabelNameTooLong - Label name cannot exceed {0} characters

             * 400 InformationTypeTooLong - Information type cannot exceed {0} characters

             * 400 LabelIdMustBeGuid - The provided ‘labelId’ is invalid. Value must be a GUID

             * 400 InformationTypeIdMustBeGuid - The provided ‘informationTypeId’ is invalid. Value must be a GUID

             * 400 LabelMissing - Label is required. At least one of ‘labelName’ or ‘labelId’ must be provided

             * 400 InformationTypeMissing - Information type is required. At least one of ‘informationType’ or ‘informationTypeId’ must be provided

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SensitivityLabelsLabelNotFound - The specified sensitivity label could not be found

             * 404 SensitivityLabelsSchemaNotFound - The schema {0} could not be found

             * 404 SensitivityLabelsTableNotFound - The table {0} could not be found in schema {1}

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/recommendedSensitivityLabels?api-version=2020-11-01-preview:
    get:
      tags:
        - SensitivityLabels
      description: Gets the sensitivity labels of a given database
      operationId: SensitivityLabelsRecommendedByDatabase_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: $skipToken
          in: query
          required: false
          schema:
            type: string
        - name: includeDisabledRecommendations
          in: query
          description: Specifies whether to include disabled recommendations or not.
          required: false
          schema:
            type: boolean
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the sensitivity labels.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensitivityLabelListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelsInvalidODataQuery - The specified OData query is either not valid or not supported

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
      x-ms-odata: '#/components/schemas/SensitivityLabel'
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: SensitivityLabels_ListRecommendedByDatabase
    patch:
      tags:
        - SensitivityLabels
      description: Update recommended sensitivity labels states of a given database using an operations batch.
      operationId: RecommendedSensitivityLabels_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecommendedSensitivityLabelUpdateList'
      responses:
        '200':
          description: Successfully updated recommended sensitivity labels.
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelSourceNameNotSupported - The specified sensitivity label source is not valid

             * 400 InvalidRecommendedSensitivityLabelsBatch - The specified recommended sensitivity labels operations are not valid

             * 400 SensitivityLabelsMissingSchema - Operation[{0}]: Missing schema information

             * 400 SensitivityLabelsMissingTable - Operation[{0}]: Missing table information

             * 400 SensitivityLabelsMissingColumn - Operation[{0}]: Missing column information

             * 400 SensitivityLabelsUpdateSameColumnMoreThanOnce - The column {0} can not be updated more than once in a single command

             * 400 InvalidSensitivityLabelResource - The specified sensitivity label resource is not valid

             * 400 SensitivityLabelLabelNameAndInfoTypeNotProvided - At least one of LabelName and InformationType must be specified

             * 400 LabelNameTooLong - Label name cannot exceed {0} characters

             * 400 InformationTypeTooLong - Information type cannot exceed {0} characters

             * 400 LabelIdMustBeGuid - The provided ‘labelId’ is invalid. Value must be a GUID

             * 400 InformationTypeIdMustBeGuid - The provided ‘informationTypeId’ is invalid. Value must be a GUID

             * 400 LabelMissing - Label is required. At least one of ‘labelName’ or ‘labelId’ must be provided

             * 400 InformationTypeMissing - Information type is required. At least one of ‘informationType’ or ‘informationTypeId’ must be provided

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SensitivityLabelsLabelNotFound - The specified sensitivity label could not be found

             * 404 SensitivityLabelsSchemaNotFound - The schema {0} could not be found

             * 404 SensitivityLabelsTableNotFound - The table {0} could not be found in schema {1}

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}/enable?api-version=2020-11-01-preview:
    post:
      tags:
        - SensitivityLabels
      description: Enables sensitivity recommendations on a given column (recommendations are enabled by default on all columns)
      operationId: SensitivityLabels_EnableRecommendation
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: columnName
          in: path
          description: The name of the column.
          required: true
          schema:
            type: string
        - name: sensitivityLabelSource
          in: path
          required: true
          schema:
            enum:
              - recommended
            x-ms-enum:
              name: SensitivityLabelSource
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully enabled the sensitivity recommendations on the given column.
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}/disable?api-version=2020-11-01-preview:
    post:
      tags:
        - SensitivityLabels
      description: Disables sensitivity recommendations on a given column
      operationId: SensitivityLabels_DisableRecommendation
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: columnName
          in: path
          description: The name of the column.
          required: true
          schema:
            type: string
        - name: sensitivityLabelSource
          in: path
          required: true
          schema:
            enum:
              - recommended
            x-ms-enum:
              name: SensitivityLabelSource
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully disabled the sensitivity recommendation on the given column.
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}/columns/{columnName}/sensitivityLabels/{sensitivityLabelSource}?api-version=2020-11-01-preview:
    get:
      tags:
        - SensitivityLabels
      description: Gets the sensitivity label of a given column
      operationId: SensitivityLabels_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: columnName
          in: path
          description: The name of the column.
          required: true
          schema:
            type: string
        - name: sensitivityLabelSource
          in: path
          description: The source of the sensitivity label.
          required: true
          schema:
            enum:
              - current
              - recommended
            x-ms-enum:
              name: SensitivityLabelSource
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the sensitivity label.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensitivityLabel'
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelSourceNameNotSupported - The specified sensitivity label source is not valid

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SensitivityLabelsLabelNotFound - The specified sensitivity label could not be found

             * 404 SensitivityLabelsSchemaNotFound - The schema {0} could not be found

             * 404 SensitivityLabelsTableNotFound - The table {0} could not be found in schema {1}

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet
    put:
      tags:
        - SensitivityLabels
      description: Creates or updates the sensitivity label of a given column
      operationId: SensitivityLabels_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: columnName
          in: path
          description: The name of the column.
          required: true
          schema:
            type: string
        - name: sensitivityLabelSource
          in: path
          description: The source of the sensitivity label.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: WritableSensitivityLabelSource
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The column sensitivity label resource.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensitivityLabel'
      responses:
        '200':
          description: Successfully updated the sensitivity label.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensitivityLabel'
        '201':
          description: Successfully created the sensitivity label.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SensitivityLabel'
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelSourceNameNotSupported - The specified sensitivity label source is not valid

             * 400 InvalidSensitivityLabelResource - The specified sensitivity label resource is not valid

             * 400 SensitivityLabelLabelNameAndInfoTypeNotProvided - At least one of LabelName and InformationType must be specified

             * 400 LabelNameTooLong - Label name cannot exceed {0} characters

             * 400 InformationTypeTooLong - Information type cannot exceed {0} characters

             * 400 LabelIdMustBeGuid - The provided ‘labelId’ is invalid. Value must be a GUID

             * 400 InformationTypeIdMustBeGuid - The provided ‘informationTypeId’ is invalid. Value must be a GUID

             * 400 LabelMissing - Label is required. At least one of ‘labelName’ or ‘labelId’ must be provided

             * 400 InformationTypeMissing - Information type is required. At least one of ‘informationType’ or ‘informationTypeId’ must be provided

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SensitivityLabelsLabelNotFound - The specified sensitivity label could not be found

             * 404 SensitivityLabelsSchemaNotFound - The schema {0} could not be found

             * 404 SensitivityLabelsTableNotFound - The table {0} could not be found in schema {1}

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet
    delete:
      tags:
        - SensitivityLabels
      description: Deletes the sensitivity label of a given column
      operationId: SensitivityLabels_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - name: columnName
          in: path
          description: The name of the column.
          required: true
          schema:
            type: string
        - name: sensitivityLabelSource
          in: path
          description: The source of the sensitivity label.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: WritableSensitivityLabelSource
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the sensitivity label.
        default:
          description: |-
            *** Error Responses: ***

             * 400 DatawarehouseDatabaseIsDeactivated - Could not execute Data Classification operation because the database is paused. Please resume it.

             * 400 SensitivityLabelSourceNameNotSupported - The specified sensitivity label source is not valid

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SensitivityLabelsLabelNotFound - The specified sensitivity label could not be found

             * 404 SensitivityLabelsSchemaNotFound - The schema {0} could not be found

             * 404 SensitivityLabelsTableNotFound - The table {0} could not be found in schema {1}

             * 404 SensitivityLabelsColumnNotFound - The column {0} could not be found in table {2}.{1}

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet

             * 501 SensitivityLabelRecommendedSourceNameNotSupported - 'Recommended' sensitivity label source is not supported yet
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extensions/{extensionName}?api-version=2021-02-01-preview:
    get:
      tags:
        - DatabaseExtensions
      description: Gets a database extension. This will return resource not found as it is not supported.
      operationId: DatabaseExtensions_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: extensionName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Get extensions import/export operation. This will return resource not found as it is not supported.
        default:
          description: '*** Error Responses: ***'
    put:
      tags:
        - DatabaseExtensions
      description: Perform a database extension operation, like polybase import
      operationId: DatabaseExtensions_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: extensionName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The database import request parameters.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseExtensions'
      responses:
        '200':
          description: Successfully completed import/export operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportExportExtensionsOperationResult'
        '202':
          description: Import/Export operation is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 MissingImportExportInputParameters - Missing ImportExport input parameters.

             * 400 PolybaseImportAuthenticationTypeNotSupported - Authentication type parameter is not support for PolybaseImport operation.

             * 400 DatabaseExtensionsInvalidOperationMode - Invalid operationMode parameter for database extension.

             * 400 DatabaseExtensionsInvalidStorageKeyType - The storage key type must by 'StorageAccessKey'.

             * 400 DatabaseExtensionsMissingStorageUri - Storage URI cannot be empty.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidOperationType - Provide a valid operation type.

             * 400 ImportExportJobError - The ImportExport operation has failed.

             * 400 BlockedByOutboundFirewall - The outbound firewall rules blocked the request.

             * 404 ResourceNotFound - Invalid request specifying a non-existent resource.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ImportExportOperationIdNotFound - The operation Id for import or export cannot be found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 409 ImportExportOperationInProgress - There is an import or export operation in progress on the database.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/extensions?api-version=2021-02-01-preview:
    get:
      tags:
        - DatabaseExtensions
      description: List database extension. This will return an empty list as it is not supported.
      operationId: DatabaseExtensions_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: List extensions import/export operations. This will return an empty list as it is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportExportExtensionsOperationListResult'
        default:
          description: '*** Error Responses: ***'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules/{firewallRuleName}?api-version=2020-11-01-preview:
    get:
      tags:
        - FirewallRules
      description: Gets a firewall rule.
      operationId: FirewallRules_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: firewallRuleName
          in: path
          description: The name of the firewall rule.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified firewall rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRule'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - FirewallRules
      description: Creates or updates a firewall rule.
      operationId: FirewallRules_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: firewallRuleName
          in: path
          description: The name of the firewall rule.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The required parameters for creating or updating a firewall rule.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirewallRule'
      responses:
        '200':
          description: Successfully updated the firewall rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRule'
        '201':
          description: Successfully created the firewall rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRule'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidServerFirewallRuleResourceRequest - The server firewall rule resource request is invalid.

             * 400 InvalidServerFirewallRuleResourceParameters - The server firewall rule resource parameter is invalid.

             * 400 TooManyFirewallRules - The provided firewall rules are over the limit.

             * 400 DenyPublicEndpointEnabled - Unable to create or modify firewall rules when public network interface for the server is disabled. To manage server or database level firewall rules, please enable the public network interface.

             * 400 FirewallRuleInvalidRange - The specified firewall rule range is invalid.

             * 400 FirewallRuleNameTooLong - The provided firewall rule name is too long

             * 400 FirewallRuleNameEmpty - The provided firewall rule name is empty

             * 400 FirewallRuleNotIPv4Address - The provided firewall rule address is not IPv4

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
    delete:
      tags:
        - FirewallRules
      description: Deletes a firewall rule.
      operationId: FirewallRules_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: firewallRuleName
          in: path
          description: The name of the firewall rule.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the firewall rule.
        '204':
          description: The specified firewall rule does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidServerFirewallRuleResourceRequest - The server firewall rule resource request is invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/firewallRules?api-version=2020-11-01-preview:
    get:
      tags:
        - FirewallRules
      description: Gets a list of firewall rules.
      operationId: FirewallRules_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of firewall rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRuleListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
    put:
      tags:
        - FirewallRules
      description: Replaces all firewall rules on the server.
      operationId: FirewallRules_Replace
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirewallRuleList'
      responses:
        '200':
          description: Successfully updated the firewall rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirewallRule'
        '202':
          description: Creating or updating the Server Firewall Rules is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidServerFirewallRuleResourceRequest - The server firewall rule resource request is invalid.

             * 400 InvalidServerFirewallRuleResourceParameters - The server firewall rule resource parameter is invalid.

             * 400 TooManyFirewallRules - The provided firewall rules are over the limit.

             * 400 DenyPublicEndpointEnabled - Unable to create or modify firewall rules when public network interface for the server is disabled. To manage server or database level firewall rules, please enable the public network interface.

             * 400 FirewallRuleInvalidRange - The specified firewall rule range is invalid.

             * 400 FirewallRuleNameTooLong - The provided firewall rule name is too long

             * 400 FirewallRuleNameEmpty - The provided firewall rule name is empty

             * 400 FirewallRuleNotIPv4Address - The provided firewall rule address is not IPv4

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
  /providers/Microsoft.Sql/operations?api-version=2020-11-01-preview:
    get:
      tags:
        - Operations
      description: Lists all of the available SQL Rest API operations.
      operationId: Operations_List
      parameters: []
      responses:
        '200':
          description: Successfully retrieved operations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperationListResult'
        default:
          description: '*** Error Responses: ***'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/azureADOnlyAuthentications/{authenticationName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerAzureADOnlyAuthentications
      description: Gets a specific Azure Active Directory only authentication property.
      operationId: ServerAzureADOnlyAuthentications_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: authenticationName
          in: path
          description: The name of server azure active directory only authentication.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AuthenticationName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved a specified Azure Active Directory only authentication properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerAzureADOnlyAuthentication'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerAzureADOnlyAuthenticationParameter - User tried to set AzureADOnlyAuthentication parameter to false which is not allowed, please use azureADOnlyAuthentications API instead.

             * 400 InvalidServerAADOnlyAuthTypePropertyName - Server Azure Active Directory only authentication type should be Default

             * 400 InvalidServerAADOnlyAuthNoAADAdminPropertyName - AAD Admin is not configured, AAD Admin must be set before enabling/disabling AAD Only Authentication.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - ServerAzureADOnlyAuthentications
      description: Sets Server Active Directory only authentication property or updates an existing server Active Directory only authentication property.
      operationId: ServerAzureADOnlyAuthentications_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: authenticationName
          in: path
          description: The name of server azure active directory only authentication.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AuthenticationName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The required parameters for creating or updating an Active Directory only authentication property.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerAzureADOnlyAuthentication'
      responses:
        '200':
          description: Successfully updated a Azure Active Directory only authentication property.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerAzureADOnlyAuthentication'
        '201':
          description: Successfully updated Azure Active Directory only authentication property.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerAzureADOnlyAuthentication'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerAzureADOnlyAuthenticationParameter - User tried to set AzureADOnlyAuthentication parameter to false which is not allowed, please use azureADOnlyAuthentications API instead.

             * 400 InvalidServerAADOnlyAuthTypePropertyName - Server Azure Active Directory only authentication type should be Default

             * 400 InvalidServerAADOnlyAuthNoAADAdminPropertyName - AAD Admin is not configured, AAD Admin must be set before enabling/disabling AAD Only Authentication.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
    delete:
      tags:
        - ServerAzureADOnlyAuthentications
      description: Deletes an existing server Active Directory only authentication property.
      operationId: ServerAzureADOnlyAuthentications_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: authenticationName
          in: path
          description: The name of server azure active directory only authentication.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AuthenticationName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the Azure Active Directory only property.
        '202':
          description: Accepted
        '204':
          description: The specified Azure Active Directory only property does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerAzureADOnlyAuthenticationParameter - User tried to set AzureADOnlyAuthentication parameter to false which is not allowed, please use azureADOnlyAuthentications API instead.

             * 400 InvalidServerAADOnlyAuthTypePropertyName - Server Azure Active Directory only authentication type should be Default

             * 400 InvalidServerAADOnlyAuthNoAADAdminPropertyName - AAD Admin is not configured, AAD Admin must be set before enabling/disabling AAD Only Authentication.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/azureADOnlyAuthentications?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerAzureADOnlyAuthentications
      description: Gets a list of server Azure Active Directory only authentications.
      operationId: ServerAzureADOnlyAuthentications_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of Azure Active Directory only authentication objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AzureADOnlyAuthListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments?api-version=2022-11-01-preview:
    get:
      tags:
        - SqlVulnerabilityAssessmentsSettings
      description: Lists SQL Vulnerability Assessment policies associated with a server.
      operationId: SqlVulnerabilityAssessmentsSettings_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved SQL Vulnerability Assessment policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlVulnerabilityAssessmentListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}?api-version=2022-11-01-preview:
    get:
      tags:
        - SqlVulnerabilityAssessmentsSettings
      description: Gets SQL Vulnerability Assessment policy.
      operationId: SqlVulnerabilityAssessmentsSettings_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the SQL Vulnerability Assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: SqlVulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved SQL Vulnerability Assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlVulnerabilityAssessment'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    put:
      tags:
        - SqlVulnerabilityAssessmentsSettings
      description: Creates or updates SQL Vulnerability Assessment policy.
      operationId: SqlVulnerabilityAssessmentsSettings_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the SQL Vulnerability Assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested resource.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SqlVulnerabilityAssessment'
      responses:
        '200':
          description: Successfully set SQL Vulnerability Assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlVulnerabilityAssessment'
        '201':
          description: Successfully created SQL Vulnerability Assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlVulnerabilityAssessment'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    delete:
      tags:
        - SqlVulnerabilityAssessmentsSettings
      description: Removes SQL Vulnerability Assessment.
      operationId: SqlVulnerabilityAssessments_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the SQL Vulnerability Assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully removed SQL Vulnerability Assessment.
        '204':
          description: The SQL Vulnerability Assessment settings does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/serverTrustGroups/{serverTrustGroupName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerTrustGroups
      description: Gets a server trust group.
      operationId: ServerTrustGroups_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - name: serverTrustGroupName
          in: path
          description: The name of the server trust group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the the specified server trust group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTrustGroup'
        default:
          description: |-
            *** Error Responses: ***

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - ServerTrustGroups
      description: Creates or updates a server trust group.
      operationId: ServerTrustGroups_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - name: serverTrustGroupName
          in: path
          description: The name of the server trust group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The server trust group parameters.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerTrustGroup'
      responses:
        '200':
          description: Successfully updated the server trust group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTrustGroup'
        '201':
          description: Successfully created the server trust group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTrustGroup'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 ServerTrustGroupCreateRequestInvalid - The resource or resource properties in the request body is empty or invalid

             * 400 ServerTrustGroupCreateRequestInvalidGroupMembers - The group members property in the request body is empty or invalid

             * 400 ServerTrustGroupCreateRequestInvalidGroupMembersCount - The group members property has an invalid number of servers

             * 400 ServerTrustGroupCreateRequestInvalidServer - The given serverId field in create server trust group request body is empty or invalid

             * 400 ServerTrustGroupCreateRequestDuplicateServer - One or more of the provided servers are duplicates.

             * 400 ServerTrustGroupCreateRequestInvalidTrustScopes - The trust scope property in the request body is empty or invalid.

             * 400 ServerTrustGroupCreateRequestInvalidTrustScopesValue - The trust scope property in the request body has an invalid value.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
    delete:
      tags:
        - ServerTrustGroups
      description: Deletes a server trust group.
      operationId: ServerTrustGroups_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - name: serverTrustGroupName
          in: path
          description: The name of the server trust group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the server trust group.
        '202':
          description: Accepted
        '204':
          description: The specified server trust group does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ServerTrustGroupCreateRequestInvalid - The resource or resource properties in the request body is empty or invalid

             * 400 ServerTrustGroupCreateRequestInvalidGroupMembers - The group members property in the request body is empty or invalid

             * 400 ServerTrustGroupCreateRequestInvalidGroupMembersCount - The group members property has an invalid number of servers

             * 400 ServerTrustGroupCreateRequestInvalidServer - The given serverId field in create server trust group request body is empty or invalid

             * 400 ServerTrustGroupCreateRequestDuplicateServer - One or more of the provided servers are duplicates.

             * 400 ServerTrustGroupCreateRequestInvalidTrustScopes - The trust scope property in the request body is empty or invalid.

             * 400 ServerTrustGroupCreateRequestInvalidTrustScopesValue - The trust scope property in the request body has an invalid value.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/serverTrustGroups?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerTrustGroups
      description: Lists a server trust group.
      operationId: ServerTrustGroups_ListByLocation
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the server trust groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTrustGroupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/serverTrustGroups?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerTrustGroups
      description: Gets a server trust groups by instance name.
      operationId: ServerTrustGroupsByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the server trust groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerTrustGroupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ServerTrustGroups_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/advancedThreatProtectionSettings?api-version=2021-11-01-preview:
    get:
      tags:
        - ServerAdvancedThreatProtectionSettings
      description: Get a list of the server's Advanced Threat Protection states.
      operationId: ServerAdvancedThreatProtectionSettings_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of server's Advanced Threat Protection states.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogicalServerAdvancedThreatProtectionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting the server Advanced Threat Protection settings is not allowed on a server with a paused Data Warehouse database

             * 400 AdvancedThreatProtectionInsufficientDiskSpace - Insufficient disk space to save the Advanced Threat Protection settings metadata in the database

             * 400 InvalidServerAdvancedThreatProtectionCreateRequest - The create server Advanced Threat Protection request does not exist or has no properties object

             * 400 AdvancedThreatProtectionInvalidUserSuppliedParameter - An invalid parameter value was provided by the client

             * 400 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 400 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 409 ServerAdvancedThreatProtectionInProgress - Setting the server Advanced Threat Protection settings is already in progress

             * 409 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 500 GetServerAdvancedThreatProtectionFailed - Failed to get the Advanced Threat Protection settings
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/advancedThreatProtectionSettings/{advancedThreatProtectionName}?api-version=2021-11-01-preview:
    get:
      tags:
        - ServerAdvancedThreatProtectionSettings
      description: Get a server's Advanced Threat Protection state.
      operationId: ServerAdvancedThreatProtectionSettings_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: advancedThreatProtectionName
          in: path
          description: The name of the Advanced Threat Protection state.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AdvancedThreatProtectionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the server's Advanced Threat Protection state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerAdvancedThreatProtection'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting the server Advanced Threat Protection settings is not allowed on a server with a paused Data Warehouse database

             * 400 AdvancedThreatProtectionInsufficientDiskSpace - Insufficient disk space to save the Advanced Threat Protection settings metadata in the database

             * 400 InvalidServerAdvancedThreatProtectionCreateRequest - The create server Advanced Threat Protection request does not exist or has no properties object

             * 400 AdvancedThreatProtectionInvalidUserSuppliedParameter - An invalid parameter value was provided by the client

             * 400 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 400 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 409 ServerAdvancedThreatProtectionInProgress - Setting the server Advanced Threat Protection settings is already in progress

             * 409 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 500 GetServerAdvancedThreatProtectionFailed - Failed to get the Advanced Threat Protection settings
    put:
      tags:
        - ServerAdvancedThreatProtectionSettings
      description: Creates or updates an Advanced Threat Protection state.
      operationId: ServerAdvancedThreatProtectionSettings_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: advancedThreatProtectionName
          in: path
          description: The name of the Advanced Threat Protection state.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AdvancedThreatProtectionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The server Advanced Threat Protection state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerAdvancedThreatProtection'
      responses:
        '200':
          description: Successfully created or updated the Advanced Threat Protection state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerAdvancedThreatProtection'
        '202':
          description: Created request to set the Advanced Threat Protection state.
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting the server Advanced Threat Protection settings is not allowed on a server with a paused Data Warehouse database

             * 400 AdvancedThreatProtectionInsufficientDiskSpace - Insufficient disk space to save the Advanced Threat Protection settings metadata in the database

             * 400 InvalidServerAdvancedThreatProtectionCreateRequest - The create server Advanced Threat Protection request does not exist or has no properties object

             * 400 AdvancedThreatProtectionInvalidUserSuppliedParameter - An invalid parameter value was provided by the client

             * 400 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 400 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 409 ServerAdvancedThreatProtectionInProgress - Setting the server Advanced Threat Protection settings is already in progress

             * 409 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 500 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/securityAlertPolicies/{securityAlertPolicyName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseSecurityAlertPolicies
      description: Gets a managed database's security alert policy.
      operationId: ManagedDatabaseSecurityAlertPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the managed database for which the security alert policy is defined.
          required: true
          schema:
            type: string
        - name: securityAlertPolicyName
          in: path
          description: The name of the security alert policy.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: SecurityAlertPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the managed database security alert policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabaseSecurityAlertPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAlertPoliciesInvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 SecurityAlertPoliciesInvalidStorageAccountCredentials - The provided storage account access key is not valid.

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting server Threat Detection settings is not allowed on a server with a paused Data Warehouse database

             * 400 SecurityAlertPoliciesInsufficientDiskSpace - Insufficient disk space to save security alert policy metadata in the database

             * 400 SecurityAlertPoliciesInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

             * 400 SecurityAlertPoliciesStorageAccountIsDisabled - The storage account provided in the threat detection policy is disabled.

             * 400 InvalidServerSecurityAlertPolicyCreateRequest - The create server Threat Detection security alert policy request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 409 ServerSecurityAlertPolicyInProgress - Set server security alert policy is already in progress

             * 409 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 GetServerSecurityAlertPolicyFailed - Failed to get Threat Detection settings
    put:
      tags:
        - ManagedDatabaseSecurityAlertPolicies
      description: Creates or updates a database's security alert policy.
      operationId: ManagedDatabaseSecurityAlertPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the managed database for which the security alert policy is defined.
          required: true
          schema:
            type: string
        - name: securityAlertPolicyName
          in: path
          description: The name of the security alert policy.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: SecurityAlertPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The database security alert policy.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedDatabaseSecurityAlertPolicy'
      responses:
        '200':
          description: Successfully set the managed database security alert policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabaseSecurityAlertPolicy'
        '201':
          description: Successfully created the managed database security alert policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabaseSecurityAlertPolicy'
        default:
          description: '*** Error Responses: ***'
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/securityAlertPolicies?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseSecurityAlertPolicies
      description: Gets a list of managed database's security alert policies.
      operationId: ManagedDatabaseSecurityAlertPolicies_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the managed database for which the security alert policies are defined.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the managed database security alert policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabaseSecurityAlertPolicyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAlertPoliciesInvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 SecurityAlertPoliciesInvalidStorageAccountCredentials - The provided storage account access key is not valid.

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting server Threat Detection settings is not allowed on a server with a paused Data Warehouse database

             * 400 SecurityAlertPoliciesInsufficientDiskSpace - Insufficient disk space to save security alert policy metadata in the database

             * 400 SecurityAlertPoliciesInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

             * 400 SecurityAlertPoliciesStorageAccountIsDisabled - The storage account provided in the threat detection policy is disabled.

             * 400 InvalidServerSecurityAlertPolicyCreateRequest - The create server Threat Detection security alert policy request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 409 ServerSecurityAlertPolicyInProgress - Set server security alert policy is already in progress

             * 409 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 GetServerSecurityAlertPolicyFailed - Failed to get Threat Detection settings
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupLongTermRetentionPolicies/{policyName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceLongTermRetentionPolicies
      description: Gets a managed database's long term retention policy.
      operationId: ManagedInstanceLongTermRetentionPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: policyName
          in: path
          description: The policy name. Should always be Default.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: ManagedInstanceLongTermRetentionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully got LTR policy for managed database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceLongTermRetentionPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 LongTermRetentionPolicyNotSupported - Long Term Retention is not supported on this database.

             * 400 LongTermRetentionPolicyInvalid - Long Term Retention policy is invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - ManagedInstanceLongTermRetentionPolicies
      description: Sets a managed database's long term retention policy.
      operationId: ManagedInstanceLongTermRetentionPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: policyName
          in: path
          description: The policy name. Should always be Default.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: ManagedInstanceLongTermRetentionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The long term retention policy info.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedInstanceLongTermRetentionPolicy'
      responses:
        '200':
          description: Successfully set LTR policy for managed database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceLongTermRetentionPolicy'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 LongTermRetentionMissingWeekOfYear - WeekOfYear is required to be set between 1 and 52 in order to set yearly retention.

             * 400 LongTermRetentionPolicyNotSupported - Long Term Retention is not supported on this database.

             * 400 LongTermRetentionPolicyInvalid - Long Term Retention policy is invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/backupLongTermRetentionPolicies?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceLongTermRetentionPolicies
      description: Gets a database's long term retention policy.
      operationId: ManagedInstanceLongTermRetentionPolicies_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully got LTR policy for managed database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceLongTermRetentionPolicyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 LongTermRetentionPolicyNotSupported - Long Term Retention is not supported on this database.

             * 400 LongTermRetentionPolicyInvalid - Long Term Retention policy is invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions/{jobVersion}/steps?api-version=2020-11-01-preview:
    get:
      tags:
        - JobSteps
      description: Gets all job steps in the specified job version.
      operationId: JobSteps_ListByVersion
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to get.
          required: true
          schema:
            type: string
        - name: jobVersion
          in: path
          description: The version of the job to get.
          required: true
          schema:
            format: int32
            type: integer
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of job steps.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStepListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions/{jobVersion}/steps/{stepName}?api-version=2020-11-01-preview:
    get:
      tags:
        - JobSteps
      description: Gets the specified version of a job step.
      operationId: JobSteps_GetByVersion
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job.
          required: true
          schema:
            type: string
        - name: jobVersion
          in: path
          description: The version of the job to get.
          required: true
          schema:
            format: int32
            type: integer
        - name: stepName
          in: path
          description: The name of the job step.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the job step.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStep'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps?api-version=2020-11-01-preview:
    get:
      tags:
        - JobSteps
      description: Gets all job steps for a job's current version.
      operationId: JobSteps_ListByJob
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to get.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of job steps.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStepListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/steps/{stepName}?api-version=2020-11-01-preview:
    get:
      tags:
        - JobSteps
      description: Gets a job step in a job's current version.
      operationId: JobSteps_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job.
          required: true
          schema:
            type: string
        - name: stepName
          in: path
          description: The name of the job step.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the job step.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStep'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
    put:
      tags:
        - JobSteps
      description: Creates or updates a job step. This will implicitly create a new job version.
      operationId: JobSteps_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job.
          required: true
          schema:
            type: string
        - name: stepName
          in: path
          description: The name of the job step.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested state of the job step.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobStep'
      responses:
        '200':
          description: Successfully updated the job step.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStep'
        '201':
          description: Successfully added the job step.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobStep'
        default:
          description: |-
            *** Error Responses: ***

             * 400 JobStepIdMismatch - Step Id in the specified Job Step URI does not match step id in provided Job Step Resource.

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 MismatchingJobAccountNameWithUrl - The provided job account name did not match the name in the Url.

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
    delete:
      tags:
        - JobSteps
      description: Deletes a job step. This will implicitly create a new job version.
      operationId: JobSteps_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job.
          required: true
          schema:
            type: string
        - name: stepName
          in: path
          description: The name of the job step to delete.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the job step.
        '204':
          description: The specified job step does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/advisors?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerAdvisors
      description: Gets a list of server advisors.
      operationId: ServerAdvisors_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: $expand
          in: query
          description: The child resources to include in the response.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of server advisors.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Advisor'
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 DataWarehouseNotSupported - Automatic tuning is not supported for SQL Data Warehouse.

             * 404 DatabaseDoesNotExist - The requested database was not found

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SubscriptionDoesNotHaveElasticPool - The requested elastic pool was not found

             * 404 AdvisorNotFound - The requested advisor was not found.

             * 405 NotSupported - This functionality is not supported.

             * 409 Conflict - Request could not be processed because of conflict in the request.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/advisors/{advisorName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerAdvisors
      description: Gets a server advisor.
      operationId: ServerAdvisors_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: advisorName
          in: path
          description: The name of the Server Advisor.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved details of specified server advisor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advisor'
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 DataWarehouseNotSupported - Automatic tuning is not supported for SQL Data Warehouse.

             * 404 DatabaseDoesNotExist - The requested database was not found

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SubscriptionDoesNotHaveElasticPool - The requested elastic pool was not found

             * 404 AdvisorNotFound - The requested advisor was not found.

             * 405 NotSupported - This functionality is not supported.

             * 409 Conflict - Request could not be processed because of conflict in the request.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.
    patch:
      tags:
        - ServerAdvisors
      description: Updates a server advisor.
      operationId: ServerAdvisors_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: advisorName
          in: path
          description: The name of the Server Advisor.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested advisor resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Advisor'
      responses:
        '200':
          description: Successfully updated the specified server advisor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advisor'
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 DataWarehouseNotSupported - Automatic tuning is not supported for SQL Data Warehouse.

             * 400 InvalidAdvisorUpsertRequest - The update advisor request body does not exist or has no properties object.

             * 400 InvalidAdvisorAutoExecuteStatus - Specified auto-execute status for the advisor is not allowed.

             * 404 DatabaseDoesNotExist - The requested database was not found

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SubscriptionDoesNotHaveElasticPool - The requested elastic pool was not found

             * 404 AdvisorNotFound - The requested advisor was not found.

             * 404 AutomaticTuningOptionNotFound - The requested automatic tuning option was not found.

             * 405 NotSupported - This functionality is not supported.

             * 409 Conflict - Request could not be processed because of conflict in the request.

             * 409 DefaultAdvisorStateNotAllowedInCustomServerMode - DEFAULT advisor state not allowed in CUSTOM mode

             * 409 UpdateNotAllowedIfServerAutotuningUpdateOperationInProgress - Automatic tuning settings from previous request have not propagated to all user databases.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/encryptionProtector/{encryptionProtectorName}/revalidate?api-version=2020-11-01-preview:
    post:
      tags:
        - ManagedInstanceEncryptionProtectors
      description: Revalidates an existing encryption protector.
      operationId: ManagedInstanceEncryptionProtectors_Revalidate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: encryptionProtectorName
          in: path
          description: The name of the encryption protector to be updated.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: EncryptionProtectorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully revalidated the encryption protector.
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 InvalidEncryptionProtectorName - The encryption protector key name is not supported.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultMismatchError - Unexpected Key Vault region found in the http response.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 401 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 401 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 401 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 401 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 401 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerKeyNotFound - The requested server key was not found on the current subscription.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/encryptionProtector?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceEncryptionProtectors
      description: Gets a list of managed instance encryption protectors
      operationId: ManagedInstanceEncryptionProtectorsByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of managed instance encryption protector.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceEncryptionProtectorListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 InvalidEncryptionProtectorName - The encryption protector key name is not supported.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedInstanceEncryptionProtectors_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/encryptionProtector/{encryptionProtectorName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceEncryptionProtectors
      description: Gets a managed instance encryption protector.
      operationId: ManagedInstanceEncryptionProtectors_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: encryptionProtectorName
          in: path
          description: The name of the encryption protector to be retrieved.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: EncryptionProtectorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified managed instance encryption protector.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceEncryptionProtector'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 InvalidEncryptionProtectorName - The encryption protector key name is not supported.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - ManagedInstanceEncryptionProtectors
      description: Updates an existing encryption protector.
      operationId: ManagedInstanceEncryptionProtectors_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: encryptionProtectorName
          in: path
          description: The name of the encryption protector to be updated.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: EncryptionProtectorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested encryption protector resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedInstanceEncryptionProtector'
      responses:
        '200':
          description: Successfully updated the encryption protector.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceEncryptionProtector'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 InvalidEncryptionProtectorName - The encryption protector key name is not supported.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultMismatchError - Unexpected Key Vault region found in the http response.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 401 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 401 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 401 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 401 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 401 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerKeyNotFound - The requested server key was not found on the current subscription.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules?api-version=2022-11-01-preview:
    get:
      tags:
        - DatabaseSqlVulnerabilityAssessmentRuleBaselines
      description: Gets a list of database's sql vulnerability assessment rule baselines.
      operationId: DatabaseSqlVulnerabilityAssessmentRuleBaselines_ListByBaseline
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: baselineName
          in: path
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: BaselineName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully got the sql vulnerability assessment rule baseline list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaselineListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}/rules/{ruleId}?api-version=2022-11-01-preview:
    get:
      tags:
        - DatabaseSqlVulnerabilityAssessmentRuleBaselines
      description: Gets a database's sql vulnerability assessment rule baseline.
      operationId: DatabaseSqlVulnerabilityAssessmentRuleBaselines_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: baselineName
          in: path
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: BaselineName
              modelAsString: true
            type: string
        - name: ruleId
          in: path
          description: The vulnerability assessment rule ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully got the sql vulnerability assessment rule baseline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaseline'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    put:
      tags:
        - DatabaseSqlVulnerabilityAssessmentRuleBaselines
      description: Creates or updates a database's vulnerability assessment rule baseline.
      operationId: DatabaseSqlVulnerabilityAssessmentRuleBaselines_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: baselineName
          in: path
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: BaselineName
              modelAsString: true
            type: string
        - name: ruleId
          in: path
          description: The vulnerability assessment rule ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested rule baseline resource.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaselineInput'
      responses:
        '200':
          description: Successfully set the vulnerability assessment rule baseline.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaseline'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    delete:
      tags:
        - DatabaseSqlVulnerabilityAssessmentRuleBaselines
      description: Removes the database's vulnerability assessment rule baseline.
      operationId: DatabaseSqlVulnerabilityAssessmentRuleBaselines_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: baselineName
          in: path
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: BaselineName
              modelAsString: true
            type: string
        - name: ruleId
          in: path
          description: The vulnerability assessment rule ID.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully removed the database vulnerability assessment rule baseline.
        '204':
          description: The specified rule baseline does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/securityAlertPolicies/{securityAlertPolicyName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerSecurityAlertPolicies
      description: Get a server's security alert policy.
      operationId: ServerSecurityAlertPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: securityAlertPolicyName
          in: path
          description: The name of the security alert policy.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: SecurityAlertPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the server threat detection policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerSecurityAlertPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAlertPoliciesInvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 SecurityAlertPoliciesInvalidStorageAccountCredentials - The provided storage account access key is not valid.

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting server Threat Detection settings is not allowed on a server with a paused Data Warehouse database

             * 400 SecurityAlertPoliciesInsufficientDiskSpace - Insufficient disk space to save security alert policy metadata in the database

             * 400 SecurityAlertPoliciesInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

             * 400 SecurityAlertPoliciesStorageAccountIsDisabled - The storage account provided in the threat detection policy is disabled.

             * 400 InvalidServerSecurityAlertPolicyCreateRequest - The create server Threat Detection security alert policy request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 409 ServerSecurityAlertPolicyInProgress - Set server security alert policy is already in progress

             * 409 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 GetServerSecurityAlertPolicyFailed - Failed to get Threat Detection settings
    put:
      tags:
        - ServerSecurityAlertPolicies
      description: Creates or updates a threat detection policy.
      operationId: ServerSecurityAlertPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: securityAlertPolicyName
          in: path
          description: The name of the threat detection policy.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: SecurityAlertPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The server security alert policy.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerSecurityAlertPolicy'
      responses:
        '200':
          description: Successfully updated the threat detection policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerSecurityAlertPolicy'
        '202':
          description: Created request to set the server threat detection policy.
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAlertPoliciesInvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 SecurityAlertPoliciesInvalidStorageAccountCredentials - The provided storage account access key is not valid.

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting server Threat Detection settings is not allowed on a server with a paused Data Warehouse database

             * 400 SecurityAlertPoliciesInsufficientDiskSpace - Insufficient disk space to save security alert policy metadata in the database

             * 400 SecurityAlertPoliciesInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

             * 400 SecurityAlertPoliciesStorageAccountIsDisabled - The storage account provided in the threat detection policy is disabled.

             * 400 InvalidServerSecurityAlertPolicyCreateRequest - The create server Threat Detection security alert policy request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 409 ServerSecurityAlertPolicyInProgress - Set server security alert policy is already in progress

             * 409 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/securityAlertPolicies?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerSecurityAlertPolicies
      description: Get the server's threat detection policies.
      operationId: ServerSecurityAlertPolicies_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the server threat detection policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogicalServerSecurityAlertPolicyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAlertPoliciesInvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 SecurityAlertPoliciesInvalidStorageAccountCredentials - The provided storage account access key is not valid.

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting server Threat Detection settings is not allowed on a server with a paused Data Warehouse database

             * 400 SecurityAlertPoliciesInsufficientDiskSpace - Insufficient disk space to save security alert policy metadata in the database

             * 400 SecurityAlertPoliciesInsufficientStorageAccountPermissions - Insufficient read or write permissions on the provided storage account.

             * 400 SecurityAlertPoliciesStorageAccountIsDisabled - The storage account provided in the threat detection policy is disabled.

             * 400 InvalidServerSecurityAlertPolicyCreateRequest - The create server Threat Detection security alert policy request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 400 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 409 ServerSecurityAlertPolicyInProgress - Set server security alert policy is already in progress

             * 409 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerSecurityAlertPolicyFailed - An error has occurred while saving Threat detection settings, please try again later

             * 500 GetServerSecurityAlertPolicyFailed - Failed to get Threat Detection settings
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/checkNameAvailability?api-version=2023-05-01-preview:
    post:
      tags:
        - Servers
      description: Determines whether a resource can be created with the specified name.
      operationId: Servers_CheckNameAvailability
      requestBody:
        description: The name availability request parameters.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckNameAvailabilityRequest'
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully completed the availability check.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckNameAvailabilityResponse'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidNameAvailabilityRequest - The check name availability request is invalid.

             * 400 UnknownNameType - Unknown resource type specified for a subscription level name availability check.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/servers?api-version=2023-05-01-preview:
    get:
      tags:
        - Servers
      description: Gets a list of all servers in the subscription.
      operationId: Servers_List
      parameters:
        - name: $expand
          in: query
          description: The child resources to include in the response.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of servers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers?api-version=2023-05-01-preview:
    get:
      tags:
        - Servers
      description: Gets a list of servers in a resource groups.
      operationId: Servers_ListByResourceGroup
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: $expand
          in: query
          description: The child resources to include in the response.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of servers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}?api-version=2023-05-01-preview:
    get:
      tags:
        - Servers
      description: Gets a server.
      operationId: Servers_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: $expand
          in: query
          description: The child resources to include in the response.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ResourceNotFound - The requested resource was not found.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Servers
      description: Creates or updates a server.
      operationId: Servers_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested server resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Server'
      responses:
        '200':
          description: Successfully updated the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '201':
          description: Successfully created the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 MissingIdentityId - No user assigned identity is provided when the identity type is set to UserAssigned

             * 400 InvalidPrimaryIdentityId - User provides a value for PrimaryUserIdentityId but the same is not listed in the IdentityId parameter

             * 400 PECsNotExistingToDenyPublicNetworkAccess - Unable to set Deny Public Network Access to Yes since there is no private endpoint enabled to access the server. Please set up private endpoints and retry the operation (https://docs.microsoft.com/azure/sql-database/sql-database-private-endpoint-overview#how-to-set-up-private-link-for-azure-sql-database).

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 MissingPrimaryIdentity - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 PrimaryIdentityMissingPermissionForKeyId - KeyId is provided by user during create but PrimaryUserAssignedIdentityId is not provided in the API call

             * 400 InvalidIdentityTypeForKeyId - KeyId is provided by user during create but identity type is not set to 'UserAssigned'

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 Ipv6FeatureNotEnabled - User tried to turn on Ipv6 support on the server without enabling feature flag on subscription, or the feature support is currently disabled in the region.

             * 400 PasswordTooShort - The provided password is too short

             * 400 AadOnlyAuthenticationIsEnabled - Azure Active Directory Only Authentication is enabled. Please contact your system administrator.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 PasswordTooLong - The provided password is too long.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidLocation - An invalid location was specified.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 TokenTooLong - The provided token is too long.

             * 400 CMKOperationNotAllowed - User tried to perform an operation on the server when the server did not have Azure Key Vault Access.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 ServerNotFound - The requested server was not found.

             * 400 InvalidMinimalTlsVersion - Invalid minimal TLS version.

             * 400 InvalidExternalAdministratorLogin - Invalid or missing external administrator login name.

             * 400 InvalidExternalAdministratorSid - Invalid or missing external administrator object id.

             * 400 InvalidExternalAdministratorTenantId - Invalid or missing external administrator tenant id.

             * 400 ExternalAdministratorPrincipalType - Invalid or missing external administrator principal type. Please select from User, Application or Group.

             * 400 MissingExternalAdministratorWithAadOnlyAuth - In order to use Azure AD Only Authentication, please provide details of an external administrator.

             * 400 ExternalAdministratorLoginSameAsSqlAdmin - The names of the Azure Active Directory administrator and of the server admin account must be different. Please provide different values.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 UpsertLogicalServerRequestAlreadyInProgress - An ongoing logical server request is already in progress, please try your request again later.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.

             * 409 ServerAlreadyExists - Duplicate server name.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
    delete:
      tags:
        - Servers
      description: Deletes a server.
      operationId: Servers_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the server.
        '202':
          description: Accepted
        '204':
          description: The specified server does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 CannotDropDatabaseAKVError - The database {0} on server {1} cannot be safely dropped because it is encrypted with a customer managed key that is no longer accessible to take the last backup before drop. Please restore Azure Key Vault Access on the server and revalidate the keys to make this database accessible and then proceed with the drop. For details see https://aka.ms/tdecmkrestorability

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 DropLogicalServerAlreadyInProgress - Server is already being dropped.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
    patch:
      tags:
        - Servers
      description: Updates a server.
      operationId: Servers_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested server resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerUpdate'
      responses:
        '200':
          description: Successfully updated the server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 MissingIdentityId - No user assigned identity is provided when the identity type is set to UserAssigned

             * 400 InvalidPrimaryIdentityId - User provides a value for PrimaryUserIdentityId but the same is not listed in the IdentityId parameter

             * 400 PECsNotExistingToDenyPublicNetworkAccess - Unable to set Deny Public Network Access to Yes since there is no private endpoint enabled to access the server. Please set up private endpoints and retry the operation (https://docs.microsoft.com/azure/sql-database/sql-database-private-endpoint-overview#how-to-set-up-private-link-for-azure-sql-database).

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 MissingPrimaryIdentity - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 PrimaryIdentityMissingPermissionForKeyId - KeyId is provided by user during create but PrimaryUserAssignedIdentityId is not provided in the API call

             * 400 InvalidIdentityTypeForKeyId - KeyId is provided by user during create but identity type is not set to 'UserAssigned'

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 Ipv6FeatureNotEnabled - User tried to turn on Ipv6 support on the server without enabling feature flag on subscription, or the feature support is currently disabled in the region.

             * 400 PasswordTooShort - The provided password is too short

             * 400 AadOnlyAuthenticationIsEnabled - Azure Active Directory Only Authentication is enabled. Please contact your system administrator.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 PasswordTooLong - The provided password is too long.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidLocation - An invalid location was specified.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 TokenTooLong - The provided token is too long.

             * 400 CMKOperationNotAllowed - User tried to perform an operation on the server when the server did not have Azure Key Vault Access.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 ServerNotFound - The requested server was not found.

             * 400 InvalidMinimalTlsVersion - Invalid minimal TLS version.

             * 400 InvalidExternalAdministratorLogin - Invalid or missing external administrator login name.

             * 400 InvalidExternalAdministratorSid - Invalid or missing external administrator object id.

             * 400 InvalidExternalAdministratorTenantId - Invalid or missing external administrator tenant id.

             * 400 ExternalAdministratorPrincipalType - Invalid or missing external administrator principal type. Please select from User, Application or Group.

             * 400 MissingExternalAdministratorWithAadOnlyAuth - In order to use Azure AD Only Authentication, please provide details of an external administrator.

             * 400 ExternalAdministratorLoginSameAsSqlAdmin - The names of the Azure Active Directory administrator and of the server admin account must be different. Please provide different values.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 UpsertLogicalServerRequestAlreadyInProgress - An ongoing logical server request is already in progress, please try your request again later.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.

             * 409 ServerAlreadyExists - Duplicate server name.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/import?api-version=2023-05-01-preview:
    post:
      tags:
        - Servers
      description: Imports a bacpac into a new database.
      operationId: Servers_ImportDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The database import request parameters.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportNewDatabaseDefinition'
      responses:
        '200':
          description: Successfully imported the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportExportOperationResult'
        '202':
          description: Importing the database is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 MissingImportExportInputParameters - Missing ImportExport input parameters.

             * 400 InvalidImportExportInputParameter - The import/export request failed due to an invalid input parameter.

             * 400 PolybaseImportAuthenticationTypeNotSupported - Authentication type parameter is not support for PolybaseImport operation.

             * 400 DatabaseExtensionsInvalidOperationMode - Invalid operationMode parameter for database extension.

             * 400 DatabaseExtensionsInvalidStorageKeyType - The storage key type must by 'StorageAccessKey'.

             * 400 DatabaseExtensionsMissingStorageUri - Storage URI cannot be empty.

             * 400 InvalidSqlAuthType - ImportExport operation failed because the sql authentication type is invalid

             * 400 BlobAlreadyExist - ImportExport operation failed because the storage blob is already exists

             * 400 InvalidImportExportOperationResourceLocks - The Import/Export request is invalid due to locks on the Private Link resources.

             * 400 DatabaseInvalidSkuPropertyCombination - The properties of the requested sku are inconsistent. Please check that a valid combination is specified. See https://docs.microsoft.com/en-us/rest/api/sql/capabilities/listbylocation#serviceobjectivecapability for more details.

             * 400 ImportExportJobError - The ImportExport operation has failed.

             * 400 BlockedByOutboundFirewall - The outbound firewall rules blocked the request.

             * 400 InvalidOperationType - Provide a valid operation type.

             * 400 InvalidMaxSizeTierCombination - The specified tier does not support the specified database max size.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidImportExportParameter - The Import/Export request failed due to an invalid input parameter.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 InvalidImportExportStorageCredentials - Import/Export operation failed due to invalid storage credentials

             * 400 InvalidImportExportStorageAuthType - Import/Export operation failed due to invalid storage auth type

             * 400 InvalidImportExportStorageKeyFormat - Import/Export operation failed due to invalid storage key format

             * 400 LongImportExportStorageUri - Import/Export operation failed due to long storage URI

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 LargeExportDatabaseSize - Export operation failed because database is larger than max supported size

             * 400 UnSupportedImportExportEdition - ImportExport operation failed because it is targeting a invalid edition

             * 400 InvalidImportExportStorageURI - ImportExport operation failed because storage URI is invalid

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - Invalid request specifying a non-existent resource.

             * 404 ImportExportOperationIdNotFound - The operation Id for import or export cannot be found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ImportExportOperationInProgress - There is an import or export operation in progress on the database.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/refreshExternalGovernanceStatus?api-version=2023-05-01-preview:
    post:
      tags:
        - Servers
      description: Refresh external governance enablement status.
      operationId: Servers_RefreshStatus
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully refreshed external governance enablement status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshExternalGovernanceStatusOperationResult'
        '202':
          description: Refreshing external governance enablement status.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}/recommendedActions?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseRecommendedActions
      description: Gets list of Database Recommended Actions.
      operationId: DatabaseRecommendedActions_ListByDatabaseAdvisor
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: advisorName
          in: path
          description: The name of the Database Advisor.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of database recommended actions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecommendedAction'
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 404 DatabaseDoesNotExist - The requested database was not found

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SubscriptionDoesNotHaveElasticPool - The requested elastic pool was not found

             * 404 AdvisorNotFound - The requested advisor was not found.

             * 404 RecommendedActionNotFound - The requested recommended action was not found.

             * 404 AdvisorNotFound - The requested advisor was not found.

             * 404 RecommendedActionNotFound - The requested recommended action was not found.

             * 405 NotSupported - This functionality is not supported.

             * 409 Conflict - Request could not be processed because of conflict in the request.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advisors/{advisorName}/recommendedActions/{recommendedActionName}?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseRecommendedActions
      description: Gets a database recommended action.
      operationId: DatabaseRecommendedActions_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: advisorName
          in: path
          description: The name of the Database Advisor.
          required: true
          schema:
            type: string
        - name: recommendedActionName
          in: path
          description: The name of Database Recommended Action.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved details of specified database recommended action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendedAction'
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 404 DatabaseDoesNotExist - The requested database was not found

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SubscriptionDoesNotHaveElasticPool - The requested elastic pool was not found

             * 404 AdvisorNotFound - The requested advisor was not found.

             * 404 RecommendedActionNotFound - The requested recommended action was not found.

             * 404 AdvisorNotFound - The requested advisor was not found.

             * 404 RecommendedActionNotFound - The requested recommended action was not found.

             * 405 NotSupported - This functionality is not supported.

             * 409 Conflict - Request could not be processed because of conflict in the request.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.
    patch:
      tags:
        - DatabaseRecommendedActions
      description: Updates a database recommended action.
      operationId: DatabaseRecommendedActions_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: advisorName
          in: path
          description: The name of the Database Advisor.
          required: true
          schema:
            type: string
        - name: recommendedActionName
          in: path
          description: The name of Database Recommended Action.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested recommended action resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecommendedAction'
      responses:
        '200':
          description: Successfully updated the specified database recommended action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendedAction'
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidRecommendedActionUpsertRequest - The update recommended action request body does not exist or has no properties or state object.

             * 400 InvalidRecommendedActionState - The specified state for recommended action is invalid

             * 404 DatabaseDoesNotExist - The requested database was not found

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SubscriptionDoesNotHaveElasticPool - The requested elastic pool was not found

             * 404 AdvisorNotFound - The requested advisor was not found.

             * 404 RecommendedActionNotFound - The requested recommended action was not found.

             * 404 AdvisorNotFound - The requested advisor was not found.

             * 404 RecommendedActionNotFound - The requested recommended action was not found.

             * 405 NotSupported - This functionality is not supported.

             * 409 Conflict - Request could not be processed because of conflict in the request.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/devOpsAuditingSettings?api-version=2022-02-01-preview:
    get:
      tags:
        - ServerDevOpsAudit
      description: Lists DevOps audit settings of a server.
      operationId: ServerDevOpsAuditSettings_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved server DevOps audit settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerDevOpsAuditSettingsListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/devOpsAuditingSettings/{devOpsAuditingSettingsName}?api-version=2022-02-01-preview:
    get:
      tags:
        - ServerDevOpsAudit
      description: Gets a server's DevOps audit settings.
      operationId: ServerDevOpsAuditSettings_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: devOpsAuditingSettingsName
          in: path
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: DevOpsAuditingSettingsName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the server DevOps audit settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerDevOpsAuditingSettings'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
    put:
      tags:
        - ServerDevOpsAudit
      description: Creates or updates a server's DevOps audit settings.
      operationId: ServerDevOpsAuditSettings_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: devOpsAuditingSettingsName
          in: path
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: DevOpsAuditingSettingsName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: Properties of DevOps audit settings
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerDevOpsAuditingSettings'
      responses:
        '200':
          description: Successfully updated the DevOps audit settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerDevOpsAuditingSettings'
        '202':
          description: Updating the audit DevOps settings is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerDevOpsAuditSettingsCreateRequest - The create server DevOps audit policy request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidServerDevOpsAuditSettingsName - Invalid server DevOps policy name.

             * 400 DevOpsAuditInvalidStorageAccountCredentials - The provided storage account or access key is not valid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 409 ServerDevOpsAuditSettingsInProgress - Set server DevOps audit is already in progress.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans?api-version=2022-11-01-preview:
    get:
      tags:
        - DatabaseSqlVulnerabilityAssessmentScans
      description: Lists the vulnerability assessment scans of a database.
      operationId: DatabaseSqlVulnerabilityAssessmentScans_ListBySqlVulnerabilityAssessments
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database vulnerability assessment scan records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlVulnerabilityAssessmentScanRecordListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}?api-version=2022-11-01-preview:
    get:
      tags:
        - DatabaseSqlVulnerabilityAssessmentScans
      description: Get a database vulnerability assessment scan result.
      operationId: DatabaseSqlVulnerabilityAssessmentScans_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: scanId
          in: path
          description: The vulnerability assessment scan Id of the scan to retrieve.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database vulnerability assessment scan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlVulnerabilityAssessmentScanRecord'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/privateEndpointConnections/{privateEndpointConnectionName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstancePrivateEndpointConnections
      description: Gets a private endpoint connection.
      operationId: ManagedInstancePrivateEndpointConnections_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: privateEndpointConnectionName
          in: path
          description: The name of the private endpoint connection.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved a specified private endpoint connection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstancePrivateEndpointConnection'
        default:
          description: |-
            *** Error Responses: ***

             * 400 PrivateEndpointConnectionDoesNotExist - Private Endpoint Connection does not exist

             * 400 PrivateEndpointConnectionStatusNotPending - Private Endpoint Connection Status is not Pending

             * 400 NullRemotePrivateLinkServiceConnectionState - Remote Private Link Service Connection State is Null

             * 400 NullPrivateEndpointConnectionProperties - Private Endpoint Connection Properties is Null

             * 400 NullRemotePrivateLinkServiceConnectionStateStatus - Remote Private Link Service Connection State Status is Null

             * 400 IncorrectPrivateLinkServiceConnectionStateStatus - Private Link Service Connection State Status must be "Approved" or "Rejected"

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - ManagedInstancePrivateEndpointConnections
      description: Approve or reject a private endpoint connection with a given name.
      operationId: ManagedInstancePrivateEndpointConnections_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: privateEndpointConnectionName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedInstancePrivateEndpointConnection'
      responses:
        '200':
          description: Successfully approved or rejected private endpoint connection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstancePrivateEndpointConnection'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 PrivateEndpointConnectionDoesNotExist - Private Endpoint Connection does not exist

             * 400 PrivateEndpointConnectionStatusNotPending - Private Endpoint Connection Status is not Pending

             * 400 NullRemotePrivateLinkServiceConnectionState - Remote Private Link Service Connection State is Null

             * 400 NullPrivateEndpointConnectionProperties - Private Endpoint Connection Properties is Null

             * 400 NullRemotePrivateLinkServiceConnectionStateStatus - Remote Private Link Service Connection State Status is Null

             * 400 IncorrectPrivateLinkServiceConnectionStateStatus - Private Link Service Connection State Status must be "Approved" or "Rejected"

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
    delete:
      tags:
        - ManagedInstancePrivateEndpointConnections
      description: Deletes a private endpoint connection with a given name.
      operationId: ManagedInstancePrivateEndpointConnections_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: privateEndpointConnectionName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted private endpoint connection.
        '202':
          description: Accepted
        '204':
          description: Private endpoint connection does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 PrivateEndpointConnectionDoesNotExist - Private Endpoint Connection does not exist

             * 400 PrivateEndpointConnectionStatusNotPending - Private Endpoint Connection Status is not Pending

             * 400 NullRemotePrivateLinkServiceConnectionState - Remote Private Link Service Connection State is Null

             * 400 NullPrivateEndpointConnectionProperties - Private Endpoint Connection Properties is Null

             * 400 NullRemotePrivateLinkServiceConnectionStateStatus - Remote Private Link Service Connection State Status is Null

             * 400 IncorrectPrivateLinkServiceConnectionStateStatus - Private Link Service Connection State Status must be "Approved" or "Rejected"

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/privateEndpointConnections?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstancePrivateEndpointConnections
      description: Gets all private endpoint connections on a server.
      operationId: ManagedInstancePrivateEndpointConnectionsByManagedInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved private endpoint connections.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstancePrivateEndpointConnectionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 PrivateEndpointConnectionDoesNotExist - Private Endpoint Connection does not exist

             * 400 PrivateEndpointConnectionStatusNotPending - Private Endpoint Connection Status is not Pending

             * 400 NullRemotePrivateLinkServiceConnectionState - Remote Private Link Service Connection State is Null

             * 400 NullPrivateEndpointConnectionProperties - Private Endpoint Connection Properties is Null

             * 400 NullRemotePrivateLinkServiceConnectionStateStatus - Remote Private Link Service Connection State Status is Null

             * 400 IncorrectPrivateLinkServiceConnectionStateStatus - Private Link Service Connection State Status must be "Approved" or "Rejected"

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedInstancePrivateEndpointConnections_ListByManagedInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/operations?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceOperations
      description: Gets a list of operations performed on the managed instance.
      operationId: ManagedInstanceOperationsByManagedInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: The request for getting managed instance operations has been executed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceOperationListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedInstanceOperations_ListByManagedInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/operations/{operationId}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceOperations
      description: Gets a management operation on a managed instance.
      operationId: ManagedInstanceOperations_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: operationId
          in: path
          required: true
          schema:
            format: uuid
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified managed instance operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceOperation'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/operations/{operationId}/cancel?api-version=2020-11-01-preview:
    post:
      tags:
        - ManagedInstanceOperations
      description: Cancels the asynchronous operation on the managed instance.
      operationId: ManagedInstanceOperations_Cancel
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: operationId
          in: path
          required: true
          schema:
            format: uuid
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: The request for cancel has been executed successfully.
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 405 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceVulnerabilityAssessments
      description: Gets the managed instance's vulnerability assessment.
      operationId: ManagedInstanceVulnerabilityAssessments_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance for which the vulnerability assessment is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the managed instance vulnerability assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceVulnerabilityAssessment'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
    put:
      tags:
        - ManagedInstanceVulnerabilityAssessments
      description: Creates or updates the managed instance's vulnerability assessment. Learn more about setting SQL vulnerability assessment with managed identity - https://docs.microsoft.com/azure/azure-sql/database/sql-database-vulnerability-assessment-storage
      operationId: ManagedInstanceVulnerabilityAssessments_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance for which the vulnerability assessment is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested resource.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedInstanceVulnerabilityAssessment'
      responses:
        '200':
          description: Successfully set the vulnerability assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceVulnerabilityAssessment'
        '201':
          description: Successfully created the vulnerability assessment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceVulnerabilityAssessment'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
    delete:
      tags:
        - ManagedInstanceVulnerabilityAssessments
      description: Removes the managed instance's vulnerability assessment.
      operationId: ManagedInstanceVulnerabilityAssessments_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance for which the vulnerability assessment is defined.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully removed the managed instance vulnerability assessment.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/vulnerabilityAssessments?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceVulnerabilityAssessments
      description: Gets the managed instance's vulnerability assessment policies.
      operationId: ManagedInstanceVulnerabilityAssessmentsByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance for which the vulnerability assessments is defined.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the managed instance vulnerability assessment policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceVulnerabilityAssessmentListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 VulnerabilityAssessmentInsufficientStorageAccountPermissions - Insufficient permissions on the provided storage account.

             * 400 VulnerabilityAssessmentStorageAccountIsDisabled - The provided storage account is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedInstanceVulnerabilityAssessments_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/recoverableDatabases?api-version=2020-11-01-preview:
    get:
      tags:
        - RecoverableManagedDatabases
      description: Gets a list of recoverable managed databases.
      operationId: RecoverableManagedDatabasesByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of recoverable managed databases.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecoverableManagedDatabaseListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 MiGeoRestoreWithWrongBackupStorageRedundancy - Geo-Restore is not allowed for managed instances with LRS/ZRS backup storage redundancy.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 AadOnlyAuthenticationIsEnabled - Azure Active Directory Only Authentication is enabled. Please contact your system administrator.

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.

             * 409 MiDropFailedOnAuthLocks - User tried to drop last Managed Instance in subnet that has Lock applied on resource(s).

             * 409 MiCreateFailedNonDelegatedSubnet - User tried to deploy Managed Instance or Managed Instance pool in subnet that is not delegated to Microsoft.Sql/managedInstances.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: RecoverableManagedDatabases_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/recoverableDatabases/{recoverableDatabaseName}?api-version=2020-11-01-preview:
    get:
      tags:
        - RecoverableManagedDatabases
      description: Gets a recoverable managed database.
      operationId: RecoverableManagedDatabases_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: recoverableDatabaseName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified recoverable managed database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecoverableManagedDatabase'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidRecoverableDatabaseId - Invalid recoverable database identifier.

             * 400 MiGeoRestoreWithWrongBackupStorageRedundancy - Geo-Restore is not allowed for managed instances with LRS/ZRS backup storage redundancy.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 AadOnlyAuthenticationIsEnabled - Azure Active Directory Only Authentication is enabled. Please contact your system administrator.

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.

             * 409 MiDropFailedOnAuthLocks - User tried to drop last Managed Instance in subnet that has Lock applied on resource(s).

             * 409 MiCreateFailedNonDelegatedSubnet - User tried to deploy Managed Instance or Managed Instance pool in subnet that is not delegated to Microsoft.Sql/managedInstances.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/sqlAgent/current?api-version=2020-11-01-preview:
    get:
      tags:
        - SqlAgent
      description: Gets current instance sql agent configuration.
      operationId: SqlAgent_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved current sql agent configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlAgentConfiguration'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlAgentManagedServerNotFound - User tried to configure sql agent of unknown managed instance.
    put:
      tags:
        - SqlAgent
      description: Puts new sql agent configuration to instance.
      operationId: SqlAgent_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SqlAgentConfiguration'
      responses:
        '200':
          description: Successfully put sql agent configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlAgentConfiguration'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlAgentManagedServerNotFound - User tried to configure sql agent of unknown managed instance.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/connectionPolicies/{connectionPolicyName}?api-version=2021-05-01-preview:
    get:
      tags:
        - ServerConnectionPolicies
      description: Gets a server connection policy
      operationId: ServerConnectionPolicies_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: connectionPolicyName
          in: path
          description: The name of the connection policy.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: ConnectionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the server connection policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConnectionPolicy'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidConnectionPolicyName - Invalid connection policy name.

             * 400 ConnectionPolicyParamsNull - The request body cannot be null.

             * 400 InvalidConnectionPolicyType - Connection type is invalid

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
    put:
      tags:
        - ServerConnectionPolicies
      description: Updates a server connection policy
      operationId: ServerConnectionPolicies_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: connectionPolicyName
          in: path
          description: The name of the connection policy.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: ConnectionPolicyName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The required parameters for updating a server connection policy.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConnectionPolicy'
      responses:
        '200':
          description: Successfully updated the connection policy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConnectionPolicy'
        '202':
          description: Updating the server connection policy is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidConnectionPolicyName - Invalid connection policy name.

             * 400 ConnectionPolicyParamsNull - The request body cannot be null.

             * 400 InvalidConnectionPolicyType - Connection type is invalid

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/connectionPolicies?api-version=2021-05-01-preview:
    get:
      tags:
        - ServerConnectionPolicies
      description: Lists connection policy
      operationId: ServerConnectionPolicies_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the server connection policy list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerConnectionPolicyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidConnectionPolicyName - Invalid connection policy name.

             * 400 ConnectionPolicyParamsNull - The request body cannot be null.

             * 400 InvalidConnectionPolicyType - Connection type is invalid

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups/{backupName}?api-version=2021-05-01-preview:
    get:
      tags:
        - LongTermRetentionManagedInstanceBackups
      description: Gets a long term retention backup for a managed database.
      operationId: LongTermRetentionManagedInstanceBackups_Get
      parameters:
        - name: locationName
          in: path
          description: The location of the database.
          required: true
          schema:
            type: string
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the managed database.
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          description: The backup name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the backup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceLongTermRetentionBackup'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidLongTermRetentionManagedInstanceBackupId - Invalid long term retention backup identifier for Managed Instances.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    delete:
      tags:
        - LongTermRetentionManagedInstanceBackups
      description: Deletes a long term retention backup.
      operationId: LongTermRetentionManagedInstanceBackups_Delete
      parameters:
        - name: locationName
          in: path
          description: The location of the database.
          required: true
          schema:
            type: string
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the managed database.
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          description: The backup name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the backup.
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidLongTermRetentionManagedInstanceBackupId - Invalid long term retention backup identifier for Managed Instances.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups?api-version=2021-05-01-preview:
    get:
      tags:
        - LongTermRetentionManagedInstanceBackups
      description: Lists all long term retention backups for a managed database.
      operationId: LongTermRetentionManagedInstanceBackups_ListByDatabase
      parameters:
        - name: locationName
          in: path
          description: The location of the database.
          required: true
          schema:
            type: string
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the managed database.
          required: true
          schema:
            type: string
        - name: onlyLatestPerDatabase
          in: query
          description: Whether or not to only get the latest backup for each database.
          required: false
          schema:
            type: boolean
        - name: databaseState
          in: query
          description: Whether to query against just live databases, just deleted databases, or all databases.
          required: false
          schema:
            enum:
              - All
              - Live
              - Deleted
            x-ms-enum:
              name: databaseState
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of backups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceLongTermRetentionBackupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionManagedInstanceBackups?api-version=2021-05-01-preview:
    get:
      tags:
        - LongTermRetentionManagedInstanceBackups
      description: Lists the long term retention backups for a given managed instance.
      operationId: LongTermRetentionManagedInstanceBackupsByInstance_List
      parameters:
        - name: locationName
          in: path
          description: The location of the database
          required: true
          schema:
            type: string
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: onlyLatestPerDatabase
          in: query
          description: Whether or not to only get the latest backup for each database.
          required: false
          schema:
            type: boolean
        - name: databaseState
          in: query
          description: Whether to query against just live databases, just deleted databases, or all databases.
          required: false
          schema:
            enum:
              - All
              - Live
              - Deleted
            x-ms-enum:
              name: databaseState
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of backups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceLongTermRetentionBackupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: LongTermRetentionManagedInstanceBackups_ListByInstance
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstanceBackups?api-version=2021-05-01-preview:
    get:
      tags:
        - LongTermRetentionManagedInstanceBackups
      description: Lists the long term retention backups for managed databases in a given location.
      operationId: LongTermRetentionManagedInstanceBackups_ListByLocation
      parameters:
        - name: locationName
          in: path
          description: The location of the database.
          required: true
          schema:
            type: string
        - name: onlyLatestPerDatabase
          in: query
          description: Whether or not to only get the latest backup for each database.
          required: false
          schema:
            type: boolean
        - name: databaseState
          in: query
          description: Whether to query against just live databases, just deleted databases, or all databases.
          required: false
          schema:
            enum:
              - All
              - Live
              - Deleted
            x-ms-enum:
              name: databaseState
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of backups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceLongTermRetentionBackupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups/{backupName}?api-version=2021-05-01-preview:
    get:
      tags:
        - LongTermRetentionManagedInstanceBackups
      description: Gets a long term retention backup for a managed database.
      operationId: LongTermRetentionManagedInstanceBackups_GetByResourceGroup
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The location of the database.
          required: true
          schema:
            type: string
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the managed database.
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          description: The backup name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the backup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceLongTermRetentionBackup'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidLongTermRetentionManagedInstanceBackupId - Invalid long term retention backup identifier for Managed Instances.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    delete:
      tags:
        - LongTermRetentionManagedInstanceBackups
      description: Deletes a long term retention backup.
      operationId: LongTermRetentionManagedInstanceBackups_DeleteByResourceGroup
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The location of the database
          required: true
          schema:
            type: string
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the managed database.
          required: true
          schema:
            type: string
        - name: backupName
          in: path
          description: The backup name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the backup.
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidLongTermRetentionManagedInstanceBackupId - Invalid long term retention backup identifier for Managed Instances.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionDatabases/{databaseName}/longTermRetentionManagedInstanceBackups?api-version=2021-05-01-preview:
    get:
      tags:
        - LongTermRetentionManagedInstanceBackups
      description: Lists all long term retention backups for a managed database.
      operationId: LongTermRetentionManagedInstanceBackups_ListByResourceGroupDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The location of the database
          required: true
          schema:
            type: string
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the managed database.
          required: true
          schema:
            type: string
        - name: onlyLatestPerDatabase
          in: query
          description: Whether or not to only get the latest backup for each database.
          required: false
          schema:
            type: boolean
        - name: databaseState
          in: query
          description: Whether to query against just live databases, just deleted databases, or all databases.
          required: false
          schema:
            enum:
              - All
              - Live
              - Deleted
            x-ms-enum:
              name: databaseState
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of backups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceLongTermRetentionBackupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstances/{managedInstanceName}/longTermRetentionManagedInstanceBackups?api-version=2021-05-01-preview:
    get:
      tags:
        - LongTermRetentionManagedInstanceBackups
      description: Lists the long term retention backups for a given managed instance.
      operationId: LongTermRetentionManagedInstanceBackupsByResourceGroupInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The location of the database.
          required: true
          schema:
            type: string
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: onlyLatestPerDatabase
          in: query
          description: Whether or not to only get the latest backup for each database.
          required: false
          schema:
            type: boolean
        - name: databaseState
          in: query
          description: Whether to query against just live databases, just deleted databases, or all databases.
          required: false
          schema:
            enum:
              - All
              - Live
              - Deleted
            x-ms-enum:
              name: databaseState
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of backups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceLongTermRetentionBackupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: LongTermRetentionManagedInstanceBackups_ListByResourceGroupInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/longTermRetentionManagedInstanceBackups?api-version=2021-05-01-preview:
    get:
      tags:
        - LongTermRetentionManagedInstanceBackups
      description: Lists the long term retention backups for managed databases in a given location.
      operationId: LongTermRetentionManagedInstanceBackups_ListByResourceGroupLocation
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The location of the database.
          required: true
          schema:
            type: string
        - name: onlyLatestPerDatabase
          in: query
          description: Whether or not to only get the latest backup for each database.
          required: false
          schema:
            type: boolean
        - name: databaseState
          in: query
          description: Whether to query against just live databases, just deleted databases, or all databases.
          required: false
          schema:
            enum:
              - All
              - Live
              - Deleted
            x-ms-enum:
              name: databaseState
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of backups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceLongTermRetentionBackupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseTables
      description: List database tables
      operationId: DatabaseTables_ListBySchema
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved database tables.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseTableListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InvalidDatabaseSchema - Schema is missing in database.

             * 404 InvalidDatabaseTable - Table is missing in database.

             * 404 InvalidDatabaseColumn - Column is missing in table.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
      x-ms-odata: '#/components/schemas/DatabaseTable'
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/schemas/{schemaName}/tables/{tableName}?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseTables
      description: Get database table
      operationId: DatabaseTables_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: schemaName
          in: path
          description: The name of the schema.
          required: true
          schema:
            type: string
        - name: tableName
          in: path
          description: The name of the table.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved database table.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseTable'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InvalidDatabaseSchema - Schema is missing in database.

             * 404 InvalidDatabaseTable - Table is missing in database.

             * 404 InvalidDatabaseColumn - Column is missing in table.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/ledgerDigestUploads/{ledgerDigestUploads}?api-version=2021-02-01-preview:
    get:
      tags:
        - LedgerDigestUploads
      description: Gets the current ledger digest upload configuration for a database.
      operationId: LedgerDigestUploads_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: ledgerDigestUploads
          in: path
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: LedgerDigestUploadsName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the ledger digest configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerDigestUploads'
        default:
          description: |-
            *** Error Responses: ***

             * 400 LedgerInvalidDigestStorageTargetUpdateRequest - The database ledger digest storage upload request does not exist or has no properties object.

             * 400 InvalidDigestStorageEndpoint - The specified digestStorageEndpoint is invalid. It must be an Azure blob storage endpoint.

             * 400 MalformedDigestStorageEndpoint - The specified digest storage endpoint is a malformed URI.

             * 400 InvalidLedgerDigestUploadsName - The ledger digest upload name is not supported. Please use the key name “current”.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
    put:
      tags:
        - LedgerDigestUploads
      description: Enables upload ledger digests to an Azure Storage account or an Azure Confidential Ledger instance.
      operationId: LedgerDigestUploads_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: ledgerDigestUploads
          in: path
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: LedgerDigestUploadsName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LedgerDigestUploads'
      responses:
        '200':
          description: Successfully updated the ledger digest upload configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerDigestUploads'
        '202':
          description: Updating the ledger digest upload configuration is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 LedgerInvalidDigestStorageTargetUpdateRequest - The database ledger digest storage upload request does not exist or has no properties object.

             * 400 InvalidDigestStorageEndpoint - The specified digestStorageEndpoint is invalid. It must be an Azure blob storage endpoint.

             * 400 MalformedDigestStorageEndpoint - The specified digest storage endpoint is a malformed URI.

             * 400 InvalidLedgerDigestUploadsName - The ledger digest upload name is not supported. Please use the key name “current”.

             * 400 NoServerIdentity - No identity is configured for specified server. For information on how to configure an identity for the server see https://go.microsoft.com/fwlink/?linkid=2156804

             * 400 InsufficientStorageAccountPermissions - Read or write operations are not allowed on the storage account {0}.

             * 400 StorageAccountIsDisabled - The storage account {0} is disabled.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered. The error message from Active Directory Authentication library (ADAL) is {0}.

             * 400 SubscriptionDoesNotHaveServer - Subscription {0} does not contain server {1}.

             * 400 InvalidStorageAccountName - The specified storage account is not valid or does not exist.

             * 404 SourceDatabaseNotFound - Specified database does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/ledgerDigestUploads?api-version=2021-02-01-preview:
    get:
      tags:
        - LedgerDigestUploads
      description: Gets all ledger digest upload settings on a database.
      operationId: LedgerDigestUploads_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved ledger upload settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerDigestUploadsListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 LedgerInvalidDigestStorageTargetUpdateRequest - The database ledger digest storage upload request does not exist or has no properties object.

             * 400 InvalidDigestStorageEndpoint - The specified digestStorageEndpoint is invalid. It must be an Azure blob storage endpoint.

             * 400 MalformedDigestStorageEndpoint - The specified digest storage endpoint is a malformed URI.

             * 400 InvalidLedgerDigestUploadsName - The ledger digest upload name is not supported. Please use the key name “current”.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/ledgerDigestUploads/{ledgerDigestUploads}/disable?api-version=2021-02-01-preview:
    post:
      tags:
        - LedgerDigestUploads
      description: Disables uploading ledger digests to an Azure Storage account or an Azure Confidential Ledger instance.
      operationId: LedgerDigestUploads_Disable
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: ledgerDigestUploads
          in: path
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: LedgerDigestUploadsName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully disabled uploading ledger digests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LedgerDigestUploads'
        '202':
          description: Disabling the ledger digest upload is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 LedgerInvalidDigestStorageTargetUpdateRequest - The database ledger digest storage upload request does not exist or has no properties object.

             * 400 InvalidDigestStorageEndpoint - The specified digestStorageEndpoint is invalid. It must be an Azure blob storage endpoint.

             * 400 MalformedDigestStorageEndpoint - The specified digest storage endpoint is a malformed URI.

             * 400 InvalidLedgerDigestUploadsName - The ledger digest upload name is not supported. Please use the key name “current”.

             * 400 NoServerIdentity - No identity is configured for specified server. For information on how to configure an identity for the server see https://go.microsoft.com/fwlink/?linkid=2156804

             * 400 InsufficientStorageAccountPermissions - Read or write operations are not allowed on the storage account {0}.

             * 400 StorageAccountIsDisabled - The storage account {0} is disabled.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered. The error message from Active Directory Authentication library (ADAL) is {0}.

             * 400 SubscriptionDoesNotHaveServer - Subscription {0} does not contain server {1}.

             * 400 InvalidStorageAccountName - The specified storage account is not valid or does not exist.

             * 404 SourceDatabaseNotFound - Specified database does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/dnsAliases?api-version=2021-11-01-preview:
    get:
      tags:
        - ManagedServerDnsAliases
      description: Gets a list of managed server DNS aliases for a managed server.
      operationId: ManagedServerDnsAliasesByManagedInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of managed server DNS aliases.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedServerDnsAliasListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidManagedServerDnsAliasAcquireRequest - The acquire managed server DNS alias request body is empty or invalid.

             * 400 ManagedServerDnsAliasAcquireRequestInvalidOldManagedServerDnsAliasResourceId - The old managed server DNS alias id in request body is empty or invalid (it should have the format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/dnsAliases/{dnsAliasName}).

             * 400 ManagedServerDnsAliasAcquireRequestOldManagedServerDnsAliasSubscriptionMismatch - The old managed server DNS subscription id in request body is different than the one in request URI.

             * 400 ManagedServerDnsAliasAcquireRequestOldManagedServerDnsAliasNameMismatch - The old managed server DNS alias name in request body is different than the one in request URI.

             * 400 ServerDnsAliasDoesNotExist - Server DNS Alias does not exist on a server.

             * 400 UnableToTurnOnTableAuditingForDbOnServerWithServerDnsAlias - Server Dns Aliases are not working correctly for database that has Table Auditing turned on

             * 400 UnableToCreateServerDnsAliasDueToTableAuditing - The Server DNS Alias cannot be created for server that has table auditing turned on.

             * 400 UnableToCreateServerDnsAliasDueToTableAuditingForDb - Server DNS Alias cannot be created for server '{0}' because database '{1}' has Table Auditing or Security Enabled Access feature enabled.

             * 400 LimitOfServerDnsAliasesPerServerExceeded - Creating new Server Dns Alias will exceed the allowed number of Server DNS Aliases per server.

             * 400 UnableToTurnOnTableAuditingForServerWithServerDnsAlias - Server Dns Aliases are not working correctly for server that has Table Auditing turned on

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidServerDnsAliasNameForNamedInstance - Invalid Server DNS Alias name was supplied.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidServerDnsAliasName - Invalid Server DNS Alias name was supplied.

             * 400 ServerNotFound - The requested server was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 409 ServerDnsAliasBusy - Server DNS Alias is busy with another operation.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ManagedServerAliasDnsZoneMismatch - Managed Server Alias Dns Zone Mismatch

             * 409 ServerDnsAliasDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 ServerDnsAliasAlreadyExists - Server DNS Alias already exists on a given server.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedServerDnsAliases_ListByManagedInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/dnsAliases/{dnsAliasName}?api-version=2021-11-01-preview:
    get:
      tags:
        - ManagedServerDnsAliases
      description: Gets a server DNS alias.
      operationId: ManagedServerDnsAliases_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: dnsAliasName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified managed server DNS alias.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedServerDnsAlias'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidManagedServerDnsAliasAcquireRequest - The acquire managed server DNS alias request body is empty or invalid.

             * 400 ManagedServerDnsAliasAcquireRequestInvalidOldManagedServerDnsAliasResourceId - The old managed server DNS alias id in request body is empty or invalid (it should have the format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/dnsAliases/{dnsAliasName}).

             * 400 ManagedServerDnsAliasAcquireRequestOldManagedServerDnsAliasSubscriptionMismatch - The old managed server DNS subscription id in request body is different than the one in request URI.

             * 400 ManagedServerDnsAliasAcquireRequestOldManagedServerDnsAliasNameMismatch - The old managed server DNS alias name in request body is different than the one in request URI.

             * 400 ServerDnsAliasDoesNotExist - Server DNS Alias does not exist on a server.

             * 400 UnableToTurnOnTableAuditingForDbOnServerWithServerDnsAlias - Server Dns Aliases are not working correctly for database that has Table Auditing turned on

             * 400 UnableToCreateServerDnsAliasDueToTableAuditing - The Server DNS Alias cannot be created for server that has table auditing turned on.

             * 400 UnableToCreateServerDnsAliasDueToTableAuditingForDb - Server DNS Alias cannot be created for server '{0}' because database '{1}' has Table Auditing or Security Enabled Access feature enabled.

             * 400 LimitOfServerDnsAliasesPerServerExceeded - Creating new Server Dns Alias will exceed the allowed number of Server DNS Aliases per server.

             * 400 UnableToTurnOnTableAuditingForServerWithServerDnsAlias - Server Dns Aliases are not working correctly for server that has Table Auditing turned on

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidServerDnsAliasNameForNamedInstance - Invalid Server DNS Alias name was supplied.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidServerDnsAliasName - Invalid Server DNS Alias name was supplied.

             * 400 ServerNotFound - The requested server was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 409 ServerDnsAliasBusy - Server DNS Alias is busy with another operation.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ManagedServerAliasDnsZoneMismatch - Managed Server Alias Dns Zone Mismatch

             * 409 ServerDnsAliasDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 ServerDnsAliasAlreadyExists - Server DNS Alias already exists on a given server.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
    put:
      tags:
        - ManagedServerDnsAliases
      description: Creates a managed server DNS alias.
      operationId: ManagedServerDnsAliases_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: dnsAliasName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedServerDnsAliasCreation'
      responses:
        '200':
          description: The managed server DNS alias already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedServerDnsAlias'
        '201':
          description: Successfully created a managed server DNS alias.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedServerDnsAlias'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidManagedServerDnsAliasAcquireRequest - The acquire managed server DNS alias request body is empty or invalid.

             * 400 ManagedServerDnsAliasAcquireRequestInvalidOldManagedServerDnsAliasResourceId - The old managed server DNS alias id in request body is empty or invalid (it should have the format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/dnsAliases/{dnsAliasName}).

             * 400 ManagedServerDnsAliasAcquireRequestOldManagedServerDnsAliasSubscriptionMismatch - The old managed server DNS subscription id in request body is different than the one in request URI.

             * 400 ManagedServerDnsAliasAcquireRequestOldManagedServerDnsAliasNameMismatch - The old managed server DNS alias name in request body is different than the one in request URI.

             * 400 ServerDnsAliasDoesNotExist - Server DNS Alias does not exist on a server.

             * 400 UnableToTurnOnTableAuditingForDbOnServerWithServerDnsAlias - Server Dns Aliases are not working correctly for database that has Table Auditing turned on

             * 400 UnableToCreateServerDnsAliasDueToTableAuditing - The Server DNS Alias cannot be created for server that has table auditing turned on.

             * 400 UnableToCreateServerDnsAliasDueToTableAuditingForDb - Server DNS Alias cannot be created for server '{0}' because database '{1}' has Table Auditing or Security Enabled Access feature enabled.

             * 400 LimitOfServerDnsAliasesPerServerExceeded - Creating new Server Dns Alias will exceed the allowed number of Server DNS Aliases per server.

             * 400 UnableToTurnOnTableAuditingForServerWithServerDnsAlias - Server Dns Aliases are not working correctly for server that has Table Auditing turned on

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidServerDnsAliasNameForNamedInstance - Invalid Server DNS Alias name was supplied.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidServerDnsAliasName - Invalid Server DNS Alias name was supplied.

             * 400 ServerNotFound - The requested server was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 409 ServerDnsAliasBusy - Server DNS Alias is busy with another operation.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ManagedServerAliasDnsZoneMismatch - Managed Server Alias Dns Zone Mismatch

             * 409 ServerDnsAliasDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 ServerDnsAliasAlreadyExists - Server DNS Alias already exists on a given server.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    delete:
      tags:
        - ManagedServerDnsAliases
      description: Deletes the managed server DNS alias with the given name.
      operationId: ManagedServerDnsAliases_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: dnsAliasName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the managed server DNS alias.
        '202':
          description: Accepted
        '204':
          description: The specified managed server DNS alias does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidManagedServerDnsAliasAcquireRequest - The acquire managed server DNS alias request body is empty or invalid.

             * 400 ManagedServerDnsAliasAcquireRequestInvalidOldManagedServerDnsAliasResourceId - The old managed server DNS alias id in request body is empty or invalid (it should have the format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/dnsAliases/{dnsAliasName}).

             * 400 ManagedServerDnsAliasAcquireRequestOldManagedServerDnsAliasSubscriptionMismatch - The old managed server DNS subscription id in request body is different than the one in request URI.

             * 400 ManagedServerDnsAliasAcquireRequestOldManagedServerDnsAliasNameMismatch - The old managed server DNS alias name in request body is different than the one in request URI.

             * 400 ServerDnsAliasDoesNotExist - Server DNS Alias does not exist on a server.

             * 400 UnableToTurnOnTableAuditingForDbOnServerWithServerDnsAlias - Server Dns Aliases are not working correctly for database that has Table Auditing turned on

             * 400 UnableToCreateServerDnsAliasDueToTableAuditing - The Server DNS Alias cannot be created for server that has table auditing turned on.

             * 400 UnableToCreateServerDnsAliasDueToTableAuditingForDb - Server DNS Alias cannot be created for server '{0}' because database '{1}' has Table Auditing or Security Enabled Access feature enabled.

             * 400 LimitOfServerDnsAliasesPerServerExceeded - Creating new Server Dns Alias will exceed the allowed number of Server DNS Aliases per server.

             * 400 UnableToTurnOnTableAuditingForServerWithServerDnsAlias - Server Dns Aliases are not working correctly for server that has Table Auditing turned on

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidServerDnsAliasNameForNamedInstance - Invalid Server DNS Alias name was supplied.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidServerDnsAliasName - Invalid Server DNS Alias name was supplied.

             * 400 ServerNotFound - The requested server was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 409 ServerDnsAliasBusy - Server DNS Alias is busy with another operation.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ManagedServerAliasDnsZoneMismatch - Managed Server Alias Dns Zone Mismatch

             * 409 ServerDnsAliasDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 ServerDnsAliasAlreadyExists - Server DNS Alias already exists on a given server.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/dnsAliases/{dnsAliasName}/acquire?api-version=2021-11-01-preview:
    post:
      tags:
        - ManagedServerDnsAliases
      description: Acquires managed server DNS alias from another managed server.
      operationId: ManagedServerDnsAliases_Acquire
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: dnsAliasName
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedServerDnsAliasAcquisition'
      responses:
        '200':
          description: Successfully acquired managed server DNS alias.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedServerDnsAlias'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidManagedServerDnsAliasAcquireRequest - The acquire managed server DNS alias request body is empty or invalid.

             * 400 ManagedServerDnsAliasAcquireRequestInvalidOldManagedServerDnsAliasResourceId - The old managed server DNS alias id in request body is empty or invalid (it should have the format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/dnsAliases/{dnsAliasName}).

             * 400 ManagedServerDnsAliasAcquireRequestOldManagedServerDnsAliasSubscriptionMismatch - The old managed server DNS subscription id in request body is different than the one in request URI.

             * 400 ManagedServerDnsAliasAcquireRequestOldManagedServerDnsAliasNameMismatch - The old managed server DNS alias name in request body is different than the one in request URI.

             * 400 ServerDnsAliasDoesNotExist - Server DNS Alias does not exist on a server.

             * 400 UnableToTurnOnTableAuditingForDbOnServerWithServerDnsAlias - Server Dns Aliases are not working correctly for database that has Table Auditing turned on

             * 400 UnableToCreateServerDnsAliasDueToTableAuditing - The Server DNS Alias cannot be created for server that has table auditing turned on.

             * 400 UnableToCreateServerDnsAliasDueToTableAuditingForDb - Server DNS Alias cannot be created for server '{0}' because database '{1}' has Table Auditing or Security Enabled Access feature enabled.

             * 400 LimitOfServerDnsAliasesPerServerExceeded - Creating new Server Dns Alias will exceed the allowed number of Server DNS Aliases per server.

             * 400 UnableToTurnOnTableAuditingForServerWithServerDnsAlias - Server Dns Aliases are not working correctly for server that has Table Auditing turned on

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidServerDnsAliasNameForNamedInstance - Invalid Server DNS Alias name was supplied.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidServerDnsAliasName - Invalid Server DNS Alias name was supplied.

             * 400 ServerNotFound - The requested server was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ServerDnsAliasBusy - Server DNS Alias is busy with another operation.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ManagedServerAliasDnsZoneMismatch - Managed Server Alias Dns Zone Mismatch

             * 409 ServerDnsAliasDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 ServerDnsAliasAlreadyExists - Server DNS Alias already exists on a given server.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/advancedThreatProtectionSettings?api-version=2022-02-01-preview:
    get:
      tags:
        - ManagedInstanceAdvancedThreatProtectionSettings
      description: Get the managed instance's Advanced Threat Protection settings.
      operationId: ManagedInstanceAdvancedThreatProtectionSettingsByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the managed instance Advanced Threat Protection states.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceAdvancedThreatProtectionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting the server Advanced Threat Protection settings is not allowed on a server with a paused Data Warehouse database

             * 400 AdvancedThreatProtectionInsufficientDiskSpace - Insufficient disk space to save the Advanced Threat Protection settings metadata in the database

             * 400 InvalidServerAdvancedThreatProtectionCreateRequest - The create server Advanced Threat Protection request does not exist or has no properties object

             * 400 AdvancedThreatProtectionInvalidUserSuppliedParameter - An invalid parameter value was provided by the client

             * 400 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 400 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 409 ServerAdvancedThreatProtectionInProgress - Setting the server Advanced Threat Protection settings is already in progress

             * 409 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 500 GetServerAdvancedThreatProtectionFailed - Failed to get the Advanced Threat Protection settings
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedInstanceAdvancedThreatProtectionSettings_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/advancedThreatProtectionSettings/{advancedThreatProtectionName}?api-version=2022-02-01-preview:
    get:
      tags:
        - ManagedInstanceAdvancedThreatProtectionSettings
      description: Get a managed instance's Advanced Threat Protection state.
      operationId: ManagedInstanceAdvancedThreatProtectionSettings_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: advancedThreatProtectionName
          in: path
          description: The name of the Advanced Threat Protection state.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AdvancedThreatProtectionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the managed instance Advanced Threat Protection state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceAdvancedThreatProtection'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting the server Advanced Threat Protection settings is not allowed on a server with a paused Data Warehouse database

             * 400 AdvancedThreatProtectionInsufficientDiskSpace - Insufficient disk space to save the Advanced Threat Protection settings metadata in the database

             * 400 InvalidServerAdvancedThreatProtectionCreateRequest - The create server Advanced Threat Protection request does not exist or has no properties object

             * 400 AdvancedThreatProtectionInvalidUserSuppliedParameter - An invalid parameter value was provided by the client

             * 400 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 400 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 409 ServerAdvancedThreatProtectionInProgress - Setting the server Advanced Threat Protection settings is already in progress

             * 409 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 500 GetServerAdvancedThreatProtectionFailed - Failed to get the Advanced Threat Protection settings
    put:
      tags:
        - ManagedInstanceAdvancedThreatProtectionSettings
      description: Creates or updates Advanced Threat Protection settings.
      operationId: ManagedInstanceAdvancedThreatProtectionSettings_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: advancedThreatProtectionName
          in: path
          description: The name of the Advanced Threat Protection state.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AdvancedThreatProtectionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The managed instance Advanced Threat Protection state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedInstanceAdvancedThreatProtection'
      responses:
        '200':
          description: Successfully created or updated the Advanced Threat Protection state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceAdvancedThreatProtection'
        '202':
          description: Created request to set the Advanced Threat Protection state.
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnServerContainingPausedDWDatabase - Setting the server Advanced Threat Protection settings is not allowed on a server with a paused Data Warehouse database

             * 400 AdvancedThreatProtectionInsufficientDiskSpace - Insufficient disk space to save the Advanced Threat Protection settings metadata in the database

             * 400 InvalidServerAdvancedThreatProtectionCreateRequest - The create server Advanced Threat Protection request does not exist or has no properties object

             * 400 AdvancedThreatProtectionInvalidUserSuppliedParameter - An invalid parameter value was provided by the client

             * 400 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 400 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 409 ServerAdvancedThreatProtectionInProgress - Setting the server Advanced Threat Protection settings is already in progress

             * 409 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later

             * 500 UpsertServerAdvancedThreatProtectionFailed - An error has occurred while saving the Advanced Threat Protection settings, please try again later
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/distributedAvailabilityGroups?api-version=2021-11-01-preview:
    get:
      tags:
        - DistributedAvailabilityGroups
      description: Gets a list of a distributed availability groups in instance.
      operationId: DistributedAvailabilityGroupsByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of distributed availability groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistributedAvailabilityGroupsListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 InvalidCollation - Invalid collation.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.

             * 400 TokenTooLong - The provided token is too long.

             * 400 ManagedInstanceSloUpdateFailed - SLO '{0}' operation cannot succeed as the memory usage of '{1}' exceeds the quota.

             * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.

             * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.

             * 400 VnetInWrongRegion - Virtual network is in wrong region.

             * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server '{0}', Database '{1}' due to unexpected delay. Please try again.

             * 400 VnetAddressRangeError - Virtual network address range is invalid.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.

             * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.

             * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.

             * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.

             * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.

             * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.

             * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.

             * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.

             * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.

             * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.

             * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.

             * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.

             * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 VnetResourceNotFound - Resource not found: '{0}'.

             * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.

             * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation 'SQL_Latin1_General_CP1_CI_AS'.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.

             * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.

             * 400 InvalidDnsZone - The operation has failed because you are attempting to deploy managed instance as a geo-replication secondary to the subnet {0} in which there already exists a managed instance. Deploying managed instance as a geo-replication secondary is supported only in cases when managed instance is the first instance deployed in a subnet. Consider deploying managed instance as a geo-replication secondary to a different subnet in which there are no existing managed instances, or if deploying to a subnet with existing managed instance disable the geo-replication option.

             * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.

             * 400 InvalidTimezone - Invalid timezone.

             * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.

             * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.

             * 400 ManagedInstanceIpAddressRangeLimit - Cannot perform creation/scaling of the managed instance as there are not enough available IP addresses in the subnet for performing the operation.

             * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.

             * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.

             * 400 UpdateManagedServerWithMaintenanceWindowNotAllowed - Update of Managed Instance with maintenance window settings is not allowed.

             * 400 VnetPrepareNIPFailed - User tried to prepare subnet that has a conflict with NetworkIntentPolicy.

             * 400 ManagedInstanceDeprecatedHardwareFamily - Changing the hardware generation to deprecated {0} generation is not possible.

             * 400 ManagedInstanceBackupStorageTypeNotSupported - Backup storage type parameter is not allowed in the instance update operation.

             * 400 EmptyPDCInvalidDnsZone - This managed instance cannot be deployed because its DNS-zone does not match the DNS-prefix of its intended virtual cluster for subnet {0}. Although this virtual cluster is empty, its DNS-prefix cannot be changed. Empty virtual clusters will be automatically removed after several hours. Consider waiting for this virtual cluster to expire or manually deleting this virtual cluster and then creating the managed instance.

             * 400 MissingIdentityId - No user assigned identity is provided when the identity type is set to UserAssigned

             * 400 InvalidPrimaryIdentityId - User provides a value for PrimaryUserIdentityId but the same is not listed in the IdentityId parameter

             * 400 ManagedInstanceZoneRedudantFeatureNotSupported - ZoneRedundant feature is not supported for the selected service tier. For more details visit aka.ms/sqlmi-service-tier-characteristics.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeEnabled - Enabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeDisabled - Disabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 MissingPrimaryIdentity - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SubnetIdCantBeUpdated - Changing managed instance subnet is not supported operation. Please remove this parameter from the request.

             * 400 MigrationToAnotherVNetNotSupported - Selected subnet is in another Virtual Network. Moving managed instance to another Virtual Network is not possible. Please provide subnet from Virtual Network {0}.

             * 400 MigrationToSubnetWithDifferentDnsZoneNotSupported - Provided subnet is having different DNS zone from the current. Changing instance DNS zone is not supported. Please provide subnet with same DNS zone, create a new subnet or provide empty one.

             * 400 MigrationToGen4SubnetNotSupported - It is not possible to update subnet while running on Gen4 hardware as it is being deprecated. Please upgrade your hardware from Gen4 to Gen5 as part of the changing managed instance subnet operation by specifying both parameters at the same time: destination subnet and hardware generation.

             * 400 PrimaryIdentityMissingPermissionForKeyId - KeyId is provided by user during create but PrimaryUserAssignedIdentityId is not provided in the API call

             * 400 InvalidIdentityTypeForKeyId - KeyId is provided by user during create but identity type is not set to 'UserAssigned'

             * 400 ServerNotFound - The requested server was not found.

             * 400 ManagedInstanceFileExceededMaxAzureStorageFileSizeLimit - The operation could not be completed because some of the database files are exceeding maximum General Purpose file size limit of {0} GB.

             * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough capacity

             * 400 SourceAndTargetSubnetsMustBeVnetPeered - Subnet currently used by managed instance and provided destination subnet are part of the virtual networks that are not connected with virtual network peering, or have peering established but don't have allowed traffic. In order to move managed instance from one subnet to another, virtual network peering needs to be established from both source and target virtual network. Please configure virtual network requirements and then try the operation again. Learn more https://docs.microsoft.com/en-us/azure/virtual-network/tutorial-connect-virtual-networks-portal#peer-virtual-networks. 

             * 400 ManagedInstanceAndSubnetAreNotOnTheSameSubscription - Subnet provided for managed instance deployment is located on subscription different than the one submitted for managed instance. Managed instance and subnet used for deploying the instance must be on the same subscription. Please provide another subnet or switch to the subnet subscription and then try the operation again.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 PasswordTooShort - The provided password is too short

             * 400 PasswordTooLong - The provided password is too long.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 GatewayInvalidEdition - '{0}' is not a valid database edition in this version of SQL Server.

             * 400 InvalidLocation - An invalid location was specified.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidServerName - Invalid server name specified.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InstancePoolNotFound - An instance pool cannot be found

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.

             * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.

             * 405 InvalidStorageSizeValue - "Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerOverridePreconditionFailed - Failed to apply server override on category '{0}', because physical db or instance '{1}' in server '{2}' is currently not in 'Ready' or 'Deactivated' state.

             * 409 ManagedInstanceIsBusy - The server '{0}' is currently busy.  Please wait a few minutes before trying again.

             * 409 ServerAlreadyExists - Duplicate server name.

             * 409 ServerDisabled - Server is disabled.

             * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 GatewayInternalServerError - The server encountered an unexpected exception.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: DistributedAvailabilityGroups_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/distributedAvailabilityGroups/{distributedAvailabilityGroupName}?api-version=2021-11-01-preview:
    get:
      tags:
        - DistributedAvailabilityGroups
      description: Gets a distributed availability group info.
      operationId: DistributedAvailabilityGroups_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: distributedAvailabilityGroupName
          in: path
          description: The distributed availability group name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the distributed availability group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistributedAvailabilityGroup'
        default:
          description: |-
            *** Error Responses: ***

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 InvalidCollation - Invalid collation.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.

             * 400 TokenTooLong - The provided token is too long.

             * 400 ManagedInstanceSloUpdateFailed - SLO '{0}' operation cannot succeed as the memory usage of '{1}' exceeds the quota.

             * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.

             * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.

             * 400 VnetInWrongRegion - Virtual network is in wrong region.

             * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server '{0}', Database '{1}' due to unexpected delay. Please try again.

             * 400 VnetAddressRangeError - Virtual network address range is invalid.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.

             * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.

             * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.

             * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.

             * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.

             * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.

             * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.

             * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.

             * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.

             * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.

             * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.

             * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.

             * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 VnetResourceNotFound - Resource not found: '{0}'.

             * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.

             * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation 'SQL_Latin1_General_CP1_CI_AS'.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.

             * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.

             * 400 InvalidDnsZone - The operation has failed because you are attempting to deploy managed instance as a geo-replication secondary to the subnet {0} in which there already exists a managed instance. Deploying managed instance as a geo-replication secondary is supported only in cases when managed instance is the first instance deployed in a subnet. Consider deploying managed instance as a geo-replication secondary to a different subnet in which there are no existing managed instances, or if deploying to a subnet with existing managed instance disable the geo-replication option.

             * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.

             * 400 InvalidTimezone - Invalid timezone.

             * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.

             * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.

             * 400 ManagedInstanceIpAddressRangeLimit - Cannot perform creation/scaling of the managed instance as there are not enough available IP addresses in the subnet for performing the operation.

             * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.

             * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.

             * 400 UpdateManagedServerWithMaintenanceWindowNotAllowed - Update of Managed Instance with maintenance window settings is not allowed.

             * 400 VnetPrepareNIPFailed - User tried to prepare subnet that has a conflict with NetworkIntentPolicy.

             * 400 ManagedInstanceDeprecatedHardwareFamily - Changing the hardware generation to deprecated {0} generation is not possible.

             * 400 ManagedInstanceBackupStorageTypeNotSupported - Backup storage type parameter is not allowed in the instance update operation.

             * 400 EmptyPDCInvalidDnsZone - This managed instance cannot be deployed because its DNS-zone does not match the DNS-prefix of its intended virtual cluster for subnet {0}. Although this virtual cluster is empty, its DNS-prefix cannot be changed. Empty virtual clusters will be automatically removed after several hours. Consider waiting for this virtual cluster to expire or manually deleting this virtual cluster and then creating the managed instance.

             * 400 MissingIdentityId - No user assigned identity is provided when the identity type is set to UserAssigned

             * 400 InvalidPrimaryIdentityId - User provides a value for PrimaryUserIdentityId but the same is not listed in the IdentityId parameter

             * 400 ManagedInstanceZoneRedudantFeatureNotSupported - ZoneRedundant feature is not supported for the selected service tier. For more details visit aka.ms/sqlmi-service-tier-characteristics.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeEnabled - Enabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeDisabled - Disabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 MissingPrimaryIdentity - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SubnetIdCantBeUpdated - Changing managed instance subnet is not supported operation. Please remove this parameter from the request.

             * 400 MigrationToAnotherVNetNotSupported - Selected subnet is in another Virtual Network. Moving managed instance to another Virtual Network is not possible. Please provide subnet from Virtual Network {0}.

             * 400 MigrationToSubnetWithDifferentDnsZoneNotSupported - Provided subnet is having different DNS zone from the current. Changing instance DNS zone is not supported. Please provide subnet with same DNS zone, create a new subnet or provide empty one.

             * 400 MigrationToGen4SubnetNotSupported - It is not possible to update subnet while running on Gen4 hardware as it is being deprecated. Please upgrade your hardware from Gen4 to Gen5 as part of the changing managed instance subnet operation by specifying both parameters at the same time: destination subnet and hardware generation.

             * 400 PrimaryIdentityMissingPermissionForKeyId - KeyId is provided by user during create but PrimaryUserAssignedIdentityId is not provided in the API call

             * 400 InvalidIdentityTypeForKeyId - KeyId is provided by user during create but identity type is not set to 'UserAssigned'

             * 400 ServerNotFound - The requested server was not found.

             * 400 ManagedInstanceFileExceededMaxAzureStorageFileSizeLimit - The operation could not be completed because some of the database files are exceeding maximum General Purpose file size limit of {0} GB.

             * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough capacity

             * 400 SourceAndTargetSubnetsMustBeVnetPeered - Subnet currently used by managed instance and provided destination subnet are part of the virtual networks that are not connected with virtual network peering, or have peering established but don't have allowed traffic. In order to move managed instance from one subnet to another, virtual network peering needs to be established from both source and target virtual network. Please configure virtual network requirements and then try the operation again. Learn more https://docs.microsoft.com/en-us/azure/virtual-network/tutorial-connect-virtual-networks-portal#peer-virtual-networks. 

             * 400 ManagedInstanceAndSubnetAreNotOnTheSameSubscription - Subnet provided for managed instance deployment is located on subscription different than the one submitted for managed instance. Managed instance and subnet used for deploying the instance must be on the same subscription. Please provide another subnet or switch to the subnet subscription and then try the operation again.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 PasswordTooShort - The provided password is too short

             * 400 PasswordTooLong - The provided password is too long.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 GatewayInvalidEdition - '{0}' is not a valid database edition in this version of SQL Server.

             * 400 InvalidLocation - An invalid location was specified.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidServerName - Invalid server name specified.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InstancePoolNotFound - An instance pool cannot be found

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.

             * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.

             * 405 InvalidStorageSizeValue - "Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerOverridePreconditionFailed - Failed to apply server override on category '{0}', because physical db or instance '{1}' in server '{2}' is currently not in 'Ready' or 'Deactivated' state.

             * 409 ManagedInstanceIsBusy - The server '{0}' is currently busy.  Please wait a few minutes before trying again.

             * 409 ServerAlreadyExists - Duplicate server name.

             * 409 ServerDisabled - Server is disabled.

             * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 GatewayInternalServerError - The server encountered an unexpected exception.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
    put:
      tags:
        - DistributedAvailabilityGroups
      description: Creates a distributed availability group between Sql On-Prem and Sql Managed Instance.
      operationId: DistributedAvailabilityGroups_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: distributedAvailabilityGroupName
          in: path
          description: The distributed availability group name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The distributed availability group info.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistributedAvailabilityGroup'
      responses:
        '200':
          description: Distributed availability group is already created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistributedAvailabilityGroup'
        '201':
          description: Successfully created the distributed availability group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistributedAvailabilityGroup'
        '202':
          description: Accepted request for creating the distributed availability group.
        default:
          description: |-
            *** Error Responses: ***

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 InvalidCollation - Invalid collation.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.

             * 400 TokenTooLong - The provided token is too long.

             * 400 ManagedInstanceSloUpdateFailed - SLO '{0}' operation cannot succeed as the memory usage of '{1}' exceeds the quota.

             * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.

             * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.

             * 400 VnetInWrongRegion - Virtual network is in wrong region.

             * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server '{0}', Database '{1}' due to unexpected delay. Please try again.

             * 400 VnetAddressRangeError - Virtual network address range is invalid.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.

             * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.

             * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.

             * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.

             * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.

             * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.

             * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.

             * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.

             * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.

             * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.

             * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.

             * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.

             * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 VnetResourceNotFound - Resource not found: '{0}'.

             * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.

             * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation 'SQL_Latin1_General_CP1_CI_AS'.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.

             * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.

             * 400 InvalidDnsZone - The operation has failed because you are attempting to deploy managed instance as a geo-replication secondary to the subnet {0} in which there already exists a managed instance. Deploying managed instance as a geo-replication secondary is supported only in cases when managed instance is the first instance deployed in a subnet. Consider deploying managed instance as a geo-replication secondary to a different subnet in which there are no existing managed instances, or if deploying to a subnet with existing managed instance disable the geo-replication option.

             * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.

             * 400 InvalidTimezone - Invalid timezone.

             * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.

             * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.

             * 400 ManagedInstanceIpAddressRangeLimit - Cannot perform creation/scaling of the managed instance as there are not enough available IP addresses in the subnet for performing the operation.

             * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.

             * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.

             * 400 UpdateManagedServerWithMaintenanceWindowNotAllowed - Update of Managed Instance with maintenance window settings is not allowed.

             * 400 VnetPrepareNIPFailed - User tried to prepare subnet that has a conflict with NetworkIntentPolicy.

             * 400 ManagedInstanceDeprecatedHardwareFamily - Changing the hardware generation to deprecated {0} generation is not possible.

             * 400 ManagedInstanceBackupStorageTypeNotSupported - Backup storage type parameter is not allowed in the instance update operation.

             * 400 EmptyPDCInvalidDnsZone - This managed instance cannot be deployed because its DNS-zone does not match the DNS-prefix of its intended virtual cluster for subnet {0}. Although this virtual cluster is empty, its DNS-prefix cannot be changed. Empty virtual clusters will be automatically removed after several hours. Consider waiting for this virtual cluster to expire or manually deleting this virtual cluster and then creating the managed instance.

             * 400 MissingIdentityId - No user assigned identity is provided when the identity type is set to UserAssigned

             * 400 InvalidPrimaryIdentityId - User provides a value for PrimaryUserIdentityId but the same is not listed in the IdentityId parameter

             * 400 ManagedInstanceZoneRedudantFeatureNotSupported - ZoneRedundant feature is not supported for the selected service tier. For more details visit aka.ms/sqlmi-service-tier-characteristics.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeEnabled - Enabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeDisabled - Disabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 MissingPrimaryIdentity - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SubnetIdCantBeUpdated - Changing managed instance subnet is not supported operation. Please remove this parameter from the request.

             * 400 MigrationToAnotherVNetNotSupported - Selected subnet is in another Virtual Network. Moving managed instance to another Virtual Network is not possible. Please provide subnet from Virtual Network {0}.

             * 400 MigrationToSubnetWithDifferentDnsZoneNotSupported - Provided subnet is having different DNS zone from the current. Changing instance DNS zone is not supported. Please provide subnet with same DNS zone, create a new subnet or provide empty one.

             * 400 MigrationToGen4SubnetNotSupported - It is not possible to update subnet while running on Gen4 hardware as it is being deprecated. Please upgrade your hardware from Gen4 to Gen5 as part of the changing managed instance subnet operation by specifying both parameters at the same time: destination subnet and hardware generation.

             * 400 PrimaryIdentityMissingPermissionForKeyId - KeyId is provided by user during create but PrimaryUserAssignedIdentityId is not provided in the API call

             * 400 InvalidIdentityTypeForKeyId - KeyId is provided by user during create but identity type is not set to 'UserAssigned'

             * 400 ServerNotFound - The requested server was not found.

             * 400 ManagedInstanceFileExceededMaxAzureStorageFileSizeLimit - The operation could not be completed because some of the database files are exceeding maximum General Purpose file size limit of {0} GB.

             * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough capacity

             * 400 SourceAndTargetSubnetsMustBeVnetPeered - Subnet currently used by managed instance and provided destination subnet are part of the virtual networks that are not connected with virtual network peering, or have peering established but don't have allowed traffic. In order to move managed instance from one subnet to another, virtual network peering needs to be established from both source and target virtual network. Please configure virtual network requirements and then try the operation again. Learn more https://docs.microsoft.com/en-us/azure/virtual-network/tutorial-connect-virtual-networks-portal#peer-virtual-networks. 

             * 400 ManagedInstanceAndSubnetAreNotOnTheSameSubscription - Subnet provided for managed instance deployment is located on subscription different than the one submitted for managed instance. Managed instance and subnet used for deploying the instance must be on the same subscription. Please provide another subnet or switch to the subnet subscription and then try the operation again.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 PasswordTooShort - The provided password is too short

             * 400 PasswordTooLong - The provided password is too long.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 GatewayInvalidEdition - '{0}' is not a valid database edition in this version of SQL Server.

             * 400 InvalidLocation - An invalid location was specified.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 PitrPointInTimeInvalid - The point in time {0} is not valid. Valid point in time range from {1} days early to now and not before source server creation time.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 ManagedDatabaseNameInUse - Database '{0}' already exists. Choose a different database name.

             * 400 NoMoreSpaceInManagedInstance - The managed instance has reached its storage limit. The storage usage for the managed instance cannot exceed (%d) MBs.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 TokenTooLong - The provided token is too long.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 ServerNotFound - The requested server was not found.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 DatabaseNumberLimitReached - Maximum number of databases for SQL Database Managed Instance reached.

             * 400 ManagedInstanceLinkSourceDbHasHekatonFile - Memory-optimized filegroup must be empty on the SQL Server source database when replicated to Azure SQL Managed Instance General Purpose service tier. Consider emptying the memory optimized filegroup on the source database and try again. Alternatively consider using Managed Instance Business Critical service tier without making any changes.

             * 400 ManagedInstanceLinkSourceDbHasMultipleLogFiles - Source database on SQL Server needs to have a single log file instead of multiple log files for data replication to Azure SQL Managed Instance. Consider using a single log file on the source database and try again.

             * 400 ManagedInstanceLinkUnsupportedNumberOfFilesOnSourceDb - Maximum number of '{0}' files was reached on Azure SQL Managed Instance preventing data replication. Consider reducing the number of files on the source and try again.

             * 400 ManagedInstanceLinkSourceDbHasFilestream - Source database on SQL Server must not use FileStream or FileTables for data replication to Azure SQL Managed Instance. Consider removing FileStream and FileTables on the source database on SQL Server and try again.

             * 400 ManagedInstanceLinkSourceDbHasDefunctFiles - Source database '{0}' on SQL Server must not contain files in DEFUNCT state for data replication to Azure SQL Managed Instance to work.

             * 400 ManagedInstanceLinkForProvidedAvailabilityGroupsAlreadyExists - It is not possible to add an additional database to an existing Managed Instance link as a single link can contain only one database. Please use a different distributed availability group name and try again.

             * 400 ManagedInstanceLinkIsNotFound - The link with Managed Instance was not successfully created or was deleted before data copy operation has completed.

             * 400 ManagedInstanceLinkIsNotInTheCatchupState - The link with Managed Instance is not in the catchup state after the data copy link operation completed.

             * 400 StorageAccountFull - Managed Instance has reached the total capacity of underlying Azure storage account. Azure Premium Storage account is limited to 35TB of allocated space.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InstancePoolNotFound - An instance pool cannot be found

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 CannotFindServerCertificateWithThumbprint - Cannot find server certificate with thumbprint '{0}'. Please use PowerShell Cmdlet 'Add-AzureRmSqlManagedInstanceTransparentDataEncryptionCertificate' to create the certificate.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 RestoreSourceDatabaseNotFound - Could not find database '{0}' at time '{1}' that can be restored.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.

             * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.

             * 405 InvalidStorageSizeValue - "Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerOverridePreconditionFailed - Failed to apply server override on category '{0}', because physical db or instance '{1}' in server '{2}' is currently not in 'Ready' or 'Deactivated' state.

             * 409 ManagedInstanceIsBusy - The server '{0}' is currently busy.  Please wait a few minutes before trying again.

             * 409 ServerAlreadyExists - Duplicate server name.

             * 409 ServerDisabled - Server is disabled.

             * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 GatewayInternalServerError - The server encountered an unexpected exception.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    delete:
      tags:
        - DistributedAvailabilityGroups
      description: Drops a distributed availability group between Sql On-Prem and Sql Managed Instance.
      operationId: DistributedAvailabilityGroups_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: distributedAvailabilityGroupName
          in: path
          description: The distributed availability group name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted distributed availability group.
        '202':
          description: Accepted request for deleting the distributed availability group.
        '204':
          description: Distributed availability group was not found.
        default:
          description: |-
            *** Error Responses: ***

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 InvalidCollation - Invalid collation.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.

             * 400 TokenTooLong - The provided token is too long.

             * 400 ManagedInstanceSloUpdateFailed - SLO '{0}' operation cannot succeed as the memory usage of '{1}' exceeds the quota.

             * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.

             * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.

             * 400 VnetInWrongRegion - Virtual network is in wrong region.

             * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server '{0}', Database '{1}' due to unexpected delay. Please try again.

             * 400 VnetAddressRangeError - Virtual network address range is invalid.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.

             * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.

             * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.

             * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.

             * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.

             * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.

             * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.

             * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.

             * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.

             * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.

             * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.

             * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.

             * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 VnetResourceNotFound - Resource not found: '{0}'.

             * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.

             * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation 'SQL_Latin1_General_CP1_CI_AS'.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.

             * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.

             * 400 InvalidDnsZone - The operation has failed because you are attempting to deploy managed instance as a geo-replication secondary to the subnet {0} in which there already exists a managed instance. Deploying managed instance as a geo-replication secondary is supported only in cases when managed instance is the first instance deployed in a subnet. Consider deploying managed instance as a geo-replication secondary to a different subnet in which there are no existing managed instances, or if deploying to a subnet with existing managed instance disable the geo-replication option.

             * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.

             * 400 InvalidTimezone - Invalid timezone.

             * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.

             * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.

             * 400 ManagedInstanceIpAddressRangeLimit - Cannot perform creation/scaling of the managed instance as there are not enough available IP addresses in the subnet for performing the operation.

             * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.

             * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.

             * 400 UpdateManagedServerWithMaintenanceWindowNotAllowed - Update of Managed Instance with maintenance window settings is not allowed.

             * 400 VnetPrepareNIPFailed - User tried to prepare subnet that has a conflict with NetworkIntentPolicy.

             * 400 ManagedInstanceDeprecatedHardwareFamily - Changing the hardware generation to deprecated {0} generation is not possible.

             * 400 ManagedInstanceBackupStorageTypeNotSupported - Backup storage type parameter is not allowed in the instance update operation.

             * 400 EmptyPDCInvalidDnsZone - This managed instance cannot be deployed because its DNS-zone does not match the DNS-prefix of its intended virtual cluster for subnet {0}. Although this virtual cluster is empty, its DNS-prefix cannot be changed. Empty virtual clusters will be automatically removed after several hours. Consider waiting for this virtual cluster to expire or manually deleting this virtual cluster and then creating the managed instance.

             * 400 MissingIdentityId - No user assigned identity is provided when the identity type is set to UserAssigned

             * 400 InvalidPrimaryIdentityId - User provides a value for PrimaryUserIdentityId but the same is not listed in the IdentityId parameter

             * 400 ManagedInstanceZoneRedudantFeatureNotSupported - ZoneRedundant feature is not supported for the selected service tier. For more details visit aka.ms/sqlmi-service-tier-characteristics.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeEnabled - Enabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeDisabled - Disabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 MissingPrimaryIdentity - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SubnetIdCantBeUpdated - Changing managed instance subnet is not supported operation. Please remove this parameter from the request.

             * 400 MigrationToAnotherVNetNotSupported - Selected subnet is in another Virtual Network. Moving managed instance to another Virtual Network is not possible. Please provide subnet from Virtual Network {0}.

             * 400 MigrationToSubnetWithDifferentDnsZoneNotSupported - Provided subnet is having different DNS zone from the current. Changing instance DNS zone is not supported. Please provide subnet with same DNS zone, create a new subnet or provide empty one.

             * 400 MigrationToGen4SubnetNotSupported - It is not possible to update subnet while running on Gen4 hardware as it is being deprecated. Please upgrade your hardware from Gen4 to Gen5 as part of the changing managed instance subnet operation by specifying both parameters at the same time: destination subnet and hardware generation.

             * 400 PrimaryIdentityMissingPermissionForKeyId - KeyId is provided by user during create but PrimaryUserAssignedIdentityId is not provided in the API call

             * 400 InvalidIdentityTypeForKeyId - KeyId is provided by user during create but identity type is not set to 'UserAssigned'

             * 400 ServerNotFound - The requested server was not found.

             * 400 ManagedInstanceFileExceededMaxAzureStorageFileSizeLimit - The operation could not be completed because some of the database files are exceeding maximum General Purpose file size limit of {0} GB.

             * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough capacity

             * 400 SourceAndTargetSubnetsMustBeVnetPeered - Subnet currently used by managed instance and provided destination subnet are part of the virtual networks that are not connected with virtual network peering, or have peering established but don't have allowed traffic. In order to move managed instance from one subnet to another, virtual network peering needs to be established from both source and target virtual network. Please configure virtual network requirements and then try the operation again. Learn more https://docs.microsoft.com/en-us/azure/virtual-network/tutorial-connect-virtual-networks-portal#peer-virtual-networks. 

             * 400 ManagedInstanceAndSubnetAreNotOnTheSameSubscription - Subnet provided for managed instance deployment is located on subscription different than the one submitted for managed instance. Managed instance and subnet used for deploying the instance must be on the same subscription. Please provide another subnet or switch to the subnet subscription and then try the operation again.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 PasswordTooShort - The provided password is too short

             * 400 PasswordTooLong - The provided password is too long.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 GatewayInvalidEdition - '{0}' is not a valid database edition in this version of SQL Server.

             * 400 InvalidLocation - An invalid location was specified.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 PitrPointInTimeInvalid - The point in time {0} is not valid. Valid point in time range from {1} days early to now and not before source server creation time.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 ManagedDatabaseNameInUse - Database '{0}' already exists. Choose a different database name.

             * 400 NoMoreSpaceInManagedInstance - The managed instance has reached its storage limit. The storage usage for the managed instance cannot exceed (%d) MBs.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 TokenTooLong - The provided token is too long.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 ServerNotFound - The requested server was not found.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 DatabaseNumberLimitReached - Maximum number of databases for SQL Database Managed Instance reached.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InstancePoolNotFound - An instance pool cannot be found

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 CannotFindServerCertificateWithThumbprint - Cannot find server certificate with thumbprint '{0}'. Please use PowerShell Cmdlet 'Add-AzureRmSqlManagedInstanceTransparentDataEncryptionCertificate' to create the certificate.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 RestoreSourceDatabaseNotFound - Could not find database '{0}' at time '{1}' that can be restored.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.

             * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.

             * 405 InvalidStorageSizeValue - "Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerOverridePreconditionFailed - Failed to apply server override on category '{0}', because physical db or instance '{1}' in server '{2}' is currently not in 'Ready' or 'Deactivated' state.

             * 409 ManagedInstanceIsBusy - The server '{0}' is currently busy.  Please wait a few minutes before trying again.

             * 409 ServerAlreadyExists - Duplicate server name.

             * 409 ServerDisabled - Server is disabled.

             * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 GatewayInternalServerError - The server encountered an unexpected exception.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    patch:
      tags:
        - DistributedAvailabilityGroups
      description: Updates a distributed availability group replication mode.
      operationId: DistributedAvailabilityGroups_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: distributedAvailabilityGroupName
          in: path
          description: The distributed availability group name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The distributed availability group info.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DistributedAvailabilityGroup'
      responses:
        '200':
          description: Successfully initiated the distributed availability group replication mode update.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DistributedAvailabilityGroup'
        '202':
          description: Accepted request for updating the distributed availability group replication mode.
        default:
          description: |-
            *** Error Responses: ***

             * 400 NameAlreadyExists - The provided name already exists.

             * 400 InvalidCollation - Invalid collation.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 HkCannotSwitchToInactive - The database cannot proceed with pricing-tier update as it has memory-optimized objects. Please drop such objects and try again.

             * 400 TokenTooLong - The provided token is too long.

             * 400 ManagedInstanceSloUpdateFailed - SLO '{0}' operation cannot succeed as the memory usage of '{1}' exceeds the quota.

             * 400 ManagedInstanceLocalStorageUpdateSloDisabled - Update SLO for managed instances with local storage is not supported yet.

             * 400 InvalidSubnetResourceId - The provided subnet resource ID for the managed instance create or update is invalid.

             * 400 VnetInWrongRegion - Virtual network is in wrong region.

             * 400 AlterDbDeactivatedNotSupported - Database Operation failed for Server '{0}', Database '{1}' due to unexpected delay. Please try again.

             * 400 VnetAddressRangeError - Virtual network address range is invalid.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 VnetConfigIsNotAllowed - Virtual network configuration is not allowed.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 ManagedInstanceClassicVnetNotSupported - Managed Instance cannot be joined to a classic virtual network.

             * 400 VnetConfigHasNsg - User tried to inject Managed Server subnet with Network Security Groups.

             * 400 VnetConfigHasNoUdr - User tried to inject Managed Server subnet without default User Defined Route Table.

             * 400 VnetConfigHasInvalidUdr - User tried to inject Managed Server subnet with invalid User Defined Route Table.

             * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.

             * 400 VnetConfigHasServiceEndpoints - User tried to inject Managed Server subnet with service endpoints.

             * 400 VnetSubnetIsInUse - User tried to inject Managed Server subnet that is not empty.

             * 400 VnetSubnetIsLocked - User tried to inject Managed Server subnet that is in locked scope.

             * 400 VnetSubnetIsGateway - User tried to inject Managed Server subnet that is Gateway subnet.

             * 400 VnetSubnetIsUnknown - User tried to inject Managed Server subnet that does not exist.

             * 400 VnetSubnetConflictWithIntendedPolicy - User tried to inject Managed Server subnet that has a conflict with IntendedPolicy.

             * 400 ManagedInstanceInvalidEditionForSku - The specified edition {0} is not consistent with the specified SKU {1}.

             * 400 ManagedInstanceInvalidLicenseType - The specified license type {0} is not valid.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 VnetResourceNotFound - Resource not found: '{0}'.

             * 400 InstanceCollationUpdateNotSupported - User cannot change instance collation on Managed Instance.

             * 400 CreateManagedInstanceWithNonDefaultCollationNotSupported - User can create a Managed Instance only with collation 'SQL_Latin1_General_CP1_CI_AS'.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 ManagedInstanceExceedMaxAzureStorage - The operation could not be completed because total allocated storage size for General Purpose instance would exceed {0}. Please reduce the number of database files and retry operation.

             * 400 ManagedInstanceHasGeoReplica - The operation could not be completed because instance has configured geo replicated secondary instance.

             * 400 InvalidDnsZone - The operation has failed because you are attempting to deploy managed instance as a geo-replication secondary to the subnet {0} in which there already exists a managed instance. Deploying managed instance as a geo-replication secondary is supported only in cases when managed instance is the first instance deployed in a subnet. Consider deploying managed instance as a geo-replication secondary to a different subnet in which there are no existing managed instances, or if deploying to a subnet with existing managed instance disable the geo-replication option.

             * 400 ManagedInstanceInvalidStorageSizeLessThenCurrentSizeUsed - Invalid storage size: Storage size limit ({0} GB) is less that current storage used ({1} GB). Please specify higher storage size limit.

             * 400 InvalidTimezone - Invalid timezone.

             * 400 InstanceTimezoneUpdateNotSupported - Instance timezone update not supported.

             * 400 CreateManagedInstanceWithNonDefaultTimezoneNotSupported - Create Managed Instance with non-default timezone not supported.

             * 400 ManagedInstanceIpAddressRangeLimit - Cannot perform creation/scaling of the managed instance as there are not enough available IP addresses in the subnet for performing the operation.

             * 400 VnetDelegationNotAllowed - User tried to inject Managed Server to subnet which is delegated.

             * 400 SubnetHasResourcesOfDifferentType - User tried to create MI in subnet that has resources of different type.

             * 400 UpdateManagedServerWithMaintenanceWindowNotAllowed - Update of Managed Instance with maintenance window settings is not allowed.

             * 400 VnetPrepareNIPFailed - User tried to prepare subnet that has a conflict with NetworkIntentPolicy.

             * 400 ManagedInstanceDeprecatedHardwareFamily - Changing the hardware generation to deprecated {0} generation is not possible.

             * 400 ManagedInstanceBackupStorageTypeNotSupported - Backup storage type parameter is not allowed in the instance update operation.

             * 400 EmptyPDCInvalidDnsZone - This managed instance cannot be deployed because its DNS-zone does not match the DNS-prefix of its intended virtual cluster for subnet {0}. Although this virtual cluster is empty, its DNS-prefix cannot be changed. Empty virtual clusters will be automatically removed after several hours. Consider waiting for this virtual cluster to expire or manually deleting this virtual cluster and then creating the managed instance.

             * 400 MissingIdentityId - No user assigned identity is provided when the identity type is set to UserAssigned

             * 400 InvalidPrimaryIdentityId - User provides a value for PrimaryUserIdentityId but the same is not listed in the IdentityId parameter

             * 400 ManagedInstanceZoneRedudantFeatureNotSupported - ZoneRedundant feature is not supported for the selected service tier. For more details visit aka.ms/sqlmi-service-tier-characteristics.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeEnabled - Enabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 ManagedInstanceZoneRedudantFeatureCantBeDisabled - Disabling zoneRedundant feature is not possible once managed instance is created. For more details visit aka.ms/sqlmi-high-availability.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 MissingPrimaryIdentity - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SubnetIdCantBeUpdated - Changing managed instance subnet is not supported operation. Please remove this parameter from the request.

             * 400 MigrationToAnotherVNetNotSupported - Selected subnet is in another Virtual Network. Moving managed instance to another Virtual Network is not possible. Please provide subnet from Virtual Network {0}.

             * 400 MigrationToSubnetWithDifferentDnsZoneNotSupported - Provided subnet is having different DNS zone from the current. Changing instance DNS zone is not supported. Please provide subnet with same DNS zone, create a new subnet or provide empty one.

             * 400 MigrationToGen4SubnetNotSupported - It is not possible to update subnet while running on Gen4 hardware as it is being deprecated. Please upgrade your hardware from Gen4 to Gen5 as part of the changing managed instance subnet operation by specifying both parameters at the same time: destination subnet and hardware generation.

             * 400 PrimaryIdentityMissingPermissionForKeyId - KeyId is provided by user during create but PrimaryUserAssignedIdentityId is not provided in the API call

             * 400 InvalidIdentityTypeForKeyId - KeyId is provided by user during create but identity type is not set to 'UserAssigned'

             * 400 ServerNotFound - The requested server was not found.

             * 400 ManagedInstanceFileExceededMaxAzureStorageFileSizeLimit - The operation could not be completed because some of the database files are exceeding maximum General Purpose file size limit of {0} GB.

             * 400 InstancePoolNotEnoughCapacity - An instance pool does not have enough capacity

             * 400 SourceAndTargetSubnetsMustBeVnetPeered - Subnet currently used by managed instance and provided destination subnet are part of the virtual networks that are not connected with virtual network peering, or have peering established but don't have allowed traffic. In order to move managed instance from one subnet to another, virtual network peering needs to be established from both source and target virtual network. Please configure virtual network requirements and then try the operation again. Learn more https://docs.microsoft.com/en-us/azure/virtual-network/tutorial-connect-virtual-networks-portal#peer-virtual-networks. 

             * 400 ManagedInstanceAndSubnetAreNotOnTheSameSubscription - Subnet provided for managed instance deployment is located on subscription different than the one submitted for managed instance. Managed instance and subnet used for deploying the instance must be on the same subscription. Please provide another subnet or switch to the subnet subscription and then try the operation again.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidLoginName - The provided login name is invalid.

             * 400 InvalidUsername - Supplied user name contains invalid characters.

             * 400 PasswordTooShort - The provided password is too short

             * 400 PasswordTooLong - The provided password is too long.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 GatewayInvalidEdition - '{0}' is not a valid database edition in this version of SQL Server.

             * 400 InvalidLocation - An invalid location was specified.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 PitrPointInTimeInvalid - The point in time {0} is not valid. Valid point in time range from {1} days early to now and not before source server creation time.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 ManagedDatabaseNameInUse - Database '{0}' already exists. Choose a different database name.

             * 400 NoMoreSpaceInManagedInstance - The managed instance has reached its storage limit. The storage usage for the managed instance cannot exceed (%d) MBs.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 TokenTooLong - The provided token is too long.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 ServerNotFound - The requested server was not found.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 DatabaseNumberLimitReached - Maximum number of databases for SQL Database Managed Instance reached.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 InstancePoolNotFound - An instance pool cannot be found

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 CannotFindServerCertificateWithThumbprint - Cannot find server certificate with thumbprint '{0}'. Please use PowerShell Cmdlet 'Add-AzureRmSqlManagedInstanceTransparentDataEncryptionCertificate' to create the certificate.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 RestoreSourceDatabaseNotFound - Could not find database '{0}' at time '{1}' that can be restored.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 405 InvalidVcoreValue - vCore value {0} is not valid. Please specify a valid vCore value.

             * 405 InvalidHardwareGenerationValue - HardwareGeneration {0} is not valid. Please specify a valid HardwareGeneration value.

             * 405 InvalidStorageSizeValue - "Invalid storage size: {0} GB. Storage size must be specified between {1} and {2} gigabytes, in increments of {3} GB.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ServerOverridePreconditionFailed - Failed to apply server override on category '{0}', because physical db or instance '{1}' in server '{2}' is currently not in 'Ready' or 'Deactivated' state.

             * 409 ManagedInstanceIsBusy - The server '{0}' is currently busy.  Please wait a few minutes before trying again.

             * 409 ServerAlreadyExists - Duplicate server name.

             * 409 ServerDisabled - Server is disabled.

             * 409 ServerQuotaExceeded - Server cannot be added to a subscription because it will exceed quota.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 GatewayInternalServerError - The server encountered an unexpected exception.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps?api-version=2020-11-01-preview:
    get:
      tags:
        - JobStepExecutions
      description: Lists the step executions of a job execution.
      operationId: JobStepExecutions_ListByJobExecution
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to get.
          required: true
          schema:
            type: string
        - name: jobExecutionId
          in: path
          description: The id of the job execution
          required: true
          schema:
            format: uuid
            type: string
        - name: createTimeMin
          in: query
          description: If specified, only job executions created at or after the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: createTimeMax
          in: query
          description: If specified, only job executions created before the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: endTimeMin
          in: query
          description: If specified, only job executions completed at or after the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: endTimeMax
          in: query
          description: If specified, only job executions completed before the specified time are included.
          required: false
          schema:
            format: date-time
            type: string
        - name: isActive
          in: query
          description: If specified, only active or only completed job executions are included.
          required: false
          schema:
            type: boolean
        - name: $skip
          in: query
          description: The number of elements in the collection to skip.
          required: false
          schema:
            type: integer
        - name: $top
          in: query
          description: The number of elements to return from the collection.
          required: false
          schema:
            type: integer
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the step executions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecutionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/executions/{jobExecutionId}/steps/{stepName}?api-version=2020-11-01-preview:
    get:
      tags:
        - JobStepExecutions
      description: Gets a step execution of a job execution.
      operationId: JobStepExecutions_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to get.
          required: true
          schema:
            type: string
        - name: jobExecutionId
          in: path
          description: The unique id of the job execution
          required: true
          schema:
            format: uuid
            type: string
        - name: stepName
          in: path
          description: The name of the step.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the step execution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobExecution'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/privateEndpoints?api-version=2023-05-01-preview:
    get:
      tags:
        - JobPrivateEndpoints
      description: Gets a list of job agent private endpoints.
      operationId: JobPrivateEndpoints_ListByAgent
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of private endpoints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPrivateEndpointListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 409 ServerDisabled - Server is disabled.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/privateEndpoints/{privateEndpointName}?api-version=2023-05-01-preview:
    get:
      tags:
        - JobPrivateEndpoints
      description: Gets a private endpoint.
      operationId: JobPrivateEndpoints_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: privateEndpointName
          in: path
          description: The name of the private endpoint to get.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the private endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPrivateEndpoint'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 ServerDisabled - Server is disabled.
    put:
      tags:
        - JobPrivateEndpoints
      description: Creates or updates a private endpoint.
      operationId: JobPrivateEndpoints_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: privateEndpointName
          in: path
          description: The name of the private endpoint.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested private endpoint state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPrivateEndpoint'
      responses:
        '200':
          description: Successfully updated the private endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPrivateEndpoint'
        '201':
          description: Successfully created the private endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobPrivateEndpoint'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 ElasticJobAgentIsBusy - The Elastic Job Agent '{0}' is currently busy processing another request. Please retry operation later.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 ElasticJobAgentInvalidOperationParameter - An invalid operation parameter was identified for this Elastic Job Agent operation. {0}

             * 400 TokenTooLong - The provided token is too long.

             * 400 ElasticJobAgentResourceAlreadyExists - Elastic job agent '{0}' already contains the resource '{1}'

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 PropertyChangeUnsupported - Property cannot be modified.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ServerDisabled - Server is disabled.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
    delete:
      tags:
        - JobPrivateEndpoints
      description: Deletes a private endpoint.
      operationId: JobPrivateEndpoints_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: privateEndpointName
          in: path
          description: The name of the private endpoint to delete.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the private endpoint.
        '202':
          description: Accepted
        '204':
          description: The specified private endpoint does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ElasticJobAgentInvalidOperationParameter - An invalid operation parameter was identified for this Elastic Job Agent operation. {0}

             * 400 TokenTooLong - The provided token is too long.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 ElasticJobAgentIsBusy - The Elastic Job Agent '{0}' is currently busy processing another request. Please retry operation later.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ServerDisabled - Server is disabled.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/encryptionProtector?api-version=2020-11-01-preview:
    get:
      tags:
        - EncryptionProtectors
      description: Gets a list of server encryption protectors
      operationId: EncryptionProtectors_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of server encryption protector.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionProtectorListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 InvalidEncryptionProtectorName - The encryption protector key name is not supported.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/encryptionProtector/{encryptionProtectorName}?api-version=2020-11-01-preview:
    get:
      tags:
        - EncryptionProtectors
      description: Gets a server encryption protector.
      operationId: EncryptionProtectors_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: encryptionProtectorName
          in: path
          description: The name of the encryption protector to be retrieved.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: EncryptionProtectorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified server encryption protector.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionProtector'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 InvalidEncryptionProtectorName - The encryption protector key name is not supported.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - EncryptionProtectors
      description: Updates an existing encryption protector.
      operationId: EncryptionProtectors_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: encryptionProtectorName
          in: path
          description: The name of the encryption protector to be updated.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: EncryptionProtectorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested encryption protector resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptionProtector'
      responses:
        '200':
          description: Successfully updated the encryption protector.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptionProtector'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 InvalidEncryptionProtectorName - The encryption protector key name is not supported.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultMismatchError - Unexpected Key Vault region found in the http response.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 401 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 401 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 401 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 401 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 401 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerKeyNotFound - The requested server key was not found on the current subscription.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/encryptionProtector/{encryptionProtectorName}/revalidate?api-version=2020-11-01-preview:
    post:
      tags:
        - EncryptionProtectors
      description: Revalidates an existing encryption protector.
      operationId: EncryptionProtectors_Revalidate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: encryptionProtectorName
          in: path
          description: The name of the encryption protector to be updated.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: EncryptionProtectorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully revalidated the encryption protector.
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 InvalidEncryptionProtectorName - The encryption protector key name is not supported.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultMismatchError - Unexpected Key Vault region found in the http response.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 401 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 401 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 401 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 401 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 401 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerKeyNotFound - The requested server key was not found on the current subscription.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/scanResults?api-version=2022-11-01-preview:
    get:
      tags:
        - DatabaseSqlVulnerabilityAssessmentScanResult
      description: Gets a vulnerability assessment scan record of a database.
      operationId: DatabaseSqlVulnerabilityAssessmentScanResult_ListByScan
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the SQL Vulnerability Assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: SqlVulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: scanId
          in: path
          description: The scan id of the SQL Vulnerability Assessment scan to retrieve result from.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved SQL Vulnerability Assessment scan results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SQLVulnerabilityAssessmentScanListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/scanResults/{scanResultId}?api-version=2022-11-01-preview:
    get:
      tags:
        - DatabaseSqlVulnerabilityAssessmentScanResult
      description: Gets a vulnerability assessment scan record of a database.
      operationId: DatabaseSqlVulnerabilityAssessmentScanResult_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the SQL Vulnerability Assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: SqlVulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: scanId
          in: path
          description: The scan id of the SQL Vulnerability Assessment scan to retrieve result from.
          required: true
          schema:
            type: string
        - name: scanResultId
          in: path
          description: The scan result id of the specific result to retrieve.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved SQL Vulnerability Assessment scan results for id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlVulnerabilityAssessmentScanResults'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/maintenanceWindowOptions/current?api-version=2020-11-01-preview:
    get:
      tags:
        - MaintenanceWindowOptions
      description: Gets a list of available maintenance windows.
      operationId: MaintenanceWindowOptions_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database to get maintenance windows options for.
          required: true
          schema:
            type: string
        - name: maintenanceWindowOptionsName
          in: query
          description: Maintenance window options name.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of maintenance windows options.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceWindowOptions'
        default:
          description: '*** Error Responses: ***'
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools?api-version=2022-08-01-preview:
    get:
      tags:
        - ElasticPools
      description: Gets all elastic pools in a server.
      operationId: ElasticPools_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: $skip
          in: query
          description: The number of elements in the collection to skip.
          required: false
          schema:
            format: int64
            type: integer
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElasticPoolListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 ServerQuotaExceeded - The server reached its limit for allowed Database Throughput Unit.

             * 400 SubscriptionVcoreQuotaExceeded - Could not perform the operation because subscription would exceed the allowed vCore quota.

             * 400 ElasticPoolAlreadyExists - The server already contains an elastic pool with the specified name.

             * 400 InvalidInputValueForEdition - Specified edition is not supported for elastic pool provisioning.

             * 400 ElasticPoolDtuBelowLimit - The requested DTU value is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDtuAboveLimit - The requested DTU value is too high for the requested elastic pool service tier.

             * 400 InvalidMaxSize - Invalid max size.

             * 400 ElasticPoolDbDtuMaxBelowLimit - The requested per database DTU max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbDtuMaxAboveLimit - The requested per database DTU max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseDtuMax - Attempting to set the DTU max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbDtuMinAboveLimit - The requested DTU min per database is too high for the requested service tier.

             * 400 ElasticPoolOverStorage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidInputValueForDatabaseDtuMin - Attempting to set the DTU min per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 ElasticPoolDtuUnsupported - User tried to create or update an elastic pool with a DTU capacity that is not supported.

             * 400 ElasticPoolStorageAboveLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolsNotEnabled - Elastic pools have not been enabled in this region.

             * 400 ElasticPoolNotEmpty - Request to delete an elastic pool that is not empty.

             * 400 ElasticPoolStorageBelowLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedGB - Attempting to set the elastic pool storage limit in gb which doesn't match the allowed values.

             * 400 ElasticPoolDatabaseLimit - The elastic pool has reached its limit for number of databases.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 InvalidInputValueDatabaseDtuMinLargerThanMax - Attempting to set the DTU min per database higher than the DTU max per database.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 ElasticPoolStorageBelowLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolCapacityStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolStorageAboveLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 ElasticPoolUpdateHkNotAllowed - The elastic pool cannot lower its service tier from Premium to Standard or Basic since one or more of its databases use memory-optimized objects.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 ElasticPoolDbDtuMinBelowLimit - The requested per database DTU min is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxBelowLimit - The requested per database VCore max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxAboveLimit - The requested per database VCore max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMax - Attempting to set the VCore max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbVcoreMinBelowLimit - The requested per database VCore min is too low for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMin - Attempting to set the VCore min per database for the Resource Pool which doesn't match the allowed values.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 InvalidInputValueDatabaseVcoreMinLargerThanMax - Attempting to set the VCore min per database higher than the VCore max per database.

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ElasticPoolNotFound - The specified elastic pool does not exist for the specified server.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 405 NotSupported - This functionality is not supported.

             * 409 ElasticPoolBusy - A management operation was attempted on an elastic pool which is busy.

             * 409 ServerDisabled - Server is disabled.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 ElasticPoolUpdateLinksNotInCatchup - Cannot update elastic pool while one of its databases is performing a copy or geo-replication failover operation.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 ElasticPoolFailedMoveDbToElasticPool - Failed to move the database into elastic pool due to internal resource constraints. This may be a transient condition, please retry.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}?api-version=2022-08-01-preview:
    get:
      tags:
        - ElasticPools
      description: Gets an elastic pool.
      operationId: ElasticPools_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: elasticPoolName
          in: path
          description: The name of the elastic pool.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Succeeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElasticPool'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 ServerQuotaExceeded - The server reached its limit for allowed Database Throughput Unit.

             * 400 SubscriptionVcoreQuotaExceeded - Could not perform the operation because subscription would exceed the allowed vCore quota.

             * 400 ElasticPoolAlreadyExists - The server already contains an elastic pool with the specified name.

             * 400 InvalidInputValueForEdition - Specified edition is not supported for elastic pool provisioning.

             * 400 ElasticPoolDtuBelowLimit - The requested DTU value is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDtuAboveLimit - The requested DTU value is too high for the requested elastic pool service tier.

             * 400 InvalidMaxSize - Invalid max size.

             * 400 ElasticPoolDbDtuMaxBelowLimit - The requested per database DTU max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbDtuMaxAboveLimit - The requested per database DTU max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseDtuMax - Attempting to set the DTU max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbDtuMinAboveLimit - The requested DTU min per database is too high for the requested service tier.

             * 400 ElasticPoolOverStorage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidInputValueForDatabaseDtuMin - Attempting to set the DTU min per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 ElasticPoolDtuUnsupported - User tried to create or update an elastic pool with a DTU capacity that is not supported.

             * 400 ElasticPoolStorageAboveLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolsNotEnabled - Elastic pools have not been enabled in this region.

             * 400 ElasticPoolNotEmpty - Request to delete an elastic pool that is not empty.

             * 400 ElasticPoolStorageBelowLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedGB - Attempting to set the elastic pool storage limit in gb which doesn't match the allowed values.

             * 400 ElasticPoolDatabaseLimit - The elastic pool has reached its limit for number of databases.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 InvalidInputValueDatabaseDtuMinLargerThanMax - Attempting to set the DTU min per database higher than the DTU max per database.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 ElasticPoolStorageBelowLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolCapacityStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolStorageAboveLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 ElasticPoolUpdateHkNotAllowed - The elastic pool cannot lower its service tier from Premium to Standard or Basic since one or more of its databases use memory-optimized objects.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 ElasticPoolDbDtuMinBelowLimit - The requested per database DTU min is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxBelowLimit - The requested per database VCore max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxAboveLimit - The requested per database VCore max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMax - Attempting to set the VCore max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbVcoreMinBelowLimit - The requested per database VCore min is too low for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMin - Attempting to set the VCore min per database for the Resource Pool which doesn't match the allowed values.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 InvalidInputValueDatabaseVcoreMinLargerThanMax - Attempting to set the VCore min per database higher than the VCore max per database.

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ElasticPoolNotFound - The specified elastic pool does not exist for the specified server.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 405 NotSupported - This functionality is not supported.

             * 409 ElasticPoolBusy - A management operation was attempted on an elastic pool which is busy.

             * 409 ServerDisabled - Server is disabled.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 ElasticPoolUpdateLinksNotInCatchup - Cannot update elastic pool while one of its databases is performing a copy or geo-replication failover operation.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 ElasticPoolFailedMoveDbToElasticPool - Failed to move the database into elastic pool due to internal resource constraints. This may be a transient condition, please retry.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
    put:
      tags:
        - ElasticPools
      description: Creates or updates an elastic pool.
      operationId: ElasticPools_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: elasticPoolName
          in: path
          description: The name of the elastic pool.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The elastic pool parameters.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElasticPool'
      responses:
        '200':
          description: Updated the elastic pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElasticPool'
        '201':
          description: Created the elastic pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElasticPool'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 ServerQuotaExceeded - The server reached its limit for allowed Database Throughput Unit.

             * 400 SubscriptionVcoreQuotaExceeded - Could not perform the operation because subscription would exceed the allowed vCore quota.

             * 400 ElasticPoolAlreadyExists - The server already contains an elastic pool with the specified name.

             * 400 InvalidInputValueForEdition - Specified edition is not supported for elastic pool provisioning.

             * 400 ElasticPoolDtuBelowLimit - The requested DTU value is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDtuAboveLimit - The requested DTU value is too high for the requested elastic pool service tier.

             * 400 InvalidMaxSize - Invalid max size.

             * 400 ElasticPoolDbDtuMaxBelowLimit - The requested per database DTU max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbDtuMaxAboveLimit - The requested per database DTU max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseDtuMax - Attempting to set the DTU max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbDtuMinAboveLimit - The requested DTU min per database is too high for the requested service tier.

             * 400 ElasticPoolOverStorage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidInputValueForDatabaseDtuMin - Attempting to set the DTU min per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 ElasticPoolDtuUnsupported - User tried to create or update an elastic pool with a DTU capacity that is not supported.

             * 400 ElasticPoolStorageAboveLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolsNotEnabled - Elastic pools have not been enabled in this region.

             * 400 ElasticPoolNotEmpty - Request to delete an elastic pool that is not empty.

             * 400 ElasticPoolStorageBelowLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedGB - Attempting to set the elastic pool storage limit in gb which doesn't match the allowed values.

             * 400 ElasticPoolDatabaseLimit - The elastic pool has reached its limit for number of databases.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 InvalidInputValueDatabaseDtuMinLargerThanMax - Attempting to set the DTU min per database higher than the DTU max per database.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 ElasticPoolStorageBelowLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolCapacityStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolStorageAboveLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 ElasticPoolUpdateHkNotAllowed - The elastic pool cannot lower its service tier from Premium to Standard or Basic since one or more of its databases use memory-optimized objects.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 ElasticPoolDbDtuMinBelowLimit - The requested per database DTU min is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxBelowLimit - The requested per database VCore max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxAboveLimit - The requested per database VCore max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMax - Attempting to set the VCore max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbVcoreMinBelowLimit - The requested per database VCore min is too low for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMin - Attempting to set the VCore min per database for the Resource Pool which doesn't match the allowed values.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 InvalidInputValueDatabaseVcoreMinLargerThanMax - Attempting to set the VCore min per database higher than the VCore max per database.

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 InvalidSkuName - Invalid SKU name.

             * 400 MismatchedSkuNameAndCapacity - Mismatch between SKU name and capacity.

             * 400 MismatchedSkuNameAndTier - Mismatch between SKU name and tier.

             * 400 MismatchedSkuNameAndFamily - Mismatch between SKU name and family.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 AvailabilityZoneNotSupported - Availability Zones for databases and elastic pools are not yet supported.

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 ServerQuotaExceeded - The server reached its limit for allowed Database Throughput Unit.

             * 400 SubscriptionVcoreQuotaExceeded - Could not perform the operation because subscription would exceed the allowed vCore quota.

             * 400 ElasticPoolAlreadyExists - The server already contains an elastic pool with the specified name.

             * 400 InvalidInputValueForEdition - Specified edition is not supported for elastic pool provisioning.

             * 400 ElasticPoolDtuBelowLimit - The requested DTU value is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDtuAboveLimit - The requested DTU value is too high for the requested elastic pool service tier.

             * 400 InvalidMaxSize - Invalid max size.

             * 400 ElasticPoolDbDtuMaxBelowLimit - The requested per database DTU max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbDtuMaxAboveLimit - The requested per database DTU max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseDtuMax - Attempting to set the DTU max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbDtuMinAboveLimit - The requested DTU min per database is too high for the requested service tier.

             * 400 ElasticPoolOverStorage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidInputValueForDatabaseDtuMin - Attempting to set the DTU min per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 ElasticPoolDtuUnsupported - User tried to create or update an elastic pool with a DTU capacity that is not supported.

             * 400 ElasticPoolStorageAboveLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolsNotEnabled - Elastic pools have not been enabled in this region.

             * 400 ElasticPoolNotEmpty - Request to delete an elastic pool that is not empty.

             * 400 ElasticPoolStorageBelowLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedGB - Attempting to set the elastic pool storage limit in gb which doesn't match the allowed values.

             * 400 ElasticPoolDatabaseLimit - The elastic pool has reached its limit for number of databases.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 InvalidInputValueDatabaseDtuMinLargerThanMax - Attempting to set the DTU min per database higher than the DTU max per database.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 ElasticPoolStorageBelowLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolCapacityStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolStorageAboveLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 ElasticPoolUpdateHkNotAllowed - The elastic pool cannot lower its service tier from Premium to Standard or Basic since one or more of its databases use memory-optimized objects.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 ElasticPoolDbDtuMinBelowLimit - The requested per database DTU min is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxBelowLimit - The requested per database VCore max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxAboveLimit - The requested per database VCore max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMax - Attempting to set the VCore max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbVcoreMinBelowLimit - The requested per database VCore min is too low for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMin - Attempting to set the VCore min per database for the Resource Pool which doesn't match the allowed values.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 InvalidInputValueDatabaseVcoreMinLargerThanMax - Attempting to set the VCore min per database higher than the VCore max per database.

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ElasticPoolNotFound - The specified elastic pool does not exist for the specified server.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ElasticPoolNotFound - The specified elastic pool does not exist for the specified server.

             * 405 NotSupported - This functionality is not supported.

             * 405 NotSupported - This functionality is not supported.

             * 409 ElasticPoolBusy - A management operation was attempted on an elastic pool which is busy.

             * 409 ServerDisabled - Server is disabled.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 ElasticPoolUpdateLinksNotInCatchup - Cannot update elastic pool while one of its databases is performing a copy or geo-replication failover operation.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ElasticPoolBusy - A management operation was attempted on an elastic pool which is busy.

             * 409 ServerDisabled - Server is disabled.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 ElasticPoolUpdateLinksNotInCatchup - Cannot update elastic pool while one of its databases is performing a copy or geo-replication failover operation.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 ElasticPoolFailedMoveDbToElasticPool - Failed to move the database into elastic pool due to internal resource constraints. This may be a transient condition, please retry.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 ElasticPoolFailedMoveDbToElasticPool - Failed to move the database into elastic pool due to internal resource constraints. This may be a transient condition, please retry.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    delete:
      tags:
        - ElasticPools
      description: Deletes an elastic pool.
      operationId: ElasticPools_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: elasticPoolName
          in: path
          description: The name of the elastic pool.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Deleted the elastic pool
        '202':
          description: Deleting the elastic pool is in progress.
        '204':
          description: Elastic pool did not exist
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 ServerQuotaExceeded - The server reached its limit for allowed Database Throughput Unit.

             * 400 SubscriptionVcoreQuotaExceeded - Could not perform the operation because subscription would exceed the allowed vCore quota.

             * 400 ElasticPoolAlreadyExists - The server already contains an elastic pool with the specified name.

             * 400 InvalidInputValueForEdition - Specified edition is not supported for elastic pool provisioning.

             * 400 ElasticPoolDtuBelowLimit - The requested DTU value is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDtuAboveLimit - The requested DTU value is too high for the requested elastic pool service tier.

             * 400 InvalidMaxSize - Invalid max size.

             * 400 ElasticPoolDbDtuMaxBelowLimit - The requested per database DTU max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbDtuMaxAboveLimit - The requested per database DTU max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseDtuMax - Attempting to set the DTU max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbDtuMinAboveLimit - The requested DTU min per database is too high for the requested service tier.

             * 400 ElasticPoolOverStorage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidInputValueForDatabaseDtuMin - Attempting to set the DTU min per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 ElasticPoolDtuUnsupported - User tried to create or update an elastic pool with a DTU capacity that is not supported.

             * 400 ElasticPoolStorageAboveLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolsNotEnabled - Elastic pools have not been enabled in this region.

             * 400 ElasticPoolNotEmpty - Request to delete an elastic pool that is not empty.

             * 400 ElasticPoolStorageBelowLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedGB - Attempting to set the elastic pool storage limit in gb which doesn't match the allowed values.

             * 400 ElasticPoolDatabaseLimit - The elastic pool has reached its limit for number of databases.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 InvalidInputValueDatabaseDtuMinLargerThanMax - Attempting to set the DTU min per database higher than the DTU max per database.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 ElasticPoolStorageBelowLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolCapacityStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolStorageAboveLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 ElasticPoolUpdateHkNotAllowed - The elastic pool cannot lower its service tier from Premium to Standard or Basic since one or more of its databases use memory-optimized objects.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 ElasticPoolDbDtuMinBelowLimit - The requested per database DTU min is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxBelowLimit - The requested per database VCore max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxAboveLimit - The requested per database VCore max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMax - Attempting to set the VCore max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbVcoreMinBelowLimit - The requested per database VCore min is too low for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMin - Attempting to set the VCore min per database for the Resource Pool which doesn't match the allowed values.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 InvalidInputValueDatabaseVcoreMinLargerThanMax - Attempting to set the VCore min per database higher than the VCore max per database.

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ElasticPoolNotFound - The specified elastic pool does not exist for the specified server.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 405 NotSupported - This functionality is not supported.

             * 409 ElasticPoolBusy - A management operation was attempted on an elastic pool which is busy.

             * 409 ServerDisabled - Server is disabled.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 ElasticPoolUpdateLinksNotInCatchup - Cannot update elastic pool while one of its databases is performing a copy or geo-replication failover operation.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 ElasticPoolFailedMoveDbToElasticPool - Failed to move the database into elastic pool due to internal resource constraints. This may be a transient condition, please retry.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
    patch:
      tags:
        - ElasticPools
      description: Updates an elastic pool.
      operationId: ElasticPools_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: elasticPoolName
          in: path
          description: The name of the elastic pool.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The elastic pool update parameters.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElasticPoolUpdate'
      responses:
        '200':
          description: Updated the elastic pool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ElasticPool'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 ServerQuotaExceeded - The server reached its limit for allowed Database Throughput Unit.

             * 400 SubscriptionVcoreQuotaExceeded - Could not perform the operation because subscription would exceed the allowed vCore quota.

             * 400 ElasticPoolAlreadyExists - The server already contains an elastic pool with the specified name.

             * 400 InvalidInputValueForEdition - Specified edition is not supported for elastic pool provisioning.

             * 400 ElasticPoolDtuBelowLimit - The requested DTU value is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDtuAboveLimit - The requested DTU value is too high for the requested elastic pool service tier.

             * 400 InvalidMaxSize - Invalid max size.

             * 400 ElasticPoolDbDtuMaxBelowLimit - The requested per database DTU max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbDtuMaxAboveLimit - The requested per database DTU max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseDtuMax - Attempting to set the DTU max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbDtuMinAboveLimit - The requested DTU min per database is too high for the requested service tier.

             * 400 ElasticPoolOverStorage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidInputValueForDatabaseDtuMin - Attempting to set the DTU min per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 ElasticPoolDtuUnsupported - User tried to create or update an elastic pool with a DTU capacity that is not supported.

             * 400 ElasticPoolStorageAboveLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolsNotEnabled - Elastic pools have not been enabled in this region.

             * 400 ElasticPoolNotEmpty - Request to delete an elastic pool that is not empty.

             * 400 ElasticPoolStorageBelowLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedGB - Attempting to set the elastic pool storage limit in gb which doesn't match the allowed values.

             * 400 ElasticPoolDatabaseLimit - The elastic pool has reached its limit for number of databases.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 InvalidInputValueDatabaseDtuMinLargerThanMax - Attempting to set the DTU min per database higher than the DTU max per database.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 ElasticPoolStorageBelowLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolCapacityStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolStorageAboveLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 ElasticPoolUpdateHkNotAllowed - The elastic pool cannot lower its service tier from Premium to Standard or Basic since one or more of its databases use memory-optimized objects.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 ElasticPoolDbDtuMinBelowLimit - The requested per database DTU min is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxBelowLimit - The requested per database VCore max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxAboveLimit - The requested per database VCore max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMax - Attempting to set the VCore max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbVcoreMinBelowLimit - The requested per database VCore min is too low for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMin - Attempting to set the VCore min per database for the Resource Pool which doesn't match the allowed values.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 InvalidInputValueDatabaseVcoreMinLargerThanMax - Attempting to set the VCore min per database higher than the VCore max per database.

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 InvalidSkuName - Invalid SKU name.

             * 400 MismatchedSkuNameAndCapacity - Mismatch between SKU name and capacity.

             * 400 MismatchedSkuNameAndTier - Mismatch between SKU name and tier.

             * 400 MismatchedSkuNameAndFamily - Mismatch between SKU name and family.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 AvailabilityZoneNotSupported - Availability Zones for databases and elastic pools are not yet supported.

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 ServerQuotaExceeded - The server reached its limit for allowed Database Throughput Unit.

             * 400 SubscriptionVcoreQuotaExceeded - Could not perform the operation because subscription would exceed the allowed vCore quota.

             * 400 ElasticPoolAlreadyExists - The server already contains an elastic pool with the specified name.

             * 400 InvalidInputValueForEdition - Specified edition is not supported for elastic pool provisioning.

             * 400 ElasticPoolDtuBelowLimit - The requested DTU value is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDtuAboveLimit - The requested DTU value is too high for the requested elastic pool service tier.

             * 400 InvalidMaxSize - Invalid max size.

             * 400 ElasticPoolDbDtuMaxBelowLimit - The requested per database DTU max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbDtuMaxAboveLimit - The requested per database DTU max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseDtuMax - Attempting to set the DTU max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbDtuMinAboveLimit - The requested DTU min per database is too high for the requested service tier.

             * 400 ElasticPoolOverStorage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 InvalidInputValueForDatabaseDtuMin - Attempting to set the DTU min per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 ElasticPoolDtuUnsupported - User tried to create or update an elastic pool with a DTU capacity that is not supported.

             * 400 ElasticPoolStorageAboveLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolsNotEnabled - Elastic pools have not been enabled in this region.

             * 400 ElasticPoolNotEmpty - Request to delete an elastic pool that is not empty.

             * 400 ElasticPoolStorageBelowLimitGB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedGB - Attempting to set the elastic pool storage limit in gb which doesn't match the allowed values.

             * 400 ElasticPoolDatabaseLimit - The elastic pool has reached its limit for number of databases.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 InvalidInputValueDatabaseDtuMinLargerThanMax - Attempting to set the DTU min per database higher than the DTU max per database.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 ElasticPoolStorageBelowLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 ElasticPoolStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolCapacityStorageNotAllowedMB - Attempting to set the elastic pool storage limit in mb which doesn't match the allowed values.

             * 400 ElasticPoolStorageAboveLimitMB - Attempting to set the elastic pool storage limit below the supported limit.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 ElasticPoolUpdateHkNotAllowed - The elastic pool cannot lower its service tier from Premium to Standard or Basic since one or more of its databases use memory-optimized objects.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 RegionDoesNotAllowProvisioning - The selected location is not accepting new Windows Azure SQL Database servers. This may change at a later time.

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 ElasticPoolDbDtuMinBelowLimit - The requested per database DTU min is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxBelowLimit - The requested per database VCore max is too low for the requested elastic pool service tier.

             * 400 ElasticPoolDbVcoreMaxAboveLimit - The requested per database VCore max is too high for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMax - Attempting to set the VCore max per database for the Resource Pool which doesn't match the allowed values.

             * 400 ElasticPoolDbVcoreMinBelowLimit - The requested per database VCore min is too low for the requested elastic pool service tier.

             * 400 InvalidInputValueForDatabaseVcoreMin - Attempting to set the VCore min per database for the Resource Pool which doesn't match the allowed values.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 InvalidInputValueDatabaseVcoreMinLargerThanMax - Attempting to set the VCore min per database higher than the VCore max per database.

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ElasticPoolNotFound - The specified elastic pool does not exist for the specified server.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ElasticPoolNotFound - The specified elastic pool does not exist for the specified server.

             * 405 NotSupported - This functionality is not supported.

             * 405 NotSupported - This functionality is not supported.

             * 409 ElasticPoolBusy - A management operation was attempted on an elastic pool which is busy.

             * 409 ServerDisabled - Server is disabled.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 ElasticPoolUpdateLinksNotInCatchup - Cannot update elastic pool while one of its databases is performing a copy or geo-replication failover operation.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ElasticPoolBusy - A management operation was attempted on an elastic pool which is busy.

             * 409 ServerDisabled - Server is disabled.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 ElasticPoolUpdateLinksNotInCatchup - Cannot update elastic pool while one of its databases is performing a copy or geo-replication failover operation.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 ElasticPoolFailedMoveDbToElasticPool - Failed to move the database into elastic pool due to internal resource constraints. This may be a transient condition, please retry.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 ElasticPoolFailedMoveDbToElasticPool - Failed to move the database into elastic pool due to internal resource constraints. This may be a transient condition, please retry.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/failover?api-version=2022-08-01-preview:
    post:
      tags:
        - ElasticPools
      description: Failovers an elastic pool.
      operationId: ElasticPools_Failover
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: elasticPoolName
          in: path
          description: The name of the elastic pool to failover.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully completed elastic pool failover.
        '202':
          description: Elastic pool failover is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ElasticPoolFailoverNotSupportedOnSKU - This type of customer initiated failover is not supported on the given SKU.

             * 400 ElasticPoolFailoverThrottled - There was a recent failover on the elastic pool.

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ElasticPoolNotInStateToFailover - The elastic pool or a database within the elastic pool is currently in a state such that failover cannot be issued.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions?api-version=2020-11-01-preview:
    get:
      tags:
        - JobVersions
      description: Gets all versions of a job.
      operationId: JobVersions_ListByJob
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to get.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobVersionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}/versions/{jobVersion}?api-version=2020-11-01-preview:
    get:
      tags:
        - JobVersions
      description: Gets a job version.
      operationId: JobVersions_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job.
          required: true
          schema:
            type: string
        - name: jobVersion
          in: path
          description: The version of the job to get.
          required: true
          schema:
            format: int32
            type: integer
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the job version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobVersion'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments?api-version=2022-11-01-preview:
    get:
      tags:
        - DatabaseSqlVulnerabilityAssessmentsSettings
      description: Lists SQL Vulnerability Assessment policies associated with a database.
      operationId: DatabaseSqlVulnerabilityAssessmentsSettings_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved SQL Vulnerability Assessment policies on a given database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlVulnerabilityAssessmentListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}?api-version=2022-11-01-preview:
    get:
      tags:
        - DatabaseSqlVulnerabilityAssessmentsSettings
      description: Gets SQL Vulnerability Assessment policy for database.
      operationId: DatabaseSqlVulnerabilityAssessmentsSettings_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the SQL Vulnerability Assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: SqlVulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved SQL Vulnerability Assessment policy for database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlVulnerabilityAssessment'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/startStopSchedules?api-version=2022-08-01-preview:
    get:
      tags:
        - StartStopManagedInstanceSchedules
      description: Lists the managed instance's Start/Stop schedules.
      operationId: StartStopManagedInstanceSchedulesByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of Start/Stop schedules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartStopManagedInstanceScheduleListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagementServiceStartStopManagedInstanceScheduleSmallTimespan - Time between two successive actions is less than 1 hour.

             * 400 ManagementServiceStartStopManagedInstanceScheduleSubscriptionNotEnabledForFeature - User attempted to use Start/Stop feature without having the subscription allowlisted for the appropriate subscription feature.

             * 400 ManagementServiceStartStopManagedInstanceScheduleNotSupportedOnSKU - Scheduled Start/Stop operation is not supported on the given SKU.

             * 400 ManagementServiceStopManagedInstanceHostedOnRdfePlatform - Stop executed on the instance that is not running with Feature Wave November 2022

             * 400 ManagementServiceStartStopManagedInstanceScheduleFeatureDisabled - User attempted to use the scheduled Start/Stop Azure SQL Managed Instance feature, which is disabled.

             * 400 ManagementServiceStartStopManagedInstanceScheduleOverlap - Overlap in schedule pairs.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ManagementServiceStartStopManagedInstanceScheduleNotFound - Schedule does not exist for a given managed instance.

             * 409 ManagementServiceStartStopManagedInstanceScheduleConflictingOperation - The attempted create/update/delete operation of Start/Stop schedule on the Azure SQL Managed Instance failed. The schedule was either not created or couldn't be updated/deleted as it was busy with an ongoing scheduled operation. Please retry your request later.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: StartStopManagedInstanceSchedules_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/startStopSchedules/{startStopScheduleName}?api-version=2022-08-01-preview:
    get:
      tags:
        - StartStopManagedInstanceSchedules
      description: Gets the managed instance's Start/Stop schedule.
      operationId: StartStopManagedInstanceSchedules_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: startStopScheduleName
          in: path
          description: Name of the managed instance Start/Stop schedule.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: StartStopScheduleName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the Start/Stop schedule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartStopManagedInstanceSchedule'
        default:
          description: |-
            *** Error Responses: ***

             * 204 ManagementServiceStartStopManagedInstanceScheduleNameInvalid - User attempted to perform CRUD operation of Start/Stop schedule with a schedule name different from 'default'

             * 400 ManagementServiceStartStopManagedInstanceScheduleSmallTimespan - Time between two successive actions is less than 1 hour.

             * 400 ManagementServiceStartStopManagedInstanceScheduleSubscriptionNotEnabledForFeature - User attempted to use Start/Stop feature without having the subscription allowlisted for the appropriate subscription feature.

             * 400 ManagementServiceStartStopManagedInstanceScheduleNotSupportedOnSKU - Scheduled Start/Stop operation is not supported on the given SKU.

             * 400 ManagementServiceStopManagedInstanceHostedOnRdfePlatform - Stop executed on the instance that is not running with Feature Wave November 2022

             * 400 ManagementServiceStartStopManagedInstanceScheduleFeatureDisabled - User attempted to use the scheduled Start/Stop Azure SQL Managed Instance feature, which is disabled.

             * 400 ManagementServiceStartStopManagedInstanceScheduleOverlap - Overlap in schedule pairs.

             * 400 ManagementServiceStartStopManagedInstanceScheduleCreateOrUpdateRequestParametersInvalid - The provided set of parameters in the body of the request is either empty or invalid.

             * 400 ManagementServiceStartStopManagedInstanceScheduleCreateOrUpdateRequestTimeZoneInvalid - The provided time zone parameter is invalid.

             * 400 ManagementServiceStartStopManagedInstanceScheduleCreateOrUpdateRequestScheduleInvalid - The provided Start/Stop schedule is invalid. The schedule either contains no items in the schedule list or some of the items in the list have invalid values. 

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ManagementServiceStartStopManagedInstanceScheduleNotFound - Schedule does not exist for a given managed instance.

             * 404 ManagementServiceStartStopManagedInstanceScheduleNameInvalid - User attempted to perform CRUD operation of Start/Stop schedule with a schedule name different from 'default'

             * 409 ManagementServiceStartStopManagedInstanceScheduleConflictingOperation - The attempted create/update/delete operation of Start/Stop schedule on the Azure SQL Managed Instance failed. The schedule was either not created or couldn't be updated/deleted as it was busy with an ongoing scheduled operation. Please retry your request later.
    put:
      tags:
        - StartStopManagedInstanceSchedules
      description: Creates or updates the managed instance's Start/Stop schedule.
      operationId: StartStopManagedInstanceSchedules_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: startStopScheduleName
          in: path
          description: Name of the managed instance Start/Stop schedule.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: StartStopScheduleName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested managed instance Start/Stop schedule.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartStopManagedInstanceSchedule'
      responses:
        '200':
          description: Successfully set the Start/Stop schedule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartStopManagedInstanceSchedule'
        '201':
          description: Successfully created the Start/Stop schedule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartStopManagedInstanceSchedule'
        default:
          description: |-
            *** Error Responses: ***

             * 204 ManagementServiceStartStopManagedInstanceScheduleNameInvalid - User attempted to perform CRUD operation of Start/Stop schedule with a schedule name different from 'default'

             * 400 ManagementServiceStartStopManagedInstanceScheduleCreateOrUpdateRequestParametersInvalid - The provided set of parameters in the body of the request is either empty or invalid.

             * 400 ManagementServiceStartStopManagedInstanceScheduleCreateOrUpdateRequestTimeZoneInvalid - The provided time zone parameter is invalid.

             * 400 ManagementServiceStartStopManagedInstanceScheduleCreateOrUpdateRequestScheduleInvalid - The provided Start/Stop schedule is invalid. The schedule either contains no items in the schedule list or some of the items in the list have invalid values. 

             * 400 ManagementServiceStartStopManagedInstanceScheduleSmallTimespan - Time between two successive actions is less than 1 hour.

             * 400 ManagementServiceStartStopManagedInstanceScheduleSubscriptionNotEnabledForFeature - User attempted to use Start/Stop feature without having the subscription allowlisted for the appropriate subscription feature.

             * 400 ManagementServiceStartStopManagedInstanceScheduleNotSupportedOnSKU - Scheduled Start/Stop operation is not supported on the given SKU.

             * 400 ManagementServiceStopManagedInstanceHostedOnRdfePlatform - Stop executed on the instance that is not running with Feature Wave November 2022

             * 400 ManagementServiceStartStopManagedInstanceScheduleFeatureDisabled - User attempted to use the scheduled Start/Stop Azure SQL Managed Instance feature, which is disabled.

             * 400 ManagementServiceStartStopManagedInstanceScheduleOverlap - Overlap in schedule pairs.

             * 404 ManagementServiceStartStopManagedInstanceScheduleNameInvalid - User attempted to perform CRUD operation of Start/Stop schedule with a schedule name different from 'default'

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ManagementServiceStartStopManagedInstanceScheduleNotFound - Schedule does not exist for a given managed instance.

             * 409 ManagementServiceStartStopManagedInstanceScheduleConflictingOperation - The attempted create/update/delete operation of Start/Stop schedule on the Azure SQL Managed Instance failed. The schedule was either not created or couldn't be updated/deleted as it was busy with an ongoing scheduled operation. Please retry your request later.
    delete:
      tags:
        - StartStopManagedInstanceSchedules
      description: Deletes the managed instance's Start/Stop schedule.
      operationId: StartStopManagedInstanceSchedules_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: startStopScheduleName
          in: path
          description: Name of the managed instance Start/Stop schedule.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: StartStopScheduleName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the Start/Stop schedule.
        '204':
          description: The specified Start/Stop schedule does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 204 ManagementServiceStartStopManagedInstanceScheduleNotFound - Schedule does not exist for a given managed instance.

             * 204 ManagementServiceStartStopManagedInstanceScheduleNameInvalid - User attempted to perform CRUD operation of Start/Stop schedule with a schedule name different from 'default'

             * 400 ManagementServiceStartStopManagedInstanceScheduleSmallTimespan - Time between two successive actions is less than 1 hour.

             * 400 ManagementServiceStartStopManagedInstanceScheduleSubscriptionNotEnabledForFeature - User attempted to use Start/Stop feature without having the subscription allowlisted for the appropriate subscription feature.

             * 400 ManagementServiceStartStopManagedInstanceScheduleNotSupportedOnSKU - Scheduled Start/Stop operation is not supported on the given SKU.

             * 400 ManagementServiceStopManagedInstanceHostedOnRdfePlatform - Stop executed on the instance that is not running with Feature Wave November 2022

             * 400 ManagementServiceStartStopManagedInstanceScheduleFeatureDisabled - User attempted to use the scheduled Start/Stop Azure SQL Managed Instance feature, which is disabled.

             * 400 ManagementServiceStartStopManagedInstanceScheduleOverlap - Overlap in schedule pairs.

             * 400 ManagementServiceStartStopManagedInstanceScheduleCreateOrUpdateRequestParametersInvalid - The provided set of parameters in the body of the request is either empty or invalid.

             * 400 ManagementServiceStartStopManagedInstanceScheduleCreateOrUpdateRequestTimeZoneInvalid - The provided time zone parameter is invalid.

             * 400 ManagementServiceStartStopManagedInstanceScheduleCreateOrUpdateRequestScheduleInvalid - The provided Start/Stop schedule is invalid. The schedule either contains no items in the schedule list or some of the items in the list have invalid values. 

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ManagementServiceStartStopManagedInstanceScheduleNameInvalid - User attempted to perform CRUD operation of Start/Stop schedule with a schedule name different from 'default'

             * 409 ManagementServiceStartStopManagedInstanceScheduleConflictingOperation - The attempted create/update/delete operation of Start/Stop schedule on the Azure SQL Managed Instance failed. The schedule was either not created or couldn't be updated/deleted as it was busy with an ongoing scheduled operation. Please retry your request later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines?api-version=2022-11-01-preview:
    get:
      tags:
        - SqlVulnerabilityAssessmentBaseline
      description: Gets a list of database's sql vulnerability assessment rule baselines.
      operationId: SqlVulnerabilityAssessmentBaseline_ListBySqlVulnerabilityAssessment
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: systemDatabaseName
          in: query
          description: The vulnerability assessment system database name.
          required: true
          schema:
            enum:
              - master
            x-ms-enum:
              name: VulnerabilityAssessmentSystemDatabaseName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully got the sql vulnerability assessment rule baseline list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentBaselineSetListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}?api-version=2022-11-01-preview:
    get:
      tags:
        - SqlVulnerabilityAssessmentBaseline
      description: Gets a list of database's sql vulnerability assessment rule baselines.
      operationId: SqlVulnerabilityAssessmentBaseline_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: baselineName
          in: path
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: BaselineName
              modelAsString: true
            type: string
        - name: systemDatabaseName
          in: query
          description: The vulnerability assessment system database name.
          required: true
          schema:
            enum:
              - master
            x-ms-enum:
              name: VulnerabilityAssessmentSystemDatabaseName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully got the sql vulnerability assessment rule baseline list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentBaselineSet'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    put:
      tags:
        - SqlVulnerabilityAssessmentBaseline
      description: Add a database's vulnerability assessment rule baseline list.
      operationId: SqlVulnerabilityAssessmentBaselines_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: baselineName
          in: path
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: BaselineName
              modelAsString: true
            type: string
        - name: systemDatabaseName
          in: query
          description: The vulnerability assessment system database name.
          required: true
          schema:
            enum:
              - master
            x-ms-enum:
              name: VulnerabilityAssessmentSystemDatabaseName
              modelAsString: false
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested rule baseline resource.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaselineListInput'
      responses:
        '200':
          description: Successfully add the vulnerability assessment rule baseline list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentBaselineSet'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines?api-version=2022-11-01-preview:
    get:
      tags:
        - DatabaseSqlVulnerabilityAssessmentBaselines
      description: Gets a list of database's sql vulnerability assessment rule baselines.
      operationId: DatabaseSqlVulnerabilityAssessmentBaselines_ListBySqlVulnerabilityAssessment
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully got the sql vulnerability assessment rule baseline list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentBaselineSetListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/sqlVulnerabilityAssessments/{vulnerabilityAssessmentName}/baselines/{baselineName}?api-version=2022-11-01-preview:
    get:
      tags:
        - DatabaseSqlVulnerabilityAssessmentBaselines
      description: Gets a list of database's sql vulnerability assessment rule baselines.
      operationId: DatabaseSqlVulnerabilityAssessmentBaselines_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: baselineName
          in: path
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: BaselineName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully got the sql vulnerability assessment rule baseline list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentBaselineSet'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
    put:
      tags:
        - DatabaseSqlVulnerabilityAssessmentBaselines
      description: Add a database's vulnerability assessment rule baseline list.
      operationId: DatabaseSqlVulnerabilityAssessmentBaselines_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: baselineName
          in: path
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: BaselineName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested rule baseline resource.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentRuleBaselineListInput'
      responses:
        '200':
          description: Successfully add the vulnerability assessment rule baseline list.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseSqlVulnerabilityAssessmentBaselineSet'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SqlVulnerabilityAssessmentIsDisabled - SQL vulnerability assessment feature is disabled. please enable the feature before executing other SQL vulnerability assessment operations.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 SqlVulnerabilityAssessmentInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidSqlVulnerabilityAssessmentBaselineInput - The SQL vulnerability assessment baseline input is null or empty.

             * 400 InvalidSqlVulnerabilityAssessmentSettingsInput - The SQL vulnerability assessment setting input is null or empty

             * 400 SqlVulnerabilityAssessmentScanResultsAreNotAvailableYet - SQL vulnerability assessment results are not available yet, please try again later.

             * 400 SqlVulnerabilityAssessmentInvalidRuleId - The SQL vulnerability assessment rule id is invalid.

             * 400 SqlVulnerabilityAssessmentScanDoesNotExist - SQL vulnerability assessment scan does not exist.

             * 400 SqlVulnerabilityAssessmentNoBaseline - No baseline have been found for the latest scan in the resource

             * 400 SqlVulnerabilityAssessmentNoRuleBaseline - No SQL vulnerability assessment baseline was found

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResults - No scan results have been found for rule Id. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBadRuleFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadRuleWithoutRuleIdFormat - The provided results do not comply with the actual layout of the scan results

             * 400 SqlVulnerabilityAssessmentBadBinaryRuleWithoutRuleIdFormat - Input for binary rule is not a boolean representation

             * 400 SqlVulnerabilityAssessmentBaselineNoScanResultsWithoutRuleId - No scan results have been found for one of the rules. To set a baseline there must be results for this rule in the latest scan available

             * 400 SqlVulnerabilityAssessmentEmptyBaseline - Baseline not set because the results are null or empty

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - SQL Vulnerability Assessment scan is already in progress

             * 409 SqlVulnerabilityAssessmentStoragefullApiIsEnabled - Vulnerability Assessment is enabled on this server or one of its underlying databases with an incompatible version. Additional troubleshooting information can be found https://aka.ms/SQLVAStoragelessDocumentation.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/syncDatabaseIds?api-version=2020-11-01-preview:
    get:
      tags:
        - SyncGroups
      description: Gets a collection of sync database ids.
      operationId: SyncGroupsSyncDatabaseIds_List
      parameters:
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved collection of sync database ids.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncDatabaseIdListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: SyncGroups_ListSyncDatabaseIds
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/refreshHubSchema?api-version=2020-11-01-preview:
    post:
      tags:
        - SyncGroups
      description: Refreshes a hub database schema.
      operationId: SyncGroups_RefreshHubSchema
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully refreshed a sync hub schema.
        '202':
          description: The sync hub schema refresh operation is on going.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 CannotCreateSyncGroupDueToQuotaExceeded - Cannot create sync group due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncGroupDrop - The sync group is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_UpdateSyncGroupWhenDropping - Cannot update the sync group because it is currently being dropped.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 400 SyncOperation_InvalidSyncInterval - Cannot create or update sync group because the sync interval is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 SyncOperation_DuplicateSyncGroupName - Cannot create sync group because the sync group with the same name already exists.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/hubSchemas?api-version=2020-11-01-preview:
    get:
      tags:
        - SyncGroups
      description: Gets a collection of hub database schemas.
      operationId: SyncGroupsHubSchemas_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully get a sync group hub database schema.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncFullSchemaPropertiesListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 CannotCreateSyncGroupDueToQuotaExceeded - Cannot create sync group due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncGroupDrop - The sync group is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_UpdateSyncGroupWhenDropping - Cannot update the sync group because it is currently being dropped.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 400 SyncOperation_InvalidSyncInterval - Cannot create or update sync group because the sync interval is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncGroupName - Cannot create sync group because the sync group with the same name already exists.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: SyncGroups_ListHubSchemas
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/logs?api-version=2020-11-01-preview:
    get:
      tags:
        - SyncGroups
      description: Gets a collection of sync group logs.
      operationId: SyncGroupsLogs_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group.
          required: true
          schema:
            type: string
        - name: startTime
          in: query
          description: Get logs generated after this time.
          required: true
          schema:
            type: string
        - name: endTime
          in: query
          description: Get logs generated before this time.
          required: true
          schema:
            type: string
        - name: type
          in: query
          description: The types of logs to retrieve.
          required: true
          schema:
            enum:
              - All
              - Error
              - Warning
              - Success
            x-ms-enum:
              name: SyncGroupsType
              modelAsString: true
            type: string
        - name: continuationToken
          in: query
          description: The continuation token for this operation.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved sync group logs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncGroupLogListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 CannotCreateSyncGroupDueToQuotaExceeded - Cannot create sync group due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncGroupDrop - The sync group is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_UpdateSyncGroupWhenDropping - Cannot update the sync group because it is currently being dropped.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 400 SyncOperation_InvalidSyncInterval - Cannot create or update sync group because the sync interval is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncGroupName - Cannot create sync group because the sync group with the same name already exists.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: SyncGroups_ListLogs
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/cancelSync?api-version=2020-11-01-preview:
    post:
      tags:
        - SyncGroups
      description: Cancels a sync group synchronization.
      operationId: SyncGroups_CancelSync
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully cancel a sync group synchronization.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 CannotCreateSyncGroupDueToQuotaExceeded - Cannot create sync group due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncGroupDrop - The sync group is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_UpdateSyncGroupWhenDropping - Cannot update the sync group because it is currently being dropped.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 400 SyncOperation_InvalidSyncInterval - Cannot create or update sync group because the sync interval is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncGroupName - Cannot create sync group because the sync group with the same name already exists.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}/triggerSync?api-version=2020-11-01-preview:
    post:
      tags:
        - SyncGroups
      description: Triggers a sync group synchronization.
      operationId: SyncGroups_TriggerSync
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully triggered a sync group synchronization.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 CannotCreateSyncGroupDueToQuotaExceeded - Cannot create sync group due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncGroupDrop - The sync group is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_UpdateSyncGroupWhenDropping - Cannot update the sync group because it is currently being dropped.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 400 SyncOperation_InvalidSyncInterval - Cannot create or update sync group because the sync interval is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 SyncOperation_DuplicateSyncGroupName - Cannot create sync group because the sync group with the same name already exists.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups/{syncGroupName}?api-version=2020-11-01-preview:
    get:
      tags:
        - SyncGroups
      description: Gets a sync group.
      operationId: SyncGroups_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified sync group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncGroup'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 CannotCreateSyncGroupDueToQuotaExceeded - Cannot create sync group due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncGroupDrop - The sync group is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_UpdateSyncGroupWhenDropping - Cannot update the sync group because it is currently being dropped.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 400 SyncOperation_InvalidSyncInterval - Cannot create or update sync group because the sync interval is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncGroupName - Cannot create sync group because the sync group with the same name already exists.
    put:
      tags:
        - SyncGroups
      description: Creates or updates a sync group.
      operationId: SyncGroups_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested sync group resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncGroup'
      responses:
        '200':
          description: Successfully updated the sync group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncGroup'
        '201':
          description: Successfully created the sync group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncGroup'
        '202':
          description: Creating or updating the sync group is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 CannotCreateSyncGroupDueToQuotaExceeded - Cannot create sync group due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncGroupDrop - The sync group is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_UpdateSyncGroupWhenDropping - Cannot update the sync group because it is currently being dropped.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 400 SyncOperation_InvalidSyncInterval - Cannot create or update sync group because the sync interval is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncGroupName - Cannot create sync group because the sync group with the same name already exists.
      x-ms-long-running-operation: true
    delete:
      tags:
        - SyncGroups
      description: Deletes a sync group.
      operationId: SyncGroups_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the sync group.
        '202':
          description: Deleting the sync group is in progress.
        '204':
          description: The specified sync group does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 CannotCreateSyncGroupDueToQuotaExceeded - Cannot create sync group due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncGroupDrop - The sync group is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_UpdateSyncGroupWhenDropping - Cannot update the sync group because it is currently being dropped.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 400 SyncOperation_InvalidSyncInterval - Cannot create or update sync group because the sync interval is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncGroupName - Cannot create sync group because the sync group with the same name already exists.
      x-ms-long-running-operation: true
    patch:
      tags:
        - SyncGroups
      description: Updates a sync group.
      operationId: SyncGroups_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - name: syncGroupName
          in: path
          description: The name of the sync group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested sync group resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncGroup'
      responses:
        '200':
          description: Successfully updated the sync group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncGroup'
        '202':
          description: Updating the sync group is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 CannotCreateSyncGroupDueToQuotaExceeded - Cannot create sync group due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncGroupDrop - The sync group is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_UpdateSyncGroupWhenDropping - Cannot update the sync group because it is currently being dropped.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 400 SyncOperation_InvalidSyncInterval - Cannot create or update sync group because the sync interval is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncGroupName - Cannot create sync group because the sync group with the same name already exists.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/syncGroups?api-version=2020-11-01-preview:
    get:
      tags:
        - SyncGroups
      description: Lists sync groups under a hub database.
      operationId: SyncGroups_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database on which the sync group is hosted.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of sync groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyncGroupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidSyncGroupCreateOrUpdateRequest - The create or update sync group request body is empty.

             * 400 InvalidSyncMemberCreateOrUpdateRequest - The create or update sync member request body is empty.

             * 400 InvalidSyncAgentCreateOrUpdateRequest - The create or update sync agent request body is empty.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 InvalidSyncAgentResourceId - Invalid sync agent resource identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidParameterValue - An invalid value was given to a parameter.

             * 400 SyncOperation_GenericFailure - Failed to perform data sync operation.

             * 400 InvalidSyncGroup - Sync group is invalid.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 CannotCreateSyncGroupDueToQuotaExceeded - Cannot create sync group due to quota exceeded.

             * 400 SyncOperation_DuplicateSyncGroupDrop - The sync group is already being dropped.

             * 400 SyncOperation_WrongSyncDatabase - The sync database specified does not match the existing one.

             * 400 SyncOperation_UpdateSyncGroupWhenDropping - Cannot update the sync group because it is currently being dropped.

             * 400 SyncOperation_DwInSyncGroup - Cannot use datawarehouse edition in data sync.

             * 400 SyncOperation_MasterDbInSyncGroup - Cannot use logical master in data sync.

             * 400 SyncOperation_InvalidCredential - Credential of database is invalid.

             * 400 InvalidSyncMetadataDatabase - Sync metadata database is invalid.

             * 400 SyncOperation_InvalidSyncInterval - Cannot create or update sync group because the sync interval is invalid.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SyncOperation_HubServerNotFound - Hub logical server does not exist.

             * 404 SyncOperation_InvalidHubDatabase - Hub database is invalid.

             * 409 SyncOperation_DuplicateSyncGroupName - Cannot create sync group because the sync group with the same name already exists.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/restorableDroppedDatabases?api-version=2022-08-01-preview:
    get:
      tags:
        - RestorableDroppedDatabases
      description: Gets a list of restorable dropped databases.
      operationId: RestorableDroppedDatabases_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of restorable dropped databases.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestorableDroppedDatabaseListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/restorableDroppedDatabases/{restorableDroppedDatabaseId}?api-version=2022-08-01-preview:
    get:
      tags:
        - RestorableDroppedDatabases
      description: Gets a restorable dropped database.
      operationId: RestorableDroppedDatabases_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: restorableDroppedDatabaseId
          in: path
          required: true
          schema:
            type: string
        - name: $expand
          in: query
          description: The child resources to include in the response.
          required: false
          schema:
            type: string
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified restorable dropped database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestorableDroppedDatabase'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-odata: '#/components/schemas/RestorableDroppedDatabase'
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/automaticTuning/current?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseAutomaticTuning
      description: Gets a database's automatic tuning.
      operationId: DatabaseAutomaticTuning_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved database automatic tuning properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseAutomaticTuning'
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 SystemDatabasesNotSupported - User tried to get automatic tuning information on system databases.

             * 400 DataWarehouseNotSupported - Automatic tuning is not supported for SQL Data Warehouse.

             * 404 DatabaseDoesNotExist - The requested database was not found

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SubscriptionDoesNotHaveElasticPool - The requested elastic pool was not found

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 405 NotSupported - This functionality is not supported.

             * 409 Conflict - Request could not be processed because of conflict in the request.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.
    patch:
      tags:
        - DatabaseAutomaticTuning
      description: Update automatic tuning properties for target database.
      operationId: DatabaseAutomaticTuning_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested automatic tuning resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseAutomaticTuning'
      responses:
        '200':
          description: Successfully updated the specified database automatic tuning settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseAutomaticTuning'
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 SystemDatabasesNotSupported - User tried to get automatic tuning information on system databases.

             * 400 DataWarehouseNotSupported - Automatic tuning is not supported for SQL Data Warehouse.

             * 400 InvalidAutomaticTuningUpsertRequest - The update automatic tuning request body does not exist or has no properties object.

             * 400 InvalidAdvisorAutoExecuteStatus - Specified auto-execute status for the advisor is not allowed.

             * 404 DatabaseDoesNotExist - The requested database was not found

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SubscriptionDoesNotHaveElasticPool - The requested elastic pool was not found

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 AutomaticTuningOptionNotFound - The requested automatic tuning option was not found.

             * 405 NotSupported - This functionality is not supported.

             * 409 Conflict - Request could not be processed because of conflict in the request.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 DisabledBySystem - This option is disabled by system

             * 409 DefaultAdvisorStateNotAllowedInCustomDbMode - DEFAULT advisor state is not allowed in CUSTOM mode

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/serviceObjectives/{serviceObjectiveName}?api-version=2014-04-01:
    get:
      tags:
        - ServiceObjectives
      operationId: ServiceObjectives_Get
      description: Gets a database service objective.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: serviceObjectiveName
          in: path
          description: The name of the service objective to retrieve.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceObjective'
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/serviceObjectives?api-version=2014-04-01:
    get:
      tags:
        - ServiceObjectives
      operationId: ServiceObjectives_ListByServer
      description: Returns database service objectives.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceObjectiveListResult'
      x-ms-pageable:
        nextLinkName: null
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan?api-version=2020-11-01-preview:
    post:
      tags:
        - ManagedDatabaseVulnerabilityAssessmentScans
      description: Executes a Vulnerability Assessment database scan.
      operationId: ManagedDatabaseVulnerabilityAssessmentScans_InitiateScan
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: scanId
          in: path
          description: The vulnerability assessment scan Id of the scan to retrieve.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully executed a Vulnerability Assessment database scan.
        '202':
          description: Successfully started a Vulnerability Assessment database scan.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidVulnerabilityAssessmentScanIdLength - The vulnerability assessment scan ID length must be below {0} characters.

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export?api-version=2020-11-01-preview:
    post:
      tags:
        - ManagedDatabaseVulnerabilityAssessmentScans
      description: Convert an existing scan result to a human readable format. If already exists nothing happens
      operationId: ManagedDatabaseVulnerabilityAssessmentScans_Export
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the scanned database.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: scanId
          in: path
          description: The vulnerability assessment scan Id.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Scan result was converted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentScansExport'
        '201':
          description: Scan result was converted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentScansExport'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseVulnerabilityAssessmentScans
      description: Lists the vulnerability assessment scans of a database.
      operationId: ManagedDatabaseVulnerabilityAssessmentScans_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database vulnerability assessment scan records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityAssessmentScanRecordListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseVulnerabilityAssessmentScans
      description: Gets a vulnerability assessment scan record of a database.
      operationId: ManagedDatabaseVulnerabilityAssessmentScans_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: scanId
          in: path
          description: The vulnerability assessment scan Id of the scan to retrieve.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database vulnerability assessment scan record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityAssessmentScanRecord'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/transparentDataEncryption/{tdeName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseTransparentDataEncryption
      description: Gets a managed database's transparent data encryption.
      operationId: ManagedDatabaseTransparentDataEncryption_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the managed database for which the transparent data encryption is defined.
          required: true
          schema:
            type: string
        - name: tdeName
          in: path
          description: The name of the transparent data encryption configuration.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: TransparentDataEncryptionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the managed database transparent data encryption.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedTransparentDataEncryption'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultMismatchError - Unexpected Key Vault region found in the http response.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 ReadOnly - Cannot enable or modify database encryption on a database that is read-only, has read-only files or is not recovered.

             * 400 CanNotDropAlterOnMirror - Please modify Transparent Data Encryption on the primary databases.

             * 401 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 401 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 401 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 401 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 401 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 401 CanNotChangeReadOnlyDuringTdeScan - Cannot modify filegroup read-only/read-write state while an encryption transition is in progress.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 NeedsLogBackup - Please wait several minutes for a log backup to occur. 

             * 409 EncryptionInProgress - Cannot modify encryption while an encryption scan in progress.

             * 409 KeyChangeInProgress - Cannot change database encryption key while an encryption, decryption, or key change scan is in progress.

             * 409 NoBulkOperationLock - CREATE/ALTER/DROP DATABASE ENCRYPTION KEY failed because a lock could not be placed on database. Try again later.

             * 409 AltStateConflict - The operation cannot be performed on database because it is involved in a database mirroring session or an availability group. Some operations are not allowed on a database that is participating in a database mirroring session or in an availability group.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 NoDekLock - CREATE/ALTER/DROP DATABASE ENCRYPTION KEY failed because a lock could not be placed on the database. Try again later.
    put:
      tags:
        - ManagedDatabaseTransparentDataEncryption
      description: Updates a database's transparent data encryption configuration.
      operationId: ManagedDatabaseTransparentDataEncryption_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the managed database for which the security alert policy is defined.
          required: true
          schema:
            type: string
        - name: tdeName
          in: path
          description: The name of the transparent data encryption configuration.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: TransparentDataEncryptionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The database transparent data encryption.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedTransparentDataEncryption'
      responses:
        '200':
          description: Successfully updated the database Transparent Data Encryption state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedTransparentDataEncryption'
        '201':
          description: Successfully created the database transparent data encryption state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedTransparentDataEncryption'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultMismatchError - Unexpected Key Vault region found in the http response.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 ReadOnly - Cannot enable or modify database encryption on a database that is read-only, has read-only files or is not recovered.

             * 400 CanNotDropAlterOnMirror - Please modify Transparent Data Encryption on the primary databases.

             * 400 InvalidTransparentDataEncryptionUpdateRequest - Please enter a valid state. Please use "Enabled" or "Disabled".

             * 400 InvalidTransparentDataEncryptionName - The  transparent data encryption key name is not supported.

             * 401 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 401 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 401 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 401 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 401 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 401 CanNotChangeReadOnlyDuringTdeScan - Cannot modify filegroup read-only/read-write state while an encryption transition is in progress.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 NeedsLogBackup - Please wait several minutes for a log backup to occur. 

             * 409 EncryptionInProgress - Cannot modify encryption while an encryption scan in progress.

             * 409 KeyChangeInProgress - Cannot change database encryption key while an encryption, decryption, or key change scan is in progress.

             * 409 NoBulkOperationLock - CREATE/ALTER/DROP DATABASE ENCRYPTION KEY failed because a lock could not be placed on database. Try again later.

             * 409 AltStateConflict - The operation cannot be performed on database because it is involved in a database mirroring session or an availability group. Some operations are not allowed on a database that is participating in a database mirroring session or in an availability group.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 NoDekLock - CREATE/ALTER/DROP DATABASE ENCRYPTION KEY failed because a lock could not be placed on the database. Try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/transparentDataEncryption?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseTransparentDataEncryption
      description: Gets a list of managed database's transparent data encryptions.
      operationId: ManagedDatabaseTransparentDataEncryption_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: managedInstanceName
          in: path
          description: The name of the managed instance.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the managed database for which the transparent data encryption is defined.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of managed database transparent data encryptions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedTransparentDataEncryptionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultMismatchError - Unexpected Key Vault region found in the http response.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 ReadOnly - Cannot enable or modify database encryption on a database that is read-only, has read-only files or is not recovered.

             * 400 CanNotDropAlterOnMirror - Please modify Transparent Data Encryption on the primary databases.

             * 401 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 401 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 401 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 401 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 401 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 401 CanNotChangeReadOnlyDuringTdeScan - Cannot modify filegroup read-only/read-write state while an encryption transition is in progress.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 NeedsLogBackup - Please wait several minutes for a log backup to occur. 

             * 409 EncryptionInProgress - Cannot modify encryption while an encryption scan in progress.

             * 409 KeyChangeInProgress - Cannot change database encryption key while an encryption, decryption, or key change scan is in progress.

             * 409 NoBulkOperationLock - CREATE/ALTER/DROP DATABASE ENCRYPTION KEY failed because a lock could not be placed on database. Try again later.

             * 409 AltStateConflict - The operation cannot be performed on database because it is involved in a database mirroring session or an availability group. Some operations are not allowed on a database that is participating in a database mirroring session or in an availability group.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 NoDekLock - CREATE/ALTER/DROP DATABASE ENCRYPTION KEY failed because a lock could not be placed on the database. Try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases?api-version=2023-02-01-preview:
    get:
      tags:
        - Databases
      description: Gets a list of databases.
      operationId: Databases_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: $skipToken
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of databases.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}?api-version=2023-02-01-preview:
    get:
      tags:
        - Databases
      description: Gets a database.
      operationId: Databases_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: $expand
          in: query
          description: The child resources to include in the response.
          required: false
          schema:
            type: string
        - name: $filter
          in: query
          description: An OData filter expression that filters elements in the collection.
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-odata: '#/components/schemas/Database'
    put:
      tags:
        - Databases
      description: Creates a new database or updates an existing database.
      operationId: Databases_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested database resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Database'
      responses:
        '200':
          description: Successfully updated the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '201':
          description: Successfully created the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '202':
          description: Creating or updating the database is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidDatabaseCreateOrUpdateRequest - The request body for the create or update database operation is invalid.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 InvalidSourceDatabaseId - Invalid source database identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MissingCollation - Collation is required.

             * 400 MissingMaxSizeBytes - MaxSizeBytes is required.

             * 400 MissingSkuName - Sku name is required.

             * 400 MissingSourceDatabaseId - Missing source database identifier.

             * 400 InvalidLicenseType - The specified license type is invalid.

             * 400 InvalidSkuName - Invalid SKU name.

             * 400 MismatchedSkuNameAndCapacity - Mismatch between SKU name and capacity.

             * 400 MismatchedSkuNameAndTier - Mismatch between SKU name and tier.

             * 400 MismatchedSkuNameAndFamily - Mismatch between SKU name and family.

             * 400 LedgerNotAllowedWithSpecifiedCreateMode - IsLedgerOn is not allowed with the specified create mode.

             * 400 LedgerNotAllowedOnSampleDatabase - Database creation is not allowed with IsLedgerOn for a sample database.

             * 400 FreeLimitDatabaseNotAllowedInNonDefaultCreate - Free limit database creation is not allowed in non default create mode.

             * 400 AvailabilityZoneNotSupported - Availability Zones for databases and elastic pools are not yet supported.

             * 400 DatabaseNameDoesNotMatchSourceDatabaseId - The database name specified doesn’t match the database name in sourceDatabaseId.

             * 400 ElasticPoolNotSupportedForExternalBackupRestore - Elastic pool is not supported for external backup restore

             * 400 InvalidRecoverableDatabaseId - Invalid recoverable database identifier.

             * 400 InvalidRecoveryServicesRecoveryPointId - Invalid recovery services recovery point identifier.

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 400 MissingRecoverableDatabaseId - Missing recoverable database identifier.

             * 400 MissingRecoveryServicesRecoveryPointId - Missing recovery services recovery point Id.

             * 400 MissingRestorableDroppedDatabaseId - Missing restorableDroppedDatabaseId

             * 400 MissingRestorePointInTime - Missing restore point in time

             * 400 MissingSourceDatabaseDeletionDate - Missing source database deletion date

             * 400 MissingStorageContainerSasToken - Missing storage container SAS token

             * 400 MissingStorageContainerUri - Missing storage container URI

             * 400 RestorableDroppedDatabaseIdGivenForRestoreWithSourceDatabaseId - Cannot specify restorableDroppedDatabaseId when sourceDatabaseId is already given in restore create mode

             * 400 MultipleIdentitiesOnDatabase - Only one user assigned managed identity is supported at the Database Level.

             * 400 MultipleIdentityDelegationsOnDatabase - Only one identity delegation is supported at the Database Level.

             * 400 MissingPrimaryDelegatedIdentityClientId - In order to use delegated identities please provide a primary delegated identity client id.

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 TokenTooLong - The provided token is too long.

             * 400 CannotMoveOrDropJobAccountDatabase - Cannot drop database associated with job account.

             * 400 JobAgentDatabaseEditionUnsupported - The specified database's service level objective is not supported for use as a job agent database.

             * 400 ServerNotFound - The requested server was not found.

             * 400 InvalidMaxSizeTierCombination - The specified tier does not support the specified database max size.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 CannotUpdateIsLedgerDatabase - The ledger property of an existing database cannot be updated.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 ChangeUnsupportedOnEntity - User attempted an unsupported create/update/delete operation on a given entity.

             * 400 UpdateNotAllowedInCurrentReplicationState - The operation is disallowed on the database in its current replication state.

             * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.

             * 400 ReplicationSourceAndTargetMustHaveSameName - The replication source and target databases must have the same name.

             * 400 ReplicationSourceAndTargetMustBeInDifferentServers - The replication source and target databases must be in different logical servers.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 InvalidDatabaseCreateMode - Invalid request to create a database.

             * 400 TierChangeUnsupportedDueToMemoryOptimizedObject - The database cannot update its sku because it has memory-optimized objects.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 TierChangeUnsupportedDueToCDCEnabledDatabase - The database cannot update its sku because it is enabled for CDC.

             * 400 IsLedgerDatabaseIsNotSupportedOnResourceType - Changing the ledger property is not supported for this resource type.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 OfferDisabledOnSubscription - Subscription offer type is restricted from provisioning the requested resource.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 UnableToCreateGeoChain - User attempted to create secondary database (chaining) even though automatic upload of ledger digests has been configured

             * 400 TargetElasticPoolDoesNotExist - The elastic pool does not exist on a server.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 ElasticPoolSkuCombinationInvalid - Elastic pool and sku can be specified together only if sku is specified as 'ElasticPool'.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 ElasticPoolTierCombinationInvalid - The database tier is different than the elastic pool service tier.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 ElasticPoolNameRequired - User tried to create or update database to elastic pool service objective without specifying the name of the elastic pool.

             * 400 InvalidReadScaleEdition - User attempted to enable read scale on a database type that does not support it.

             * 400 InvalidReadScaleUnits - User attempted to provide a read scale value that is not supported.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 GeoSecondaryMaxSizeUpdateFailed - The geo-secondary database is of a SLO that does not support the requested maxsize value or the geo-secondary is in an unsupported region or an update operation is already in progress on the geo-secondary database.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 ElasticPoolDatabaseCountOverLimit - Attempting to create or add database to elastic pool when the database count limit of the elastic pool has been reached.

             * 400 RequestedDatabaseSizeRequiresShrink - User attempted to ALTER DATABASE MODIFY MAXSIZE to modify the MAXSIZE for a database to a smaller size then the current size.

             * 400 CannotChangeToOrFromDataWarehouseTier - User attempted to change the sku of a database from DataWarehouse tier to non DataWarehouse tiers or vice versa.

             * 400 CurrentDatabaseSizeExceedsDbMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 DatabaseNameInUse - Database already exists. Choose a different database name.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 UnsupportedCapacity - User tried to create or update database with capacity which is not supported.

             * 400 RestoreToFreeEditionNotSupported - Restore and GeoRestore target cannot be free database.

             * 400 RestoreNotSupportedForFreeEdition - Restore and GeoRestore are not supported for free database.

             * 400 InvalidDroppedDatabase - Source database dropped does not exist on server within the supported recovery period.

             * 400 InvalidLiveDatabase - Source database does not exist on server within the supported recovery period. If restoring a dropped database, please specify its deletion date.

             * 400 InvalidVldbRecoverySlo - The Hyperscale edition recovery requires both source and target databases to use Hyperscale service level objective.

             * 400 CannotUpdateToFreeDatabase - Updating a database to the free sku is not supported.

             * 400 InvalidVldbRestoreSlo - The Hyperscale edition Point-In-Time restore requires both source and target databases to use Hyperscale service level objective.

             * 400 CannotSpecifyPoolOrSlo - Specifying an elastic pool and/or changing the service level objective or edition is not supported for edition.

             * 400 InvalidBackupStorageAccountType - User passed zrs/lrs during create/update of a database but it failed either because the customer is not whitelisted or because zrs is not available in the specified region.

             * 400 DatabaseInvalidSkuPropertyCombination - The properties of the requested sku are inconsistent. Please check that a valid combination is specified. See https://docs.microsoft.com/en-us/rest/api/sql/capabilities/listbylocation#serviceobjectivecapability for more details.

             * 400 DatabaseNamedReplicaPerDatabaseLimitExceeded - User tried create a named replica that would exceed the allowed number per primary database

             * 400 UnsupportedBackupStorageRedundancyForEdition - The requested backup storage redundancy is not supported for edition

             * 400 DatabaseIsCurrentlyPinned - Microsoft has pinned your database SQL Server engine version. To ensure your database does not hit production issues, any future scale operations on your database will be blocked until it has been un-pinned. Please contact Microsoft support for assistance with scaling.

             * 400 RestoreTargetEditionSizeInsufficient - User attempted to restore a database to an edition that is a smaller size than the current allocated size of the source.

             * 400 DatabaseCreationBlockedForNonActivatedCMKServer - SQL Pool creations are blocked for CMK enabled workspaces until the workspace is activated. First, enable purge protection and grant the workspace Managed Identity the required permissions (Get, Wrap Key, Unwrap Key) on the Azure Key Vault of the workspace key.  Next, activate your workspace after you have granted access.

             * 400 InvalidIdentityId - One or more identity id(s) provided are not valid ARM resource id(s). Please input valid id(s) and try again.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 InvalidNumberOfIdentities - Only one user assigned managed identity is supported at the Database Level.

             * 400 NoRestorePointAvailable - The source database has not yet accomplished its first backup in order to support restore operations. Please retry the restore request later.

             * 400 DatabaseNamedReplicaChainingNotAllowed - User tried to create a named replica of a named replica which is not allowed.

             * 400 DatabaseNamedReplicaInvalidOperation - User attempted an unsupported operation on a named replica.

             * 400 DatabaseNamedReplicaInvalidSourceDatabase - User attempted to create a named replica in a different subscription or region than the source database.

             * 400 CannotAssignIdentityToMaster - Cannot assign an identity to a system database. Database identity cannot be assigned to 'master', 'model', 'tempdb', 'msdb', or 'resource' databases.

             * 400 PerDatabaseCMKDWNotSupported - Database-level CMK in preview is not supported for Datawarehouse edition.

             * 400 MissingThumbprintCrm - The restore operation of a CRM database failed because a required TDE certificate was missing. Please retry the restore operation to an existing elastic pool.

             * 400 ElasticPoolOverStorage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 RestoreTargetEditionSizeInsufficientV2 - User attempted to restore a database to an edition that is a smaller size than the allocated size of the restored database.

             * 400 ResourcePoolStorageLimitHitDuringRestore - The restored database can't be restored into the resource pool due to the remaining storage capacity in the pool.

             * 400 PerDatabaseCMKRestoreNotSupported - Database restore is not supported when Database-level CMK is configured in preview.

             * 400 PerDatabaseCMKHSNotSupported - Database-level CMK in preview is not supported for Hyperscale edition.

             * 400 PerDatabaseCMKGeoReplicationNotSupported - Geo Replication and Database Copy is not supported when Database-level CMK is configured in preview.

             * 400 InvalidStandbyGeoEdition - User attempted to create a DTU based standby geo.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 GeoRestoreBackupStorageTypeNotSupported - Database recovery requests are invalid when issued against a database that is not configured to use geo-redundant backup storage.

             * 400 RestoreHyperscaleToNonHyperscale - Restoring a Hyperscale database backup to a non-Hyperscale service tier or vice versa is not supported.

             * 400 SubscriptionDoesNotHaveAccessToServer - The subscription does not have access to the specified server(s)

             * 400 RecoveryPointDoesNotExist - The specified recovery point either does not exist or is not valid.

             * 400 LtrBackupNotFound - The specified long term retention backup does not exist.

             * 400 InvalidPointInTime - The specified point in time is not valid for the database.

             * 400 GeoRestoreCannotResolveTargetCluster - Cannot resolve target cluster for server

             * 400 CannotSpecifyEditionOrSloWhenRestoringToPool - Specifying the target service level objective or edition is not supported when restoring to an elastic pool.

             * 400 RestoreNotSupportedForGeoDrSecondary - Point-in-time restore and database recovery operations are not supported on databases that are currently configured as geo-secondaries.

             * 400 DatabaseNamedReplicaBackupRetentionConfigurationNotSupported - User attempted configuring backup retention policy on a Named Replica.

             * 400 GeoRedundantBackupsNotPermittedForSubscription - Geo-redundant backup storage is blocked for all databases under subscription '{0}' by preview feature 'Azure SQL Database Block Geo-redundant Backup Storage'. Please select a different backup storage redundancy.

             * 400 RestoreHyperscaleToNonHyperscaleElasticPool - Restoring a Hyperscale database to an elastic pool which is not Hyperscale or restoring a database which is not Hyperscale to a Hyperscale elastic pool is not supported.

             * 400 RestoreIneligibleDatabaseName - The specified target database name, '{0}', is reserved and cannot be used in a restore operation.

             * 400 RestoreNotSupportedForSystemDb - Restore and database recovery are not supported for system databases.

             * 400 RestoreIneligibleDroppedDatabaseShortLifespan - The source database, '{0}', dropped on '{1}', has not existed long enough to support restores.

             * 400 RestoreIneligibleLiveDatabaseShortLifespan - The source database, '{0}', has not yet accomplished its first backup in order to support restore operations. Please wait until at least the indicated earliest restore date '{1}' and resubmit the request.

             * 400 RestoreCrossServerDisabled - For point-in-time restores, the target logical server must be the same as the source logical server. Consider restoring to the source database's server, or using database copy or database recovery.

             * 400 RestoreSameServerRecoveryDisabled - Same-server recovery is currently not supported. Consider using point-in-time restore or recovering to a different server.

             * 400 RestoreNotSupportedFromLtrBackupToEdition - Restore from long-term retention backup to '{0}' edition not supported.

             * 400 RestoreNotSupportedFromExternalBackupToEdition - Restore from external backup to '{0}' edition not supported.

             * 400 UpdateToServerlessIfLtrIsNotDisabled - Enabling auto-pause for a serverless database is not supported if long-term backup retention is enabled.

             * 400 DuplicateRestoreOperation - A restore request with the same target database name '{0}' on server '{1}' already exists.

             * 400 ExternalBackupUriMalformed - The external backup storage container URI is malformed.

             * 400 ExternalBackupUriHostNotAllowed - The host name for the external backup storage container URI is not allowed.

             * 400 ExternalBackupUriInvalidSchemeOrPort - The external backup storage container URI uses an invalid scheme or port. Please use https and port 443.

             * 400 ExternalBackupVldbUnsupported - Hyperscale does not support external backup restore requests.

             * 400 CannotMoveOrDropSyncMetadataDatabase - Cannot drop database used as sync metadata database.

             * 400 InvalidPitrPriorToVldbMigration - For database '{0}', specified point-in-time '{1}' is prior to the Hyperscale migration time of '{2}'. Please specify a target edition or service level objective which is not Hyperscale when restoring to a point earlier than the Hyperscale migration.

             * 400 MissingKeyVaultUriForRestore - Azure Key Vault key URI '{0}' is required to successfully restore the database '{1}' under server '{2}'.

             * 400 BlockRestoreOnVldbGeoSecondary - Restore of Hyperscale database where source database is geo-secondary is not allowed.

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 400 MaintenanceWindowNotSupportedForNamedReplica - User tried to create or update named replica with non-default maintenance window which is not supported.

             * 400 InvalidStandbyGeoReadScale - User attempted to enable read scale on a standby geo database that does not support it.

             * 400 PerDatabaseCMKKeyRotationAttemptedWhileOldThumbprintInUse - Key Rotation for the TDE Protector at the database level is blocked when active transactions are holding up the log encrypted with old keys. Please refer to aka.ms/azuresqldbkeyrotation for possible strategies to workaround this issue.

             * 400 PerDBCMKNotSupportedWithLTR - Database-level CMK is not supported when Long-term Backup Retention is enabled on the database.

             * 400 PerDatabaseCMKCopyOrReplicationAttemptedWithoutDatabaseLevelEncryptionProtector - Database-level encryption protector must be set on the target database while attempting to copy or replicate a database encrypted with a database level key.

             * 400 PerDatabaseCMKCopyOrReplicationAttemptedWithoutCurrentKeys - While attempting to replicate a database configured with database level encryption protector, the current keys being used by the primary must be passed to the secondary database.

             * 400 PerDatabaseCMKGeoPrimaryIsNotConfiguredWithDatabaseLevelEncryptionProtector - The geo-primary database must be configured with a database level encryption protector before setting a database level encryption protector on the geo-secondary.

             * 400 PerDatabaseCMKGeoPrimaryIsConfiguredWithDatabaseLevelEncryptionProtector - The geo-primary database must not be configured with a database level encryption protector when failing over to a geo-secondary without a database level encryption protector.

             * 400 CreateDatabaseAttemptedWithRotationInProgress - The create database operation can not be performed at this time due to ongoing Transparent Data Encryption (TDE) key rotation on the server. Please try the operation again later.

             * 400 MissingAsymmetricKeyOnTargetServer - Target server does not have access to an asymmetric key.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MultipleDroppedDatabasesWithTheSameName - Found multiple dropped databases with the same name on server.

             * 400 AzureKeyVaultClientError - The Azure Key Vault client encountered an error.

             * 400 AzureKeyVaultClientInfoError - An error occurred while obtaining information for the Azure Key Vault client.

             * 400 UnsupportedBackupStorageRedundancy - Specified Backup Storage Redundancy is not supported in target region.

             * 400 LTRSterlingToVldbMigrationNotSupported - Cannot change service objective for database  to Hyperscale as long-term retention is not yet supported on Hyperscale. Please disable long-term retention on the database and retry.

             * 400 LongTermRetentionMigrationRequestNotSupported - Subscription is not allowed LTR backup Migration feature.

             * 400 LongTermRetentionMigrationCrossClusterRequestNotSupported - Source and target subscriptions are not allowed to communicate for LTR backup copy feature.

             * 400 LongTermRetentionMigrationParameterMissing - Required parameter missing for the operation.

             * 400 LongTermRetentionMigrationSameServerNotSupported - LTR Copy feature is not supported to copy LTR backups within same server.

             * 400 LongTermRetentionMigrationTargetServerNotFound - Target server does not exists or is not ready for LTR backup copy operation.

             * 400 LongTermRetentionMigrationTargetDatabaseNotFound - Target Database does not exists on the server.

             * 400 LongTermRetentionMigrationStorageTypeNotSupported - Specified Backup Storage Redundancy is not supported in target region.

             * 400 LongTermRetentionMigrationStorageMismatch - Active backup redundancy of database does not match backup redundancy requested by customer.

             * 400 LongTermRetentionMigrationDatabaseTypeNotSupported - LTR migration is only supported for managed instance and Azure SQL DB LTR backups.

             * 400 LongTermRetentionMigrationBackupStorageRedundancyNotAllowed - Changing backup storage redundancy is not allowed for LTR Copy operations.

             * 400 LongTermRetentionMigrationSubscriptionNotFound - The subscription could not be found.

             * 400 VBSEnclaveResourcePoolInvalidCombination - Elastic pool {0} and the preferred enclave type {1} combination is invalid.

             * 400 VBSEnclaveNotSupportedForDW - The preferredEnclaveType is not supported in Synapse SQL.

             * 400 VBSEnclaveNotSupportedForDCSeriesSLO - Configuring the 'VBS' preferredEnclaveType for databases using the DC-series hardware configuration is not supported. DC-series databases are pre-configured with Intel SGX enclaves. Virtualization based security (VBS) enclaves are not supported.

             * 400 VBSEnclaveNotSupportedForGeoReplicationWithDefaultEnclave - Configuring geo-replication is not supported for databases using different values of the preferredEnclaveType property. The primary {0} database on the {1} server uses the {2} preferredEnclaveType, whereas the specified preferredEnclaveType for the secondary {3} database on the {4} server is {5}.

             * 400 VBSEnclaveNotSupportedForPlannedFailoverBetweenDatabasesWithDifferentPreferredEnclaveTypes - Planned failover between primary and secondary database with different preferredEnclaveType is not supported for Virtualization-based security (VBS) enclaves.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 404 LongTermRetentionMigrationBackupNotFound - LTR backup specified does not exists.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 InvalidOperationForDatabaseInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 FreeDbAlreadyExists - Only one free database can exist for a subscription per region.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 SkuAssignmentInProgress - The current assignment request cannot be processed because a previous request has not completed.

             * 409 CurrentMemoryUsageExceedsSkuQuota - User attempted an sku update operation that cannot be completed due to the higher resource consumption.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 ServerDtuQuotaExceeded - Could not perform the operation because server would exceed the allowed Database Throughput Unit quota.

             * 409 UpdateSloFailedDatabaseTooBusy - Update SLO operation could not complete because database was too busy.

             * 409 UnableToAlterDatabaseInReplication - User altered edition on a database in a replication relationship.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 ElasticPoolBusy - A management operation was attempted on an elastic pool which is busy.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 TargetElasticPoolBeingUpdated - The update of elastic pool cannot be started because there is copy operation in progress for one of the databases in this elastic pool

             * 409 DatabaseCopyLimitPerReplicaReached - User reached the limit of concurrent database copies.

             * 409 ConflictRequestToUpdateBackupRedundancy - A conflict request to change backup storage redundancy is still in progress.

             * 409 DatabaseElasticPoolMaintenanceConflict - User tried to create or update a database with a specified maintenance configuration that conflicted with that of the elastic pool of the database.

             * 409 SubscriptionVcoreQuotaExceeded - Could not perform the operation because subscription would exceed the allowed vCore quota.

             * 409 LongTermRetentionMigrationRequestConflict - A conflict operation on this LTR backup is still in progress.

             * 409 LongTermRetentionMigrationBackupConflict - Another LTR backup with same backup time for target database exists.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 500 LongTermRetentionMigrationRequestFailedToStartOnTarget - Failed to start LTR backup copy request in target region.

             * 500 LongTermRetentionMigrationRequestCopyFailed - Copy operation failed for LTR backup blobs.

             * 500 LongTermRetentionMigrationRestoreVerExceeded - Restore verification failed after max attempts were reached.

             * 500 LongTermRetentionMigrationRestoreVerFailed - Restore verification failed.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
    delete:
      tags:
        - Databases
      description: Deletes the database.
      operationId: Databases_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the database.
        '202':
          description: Deleting the database is in progress.
        '204':
          description: The specified database does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 LedgerNoDropPrimary - The Geo-primary database cannot be dropped because the database has Ledger Digest Uploads enabled. Disable Ledger Digest Uploads and retry the operation.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 CannotMoveOrDropSyncMetadataDatabase - Cannot drop database used as sync metadata database.

             * 400 CannotDropDatabaseAKVError - The database {0} on server {1} cannot be safely dropped because it is encrypted with a customer managed key that is no longer accessible to take the last backup before drop. Please restore Azure Key Vault Access on the server and revalidate the keys to make this database accessible and then proceed with the drop. For details see https://aka.ms/tdecmkrestorability

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 CannotMoveOrDropJobAccountDatabase - Cannot drop database associated with job account.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
    patch:
      tags:
        - Databases
      description: Updates an existing database.
      operationId: Databases_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested database resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseUpdate'
      responses:
        '200':
          description: Successfully updated the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '202':
          description: Updating the database is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidDatabaseCreateOrUpdateRequest - The request body for the create or update database operation is invalid.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 InvalidSourceDatabaseId - Invalid source database identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MissingCollation - Collation is required.

             * 400 MissingMaxSizeBytes - MaxSizeBytes is required.

             * 400 MissingSkuName - Sku name is required.

             * 400 MissingSourceDatabaseId - Missing source database identifier.

             * 400 InvalidLicenseType - The specified license type is invalid.

             * 400 InvalidSkuName - Invalid SKU name.

             * 400 MismatchedSkuNameAndCapacity - Mismatch between SKU name and capacity.

             * 400 MismatchedSkuNameAndTier - Mismatch between SKU name and tier.

             * 400 MismatchedSkuNameAndFamily - Mismatch between SKU name and family.

             * 400 LedgerNotAllowedWithSpecifiedCreateMode - IsLedgerOn is not allowed with the specified create mode.

             * 400 LedgerNotAllowedOnSampleDatabase - Database creation is not allowed with IsLedgerOn for a sample database.

             * 400 FreeLimitDatabaseNotAllowedInNonDefaultCreate - Free limit database creation is not allowed in non default create mode.

             * 400 AvailabilityZoneNotSupported - Availability Zones for databases and elastic pools are not yet supported.

             * 400 DatabaseNameDoesNotMatchSourceDatabaseId - The database name specified doesn’t match the database name in sourceDatabaseId.

             * 400 ElasticPoolNotSupportedForExternalBackupRestore - Elastic pool is not supported for external backup restore

             * 400 InvalidRecoverableDatabaseId - Invalid recoverable database identifier.

             * 400 InvalidRecoveryServicesRecoveryPointId - Invalid recovery services recovery point identifier.

             * 400 InvalidRestorableDroppedDatabaseDeletionDate - The restorable dropped database deletion date given is invalid

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 400 MissingRecoverableDatabaseId - Missing recoverable database identifier.

             * 400 MissingRecoveryServicesRecoveryPointId - Missing recovery services recovery point Id.

             * 400 MissingRestorableDroppedDatabaseId - Missing restorableDroppedDatabaseId

             * 400 MissingRestorePointInTime - Missing restore point in time

             * 400 MissingSourceDatabaseDeletionDate - Missing source database deletion date

             * 400 MissingStorageContainerSasToken - Missing storage container SAS token

             * 400 MissingStorageContainerUri - Missing storage container URI

             * 400 RestorableDroppedDatabaseIdGivenForRestoreWithSourceDatabaseId - Cannot specify restorableDroppedDatabaseId when sourceDatabaseId is already given in restore create mode

             * 400 MultipleIdentitiesOnDatabase - Only one user assigned managed identity is supported at the Database Level.

             * 400 MultipleIdentityDelegationsOnDatabase - Only one identity delegation is supported at the Database Level.

             * 400 MissingPrimaryDelegatedIdentityClientId - In order to use delegated identities please provide a primary delegated identity client id.

             * 400 LongTermRetentionMigrationRequestNotSupported - Subscription is not allowed LTR backup Migration feature.

             * 400 LongTermRetentionMigrationCrossClusterRequestNotSupported - Source and target subscriptions are not allowed to communicate for LTR backup copy feature.

             * 400 LongTermRetentionMigrationParameterMissing - Required parameter missing for the operation.

             * 400 LongTermRetentionMigrationSameServerNotSupported - LTR Copy feature is not supported to copy LTR backups within same server.

             * 400 LongTermRetentionMigrationTargetServerNotFound - Target server does not exists or is not ready for LTR backup copy operation.

             * 400 LongTermRetentionMigrationTargetDatabaseNotFound - Target Database does not exists on the server.

             * 400 LongTermRetentionMigrationStorageTypeNotSupported - Specified Backup Storage Redundancy is not supported in target region.

             * 400 LongTermRetentionMigrationStorageMismatch - Active backup redundancy of database does not match backup redundancy requested by customer.

             * 400 LongTermRetentionMigrationDatabaseTypeNotSupported - LTR migration is only supported for managed instance and Azure SQL DB LTR backups.

             * 400 LongTermRetentionMigrationBackupStorageRedundancyNotAllowed - Changing backup storage redundancy is not allowed for LTR Copy operations.

             * 400 LongTermRetentionMigrationSubscriptionNotFound - The subscription could not be found.

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 TokenTooLong - The provided token is too long.

             * 400 CannotMoveOrDropJobAccountDatabase - Cannot drop database associated with job account.

             * 400 JobAgentDatabaseEditionUnsupported - The specified database's service level objective is not supported for use as a job agent database.

             * 400 ServerNotFound - The requested server was not found.

             * 400 InvalidMaxSizeTierCombination - The specified tier does not support the specified database max size.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 CannotUpdateIsLedgerDatabase - The ledger property of an existing database cannot be updated.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 ChangeUnsupportedOnEntity - User attempted an unsupported create/update/delete operation on a given entity.

             * 400 UpdateNotAllowedInCurrentReplicationState - The operation is disallowed on the database in its current replication state.

             * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.

             * 400 ReplicationSourceAndTargetMustHaveSameName - The replication source and target databases must have the same name.

             * 400 ReplicationSourceAndTargetMustBeInDifferentServers - The replication source and target databases must be in different logical servers.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 InvalidDatabaseCreateMode - Invalid request to create a database.

             * 400 TierChangeUnsupportedDueToMemoryOptimizedObject - The database cannot update its sku because it has memory-optimized objects.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 TierChangeUnsupportedDueToCDCEnabledDatabase - The database cannot update its sku because it is enabled for CDC.

             * 400 IsLedgerDatabaseIsNotSupportedOnResourceType - Changing the ledger property is not supported for this resource type.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 OfferDisabledOnSubscription - Subscription offer type is restricted from provisioning the requested resource.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 UnableToCreateGeoChain - User attempted to create secondary database (chaining) even though automatic upload of ledger digests has been configured

             * 400 TargetElasticPoolDoesNotExist - The elastic pool does not exist on a server.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 ElasticPoolSkuCombinationInvalid - Elastic pool and sku can be specified together only if sku is specified as 'ElasticPool'.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 ElasticPoolTierCombinationInvalid - The database tier is different than the elastic pool service tier.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 ElasticPoolNameRequired - User tried to create or update database to elastic pool service objective without specifying the name of the elastic pool.

             * 400 InvalidReadScaleEdition - User attempted to enable read scale on a database type that does not support it.

             * 400 InvalidReadScaleUnits - User attempted to provide a read scale value that is not supported.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 GeoSecondaryMaxSizeUpdateFailed - The geo-secondary database is of a SLO that does not support the requested maxsize value or the geo-secondary is in an unsupported region or an update operation is already in progress on the geo-secondary database.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 ElasticPoolDatabaseCountOverLimit - Attempting to create or add database to elastic pool when the database count limit of the elastic pool has been reached.

             * 400 RequestedDatabaseSizeRequiresShrink - User attempted to ALTER DATABASE MODIFY MAXSIZE to modify the MAXSIZE for a database to a smaller size then the current size.

             * 400 CannotChangeToOrFromDataWarehouseTier - User attempted to change the sku of a database from DataWarehouse tier to non DataWarehouse tiers or vice versa.

             * 400 CurrentDatabaseSizeExceedsDbMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 DatabaseNameInUse - Database already exists. Choose a different database name.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 UnsupportedCapacity - User tried to create or update database with capacity which is not supported.

             * 400 RestoreToFreeEditionNotSupported - Restore and GeoRestore target cannot be free database.

             * 400 RestoreNotSupportedForFreeEdition - Restore and GeoRestore are not supported for free database.

             * 400 InvalidDroppedDatabase - Source database dropped does not exist on server within the supported recovery period.

             * 400 InvalidLiveDatabase - Source database does not exist on server within the supported recovery period. If restoring a dropped database, please specify its deletion date.

             * 400 InvalidVldbRecoverySlo - The Hyperscale edition recovery requires both source and target databases to use Hyperscale service level objective.

             * 400 CannotUpdateToFreeDatabase - Updating a database to the free sku is not supported.

             * 400 InvalidVldbRestoreSlo - The Hyperscale edition Point-In-Time restore requires both source and target databases to use Hyperscale service level objective.

             * 400 CannotSpecifyPoolOrSlo - Specifying an elastic pool and/or changing the service level objective or edition is not supported for edition.

             * 400 InvalidBackupStorageAccountType - User passed zrs/lrs during create/update of a database but it failed either because the customer is not whitelisted or because zrs is not available in the specified region.

             * 400 DatabaseInvalidSkuPropertyCombination - The properties of the requested sku are inconsistent. Please check that a valid combination is specified. See https://docs.microsoft.com/en-us/rest/api/sql/capabilities/listbylocation#serviceobjectivecapability for more details.

             * 400 DatabaseNamedReplicaPerDatabaseLimitExceeded - User tried create a named replica that would exceed the allowed number per primary database

             * 400 UnsupportedBackupStorageRedundancyForEdition - The requested backup storage redundancy is not supported for edition

             * 400 DatabaseIsCurrentlyPinned - Microsoft has pinned your database SQL Server engine version. To ensure your database does not hit production issues, any future scale operations on your database will be blocked until it has been un-pinned. Please contact Microsoft support for assistance with scaling.

             * 400 RestoreTargetEditionSizeInsufficient - User attempted to restore a database to an edition that is a smaller size than the current allocated size of the source.

             * 400 DatabaseCreationBlockedForNonActivatedCMKServer - SQL Pool creations are blocked for CMK enabled workspaces until the workspace is activated. First, enable purge protection and grant the workspace Managed Identity the required permissions (Get, Wrap Key, Unwrap Key) on the Azure Key Vault of the workspace key.  Next, activate your workspace after you have granted access.

             * 400 InvalidIdentityId - One or more identity id(s) provided are not valid ARM resource id(s). Please input valid id(s) and try again.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 InvalidNumberOfIdentities - Only one user assigned managed identity is supported at the Database Level.

             * 400 NoRestorePointAvailable - The source database has not yet accomplished its first backup in order to support restore operations. Please retry the restore request later.

             * 400 DatabaseNamedReplicaChainingNotAllowed - User tried to create a named replica of a named replica which is not allowed.

             * 400 DatabaseNamedReplicaInvalidOperation - User attempted an unsupported operation on a named replica.

             * 400 DatabaseNamedReplicaInvalidSourceDatabase - User attempted to create a named replica in a different subscription or region than the source database.

             * 400 CannotAssignIdentityToMaster - Cannot assign an identity to a system database. Database identity cannot be assigned to 'master', 'model', 'tempdb', 'msdb', or 'resource' databases.

             * 400 PerDatabaseCMKDWNotSupported - Database-level CMK in preview is not supported for Datawarehouse edition.

             * 400 MissingThumbprintCrm - The restore operation of a CRM database failed because a required TDE certificate was missing. Please retry the restore operation to an existing elastic pool.

             * 400 ElasticPoolOverStorage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 RestoreTargetEditionSizeInsufficientV2 - User attempted to restore a database to an edition that is a smaller size than the allocated size of the restored database.

             * 400 ResourcePoolStorageLimitHitDuringRestore - The restored database can't be restored into the resource pool due to the remaining storage capacity in the pool.

             * 400 PerDatabaseCMKRestoreNotSupported - Database restore is not supported when Database-level CMK is configured in preview.

             * 400 PerDatabaseCMKHSNotSupported - Database-level CMK in preview is not supported for Hyperscale edition.

             * 400 PerDatabaseCMKGeoReplicationNotSupported - Geo Replication and Database Copy is not supported when Database-level CMK is configured in preview.

             * 400 InvalidStandbyGeoEdition - User attempted to create a DTU based standby geo.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 GeoRestoreBackupStorageTypeNotSupported - Database recovery requests are invalid when issued against a database that is not configured to use geo-redundant backup storage.

             * 400 RestoreHyperscaleToNonHyperscale - Restoring a Hyperscale database backup to a non-Hyperscale service tier or vice versa is not supported.

             * 400 SubscriptionDoesNotHaveAccessToServer - The subscription does not have access to the specified server(s)

             * 400 RecoveryPointDoesNotExist - The specified recovery point either does not exist or is not valid.

             * 400 LtrBackupNotFound - The specified long term retention backup does not exist.

             * 400 InvalidPointInTime - The specified point in time is not valid for the database.

             * 400 GeoRestoreCannotResolveTargetCluster - Cannot resolve target cluster for server

             * 400 CannotSpecifyEditionOrSloWhenRestoringToPool - Specifying the target service level objective or edition is not supported when restoring to an elastic pool.

             * 400 RestoreNotSupportedForGeoDrSecondary - Point-in-time restore and database recovery operations are not supported on databases that are currently configured as geo-secondaries.

             * 400 DatabaseNamedReplicaBackupRetentionConfigurationNotSupported - User attempted configuring backup retention policy on a Named Replica.

             * 400 GeoRedundantBackupsNotPermittedForSubscription - Geo-redundant backup storage is blocked for all databases under subscription '{0}' by preview feature 'Azure SQL Database Block Geo-redundant Backup Storage'. Please select a different backup storage redundancy.

             * 400 RestoreHyperscaleToNonHyperscaleElasticPool - Restoring a Hyperscale database to an elastic pool which is not Hyperscale or restoring a database which is not Hyperscale to a Hyperscale elastic pool is not supported.

             * 400 RestoreIneligibleDatabaseName - The specified target database name, '{0}', is reserved and cannot be used in a restore operation.

             * 400 RestoreNotSupportedForSystemDb - Restore and database recovery are not supported for system databases.

             * 400 RestoreIneligibleDroppedDatabaseShortLifespan - The source database, '{0}', dropped on '{1}', has not existed long enough to support restores.

             * 400 RestoreIneligibleLiveDatabaseShortLifespan - The source database, '{0}', has not yet accomplished its first backup in order to support restore operations. Please wait until at least the indicated earliest restore date '{1}' and resubmit the request.

             * 400 RestoreCrossServerDisabled - For point-in-time restores, the target logical server must be the same as the source logical server. Consider restoring to the source database's server, or using database copy or database recovery.

             * 400 RestoreSameServerRecoveryDisabled - Same-server recovery is currently not supported. Consider using point-in-time restore or recovering to a different server.

             * 400 RestoreNotSupportedFromLtrBackupToEdition - Restore from long-term retention backup to '{0}' edition not supported.

             * 400 RestoreNotSupportedFromExternalBackupToEdition - Restore from external backup to '{0}' edition not supported.

             * 400 UpdateToServerlessIfLtrIsNotDisabled - Enabling auto-pause for a serverless database is not supported if long-term backup retention is enabled.

             * 400 DuplicateRestoreOperation - A restore request with the same target database name '{0}' on server '{1}' already exists.

             * 400 ExternalBackupUriMalformed - The external backup storage container URI is malformed.

             * 400 ExternalBackupUriHostNotAllowed - The host name for the external backup storage container URI is not allowed.

             * 400 ExternalBackupUriInvalidSchemeOrPort - The external backup storage container URI uses an invalid scheme or port. Please use https and port 443.

             * 400 ExternalBackupVldbUnsupported - Hyperscale does not support external backup restore requests.

             * 400 CannotMoveOrDropSyncMetadataDatabase - Cannot drop database used as sync metadata database.

             * 400 InvalidPitrPriorToVldbMigration - For database '{0}', specified point-in-time '{1}' is prior to the Hyperscale migration time of '{2}'. Please specify a target edition or service level objective which is not Hyperscale when restoring to a point earlier than the Hyperscale migration.

             * 400 MissingKeyVaultUriForRestore - Azure Key Vault key URI '{0}' is required to successfully restore the database '{1}' under server '{2}'.

             * 400 BlockRestoreOnVldbGeoSecondary - Restore of Hyperscale database where source database is geo-secondary is not allowed.

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 400 MaintenanceWindowNotSupportedForNamedReplica - User tried to create or update named replica with non-default maintenance window which is not supported.

             * 400 InvalidStandbyGeoReadScale - User attempted to enable read scale on a standby geo database that does not support it.

             * 400 PerDatabaseCMKKeyRotationAttemptedWhileOldThumbprintInUse - Key Rotation for the TDE Protector at the database level is blocked when active transactions are holding up the log encrypted with old keys. Please refer to aka.ms/azuresqldbkeyrotation for possible strategies to workaround this issue.

             * 400 PerDBCMKNotSupportedWithLTR - Database-level CMK is not supported when Long-term Backup Retention is enabled on the database.

             * 400 PerDatabaseCMKCopyOrReplicationAttemptedWithoutDatabaseLevelEncryptionProtector - Database-level encryption protector must be set on the target database while attempting to copy or replicate a database encrypted with a database level key.

             * 400 PerDatabaseCMKCopyOrReplicationAttemptedWithoutCurrentKeys - While attempting to replicate a database configured with database level encryption protector, the current keys being used by the primary must be passed to the secondary database.

             * 400 PerDatabaseCMKGeoPrimaryIsNotConfiguredWithDatabaseLevelEncryptionProtector - The geo-primary database must be configured with a database level encryption protector before setting a database level encryption protector on the geo-secondary.

             * 400 PerDatabaseCMKGeoPrimaryIsConfiguredWithDatabaseLevelEncryptionProtector - The geo-primary database must not be configured with a database level encryption protector when failing over to a geo-secondary without a database level encryption protector.

             * 400 CreateDatabaseAttemptedWithRotationInProgress - The create database operation can not be performed at this time due to ongoing Transparent Data Encryption (TDE) key rotation on the server. Please try the operation again later.

             * 400 MissingAsymmetricKeyOnTargetServer - Target server does not have access to an asymmetric key.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MultipleDroppedDatabasesWithTheSameName - Found multiple dropped databases with the same name on server.

             * 400 AzureKeyVaultClientError - The Azure Key Vault client encountered an error.

             * 400 AzureKeyVaultClientInfoError - An error occurred while obtaining information for the Azure Key Vault client.

             * 400 UnsupportedBackupStorageRedundancy - Specified Backup Storage Redundancy is not supported in target region.

             * 400 LTRSterlingToVldbMigrationNotSupported - Cannot change service objective for database  to Hyperscale as long-term retention is not yet supported on Hyperscale. Please disable long-term retention on the database and retry.

             * 400 VBSEnclaveResourcePoolInvalidCombination - Elastic pool {0} and the preferred enclave type {1} combination is invalid.

             * 400 VBSEnclaveNotSupportedForDW - The preferredEnclaveType is not supported in Synapse SQL.

             * 400 VBSEnclaveNotSupportedForDCSeriesSLO - Configuring the 'VBS' preferredEnclaveType for databases using the DC-series hardware configuration is not supported. DC-series databases are pre-configured with Intel SGX enclaves. Virtualization based security (VBS) enclaves are not supported.

             * 400 VBSEnclaveNotSupportedForGeoReplicationWithDefaultEnclave - Configuring geo-replication is not supported for databases using different values of the preferredEnclaveType property. The primary {0} database on the {1} server uses the {2} preferredEnclaveType, whereas the specified preferredEnclaveType for the secondary {3} database on the {4} server is {5}.

             * 400 VBSEnclaveNotSupportedForPlannedFailoverBetweenDatabasesWithDifferentPreferredEnclaveTypes - Planned failover between primary and secondary database with different preferredEnclaveType is not supported for Virtualization-based security (VBS) enclaves.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 LongTermRetentionMigrationBackupNotFound - LTR backup specified does not exists.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 LongTermRetentionMigrationRequestConflict - A conflict operation on this LTR backup is still in progress.

             * 409 LongTermRetentionMigrationBackupConflict - Another LTR backup with same backup time for target database exists.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 InvalidOperationForDatabaseInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 FreeDbAlreadyExists - Only one free database can exist for a subscription per region.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 SkuAssignmentInProgress - The current assignment request cannot be processed because a previous request has not completed.

             * 409 CurrentMemoryUsageExceedsSkuQuota - User attempted an sku update operation that cannot be completed due to the higher resource consumption.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 ServerDtuQuotaExceeded - Could not perform the operation because server would exceed the allowed Database Throughput Unit quota.

             * 409 UpdateSloFailedDatabaseTooBusy - Update SLO operation could not complete because database was too busy.

             * 409 UnableToAlterDatabaseInReplication - User altered edition on a database in a replication relationship.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 ElasticPoolBusy - A management operation was attempted on an elastic pool which is busy.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 TargetElasticPoolBeingUpdated - The update of elastic pool cannot be started because there is copy operation in progress for one of the databases in this elastic pool

             * 409 DatabaseCopyLimitPerReplicaReached - User reached the limit of concurrent database copies.

             * 409 ConflictRequestToUpdateBackupRedundancy - A conflict request to change backup storage redundancy is still in progress.

             * 409 DatabaseElasticPoolMaintenanceConflict - User tried to create or update a database with a specified maintenance configuration that conflicted with that of the elastic pool of the database.

             * 409 SubscriptionVcoreQuotaExceeded - Could not perform the operation because subscription would exceed the allowed vCore quota.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 LongTermRetentionMigrationRequestFailedToStartOnTarget - Failed to start LTR backup copy request in target region.

             * 500 LongTermRetentionMigrationRequestCopyFailed - Copy operation failed for LTR backup blobs.

             * 500 LongTermRetentionMigrationRestoreVerExceeded - Restore verification failed after max attempts were reached.

             * 500 LongTermRetentionMigrationRestoreVerFailed - Restore verification failed.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/export?api-version=2023-02-01-preview:
    post:
      tags:
        - Databases
      description: Exports a database.
      operationId: Databases_Export
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The database export request parameters.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportDatabaseDefinition'
      responses:
        '200':
          description: Successfully exported the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportExportOperationResult'
        '202':
          description: Exporting the database is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 MissingImportExportInputParameters - Missing ImportExport input parameters.

             * 400 InvalidImportExportInputParameter - The import/export request failed due to an invalid input parameter.

             * 400 PolybaseImportAuthenticationTypeNotSupported - Authentication type parameter is not support for PolybaseImport operation.

             * 400 DatabaseExtensionsInvalidOperationMode - Invalid operationMode parameter for database extension.

             * 400 DatabaseExtensionsInvalidStorageKeyType - The storage key type must by 'StorageAccessKey'.

             * 400 DatabaseExtensionsMissingStorageUri - Storage URI cannot be empty.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 InvalidImportExportOperationResourceLocks - The Import/Export request is invalid due to locks on the Private Link resources.

             * 400 DatabaseInvalidSkuPropertyCombination - The properties of the requested sku are inconsistent. Please check that a valid combination is specified. See https://docs.microsoft.com/en-us/rest/api/sql/capabilities/listbylocation#serviceobjectivecapability for more details.

             * 400 InvalidMaxSizeTierCombination - The specified tier does not support the specified database max size.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidImportExportParameter - The Import/Export request failed due to an invalid input parameter.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidOperationType - Provide a valid operation type.

             * 400 ImportExportJobError - The ImportExport operation has failed.

             * 400 BlockedByOutboundFirewall - The outbound firewall rules blocked the request.

             * 400 InvalidImportExportStorageCredentials - Import/Export operation failed due to invalid storage credentials

             * 400 InvalidImportExportStorageAuthType - Import/Export operation failed due to invalid storage auth type

             * 400 InvalidImportExportStorageKeyFormat - Import/Export operation failed due to invalid storage key format

             * 400 LongImportExportStorageUri - Import/Export operation failed due to long storage URI

             * 400 LargeExportDatabaseSize - Export operation failed because database is larger than max supported size

             * 400 UnSupportedImportExportEdition - ImportExport operation failed because it is targeting a invalid edition

             * 400 InvalidImportExportStorageURI - ImportExport operation failed because storage URI is invalid

             * 400 InvalidSqlAuthType - ImportExport operation failed because the sql authentication type is invalid

             * 400 BlobAlreadyExist - ImportExport operation failed because the storage blob is already exists

             * 404 ResourceNotFound - Invalid request specifying a non-existent resource.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ImportExportOperationIdNotFound - The operation Id for import or export cannot be found.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ImportExportOperationInProgress - There is an import or export operation in progress on the database.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/failover?api-version=2023-02-01-preview:
    post:
      tags:
        - Databases
      description: Failovers a database.
      operationId: Databases_Failover
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database to failover.
          required: true
          schema:
            type: string
        - name: replicaType
          in: query
          description: The type of replica to be failed over.
          required: false
          schema:
            enum:
              - Primary
              - ReadableSecondary
            x-ms-enum:
              name: ReplicaType
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully completed database failover.
        '202':
          description: Database failover is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 400 DatabaseFailoverThrottled - There was a recent failover on the database or pool if database belongs in an elastic pool.

             * 400 DatabaseFailoverNotSupportedOnSKU - This type of customer initiated failover is not supported on the given SKU.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 409 DatabaseNotInStateToFailover - The database is currently in a state such that failover cannot be issued.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/import?api-version=2023-02-01-preview:
    post:
      tags:
        - Databases
      description: Imports a bacpac into a new database.
      operationId: Databases_Import
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The database import request parameters.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportExistingDatabaseDefinition'
      responses:
        '200':
          description: Successfully imported the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImportExportOperationResult'
        '202':
          description: Importing the database is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 MissingImportExportInputParameters - Missing ImportExport input parameters.

             * 400 InvalidImportExportInputParameter - The import/export request failed due to an invalid input parameter.

             * 400 PolybaseImportAuthenticationTypeNotSupported - Authentication type parameter is not support for PolybaseImport operation.

             * 400 DatabaseExtensionsInvalidOperationMode - Invalid operationMode parameter for database extension.

             * 400 DatabaseExtensionsInvalidStorageKeyType - The storage key type must by 'StorageAccessKey'.

             * 400 DatabaseExtensionsMissingStorageUri - Storage URI cannot be empty.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 InvalidImportExportOperationResourceLocks - The Import/Export request is invalid due to locks on the Private Link resources.

             * 400 DatabaseInvalidSkuPropertyCombination - The properties of the requested sku are inconsistent. Please check that a valid combination is specified. See https://docs.microsoft.com/en-us/rest/api/sql/capabilities/listbylocation#serviceobjectivecapability for more details.

             * 400 InvalidMaxSizeTierCombination - The specified tier does not support the specified database max size.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidImportExportParameter - The Import/Export request failed due to an invalid input parameter.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidOperationType - Provide a valid operation type.

             * 400 ImportExportJobError - The ImportExport operation has failed.

             * 400 BlockedByOutboundFirewall - The outbound firewall rules blocked the request.

             * 400 InvalidImportExportStorageCredentials - Import/Export operation failed due to invalid storage credentials

             * 400 InvalidImportExportStorageAuthType - Import/Export operation failed due to invalid storage auth type

             * 400 InvalidImportExportStorageKeyFormat - Import/Export operation failed due to invalid storage key format

             * 400 LongImportExportStorageUri - Import/Export operation failed due to long storage URI

             * 400 LargeExportDatabaseSize - Export operation failed because database is larger than max supported size

             * 400 UnSupportedImportExportEdition - ImportExport operation failed because it is targeting a invalid edition

             * 400 InvalidImportExportStorageURI - ImportExport operation failed because storage URI is invalid

             * 400 InvalidSqlAuthType - ImportExport operation failed because the sql authentication type is invalid

             * 400 BlobAlreadyExist - ImportExport operation failed because the storage blob is already exists

             * 404 ResourceNotFound - Invalid request specifying a non-existent resource.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ImportExportOperationIdNotFound - The operation Id for import or export cannot be found.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ImportExportOperationInProgress - There is an import or export operation in progress on the database.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/move?api-version=2023-02-01-preview:
    post:
      tags:
        - Databases
      description: Renames a database.
      operationId: Databases_Rename
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database to rename.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The resource move definition for renaming this database.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceMoveDefinition'
      responses:
        '200':
          description: Successfully renamed the database.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceMoveRequest - The resource move request is invalid.

             * 400 InvalidMoveTargetResourceId - The target resource identifier in move request is invalid.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 DatabaseNameInUse - Database already exists. Choose a different database name.

             * 400 TokenTooLong - The provided token is too long.

             * 400 CannotMoveOrDropSyncMetadataDatabase - Cannot drop database used as sync metadata database.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 CannotMoveOrDropJobAccountDatabase - Cannot drop database associated with job account.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 409 InvalidOperationForDatabaseInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/pause?api-version=2023-02-01-preview:
    post:
      tags:
        - Databases
      description: Pauses a database.
      operationId: Databases_Pause
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database to be paused.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully paused the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '202':
          description: Pausing the database is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 CannotDeactivateWhenDeactivatingInProgress - Deactivation workflow failed because there is a deactivate workflow already running.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/resume?api-version=2023-02-01-preview:
    post:
      tags:
        - Databases
      description: Resumes a database.
      operationId: Databases_Resume
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database to be resumed.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully resumed the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
        '202':
          description: Resuming the database is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/upgradeDataWarehouse?api-version=2023-02-01-preview:
    post:
      tags:
        - Databases
      description: Upgrades a data warehouse.
      operationId: Databases_UpgradeDataWarehouse
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the database to be upgraded.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully upgraded the data warehouse.
        '202':
          description: Upgrading the data warehouse is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 TokenTooLong - The provided token is too long.

             * 400 CannotMoveOrDropJobAccountDatabase - Cannot drop database associated with job account.

             * 400 JobAgentDatabaseEditionUnsupported - The specified database's service level objective is not supported for use as a job agent database.

             * 400 ServerNotFound - The requested server was not found.

             * 400 InvalidMaxSizeTierCombination - The specified tier does not support the specified database max size.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 CannotUpdateIsLedgerDatabase - The ledger property of an existing database cannot be updated.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 ChangeUnsupportedOnEntity - User attempted an unsupported create/update/delete operation on a given entity.

             * 400 UpdateNotAllowedInCurrentReplicationState - The operation is disallowed on the database in its current replication state.

             * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.

             * 400 ReplicationSourceAndTargetMustHaveSameName - The replication source and target databases must have the same name.

             * 400 ReplicationSourceAndTargetMustBeInDifferentServers - The replication source and target databases must be in different logical servers.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 InvalidDatabaseCreateMode - Invalid request to create a database.

             * 400 TierChangeUnsupportedDueToMemoryOptimizedObject - The database cannot update its sku because it has memory-optimized objects.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 TierChangeUnsupportedDueToCDCEnabledDatabase - The database cannot update its sku because it is enabled for CDC.

             * 400 IsLedgerDatabaseIsNotSupportedOnResourceType - Changing the ledger property is not supported for this resource type.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 OfferDisabledOnSubscription - Subscription offer type is restricted from provisioning the requested resource.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 UnableToCreateGeoChain - User attempted to create secondary database (chaining) even though automatic upload of ledger digests has been configured

             * 400 TargetElasticPoolDoesNotExist - The elastic pool does not exist on a server.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 ElasticPoolSkuCombinationInvalid - Elastic pool and sku can be specified together only if sku is specified as 'ElasticPool'.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 ElasticPoolTierCombinationInvalid - The database tier is different than the elastic pool service tier.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 ElasticPoolNameRequired - User tried to create or update database to elastic pool service objective without specifying the name of the elastic pool.

             * 400 InvalidReadScaleEdition - User attempted to enable read scale on a database type that does not support it.

             * 400 InvalidReadScaleUnits - User attempted to provide a read scale value that is not supported.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 GeoSecondaryMaxSizeUpdateFailed - The geo-secondary database is of a SLO that does not support the requested maxsize value or the geo-secondary is in an unsupported region or an update operation is already in progress on the geo-secondary database.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 ElasticPoolDatabaseCountOverLimit - Attempting to create or add database to elastic pool when the database count limit of the elastic pool has been reached.

             * 400 RequestedDatabaseSizeRequiresShrink - User attempted to ALTER DATABASE MODIFY MAXSIZE to modify the MAXSIZE for a database to a smaller size then the current size.

             * 400 CannotChangeToOrFromDataWarehouseTier - User attempted to change the sku of a database from DataWarehouse tier to non DataWarehouse tiers or vice versa.

             * 400 CurrentDatabaseSizeExceedsDbMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 DatabaseNameInUse - Database already exists. Choose a different database name.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 UnsupportedCapacity - User tried to create or update database with capacity which is not supported.

             * 400 RestoreToFreeEditionNotSupported - Restore and GeoRestore target cannot be free database.

             * 400 RestoreNotSupportedForFreeEdition - Restore and GeoRestore are not supported for free database.

             * 400 InvalidDroppedDatabase - Source database dropped does not exist on server within the supported recovery period.

             * 400 InvalidLiveDatabase - Source database does not exist on server within the supported recovery period. If restoring a dropped database, please specify its deletion date.

             * 400 InvalidVldbRecoverySlo - The Hyperscale edition recovery requires both source and target databases to use Hyperscale service level objective.

             * 400 CannotUpdateToFreeDatabase - Updating a database to the free sku is not supported.

             * 400 InvalidVldbRestoreSlo - The Hyperscale edition Point-In-Time restore requires both source and target databases to use Hyperscale service level objective.

             * 400 CannotSpecifyPoolOrSlo - Specifying an elastic pool and/or changing the service level objective or edition is not supported for edition.

             * 400 InvalidBackupStorageAccountType - User passed zrs/lrs during create/update of a database but it failed either because the customer is not whitelisted or because zrs is not available in the specified region.

             * 400 DatabaseInvalidSkuPropertyCombination - The properties of the requested sku are inconsistent. Please check that a valid combination is specified. See https://docs.microsoft.com/en-us/rest/api/sql/capabilities/listbylocation#serviceobjectivecapability for more details.

             * 400 DatabaseNamedReplicaPerDatabaseLimitExceeded - User tried create a named replica that would exceed the allowed number per primary database

             * 400 UnsupportedBackupStorageRedundancyForEdition - The requested backup storage redundancy is not supported for edition

             * 400 DatabaseIsCurrentlyPinned - Microsoft has pinned your database SQL Server engine version. To ensure your database does not hit production issues, any future scale operations on your database will be blocked until it has been un-pinned. Please contact Microsoft support for assistance with scaling.

             * 400 RestoreTargetEditionSizeInsufficient - User attempted to restore a database to an edition that is a smaller size than the current allocated size of the source.

             * 400 DatabaseCreationBlockedForNonActivatedCMKServer - SQL Pool creations are blocked for CMK enabled workspaces until the workspace is activated. First, enable purge protection and grant the workspace Managed Identity the required permissions (Get, Wrap Key, Unwrap Key) on the Azure Key Vault of the workspace key.  Next, activate your workspace after you have granted access.

             * 400 InvalidIdentityId - One or more identity id(s) provided are not valid ARM resource id(s). Please input valid id(s) and try again.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 InvalidNumberOfIdentities - Only one user assigned managed identity is supported at the Database Level.

             * 400 NoRestorePointAvailable - The source database has not yet accomplished its first backup in order to support restore operations. Please retry the restore request later.

             * 400 DatabaseNamedReplicaChainingNotAllowed - User tried to create a named replica of a named replica which is not allowed.

             * 400 DatabaseNamedReplicaInvalidOperation - User attempted an unsupported operation on a named replica.

             * 400 DatabaseNamedReplicaInvalidSourceDatabase - User attempted to create a named replica in a different subscription or region than the source database.

             * 400 CannotAssignIdentityToMaster - Cannot assign an identity to a system database. Database identity cannot be assigned to 'master', 'model', 'tempdb', 'msdb', or 'resource' databases.

             * 400 PerDatabaseCMKDWNotSupported - Database-level CMK in preview is not supported for Datawarehouse edition.

             * 400 MissingThumbprintCrm - The restore operation of a CRM database failed because a required TDE certificate was missing. Please retry the restore operation to an existing elastic pool.

             * 400 ElasticPoolOverStorage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 RestoreTargetEditionSizeInsufficientV2 - User attempted to restore a database to an edition that is a smaller size than the allocated size of the restored database.

             * 400 ResourcePoolStorageLimitHitDuringRestore - The restored database can't be restored into the resource pool due to the remaining storage capacity in the pool.

             * 400 PerDatabaseCMKRestoreNotSupported - Database restore is not supported when Database-level CMK is configured in preview.

             * 400 PerDatabaseCMKHSNotSupported - Database-level CMK in preview is not supported for Hyperscale edition.

             * 400 PerDatabaseCMKGeoReplicationNotSupported - Geo Replication and Database Copy is not supported when Database-level CMK is configured in preview.

             * 400 InvalidStandbyGeoEdition - User attempted to create a DTU based standby geo.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 GeoRestoreBackupStorageTypeNotSupported - Database recovery requests are invalid when issued against a database that is not configured to use geo-redundant backup storage.

             * 400 RestoreHyperscaleToNonHyperscale - Restoring a Hyperscale database backup to a non-Hyperscale service tier or vice versa is not supported.

             * 400 SubscriptionDoesNotHaveAccessToServer - The subscription does not have access to the specified server(s)

             * 400 RecoveryPointDoesNotExist - The specified recovery point either does not exist or is not valid.

             * 400 LtrBackupNotFound - The specified long term retention backup does not exist.

             * 400 InvalidPointInTime - The specified point in time is not valid for the database.

             * 400 GeoRestoreCannotResolveTargetCluster - Cannot resolve target cluster for server

             * 400 CannotSpecifyEditionOrSloWhenRestoringToPool - Specifying the target service level objective or edition is not supported when restoring to an elastic pool.

             * 400 RestoreNotSupportedForGeoDrSecondary - Point-in-time restore and database recovery operations are not supported on databases that are currently configured as geo-secondaries.

             * 400 DatabaseNamedReplicaBackupRetentionConfigurationNotSupported - User attempted configuring backup retention policy on a Named Replica.

             * 400 GeoRedundantBackupsNotPermittedForSubscription - Geo-redundant backup storage is blocked for all databases under subscription '{0}' by preview feature 'Azure SQL Database Block Geo-redundant Backup Storage'. Please select a different backup storage redundancy.

             * 400 RestoreHyperscaleToNonHyperscaleElasticPool - Restoring a Hyperscale database to an elastic pool which is not Hyperscale or restoring a database which is not Hyperscale to a Hyperscale elastic pool is not supported.

             * 400 RestoreIneligibleDatabaseName - The specified target database name, '{0}', is reserved and cannot be used in a restore operation.

             * 400 RestoreNotSupportedForSystemDb - Restore and database recovery are not supported for system databases.

             * 400 RestoreIneligibleDroppedDatabaseShortLifespan - The source database, '{0}', dropped on '{1}', has not existed long enough to support restores.

             * 400 RestoreIneligibleLiveDatabaseShortLifespan - The source database, '{0}', has not yet accomplished its first backup in order to support restore operations. Please wait until at least the indicated earliest restore date '{1}' and resubmit the request.

             * 400 RestoreCrossServerDisabled - For point-in-time restores, the target logical server must be the same as the source logical server. Consider restoring to the source database's server, or using database copy or database recovery.

             * 400 RestoreSameServerRecoveryDisabled - Same-server recovery is currently not supported. Consider using point-in-time restore or recovering to a different server.

             * 400 RestoreNotSupportedFromLtrBackupToEdition - Restore from long-term retention backup to '{0}' edition not supported.

             * 400 RestoreNotSupportedFromExternalBackupToEdition - Restore from external backup to '{0}' edition not supported.

             * 400 UpdateToServerlessIfLtrIsNotDisabled - Enabling auto-pause for a serverless database is not supported if long-term backup retention is enabled.

             * 400 DuplicateRestoreOperation - A restore request with the same target database name '{0}' on server '{1}' already exists.

             * 400 ExternalBackupUriMalformed - The external backup storage container URI is malformed.

             * 400 ExternalBackupUriHostNotAllowed - The host name for the external backup storage container URI is not allowed.

             * 400 ExternalBackupUriInvalidSchemeOrPort - The external backup storage container URI uses an invalid scheme or port. Please use https and port 443.

             * 400 ExternalBackupVldbUnsupported - Hyperscale does not support external backup restore requests.

             * 400 CannotMoveOrDropSyncMetadataDatabase - Cannot drop database used as sync metadata database.

             * 400 InvalidPitrPriorToVldbMigration - For database '{0}', specified point-in-time '{1}' is prior to the Hyperscale migration time of '{2}'. Please specify a target edition or service level objective which is not Hyperscale when restoring to a point earlier than the Hyperscale migration.

             * 400 MissingKeyVaultUriForRestore - Azure Key Vault key URI '{0}' is required to successfully restore the database '{1}' under server '{2}'.

             * 400 BlockRestoreOnVldbGeoSecondary - Restore of Hyperscale database where source database is geo-secondary is not allowed.

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 400 MaintenanceWindowNotSupportedForNamedReplica - User tried to create or update named replica with non-default maintenance window which is not supported.

             * 400 InvalidStandbyGeoReadScale - User attempted to enable read scale on a standby geo database that does not support it.

             * 400 PerDatabaseCMKKeyRotationAttemptedWhileOldThumbprintInUse - Key Rotation for the TDE Protector at the database level is blocked when active transactions are holding up the log encrypted with old keys. Please refer to aka.ms/azuresqldbkeyrotation for possible strategies to workaround this issue.

             * 400 PerDBCMKNotSupportedWithLTR - Database-level CMK is not supported when Long-term Backup Retention is enabled on the database.

             * 400 PerDatabaseCMKCopyOrReplicationAttemptedWithoutDatabaseLevelEncryptionProtector - Database-level encryption protector must be set on the target database while attempting to copy or replicate a database encrypted with a database level key.

             * 400 PerDatabaseCMKCopyOrReplicationAttemptedWithoutCurrentKeys - While attempting to replicate a database configured with database level encryption protector, the current keys being used by the primary must be passed to the secondary database.

             * 400 PerDatabaseCMKGeoPrimaryIsNotConfiguredWithDatabaseLevelEncryptionProtector - The geo-primary database must be configured with a database level encryption protector before setting a database level encryption protector on the geo-secondary.

             * 400 PerDatabaseCMKGeoPrimaryIsConfiguredWithDatabaseLevelEncryptionProtector - The geo-primary database must not be configured with a database level encryption protector when failing over to a geo-secondary without a database level encryption protector.

             * 400 CreateDatabaseAttemptedWithRotationInProgress - The create database operation can not be performed at this time due to ongoing Transparent Data Encryption (TDE) key rotation on the server. Please try the operation again later.

             * 400 MissingAsymmetricKeyOnTargetServer - Target server does not have access to an asymmetric key.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MultipleDroppedDatabasesWithTheSameName - Found multiple dropped databases with the same name on server.

             * 400 AzureKeyVaultClientError - The Azure Key Vault client encountered an error.

             * 400 AzureKeyVaultClientInfoError - An error occurred while obtaining information for the Azure Key Vault client.

             * 400 UnsupportedBackupStorageRedundancy - Specified Backup Storage Redundancy is not supported in target region.

             * 400 LTRSterlingToVldbMigrationNotSupported - Cannot change service objective for database  to Hyperscale as long-term retention is not yet supported on Hyperscale. Please disable long-term retention on the database and retry.

             * 400 UpgradeOnlyAllowedOnDataWarehouseInstances - User attempted to upgrade non-datawarehouse instance.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 InvalidOperationForDatabaseInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 FreeDbAlreadyExists - Only one free database can exist for a subscription per region.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 SkuAssignmentInProgress - The current assignment request cannot be processed because a previous request has not completed.

             * 409 CurrentMemoryUsageExceedsSkuQuota - User attempted an sku update operation that cannot be completed due to the higher resource consumption.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 ServerDtuQuotaExceeded - Could not perform the operation because server would exceed the allowed Database Throughput Unit quota.

             * 409 UpdateSloFailedDatabaseTooBusy - Update SLO operation could not complete because database was too busy.

             * 409 UnableToAlterDatabaseInReplication - User altered edition on a database in a replication relationship.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 ElasticPoolBusy - A management operation was attempted on an elastic pool which is busy.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 TargetElasticPoolBeingUpdated - The update of elastic pool cannot be started because there is copy operation in progress for one of the databases in this elastic pool

             * 409 DatabaseCopyLimitPerReplicaReached - User reached the limit of concurrent database copies.

             * 409 ConflictRequestToUpdateBackupRedundancy - A conflict request to change backup storage redundancy is still in progress.

             * 409 DatabaseElasticPoolMaintenanceConflict - User tried to create or update a database with a specified maintenance configuration that conflicted with that of the elastic pool of the database.

             * 409 SubscriptionVcoreQuotaExceeded - Could not perform the operation because subscription would exceed the allowed vCore quota.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/databases?api-version=2023-02-01-preview:
    get:
      tags:
        - Databases
      description: Gets a list of databases in an elastic pool.
      operationId: Databases_ListByElasticPool
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: elasticPoolName
          in: path
          description: The name of the elastic pool.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved a list of databases in an elastic pool.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/inaccessibleDatabases?api-version=2023-02-01-preview:
    get:
      tags:
        - Databases
      description: Gets a list of inaccessible databases in a logical server
      operationId: DatabasesInaccessibleByServer_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of inaccessible databases in a logical server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: Databases_ListInaccessibleByServer
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan?api-version=2020-11-01-preview:
    post:
      tags:
        - DatabaseVulnerabilityAssessmentScans
      description: Executes a Vulnerability Assessment database scan.
      operationId: DatabaseVulnerabilityAssessmentScans_InitiateScan
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: scanId
          in: path
          description: The vulnerability assessment scan Id of the scan to retrieve.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully executed a Vulnerability Assessment database scan.
        '202':
          description: Successfully started a Vulnerability Assessment database scan.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 400 InvalidVulnerabilityAssessmentScanIdLength - The vulnerability assessment scan ID length must be below {0} characters.

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseVulnerabilityAssessmentScans
      description: Lists the vulnerability assessment scans of a database.
      operationId: DatabaseVulnerabilityAssessmentScans_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database vulnerability assessment scan records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityAssessmentScanRecordListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}?api-version=2020-11-01-preview:
    get:
      tags:
        - DatabaseVulnerabilityAssessmentScans
      description: Gets a vulnerability assessment scan record of a database.
      operationId: DatabaseVulnerabilityAssessmentScans_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: scanId
          in: path
          description: The vulnerability assessment scan Id of the scan to retrieve.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database vulnerability assessment scan record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityAssessmentScanRecord'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export?api-version=2020-11-01-preview:
    post:
      tags:
        - DatabaseVulnerabilityAssessmentScans
      description: Convert an existing scan result to a human readable format. If already exists nothing happens
      operationId: DatabaseVulnerabilityAssessmentScans_Export
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: databaseName
          in: path
          description: The name of the scanned database.
          required: true
          schema:
            type: string
        - name: vulnerabilityAssessmentName
          in: path
          description: The name of the vulnerability assessment.
          required: true
          schema:
            enum:
              - default
            x-ms-enum:
              name: VulnerabilityAssessmentName
              modelAsString: true
            type: string
        - name: scanId
          in: path
          description: The vulnerability assessment scan Id.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Scan result was converted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentScansExport'
        '201':
          description: Scan result was converted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseVulnerabilityAssessmentScansExport'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidStorageAccountName - The provided storage account is not valid or does not exist.

             * 400 InvalidStorageAccountCredentials - The provided storage account shared access signature or account storage key is not valid.

             * 400 VulnerabilityAssessmentInvalidPolicy - Vulnerability Assessment settings don't exist or invalid storage specified in settings. 

             * 400 VulnerabilityAssessmentADSIsDisabled - Advanced Data Security should be enabled in order to use Vulnerability Assessment.

             * 400 DatabaseVulnerabilityAssessmentMissingStorageContainerPath - Storage container path must be provided if it isn't set in server level policy

             * 400 VulnerabilityAssessmentDatawarehouseDatabaseIsDeactivated - Could not execute Vulnerability Assessment operation because the database is paused. Please resume it.

             * 400 VulnerabilityAssessmentStorageOutboundFirewallNotAllowed - The storage account is not in the list of allowed FQDNs. The outbound firewall rules will block the request.

             * 400 InvalidVulnerabilityAssessmentOperationRequest - The vulnerability assessment operation request does not exist or has no properties object.

             * 400 DataSecurityInvalidUserSuppliedParameter - An invalid parameter value was provided by the client.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 DatabaseVulnerabilityAssessmentScanIsAlreadyInProgress - Vulnerability Assessment scan is already in progress.

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks?api-version=2023-05-01-preview:
    get:
      tags:
        - ReplicationLinks
      description: Gets a list of replication links on database.
      operationId: ReplicationLinks_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of replication links.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicationLinkListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ReplicationLinksReplicationLinkNameIsInvalid - Replication link name should be a valid guid.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 ReplicationLinksReplicationLinkTypeIsInvalid - The LinkType is invalid. Valid values are STANDBY and GEO.

             * 400 ReplicationLinksCreateIsNotSupported - Creation of Replication Link is not supported.

             * 400 LedgerNoDropLink - Geo-replication cannot be stopped because the database has Ledger Digest Uploads enabled. Disable Ledger Digest Uploads and retry the operation.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}?api-version=2023-05-01-preview:
    get:
      tags:
        - ReplicationLinks
      description: Gets a replication link.
      operationId: ReplicationLinks_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: linkId
          in: path
          description: The name of the replication link.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified replication link.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicationLink'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ReplicationLinksReplicationLinkNameIsInvalid - Replication link name should be a valid guid.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 ReplicationLinksReplicationLinkTypeIsInvalid - The LinkType is invalid. Valid values are STANDBY and GEO.

             * 400 ReplicationLinksCreateIsNotSupported - Creation of Replication Link is not supported.

             * 400 LedgerNoDropLink - Geo-replication cannot be stopped because the database has Ledger Digest Uploads enabled. Disable Ledger Digest Uploads and retry the operation.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
    put:
      tags:
        - ReplicationLinks
      description: Updates the replication link type.
      operationId: ReplicationLinks_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: linkId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicationLink'
      responses:
        '200':
          description: Successfully updated the replication link.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicationLink'
        '202':
          description: Update operation is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ReplicationLinksReplicationLinkNameIsInvalid - Replication link name should be a valid guid.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 ReplicationLinksReplicationLinkTypeIsInvalid - The LinkType is invalid. Valid values are STANDBY and GEO.

             * 400 ReplicationLinksCreateIsNotSupported - Creation of Replication Link is not supported.

             * 400 LedgerNoDropLink - Geo-replication cannot be stopped because the database has Ledger Digest Uploads enabled. Disable Ledger Digest Uploads and retry the operation.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 VBSEnclaveNotSupportedForGeoReplicationWithDefaultEnclave - Configuring geo-replication is not supported for databases using different values of the preferredEnclaveType property. The primary {0} database on the {1} server uses the {2} preferredEnclaveType, whereas the specified preferredEnclaveType for the secondary {3} database on the {4} server is {5}.

             * 400 VBSEnclaveNotSupportedForPlannedFailoverBetweenDatabasesWithDifferentPreferredEnclaveTypes - Planned failover between primary and secondary database with different preferredEnclaveType is not supported for Virtualization-based security (VBS) enclaves.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 FailoverGroupAlreadySetup - The operation cannot be performed because the geo-replication link is part of a Failover Group. You must remove the database from the group in order to individually terminate or failover.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
    delete:
      tags:
        - ReplicationLinks
      description: Deletes the replication link.
      operationId: ReplicationLinks_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: linkId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted.
        '202':
          description: Deletion operation is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ReplicationLinksReplicationLinkNameIsInvalid - Replication link name should be a valid guid.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 ReplicationLinksReplicationLinkTypeIsInvalid - The LinkType is invalid. Valid values are STANDBY and GEO.

             * 400 ReplicationLinksCreateIsNotSupported - Creation of Replication Link is not supported.

             * 400 LedgerNoDropLink - Geo-replication cannot be stopped because the database has Ledger Digest Uploads enabled. Disable Ledger Digest Uploads and retry the operation.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 VBSEnclaveNotSupportedForGeoReplicationWithDefaultEnclave - Configuring geo-replication is not supported for databases using different values of the preferredEnclaveType property. The primary {0} database on the {1} server uses the {2} preferredEnclaveType, whereas the specified preferredEnclaveType for the secondary {3} database on the {4} server is {5}.

             * 400 VBSEnclaveNotSupportedForPlannedFailoverBetweenDatabasesWithDifferentPreferredEnclaveTypes - Planned failover between primary and secondary database with different preferredEnclaveType is not supported for Virtualization-based security (VBS) enclaves.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 FailoverGroupAlreadySetup - The operation cannot be performed because the geo-replication link is part of a Failover Group. You must remove the database from the group in order to individually terminate or failover.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
    patch:
      tags:
        - ReplicationLinks
      description: Updates the replication link type.
      operationId: ReplicationLinks_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: linkId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplicationLinkUpdate'
      responses:
        '200':
          description: Successfully updated the replication link.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicationLink'
        '202':
          description: Update operation is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ReplicationLinksReplicationLinkNameIsInvalid - Replication link name should be a valid guid.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 ReplicationLinksReplicationLinkTypeIsInvalid - The LinkType is invalid. Valid values are STANDBY and GEO.

             * 400 ReplicationLinksCreateIsNotSupported - Creation of Replication Link is not supported.

             * 400 LedgerNoDropLink - Geo-replication cannot be stopped because the database has Ledger Digest Uploads enabled. Disable Ledger Digest Uploads and retry the operation.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 VBSEnclaveNotSupportedForGeoReplicationWithDefaultEnclave - Configuring geo-replication is not supported for databases using different values of the preferredEnclaveType property. The primary {0} database on the {1} server uses the {2} preferredEnclaveType, whereas the specified preferredEnclaveType for the secondary {3} database on the {4} server is {5}.

             * 400 VBSEnclaveNotSupportedForPlannedFailoverBetweenDatabasesWithDifferentPreferredEnclaveTypes - Planned failover between primary and secondary database with different preferredEnclaveType is not supported for Virtualization-based security (VBS) enclaves.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 FailoverGroupAlreadySetup - The operation cannot be performed because the geo-replication link is part of a Failover Group. You must remove the database from the group in order to individually terminate or failover.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}/failover?api-version=2023-05-01-preview:
    post:
      tags:
        - ReplicationLinks
      description: Fails over from the current primary server to this server.
      operationId: ReplicationLinks_Failover
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: linkId
          in: path
          description: The name of the replication link.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully failed over.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicationLink'
        '202':
          description: Failover operation is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ReplicationLinksReplicationLinkNameIsInvalid - Replication link name should be a valid guid.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 ReplicationLinksReplicationLinkTypeIsInvalid - The LinkType is invalid. Valid values are STANDBY and GEO.

             * 400 ReplicationLinksCreateIsNotSupported - Creation of Replication Link is not supported.

             * 400 LedgerNoDropLink - Geo-replication cannot be stopped because the database has Ledger Digest Uploads enabled. Disable Ledger Digest Uploads and retry the operation.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 VBSEnclaveNotSupportedForGeoReplicationWithDefaultEnclave - Configuring geo-replication is not supported for databases using different values of the preferredEnclaveType property. The primary {0} database on the {1} server uses the {2} preferredEnclaveType, whereas the specified preferredEnclaveType for the secondary {3} database on the {4} server is {5}.

             * 400 VBSEnclaveNotSupportedForPlannedFailoverBetweenDatabasesWithDifferentPreferredEnclaveTypes - Planned failover between primary and secondary database with different preferredEnclaveType is not supported for Virtualization-based security (VBS) enclaves.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 FailoverGroupAlreadySetup - The operation cannot be performed because the geo-replication link is part of a Failover Group. You must remove the database from the group in order to individually terminate or failover.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/replicationLinks/{linkId}/forceFailoverAllowDataLoss?api-version=2023-05-01-preview:
    post:
      tags:
        - ReplicationLinks
      description: Fails over from the current primary server to this server allowing data loss.
      operationId: ReplicationLinks_FailoverAllowDataLoss
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: linkId
          in: path
          description: The name of the replication link.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully failed over.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicationLink'
        '202':
          description: Failover operation is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ReplicationLinksReplicationLinkNameIsInvalid - Replication link name should be a valid guid.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 ReplicationLinksReplicationLinkTypeIsInvalid - The LinkType is invalid. Valid values are STANDBY and GEO.

             * 400 ReplicationLinksCreateIsNotSupported - Creation of Replication Link is not supported.

             * 400 LedgerNoDropLink - Geo-replication cannot be stopped because the database has Ledger Digest Uploads enabled. Disable Ledger Digest Uploads and retry the operation.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 VBSEnclaveNotSupportedForGeoReplicationWithDefaultEnclave - Configuring geo-replication is not supported for databases using different values of the preferredEnclaveType property. The primary {0} database on the {1} server uses the {2} preferredEnclaveType, whereas the specified preferredEnclaveType for the secondary {3} database on the {4} server is {5}.

             * 400 VBSEnclaveNotSupportedForPlannedFailoverBetweenDatabasesWithDifferentPreferredEnclaveTypes - Planned failover between primary and secondary database with different preferredEnclaveType is not supported for Virtualization-based security (VBS) enclaves.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 409 CannotCancelOperation - The management operation is in a state that cannot be cancelled.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 FailoverGroupAlreadySetup - The operation cannot be performed because the geo-replication link is part of a Failover Group. You must remove the database from the group in order to individually terminate or failover.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/replicationLinks?api-version=2023-05-01-preview:
    get:
      tags:
        - ReplicationLinks
      description: Gets a list of replication links.
      operationId: ReplicationLinks_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of replication links.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplicationLinkListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ReplicationLinksReplicationLinkNameIsInvalid - Replication link name should be a valid guid.

             * 400 ReplicationLinksDeleteIsNotSupported - This action is not yet available, please use 2014-04-01 for this action.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/virtualClusters?api-version=2022-05-01-preview:
    get:
      tags:
        - VirtualClusters
      description: Gets a list of all virtualClusters in the subscription.
      operationId: VirtualClusters_List
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of virtual clusters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualClusterListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionNotFound - The requested subscription was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/virtualClusters?api-version=2022-05-01-preview:
    get:
      tags:
        - VirtualClusters
      description: Gets a list of virtual clusters in a resource group.
      operationId: VirtualClusters_ListByResourceGroup
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of virtual clusters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualClusterListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubscriptionNotEnabledForFeature - User subscription not enabled for feature user attempted to use.

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 VirtualClusterDoesNotExist - The virtual cluster does not exist.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 VirtualClusterNotInSubscriptionResourceGroup - Specified virtual cluster does not exist in the specified resource group and subscription.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 SubscriptionDoesNotHaveVirtualCluster - The requested virtual cluster was not found

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 VirtualClusterRemovalAlreadyInProgress - Removal of virtual cluster is already in progress. Virtual cluster is automatically created with first instance creation, and automatically removed with last instance deletion. Learn more here: https://aka.ms/sqlmi-virtual-cluster-removal.

             * 409 VirtualClusterIsNotEmpty - Virtual cluster is not empty and cannot be deleted.

             * 409 VirtualClusterIsBusy - Virtual cluster is currently busy. Please retry operation later.

             * 409 VirtualClusterRemovalFailed - Request to drop virtual cluster failed. Check if there are active dependent resources.

             * 409 ConflictingVirtualClusterOperation - An operation is currently in progress for the virtual cluster.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/virtualClusters/{virtualClusterName}?api-version=2022-05-01-preview:
    get:
      tags:
        - VirtualClusters
      description: Gets a virtual cluster.
      operationId: VirtualClusters_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/VirtualClusterNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified virtual cluster.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualCluster'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubscriptionNotEnabledForFeature - User subscription not enabled for feature user attempted to use.

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 VirtualClusterDoesNotExist - The virtual cluster does not exist.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 VirtualClusterNotInSubscriptionResourceGroup - Specified virtual cluster does not exist in the specified resource group and subscription.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 SubscriptionDoesNotHaveVirtualCluster - The requested virtual cluster was not found

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 VirtualClusterRemovalAlreadyInProgress - Removal of virtual cluster is already in progress. Virtual cluster is automatically created with first instance creation, and automatically removed with last instance deletion. Learn more here: https://aka.ms/sqlmi-virtual-cluster-removal.

             * 409 VirtualClusterIsNotEmpty - Virtual cluster is not empty and cannot be deleted.

             * 409 VirtualClusterIsBusy - Virtual cluster is currently busy. Please retry operation later.

             * 409 VirtualClusterRemovalFailed - Request to drop virtual cluster failed. Check if there are active dependent resources.

             * 409 ConflictingVirtualClusterOperation - An operation is currently in progress for the virtual cluster.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
    delete:
      tags:
        - VirtualClusters
      description: Deletes a virtual cluster.
      operationId: VirtualClusters_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/VirtualClusterNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the virtual cluster.
        '202':
          description: Deleting the virtual cluster is in progress.
        '204':
          description: The specified virtual cluster does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubscriptionNotEnabledForFeature - User subscription not enabled for feature user attempted to use.

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 404 VirtualClusterDoesNotExist - The virtual cluster does not exist.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 VirtualClusterNotInSubscriptionResourceGroup - Specified virtual cluster does not exist in the specified resource group and subscription.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 SubscriptionDoesNotHaveVirtualCluster - The requested virtual cluster was not found

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 VirtualClusterRemovalAlreadyInProgress - Removal of virtual cluster is already in progress. Virtual cluster is automatically created with first instance creation, and automatically removed with last instance deletion. Learn more here: https://aka.ms/sqlmi-virtual-cluster-removal.

             * 409 VirtualClusterIsNotEmpty - Virtual cluster is not empty and cannot be deleted.

             * 409 VirtualClusterIsBusy - Virtual cluster is currently busy. Please retry operation later.

             * 409 VirtualClusterRemovalFailed - Request to drop virtual cluster failed. Check if there are active dependent resources.

             * 409 ConflictingVirtualClusterOperation - An operation is currently in progress for the virtual cluster.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
    patch:
      tags:
        - VirtualClusters
      description: Updates an existing virtual cluster.
      operationId: VirtualClusters_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/VirtualClusterNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested virtual cluster resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualClusterUpdate'
      responses:
        '200':
          description: Successfully updated virtual cluster.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualCluster'
        '202':
          description: Updating the virtual cluster is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubscriptionNotEnabledForFeature - User subscription not enabled for feature user attempted to use.

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 404 VirtualClusterDoesNotExist - The virtual cluster does not exist.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 VirtualClusterNotInSubscriptionResourceGroup - Specified virtual cluster does not exist in the specified resource group and subscription.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 SubscriptionDoesNotHaveVirtualCluster - The requested virtual cluster was not found

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 VirtualClusterRemovalAlreadyInProgress - Removal of virtual cluster is already in progress. Virtual cluster is automatically created with first instance creation, and automatically removed with last instance deletion. Learn more here: https://aka.ms/sqlmi-virtual-cluster-removal.

             * 409 VirtualClusterIsNotEmpty - Virtual cluster is not empty and cannot be deleted.

             * 409 VirtualClusterIsBusy - Virtual cluster is currently busy. Please retry operation later.

             * 409 VirtualClusterRemovalFailed - Request to drop virtual cluster failed. Check if there are active dependent resources.

             * 409 ConflictingVirtualClusterOperation - An operation is currently in progress for the virtual cluster.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/virtualClusters/{virtualClusterName}/updateManagedInstanceDnsServers?api-version=2022-05-01-preview:
    post:
      tags:
        - VirtualClusters
      description: Synchronizes the DNS server settings used by the managed instances inside the given virtual cluster.
      operationId: VirtualClustersDnsServers_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/VirtualClusterNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully performed synchronize of DNS servers inside virtual cluster.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateVirtualClusterDnsServersOperation'
        '202':
          description: Successfully started synchronize of DNS servers inside virtual cluster.
        default:
          description: |-
            *** Error Responses: ***

             * 400 VnetConfigHasInvalidDns - User tried to inject Managed Server subnet with invalid custom DNS.

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
      x-ms-original-operationId: VirtualClusters_UpdateDnsServers
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents?api-version=2020-11-01-preview:
    get:
      tags:
        - JobAgents
      description: Gets a list of job agents in a server.
      operationId: JobAgents_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of job agents.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAgentListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 409 ServerDisabled - Server is disabled.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}?api-version=2020-11-01-preview:
    get:
      tags:
        - JobAgents
      description: Gets a job agent.
      operationId: JobAgents_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent to be retrieved.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified job agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAgent'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 409 ServerDisabled - Server is disabled.
    put:
      tags:
        - JobAgents
      description: Creates or updates a job agent.
      operationId: JobAgents_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent to be created or updated.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested job agent resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobAgent'
      responses:
        '200':
          description: Successfully updated the job agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAgent'
        '201':
          description: Successfully created the job agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAgent'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 MissingSkuName - Sku name is required.

             * 400 InvalidDatabaseResourceId - Invalid database resource identifier.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 JobAgentDatabaseEditionUnsupported - The specified database's service level objective is not supported for use as a job agent database.

             * 400 JobAgentDatabaseSecondary - A job agent cannot be linked to a geo-secondary database.

             * 400 JobAgentDatabaseAlreadyLinked - The specified database is already linked to another job agent.

             * 400 DatabaseDoesNotExist - The requested database was not found

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 JobAgentExceededQuota - Could not create job agent because it would exceed the quota.

             * 400 JobAgentAlreadyExists - The job agent already exists on the server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 PropertyChangeUnsupported - Property cannot be modified.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 409 ServerDisabled - Server is disabled.
      x-ms-long-running-operation: true
    delete:
      tags:
        - JobAgents
      description: Deletes a job agent.
      operationId: JobAgents_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent to be deleted.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the job agent.
        '202':
          description: Accepted
        '204':
          description: The specified job agent does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 409 ServerDisabled - Server is disabled.
      x-ms-long-running-operation: true
    patch:
      tags:
        - JobAgents
      description: Updates a job agent.
      operationId: JobAgents_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent to be updated.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The update to the job agent.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobAgentUpdate'
      responses:
        '200':
          description: Successfully updated the job agent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobAgent'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 PropertyChangeUnsupported - Property cannot be modified.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 409 ServerDisabled - Server is disabled.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/advancedThreatProtectionSettings?api-version=2022-02-01-preview:
    get:
      tags:
        - ManagedDatabaseAdvancedThreatProtectionSettings
      description: Gets a list of managed database's Advanced Threat Protection states.
      operationId: ManagedDatabaseAdvancedThreatProtectionSettings_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the managed database Advanced Threat Protection states.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabaseAdvancedThreatProtectionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 AdvancedThreatProtectionInsufficientDiskSpace - Insufficient disk space to save the Advanced Threat Protection settings metadata in the database

             * 400 InvalidDatabaseAdvancedThreatProtectionCreateRequest - The create database Advanced Threat Protection request does not exist or has no properties object

             * 400 AdvancedThreatProtectionInvalidUserSuppliedParameter - An invalid parameter value was provided by the client

             * 400 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 400 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 409 DatabaseAdvancedThreatProtectionInProgress - Setting the database Advanced Threat Protection is already in progress

             * 409 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 500 GetDatabaseAdvancedThreatProtectionFailed - Failed to get Advanced Threat Protection settings
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/advancedThreatProtectionSettings/{advancedThreatProtectionName}?api-version=2022-02-01-preview:
    get:
      tags:
        - ManagedDatabaseAdvancedThreatProtectionSettings
      description: Gets a managed database's Advanced Threat Protection state.
      operationId: ManagedDatabaseAdvancedThreatProtectionSettings_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: advancedThreatProtectionName
          in: path
          description: The name of the Advanced Threat Protection state.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AdvancedThreatProtectionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the managed database's Advanced Threat Protection state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabaseAdvancedThreatProtection'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 AdvancedThreatProtectionInsufficientDiskSpace - Insufficient disk space to save the Advanced Threat Protection settings metadata in the database

             * 400 InvalidDatabaseAdvancedThreatProtectionCreateRequest - The create database Advanced Threat Protection request does not exist or has no properties object

             * 400 AdvancedThreatProtectionInvalidUserSuppliedParameter - An invalid parameter value was provided by the client

             * 400 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 400 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 409 DatabaseAdvancedThreatProtectionInProgress - Setting the database Advanced Threat Protection is already in progress

             * 409 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 500 GetDatabaseAdvancedThreatProtectionFailed - Failed to get Advanced Threat Protection settings
    put:
      tags:
        - ManagedDatabaseAdvancedThreatProtectionSettings
      description: Creates or updates a managed database's Advanced Threat Protection state.
      operationId: ManagedDatabaseAdvancedThreatProtectionSettings_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: advancedThreatProtectionName
          in: path
          description: The name of the Advanced Threat Protection state.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AdvancedThreatProtectionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The managed database Advanced Threat Protection state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedDatabaseAdvancedThreatProtection'
      responses:
        '200':
          description: Successfully set the managed database Advanced Threat Protection state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabaseAdvancedThreatProtection'
        '201':
          description: Successfully created the managed database Advanced Threat Protection state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabaseAdvancedThreatProtection'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 AdvancedThreatProtectionInsufficientDiskSpace - Insufficient disk space to save the Advanced Threat Protection settings metadata in the database

             * 400 InvalidDatabaseAdvancedThreatProtectionCreateRequest - The create database Advanced Threat Protection request does not exist or has no properties object

             * 400 AdvancedThreatProtectionInvalidUserSuppliedParameter - An invalid parameter value was provided by the client

             * 400 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 400 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 409 DatabaseAdvancedThreatProtectionInProgress - Setting the database Advanced Threat Protection is already in progress

             * 409 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 500 GetDatabaseAdvancedThreatProtectionFailed - Failed to get Advanced Threat Protection settings
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases?api-version=2022-08-01-preview:
    get:
      tags:
        - ManagedDatabases
      description: Gets a list of managed databases.
      operationId: ManagedDatabasesByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of databases.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabaseListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedDatabases_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}?api-version=2022-08-01-preview:
    get:
      tags:
        - ManagedDatabases
      description: Gets a managed database.
      operationId: ManagedDatabases_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified managed database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabase'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - ManagedDatabases
      description: Creates a new database or updates an existing database.
      operationId: ManagedDatabases_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested database resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedDatabase'
      responses:
        '200':
          description: Successfully updated the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabase'
        '201':
          description: Successfully created the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabase'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 CannotUpdateIsLedgerDatabase - The ledger property of an existing database cannot be updated.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 TokenTooLong - The provided token is too long.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 ManagedDatabaseNameInUse - Database '{0}' already exists. Choose a different database name.

             * 400 PitrPointInTimeInvalid - The point in time {0} is not valid. Valid point in time range from {1} days early to now and not before source server creation time.

             * 400 NoMoreSpaceInManagedInstance - The managed instance has reached its storage limit. The storage usage for the managed instance cannot exceed (%d) MBs.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 StorageAccountFull - Managed Instance has reached the total capacity of underlying Azure storage account. Azure Premium Storage account is limited to 35TB of allocated space.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 ServerNotFound - The requested server was not found.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 DatabaseNumberLimitReached - Maximum number of databases for SQL Database Managed Instance reached.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 400 InvalidDatabaseCreateOrUpdateRequest - The request body for the create or update database operation is invalid.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 InvalidSourceDatabaseId - Invalid source database identifier.

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 400 InvalidCrossSubscriptionTargetManagedInstanceId - Invalid cross subscription target managed instance identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MissingCollation - Collation is required.

             * 400 MissingSourceDatabaseId - Missing source database identifier.

             * 400 MissingRestorePointInTime - Missing restore point in time

             * 400 MissingStorageContainerSasToken - Missing storage container SAS token

             * 400 MissingStorageContainerUri - Missing storage container URI

             * 400 RestorableDroppedDatabaseIdGivenForRestoreWithSourceDatabaseId - Cannot specify restorableDroppedDatabaseId when sourceDatabaseId is already given in restore create mode

             * 400 CrossSubscriptionRestorableDroppedDatabaseIdGivenForRestoreWithCrossSubscriptionSourceDatabaseId - Cannot specify crossSubscriptionRestorableDroppedDatabaseId when crossSubscriptionSourceDatabaseId is already given.

             * 400 MissmatchingCrossSubscriptionTargetManagedInstanceIdWithUrl - The provided crossSubscriptionTargetManagedInstanceId must match the instance in the URL.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidLongTermRetentionManagedInstanceBackupId - Invalid long term retention backup identifier for Managed Instances.

             * 400 MiGeoRestoreWithWrongBackupStorageRedundancy - Geo-Restore is not allowed for managed instances with LRS/ZRS backup storage redundancy.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 ManagementServiceFeatureDisabled - User attempted to use a feature which is disabled.

             * 400 AadOnlyAuthenticationIsEnabled - Azure Active Directory Only Authentication is enabled. Please contact your system administrator.

             * 400 UpdatingInstanceAndBackupRedundancy - Instance zone redundancy and backup storage redundancy cannot be updated in the same request.

             * 400 DeleteOfManagedInstanceIsDisabled - Delete operation of managed instance is disabled.

             * 400 RequestCantLandOnPaaSv2Platform - Request needs to land on PaaSv2 platform but PaaSv2 is not enabled.

             * 400 CustomMaintenanceWindowIsDisabled - Custom maintenance window is not enabled.

             * 400 DeleteOfVersion2VirtualClusterIsDisabled - Delete of virtual cluster with version 2 is not enabled.

             * 400 DeleteOfVirtualClusterIsDisabled - Delete of virtual cluster is not enabled.

             * 400 MICantBeMovedFromOrToInstancePool - Existing managed instance can't be moved to managed instance pool.

             * 400 DnsRefreshOnVirtualClusterIsDisabled - Refresh of DNS records on virtual cluster is not enabled.

             * 400 AutoCompleteMissingLastBackupName - Auto complete restore request must have lastBackupName parameter provided.

             * 400 MissingThumbprint - Can not find server certificate.

             * 400 BlobStorageServerFailure - Blob storage server failure has occurred.

             * 400 BackupSetNotFound - No backups were found to restore the database. Please contact support to restore the database.

             * 400 FullBackupNotFound - Full backup can not be found.

             * 400 RestoreFromStripedBackupsNotEnabled - Restoring from striped backups is not supported.

             * 400 BrokenRestorePlanNoFullBackup - The restore plan is broken because there is no full backup.

             * 400 BrokenRestorePlanWrongLogBackupLSN - The restore plan is broken because firstLsn of current log backup is not <= lastLsn of next log backup.

             * 400 BrokenRestorePlanWrongDiffBackupLSN - The restore plan is broken because firstLsn of diff backup is not >= firstLsn of full backup.

             * 400 BrokenRestorePlanGapInLogBackups - The restore plan is broken because firstLsn of current log backup is not equal to lastLsn of prev log backup.

             * 400 TargetServerDoesNotExist - The target server {0} does not exist or is not ready yet. Please check that it exists and retry the restore request.

             * 400 TargetServerRestoreNotAllowed - The target server {0} is currently not in a state that allows a restore to be started.

             * 400 XtpInitializedDuringRestore - Memory-optimized filegroup must be empty in order to be restored on General Purpose tier of SQL Database Managed Instance.

             * 400 FullBackupMissingChecksum - Provided full backup is missing checksum.

             * 400 FullBackupDamaged - Provided full backup is damaged.

             * 400 MissingStripeInBackupSet - Provided backup set has one or more missing stripes.

             * 400 BackupsFromMultipleDatabasesDetectedInTheContainerWhileRestoreInProgress - There are backups from multiple databases in the container folder. Please make sure the container folder has backups from a single database.{0}

             * 400 BrokenRestorePlanWrongDiffBaseGUID - The restore plan is broken because DifferentialBaseGuid of diff backup does not match BackupSetGuid of full backup.

             * 400 CorruptedPagesInBackupSet - Operation was aborted because RESTORE detected one or more corrupted pages in the backup set.

             * 400 ManagedIdentityIssueDetectedWhileRestoreInProgress - Managed identity is not set up properly. Please verify and try again.

             * 400 CorruptedPagesListMaintenance - Operation was aborted because an internal error occurred while processing the backup taken without checksum.

             * 400 PartiallyContainedDatabaseUnsupported - "Backup for a partially contained database is not supported."

             * 400 RequiredBackupIsNotLastRestored - Migration cannot be completed because provided backup file name is not the name of the last backup file that is restored.

             * 400 ManagedInstanceStorageLimitHit - The managed instance has reached its storage limit.

             * 400 IncompatiblePhysicalLayoutTooFewDataFiles - Database backup contains incompatible physical layout. No data files are found in the backup.

             * 400 IncompatiblePhysicalLayoutNonOnlineDataFilesExist - Database backup contains incompatible physical layout. Non-online data files exist.

             * 400 IncompatiblePhysicalLayoutWrongNumberOfLogFiles - Database backup contains incompatible physical layout. Multiple log files are not supported.

             * 400 IncompatiblePhysicalLayoutNonOnlineLogFilesExist - Database backup contains incompatible physical layout. Non-online log files exist.

             * 400 IncompatiblePhysicalLayoutTooManyNonDataLogFiles - Database backup contains incompatible physical layout. Too many non-data/log files.

             * 400 ExternalBackupAlreadySignaledToComplete - The restore request has already been signaled to complete.

             * 400 ExternalBackupRestoreHasNotBeenStarted - The restore request can only be completed once the restore has started.

             * 400 ExternalBackupUpgradeInProgress - The restore request cannot be completed, since upgrade is in progress.

             * 400 IncompatiblePhysicalLayoutTooManyXTPFiles - Database backup contains incompatible physical layout. Multiple files found in the filegroup that contains MEMORY_OPTIMIZED_DATA.

             * 400 BlobStorageFailure - Blob storage failure has occurred.

             * 400 BackupsFromMultipleDatabasesDetectedInTheContainerFromTheStart - There are backups from multiple databases in the container folder. Please make sure the container folder has backups from a single database.{0}

             * 400 ManagedIdentityIssueDetectedFromTheStart - Managed identity is not set up properly. Please verify and try again.

             * 400 BackupSetBroken - Backup set is broken.

             * 400 SqlRestoreError - Non retriable error occurred while restoring backup with index {0} - {1} {2}

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 CannotFindServerCertificateWithThumbprint - Cannot find server certificate with thumbprint '{0}'. Please use PowerShell Cmdlet 'Add-AzureRmSqlManagedInstanceTransparentDataEncryptionCertificate' to create the certificate.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 RestoreSourceDatabaseNotFound - Could not find database '{0}' at time '{1}' that can be restored.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 409 MiCreateFailedNonDelegatedSubnet - User tried to deploy Managed Instance or Managed Instance pool in subnet that is not delegated to Microsoft.Sql/managedInstances.

             * 409 ConflictingManagedInstanceOperation - An operation is currently in progress for the managed instance.

             * 409 BackupRedundancyUpdateAndInstanceRedundancyConflict - The instance is multi-az but backup storage is being updated from zone redundant to non-zone redundant.

             * 409 InstanceRedundancyUpdateWhileBackupRedundancyUpdateInProgress - Cannot update instance redundancy because backup storage redundancy update is in progress.

             * 409 InstanceRedundancyUpdateAndBackupRedundancyConflict - The backup storage is non-zone redundant but instance redundancy is being updated to zone redundant.

             * 409 BackupRedundancyUpdateConflict - Cannot update backup storage redundancy because a backup storage redundancy update is already in progress.

             * 409 MiDropFailedOnAuthLocks - User tried to drop last Managed Instance in subnet that has Lock applied on resource(s).

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 412 InstanceNotReadyForBackupRedundancyUpdate - Cannot update backup storage redundancy because the instance is not ready.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 ConflictingSubscriptionOperation - An operation is currently in progress for the subscription.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    delete:
      tags:
        - ManagedDatabases
      description: Deletes a managed database.
      operationId: ManagedDatabases_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the managed database.
        '202':
          description: Deleting the managed database is in progress.
        '204':
          description: The specified managed database does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 LedgerNoDropPrimary - The Geo-primary database cannot be dropped because the database has Ledger Digest Uploads enabled. Disable Ledger Digest Uploads and retry the operation.

             * 400 CannotMoveOrDropJobAccountDatabase - Cannot drop database associated with job account.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 CannotDropDatabaseAKVError - The database {0} on server {1} cannot be safely dropped because it is encrypted with a customer managed key that is no longer accessible to take the last backup before drop. Please restore Azure Key Vault Access on the server and revalidate the keys to make this database accessible and then proceed with the drop. For details see https://aka.ms/tdecmkrestorability

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 CannotMoveOrDropSyncMetadataDatabase - Cannot drop database used as sync metadata database.

             * 400 GeoReplicationDatabaseNotPrimary - The operation cannot be performed since the database '{0}' is a replication target.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 DropDisallowedDuringFailover - Can not drop database because a failover operation is in progress on the failover group.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 ServerDisabled - Server is disabled.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    patch:
      tags:
        - ManagedDatabases
      description: Updates an existing database.
      operationId: ManagedDatabases_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested database resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedDatabaseUpdate'
      responses:
        '200':
          description: Successfully updated the database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabase'
        '202':
          description: Updating the managed database is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 CannotUpdateIsLedgerDatabase - The ledger property of an existing database cannot be updated.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 TokenTooLong - The provided token is too long.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 ManagedDatabaseNameInUse - Database '{0}' already exists. Choose a different database name.

             * 400 PitrPointInTimeInvalid - The point in time {0} is not valid. Valid point in time range from {1} days early to now and not before source server creation time.

             * 400 NoMoreSpaceInManagedInstance - The managed instance has reached its storage limit. The storage usage for the managed instance cannot exceed (%d) MBs.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 StorageAccountFull - Managed Instance has reached the total capacity of underlying Azure storage account. Azure Premium Storage account is limited to 35TB of allocated space.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 ServerNotFound - The requested server was not found.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 DatabaseNumberLimitReached - Maximum number of databases for SQL Database Managed Instance reached.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 400 InvalidDatabaseCreateOrUpdateRequest - The request body for the create or update database operation is invalid.

             * 400 InvalidResourceId - Invalid resource identifier.

             * 400 InvalidSourceDatabaseId - Invalid source database identifier.

             * 400 InvalidRestorableDroppedDatabaseId - Invalid restorable dropped database identifier

             * 400 InvalidCrossSubscriptionTargetManagedInstanceId - Invalid cross subscription target managed instance identifier.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 MismatchingServerNameWithUrl - The provided server name did not match the name in the Url.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MissingCollation - Collation is required.

             * 400 MissingSourceDatabaseId - Missing source database identifier.

             * 400 MissingRestorePointInTime - Missing restore point in time

             * 400 MissingStorageContainerSasToken - Missing storage container SAS token

             * 400 MissingStorageContainerUri - Missing storage container URI

             * 400 RestorableDroppedDatabaseIdGivenForRestoreWithSourceDatabaseId - Cannot specify restorableDroppedDatabaseId when sourceDatabaseId is already given in restore create mode

             * 400 CrossSubscriptionRestorableDroppedDatabaseIdGivenForRestoreWithCrossSubscriptionSourceDatabaseId - Cannot specify crossSubscriptionRestorableDroppedDatabaseId when crossSubscriptionSourceDatabaseId is already given.

             * 400 MissmatchingCrossSubscriptionTargetManagedInstanceIdWithUrl - The provided crossSubscriptionTargetManagedInstanceId must match the instance in the URL.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 CannotFindServerCertificateWithThumbprint - Cannot find server certificate with thumbprint '{0}'. Please use PowerShell Cmdlet 'Add-AzureRmSqlManagedInstanceTransparentDataEncryptionCertificate' to create the certificate.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 RestoreSourceDatabaseNotFound - Could not find database '{0}' at time '{1}' that can be restored.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/cancelMove?api-version=2022-08-01-preview:
    post:
      tags:
        - ManagedDatabases
      description: Cancels a managed database move operation.
      operationId: ManagedDatabases_CancelMove
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: Parameters of the cancel managed database move operation.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedDatabaseMoveDefinition'
      responses:
        '200':
          description: Successfully canceled move request.
        '202':
          description: Canceling move is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceManagedDatabaseMoveRequest - Invalid Managed Instance database move request.

             * 400 InvalidManagedDatabaseMoveTargetResourceId - Invalid Managed Instance database move target resource ID in the properties.

             * 400 InvalidMoveTargetResourceId - The target resource identifier in move request is invalid.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPrimary - The given primary field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the instance failover group. Please make sure the primary server and all of the given partner servers are unique.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidManagedInstanceRegion - The provided partner managed instance region in the instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner region is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPairCount - Only one managed instance pair is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalid - The create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the instance failover group are not allowed on a secondary server. Execute the request on the primary server.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the instance failover group must be greater than or equal to the '{0}' minutes minimum grace period

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update instance failover group request body should not modify the read-only property '{0}'.

             * 400 InstanceFailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of instance failover group.

             * 400 InstanceFailoverGroupPartnerManagedInstanceFromDifferentSubscription - Primary server and the partner server of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.

             * 400 SystemDatabaseUnsupportedOperation - Unsupported operation for system database.

             * 400 XtpServerStateMismatch - Both source and target servers do not support memory optimized data.

             * 400 ManagedDatabaseGPFileSizeLimitExceeded - Creating a copy of a managed database on different SQL Managed Instance with General Purpose service tier would violate data file size limit. See: 'https://docs.microsoft.com/azure/azure-sql/managed-instance/resource-limits#service-tier-characteristics'.

             * 400 ManagedInstanceGPStorageAccountLimitExceeded - Creating a copy of a database on different SQL Managed Instance with General Purpose service tier would violate storage account size limit. See: 'https://docs.microsoft.com/azure/azure-sql/managed-instance/resource-limits#service-tier-characteristics'.

             * 400 TargetInsufficientStorage - Attempt to move/restore/copy database on the destination instance with insufficient space.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 400 CrossResourceOperationNotSupported - Cross resource operation is not supported.

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 ServerNotFound - The requested server was not found.

             * 400 ServerEditionMismatch - Edition must be the same as the primary server when creating a replica server.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidFailoverGroupRegion - Servers specified in an Instance Failover Group need to reside in different regions to provide isolation.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 InstanceFailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a instance failover group.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 FailoverGroupRegionMismatch - Partner region specified in Failover Group need to match the region of the partner managed instance indicated.

             * 400 DnsZoneMismatch - The DNSZone on the partner server is different from the DNSZone on the source server. This breaks InstanceFailoverGroup functionality.

             * 400 GeoDrInstanceSizeMismatch - Primary managed instance and partner managed instance do not have the same storage size.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 GeoDrSecondaryInstanceNotEmpty - Secondary managed instance has user databases. To create an instance failover group the secondary managed instance needs to be empty.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 TokenTooLong - The provided token is too long.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 ManagedDatabaseNameInUse - Database '{0}' already exists. Choose a different database name.

             * 400 PitrPointInTimeInvalid - The point in time {0} is not valid. Valid point in time range from {1} days early to now and not before source server creation time.

             * 400 NoMoreSpaceInManagedInstance - The managed instance has reached its storage limit. The storage usage for the managed instance cannot exceed (%d) MBs.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 StorageAccountFull - Managed Instance has reached the total capacity of underlying Azure storage account. Azure Premium Storage account is limited to 35TB of allocated space.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 ServerNotFound - The requested server was not found.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 DatabaseNumberLimitReached - Maximum number of databases for SQL Database Managed Instance reached.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - Invalid request specifying a non-existent resource.

             * 404 CrossManagedInstanceDatabaseMovementNotExist - Database movement does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 CannotFindServerCertificateWithThumbprint - Cannot find server certificate with thumbprint '{0}'. Please use PowerShell Cmdlet 'Add-AzureRmSqlManagedInstanceTransparentDataEncryptionCertificate' to create the certificate.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 RestoreSourceDatabaseNotFound - Could not find database '{0}' at time '{1}' that can be restored.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 ManagedInstanceContainsInaccessibleDatabases - The operation could not be completed because managed instance '{0}' contains databases that are in the Inaccessible state. Please either drop inaccessible databases or fix the issues with access to the customer-managed TDE protector key for managed instance before retrying operation. https://go.microsoft.com/fwlink/?linkid=2111623

             * 409 ManagedInstanceHasHybridLink - User tried to initiate operation that is not supported when managed instance has a hybrid link configured.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 InstanceFailoverGroupAlreadyExists - Failover group already exists on a given server.

             * 409 InstanceFailoverGroupBusy - Instance failover group is busy with another operation.

             * 409 InstanceFailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 InvalidFailoverGroupName - Invalid Instance Failover Group name was supplied.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/completeMove?api-version=2022-08-01-preview:
    post:
      tags:
        - ManagedDatabases
      description: Completes a managed database move operation.
      operationId: ManagedDatabases_CompleteMove
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: Parameters of the complete managed database move operation.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedDatabaseMoveDefinition'
      responses:
        '200':
          description: Successfully completed move request.
        '202':
          description: Completing move is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidResourceManagedDatabaseMoveRequest - Invalid Managed Instance database move request.

             * 400 InvalidManagedDatabaseMoveTargetResourceId - Invalid Managed Instance database move target resource ID in the properties.

             * 400 InvalidMoveTargetResourceId - The target resource identifier in move request is invalid.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPrimary - The given primary field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the instance failover group. Please make sure the primary server and all of the given partner servers are unique.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidManagedInstanceRegion - The provided partner managed instance region in the instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner region is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPairCount - Only one managed instance pair is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalid - The create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the instance failover group are not allowed on a secondary server. Execute the request on the primary server.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the instance failover group must be greater than or equal to the '{0}' minutes minimum grace period

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update instance failover group request body should not modify the read-only property '{0}'.

             * 400 InstanceFailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of instance failover group.

             * 400 InstanceFailoverGroupPartnerManagedInstanceFromDifferentSubscription - Primary server and the partner server of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.

             * 400 SystemDatabaseUnsupportedOperation - Unsupported operation for system database.

             * 400 XtpServerStateMismatch - Both source and target servers do not support memory optimized data.

             * 400 ManagedDatabaseGPFileSizeLimitExceeded - Creating a copy of a managed database on different SQL Managed Instance with General Purpose service tier would violate data file size limit. See: 'https://docs.microsoft.com/azure/azure-sql/managed-instance/resource-limits#service-tier-characteristics'.

             * 400 ManagedInstanceGPStorageAccountLimitExceeded - Creating a copy of a database on different SQL Managed Instance with General Purpose service tier would violate storage account size limit. See: 'https://docs.microsoft.com/azure/azure-sql/managed-instance/resource-limits#service-tier-characteristics'.

             * 400 TargetInsufficientStorage - Attempt to move/restore/copy database on the destination instance with insufficient space.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 400 CrossResourceOperationNotSupported - Cross resource operation is not supported.

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 ServerNotFound - The requested server was not found.

             * 400 ServerEditionMismatch - Edition must be the same as the primary server when creating a replica server.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidFailoverGroupRegion - Servers specified in an Instance Failover Group need to reside in different regions to provide isolation.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 InstanceFailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a instance failover group.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 FailoverGroupRegionMismatch - Partner region specified in Failover Group need to match the region of the partner managed instance indicated.

             * 400 DnsZoneMismatch - The DNSZone on the partner server is different from the DNSZone on the source server. This breaks InstanceFailoverGroup functionality.

             * 400 GeoDrInstanceSizeMismatch - Primary managed instance and partner managed instance do not have the same storage size.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 GeoDrSecondaryInstanceNotEmpty - Secondary managed instance has user databases. To create an instance failover group the secondary managed instance needs to be empty.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 TokenTooLong - The provided token is too long.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 ManagedDatabaseNameInUse - Database '{0}' already exists. Choose a different database name.

             * 400 PitrPointInTimeInvalid - The point in time {0} is not valid. Valid point in time range from {1} days early to now and not before source server creation time.

             * 400 NoMoreSpaceInManagedInstance - The managed instance has reached its storage limit. The storage usage for the managed instance cannot exceed (%d) MBs.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 StorageAccountFull - Managed Instance has reached the total capacity of underlying Azure storage account. Azure Premium Storage account is limited to 35TB of allocated space.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 ServerNotFound - The requested server was not found.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 DatabaseNumberLimitReached - Maximum number of databases for SQL Database Managed Instance reached.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - Invalid request specifying a non-existent resource.

             * 404 CrossManagedInstanceDatabaseMovementNotExist - Database movement does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 CannotFindServerCertificateWithThumbprint - Cannot find server certificate with thumbprint '{0}'. Please use PowerShell Cmdlet 'Add-AzureRmSqlManagedInstanceTransparentDataEncryptionCertificate' to create the certificate.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 RestoreSourceDatabaseNotFound - Could not find database '{0}' at time '{1}' that can be restored.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 ManagedInstanceContainsInaccessibleDatabases - The operation could not be completed because managed instance '{0}' contains databases that are in the Inaccessible state. Please either drop inaccessible databases or fix the issues with access to the customer-managed TDE protector key for managed instance before retrying operation. https://go.microsoft.com/fwlink/?linkid=2111623

             * 409 ManagedInstanceHasHybridLink - User tried to initiate operation that is not supported when managed instance has a hybrid link configured.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 InstanceFailoverGroupAlreadyExists - Failover group already exists on a given server.

             * 409 InstanceFailoverGroupBusy - Instance failover group is busy with another operation.

             * 409 InstanceFailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 InvalidFailoverGroupName - Invalid Instance Failover Group name was supplied.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/completeRestore?api-version=2022-08-01-preview:
    post:
      tags:
        - ManagedDatabases
      description: Completes the restore operation on a managed database.
      operationId: ManagedDatabases_CompleteRestore
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The definition for completing the restore of this managed database.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteDatabaseRestoreDefinition'
      responses:
        '200':
          description: Successfully completed restore request.
        '202':
          description: Completing restore request is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidDatabaseCompleteRestoreRequest - The complete database restore request is invalid

             * 400 InvalidDatabaseCompleteRestoreRequestLastBackupName - The last backup name is invalid

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 TokenTooLong - The provided token is too long.

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 AutoCompleteMissingLastBackupName - Auto complete restore request must have lastBackupName parameter provided.

             * 400 MissingThumbprint - Can not find server certificate.

             * 400 BlobStorageServerFailure - Blob storage server failure has occurred.

             * 400 BackupSetNotFound - No backups were found to restore the database. Please contact support to restore the database.

             * 400 FullBackupNotFound - Full backup can not be found.

             * 400 RestoreFromStripedBackupsNotEnabled - Restoring from striped backups is not supported.

             * 400 BrokenRestorePlanNoFullBackup - The restore plan is broken because there is no full backup.

             * 400 BrokenRestorePlanWrongLogBackupLSN - The restore plan is broken because firstLsn of current log backup is not <= lastLsn of next log backup.

             * 400 BrokenRestorePlanWrongDiffBackupLSN - The restore plan is broken because firstLsn of diff backup is not >= firstLsn of full backup.

             * 400 BrokenRestorePlanGapInLogBackups - The restore plan is broken because firstLsn of current log backup is not equal to lastLsn of prev log backup.

             * 400 TargetServerDoesNotExist - The target server {0} does not exist or is not ready yet. Please check that it exists and retry the restore request.

             * 400 TargetServerRestoreNotAllowed - The target server {0} is currently not in a state that allows a restore to be started.

             * 400 XtpInitializedDuringRestore - Memory-optimized filegroup must be empty in order to be restored on General Purpose tier of SQL Database Managed Instance.

             * 400 FullBackupMissingChecksum - Provided full backup is missing checksum.

             * 400 FullBackupDamaged - Provided full backup is damaged.

             * 400 MissingStripeInBackupSet - Provided backup set has one or more missing stripes.

             * 400 BackupsFromMultipleDatabasesDetectedInTheContainerWhileRestoreInProgress - There are backups from multiple databases in the container folder. Please make sure the container folder has backups from a single database.{0}

             * 400 BrokenRestorePlanWrongDiffBaseGUID - The restore plan is broken because DifferentialBaseGuid of diff backup does not match BackupSetGuid of full backup.

             * 400 CorruptedPagesInBackupSet - Operation was aborted because RESTORE detected one or more corrupted pages in the backup set.

             * 400 ManagedIdentityIssueDetectedWhileRestoreInProgress - Managed identity is not set up properly. Please verify and try again.

             * 400 CorruptedPagesListMaintenance - Operation was aborted because an internal error occurred while processing the backup taken without checksum.

             * 400 PartiallyContainedDatabaseUnsupported - "Backup for a partially contained database is not supported."

             * 400 RequiredBackupIsNotLastRestored - Migration cannot be completed because provided backup file name is not the name of the last backup file that is restored.

             * 400 ManagedInstanceStorageLimitHit - The managed instance has reached its storage limit.

             * 400 IncompatiblePhysicalLayoutTooFewDataFiles - Database backup contains incompatible physical layout. No data files are found in the backup.

             * 400 IncompatiblePhysicalLayoutNonOnlineDataFilesExist - Database backup contains incompatible physical layout. Non-online data files exist.

             * 400 IncompatiblePhysicalLayoutWrongNumberOfLogFiles - Database backup contains incompatible physical layout. Multiple log files are not supported.

             * 400 IncompatiblePhysicalLayoutNonOnlineLogFilesExist - Database backup contains incompatible physical layout. Non-online log files exist.

             * 400 IncompatiblePhysicalLayoutTooManyNonDataLogFiles - Database backup contains incompatible physical layout. Too many non-data/log files.

             * 400 ExternalBackupAlreadySignaledToComplete - The restore request has already been signaled to complete.

             * 400 ExternalBackupRestoreHasNotBeenStarted - The restore request can only be completed once the restore has started.

             * 400 ExternalBackupUpgradeInProgress - The restore request cannot be completed, since upgrade is in progress.

             * 400 IncompatiblePhysicalLayoutTooManyXTPFiles - Database backup contains incompatible physical layout. Multiple files found in the filegroup that contains MEMORY_OPTIMIZED_DATA.

             * 400 BlobStorageFailure - Blob storage failure has occurred.

             * 400 BackupsFromMultipleDatabasesDetectedInTheContainerFromTheStart - There are backups from multiple databases in the container folder. Please make sure the container folder has backups from a single database.{0}

             * 400 ManagedIdentityIssueDetectedFromTheStart - Managed identity is not set up properly. Please verify and try again.

             * 400 BackupSetBroken - Backup set is broken.

             * 400 SqlRestoreError - Non retriable error occurred while restoring backup with index {0} - {1} {2}

             * 404 ResourceDoesNotExist - Resource with the name '{0}' does not exist. To continue, specify a valid resource name.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/startMove?api-version=2022-08-01-preview:
    post:
      tags:
        - ManagedDatabases
      description: Starts a managed database move operation.
      operationId: ManagedDatabases_StartMove
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: Parameters of the start managed database move operation.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedDatabaseStartMoveDefinition'
      responses:
        '200':
          description: Successfully started move request.
        '202':
          description: Starting move is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidManagedInstanceBackupMode - Invalid Managed Instance backup mode in the properties.

             * 400 InvalidManagedInstanceCompleteMode - Invalid Managed Instance complete mode in the properties.

             * 400 InvalidResourceManagedDatabaseMoveRequest - Invalid Managed Instance database move request.

             * 400 InvalidManagedDatabaseMoveTargetResourceId - Invalid Managed Instance database move target resource ID in the properties.

             * 400 InvalidMoveTargetResourceId - The target resource identifier in move request is invalid.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MismatchingResourceGroupNameWithUrl - The provided resource group name did not match the name in the Url.

             * 400 ManagedDatabaseMoveSourceAndTargetNameDoNotMatch - The specified database name '{0}' at the source instance and the specified database name '{1}' at the destination instance must be the same.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPrimary - The given primary field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the instance failover group. Please make sure the primary server and all of the given partner servers are unique.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidManagedInstanceRegion - The provided partner managed instance region in the instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner region is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPairCount - Only one managed instance pair is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalid - The create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the instance failover group are not allowed on a secondary server. Execute the request on the primary server.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the instance failover group must be greater than or equal to the '{0}' minutes minimum grace period

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update instance failover group request body should not modify the read-only property '{0}'.

             * 400 InstanceFailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of instance failover group.

             * 400 InstanceFailoverGroupPartnerManagedInstanceFromDifferentSubscription - Primary server and the partner server of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.

             * 400 SystemDatabaseUnsupportedOperation - Unsupported operation for system database.

             * 400 XtpServerStateMismatch - Both source and target servers do not support memory optimized data.

             * 400 ManagedDatabaseGPFileSizeLimitExceeded - Creating a copy of a managed database on different SQL Managed Instance with General Purpose service tier would violate data file size limit. See: 'https://docs.microsoft.com/azure/azure-sql/managed-instance/resource-limits#service-tier-characteristics'.

             * 400 ManagedInstanceGPStorageAccountLimitExceeded - Creating a copy of a database on different SQL Managed Instance with General Purpose service tier would violate storage account size limit. See: 'https://docs.microsoft.com/azure/azure-sql/managed-instance/resource-limits#service-tier-characteristics'.

             * 400 TargetInsufficientStorage - Attempt to move/restore/copy database on the destination instance with insufficient space.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 400 CrossResourceOperationNotSupported - Cross resource operation is not supported.

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 ManagedInstanceOperationInProgress - The operation could not be completed because {0} operation is in progress. Please wait for the operation in progress to complete and try again.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 ServerNotFound - The requested server was not found.

             * 400 ServerEditionMismatch - Edition must be the same as the primary server when creating a replica server.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidFailoverGroupRegion - Servers specified in an Instance Failover Group need to reside in different regions to provide isolation.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 InstanceFailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a instance failover group.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 FailoverGroupRegionMismatch - Partner region specified in Failover Group need to match the region of the partner managed instance indicated.

             * 400 DnsZoneMismatch - The DNSZone on the partner server is different from the DNSZone on the source server. This breaks InstanceFailoverGroup functionality.

             * 400 GeoDrInstanceSizeMismatch - Primary managed instance and partner managed instance do not have the same storage size.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 GeoDrSecondaryInstanceNotEmpty - Secondary managed instance has user databases. To create an instance failover group the secondary managed instance needs to be empty.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 PasswordNotComplex - The provided password is not complex enough.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 TokenTooLong - The provided token is too long.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 ManagedDatabaseNameInUse - Database '{0}' already exists. Choose a different database name.

             * 400 PitrPointInTimeInvalid - The point in time {0} is not valid. Valid point in time range from {1} days early to now and not before source server creation time.

             * 400 NoMoreSpaceInManagedInstance - The managed instance has reached its storage limit. The storage usage for the managed instance cannot exceed (%d) MBs.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 StorageAccountFull - Managed Instance has reached the total capacity of underlying Azure storage account. Azure Premium Storage account is limited to 35TB of allocated space.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 ServerNotFound - The requested server was not found.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 InvalidBackupRetentionPeriod - The retention days of {0} is not a valid configuration. Valid backup retention in days must be between {1} and {2}

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 DatabaseNumberLimitReached - Maximum number of databases for SQL Database Managed Instance reached.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 ManagedInstanceUpdateSloInProgress - "The operation could not be completed because a service tier change is in progress for managed instance '{0}.' Please wait for the operation in progress to complete and try again."

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 400 ElasticPoolOverStorageUsage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 TokenTooLong - The provided token is too long.

             * 400 CannotMoveOrDropJobAccountDatabase - Cannot drop database associated with job account.

             * 400 JobAgentDatabaseEditionUnsupported - The specified database's service level objective is not supported for use as a job agent database.

             * 400 ServerNotFound - The requested server was not found.

             * 400 InvalidMaxSizeTierCombination - The specified tier does not support the specified database max size.

             * 400 InvalidTier - The user specified an invalid tier.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 ProvisioningDisabled - Displays error message from resources operation authorizer as is, without changes

             * 400 CannotUpdateIsLedgerDatabase - The ledger property of an existing database cannot be updated.

             * 400 InvalidCollation - Collation is not recognized by the server.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 SourceDatabaseNotFound - The source database does not exist.

             * 400 ChangeUnsupportedOnEntity - User attempted an unsupported create/update/delete operation on a given entity.

             * 400 UpdateNotAllowedInCurrentReplicationState - The operation is disallowed on the database in its current replication state.

             * 400 GeoReplicaLimitReached - The per-replica replication limit was reached.

             * 400 ReplicationSourceAndTargetMustHaveSameName - The replication source and target databases must have the same name.

             * 400 ReplicationSourceAndTargetMustBeInDifferentServers - The replication source and target databases must be in different logical servers.

             * 400 SourceServerNotFound - The server part of a source database id provided in a CreateDatabaseAsCopy API call doesn't map to an existing server.

             * 400 InvalidDatabaseCreateMode - Invalid request to create a database.

             * 400 TierChangeUnsupportedDueToMemoryOptimizedObject - The database cannot update its sku because it has memory-optimized objects.

             * 400 PartnerDBNotCompatibleForSGXEnclave - Attempt to set GeoDR link or update SLO for enclave enabled database is only supported when both database are running on DC-series hardware.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 UnsupportedServiceName - The specified name is an invalid name because it contains one or more unsupported unicode characters.

             * 400 CurrentDatabaseLogSizeExceedsMaxSize - User attempted to change the database to a sku with lower max log size than the current usage.

             * 400 TierChangeUnsupportedDueToCDCEnabledDatabase - The database cannot update its sku because it is enabled for CDC.

             * 400 IsLedgerDatabaseIsNotSupportedOnResourceType - Changing the ledger property is not supported for this resource type.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 InvalidTierSkuCombination - The specified tier does not support the specified sku.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 OfferDisabledOnSubscription - Subscription offer type is restricted from provisioning the requested resource.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 CurrentDatabaseSizeExceedsMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 PartnerServerNotCompatible - The user is attempting to copy a database from a SAWA V1 server to a Sterling server or vice versa.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 UnableToCreateGeoChain - User attempted to create secondary database (chaining) even though automatic upload of ledger digests has been configured

             * 400 TargetElasticPoolDoesNotExist - The elastic pool does not exist on a server.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 ElasticPoolSkuCombinationInvalid - Elastic pool and sku can be specified together only if sku is specified as 'ElasticPool'.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 ElasticPoolTierCombinationInvalid - The database tier is different than the elastic pool service tier.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 ElasticPoolNameRequired - User tried to create or update database to elastic pool service objective without specifying the name of the elastic pool.

             * 400 InvalidReadScaleEdition - User attempted to enable read scale on a database type that does not support it.

             * 400 InvalidReadScaleUnits - User attempted to provide a read scale value that is not supported.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 GeoSecondaryMaxSizeUpdateFailed - The geo-secondary database is of a SLO that does not support the requested maxsize value or the geo-secondary is in an unsupported region or an update operation is already in progress on the geo-secondary database.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 ElasticPoolInconsistentDtuGuaranteeSettings - Attempting to provide DTU min for databases in the elastic pool that exceeds requested DTUs of the elastic pool.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 ElasticPoolDatabaseCountOverLimit - Attempting to create or add database to elastic pool when the database count limit of the elastic pool has been reached.

             * 400 RequestedDatabaseSizeRequiresShrink - User attempted to ALTER DATABASE MODIFY MAXSIZE to modify the MAXSIZE for a database to a smaller size then the current size.

             * 400 CannotChangeToOrFromDataWarehouseTier - User attempted to change the sku of a database from DataWarehouse tier to non DataWarehouse tiers or vice versa.

             * 400 CurrentDatabaseSizeExceedsDbMaxSize - User attempted to reduce the max size for a database to a size smaller than the current usage.

             * 400 ElasticPoolDecreaseStorageLimitBelowUsage - Attempting to decrease the storage limit of the elastic pool below its storage usage.

             * 400 CannotUseTrailingWhitespacesInDatabaseName - The database name validation failed.

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 RegionDoesNotSupportVersion - A user attempted to create a server of a specified version in a location where that server version isn't supported.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SourceDatabaseEditionCouldNotBeUpgraded - The source database cannot have higher edition than the target database.

             * 400 TargetDatabaseEditionCouldNotBeDowngraded - The target database cannot have lower edition than the source database.

             * 400 UpdateNotAllowedIfGeoDrOperationInProgress - The operation is disallowed because copy or failover operation for database '{0}' on server '{1}' is currently in progress.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 ElasticPoolOverFileSpace - Insufficient file space in the elastic pool.

             * 400 InvalidLicenseType - User tried to create or update a database or elastic pool with unsupported license type.

             * 400 UnsupportedCapacity - User tried to create or update database with capacity which is not supported.

             * 400 RestoreToFreeEditionNotSupported - Restore and GeoRestore target cannot be free database.

             * 400 RestoreNotSupportedForFreeEdition - Restore and GeoRestore are not supported for free database.

             * 400 InvalidDroppedDatabase - Source database dropped does not exist on server within the supported recovery period.

             * 400 InvalidLiveDatabase - Source database does not exist on server within the supported recovery period. If restoring a dropped database, please specify its deletion date.

             * 400 InvalidVldbRecoverySlo - The Hyperscale edition recovery requires both source and target databases to use Hyperscale service level objective.

             * 400 CannotUpdateToFreeDatabase - Updating a database to the free sku is not supported.

             * 400 InvalidVldbRestoreSlo - The Hyperscale edition Point-In-Time restore requires both source and target databases to use Hyperscale service level objective.

             * 400 CannotSpecifyPoolOrSlo - Specifying an elastic pool and/or changing the service level objective or edition is not supported for edition.

             * 400 InvalidBackupStorageAccountType - User passed zrs/lrs during create/update of a database but it failed either because the customer is not whitelisted or because zrs is not available in the specified region.

             * 400 DatabaseInvalidSkuPropertyCombination - The properties of the requested sku are inconsistent. Please check that a valid combination is specified. See https://docs.microsoft.com/en-us/rest/api/sql/capabilities/listbylocation#serviceobjectivecapability for more details.

             * 400 DatabaseNamedReplicaPerDatabaseLimitExceeded - User tried create a named replica that would exceed the allowed number per primary database

             * 400 UnsupportedBackupStorageRedundancyForEdition - The requested backup storage redundancy is not supported for edition

             * 400 DatabaseIsCurrentlyPinned - Microsoft has pinned your database SQL Server engine version. To ensure your database does not hit production issues, any future scale operations on your database will be blocked until it has been un-pinned. Please contact Microsoft support for assistance with scaling.

             * 400 RestoreTargetEditionSizeInsufficient - User attempted to restore a database to an edition that is a smaller size than the current allocated size of the source.

             * 400 DatabaseCreationBlockedForNonActivatedCMKServer - SQL Pool creations are blocked for CMK enabled workspaces until the workspace is activated. First, enable purge protection and grant the workspace Managed Identity the required permissions (Get, Wrap Key, Unwrap Key) on the Azure Key Vault of the workspace key.  Next, activate your workspace after you have granted access.

             * 400 InvalidIdentityId - One or more identity id(s) provided are not valid ARM resource id(s). Please input valid id(s) and try again.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 InvalidNumberOfIdentities - Only one user assigned managed identity is supported at the Database Level.

             * 400 NoRestorePointAvailable - The source database has not yet accomplished its first backup in order to support restore operations. Please retry the restore request later.

             * 400 DatabaseNamedReplicaChainingNotAllowed - User tried to create a named replica of a named replica which is not allowed.

             * 400 DatabaseNamedReplicaInvalidOperation - User attempted an unsupported operation on a named replica.

             * 400 DatabaseNamedReplicaInvalidSourceDatabase - User attempted to create a named replica in a different subscription or region than the source database.

             * 400 CannotAssignIdentityToMaster - Cannot assign an identity to a system database. Database identity cannot be assigned to 'master', 'model', 'tempdb', 'msdb', or 'resource' databases.

             * 400 PerDatabaseCMKDWNotSupported - Database-level CMK in preview is not supported for Datawarehouse edition.

             * 400 MissingThumbprintCrm - The restore operation of a CRM database failed because a required TDE certificate was missing. Please retry the restore operation to an existing elastic pool.

             * 400 ElasticPoolOverStorage - Attempting to write data to a database when the storage limit of the elastic pool has been reached.

             * 400 RestoreTargetEditionSizeInsufficientV2 - User attempted to restore a database to an edition that is a smaller size than the allocated size of the restored database.

             * 400 ResourcePoolStorageLimitHitDuringRestore - The restored database can't be restored into the resource pool due to the remaining storage capacity in the pool.

             * 400 PerDatabaseCMKRestoreNotSupported - Database restore is not supported when Database-level CMK is configured in preview.

             * 400 PerDatabaseCMKHSNotSupported - Database-level CMK in preview is not supported for Hyperscale edition.

             * 400 PerDatabaseCMKGeoReplicationNotSupported - Geo Replication and Database Copy is not supported when Database-level CMK is configured in preview.

             * 400 InvalidStandbyGeoEdition - User attempted to create a DTU based standby geo.

             * 400 ElasticPoolInconsistentVcoreGuaranteeSettings - The number of databases and VCore min per database cannot exceed requested VCores of the elastic pool.

             * 400 GeoRestoreBackupStorageTypeNotSupported - Database recovery requests are invalid when issued against a database that is not configured to use geo-redundant backup storage.

             * 400 RestoreHyperscaleToNonHyperscale - Restoring a Hyperscale database backup to a non-Hyperscale service tier or vice versa is not supported.

             * 400 SubscriptionDoesNotHaveAccessToServer - The subscription does not have access to the specified server(s)

             * 400 RecoveryPointDoesNotExist - The specified recovery point either does not exist or is not valid.

             * 400 LtrBackupNotFound - The specified long term retention backup does not exist.

             * 400 InvalidPointInTime - The specified point in time is not valid for the database.

             * 400 GeoRestoreCannotResolveTargetCluster - Cannot resolve target cluster for server

             * 400 CannotSpecifyEditionOrSloWhenRestoringToPool - Specifying the target service level objective or edition is not supported when restoring to an elastic pool.

             * 400 RestoreNotSupportedForGeoDrSecondary - Point-in-time restore and database recovery operations are not supported on databases that are currently configured as geo-secondaries.

             * 400 DatabaseNamedReplicaBackupRetentionConfigurationNotSupported - User attempted configuring backup retention policy on a Named Replica.

             * 400 GeoRedundantBackupsNotPermittedForSubscription - Geo-redundant backup storage is blocked for all databases under subscription '{0}' by preview feature 'Azure SQL Database Block Geo-redundant Backup Storage'. Please select a different backup storage redundancy.

             * 400 RestoreHyperscaleToNonHyperscaleElasticPool - Restoring a Hyperscale database to an elastic pool which is not Hyperscale or restoring a database which is not Hyperscale to a Hyperscale elastic pool is not supported.

             * 400 RestoreIneligibleDatabaseName - The specified target database name, '{0}', is reserved and cannot be used in a restore operation.

             * 400 RestoreNotSupportedForSystemDb - Restore and database recovery are not supported for system databases.

             * 400 RestoreIneligibleDroppedDatabaseShortLifespan - The source database, '{0}', dropped on '{1}', has not existed long enough to support restores.

             * 400 RestoreIneligibleLiveDatabaseShortLifespan - The source database, '{0}', has not yet accomplished its first backup in order to support restore operations. Please wait until at least the indicated earliest restore date '{1}' and resubmit the request.

             * 400 RestoreCrossServerDisabled - For point-in-time restores, the target logical server must be the same as the source logical server. Consider restoring to the source database's server, or using database copy or database recovery.

             * 400 RestoreSameServerRecoveryDisabled - Same-server recovery is currently not supported. Consider using point-in-time restore or recovering to a different server.

             * 400 RestoreNotSupportedFromLtrBackupToEdition - Restore from long-term retention backup to '{0}' edition not supported.

             * 400 RestoreNotSupportedFromExternalBackupToEdition - Restore from external backup to '{0}' edition not supported.

             * 400 UpdateToServerlessIfLtrIsNotDisabled - Enabling auto-pause for a serverless database is not supported if long-term backup retention is enabled.

             * 400 DuplicateRestoreOperation - A restore request with the same target database name '{0}' on server '{1}' already exists.

             * 400 ExternalBackupUriMalformed - The external backup storage container URI is malformed.

             * 400 ExternalBackupUriHostNotAllowed - The host name for the external backup storage container URI is not allowed.

             * 400 ExternalBackupUriInvalidSchemeOrPort - The external backup storage container URI uses an invalid scheme or port. Please use https and port 443.

             * 400 ExternalBackupVldbUnsupported - Hyperscale does not support external backup restore requests.

             * 400 CannotMoveOrDropSyncMetadataDatabase - Cannot drop database used as sync metadata database.

             * 400 InvalidPitrPriorToVldbMigration - For database '{0}', specified point-in-time '{1}' is prior to the Hyperscale migration time of '{2}'. Please specify a target edition or service level objective which is not Hyperscale when restoring to a point earlier than the Hyperscale migration.

             * 400 MissingKeyVaultUriForRestore - Azure Key Vault key URI '{0}' is required to successfully restore the database '{1}' under server '{2}'.

             * 400 BlockRestoreOnVldbGeoSecondary - Restore of Hyperscale database where source database is geo-secondary is not allowed.

             * 400 InvalidPublicMaintenanceConfiguration - User tried to specify public maintenance configuration which cannot be converted to internal id (malformed or wrong region).

             * 400 MaintenanceWindowNotSupportedForNamedReplica - User tried to create or update named replica with non-default maintenance window which is not supported.

             * 400 InvalidStandbyGeoReadScale - User attempted to enable read scale on a standby geo database that does not support it.

             * 400 PerDatabaseCMKKeyRotationAttemptedWhileOldThumbprintInUse - Key Rotation for the TDE Protector at the database level is blocked when active transactions are holding up the log encrypted with old keys. Please refer to aka.ms/azuresqldbkeyrotation for possible strategies to workaround this issue.

             * 400 PerDBCMKNotSupportedWithLTR - Database-level CMK is not supported when Long-term Backup Retention is enabled on the database.

             * 400 PerDatabaseCMKCopyOrReplicationAttemptedWithoutDatabaseLevelEncryptionProtector - Database-level encryption protector must be set on the target database while attempting to copy or replicate a database encrypted with a database level key.

             * 400 PerDatabaseCMKCopyOrReplicationAttemptedWithoutCurrentKeys - While attempting to replicate a database configured with database level encryption protector, the current keys being used by the primary must be passed to the secondary database.

             * 400 PerDatabaseCMKGeoPrimaryIsNotConfiguredWithDatabaseLevelEncryptionProtector - The geo-primary database must be configured with a database level encryption protector before setting a database level encryption protector on the geo-secondary.

             * 400 PerDatabaseCMKGeoPrimaryIsConfiguredWithDatabaseLevelEncryptionProtector - The geo-primary database must not be configured with a database level encryption protector when failing over to a geo-secondary without a database level encryption protector.

             * 400 CreateDatabaseAttemptedWithRotationInProgress - The create database operation can not be performed at this time due to ongoing Transparent Data Encryption (TDE) key rotation on the server. Please try the operation again later.

             * 400 MissingAsymmetricKeyOnTargetServer - Target server does not have access to an asymmetric key.

             * 400 MismatchingSubscriptionWithUrl - The provided subscription did not match the subscription in the Url.

             * 400 MultipleDroppedDatabasesWithTheSameName - Found multiple dropped databases with the same name on server.

             * 400 AzureKeyVaultClientError - The Azure Key Vault client encountered an error.

             * 400 AzureKeyVaultClientInfoError - An error occurred while obtaining information for the Azure Key Vault client.

             * 400 UnsupportedBackupStorageRedundancy - Specified Backup Storage Redundancy is not supported in target region.

             * 400 LTRSterlingToVldbMigrationNotSupported - Cannot change service objective for database  to Hyperscale as long-term retention is not yet supported on Hyperscale. Please disable long-term retention on the database and retry.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - Invalid request specifying a non-existent resource.

             * 404 CrossManagedInstanceDatabaseMovementNotExist - Database movement does not exist.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 CannotFindServerCertificateWithThumbprint - Cannot find server certificate with thumbprint '{0}'. Please use PowerShell Cmdlet 'Add-AzureRmSqlManagedInstanceTransparentDataEncryptionCertificate' to create the certificate.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 RestoreSourceDatabaseNotFound - Could not find database '{0}' at time '{1}' that can be restored.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 SubscriptionNotFound - The requested subscription was not found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 CannotFindObject - Cannot find the object because it does not exist or you do not have permissions

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 ManagedInstanceContainsInaccessibleDatabases - The operation could not be completed because managed instance '{0}' contains databases that are in the Inaccessible state. Please either drop inaccessible databases or fix the issues with access to the customer-managed TDE protector key for managed instance before retrying operation. https://go.microsoft.com/fwlink/?linkid=2111623

             * 409 ManagedInstanceHasHybridLink - User tried to initiate operation that is not supported when managed instance has a hybrid link configured.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 InstanceFailoverGroupAlreadyExists - Failover group already exists on a given server.

             * 409 InstanceFailoverGroupBusy - Instance failover group is busy with another operation.

             * 409 InstanceFailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 InvalidFailoverGroupName - Invalid Instance Failover Group name was supplied.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ManagementServiceDatabaseBusy - Database '{0}' is busy with another operation. Please try your operation later.

             * 409 ServerDisabled - Server is disabled.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication operation was performed on a database that is not in a replication relationship.

             * 409 InvalidOperationForDatabaseInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 FreeDbAlreadyExists - Only one free database can exist for a subscription per region.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 SkuAssignmentInProgress - The current assignment request cannot be processed because a previous request has not completed.

             * 409 CurrentMemoryUsageExceedsSkuQuota - User attempted an sku update operation that cannot be completed due to the higher resource consumption.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 ServerDtuQuotaExceeded - Could not perform the operation because server would exceed the allowed Database Throughput Unit quota.

             * 409 UpdateSloFailedDatabaseTooBusy - Update SLO operation could not complete because database was too busy.

             * 409 UnableToAlterDatabaseInReplication - User altered edition on a database in a replication relationship.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 ElasticPoolBusy - A management operation was attempted on an elastic pool which is busy.

             * 409 SimultaneousSkuChangeNotAllowed - Service objective change operations cannot run on both databases of a replication relationship at the same time.

             * 409 TargetElasticPoolBeingUpdated - The update of elastic pool cannot be started because there is copy operation in progress for one of the databases in this elastic pool

             * 409 DatabaseCopyLimitPerReplicaReached - User reached the limit of concurrent database copies.

             * 409 ConflictRequestToUpdateBackupRedundancy - A conflict request to change backup storage redundancy is still in progress.

             * 409 DatabaseElasticPoolMaintenanceConflict - User tried to create or update a database with a specified maintenance configuration that conflicted with that of the elastic pool of the database.

             * 409 SubscriptionVcoreQuotaExceeded - Could not perform the operation because subscription would exceed the allowed vCore quota.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 500 ActivateOrDeactivateWorkflowThrottling - Activation or deactivation workflow failed because there are too many concurrent workflows

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/inaccessibleManagedDatabases?api-version=2022-08-01-preview:
    get:
      tags:
        - ManagedDatabases
      description: Gets a list of inaccessible managed databases in a managed instance
      operationId: ManagedDatabasesInaccessibleByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of inaccessible managed databases in a managed instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedDatabaseListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedDatabases_ListInaccessibleByInstance
  /subscriptions/{subscriptionId}/providers/Microsoft.Sql/locations/{locationName}/capabilities?api-version=2020-11-01-preview:
    get:
      tags:
        - LocationCapabilities
      description: Gets the subscription capabilities available for the specified location.
      operationId: Capabilities_ListByLocation
      parameters:
        - name: locationName
          in: path
          description: The location name whose capabilities are retrieved.
          required: true
          schema:
            type: string
        - name: include
          in: query
          description: If specified, restricts the response to only include the selected item.
          required: false
          schema:
            enum:
              - supportedEditions
              - supportedElasticPoolEditions
              - supportedManagedInstanceVersions
              - supportedInstancePoolEditions
              - supportedManagedInstanceEditions
            x-ms-enum:
              name: CapabilityGroup
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the subscription location capabilities.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationCapabilities'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidLocation - An invalid location was specified.

             * 400 SubscriptionNotFound - The requested subscription was not found.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/azureADOnlyAuthentications/{authenticationName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceAzureADOnlyAuthentications
      description: Gets a specific Azure Active Directory only authentication property.
      operationId: ManagedInstanceAzureADOnlyAuthentications_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: authenticationName
          in: path
          description: The name of server azure active directory only authentication.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AuthenticationName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved a specified Azure Active Directory only authentication properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceAzureADOnlyAuthentication'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerAzureADOnlyAuthenticationParameter - User tried to set AzureADOnlyAuthentication parameter to false which is not allowed, please use azureADOnlyAuthentications API instead.

             * 400 InvalidManagedServerAADOnlyAuthTypePropertyName - Managed Server Azure Active Directory only authentication type should be Default

             * 400 InvalidManagedServerAADOnlyAuthNoAADAdminPropertyName - AAD Admin is not configured, AAD Admin must be set before enabling/disabling AAD Only Authentication.

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
    put:
      tags:
        - ManagedInstanceAzureADOnlyAuthentications
      description: Sets Server Active Directory only authentication property or updates an existing server Active Directory only authentication property.
      operationId: ManagedInstanceAzureADOnlyAuthentications_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: authenticationName
          in: path
          description: The name of server azure active directory only authentication.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AuthenticationName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The required parameters for creating or updating an Active Directory only authentication property.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedInstanceAzureADOnlyAuthentication'
      responses:
        '200':
          description: Successfully updated a Azure Active Directory only authentication property.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceAzureADOnlyAuthentication'
        '201':
          description: Successfully updated Azure Active Directory only authentication property.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceAzureADOnlyAuthentication'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerAzureADOnlyAuthenticationParameter - User tried to set AzureADOnlyAuthentication parameter to false which is not allowed, please use azureADOnlyAuthentications API instead.

             * 400 InvalidManagedServerAADOnlyAuthTypePropertyName - Managed Server Azure Active Directory only authentication type should be Default

             * 400 InvalidManagedServerAADOnlyAuthNoAADAdminPropertyName - AAD Admin is not configured, AAD Admin must be set before enabling/disabling AAD Only Authentication.

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    delete:
      tags:
        - ManagedInstanceAzureADOnlyAuthentications
      description: Deletes an existing server Active Directory only authentication property.
      operationId: ManagedInstanceAzureADOnlyAuthentications_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: authenticationName
          in: path
          description: The name of server azure active directory only authentication.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AuthenticationName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the Azure Active Directory only property.
        '202':
          description: Accepted
        '204':
          description: The specified Azure Active Directory only property does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidServerAzureADOnlyAuthenticationParameter - User tried to set AzureADOnlyAuthentication parameter to false which is not allowed, please use azureADOnlyAuthentications API instead.

             * 400 InvalidManagedServerAADOnlyAuthTypePropertyName - Managed Server Azure Active Directory only authentication type should be Default

             * 400 InvalidManagedServerAADOnlyAuthNoAADAdminPropertyName - AAD Admin is not configured, AAD Admin must be set before enabling/disabling AAD Only Authentication.

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/azureADOnlyAuthentications?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedInstanceAzureADOnlyAuthentications
      description: Gets a list of server Azure Active Directory only authentications.
      operationId: ManagedInstanceAzureADOnlyAuthenticationsByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of Azure Active Directory only authentication objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceAzureADOnlyAuthListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SubscriptionNotFound - The requested subscription was not found.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 ManagedInstanceNotInSubscriptionResourceGroup - Specified managed instance does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: ManagedInstanceAzureADOnlyAuthentications_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/encryptionProtector/{encryptionProtectorName}/revert?api-version=2022-08-01-preview:
    post:
      tags:
        - DatabaseEncryptionProtectorRevert
      description: Reverts an existing encryption protector for a particular database.
      operationId: DatabaseEncryptionProtectors_Revert
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: encryptionProtectorName
          in: path
          description: The name of the encryption protector to be updated.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: EncryptionProtectorName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully Reverted the encryption protector.
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 DatabaseLevelEncryptionProtectorDoesNotExist - Database-level encryption protector does not exist.

             * 400 RevertDatabaseLevelKeyOnlySupportedWithSMK - Database-level encryption protector can only be reverted to the server level encryption when the server is configured with Microsoft Managed Key.

             * 400 InvalidEncryptionProtectorName - The encryption protector key name is not supported.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 PerDatabaseCMKDWNotSupported - Database-level CMK in preview is not supported for Datawarehouse edition.

             * 400 BlockSystemAssignedIdentityForCrossTenantCMK - Cross tenant CMK can only be configured when the server is configured with a User Assigned Managed Identity. Refer to https://aka.ms/sqltdebyokumi to configure User Assigned Managed Identity.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 PerDatabaseCMKRestoreNotSupported - Database restore is not supported when Database-level CMK is configured in preview.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 PerDatabaseCMKHSNotSupported - Database-level CMK in preview is not supported for Hyperscale edition.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 CMKOperationNotAllowed - User tried to perform an operation on the server when the server did not have Azure Key Vault Access.

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerKeyNotFound - The requested server key was not found on the current subscription.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 EncryptionProtectorChangeInProgress - Cannot update database encryption key protector while protector change is already in progress

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: location
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/keys?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerKeys
      description: Gets a list of server keys.
      operationId: ServerKeys_ListByServer
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of server keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerKeyListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/keys/{keyName}?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerKeys
      description: Gets a server key.
      operationId: ServerKeys_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: keyName
          in: path
          description: The name of the server key to be retrieved.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified server key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerKey'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - ServerKeys
      description: Creates or updates a server key.
      operationId: ServerKeys_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: keyName
          in: path
          description: 'The name of the server key to be operated on (updated or created). The key name is required to be in the format of ''vault_key_version''. For example, if the keyId is https://YourVaultName.vault.azure.net/keys/YourKeyName/YourKeyVersion, then the server key name should be formatted as: YourVaultName_YourKeyName_YourKeyVersion'
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested server key resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerKey'
      responses:
        '200':
          description: Successfully updated the server key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerKey'
        '201':
          description: Successfully created the server key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerKey'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultMismatchError - Unexpected Key Vault region found in the http response.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultMismatchError - Unexpected Key Vault region found in the http response.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 401 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 401 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 401 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 401 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 401 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 401 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 401 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 401 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 401 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 401 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .
      x-ms-long-running-operation: true
    delete:
      tags:
        - ServerKeys
      description: Deletes the server key with the given name.
      operationId: ServerKeys_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: keyName
          in: path
          description: The name of the server key to be deleted.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the server key.
        '202':
          description: Accepted
        '204':
          description: The specified server key does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InvalidKeyName - An invalid value was given for the server key name.

             * 400 InvalidKeyType - The create server key type is not supported.

             * 400 InvalidUpsertKeyType - Service-managed TDE keys are managed by the service. Service-managed TDE keys don't support Create or Update by the user.

             * 400 InvalidKeyUpsertRequest - The create server key request does not exist or has no properties object.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultMismatchError - Unexpected Key Vault region found in the http response.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 401 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 401 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 401 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 401 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 401 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/endpointCertificates?api-version=2021-11-01-preview:
    get:
      tags:
        - EndpointCertificates
      description: List certificates used on endpoints on the target instance.
      operationId: EndpointCertificatesByInstance_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved a list of endpoint certificates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointCertificateListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: EndpointCertificates_ListByInstance
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/endpointCertificates/{endpointType}?api-version=2021-11-01-preview:
    get:
      tags:
        - EndpointCertificates
      description: Gets a certificate used on the endpoint with the given id.
      operationId: EndpointCertificates_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - name: endpointType
          in: path
          description: Type of the endpoint whose certificate the customer is looking for.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved an endpoint certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointCertificate'
        default:
          description: |-
            *** Error Responses: ***

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/queries/{queryId}?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseQueries
      description: Get query by query id.
      operationId: ManagedDatabaseQueries_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: queryId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved query text.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceQuery'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/managedInstances/{managedInstanceName}/databases/{databaseName}/queries/{queryId}/statistics?api-version=2020-11-01-preview:
    get:
      tags:
        - ManagedDatabaseQueries
      description: Get query execution statistics by query id.
      operationId: ManagedDatabaseQueries_ListByQuery
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ManagedInstanceNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: queryId
          in: path
          required: true
          schema:
            type: string
        - name: startTime
          in: query
          description: Start time for observed period.
          required: false
          schema:
            type: string
        - name: endTime
          in: query
          description: End time for observed period.
          required: false
          schema:
            type: string
        - name: interval
          in: query
          description: The time step to be used to summarize the metric values.
          required: false
          schema:
            enum:
              - PT1H
              - P1D
            x-ms-enum:
              name: QueryTimeGrainType
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved query text.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedInstanceQueryStatistics'
        default:
          description: |-
            *** Error Responses: ***

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/automaticTuning/current?api-version=2020-11-01-preview:
    get:
      tags:
        - ServerAutomaticTuning
      description: Retrieves server automatic tuning options.
      operationId: ServerAutomaticTuning_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved server automatic tuning properties.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerAutomaticTuning'
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 404 DatabaseDoesNotExist - The requested database was not found

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SubscriptionDoesNotHaveElasticPool - The requested elastic pool was not found

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 405 NotSupported - This functionality is not supported.

             * 409 Conflict - Request could not be processed because of conflict in the request.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.
    patch:
      tags:
        - ServerAutomaticTuning
      description: Update automatic tuning options on server.
      operationId: ServerAutomaticTuning_Update
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested automatic tuning resource state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerAutomaticTuning'
      responses:
        '200':
          description: Successfully updated the server-level automatic tuning options.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerAutomaticTuning'
        default:
          description: |-
            *** Error Responses: ***

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 InvalidAutomaticTuningUpsertRequest - The update automatic tuning request body does not exist or has no properties object.

             * 400 InvalidAdvisorAutoExecuteStatus - Specified auto-execute status for the advisor is not allowed.

             * 404 DatabaseDoesNotExist - The requested database was not found

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 SubscriptionDoesNotHaveElasticPool - The requested elastic pool was not found

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 AutomaticTuningOptionNotFound - The requested automatic tuning option was not found.

             * 405 NotSupported - This functionality is not supported.

             * 409 Conflict - Request could not be processed because of conflict in the request.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 DefaultAdvisorStateNotAllowedInCustomServerMode - DEFAULT advisor state not allowed in CUSTOM mode

             * 409 UpdateNotAllowedIfServerAutotuningUpdateOperationInProgress - Automatic tuning settings from previous request have not propagated to all user databases.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 ServiceTemporarilyUnavailable - Feature temporarily unavailable.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs?api-version=2020-11-01-preview:
    get:
      tags:
        - Jobs
      description: Gets a list of jobs.
      operationId: Jobs_ListByAgent
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of jobs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/jobAgents/{jobAgentName}/jobs/{jobName}?api-version=2020-11-01-preview:
    get:
      tags:
        - Jobs
      description: Gets a job.
      operationId: Jobs_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to get.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        default:
          description: |-
            *** Error Responses: ***

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
    put:
      tags:
        - Jobs
      description: Creates or updates a job.
      operationId: Jobs_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to get.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested job state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '200':
          description: Successfully updated the job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        '201':
          description: Successfully created the job.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        default:
          description: |-
            *** Error Responses: ***

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 400 InvalidDuration - Invalid duration.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.
    delete:
      tags:
        - Jobs
      description: Deletes a job.
      operationId: Jobs_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - name: jobAgentName
          in: path
          description: The name of the job agent.
          required: true
          schema:
            type: string
        - name: jobName
          in: path
          description: The name of the job to delete.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the job.
        '204':
          description: The specified job does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 400 ElasticJobsOperationFailed - Elastic jobs management operation failed.

             * 404 JobAgentNotFound - Specified job agent does not exist in the specified logical server.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ResourceNotFound - The requested resource was not found.
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption?api-version=2022-08-01-preview:
    get:
      tags:
        - TransparentDataEncryptions
      description: Gets a list of the logical database's transparent data encryption.
      operationId: TransparentDataEncryptions_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the logical database for which the transparent data encryption is defined.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of Logical database transparent data encryption.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogicalDatabaseTransparentDataEncryptionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 PerDatabaseCMKDWNotSupported - Database-level CMK in preview is not supported for Datawarehouse edition.

             * 400 BlockSystemAssignedIdentityForCrossTenantCMK - Cross tenant CMK can only be configured when the server is configured with a User Assigned Managed Identity. Refer to https://aka.ms/sqltdebyokumi to configure User Assigned Managed Identity.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 PerDatabaseCMKRestoreNotSupported - Database restore is not supported when Database-level CMK is configured in preview.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 PerDatabaseCMKHSNotSupported - Database-level CMK in preview is not supported for Hyperscale edition.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 CMKOperationNotAllowed - User tried to perform an operation on the server when the server did not have Azure Key Vault Access.

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 AttemptedEncryptionOnSystemDatabase - Cannot encrypt a system database. Database encryption operations cannot be performed for 'master', 'model', 'tempdb', 'msdb', or 'resource' databases.

             * 400 ReadOnly - Cannot enable or modify database encryption on a database that is read-only, has read-only files or is not recovered.

             * 400 CanNotDropAlterOnMirror - Please modify Transparent Data Encryption on the primary databases.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 401 CanNotChangeReadOnlyDuringTdeScan - Cannot modify filegroup read-only/read-write state while an encryption transition is in progress.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 EncryptionInProgress - Cannot modify encryption while an encryption scan in progress.

             * 409 KeyChangeInProgress - Cannot change database encryption key while an encryption, decryption, or key change scan is in progress.

             * 409 NoBulkOperationLock - CREATE/ALTER/DROP DATABASE ENCRYPTION KEY failed because a lock could not be placed on database. Try again later.

             * 409 NeedsLogBackup - Please wait several minutes for a log backup to occur. 

             * 409 AltStateConflict - The operation cannot be performed on database because it is involved in a database mirroring session or an availability group. Some operations are not allowed on a database that is participating in a database mirroring session or in an availability group.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 NoDekLock - CREATE/ALTER/DROP DATABASE ENCRYPTION KEY failed because a lock could not be placed on the database. Try again later.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/transparentDataEncryption/{tdeName}?api-version=2022-08-01-preview:
    get:
      tags:
        - TransparentDataEncryptions
      description: Gets a logical database's transparent data encryption.
      operationId: TransparentDataEncryptions_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the logical database for which the transparent data encryption is defined.
          required: true
          schema:
            type: string
        - name: tdeName
          in: path
          description: The name of the transparent data encryption configuration.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: TransparentDataEncryptionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the Logical database transparent data encryption.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogicalDatabaseTransparentDataEncryption'
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 PerDatabaseCMKDWNotSupported - Database-level CMK in preview is not supported for Datawarehouse edition.

             * 400 BlockSystemAssignedIdentityForCrossTenantCMK - Cross tenant CMK can only be configured when the server is configured with a User Assigned Managed Identity. Refer to https://aka.ms/sqltdebyokumi to configure User Assigned Managed Identity.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 PerDatabaseCMKRestoreNotSupported - Database restore is not supported when Database-level CMK is configured in preview.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 PerDatabaseCMKHSNotSupported - Database-level CMK in preview is not supported for Hyperscale edition.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 CMKOperationNotAllowed - User tried to perform an operation on the server when the server did not have Azure Key Vault Access.

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 AttemptedEncryptionOnSystemDatabase - Cannot encrypt a system database. Database encryption operations cannot be performed for 'master', 'model', 'tempdb', 'msdb', or 'resource' databases.

             * 400 ReadOnly - Cannot enable or modify database encryption on a database that is read-only, has read-only files or is not recovered.

             * 400 CanNotDropAlterOnMirror - Please modify Transparent Data Encryption on the primary databases.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 401 CanNotChangeReadOnlyDuringTdeScan - Cannot modify filegroup read-only/read-write state while an encryption transition is in progress.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 EncryptionInProgress - Cannot modify encryption while an encryption scan in progress.

             * 409 KeyChangeInProgress - Cannot change database encryption key while an encryption, decryption, or key change scan is in progress.

             * 409 NoBulkOperationLock - CREATE/ALTER/DROP DATABASE ENCRYPTION KEY failed because a lock could not be placed on database. Try again later.

             * 409 NeedsLogBackup - Please wait several minutes for a log backup to occur. 

             * 409 AltStateConflict - The operation cannot be performed on database because it is involved in a database mirroring session or an availability group. Some operations are not allowed on a database that is participating in a database mirroring session or in an availability group.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 NoDekLock - CREATE/ALTER/DROP DATABASE ENCRYPTION KEY failed because a lock could not be placed on the database. Try again later.
    put:
      tags:
        - TransparentDataEncryptions
      description: Updates a logical database's transparent data encryption configuration.
      operationId: TransparentDataEncryptions_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: serverName
          in: path
          description: The name of the server.
          required: true
          schema:
            type: string
        - name: databaseName
          in: path
          description: The name of the logical database for which the security alert policy is defined.
          required: true
          schema:
            type: string
        - name: tdeName
          in: path
          description: The name of the transparent data encryption configuration.
          required: true
          schema:
            enum:
              - current
            x-ms-enum:
              name: TransparentDataEncryptionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The database transparent data encryption.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogicalDatabaseTransparentDataEncryption'
      responses:
        '200':
          description: Successfully updated the database Transparent Data Encryption state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogicalDatabaseTransparentDataEncryption'
        '201':
          description: Successfully created the database transparent data encryption state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogicalDatabaseTransparentDataEncryption'
        '202':
          description: Creating or updating the database transparent data encryption configuration is in progress.
        default:
          description: |-
            *** Error Responses: ***

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 AkvHostNotResolvingFromNode - AKV host '{0}' is not resolvable from SQL, on server '{1}'.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 UmiMissingAkvPermissions - PrimaryUserAssignedIdentityId provided by user does not have access to KeyId provided

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 SecurityAzureKeyVaultGeoChainError - Creating secondary of secondary (a process known as chaining) is not supported when enabling Transparent Data Encryption using Azure Key Vault (BYOK).

             * 400 PerDatabaseCMKDWNotSupported - Database-level CMK in preview is not supported for Datawarehouse edition.

             * 400 BlockSystemAssignedIdentityForCrossTenantCMK - Cross tenant CMK can only be configured when the server is configured with a User Assigned Managed Identity. Refer to https://aka.ms/sqltdebyokumi to configure User Assigned Managed Identity.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 PerDatabaseCMKRestoreNotSupported - Database restore is not supported when Database-level CMK is configured in preview.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 PerDatabaseCMKHSNotSupported - Database-level CMK in preview is not supported for Hyperscale edition.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 CMKOperationNotAllowed - User tried to perform an operation on the server when the server did not have Azure Key Vault Access.

             * 400 AkvEndpointNotReachableFromNode - AKV endpoint '{0}' is not reachable from SQL, on server '{1}'.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 AttemptedEncryptionOnSystemDatabase - Cannot encrypt a system database. Database encryption operations cannot be performed for 'master', 'model', 'tempdb', 'msdb', or 'resource' databases.

             * 400 ReadOnly - Cannot enable or modify database encryption on a database that is read-only, has read-only files or is not recovered.

             * 400 CanNotDropAlterOnMirror - Please modify Transparent Data Encryption on the primary databases.

             * 400 ManagedInstanceStoppingOrStopped - Conflicting operation submitted while instance is in stopping/stopped state

             * 400 ManagedInstanceStarting - Conflicting operation submitted while instance is in starting state

             * 400 InvalidTransparentDataEncryptionUpdateRequest - Please enter a valid state. Please use "Enabled" or "Disabled".

             * 400 InvalidTransparentDataEncryptionName - The  transparent data encryption key name is not supported.

             * 401 CanNotChangeReadOnlyDuringTdeScan - Cannot modify filegroup read-only/read-write state while an encryption transition is in progress.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 EncryptionInProgress - Cannot modify encryption while an encryption scan in progress.

             * 409 KeyChangeInProgress - Cannot change database encryption key while an encryption, decryption, or key change scan is in progress.

             * 409 NoBulkOperationLock - CREATE/ALTER/DROP DATABASE ENCRYPTION KEY failed because a lock could not be placed on database. Try again later.

             * 409 NeedsLogBackup - Please wait several minutes for a log backup to occur. 

             * 409 AltStateConflict - The operation cannot be performed on database because it is involved in a database mirroring session or an availability group. Some operations are not allowed on a database that is participating in a database mirroring session or in an availability group.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 503 NoDekLock - CREATE/ALTER/DROP DATABASE ENCRYPTION KEY failed because a lock could not be placed on the database. Try again later.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.
      x-ms-long-running-operation: true
      x-ms-long-running-operation-options:
        final-state-via: azure-async-operation
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups?api-version=2022-05-01-preview:
    get:
      tags:
        - InstanceFailoverGroups
      description: Lists the failover groups in a location.
      operationId: InstanceFailoverGroups_ListByLocation
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the failover groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceFailoverGroupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPrimary - The given primary field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the instance failover group. Please make sure the primary server and all of the given partner servers are unique.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidManagedInstanceRegion - The provided partner managed instance region in the instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner region is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPairCount - Only one managed instance pair is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalid - The create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the instance failover group are not allowed on a secondary server. Execute the request on the primary server.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the instance failover group must be greater than or equal to the '{0}' minutes minimum grace period

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update instance failover group request body should not modify the read-only property '{0}'.

             * 400 InstanceFailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of instance failover group.

             * 400 InstanceFailoverGroupPartnerManagedInstanceFromDifferentSubscription - Primary server and the partner server of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 ServerNotFound - The requested server was not found.

             * 400 ServerEditionMismatch - Edition must be the same as the primary server when creating a replica server.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidFailoverGroupRegion - Servers specified in an Instance Failover Group need to reside in different regions to provide isolation.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 InstanceFailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a instance failover group.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 FailoverGroupRegionMismatch - Partner region specified in Failover Group need to match the region of the partner managed instance indicated.

             * 400 DnsZoneMismatch - The DNSZone on the partner server is different from the DNSZone on the source server. This breaks InstanceFailoverGroup functionality.

             * 400 GeoDrInstanceSizeMismatch - Primary managed instance and partner managed instance do not have the same storage size.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 GeoDrSecondaryInstanceNotEmpty - Secondary managed instance has user databases. To create an instance failover group the secondary managed instance needs to be empty.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 ManagedInstanceHasHybridLink - User tried to initiate operation that is not supported when managed instance has a hybrid link configured.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 InstanceFailoverGroupAlreadyExists - Failover group already exists on a given server.

             * 409 InstanceFailoverGroupBusy - Instance failover group is busy with another operation.

             * 409 InstanceFailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 InvalidFailoverGroupName - Invalid Instance Failover Group name was supplied.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}?api-version=2022-05-01-preview:
    get:
      tags:
        - InstanceFailoverGroups
      description: Gets a failover group.
      operationId: InstanceFailoverGroups_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - name: failoverGroupName
          in: path
          description: The name of the failover group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specified failover group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceFailoverGroup'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPrimary - The given primary field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the instance failover group. Please make sure the primary server and all of the given partner servers are unique.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidManagedInstanceRegion - The provided partner managed instance region in the instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner region is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPairCount - Only one managed instance pair is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalid - The create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the instance failover group are not allowed on a secondary server. Execute the request on the primary server.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the instance failover group must be greater than or equal to the '{0}' minutes minimum grace period

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update instance failover group request body should not modify the read-only property '{0}'.

             * 400 InstanceFailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of instance failover group.

             * 400 InstanceFailoverGroupPartnerManagedInstanceFromDifferentSubscription - Primary server and the partner server of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 ServerNotFound - The requested server was not found.

             * 400 ServerEditionMismatch - Edition must be the same as the primary server when creating a replica server.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidFailoverGroupRegion - Servers specified in an Instance Failover Group need to reside in different regions to provide isolation.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 InstanceFailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a instance failover group.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 FailoverGroupRegionMismatch - Partner region specified in Failover Group need to match the region of the partner managed instance indicated.

             * 400 DnsZoneMismatch - The DNSZone on the partner server is different from the DNSZone on the source server. This breaks InstanceFailoverGroup functionality.

             * 400 GeoDrInstanceSizeMismatch - Primary managed instance and partner managed instance do not have the same storage size.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 GeoDrSecondaryInstanceNotEmpty - Secondary managed instance has user databases. To create an instance failover group the secondary managed instance needs to be empty.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 ManagedInstanceHasHybridLink - User tried to initiate operation that is not supported when managed instance has a hybrid link configured.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 InstanceFailoverGroupAlreadyExists - Failover group already exists on a given server.

             * 409 InstanceFailoverGroupBusy - Instance failover group is busy with another operation.

             * 409 InstanceFailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 InvalidFailoverGroupName - Invalid Instance Failover Group name was supplied.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
    put:
      tags:
        - InstanceFailoverGroups
      description: Creates or updates a failover group.
      operationId: InstanceFailoverGroups_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - name: failoverGroupName
          in: path
          description: The name of the failover group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The failover group parameters.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceFailoverGroup'
      responses:
        '200':
          description: Successfully updated the failover group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceFailoverGroup'
        '201':
          description: Successfully created the failover group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceFailoverGroup'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPrimary - The given primary field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the instance failover group. Please make sure the primary server and all of the given partner servers are unique.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidManagedInstanceRegion - The provided partner managed instance region in the instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner region is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPairCount - Only one managed instance pair is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalid - The create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the instance failover group are not allowed on a secondary server. Execute the request on the primary server.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the instance failover group must be greater than or equal to the '{0}' minutes minimum grace period

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update instance failover group request body should not modify the read-only property '{0}'.

             * 400 InstanceFailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of instance failover group.

             * 400 InstanceFailoverGroupPartnerManagedInstanceFromDifferentSubscription - Primary server and the partner server of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 ServerNotFound - The requested server was not found.

             * 400 ServerEditionMismatch - Edition must be the same as the primary server when creating a replica server.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidFailoverGroupRegion - Servers specified in an Instance Failover Group need to reside in different regions to provide isolation.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 InstanceFailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a instance failover group.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 FailoverGroupRegionMismatch - Partner region specified in Failover Group need to match the region of the partner managed instance indicated.

             * 400 DnsZoneMismatch - The DNSZone on the partner server is different from the DNSZone on the source server. This breaks InstanceFailoverGroup functionality.

             * 400 GeoDrInstanceSizeMismatch - Primary managed instance and partner managed instance do not have the same storage size.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 GeoDrSecondaryInstanceNotEmpty - Secondary managed instance has user databases. To create an instance failover group the secondary managed instance needs to be empty.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 ManagedInstanceHasHybridLink - User tried to initiate operation that is not supported when managed instance has a hybrid link configured.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 InstanceFailoverGroupAlreadyExists - Failover group already exists on a given server.

             * 409 InstanceFailoverGroupBusy - Instance failover group is busy with another operation.

             * 409 InstanceFailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 InvalidFailoverGroupName - Invalid Instance Failover Group name was supplied.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    delete:
      tags:
        - InstanceFailoverGroups
      description: Deletes a failover group.
      operationId: InstanceFailoverGroups_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - name: failoverGroupName
          in: path
          description: The name of the failover group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the failover group.
        '202':
          description: Accepted
        '204':
          description: The specified failover group does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPrimary - The given primary field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the instance failover group. Please make sure the primary server and all of the given partner servers are unique.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidManagedInstanceRegion - The provided partner managed instance region in the instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner region is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPairCount - Only one managed instance pair is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalid - The create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the instance failover group are not allowed on a secondary server. Execute the request on the primary server.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the instance failover group must be greater than or equal to the '{0}' minutes minimum grace period

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update instance failover group request body should not modify the read-only property '{0}'.

             * 400 InstanceFailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of instance failover group.

             * 400 InstanceFailoverGroupPartnerManagedInstanceFromDifferentSubscription - Primary server and the partner server of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 ServerNotFound - The requested server was not found.

             * 400 ServerEditionMismatch - Edition must be the same as the primary server when creating a replica server.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidFailoverGroupRegion - Servers specified in an Instance Failover Group need to reside in different regions to provide isolation.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 InstanceFailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a instance failover group.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 FailoverGroupRegionMismatch - Partner region specified in Failover Group need to match the region of the partner managed instance indicated.

             * 400 DnsZoneMismatch - The DNSZone on the partner server is different from the DNSZone on the source server. This breaks InstanceFailoverGroup functionality.

             * 400 GeoDrInstanceSizeMismatch - Primary managed instance and partner managed instance do not have the same storage size.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 GeoDrSecondaryInstanceNotEmpty - Secondary managed instance has user databases. To create an instance failover group the secondary managed instance needs to be empty.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 ManagedInstanceHasHybridLink - User tried to initiate operation that is not supported when managed instance has a hybrid link configured.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 InstanceFailoverGroupAlreadyExists - Failover group already exists on a given server.

             * 409 InstanceFailoverGroupBusy - Instance failover group is busy with another operation.

             * 409 InstanceFailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 InvalidFailoverGroupName - Invalid Instance Failover Group name was supplied.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}/failover?api-version=2022-05-01-preview:
    post:
      tags:
        - InstanceFailoverGroups
      description: Fails over from the current primary managed instance to this managed instance.
      operationId: InstanceFailoverGroups_Failover
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - name: failoverGroupName
          in: path
          description: The name of the failover group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully failed over.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceFailoverGroup'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPrimary - The given primary field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the instance failover group. Please make sure the primary server and all of the given partner servers are unique.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidManagedInstanceRegion - The provided partner managed instance region in the instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner region is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPairCount - Only one managed instance pair is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalid - The create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the instance failover group are not allowed on a secondary server. Execute the request on the primary server.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the instance failover group must be greater than or equal to the '{0}' minutes minimum grace period

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update instance failover group request body should not modify the read-only property '{0}'.

             * 400 InstanceFailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of instance failover group.

             * 400 InstanceFailoverGroupPartnerManagedInstanceFromDifferentSubscription - Primary server and the partner server of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 ServerNotFound - The requested server was not found.

             * 400 ServerEditionMismatch - Edition must be the same as the primary server when creating a replica server.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidFailoverGroupRegion - Servers specified in an Instance Failover Group need to reside in different regions to provide isolation.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 InstanceFailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a instance failover group.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 FailoverGroupRegionMismatch - Partner region specified in Failover Group need to match the region of the partner managed instance indicated.

             * 400 DnsZoneMismatch - The DNSZone on the partner server is different from the DNSZone on the source server. This breaks InstanceFailoverGroup functionality.

             * 400 GeoDrInstanceSizeMismatch - Primary managed instance and partner managed instance do not have the same storage size.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 GeoDrSecondaryInstanceNotEmpty - Secondary managed instance has user databases. To create an instance failover group the secondary managed instance needs to be empty.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 ManagedInstanceHasHybridLink - User tried to initiate operation that is not supported when managed instance has a hybrid link configured.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 InstanceFailoverGroupAlreadyExists - Failover group already exists on a given server.

             * 409 InstanceFailoverGroupBusy - Instance failover group is busy with another operation.

             * 409 InstanceFailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 InvalidFailoverGroupName - Invalid Instance Failover Group name was supplied.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/locations/{locationName}/instanceFailoverGroups/{failoverGroupName}/forceFailoverAllowDataLoss?api-version=2022-05-01-preview:
    post:
      tags:
        - InstanceFailoverGroups
      description: Fails over from the current primary managed instance to this managed instance. This operation might result in data loss.
      operationId: InstanceFailoverGroups_ForceFailoverAllowDataLoss
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: locationName
          in: path
          description: The name of the region where the resource is located.
          required: true
          schema:
            type: string
        - name: failoverGroupName
          in: path
          description: The name of the failover group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully failed over.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceFailoverGroup'
        '202':
          description: Accepted
        default:
          description: |-
            *** Error Responses: ***

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPrimary - The given primary field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidPartner - The given partners field in create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestDuplicatePartner - One or more of the provided partner servers are already part of the instance failover group. Please make sure the primary server and all of the given partner servers are unique.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidManagedInstanceRegion - The provided partner managed instance region in the instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPartnerCount - Only one partner region is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestUnsupportedPairCount - Only one managed instance pair is supported.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpoint - The readWriteEndpoint field is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalid - The create or update instance failover group request body is empty or invalid.

             * 400 InstanceFailoverGroupUpdateOrDeleteRequestOnSecondary - Modifications to the instance failover group are not allowed on a secondary server. Execute the request on the primary server.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestNegativeGracePeriodValues - Grace period value for the read-write endpoint must be non-negative.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestLessThanMinimumGracePeriodValues - Grace period value for the instance failover group must be greater than or equal to the '{0}' minutes minimum grace period

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFields - The property failoverWithDataLossGracePeriodMinutes must be provided when failover policy Automatic is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteFailoverPolicy - The failoverPolicy field for the read-write endpoint is required for create or update requests.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestInvalidReadWriteEndpointFieldsForManualPolicy - Grace period value should not be provided when failover policy Manual is selected for the read-write endpoint.

             * 400 InstanceFailoverGroupCreateOrUpdateRequestReadOnlyPropertyModified - The create or update instance failover group request body should not modify the read-only property '{0}'.

             * 400 InstanceFailoverGroupFailoverRequestOnPrimary - The failover request should be initiated on the secondary server of instance failover group.

             * 400 InstanceFailoverGroupPartnerManagedInstanceFromDifferentSubscription - Primary server and the partner server of failover group are from different subscriptions. Cross subscription for servers of failover group is not allowed.

             * 400 InvalidAddSecondaryPermission - User does not have sufficient permission to add secondary on the specified server.

             * 400 InvalidSku - The user specified an invalid sku.

             * 400 ServerNotFound - The requested server was not found.

             * 400 ServerEditionMismatch - Edition must be the same as the primary server when creating a replica server.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 TokenTooLong - The provided token is too long.

             * 400 InvalidTargetSubregion - The target server of a non-readable secondary is not in a DR paired Azure region.

             * 400 IncorrectReplicationLinkState - The operation expects the database to be in an expected state on the replication link.

             * 400 AzureKeyVaultKeyDisabled - The operation could not be completed on the server because the Azure Key Vault key is disabled.

             * 400 AzureKeyVaultInvalidExpirationDate - The operation could not be completed because the Azure Key Vault key expiration date is invalid.

             * 400 SecurityAzureKeyVaultUrlNullOrEmpty - The operation could not be completed because the Azure Key Vault Uri is null or empty.

             * 400 AzureKeyVaultNoServerIdentity - The server identity is not correctly configured.

             * 400 AzureKeyVaultInvalidUri - An invalid response from Azure Key Vault. Please use a valid Azure Key Vault URI.

             * 400 AzureKeyVaultMissingPermissions - The server is missing required permissions on the Azure Key Vault. 

             * 400 SecurityAzureKeyVaultInvalidKeyName - The operation could not be completed because of an invalid Server Key name.

             * 400 PlannedFailoverTimedOutForDatabase - User invoked planned failover, it timed out, and a specific database appears to be to blame.

             * 400 PlannedFailoverTimedOut - User invoked planned failover, and it timed out while trying to contact the partner management service.

             * 400 AdalGenericError - The operation could not be completed because an Azure Active Directory error was encountered.

             * 400 AdalServicePrincipalNotFound - The operation could not be completed because an Azure Active Directory library Service Principal not found error was encountered.

             * 400 AzureKeyVaultMalformedVaultUri - The provided Key Vault uri is not valid.

             * 400 CannotUseReservedDatabaseName - Cannot use reserved database name in this operation.

             * 400 InvalidFailoverGroupRegion - Servers specified in an Instance Failover Group need to reside in different regions to provide isolation.

             * 400 InstanceFailoverGroupDoesNotExist - Failover group does not exist on a server.

             * 400 InstanceFailoverGroupNotSecondary - Failover cannot be initiated from the primary server in a instance failover group.

             * 400 InvalidServerName - Invalid server name specified.

             * 400 SecurityAdalPrincipalCertExpiredError - The operation could not be completed because the Azure Key Vault principal certificate has expired.

             * 400 InvalidIdentifier - The identifier contains NULL or an invalid unicode character.

             * 400 SecurityInvalidAzureKeyVaultRecoveryLevel - The provided Key Vault uri is not valid.

             * 400 KeyMaterialNotFoundOnRemoteServer - Remote server does not have access to key material used as a TDE protector.

             * 400 SameKeyUriNotFoundOnRemoteServer - Secondary server does not have the key material from the same key vault as the primary server's encryption protector with key auto-rotation enabled.

             * 400 AzureKeyVaultRsaKeyNotSupported - The provided key vault uses unsupported RSA Key Size or Key Type. The supported RSA key size is 2048 or 3072 and Key Type is RSA or RSA-HSM.

             * 400 SameKeyMaterialNotFoundOnRemoteServer - Secondary server does not have the key material of the primary server's encryption protector.

             * 400 GeoReplicationDatabaseNotSecondary - The operation expects the database to be a replication target.

             * 400 FailoverGroupRegionMismatch - Partner region specified in Failover Group need to match the region of the partner managed instance indicated.

             * 400 DnsZoneMismatch - The DNSZone on the partner server is different from the DNSZone on the source server. This breaks InstanceFailoverGroup functionality.

             * 400 GeoDrInstanceSizeMismatch - Primary managed instance and partner managed instance do not have the same storage size.

             * 400 UnableToResolveRemoteServer - The remote partner server name could not be resolved due to an invalid server name or DNS connectivity issues.

             * 400 GeoDrSecondaryInstanceNotEmpty - Secondary managed instance has user databases. To create an instance failover group the secondary managed instance needs to be empty.

             * 400 RemoteDatabaseCopyPermission - User does not have sufficient permission to create a database copy on the specified server.

             * 400 InstanceFailoverGroupIncorrectNetworkingConfiguration - Networking configuration is incorrect. Primary server's replication traffic cannot reach secondary server.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 ServerNotInSubscription - Specified server does not exist on the specified subscription.

             * 404 SourceDatabaseNotFound - The source database does not exist.

             * 405 UnsupportedReplicationOperation - An unsupported replication operation was initiated on the database.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 409 ConflictingServerOperation - An operation is currently in progress for the server.

             * 409 SubscriptionDisabled - Subscription is disabled.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 ManagedInstanceHasHybridLink - User tried to initiate operation that is not supported when managed instance has a hybrid link configured.

             * 409 GeoReplicationCannotBecomePrimaryDuringUndo - User attempted to failover or force-terminate a geo-link while the secondary is in a state where it may not be physically consistent and so cannot enter the primary role.

             * 409 ServerKeyNameAlreadyExists - The server key already exists on the server.

             * 409 ServerKeyUriAlreadyExists - The server key URI already exists on the server.

             * 409 ServerKeyDoesNotExists - The server key does not exist.

             * 409 UpdateSloInProgress - User tried to initiate an incompatible operation while a SLO update was in progress.

             * 409 AzureKeyVaultKeyNameNotFound - The operation could not be completed because the Azure Key Vault Key name does not exist.

             * 409 AzureKeyVaultKeyInUse - The key is currently being used by the server.

             * 409 InstanceFailoverGroupAlreadyExists - Failover group already exists on a given server.

             * 409 InstanceFailoverGroupBusy - Instance failover group is busy with another operation.

             * 409 InstanceFailoverGroupDnsRecordInUse - A duplicate DNS record exists for the requested endpoint.

             * 409 InvalidFailoverGroupName - Invalid Instance Failover Group name was supplied.

             * 409 InvalidOperationForDatabaseNotInReplicationRelationship - A replication seeding operation was performed on a database that is already in a replication relationship.

             * 409 InvalidDatabaseStateForOperation - The operation is not allowed on the database in its current replication state.

             * 409 DuplicateGeoDrRelation - The databases are already in a replication relation. This is a duplicate request.

             * 409 RemoteDatabaseExists - The destination database name already exists on the destination server.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyCreateUpdateRequests - Requests beyond max requests that can be processed by available resources.

             * 429 SubscriptionTooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 AzureKeyVaultConnectionFailed - The operation could not be completed on the server because attempts to connect to Azure Key Vault have failed

             * 503 AzureKeyVaultGenericConnectionError - The operation could not be completed because an error was encountered when attempting to retrieve Key Vault information .

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/instancePools/{instancePoolName}/usages?api-version=2021-02-01-preview:
    get:
      tags:
        - Usages
      description: Gets all instance pool usage metrics
      operationId: UsagesByInstancePool_List
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - name: instancePoolName
          in: path
          description: The name of the instance pool to be retrieved.
          required: true
          schema:
            type: string
        - name: expandChildren
          in: query
          description: Optional request parameter to include managed instance usages within the instance pool.
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the instance pool usages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 InstancePoolWrongUsageName - Request for an instance pool's usage has an unsupported usage name

             * 400 InstancePoolManagedInstanceInfoUnavailable - Information for managed instances inside this instance pool is not available

             * 404 InstancePoolNotFound - An instance pool cannot be found
      x-ms-pageable:
        nextLinkName: nextLink
      x-ms-original-operationId: Usages_ListByInstancePool
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}?api-version=2014-04-01:
    put:
      tags:
        - DataMaskingPolicies
      operationId: DataMaskingPolicies_CreateOrUpdate
      description: Creates or updates a database data masking policy
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/DataMaskingPolicyNameParameter'
      requestBody:
        description: Parameters for creating or updating a data masking policy.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataMaskingPolicy'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataMaskingPolicy'
    get:
      tags:
        - DataMaskingPolicies
      operationId: DataMaskingPolicies_Get
      description: Gets a database data masking policy.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/DataMaskingPolicyNameParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataMaskingPolicy'
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules/{dataMaskingRuleName}?api-version=2014-04-01:
    put:
      tags:
        - DataMaskingRules
      operationId: DataMaskingRules_CreateOrUpdate
      description: Creates or updates a database data masking rule.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/DataMaskingPolicyNameParameter'
        - name: dataMaskingRuleName
          in: path
          description: The name of the data masking rule.
          required: true
          schema:
            type: string
      requestBody:
        description: The required parameters for creating or updating a data masking rule.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataMaskingRule'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataMaskingRule'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataMaskingRule'
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules?api-version=2014-04-01:
    get:
      tags:
        - DataMaskingRules
      operationId: DataMaskingRules_ListByDatabase
      description: Gets a list of database data masking rules.
      parameters:
        - $ref: '#/components/parameters/SubscriptionIdParameter'
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/DataMaskingPolicyNameParameter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataMaskingRuleListResult'
      x-ms-pageable:
        nextLinkName: null
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advancedThreatProtectionSettings?api-version=2021-11-01-preview:
    get:
      tags:
        - DatabaseAdvancedThreatProtectionSettings
      description: Gets a list of database's Advanced Threat Protection states.
      operationId: DatabaseAdvancedThreatProtectionSettings_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database Advanced Threat Protection states.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseAdvancedThreatProtectionListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 AdvancedThreatProtectionInsufficientDiskSpace - Insufficient disk space to save the Advanced Threat Protection settings metadata in the database

             * 400 InvalidDatabaseAdvancedThreatProtectionCreateRequest - The create database Advanced Threat Protection request does not exist or has no properties object

             * 400 AdvancedThreatProtectionInvalidUserSuppliedParameter - An invalid parameter value was provided by the client

             * 400 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 400 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 409 DatabaseAdvancedThreatProtectionInProgress - Setting the database Advanced Threat Protection is already in progress

             * 409 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 500 GetDatabaseAdvancedThreatProtectionFailed - Failed to get Advanced Threat Protection settings
      x-ms-pageable:
        nextLinkName: nextLink
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/advancedThreatProtectionSettings/{advancedThreatProtectionName}?api-version=2021-11-01-preview:
    get:
      tags:
        - DatabaseAdvancedThreatProtectionSettings
      description: Gets a database's Advanced Threat Protection state.
      operationId: DatabaseAdvancedThreatProtectionSettings_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: advancedThreatProtectionName
          in: path
          description: The name of the Advanced Threat Protection state.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AdvancedThreatProtectionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the database's Advanced Threat Protection state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseAdvancedThreatProtection'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 AdvancedThreatProtectionInsufficientDiskSpace - Insufficient disk space to save the Advanced Threat Protection settings metadata in the database

             * 400 InvalidDatabaseAdvancedThreatProtectionCreateRequest - The create database Advanced Threat Protection request does not exist or has no properties object

             * 400 AdvancedThreatProtectionInvalidUserSuppliedParameter - An invalid parameter value was provided by the client

             * 400 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 400 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 409 DatabaseAdvancedThreatProtectionInProgress - Setting the database Advanced Threat Protection is already in progress

             * 409 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 500 GetDatabaseAdvancedThreatProtectionFailed - Failed to get Advanced Threat Protection settings
    put:
      tags:
        - DatabaseAdvancedThreatProtectionSettings
      description: Creates or updates a database's Advanced Threat Protection state.
      operationId: DatabaseAdvancedThreatProtectionSettings_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: advancedThreatProtectionName
          in: path
          description: The name of the Advanced Threat Protection state.
          required: true
          schema:
            enum:
              - Default
            x-ms-enum:
              name: AdvancedThreatProtectionName
              modelAsString: true
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The database Advanced Threat Protection state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseAdvancedThreatProtection'
      responses:
        '200':
          description: Successfully set the database Advanced Threat Protection state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseAdvancedThreatProtection'
        '201':
          description: Successfully created the database Advanced Threat Protection state.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseAdvancedThreatProtection'
        default:
          description: |-
            *** Error Responses: ***

             * 400 UpdateNotAllowedOnPausedDatabase - User attempted to perform an update on a paused database.

             * 400 AdvancedThreatProtectionInsufficientDiskSpace - Insufficient disk space to save the Advanced Threat Protection settings metadata in the database

             * 400 InvalidDatabaseAdvancedThreatProtectionCreateRequest - The create database Advanced Threat Protection request does not exist or has no properties object

             * 400 AdvancedThreatProtectionInvalidUserSuppliedParameter - An invalid parameter value was provided by the client

             * 400 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 400 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 409 DatabaseAdvancedThreatProtectionInProgress - Setting the database Advanced Threat Protection is already in progress

             * 409 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 500 DatabaseIsUnavailable - Loading failed. Please try again later.

             * 500 UpsertDatabaseAdvancedThreatProtectionFailed - An error has occurred while saving Advanced Threat Protection settings, please try again later

             * 500 GetDatabaseAdvancedThreatProtectionFailed - Failed to get Advanced Threat Protection settings
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/workloadGroups/{workloadGroupName}?api-version=2020-11-01-preview:
    get:
      tags:
        - WorkloadGroups
      description: Gets a workload group
      operationId: WorkloadGroups_Get
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: workloadGroupName
          in: path
          description: The name of the workload group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the specifies workload group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadGroup'
        default:
          description: |-
            *** Error Responses: ***

             * 400 OperationNotAllowedOnPausedDatabase - Operation is not allowed on a paused database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
    put:
      tags:
        - WorkloadGroups
      description: Creates or updates a workload group.
      operationId: WorkloadGroups_CreateOrUpdate
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: workloadGroupName
          in: path
          description: The name of the workload group.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      requestBody:
        description: The requested workload group state.
        required: true
        x-ms-requestBody-name: parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadGroup'
      responses:
        '200':
          description: Successfully updated the workload group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadGroup'
        '201':
          description: Successfully created the workload group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadGroup'
        '202':
          description: Create or update for the workload group accepted.
        default:
          description: |-
            *** Error Responses: ***

             * 400 OperationNotAllowedOnPausedDatabase - Operation is not allowed on a paused database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 400 InvalidWorkloadGroupNameParameter - Invalid workload group name

             * 400 InvalidMinResourcePercentParameter - Invalid min resource percent for this workload group.

             * 400 InvalidMinResourcePercentPerRequestParameter - Invalid min resource percent per query for this workload group.

             * 400 InvalidMaxResourcePercentParameter - Invalid max resource percent to allocate for this workload group.

             * 400 InvalidMaxResourcePercentPerRequestParameter - Invalid max resource percent per query for this workload group.

             * 400 InvalidImportanceParameter - Importance must be one of the following strings: Low, Below_Normal, Normal, Above_Normal, High.

             * 400 InvalidQueryExecutionTimeoutParameter - Invalid query execution timeout value for this workload group.

             * 400 InvalidResourceRequestBody - The resource or resource properties in the request body is empty or invalid.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
    delete:
      tags:
        - WorkloadGroups
      description: Deletes a workload group.
      operationId: WorkloadGroups_Delete
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - name: workloadGroupName
          in: path
          description: The name of the workload group to delete.
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully deleted the workload group.
        '202':
          description: Deleting the workload group is in progress.
        '204':
          description: The specified workload group does not exist.
        default:
          description: |-
            *** Error Responses: ***

             * 400 OperationNotAllowedOnPausedDatabase - Operation is not allowed on a paused database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceNotFound - The requested resource was not found.

             * 404 OperationIdNotFound - The operation with Id does not exist.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 409 OperationCancelled - The operation has been cancelled by user.

             * 409 OperationInterrupted - The operation on the resource could not be completed because it was interrupted by another operation on the same resource.

             * 500 OperationTimedOut - The operation timed out and automatically rolled back. Please retry the operation.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-long-running-operation: true
  /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/workloadGroups?api-version=2020-11-01-preview:
    get:
      tags:
        - WorkloadGroups
      description: Gets the list of workload groups
      operationId: WorkloadGroups_ListByDatabase
      parameters:
        - $ref: '#/components/parameters/ResourceGroupParameter'
        - $ref: '#/components/parameters/ServerNameParameter'
        - $ref: '#/components/parameters/DatabaseNameParameter'
        - $ref: '#/components/parameters/SubscriptionIdParameter'
      responses:
        '200':
          description: Successfully retrieved the list of workload groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadGroupListResult'
        default:
          description: |-
            *** Error Responses: ***

             * 400 OperationNotAllowedOnPausedDatabase - Operation is not allowed on a paused database.

             * 400 FeatureDisabledOnSelectedEdition - User attempted to use a feature which is disabled on current database edition.

             * 404 SubscriptionDoesNotHaveServer - The requested server was not found

             * 404 ServerNotInSubscriptionResourceGroup - Specified server does not exist in the specified resource group and subscription.

             * 404 DatabaseDoesNotExist - User has specified a database name that does not exist on this server instance.

             * 404 ResourceNotFound - The requested resource was not found.

             * 409 ConflictingDatabaseOperation - There is already some operation on the database and the current operation should wait till it is done.

             * 409 ConflictingSystemOperationInProgress - A system maintenance operation is in progress on the database and further operations need to wait until it is completed.

             * 503 TooManyRequests - Requests beyond max requests that can be processed by available resources.

             * 503 DatabaseUnavailable - The operation failed because the database is unavailable.

             * 504 RequestTimeout - Service request exceeded the allowed timeout.
      x-ms-pageable:
        nextLinkName: nextLink
