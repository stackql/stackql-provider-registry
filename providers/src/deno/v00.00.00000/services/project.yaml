openapi: 3.0.3
info:
  title: project API
  description: Operations about projects
  version: 1.0.0
paths:
  /organizations/{organizationId}/projects:
    get:
      tags:
        - project
      summary: List projects of an organization
      description: >-
        This API returns a list of projects belonging to the specified
        organization

        in a pagenated manner.

        The URLs for the next, previous, first, and last page are returned in
        the

        `Link` header of the response, if any.
      operationId: list_projects
      parameters:
        - name: page
          in: query
          description: The page number to return.
          required: false
          schema:
            type: integer
            default: 1
            nullable: true
            minimum: 1
        - name: limit
          in: query
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: integer
            default: 20
            nullable: true
            maximum: 100
            minimum: 1
        - name: q
          in: query
          description: Query by project name or project ID
          required: false
          schema:
            type: string
            nullable: true
        - name: sort
          in: query
          description: >-
            The field to sort by, either `name`, `updated_at`, `requests`, or
            `bandwidth`. Defaults to `updated_at`.
          required: false
          schema:
            type: string
            nullable: true
        - name: order
          in: query
          description: Sort order, either `asc` or `desc`. Defaults to `asc`.
          required: false
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          headers:
            Link:
              schema:
                $ref: '#/components/schemas/PaginationLinkHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
    post:
      tags:
        - project
      summary: Create a project
      description: |-
        This API allows you to create a new project under the specified
        organization.
        The project name is optional; if not provided, a random name will be
        generated.
      operationId: create_project
      parameters:
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /projects/{projectId}:
    get:
      tags:
        - project
      summary: Get project details
      operationId: get_project
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
    patch:
      tags:
        - project
      summary: Update project details
      operationId: update_project
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
    delete:
      tags:
        - project
      summary: Delete a project
      operationId: delete_project
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /projects/{projectId}/analytics:
    get:
      tags:
        - project
      summary: Retrieve project analytics
      description: >-
        This API returns analytics for the specified project.

        The analytics are returned as time series data in 15 minute intervals,
        with

        the `time` field representing the start of the interval.
      operationId: get_project_analytics
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
        - name: since
          in: query
          description: |-

            Start of the time range in RFC3339 format.

            Defaults to 24 hours ago.
                  
          required: true
          schema:
            type: string
            format: date-time
          example: '2021-08-01T00:00:00Z'
        - name: until
          in: query
          description: |-

            End of the time range in RFC3339 format.

            Defaults to the current time.
                  
          required: true
          schema:
            type: string
            format: date-time
          example: '2021-08-02T00:00:00Z'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Analytics'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
components:
  schemas:
    PaginationLinkHeader:
      type: string
      description: >-
        Pagination links.

        This header provides URLS for the `prev`, `next`, `first`, and `last`
        pages.

        The format conforms to [RFC 8288](https://tools.ietf.org/html/rfc8288).
      example: >-
        <https://api.deno.com/v1/endpoint?page=3>; rel="next",
        <https://api.deno.com/v1/endpoint?page=1>; rel="prev",
        <https://api.deno.com/v1/endpoint?page=1>; rel="first",
        <https://api.deno.com/v1/endpoint?page=50>; rel="last"
    Project:
      type: object
      required:
        - id
        - name
        - description
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
        name:
          type: string
          example: my-project
        description:
          type: string
          example: this is my project.
          maxLength: 1000
        createdAt:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
      additionalProperties: false
    ErrorBody:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: The error code
        message:
          type: string
          description: The error message
    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
          description: >-
            The name of the project. This must be globally unique. If this is
            `null`,

            a random unique name will be generated.
          example: my-project
          nullable: true
        description:
          type: string
          description: >-
            The description of the project. If this is `null`, an empty string
            will be

            set.
          example: This is my project.
          nullable: true
          maxLength: 1000
      additionalProperties: false
    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          description: >-
            The name of the project to be updated to. This must be globally
            unique.

            If this is `null`, no update will be made to the project name.
          example: my-project2
          nullable: true
        description:
          type: string
          description: >-
            The description of the project to be updated to. If this is `null`,
            no

            update will be made to the project description.
          example: This is my project2.
          nullable: true
          maxLength: 1000
      additionalProperties: false
    Analytics:
      type: object
      description: Project analytics data
      required:
        - fields
        - values
      properties:
        fields:
          type: array
          items:
            $ref: '#/components/schemas/AnalyticsFieldSchema'
        values:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/AnalyticsDataValue'
      additionalProperties: false
      example:
        fields:
          - name: time
            type: time
          - name: requestCount
            type: number
          - name: cpuSeconds
            type: number
          - name: uptimeSeconds
            type: number
          - name: maxRssMemoryBytes
            type: number
          - name: networkIngressBytes
            type: number
          - name: networkEgressBytes
            type: number
          - name: kvReadCount
            type: number
          - name: kvWriteCount
            type: number
          - name: kvReadUnits
            type: number
          - name: kvWriteUnits
            type: number
          - name: kvStorageBytes
            type: number
        values:
          - - '2023-08-01T00:00:00Z'
            - 111
            - 111
            - 111
            - 111
            - 111
            - 111
            - 111
            - 111
            - 111
            - 111
            - 111
          - - '2023-08-01T00:15:00Z'
            - 222
            - 222
            - 222
            - 222
            - 222
            - 222
            - 222
            - 222
            - 222
            - 222
            - 222
          - - '2023-08-01T00:30:00Z'
            - 333
            - 333
            - 333
            - 333
            - 333
            - 333
            - 333
            - 333
            - 333
            - 333
            - 333
          - - '2023-08-01T00:45:00Z'
            - 444
            - 444
            - 444
            - 444
            - 444
            - 444
            - 444
            - 444
            - 444
            - 444
            - 444
          - - '2023-08-01T01:00:00Z'
            - 555
            - 555
            - 555
            - 555
            - 555
            - 555
            - 555
            - 555
            - 555
            - 555
            - 555
    AnalyticsFieldSchema:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/AnalyticsFieldType'
      additionalProperties: false
    AnalyticsDataValue:
      oneOf:
        - type: string
          format: date-time
        - type: number
          format: double
        - type: string
        - type: boolean
        - {}
    AnalyticsFieldType:
      type: string
      description: >-
        A data type that analytic data can be represented in.


        Inspired by Grafana's data types defined at:

        https://github.com/grafana/grafana/blob/e3288834b37b9aac10c1f43f0e621b35874c1f8a/packages/grafana-data/src/types/dataFrame.ts#L11-L23
      enum:
        - time
        - number
        - string
        - boolean
        - other
  x-stackQL-resources:
    projects:
      id: deno.project.projects
      name: projects
      title: Projects
      methods:
        list_projects:
          operation:
            $ref: '#/paths/~1organizations~1{organizationId}~1projects/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_project:
          operation:
            $ref: '#/paths/~1organizations~1{organizationId}~1projects/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_project:
          operation:
            $ref: '#/paths/~1projects~1{projectId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_project:
          operation:
            $ref: '#/paths/~1projects~1{projectId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_project:
          operation:
            $ref: '#/paths/~1projects~1{projectId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/projects/methods/list_projects'
          - $ref: '#/components/x-stackQL-resources/projects/methods/get_project'
        insert:
          - $ref: '#/components/x-stackQL-resources/projects/methods/create_project'
        update:
          - $ref: '#/components/x-stackQL-resources/projects/methods/update_project'
        delete:
          - $ref: '#/components/x-stackQL-resources/projects/methods/delete_project'
        replace: []
    analytics:
      id: deno.project.analytics
      name: analytics
      title: Analytics
      methods:
        get_project_analytics:
          operation:
            $ref: '#/paths/~1projects~1{projectId}~1analytics/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/analytics/methods/get_project_analytics
        insert: []
        update: []
        delete: []
        replace: []
servers:
  - url: https://api.deno.com/v1
