openapi: 3.0.3
info:
  title: domain API
  description: Operations about domains
  version: 1.0.0
paths:
  /organizations/{organizationId}/domains:
    get:
      tags:
        - domain
      summary: List domains of an organization
      description: >-
        This API returns a list of domains belonging to the specified
        organization

        in a pagenated manner.


        The URLs for the next, previous, first, and last page are returned in
        the

        `Link` header of the response, if any.
      operationId: list_domains
      parameters:
        - name: page
          in: query
          description: The page number to return.
          required: false
          schema:
            type: integer
            default: 1
            nullable: true
            minimum: 1
        - name: limit
          in: query
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: integer
            default: 20
            nullable: true
            maximum: 100
            minimum: 1
        - name: q
          in: query
          description: Query by domain
          required: false
          schema:
            type: string
            nullable: true
        - name: sort
          in: query
          description: >-
            The field to sort by, `domain`, `created_at`, or `updated_at`.
            Defaults to `updated_at`.
          required: false
          schema:
            type: string
            nullable: true
        - name: order
          in: query
          description: Sort order, either `asc` or `desc`. Defaults to `asc`.
          required: false
          schema:
            type: string
            nullable: true
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          headers:
            Link:
              schema:
                $ref: '#/components/schemas/PaginationLinkHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Domain'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
    post:
      tags:
        - domain
      summary: Add a domain to an organization
      description: >-
        This API allows you to add a new domain to the specified organization.


        ### Steps to make the added domain available for actual use


        In order to make the added domain available for actual use, you first
        need

        to verify that you are the owner of the domain by calling

        [the verify ownership of a domain
        endpoint](https://deno-provider.stackql.io/services/domain/domains/#lifecycle-methods)

        after properly setting up the DNS records for the domain as specified in
        the

        `dnsRecords` field of the response of this API.


        You then also need to have TLS certificates ready for the domain, either
        by

        [enabling
        auto-provision](https://deno-provider.stackql.io/services/domain/certificates/#lifecycle-methods)

        or by [uploading them manually](https://deno-provider.stackql.io/services/domain/certificates/).
      operationId: create_domain
      parameters:
        - name: organizationId
          in: path
          description: Organization ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDomainRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /domains/{domainId}:
    get:
      tags:
        - domain
      summary: Get domain details
      operationId: get_domain
      parameters:
        - name: domainId
          in: path
          description: Domain ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Domain'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
    patch:
      tags:
        - domain
      summary: Associate a domain with a deployment
      description: >-
        This API allows you to either:


        1. associate a domain with a deployment, or

        2. disassociate a domain from a deployment


        Domain association is required in order to serve the deployment on the

        domain.


        If the ownership of the domain is not verified yet, this API will
        trigger

        the verification process before associating the domain with the
        deployment.


        The same functionality is provided by [Attach a domain to a deployment]
        with

        more flexibility. Consider using that API instead.


        [Attach a domain to a deployment]:
        #put-/deployments/-deploymentId-/domains/-domain-
      operationId: update_domain_association
      parameters:
        - name: domainId
          in: path
          description: Domain ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDomainAssociationRequest'
        required: true
      responses:
        '200':
          description: Success
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      deprecated: true
    delete:
      tags:
        - domain
      summary: Delete a domain
      operationId: delete_domain
      parameters:
        - name: domainId
          in: path
          description: Domain ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /domains/{domainId}/verify:
    post:
      tags:
        - domain
      summary: Verify ownership of a domain
      description: >-
        This API triggers the ownership verification of a domain. It should be

        called after necessary DNS records that appear in the `dnsRecords` field

        of the response of [add a
        domain](https://deno-provider.stackql.io/services/domain/domains/)

        are set up.


        ### Domain reactivation


        If a previously vefified domain, owned by the same organization, was
        deleted

        and then re-added, deployments associated with the domain will become

        accessible via the domain once the verification is successfully
        completed.


        For example, if the domain `*.example.com` was owned and verified by

        `example-org` and `foo.example.com` was attached to
        `example-deployment`,

        the deployment was accessible via `foo.example.com`. However, if the
        domain

        is deleted from the organization, access to the deployment via

        `foo.example.com` is lost, which we refer to as domain deactivation.


        Subsequently, if `*.example.com` (or even `foo.example.com`) is re-added
        to

        the organization and verified, the deployment becomes accessible via

        `foo.example.com` again without any further steps, i.e. the domain is

        reactivated.
      operationId: verify_domain
      parameters:
        - name: domainId
          in: path
          description: Domain ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /domains/{domainId}/certificates:
    post:
      tags:
        - domain
      summary: Upload TLS certificate for a domain
      description: >-
        This API allows you to upload a TLS certificate for a domain.


        If the ownership of the domain is not verified yet, this API will
        trigger

        the verification process before storing the certificate.
      operationId: add_domain_certificate
      parameters:
        - name: domainId
          in: path
          description: Domain ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddDomainCertificateRequest'
        required: true
      responses:
        '200':
          description: Success
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /domains/{domainId}/certificates/provision:
    post:
      tags:
        - domain
      summary: Provision TLS certificates for a domain
      description: >-
        This API begins the provisioning of TLS certificates for a domain.


        Note that a call to this API may take a while, up to a minute or so.


        If the ownership of the domain is not verified yet, this API will
        trigger

        the verification process before provisioning the certificate.
      operationId: provision_domain_certificates
      parameters:
        - name: domainId
          in: path
          description: Domain ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
components:
  schemas:
    PaginationLinkHeader:
      type: string
      description: >-
        Pagination links.

        This header provides URLS for the `prev`, `next`, `first`, and `last`
        pages.

        The format conforms to [RFC 8288](https://tools.ietf.org/html/rfc8288).
      example: >-
        <https://api.deno.com/v1/endpoint?page=3>; rel="next",
        <https://api.deno.com/v1/endpoint?page=1>; rel="prev",
        <https://api.deno.com/v1/endpoint?page=1>; rel="first",
        <https://api.deno.com/v1/endpoint?page=50>; rel="last"
    Domain:
      type: object
      required:
        - id
        - organizationId
        - domain
        - token
        - isValidated
        - certificates
        - provisioningStatus
        - createdAt
        - updatedAt
        - dnsRecords
      properties:
        id:
          type: string
          format: uuid
          description: The ID of the domain.
        organizationId:
          type: string
          format: uuid
          description: The ID of the organization that the domain is associated with.
        domain:
          type: string
          description: The domain value.
          example: example.com
        token:
          type: string
          example: b7e28147130005f5593d09e6
        isValidated:
          type: boolean
          description: Whether the domain's ownership is validated or not.
        certificates:
          type: array
          items:
            $ref: '#/components/schemas/DomainCertificate'
          description: TLS certificates for the domain.
        provisioningStatus:
          $ref: '#/components/schemas/ProvisioningStatus'
        projectId:
          type: string
          format: uuid
          description: >-
            The ID of the project that the domain is associated with.


            If the domain is not associated with any project, this field is
            omitted.
          nullable: true
        deploymentId:
          allOf:
            - $ref: '#/components/schemas/DeploymentId'
          nullable: true
        createdAt:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
        dnsRecords:
          type: array
          items:
            $ref: '#/components/schemas/DnsRecord'
          description: These records are used to verify the ownership of the domain.
      additionalProperties: false
    ErrorBody:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: The error code
        message:
          type: string
          description: The error message
    CreateDomainRequest:
      type: object
      required:
        - domain
      properties:
        domain:
          type: string
          example: foo.example.com
      additionalProperties: false
    UpdateDomainAssociationRequest:
      type: object
      properties:
        deploymentId:
          allOf:
            - $ref: '#/components/schemas/DeploymentId'
          nullable: true
      additionalProperties: false
    AddDomainCertificateRequest:
      type: object
      required:
        - privateKey
        - certificateChain
      properties:
        privateKey:
          type: string
          description: The PEM encoded private key for the TLS certificate
          example: |
            -----BEGIN EC PRIVATE KEY-----
            foobar
            -----END EC PRIVATE KEY-----
        certificateChain:
          type: string
          description: The PRM encoded certificate chain for the TLS certificate
          example: |
            -----BEGIN CERTIFICATE-----
            foobar
            -----END CERTIFICATE-----
      additionalProperties: false
    DomainCertificate:
      type: object
      required:
        - cipher
        - expiresAt
        - createdAt
        - updatedAt
      properties:
        cipher:
          $ref: '#/components/schemas/TlsCipher'
        expiresAt:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
        createdAt:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
      additionalProperties: false
    ProvisioningStatus:
      oneOf:
        - type: object
          required:
            - code
          properties:
            code:
              type: string
              enum:
                - success
        - type: object
          required:
            - message
            - code
          properties:
            message:
              type: string
            code:
              type: string
              enum:
                - failed
        - type: object
          required:
            - code
          properties:
            code:
              type: string
              enum:
                - pending
        - type: object
          required:
            - code
          properties:
            code:
              type: string
              enum:
                - manual
      discriminator:
        propertyName: code
    DeploymentId:
      type: string
      description: >-
        A deployment ID


        Note that this is not UUID v4, as opposed to organization ID and project
        ID.
      example: abcde12vwxyz
    DnsRecord:
      type: object
      required:
        - type
        - name
        - content
      properties:
        type:
          type: string
          example: A
        name:
          type: string
          example: deploy-sample
        content:
          type: string
          example: 127.0.0.1
      additionalProperties: false
    TlsCipher:
      type: string
      enum:
        - rsa
        - ec
  x-stackQL-resources:
    domains:
      id: deno.domain.domains
      name: domains
      title: Domains
      methods:
        list_domains:
          operation:
            $ref: '#/paths/~1organizations~1{organizationId}~1domains/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_domain:
          operation:
            $ref: '#/paths/~1organizations~1{organizationId}~1domains/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_domain:
          operation:
            $ref: '#/paths/~1domains~1{domainId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_domain_association:
          operation:
            $ref: '#/paths/~1domains~1{domainId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_domain:
          operation:
            $ref: '#/paths/~1domains~1{domainId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        verify_domain:
          operation:
            $ref: '#/paths/~1domains~1{domainId}~1verify/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/domains/methods/list_domains'
          - $ref: '#/components/x-stackQL-resources/domains/methods/get_domain'
        insert:
          - $ref: '#/components/x-stackQL-resources/domains/methods/create_domain'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/domains/methods/delete_domain'
        replace: []
    certificates:
      id: deno.domain.certificates
      name: certificates
      title: Certificates
      methods:
        add_domain_certificate:
          operation:
            $ref: '#/paths/~1domains~1{domainId}~1certificates/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        provision_domain_certificates:
          operation:
            $ref: '#/paths/~1domains~1{domainId}~1certificates~1provision/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
        replace: []
servers:
  - url: https://api.deno.com/v1
