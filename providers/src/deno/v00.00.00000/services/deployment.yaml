openapi: 3.0.3
info:
  title: deployment API
  description: Operations about deployments
  version: 1.0.0
paths:
  /projects/{projectId}/deployments:
    get:
      tags:
        - deployment
      summary: List deployments of a project
      description: >-
        This API returns a list of deployments belonging to the specified
        project in

        a pagenated manner.


        The URLs for the next, previous, first, and last page are returned in
        the

        `Link` header of the response, if any.
      operationId: list_deployments
      parameters:
        - name: page
          in: query
          description: The page number to return.
          required: false
          schema:
            type: integer
            default: 1
            nullable: true
            minimum: 1
        - name: limit
          in: query
          description: The maximum number of items to return per page.
          required: false
          schema:
            type: integer
            default: 20
            nullable: true
            maximum: 100
            minimum: 1
        - name: q
          in: query
          description: Query by deployment ID
          required: false
          schema:
            type: string
            nullable: true
        - name: sort
          in: query
          description: >-
            The field to sort by, either `id` or `created_at`. Defaults to
            `created_at`.
          required: false
          schema:
            type: string
            nullable: true
        - name: order
          in: query
          description: Sort order, either `asc` or `desc`. Defaults to `asc`.
          required: false
          schema:
            type: string
            nullable: true
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Success
          headers:
            Link:
              schema:
                $ref: '#/components/schemas/PaginationLinkHeader'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Deployment'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
    post:
      tags:
        - deployment
      summary: Create a deployment
      description: >-
        This API initiates a build process for a new deployment.


        Note that this process is asynchronous; the completion of this API
        doesn't

        mean the deployment is ready. In order to keep track of the progress of
        the

        build, call the "Get build logs of a deployment" API or the "Get
        deployment

        details" API.
      operationId: create_deployment
      parameters:
        - name: projectId
          in: path
          description: Project ID
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeploymentRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /deployments/{deploymentId}/redeploy:
    post:
      tags:
        - deployment
      summary: Redeploy a deployment with different configuration
      operationId: redeploy_deployment
      parameters:
        - name: deploymentId
          in: path
          description: Deployment ID
          required: true
          schema:
            $ref: '#/components/schemas/DeploymentId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedeployRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /deployments/{deploymentId}:
    get:
      tags:
        - deployment
      summary: Get deployment details
      operationId: get_deployment
      parameters:
        - name: deploymentId
          in: path
          description: Deployment ID
          required: true
          schema:
            $ref: '#/components/schemas/DeploymentId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
    delete:
      tags:
        - deployment
      summary: Delete a deployment
      operationId: delete_deployment
      parameters:
        - name: deploymentId
          in: path
          description: Deployment ID
          required: true
          schema:
            $ref: '#/components/schemas/DeploymentId'
      responses:
        '200':
          description: Success
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /deployments/{deploymentId}/build_logs:
    get:
      tags:
        - deployment
      summary: Get build logs of a deployment
      description: >-
        This API returns build logs of the specified deployment. It's useful to
        watch

        the build progress, figure out what went wrong in case of a build
        failure,

        and so on.


        The response format can be controlled by the `Accept` header; if

        `application/x-ndjson` is specified, the response will be a stream of

        newline-delimited JSON objects. Otherwise it will be a JSON array of

        objects.
      operationId: get_build_logs
      parameters:
        - name: deploymentId
          in: path
          description: Deployment ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/BuildLogsResponseEntry'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BuildLogsResponseEntry'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /deployments/{deploymentId}/app_logs:
    get:
      tags:
        - deployment
      summary: Get execution logs of a deployment
      description: >-
        This API can return either past logs or real-time logs depending on the

        presence of the since and until query parameters; if at least one of
        them

        is provided, past logs are returned, otherwise real-time logs are
        returned.


        Also, the response format can be controlled by the `Accept` header; if

        `application/x-ndjson` is specified, the response will be a stream of

        newline-delimited JSON objects. Otherwise it will be a JSON array of

        objects.
      operationId: get_app_logs
      parameters:
        - name: q
          in: query
          description: Text to search for in log message.
          required: false
          schema:
            type: string
            nullable: true
          example: foobar
        - name: level
          in: query
          description: |-
            Log level(s) to filter logs by.

            Defaults to all levels (i.e. no filter applied).

            Multiple levels can be specified using comma-separated format.
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/LogLevel'
            nullable: true
          example: error,warning
        - name: region
          in: query
          description: |-
            Region(s) to filter logs by.

            Defaults to all regions (i.e. no filter applied).

            Multiple regions can be specified using comma-separated format.
          required: false
          schema:
            allOf:
              - $ref: '#/components/schemas/Region'
            nullable: true
          example: gcp-us-central1,gcp-us-east1
        - name: since
          in: query
          description: >-
            Start time of the time range to filter logs by.


            Defaults to the Unix Epoch (though the log retention period is 2
            weeks as

            of now).


            If neither `since` nor `until` is specified, real-time logs are
            returned.
          required: false
          schema:
            type: string
            format: date-time
            nullable: true
          example: '2021-08-01T00:00:00Z'
        - name: until
          in: query
          description: >-
            End time of the time range to filter logs by.


            Defaults to the current time.


            If neither `since` nor `until` is specified, real-time logs are
            returned.
          required: false
          schema:
            type: string
            format: date-time
            nullable: true
          example: '2021-08-01T00:00:00Z'
        - name: limit
          in: query
          description: |-
            Maximum number of logs to return in one request.

            This is only effective for the past log mode.
          required: false
          schema:
            type: integer
            default: 100
            nullable: true
            maximum: 10000
            minimum: 1
        - name: sort
          in: query
          description: |-
            The field to sort by. Currently only `time` is supported.

            This is only effective for the past log mode.
          required: false
          schema:
            type: string
            nullable: true
        - name: order
          in: query
          description: >-
            Sort order, either `asc` or `desc`. Defaults to `desc`.


            For backward compatibility, `timeAsc` and `timeDesc` are also
            supported,

            but deprecated.


            This is only effective for the past log mode.
          required: false
          schema:
            type: string
            nullable: true
        - name: cursor
          in: query
          description: >-
            Opaque value that represents the cursor of the last log returned in
            the

            previous request.


            This is only effective for the past log mode.
          required: false
          schema:
            type: string
            nullable: true
        - name: deploymentId
          in: path
          description: Deployment ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          headers:
            Link:
              schema:
                $ref: '#/components/schemas/CursorLinkHeader'
              description: This header is present only in the past log mode.
          content:
            application/x-ndjson:
              schema:
                $ref: '#/components/schemas/AppLogsResponseEntry'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppLogsResponseEntry'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
  /deployments/{deploymentId}/domains/{domain}:
    put:
      tags:
        - deployment
      summary: Attach a domain to a deployment
      description: >-
        This API allows you to attach a domain to an existing deployment. Once

        attached, the deployment will become accessible via that domain.


        If the specified domain is already attached to another deployment, it
        will

        be detached from the current deployment and attached to the new one.
      operationId: attach_domain_to_deployment
      parameters:
        - name: deploymentId
          in: path
          description: Deployment ID
          required: true
          schema:
            $ref: '#/components/schemas/DeploymentId'
        - name: domain
          in: path
          description: >-
            Domain name to attach to the deployment.


            Two placeholders can be used in the domain name, which will be
            substituted

            accordingly:


            - `{project.name}`: The name of the project.

            - `{deployment.id}`: The ID of the deployment.


            The domain name you specify here must be either equal to one of the
            custom

            domains you have registered, or a subdomain of one of the wildcard
            domains

            you have registered. Let's say you have registered `example.com` and

            `*.example.net` as custom domains via [add a
            domain](#post-/organizations/-organizationId-/domains)

            endpoint and set DNS records needed to verify you are the owner of
            these.

            In this case, the following table shows what domains are attachable
            and why:


            | Domain                                          | Attachable? |
            Comment                                                                                    
            |

            | ----------------------------------------------- | ----------- |
            -------------------------------------------------------------------------------------------
            |

            | `example.com`                                   | ✅          |
            Exactly matches the registered custom domain
            `example.com`                                  |

            | `foo.example.net`                               | ✅          |
            Covered by
            `*.example.net`                                                                 
            |

            | `*.example.net`                                 | ✅          |
            Exactly matches the registered custom domain
            `*.example.net`                                |

            | `{project.name}.example.net`                    | ✅          |
            Covered by `*.example.net`, and the placeholder is
            valid                                    |

            | `my-{project.name}.example.net`                 | ✅          |
            Covered by `*.example.net`, and the placeholder is
            valid                                    |

            | `my-{project.name}-{deployment.id}.example.net` | ✅          |
            Covered by `*.example.net`, and the placeholders are
            valid                                  |

            | `foo.example.com`                               | ❌          | The
            custom domain `example.com` is registered, but not `foo.example.com`
            or `*.example.com` |

            | `example.net`                                   | ❌          | Not
            a subdomain of
            `*.example.net`                                                         
            |

            | `foo.bar.example.net`                           | ❌          | Not
            a subdomain of
            `*.example.net`                                                         
            |

            | `{project.id}.example.net`                      | ❌          | The
            placeholder is not
            valid                                                               
            |


            Besides your custom domains, you can also use `deno.dev` domain
            without

            the need to register it. In this case, though, only two formats are

            allowed as follows:


            | Domain                                    | Attachable? |

            | ----------------------------------------- | ----------- |

            | `{project.name}.deno.dev`                 | ✅          |

            | `{project.name}-{deployment.id}.deno.dev` | ✅          |

            | `foo.deno.dev`                            | ❌          |

            | `my-{project.name}.deno.dev`              | ❌          |

            | `{deployment.id}.deno.dev`                | ❌          |

            | `{deployment.id}-{project.name}.deno.dev` | ❌          |


            Lastly, keep in mind that in order for the attached domain to work

            properly, you also need to set up TLS certificates, either by

            [provisioning a
            certificate](#post-/domains/-domainId-/certificates/provision)

            or by [uploading a
            certificate](#post-/domains/-domainId-/certificates).

            This is not needed for `deno.dev` domains.
          required: true
          schema:
            type: string
          example: '{project.name}-{deployment.id}.deno.dev'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachDomainResponse'
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
    delete:
      tags:
        - deployment
      summary: Detach a domain from a deployment
      description: >-
        This API disassociates a domain from a deployment. Once this operation
        is

        completed, the deployment will no longer be accessible via that domain.
      operationId: detach_domain_from_deployment
      parameters:
        - name: deploymentId
          in: path
          description: Deployment ID
          required: true
          schema:
            $ref: '#/components/schemas/DeploymentId'
        - name: domain
          in: path
          description: Domain to detach
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Invalid Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
components:
  schemas:
    PaginationLinkHeader:
      type: string
      description: >-
        Pagination links.

        This header provides URLS for the `prev`, `next`, `first`, and `last`
        pages.

        The format conforms to [RFC 8288](https://tools.ietf.org/html/rfc8288).
      example: >-
        <https://api.deno.com/v1/endpoint?page=3>; rel="next",
        <https://api.deno.com/v1/endpoint?page=1>; rel="prev",
        <https://api.deno.com/v1/endpoint?page=1>; rel="first",
        <https://api.deno.com/v1/endpoint?page=50>; rel="last"
    Deployment:
      type: object
      required:
        - id
        - projectId
        - status
        - databases
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/DeploymentId'
        projectId:
          type: string
          format: uuid
          example: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
        description:
          type: string
          description: >-
            The description of this deployment. This is present only when the
            `status`

            is `success`.
          example: My deployment
          nullable: true
        status:
          $ref: '#/components/schemas/DeploymentStatus'
        domains:
          type: array
          items:
            type: string
          example:
            - example.com
          nullable: true
        databases:
          type: object
          description: |-
            The KV databases that this deployment has access to.
            Currently, only `"default"` database is supported.
          additionalProperties:
            type: string
            format: uuid
          example:
            default: 5b484959-cba2-482d-95ab-ba592784af80
        requestTimeout:
          type: integer
          format: int32
          description: >-
            The wall-clock timeout in milliseconds for requests to the
            deployment.


            This becomes `null` when no timeout is set, or the deployment has
            not been

            done successfully yet.
          example: 10000
          nullable: true
          minimum: 1
        permissions:
          allOf:
            - $ref: '#/components/schemas/DeploymentPermissions'
          nullable: true
        createdAt:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
      additionalProperties: false
    ErrorBody:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: The error code
        message:
          type: string
          description: The error message
    CreateDeploymentRequest:
      type: object
      required:
        - entryPointUrl
        - assets
        - envVars
      properties:
        entryPointUrl:
          type: string
          description: >-
            An URL of the entry point of the application.

            This is the file that will be executed when the deployment is
            invoked.
        importMapUrl:
          type: string
          description: >-
            An URL of the import map file.


            If `null` is given, import map auto-discovery logic will be
            performed,

            where it looks for Deno's config file (i.e. `deno.json` or
            `deno.jsonc`)

            which may contain an embedded import map or a path to an import map
            file.

            If found, that import map will be used.


            If an empty string is given, no import map will be used.
          nullable: true
        lockFileUrl:
          type: string
          description: >-
            An URL of the lock file.


            If `null` is given, lock file auto-discovery logic will be
            performed,

            where it looks for Deno's config file (i.e. `deno.json` or
            `deno.jsonc`)

            which may contain a path to a lock file or boolean value, such as
            `"lock":

            false` or `"lock": "my-lock.lock"`. If a config file is found, the

            semantics of the lock field is the same as the Deno CLI, so refer to
            [the

            CLI doc
            page](https://docs.deno.com/runtime/manual/basics/modules/integrity_checking#auto-generated-lockfile).


            If an empty string is given, no lock file will be used.
          nullable: true
        compilerOptions:
          allOf:
            - $ref: '#/components/schemas/CompilerOptions'
          nullable: true
        assets:
          $ref: '#/components/schemas/Assets'
        domains:
          type: array
          items:
            $ref: '#/components/schemas/AttachableDomain'
          description: >-
            A list of domains that will be attached to the deployment once it's

            successfully deployed.


            If this field is omitted or `null` is provided, the default domain
            will be

            attached to the deployment, which looks like
            `projectname-deploymentid.deno.dev`.


            If an empty list is provided, no domain will be attached to the
            deployment.

            In this case, the default one will not get attached either.


            If a list is provided, only the domains in the list will be
            attached, but

            the default domain will not.
          nullable: true
        envVars:
          type: object
          description: >-
            A dictionary of environment variables to be set in the runtime
            environment

            of the deployment.
          additionalProperties:
            type: string
        databases:
          type: object
          description: >-
            KV database ID mappings to associate with the deployment.


            A key represents a KV database name (e.g. `"default"`), and a value
            is a

            KV database ID.


            Currently, only `"default"` database is supported. If any other
            database

            name is specified, that will be rejected.


            If not provided, the deployment will be created with no KV database

            attached.
          additionalProperties:
            type: string
            format: uuid
          nullable: true
        requestTimeout:
          type: integer
          format: int32
          description: >-
            The wall-clock timeout in milliseconds for requests to the
            deployment.


            If not provided, the system default value will be used.
          example: 10000
          nullable: true
          minimum: 1
        permissions:
          allOf:
            - $ref: '#/components/schemas/DeploymentPermissions'
          nullable: true
        description:
          type: string
          description: >-
            A description of the created deployment. If not provided, an empty
            string

            will be set.
          nullable: true
          maxLength: 1000
        enableCron:
          type: boolean
          description: >-
            Enables cron functionality for this deployment. Requires a database
            to be attached.

            When multiple projects share the same database, only the first
            project to enable crons

            will have access to cron management. Other projects sharing the
            database cannot use crons.
          nullable: true
      additionalProperties: false
      example:
        entryPointUrl: main.ts
        importMapUrl: null
        lockFileUrl: null
        compilerOptions: null
        assets:
          main.ts:
            kind: file
            content: |
              Deno.serve((req: Request) => new Response("Hello World"));
            encoding: utf-8
          images/cat1.png:
            kind: file
            content: iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk
            encoding: base64
          images/cat2.png:
            kind: file
            gitSha1: 5c4f8729e5c30a91a890e24d7285e89f418c637b
          symlink.png:
            kind: symlink
            target: images/cat1.png
        domains:
          - '{project.name}-{deployment.id}.deno.dev'
          - '{project.name}.deno.dev'
          - foo.example.com
        envVars:
          MY_ENV: hey
        databases:
          default: 5b484959-cba2-482d-95ab-ba592784af80
        requestTimeout: 10000
        permissions:
          net:
            - example.com
            - 34.120.54.55
            - '[2600:1901:0:6d85::]'
            - '*'
        description: My first deployment
    DeploymentId:
      type: string
      description: >-
        A deployment ID


        Note that this is not UUID v4, as opposed to organization ID and project
        ID.
      example: abcde12vwxyz
    RedeployRequest:
      type: object
      properties:
        envVars:
          type: object
          description: >-
            A dictionary of environment variables to be set in the runtime
            environment

            of the deployment.


            The provided environment variables will be _merged_ with the
            existing one.

            For example, if the existing environment variables are:


            ```json

            {

            "a": "alice",

            "b": "bob"

            "c": "charlie"

            }

            ```


            and you pass the following environment variables in your redeploy
            request:


            ```json

            {

            "a": "alice2",

            "b": null,

            "d": "david"

            }

            ```


            then the result will be:


            ```json

            {

            "a": "alice2",

            "c": "charlie",

            "d": "david"

            }

            ```


            If `envVars` itself is not provided, no update will happen to the

            existing environment variables.


            For a historical reason, `env_vars` is also accepted as well as
            `envVars`,

            although `env_vars` is deprecated.
          additionalProperties:
            type: string
            nullable: true
          example:
            MY_ENV: hey
            ENV_TO_BE_DELETED: null
          nullable: true
        databases:
          type: object
          description: >-
            KV database ID mappings to associate with the deployment.


            A key represents a KV database name (e.g. `"default"`), and a value
            is a

            KV database ID.


            Currently, only `"default"` database is supported. If any other
            database

            name is specified, that will be rejected.


            The provided KV database mappings will be _merged_ with the existing
            one,

            just like `env_vars`.


            If `databases` itself is not provided, no update will happen to the

            existing KV database mappings.
          additionalProperties:
            type: string
            format: uuid
            nullable: true
          example:
            default: a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
          nullable: true
        requestTimeout:
          type: integer
          format: int32
          description: >-
            The wall-clock timeout in milliseconds for requests to the
            deployment.


            If not provided, no update will happen to the existing request
            timeout.
          example: 10000
          nullable: true
          minimum: 1
        permissions:
          allOf:
            - $ref: '#/components/schemas/DeploymentPermissionsOverwrite'
          nullable: true
        description:
          type: string
          description: >-
            A description of the created deployment. If not provided, no update
            will

            happen to the description.
          example: Updated description
          nullable: true
      additionalProperties: false
    BuildLogsResponseEntry:
      type: object
      required:
        - level
        - message
      properties:
        level:
          type: string
          example: info
        message:
          type: string
          example: Downloaded https://deno.land/std@0.202.0/testing/asserts.ts (2/3)
      additionalProperties: false
    LogLevel:
      type: string
      enum:
        - error
        - warning
        - info
        - debug
    Region:
      type: string
      enum:
        - gcp-asia-east1
        - gcp-asia-east2
        - gcp-asia-northeast1
        - gcp-asia-northeast2
        - gcp-asia-northeast3
        - gcp-asia-south1
        - gcp-asia-south2
        - gcp-asia-southeast1
        - gcp-asia-southeast2
        - gcp-australia-southeast1
        - gcp-australia-southeast2
        - gcp-europe-central2
        - gcp-europe-north1
        - gcp-europe-southwest1
        - gcp-europe-west1
        - gcp-europe-west2
        - gcp-europe-west3
        - gcp-europe-west4
        - gcp-europe-west6
        - gcp-europe-west8
        - gcp-me-west1
        - gcp-northamerica-northeast1
        - gcp-northamerica-northeast2
        - gcp-southamerica-east1
        - gcp-southamerica-west1
        - gcp-us-central1
        - gcp-us-east1
        - gcp-us-east4
        - gcp-us-east5
        - gcp-us-south1
        - gcp-us-west1
        - gcp-us-west2
        - gcp-us-west3
        - gcp-us-west4
    CursorLinkHeader:
      type: string
      description: |-
        Pagination links.
        This header provides a URL for the `next` page.
        The format conforms to [RFC 8288](https://tools.ietf.org/html/rfc8288).
      example: <https://api.deno.com/v1/endpoint?cursor=5pkjgv5462a>; rel="next"
    AppLogsResponseEntry:
      type: object
      required:
        - time
        - level
        - message
        - region
      properties:
        time:
          type: string
          format: date-time
          description: Log timestamp
          example: '2021-08-01T00:00:00Z'
        level:
          $ref: '#/components/schemas/LogLevel'
        message:
          type: string
          example: log message
        region:
          $ref: '#/components/schemas/Region'
      additionalProperties: false
    AttachDomainResponse:
      type: object
      required:
        - domain
      properties:
        domain:
          type: string
          description: >-
            The domain that was attached to the deployment with placeholders
            resolved.
          example: myproject-mydeployment.deno.dev
    DeploymentStatus:
      type: string
      description: The status of a deployment.
      enum:
        - failed
        - pending
        - success
      example: success
    DeploymentPermissions:
      type: object
      description: >-
        Permissions to be set for the deployment.


        Currently only `net` is supported, where you can specify a list of IP

        addresses and/or hostnames that the deployment is allowed to make
        outbound

        network requests to.
      properties:
        net:
          type: array
          items:
            type: string
          description: >-
            A list of IP addresses that the deployment is allowed to make
            outbound

            network requests to.


            Each element must be a valid IPv4, IPv6, or a hostname like
            `example.com`

            although outbound network requests using IPv6 are not supported yet
            in

            Deno Deploy regardless.

            In addition to these, a special value `*` can be used, which means
            all

            accesses are allowed. Also note the following:


            - If omitted, all accesses will be allowed.

            - If an empty list is provided, all accesses will be **denied**.
          example:
            - example.com
            - 34.120.54.55
            - '[2600:1901:0:6d85::]'
            - '*'
          nullable: true
      additionalProperties: false
    CompilerOptions:
      type: object
      description: >-
        Compiler options to be used when building the deployment.


        If `null` is given, Deno's config file (i.e. `deno.json` or
        `deno.jsonc`)

        will be auto-discovered, which may contain a `compilerOptions` field. If

        found, that compiler options will be applied.


        If an empty object `{}` is given, [the default compiler
        options](https://docs.deno.com/runtime/manual/advanced/typescript/configuration#how-deno-uses-a-configuration-file)

        will be applied.
      properties:
        experimentalDecorators:
          type: boolean
          description: >-
            Whether to enable TypeScript's experimental decorators. If set to
            `false`,

            ECMAScript decorators will be enabled instead.


            If omitted, this field will be interpreted as `false`.


            If the code being deployed uses any kind of decorators, this field
            must be

            set. Otherwise, the build process will fail.
          nullable: true
        emitDecoratorMetadata:
          type: boolean
          description: >-
            Whether to emit experimental decorator meta data when emitting a

            TypeScript's experimental decorator.


            This is effective only when `experimentalDecorators` is set to
            `true`.


            If omitted, this field will be interpreted as `false`.
          nullable: true
        jsx:
          type: string
          nullable: true
        jsxFactory:
          type: string
          nullable: true
        jsxFragmentFactory:
          type: string
          nullable: true
        jsxImportSource:
          type: string
          nullable: true
        jsxPrecompileSkipElements:
          type: array
          items:
            type: string
          nullable: true
      additionalProperties: false
    Assets:
      type: object
      description: >-
        A map whose key represents a file path, and the value is an asset that

        composes the deployment.


        Each asset is one of the following three kinds:


        1. A file with content data (which is UTF-8 for text, or base64 for
        binary)

        2. A file with a git sha1 hash of the content

        3. A symbolic link to another asset


        Assets that were uploaded in some of the previous deployments don't need
        to

        be uploaded again. In this case, in order to identify the asset, just
        provide the

        git SHA-1 hash of the content (use `git hash-object -t 'blob' <file>`
        command to generate).
      additionalProperties:
        $ref: '#/components/schemas/Asset'
    AttachableDomain:
      type: string
      description: >-
        Domain name to attach to the deployment.


        Two placeholders can be used in the domain name, which will be
        substituted

        accordingly:


        - `{project.name}`: The name of the project.

        - `{deployment.id}`: The ID of the deployment.


        The domain name you specify here must be either equal to one of the
        custom

        domains you have registered, or a subdomain of one of the wildcard
        domains

        you have registered. Let's say you have registered `example.com` and

        `*.example.net` as custom domains via [add a
        domain](#post-/organizations/-organizationId-/domains)

        endpoint and set DNS records needed to verify you are the owner of
        these. In

        this case, the following table shows what domains are attachable and
        why:


        | Domain                                          | Attachable? |
        Comment                                                                                    
        |

        | ----------------------------------------------- | ----------- |
        -------------------------------------------------------------------------------------------
        |

        | `example.com`                                   | ✅          | Exactly
        matches the registered custom domain
        `example.com`                                  |

        | `foo.example.net`                               | ✅          | Covered
        by
        `*.example.net`                                                                 
        |

        | `*.example.net`                                 | ✅          | Exactly
        matches the registered custom domain
        `*.example.net`                                |

        | `{project.name}.example.net`                    | ✅          | Covered
        by `*.example.net`, and the placeholder is
        valid                                    |

        | `my-{project.name}.example.net`                 | ✅          | Covered
        by `*.example.net`, and the placeholder is
        valid                                    |

        | `my-{project.name}-{deployment.id}.example.net` | ✅          | Covered
        by `*.example.net`, and the placeholders are
        valid                                  |

        | `foo.example.com`                               | ❌          | The
        custom domain `example.com` is registered, but not `foo.example.com` or
        `*.example.com` |

        | `example.net`                                   | ❌          | Not a
        subdomain of
        `*.example.net`                                                         
        |

        | `foo.bar.example.net`                           | ❌          | Not a
        subdomain of
        `*.example.net`                                                         
        |

        | `{project.id}.example.net`                      | ❌          | The
        placeholder is not
        valid                                                                |


        Besides your custom domains, you can also use `deno.dev` domain without

        the need to register it. In this case, though, only two template formats

        and two known (if you know the project name & deployment ID values)
        domains

        are allowed as follows:


        | Domain                                    | Attachable? |

        | ----------------------------------------- | ----------- |

        | `{project.name}.deno.dev`                 | ✅          |

        | `{project.name}-{deployment.id}.deno.dev` | ✅          |

        | `myproject.deno.dev`                      | ✅          |

        | `myproject-mydeploymentid.deno.dev`       | ✅          |

        | `foo.deno.dev`                            | ❌          |

        | `my-{project.name}.deno.dev`              | ❌          |

        | `{deployment.id}.deno.dev`                | ❌          |

        | `{deployment.id}-{project.name}.deno.dev` | ❌          |


        Lastly, keep in mind that in order for the attached domain to work

        properly, you also need to set up TLS certificates, either by

        [provisioning a
        certificate](#post-/domains/-domainId-/certificates/provision)

        or by [uploading a certificate](#post-/domains/-domainId-/certificates).

        This is not needed for `deno.dev` domains.
    DeploymentPermissionsOverwrite:
      type: object
      description: >-
        Permissions to be overwritten for the deployment's existing permissions.


        Currently only `net` is supported, where you can specify a list of IP

        addresses and/or hostnames that the deployment is allowed to make
        outbound

        network requests to.
      properties:
        net:
          type: array
          items:
            type: string
          description: >-
            A list of IP addresses that the deployment is allowed to make
            outbound

            network requests to.


            Each element must be a valid IPv4, IPv6, or a hostname like
            `example.com`

            although outbound network requests using IPv6 are not supported yet
            in

            Deno Deploy regardless.

            In addition to these, a special value `*` can be used, which means
            all

            accesses are allowed. Also note the following:


            - If omitted, no update will happen to the existing permissions.

            - If an empty list is provided, all accesses will be **denied**.
          example:
            - example.com
            - 34.120.54.55
            - '[2600:1901:0:6d85::]'
            - '*'
          nullable: true
      additionalProperties: false
    Asset:
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/File'
            - type: object
              required:
                - kind
              properties:
                kind:
                  type: string
                  enum:
                    - file
        - allOf:
            - $ref: '#/components/schemas/Symlink'
            - type: object
              required:
                - kind
              properties:
                kind:
                  type: string
                  enum:
                    - symlink
      discriminator:
        propertyName: kind
    File:
      oneOf:
        - type: object
          required:
            - content
          properties:
            content:
              type: string
            encoding:
              $ref: '#/components/schemas/Encoding'
        - type: object
          required:
            - gitSha1
          properties:
            gitSha1:
              type: string
    Symlink:
      type: object
      required:
        - target
      properties:
        target:
          type: string
      additionalProperties: false
    Encoding:
      type: string
      enum:
        - utf-8
        - base64
  x-stackQL-resources:
    deployments:
      id: deno.deployment.deployments
      name: deployments
      title: Deployments
      methods:
        list_deployments:
          operation:
            $ref: '#/paths/~1projects~1{projectId}~1deployments/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_deployment:
          operation:
            $ref: '#/paths/~1projects~1{projectId}~1deployments/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        redeploy_deployment:
          operation:
            $ref: '#/paths/~1deployments~1{deploymentId}~1redeploy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_deployment:
          operation:
            $ref: '#/paths/~1deployments~1{deploymentId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_deployment:
          operation:
            $ref: '#/paths/~1deployments~1{deploymentId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/deployments/methods/list_deployments
          - $ref: >-
              #/components/x-stackQL-resources/deployments/methods/get_deployment
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/deployments/methods/create_deployment
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/deployments/methods/delete_deployment
        replace: []
    build_logs:
      id: deno.deployment.build_logs
      name: build_logs
      title: Build Logs
      methods:
        get_build_logs:
          operation:
            $ref: '#/paths/~1deployments~1{deploymentId}~1build_logs/get'
          response:
            mediaType: application/x-ndjson
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/build_logs/methods/get_build_logs'
        insert: []
        update: []
        delete: []
        replace: []
    app_logs:
      id: deno.deployment.app_logs
      name: app_logs
      title: App Logs
      methods:
        get_app_logs:
          operation:
            $ref: '#/paths/~1deployments~1{deploymentId}~1app_logs/get'
          response:
            mediaType: application/x-ndjson
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/app_logs/methods/get_app_logs'
        insert: []
        update: []
        delete: []
        replace: []
    domains:
      id: deno.deployment.domains
      name: domains
      title: Domains
      methods:
        attach_domain_to_deployment:
          operation:
            $ref: '#/paths/~1deployments~1{deploymentId}~1domains~1{domain}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        detach_domain_from_deployment:
          operation:
            $ref: '#/paths/~1deployments~1{deploymentId}~1domains~1{domain}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/domains/methods/detach_domain_from_deployment
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/domains/methods/attach_domain_to_deployment
servers:
  - url: https://api.deno.com/v1
