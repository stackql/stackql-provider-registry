openapi: 3.0.3
info:
  title: sessions API
  description: okta sessions API
  version: 5.1.0
paths:
  /api/v1/sessions:
    post:
      summary: Create a session with session token
      description: >-
        Creates a new Session for a user with a valid session token. Use this
        API if, for example, you want to set the session cookie yourself instead
        of allowing Okta to set it, or want to hold the session ID to delete a
        session through the API instead of visiting the logout URL.
      operationId: createSession
      x-codegen-request-body-name: createSessionRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
            examples:
              SessionsCreate:
                $ref: '#/components/examples/CreateSessionBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
              examples:
                SessionsCreate:
                  summary: Create a new session with a valid session token
                  $ref: '#/components/examples/CreateSessionResponse'
        '400':
          description: Bad Request
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
      tags:
        - Session
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
  /api/v1/sessions/me:
    get:
      summary: Retrieve the current session
      description: >-
        Retrieves Session information for the current user. Use this method in a
        browser-based application to determine if the user is signed in. 


        > **Note:** This operation requires a session cookie for the user. An
        API token isn't allowed for this operation.
      operationId: getCurrentSession
      parameters:
        - in: header
          name: Cookie
          schema:
            description: Session ID (`sid`) or Identity Engine (`idx`) cookie
            type: string
          example: sid=abcde-123 or idx=abcde-123
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
              examples:
                CurrentSessionsRetrieve:
                  summary: Retrieve current session information
                  $ref: '#/components/examples/RetrieveCurrentSessionResponse'
        '404':
          description: Not Found
      security: []
      tags:
        - Session
      x-okta-lifecycle:
        isCorsEnabled: true
        lifecycle: GA
        isGenerallyAvailable: true
    delete:
      summary: Close the current session
      description: >-
        Closes the Session for the user who is currently signed in. Use this
        method in a browser-based application to sign out a user.


        > **Note:** This operation requires a session cookie for the user. An
        API token isn't allowed for this operation.
      operationId: closeCurrentSession
      parameters:
        - in: header
          name: Cookie
          schema:
            description: Session ID (`sid`) or Identity Engine (`idx`) cookie
            type: string
          example: sid=abcde-123 or idx=abcde-123
      responses:
        '204':
          description: No Content
          content: {}
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
      security: []
      tags:
        - Session
      x-okta-lifecycle:
        isCorsEnabled: true
        lifecycle: GA
        isGenerallyAvailable: true
  /api/v1/sessions/me/lifecycle/refresh:
    post:
      summary: Refresh the current session
      description: >-
        Refreshes the Session for the current user


        > **Note:** This operation requires a session cookie for the user. An
        API token isn't allowed for this operation.
      operationId: refreshCurrentSession
      parameters:
        - in: header
          name: Cookie
          schema:
            description: Session ID (`sid`) or Identity Engine (`idx`) cookie
            type: string
          example: sid=abcde-123 or idx=abcde-123
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
              examples:
                CurrentSessionsRefresh:
                  summary: Refersh current session
                  $ref: '#/components/examples/RefreshCurrentSessionResponse'
        '404':
          description: Not Found
      security: []
      tags:
        - Session
      x-okta-lifecycle:
        isCorsEnabled: true
        lifecycle: GA
        isGenerallyAvailable: true
  /api/v1/sessions/{sessionId}:
    get:
      summary: Retrieve a session
      description: >-
        Retrieves information about the Session specified by the given session
        ID
      operationId: getSession
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
              examples:
                SessionsRetrieve:
                  summary: Retrieve session information for a single session ID
                  $ref: '#/components/examples/RetrieveSessionResponse'
        '400':
          description: Bad Request
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          description: Not Found
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.sessions.read
      tags:
        - Session
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    delete:
      summary: Revoke a session
      description: Revokes the specified Session
      operationId: revokeSession
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.sessions.manage
      tags:
        - Session
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    parameters:
      - $ref: '#/components/parameters/pathSessionId'
  /api/v1/sessions/{sessionId}/lifecycle/refresh:
    post:
      summary: Refresh a session
      description: >-
        Refreshes an existing Session using the `id` for that Session. A
        successful response contains the refreshed Session with an updated
        `expiresAt` timestamp.
      operationId: refreshSession
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
              examples:
                SessionsRefresh:
                  summary: Refresh an existing session using the session ID
                  $ref: '#/components/examples/RefreshSessionResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          description: Not Found
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.sessions.manage
      tags:
        - Session
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    parameters:
      - $ref: '#/components/parameters/pathSessionId'
components:
  schemas:
    CreateSessionRequest:
      type: object
      properties:
        sessionToken:
          type: string
          description: The session token obtained during authentication
    Session:
      type: object
      properties:
        amr:
          type: array
          readOnly: true
          description: Authentication method reference
          items:
            $ref: '#/components/schemas/SessionAuthenticationMethod'
        createdAt:
          type: string
          format: date-time
          readOnly: true
        expiresAt:
          type: string
          format: date-time
          readOnly: true
          description: A timestamp when the Session expires
        id:
          type: string
          readOnly: true
          description: A unique key for the Session
        idp:
          $ref: '#/components/schemas/SessionIdentityProvider'
        lastFactorVerification:
          type: string
          format: date-time
          readOnly: true
          description: A timestamp when the user last performed multifactor authentication
        lastPasswordVerification:
          type: string
          format: date-time
          readOnly: true
          description: >-
            A timestamp when the user last performed the primary or step-up
            authentication with a password
        login:
          type: string
          readOnly: true
          description: A unique identifier for the user (username)
        status:
          $ref: '#/components/schemas/SessionStatus'
          description: Current Session status
        userId:
          type: string
          readOnly: true
          description: A unique key for the user
        _links:
          $ref: '#/components/schemas/LinksSelf'
    SessionAuthenticationMethod:
      type: string
      enum:
        - fpt
        - geo
        - hwk
        - kba
        - mca
        - mfa
        - otp
        - pwd
        - sc
        - sms
        - swk
        - tel
      x-enumDescriptions:
        pwd: >-
          Password authentication. **Inline hook value:** `PASSWORD`
          **Example:** Standard password-based sign-in
        swk: >-
          Proof-of-possession (PoP) of a software key. **Inline hook value:**
          `POP_SOFTWARE_KEY` **Example:** Okta Verify with Push
        hwk: >-
          Proof-of-possession (PoP) of a hardware key. **Inline hook value:**
          `POP_HARDWARE_KEY` **Example:** Yubikey factor
        opt: >-
          One-time password. **Inline hook value:** `ONE_TIME_PASSWORD`.
          **Example:** Okta Verify, Google Authenticator
        sms: >-
          SMS text message to the user at a registered number. **Inline hook
          value:** `SMS_MESSAGE`. **Example:** SMS factor
        tel: >-
          Telephone call to the user at a registered number. **Inline hook
          value:** `TELEPHONE_CALL`. **Example:** Phone call factor
        geo: >-
          Use of geo-location information. **Inline hook value:** `GEOLOCATION`.
          **Example:** IP Trust and Network Zone policy conditions
        fpt: >-
          Fingerprint biometric authentication. **Inline hook value:**
          `BIO_FINGERPRINT`. **Example:** Okta Verify with Touch ID
        kba: >-
          Knowledge-based authentication. **Inline hook value:**
          `KNOWLEDGE_BASED_AUTHENTICATION`. **Example:** Security Question
          factor
        mfa: >-
          Multifactor authentication. **Inline hook value:**
          `MULTIFACTOR_AUTHENTICATION`. **Example:** This value is present
          whenever any MFA factor verification is performed.
        mca: >-
          Multiple-channel authentication. **Inline hook value:**
          `MULTIPLE_CHANNEL_AUTHENTICATION`. **Example:** Authentication
          requires communication over more than one channel, such as Internet
          and mobile network
        sc: >-
          Smart card authentication. **Inline hook value:** `SMART_CARD.
          **Example:** User authenticated using a smart card, such as a Personal
          Identity Verification (PIV) card or Common Access Card (CAC)
    SessionIdentityProvider:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: >-
            Identity Provider ID. If the `type` is `OKTA`, then the `id` is the
            org ID.
        type:
          $ref: '#/components/schemas/SessionIdentityProviderType'
    SessionStatus:
      type: string
      enum:
        - ACTIVE
        - MFA_ENROLL
        - MFA_REQUIRED
      x-enumDescriptions:
        ACTIVE: The Session is established and fully validated.
        MFA_REQUIRED: The Session is established, but requires second factor verification.
        MFA_ENROLL: >-
          The Session is established, but the user needs to enroll a second
          factor.
    LinksSelf:
      description: >-
        Specifies link relations (see [Web
        Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the
        [JSON Hypertext Application
        Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06)
        specification. This object is used for dynamic discovery of related
        resources and lifecycle operations.
      type: object
      properties:
        self:
          $ref: '#/components/schemas/HrefObjectSelfLink'
      readOnly: true
    Error:
      title: Error
      type: object
      properties:
        errorCauses:
          type: array
          items:
            $ref: '#/components/schemas/ErrorCause'
        errorCode:
          type: string
          description: An Okta code for this type of error
        errorId:
          type: string
          description: >-
            A unique identifier for this error. This can be used by Okta Support
            to help with troubleshooting.
        errorLink:
          type: string
          description: An Okta code for this type of error
        errorSummary:
          type: string
          description: >-
            A short description of what caused this error. Sometimes this
            contains dynamically-generated information about your specific
            error.
    SessionIdentityProviderType:
      type: string
      enum:
        - ACTIVE_DIRECTORY
        - FEDERATION
        - LDAP
        - OKTA
        - SOCIAL
    HrefObjectSelfLink:
      allOf:
        - $ref: '#/components/schemas/HrefObject'
        - description: Link to the resource (self)
    ErrorCause:
      type: object
      properties:
        errorSummary:
          type: string
    HrefObject:
      title: Link Object
      additionalProperties: true
      type: object
      properties:
        hints:
          $ref: '#/components/schemas/HrefHints'
          readOnly: true
        href:
          type: string
          description: Link URI
        name:
          type: string
          description: Link name
          readOnly: true
        templated:
          type: boolean
          description: >-
            Indicates whether the link object's `href` property is a URI
            template.
          readOnly: true
        type:
          type: string
          description: >-
            The media type of the link. If omitted, it is implicitly
            `application/json`.
          readOnly: true
      required:
        - href
    HrefHints:
      description: Describes allowed HTTP verbs for the `href`
      type: object
      properties:
        allow:
          type: array
          items:
            $ref: '#/components/schemas/HttpMethod'
    HttpMethod:
      type: string
      enum:
        - DELETE
        - GET
        - POST
        - PUT
  responses:
    ErrorAccessDenied403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            AccessDenied:
              $ref: '#/components/examples/ErrorAccessDenied'
    ErrorTooManyRequests429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            TooManyRequests:
              $ref: '#/components/examples/ErrorTooManyRequests'
    ErrorResourceNotFound404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            ResourceNotFound:
              $ref: '#/components/examples/ErrorResourceNotFound'
  parameters:
    pathSessionId:
      name: sessionId
      description: '`id` of the Session'
      in: path
      required: true
      schema:
        type: string
        example: l7FbDVqS8zHSy65uJD85
  examples:
    CreateSessionBody:
      summary: Create a new session with a valid session token
      value:
        sessionToken: 00HiohZYpJgMSHwmL9TQy7RRzuY-q9soKp1SPmYYow
    CreateSessionResponse:
      summary: Create a new session with a valid session token
      value:
        amr:
          - pwd
        createdAt: '2019-08-24T14:15:22Z'
        expiresAt: '2019-08-24T14:15:22Z'
        id: l7FbDVqS8zHSy65uJD85
        idp:
          id: 01a2bcdef3GHIJKLMNOP
          type: ACTIVE_DIRECTORY
        lastFactorVerification: '2019-08-24T14:15:22Z'
        lastPasswordVerification: '2019-08-24T14:15:22Z'
        login: user@example.com
        status: ACTIVE
        userId: 00u0abcdefGHIJKLMNOP
        _links:
          self:
            hints:
              allow:
                - DELETE
          href: https://{yourOktaDomain}/api/v1/sessions/l7FbDVqS8zHSy65uJD85
    RetrieveCurrentSessionResponse:
      summary: Retrieve current session
      value:
        amr:
          - pwd
        createdAt: '2019-08-24T14:15:22Z'
        expiresAt: '2019-08-24T14:15:22Z'
        id: l7FbDVqS8zHSy65uJD85
        idp:
          id: 01a2bcdef3GHIJKLMNOP
          type: ACTIVE_DIRECTORY
        lastFactorVerification: '2019-08-24T14:15:22Z'
        lastPasswordVerification: '2019-08-24T14:15:22Z'
        login: user@example.com
        status: ACTIVE
        userId: 00u0abcdefGHIJKLMNOP
        _links:
          self:
            hints:
              allow:
                - GET
                - DELETE
            href: https://{yourOktaDomain}/api/v1/sessions/me
          refresh:
            hints:
              allow:
                - POST
            href: https://{yourOktaDomain}/api/v1/sessions/me/lifecycle/refresh
          user:
            hints:
              allow:
                - GET
            href: https://{yourOktaDomain}/api/v1/users/me
            name: User Name
    RefreshCurrentSessionResponse:
      summary: Refresh current session
      value:
        amr:
          - pwd
        createdAt: '2019-08-24T14:15:22Z'
        expiresAt: '2019-08-24T14:15:22Z'
        id: l7FbDVqS8zHSy65uJD85
        idp:
          id: 01a2bcdef3GHIJKLMNOP
          type: ACTIVE_DIRECTORY
        lastFactorVerification: '2019-08-24T14:15:22Z'
        lastPasswordVerification: '2019-08-24T14:15:22Z'
        login: user@example.com
        status: ACTIVE
        userId: 00u0abcdefGHIJKLMNOP
        _links:
          self:
            hints:
              allow:
                - GET
                - DELETE
            href: https://{yourOktaDomain}/api/v1/sessions/me
          refresh:
            hints:
              allow:
                - POST
            href: https://{yourOktaDomain}/api/v1/sessions/me/lifecycle/refresh
          user:
            hints:
              allow:
                - GET
            href: https://{yourOktaDomain}/api/v1/users/me
            name: User Name
    RetrieveSessionResponse:
      summary: Retrieve session information for a single session ID
      value:
        amr:
          - pwd
        createdAt: '2019-08-24T14:15:22Z'
        expiresAt: '2019-08-24T14:15:22Z'
        id: l7FbDVqS8zHSy65uJD85
        idp:
          id: 01a2bcdef3GHIJKLMNOP
          type: ACTIVE_DIRECTORY
        lastFactorVerification: '2019-08-24T14:15:22Z'
        lastPasswordVerification: '2019-08-24T14:15:22Z'
        login: user@example.com
        status: ACTIVE
        userId: 00u0abcdefGHIJKLMNOP
        _links:
          self:
            hints:
              allow:
                - DELETE
          href: https://{yourOktaDomain}/api/v1/sessions/l7FbDVqS8zHSy65uJD85
    RefreshSessionResponse:
      summary: Refresh an existing session using the session ID
      value:
        amr:
          - pwd
        createdAt: '2019-08-25T14:17:22Z'
        expiresAt: '2019-08-25T14:17:22Z'
        id: l7FbDVqS8zHSy65uJD85
        idp:
          id: 01a2bcdef3GHIJKLMNOP
          type: ACTIVE_DIRECTORY
        lastFactorVerification: '2019-08-24T14:15:22Z'
        lastPasswordVerification: '2019-08-24T14:15:22Z'
        login: user@example.com
        status: ACTIVE
        userId: 00u0abcdefGHIJKLMNOP
        _links:
          self:
            hints:
              allow:
                - DELETE
          href: https://{yourOktaDomain}/api/v1/sessions/l7FbDVqS8zHSy65uJD85
    ErrorAccessDenied:
      summary: Access Denied
      value:
        errorCode: E0000006
        errorSummary: You do not have permission to perform the requested action
        errorLink: E0000006
        errorId: sampleNUSD_8fdkFd8fs8SDBK
        errorCauses: []
    ErrorTooManyRequests:
      summary: Too Many Requests
      value:
        errorCode: E0000047
        errorSummary: API call exceeded rate limit due to too many requests.
        errorLink: E0000047
        errorId: sampleQPivGUj_ND5v78vbYWW
        errorCauses: []
    ErrorResourceNotFound:
      summary: Resource Not Found
      value:
        errorCode: E0000007
        errorSummary: 'Not found: {0}'
        errorLink: E0000007
        errorId: sampleMlLvGUj_YD5v16vkYWY
        errorCauses: []
  x-stackQL-resources:
    sessions:
      id: okta.sessions.sessions
      name: sessions
      title: Sessions
      methods:
        create_session:
          operation:
            $ref: '#/paths/~1api~1v1~1sessions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_current_session:
          operation:
            $ref: '#/paths/~1api~1v1~1sessions~1me/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        close_current_session:
          operation:
            $ref: '#/paths/~1api~1v1~1sessions~1me/delete'
          response:
            mediaType: ''
            openAPIDocKey: '204'
        refresh_current_session:
          operation:
            $ref: '#/paths/~1api~1v1~1sessions~1me~1lifecycle~1refresh/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_session:
          operation:
            $ref: '#/paths/~1api~1v1~1sessions~1{sessionId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        revoke_session:
          operation:
            $ref: '#/paths/~1api~1v1~1sessions~1{sessionId}/delete'
          response:
            mediaType: ''
            openAPIDocKey: '204'
        refresh_session:
          operation:
            $ref: '#/paths/~1api~1v1~1sessions~1{sessionId}~1lifecycle~1refresh/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/sessions/methods/get_current_session
          - $ref: '#/components/x-stackQL-resources/sessions/methods/get_session'
        insert:
          - $ref: '#/components/x-stackQL-resources/sessions/methods/create_session'
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/sessions/methods/close_current_session
          - $ref: '#/components/x-stackQL-resources/sessions/methods/revoke_session'
        replace: []
servers:
  - url: https://{subdomain}.okta.com/
    variables:
      subdomain:
        default: my-org
        description: >-
          The domain of your organization. This can be a provided subdomain of
          an official okta domain (okta.com, oktapreview.com, etc) or one of
          your configured custom domains.
