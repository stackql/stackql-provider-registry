openapi: 3.0.3
info:
  title: authorizationservers API
  description: okta authorizationservers API
  version: 5.1.0
paths:
  /api/v1/authorizationServers:
    get:
      summary: List all authorization servers
      description: Lists all custom authorization servers in the org
      operationId: listAuthorizationServers
      parameters:
        - name: q
          in: query
          description: >-
            Searches the `name` and `audiences` of authorization servers for
            matching values
          example: customasone
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Specifies the number of authorization server results on a page.
            Maximum value: 200
          schema:
            type: integer
            format: int32
            default: 200
        - name: after
          in: query
          description: >-
            Specifies the pagination cursor for the next page of authorization
            servers. Treat as an opaque value and obtain through the next link
            relationship.
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationServer'
              examples:
                ListAuthServers:
                  $ref: '#/components/examples/ListAuthServersResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    post:
      summary: Create an authorization server
      description: Creates an authorization server
      operationId: createAuthorizationServer
      x-codegen-request-body-name: authorizationServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServer'
            examples:
              CreateAuthServer:
                $ref: '#/components/examples/CreateAuthServerBody'
              CreateAuthServerWithAccessTokenEncryption:
                $ref: >-
                  #/components/examples/CreateAuthServerWithAccessTokenEncryptionBody
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServer'
              examples:
                CreateAuthServer:
                  $ref: '#/components/examples/CreateAuthServerResponse'
                CreateAuthServerWithAccessTokenEncryption:
                  $ref: >-
                    #/components/examples/CreateAuthServerWithAccessTokenEncryptionResponse
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
  /api/v1/authorizationServers/{authServerId}:
    get:
      summary: Retrieve an authorization server
      description: Retrieves an authorization server
      operationId: getAuthorizationServer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServer'
              examples:
                RetrieveAuthServer:
                  $ref: '#/components/examples/RetrieveAuthServerResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServer
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    put:
      summary: Replace an authorization server
      description: Replaces an authorization server
      operationId: replaceAuthorizationServer
      x-codegen-request-body-name: authorizationServer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServer'
            examples:
              ReplaceAuthServer:
                $ref: '#/components/examples/ReplaceAuthServerBody'
              ReplaceAuthServerEnableTokenEncryption:
                $ref: >-
                  #/components/examples/ReplaceAuthServerEnableTokenEncryptionBody
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServer'
              examples:
                ReplaceAuthServer:
                  $ref: '#/components/examples/ReplaceAuthServerResponse'
                ReplaceAuthServerEnableTokenEncryption:
                  $ref: >-
                    #/components/examples/ReplaceAuthServerEnableTokenEncryptionResponse
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    delete:
      summary: Delete an authorization server
      description: Deletes an authorization server
      operationId: deleteAuthorizationServer
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
  /api/v1/authorizationServers/{authServerId}/associatedServers:
    get:
      summary: List all associated authorization servers
      description: >-
        Lists all associated Authorization Servers by trusted type for the given
        `authServerId`
      operationId: listAssociatedServersByTrustedType
      parameters:
        - name: trusted
          in: query
          description: >-
            Searches trusted authorization servers when `true` or searches
            untrusted authorization servers when `false`
          schema:
            type: boolean
        - name: q
          in: query
          description: >-
            Searches for the name or audience of the associated authorization
            servers
          example: customasone
          schema:
            type: string
        - name: limit
          in: query
          description: Specifies the number of results for a page
          schema:
            type: integer
            format: int32
            default: 200
        - name: after
          in: query
          description: >-
            Specifies the pagination cursor for the next page of the associated
            authorization servers
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationServer'
              examples:
                ListAssocAuthServer:
                  $ref: '#/components/examples/ListAssocAuthServerResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerAssoc
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    post:
      summary: Create an associated authorization server
      description: >-
        Creates trusted relationships between the given authorization server and
        other authorization servers
      operationId: createAssociatedServers
      x-codegen-request-body-name: associatedServerMediated
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssociatedServerMediated'
            examples:
              CreateAssocAuthServer:
                $ref: '#/components/examples/CreateAssocAuthServerBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationServer'
              examples:
                CreateAssocAuthServer:
                  $ref: '#/components/examples/CreateAssocAuthServerResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerAssoc
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
  /api/v1/authorizationServers/{authServerId}/associatedServers/{associatedServerId}:
    delete:
      summary: Delete an associated authorization server
      description: Deletes an associated Authorization Server
      operationId: deleteAssociatedServer
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerAssoc
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathAssociatedServerId'
  /api/v1/authorizationServers/{authServerId}/claims:
    get:
      summary: List all custom token claims
      description: >-
        Lists all custom token Claims defined for a specified custom
        authorization server
      operationId: listOAuth2Claims
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2Claim'
              examples:
                ListCustomTokenClaims:
                  $ref: '#/components/examples/ListCustomTokenClaimsResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerClaims
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    post:
      summary: Create a custom token claim
      description: Creates a custom token Claim for a custom authorization server
      operationId: createOAuth2Claim
      x-codegen-request-body-name: oAuth2Claim
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2Claim'
            examples:
              CreateCustomTokenClaim:
                $ref: '#/components/examples/CreateCustomTokenClaimBody'
        required: true
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Claim'
              examples:
                CreateCustomTokenClaim:
                  $ref: '#/components/examples/CreateCustomTokenClaimResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerClaims
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
  /api/v1/authorizationServers/{authServerId}/claims/{claimId}:
    get:
      summary: Retrieve a custom token claim
      description: Retrieves a custom token Claim by the specified `claimId`
      operationId: getOAuth2Claim
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Claim'
              examples:
                RetrieveCustomTokenClaim:
                  $ref: '#/components/examples/RetrieveCustomTokenClaimResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerClaims
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    put:
      summary: Replace a custom token claim
      description: Replaces a custom token Claim specified by the `claimId`
      operationId: replaceOAuth2Claim
      x-codegen-request-body-name: oAuth2Claim
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2Claim'
            examples:
              ReplaceCustomTokenClaim:
                $ref: '#/components/examples/ReplaceCustomTokenClaimBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Claim'
              examples:
                ReplaceCustomTokenClaim:
                  $ref: '#/components/examples/ReplaceCustomTokenClaimResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerClaims
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    delete:
      summary: Delete a custom token claim
      description: Deletes a custom token Claim specified by the `claimId`
      operationId: deleteOAuth2Claim
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerClaims
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathClaimId'
  /api/v1/authorizationServers/{authServerId}/clients:
    get:
      summary: List all client resources for an authorization server
      description: >-
        Lists all client resources for which the specified authorization server
        has tokens.


        > **Note:** To list a specific user's client resources for which they
        have tokens or grants, use the [List all clients endpoint in the User
        Resources
        API](https://developer.okta.com/docs/apihttps://developer.okta.com/docs/apihttps://developer.okta.com/docs/apihttps://developer.okta.com/docs/api/openapi/okta-management/management/tag/UserResources/#tag/UserResources/operation/listUserClients).
      operationId: listOAuth2ClientsForAuthorizationServer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2Client'
              examples:
                ListClients:
                  $ref: '#/components/examples/ListClientsResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerClients
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
  /api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens:
    get:
      summary: List all refresh tokens for a client
      description: >-
        Lists all refresh tokens issued by an authorization server for a
        specific Client
      operationId: listRefreshTokensForAuthorizationServerAndClient
      parameters:
        - name: expand
          in: query
          description: >-
            Valid value: `scope`. If specified, scope details are included in
            the `_embedded` attribute.
          schema:
            type: string
        - name: after
          in: query
          description: Specifies the pagination cursor for the next page of tokens
          schema:
            type: string
        - name: limit
          in: query
          description: The maximum number of tokens to return (maximum 200)
          schema:
            type: integer
            format: int32
            default: -1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2RefreshToken'
              examples:
                ListRefreshTokenClients:
                  $ref: '#/components/examples/ListRefreshTokensClientsResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerClients
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    delete:
      summary: Revoke all refresh tokens for a client
      description: Revokes all refresh tokens for a Client
      operationId: revokeRefreshTokensForAuthorizationServerAndClient
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerClients
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathClientId'
  /api/v1/authorizationServers/{authServerId}/clients/{clientId}/tokens/{tokenId}:
    get:
      summary: Retrieve a refresh token for a client
      description: Retrieves a refresh token for a Client
      operationId: getRefreshTokenForAuthorizationServerAndClient
      parameters:
        - name: expand
          in: query
          description: >-
            Valid value: `scope`. If specified, scope details are included in
            the `_embedded` attribute.
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2RefreshToken'
              examples:
                RetrieveRefreshTokenClient:
                  $ref: '#/components/examples/RetrieveRefreshTokenClientResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerClients
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    delete:
      summary: Revoke a refresh token for a client
      description: Revokes a refresh token for a Client
      operationId: revokeRefreshTokenForAuthorizationServerAndClient
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerClients
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathClientId'
      - $ref: '#/components/parameters/pathTokenId'
  /api/v1/authorizationServers/{authServerId}/credentials/keys:
    get:
      summary: List all credential keys
      description: >-
        Lists all of the current, future, and expired Keys used by the Custom
        Authorization Server
      operationId: listAuthorizationServerKeys
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationServerJsonWebKey'
              examples:
                ListAuthorizationServerKeys:
                  $ref: '#/components/examples/ListAuthorizationServerKeys'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerKeys
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
  /api/v1/authorizationServers/{authServerId}/credentials/keys/{keyId}:
    get:
      summary: Retrieve an authorization server key
      description: Retrieves an Authorization Server Key specified by the `keyId`
      operationId: getAuthorizationServerKey
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerJsonWebKey'
              examples:
                ActiveAuthorizationServerKey:
                  $ref: '#/components/examples/ActiveAuthorizationServerKey'
                NextAuthorizationServerKey:
                  $ref: '#/components/examples/NextAuthorizationServerKey'
                ExpiredAuthorizationServerKey:
                  $ref: '#/components/examples/ExpiredAuthorizationServerKey'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerKeys
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathCredentialKeyId'
  /api/v1/authorizationServers/{authServerId}/credentials/lifecycle/keyRotate:
    post:
      summary: Rotate all credential keys
      description: >-
        Rotates the current Keys for a Custom Authorization Server. If you
        rotate Keys,

        the `ACTIVE` Key becomes the `EXPIRED` Key, the `NEXT` Key becomes the
        `ACTIVE` Key,

        and the Custom Authorization Server immediately begins using the new
        active

        Key to sign tokens.


        > **Note:** Okta rotates your Keys automatically in `AUTO` mode. You can
        rotate Keys

        yourself in either mode. If Keys are rotated manually, you should
        invalidate any intermediate cache.

        and fetch the Keys again using the Keys endpoint.
      operationId: rotateAuthorizationServerKeys
      x-codegen-request-body-name: use
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JwkUse'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationServerJsonWebKey'
              examples:
                RotateAuthorizationServerKeys:
                  $ref: '#/components/examples/ListAuthorizationServerKeys'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                InvalidRotateUse:
                  $ref: '#/components/examples/InvalidRotateUse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerKeys
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
  /api/v1/authorizationServers/{authServerId}/lifecycle/activate:
    post:
      summary: Activate an authorization server
      description: Activates an authorization server
      operationId: activateAuthorizationServer
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
  /api/v1/authorizationServers/{authServerId}/lifecycle/deactivate:
    post:
      summary: Deactivate an authorization server
      description: Deactivates an authorization server
      operationId: deactivateAuthorizationServer
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServer
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
  /api/v1/authorizationServers/{authServerId}/policies:
    get:
      summary: List all policies
      description: Lists all policies
      operationId: listAuthorizationServerPolicies
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationServerPolicy'
              examples:
                ListAuthorizationServerPolicies:
                  $ref: '#/components/examples/ListAuthorizationServerPolicies'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerPolicies
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    post:
      summary: Create a policy
      description: Creates a policy
      operationId: createAuthorizationServerPolicy
      x-codegen-request-body-name: policy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerPolicy'
            examples:
              CreateAuthorizationServerPolicyRule:
                $ref: '#/components/examples/CreateAuthorizationServerPolicyRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicy'
              examples:
                AuthorizationServerPolicy:
                  $ref: '#/components/examples/AuthorizationServerPolicy'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerPolicies
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}:
    get:
      summary: Retrieve a policy
      description: Retrieves a policy
      operationId: getAuthorizationServerPolicy
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicy'
              examples:
                AuthorizationServerPolicy:
                  $ref: '#/components/examples/AuthorizationServerPolicy'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerPolicies
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    put:
      summary: Replace a policy
      description: Replaces a policy
      operationId: replaceAuthorizationServerPolicy
      x-codegen-request-body-name: policy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerPolicy'
            examples:
              UpdateAuthorizationServerPolicyRule:
                $ref: '#/components/examples/UpdateAuthorizationServerPolicyRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicy'
              examples:
                AuthorizationServerPolicy:
                  $ref: '#/components/examples/AuthorizationServerPolicy'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerPolicies
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    delete:
      summary: Delete a policy
      description: Deletes a policy
      operationId: deleteAuthorizationServerPolicy
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerPolicies
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathPolicyId'
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/activate:
    post:
      summary: Activate a policy
      description: Activates an authorization server policy
      operationId: activateAuthorizationServerPolicy
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerPolicies
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathPolicyId'
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/lifecycle/deactivate:
    post:
      summary: Deactivate a policy
      description: Deactivates an authorization server policy
      operationId: deactivateAuthorizationServerPolicy
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerPolicies
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathPolicyId'
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules:
    get:
      summary: List all policy rules
      description: >-
        Lists all policy rules for the specified Custom Authorization Server and
        Policy
      operationId: listAuthorizationServerPolicyRules
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorizationServerPolicyRule'
              examples:
                ListAuthorizationServerPolicyRules:
                  $ref: '#/components/examples/ListAuthorizationServerPolicyRules'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerRules
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    post:
      summary: Create a policy rule
      description: >-
        Creates a policy rule for the specified Custom Authorization Server and
        Policy
      operationId: createAuthorizationServerPolicyRule
      x-codegen-request-body-name: policyRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerPolicyRuleRequest'
            examples:
              CreateAuthorizationServerPolicyRule:
                $ref: >-
                  #/components/examples/CreateAuthorizationServerPolicyRuleRequest
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicyRule'
              examples:
                AuthorizationServerPolicyRule:
                  $ref: '#/components/examples/AuthorizationServerPolicyRule'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerRules
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathPolicyId'
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}:
    get:
      summary: Retrieve a policy rule
      description: Retrieves a policy rule by `ruleId`
      operationId: getAuthorizationServerPolicyRule
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicyRule'
              examples:
                AuthorizationServerPolicyRule:
                  $ref: '#/components/examples/AuthorizationServerPolicyRule'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerRules
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    put:
      summary: Replace a policy rule
      description: >-
        Replaces the configuration of the Policy Rule defined in the specified
        Custom Authorization Server and Policy
      operationId: replaceAuthorizationServerPolicyRule
      x-codegen-request-body-name: policyRule
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationServerPolicyRuleRequest'
            examples:
              UpdateAuthorizationServerPolicyRule:
                $ref: >-
                  #/components/examples/UpdateAuthorizationServerPolicyRuleRequest
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationServerPolicyRule'
              examples:
                AuthorizationServerPolicyRule:
                  $ref: '#/components/examples/AuthorizationServerPolicyRule'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerRules
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    delete:
      summary: Delete a policy rule
      description: >-
        Deletes a Policy Rule defined in the specified Custom Authorization
        Server and Policy
      operationId: deleteAuthorizationServerPolicyRule
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerRules
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathPolicyId'
      - $ref: '#/components/parameters/pathRuleId'
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/activate:
    post:
      summary: Activate a policy rule
      description: Activates an authorization server policy rule
      operationId: activateAuthorizationServerPolicyRule
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerRules
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathPolicyId'
      - $ref: '#/components/parameters/pathRuleId'
  /api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/{ruleId}/lifecycle/deactivate:
    post:
      summary: Deactivate a policy rule
      description: Deactivates an authorization server policy rule
      operationId: deactivateAuthorizationServerPolicyRule
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerRules
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathPolicyId'
      - $ref: '#/components/parameters/pathRuleId'
  /api/v1/authorizationServers/{authServerId}/resourceservercredentials/keys:
    get:
      summary: List all Custom Authorization Server Public JSON Web Keys
      description: Lists all the public keys used by the custom authorization server
      operationId: listOAuth2ResourceServerJsonWebKeys
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2ResourceServerJsonWebKey'
              examples:
                ListOAuth2ResourceServerJsonWebKeys:
                  $ref: '#/components/examples/ListOAuth2ResourceServerJsonWebKeys'
        '401':
          $ref: '#/components/responses/ErrorInvalidToken401'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - OAuth2ResourceServerCredentialsKeys
      x-okta-lifecycle:
        lifecycle: EA
        isGenerallyAvailable: true
    post:
      summary: Add a JSON Web Key
      description: >-
        Adds a new JSON Web Key to the custom authorization server`s JSON web
        keys.

        > **Note:** This API doesn't allow you to add a key if the existing key
        doesn't have a `kid`. Use the [Replace an Authorization
        Server](https://developer.okta.com/docs/apihttps://developer.okta.com/docs/apihttps://developer.okta.com/docs/apihttps://developer.okta.com/docs/api/openapi/okta-management/management/tag/AuthorizationServer/#tag/AuthorizationServer/operation/replaceAuthorizationServer)
        operation to update the JWKS or [Delete a Custom Authorization Server
        Public JSON Web
        Key](https://developer.okta.com/docs/apihttps://developer.okta.com/docs/apihttps://developer.okta.com/docs/apihttps://developer.okta.com/docs/api/openapi/okta-management/management/tag/OAuth2ResourceServerCredentialsKeys/#tag/OAuth2ResourceServerCredentialsKeys/operation/deleteOAuth2ResourceServerJsonWebKey)
        and re-add the key with a `kid`.

        > **Note:** This API doesn't allow you to add a key with an ACTIVE
        status. You need to add an INACTIVE key first, and then ACTIVATE the
        key.
      operationId: addOAuth2ResourceServerJsonWebKey
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2ResourceServerJsonWebKeyRequestBody'
            examples:
              addOAuth2ResourceServerJsonWebKeyRequestBody:
                $ref: '#/components/examples/AddOAuth2ResourceServerJsonWebKeyRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ResourceServerJsonWebKey'
              examples:
                getOAuth2ResourceServerKey:
                  $ref: '#/components/examples/OAuth2ResourceServerJsonWebKey'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ErrorJsonWebKeyNonUniqueKid:
                  $ref: '#/components/examples/ErrorJsonWebKeyNonUniqueKid'
                ErrorJsonWebKeyKidLengthTooShort:
                  $ref: '#/components/examples/ErrorJsonWebKeyKidLengthTooShort'
                ErrorJsonWebKeyTooManyKids:
                  $ref: '#/components/examples/ErrorJsonWebKeyTooManyKids'
                ErrorJsonWebKeyCannotAddActiveKey:
                  $ref: '#/components/examples/ErrorJsonWebKeyCannotAddActiveKey'
        '401':
          $ref: '#/components/responses/ErrorInvalidToken401'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - OAuth2ResourceServerCredentialsKeys
      x-okta-lifecycle:
        lifecycle: EA
        isGenerallyAvailable: true
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
  /api/v1/authorizationServers/{authServerId}/resourceservercredentials/keys/{keyId}:
    get:
      summary: Retrieve a Custom Authorization Server Public JSON Web Key
      description: Retrieves a custom authorization server public JSON web key by key `id`
      operationId: getOAuth2ResourceServerJsonWebKey
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/OAuth2ResourceServerJsonWebKey'
              examples:
                OAuthResourceServerJsonWebKeyResponseExample:
                  $ref: '#/components/examples/OAuth2ResourceServerJsonWebKey'
        '401':
          $ref: '#/components/responses/ErrorInvalidToken401'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - OAuth2ResourceServerCredentialsKeys
      x-okta-lifecycle:
        lifecycle: EA
        isGenerallyAvailable: true
    delete:
      summary: Delete a Custom Authorization Server Public JSON Web Key
      description: >-
        Deletes a custom authorization server public JSON web key by key `id`.
        You can only delete an inactive key.
      operationId: deleteOAuth2ResourceServerJsonWebKey
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ErrorDeleteActiveJsonWebKey:
                  $ref: '#/components/examples/ErrorDeleteActiveJsonWebKey'
        '401':
          $ref: '#/components/responses/ErrorInvalidToken401'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - OAuth2ResourceServerCredentialsKeys
      x-okta-lifecycle:
        lifecycle: EA
        isGenerallyAvailable: true
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathJsonWebKeyId'
  /api/v1/authorizationServers/{authServerId}/resourceservercredentials/keys/{keyId}/lifecycle/activate:
    post:
      summary: Activate a Custom Authorization Server Public JSON Web Key
      description: >-
        Activates a custom authorization server public JSON web key by key `id`.

        > **Note:** You can have only one active key at any given time for the
        authorization server. When you activate an inactive key, Okta
        automatically deactivates the current active key.
      operationId: activateOAuth2ResourceServerJsonWebKey
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ResourceServerJsonWebKey'
              examples:
                activateOAuth2ResourceServerJsonWebKeyResponse:
                  $ref: '#/components/examples/OAuth2ResourceServerJsonWebKey'
        '401':
          $ref: '#/components/responses/ErrorInvalidToken401'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - OAuth2ResourceServerCredentialsKeys
      x-okta-lifecycle:
        lifecycle: EA
        isGenerallyAvailable: true
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathJsonWebKeyId'
  /api/v1/authorizationServers/{authServerId}/resourceservercredentials/keys/{keyId}/lifecycle/deactivate:
    post:
      summary: Deactivate a Custom Authorization Server Public JSON Web Key
      description: >-
        Deactivates a custom authorization server public JSON web key by key
        `id`.

        > **Note:** Deactivating the active key isn't allowed if the
        authorization server has access token encryption enabled. You can
        activate another key, which makes the current key inactive.
      operationId: deactivateOAuth2ResourceServerJsonWebKey
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2ResourceServerJsonWebKey'
              examples:
                deactivateOAuth2ResourceServerJsonWebKeyResponse:
                  $ref: '#/components/examples/OAuth2ResourceServerJsonWebKey'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ErrorDeactivateActiveKey:
                  $ref: '#/components/examples/ErrorDeactivateActiveKey'
        '401':
          $ref: '#/components/responses/ErrorInvalidToken401'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - OAuth2ResourceServerCredentialsKeys
      x-okta-lifecycle:
        lifecycle: EA
        isGenerallyAvailable: true
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathJsonWebKeyId'
  /api/v1/authorizationServers/{authServerId}/scopes:
    get:
      summary: List all custom token scopes
      description: Lists all custom token scopes
      operationId: listOAuth2Scopes
      parameters:
        - name: q
          in: query
          description: Searches the `name` of Custom Token Scopes for matching values
          schema:
            type: string
        - name: filter
          in: query
          description: Filter expression for Custom Token Scopes
          schema:
            type: string
        - name: after
          in: query
          description: >-
            Specifies the pagination cursor for the next page of scopes.

            Treat the after cursor as an opaque value and obtain it through the
            next link relationship. See
            [Pagination](https://developer.okta.com/docs/api/#pagination).
          schema:
            type: string
        - name: limit
          in: query
          description: >-
            Specifies the number of objects to return per page.

            If there are multiple pages of results, the Link header contains a
            `next` link that you need to use as an opaque value (follow it,
            don't parse it). See
            [Pagination](https://developer.okta.com/docs/api/#pagination).
          schema:
            type: integer
            maximum: 200
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OAuth2Scope'
              examples:
                ExampleScopes:
                  $ref: '#/components/examples/ExampleOAuth2Scopes'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerScopes
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    post:
      summary: Create a custom token scope
      description: Creates a custom token scope
      operationId: createOAuth2Scope
      x-codegen-request-body-name: oAuth2Scope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2Scope'
            examples:
              CreateOAuth2ScopeRequest:
                $ref: '#/components/examples/CreateOAuth2ScopeRequest'
        required: true
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Scope'
              examples:
                ExampleOAuth2Scope:
                  $ref: '#/components/examples/ExampleOAuth2Scope'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerScopes
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
  /api/v1/authorizationServers/{authServerId}/scopes/{scopeId}:
    get:
      summary: Retrieve a custom token scope
      description: Retrieves a custom token scope
      operationId: getOAuth2Scope
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Scope'
              examples:
                ExampleOAuth2Scope:
                  $ref: '#/components/examples/ExampleOAuth2Scope'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.read
      tags:
        - AuthorizationServerScopes
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    put:
      summary: Replace a custom token scope
      description: Replaces a custom token scope
      operationId: replaceOAuth2Scope
      x-codegen-request-body-name: oAuth2Scope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2Scope'
            examples:
              UpdateOAuth2Scope:
                $ref: '#/components/examples/UpdateOAuth2ScopeRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuth2Scope'
              examples:
                UpdatedOAuth2Scope:
                  $ref: '#/components/examples/UpdatedOAuth2ScopeResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerScopes
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    delete:
      summary: Delete a custom token scope
      description: Deletes a custom token scope
      operationId: deleteOAuth2Scope
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.authorizationServers.manage
      tags:
        - AuthorizationServerScopes
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs:
          - API Access Management
    parameters:
      - $ref: '#/components/parameters/pathAuthServerId'
      - $ref: '#/components/parameters/pathScopeId'
components:
  schemas:
    AuthorizationServer:
      type: object
      properties:
        accessTokenEncryptedResponseAlgorithm:
          $ref: '#/components/schemas/KeyEncryptionAlgorithm'
        audiences:
          type: array
          description: >-
            The recipients that the tokens are intended for. This becomes the
            `aud` claim in an access token. Okta currently supports only one
            audience.
          items:
            type: string
        created:
          type: string
          format: date-time
          readOnly: true
        credentials:
          $ref: '#/components/schemas/AuthorizationServerCredentials'
        description:
          type: string
          description: The description of the custom authorization server
        id:
          type: string
          description: The ID of the custom authorization server
          readOnly: true
        issuer:
          type: string
          description: >-
            The complete URL for the custom authorization server. This becomes
            the `iss` claim in an access token.
        issuerMode:
          type: string
          description: >-
            Indicates which value is specified in the issuer of the tokens that
            a custom authorization server returns: the Okta org domain URL or a
            custom domain URL.


            `issuerMode` is visible if you have a custom URL domain configured
            or the Dynamic Issuer Mode feature enabled. If you have a custom URL
            domain configured, you can set a custom domain URL in a custom
            authorization server, and this property is returned in the
            appropriate responses.


            When set to `ORG_URL`, then in responses, `issuer` is the Okta org
            domain URL: `https://${yourOktaDomain}`.


            When set to `CUSTOM_URL`, then in responses, `issuer` is the custom
            domain URL configured in the administration user interface.


            When set to `DYNAMIC`, then in responses, `issuer` is the custom
            domain URL if the OAuth 2.0 request was sent to the custom domain,
            or is the Okta org's domain URL if the OAuth 2.0 request was sent to
            the original Okta org domain.


            After you configure a custom URL domain, all new custom
            authorization servers use `CUSTOM_URL` by default. If the Dynamic
            Issuer Mode feature is enabled, then all new custom authorization
            servers use `DYNAMIC` by default. All existing custom authorization
            servers continue to use the original value until they're changed
            using the Admin Console or the API. This way, existing integrations
            with the client and resource server continue to work after the
            feature is enabled.
        jwks:
          $ref: '#/components/schemas/ResourceServerJsonWebKeys'
        jwks_uri:
          description: >-
            <x-lifecycle-container><x-lifecycle
            class="ea"></x-lifecycle></x-lifecycle-container>URL string that
            references a JSON Web Key Set for encrypting JWTs minted by the
            custom authorization server
          type: string
          x-okta-lifecycle:
            lifecycle: EA
            isGenerallyAvailable: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          description: The name of the custom authorization server
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        _links:
          $ref: '#/components/schemas/AuthServerLinks'
    AssociatedServerMediated:
      type: object
      properties:
        trusted:
          type: array
          description: A list of the authorization server IDs
          items:
            type: string
    OAuth2Claim:
      type: object
      properties:
        alwaysIncludeInToken:
          type: boolean
          description: >-
            Specifies whether to include Claims in the token. The value is
            always `TRUE` for access token Claims. If the value is set to
            `FALSE` for an ID token claim, the Claim isn't included in the ID
            token when the token is requested with the access token or with the
            `authorization_code`. The client instead uses the access token to
            get Claims from the `/userinfo` endpoint.
        claimType:
          $ref: '#/components/schemas/OAuth2ClaimType'
        conditions:
          $ref: '#/components/schemas/OAuth2ClaimConditions'
        group_filter_type:
          $ref: '#/components/schemas/OAuth2ClaimGroupFilterType'
        id:
          type: string
          description: ID of the Claim
          readOnly: true
        name:
          type: string
          description: Name of the Claim
        status:
          $ref: '#/components/schemas/LifecycleStatus'
        system:
          description: When `true`, indicates that Okta created the Claim
          type: boolean
        value:
          description: >-
            Specifies the value of the Claim. This value must be a string
            literal if `valueType` is `GROUPS`, and the string literal is
            matched with the selected `group_filter_type`. The value must be an
            Okta EL expression if `valueType` is `EXPRESSION`.
          type: string
        valueType:
          $ref: '#/components/schemas/OAuth2ClaimValueType'
        _links:
          $ref: '#/components/schemas/LinksSelf'
    OAuth2Client:
      type: object
      properties:
        client_id:
          description: Unique key for the client application. The `client_id` is immutable.
          type: string
          readOnly: true
          example: 0oabskvc6442nkvQO0h7
        client_name:
          description: Human-readable string name of the client application
          type: string
          readOnly: true
          example: My App
        client_uri:
          type: string
          readOnly: true
          example: https://www.example.com
        logo_uri:
          description: >-
            URL string that references a logo for the client consent dialog (not
            the sign-in dialog)
          type: string
          readOnly: true
          example: https://www.example.com/logo.png
        _links:
          allOf:
            - $ref: '#/components/schemas/LinksSelf'
            - type: object
              properties:
                grants:
                  description: Link to the grant resources
                  allOf:
                    - $ref: '#/components/schemas/GrantResourcesHrefObject'
                tokens:
                  description: Link to the token resources
                  allOf:
                    - $ref: '#/components/schemas/TokenResourcesHrefObject'
    OAuth2RefreshToken:
      type: object
      properties:
        clientId:
          type: string
          description: Client ID
        created:
          $ref: '#/components/schemas/createdProperty'
        expiresAt:
          type: string
          description: Expiration time of the OAuth 2.0 Token
          format: date-time
          readOnly: true
        id:
          type: string
          description: ID of the Token object
          readOnly: true
          example: oar579Mcp7OUsNTlo0g3
        issuer:
          type: string
          description: The complete URL of the authorization server that issued the Token
          example: https://{yourOktaDomain}/oauth2/ausain6z9zIedDCxB0h7
        lastUpdated:
          $ref: '#/components/schemas/lastUpdatedProperty'
        scopes:
          type: array
          description: The scope names attached to the Token
          items:
            type: string
            example: offline_access
        status:
          $ref: '#/components/schemas/GrantOrTokenStatus'
        userId:
          type: string
          description: The ID of the user associated with the Token
          example: 00u5t60iloOHN9pBi0h7
        _embedded:
          type: object
          description: >-
            The embedded resources related to the object if the `expand` query
            parameter is specified
          properties:
            scopes:
              type: array
              description: The scope objects attached to the Token
              items:
                $ref: '#/components/schemas/OAuth2RefreshTokenScope'
          readOnly: true
        _links:
          allOf:
            - $ref: '#/components/schemas/LinksSelf'
            - type: object
              properties:
                app:
                  description: Link to the app resource
                  allOf:
                    - $ref: '#/components/schemas/AppResourceHrefObject'
                revoke:
                  description: Link to revoke the refresh Token
                  allOf:
                    - $ref: '#/components/schemas/RevokeRefreshTokenHrefObject'
                    - properties:
                        hints:
                          properties:
                            allow:
                              items:
                                enum:
                                  - DELETE
                                default: DELETE
                          type: object
                      type: object
                client:
                  description: Link to the client resource
                  allOf:
                    - $ref: '#/components/schemas/AppResourceHrefObject'
                user:
                  description: Link to the user resource
                  allOf:
                    - $ref: '#/components/schemas/UserResourceHrefObject'
                authorizationServer:
                  description: Link to the Token authorization server resource
                  allOf:
                    - $ref: >-
                        #/components/schemas/AuthorizationServerResourceHrefObject
    AuthorizationServerJsonWebKey:
      type: object
      properties:
        alg:
          description: 'The algorithm used with the Key. Valid value: `RS256`'
          type: string
        e:
          description: RSA key value (public exponent) for Key binding
          type: string
          readOnly: true
        kid:
          description: Unique identifier for the key
          type: string
          readOnly: true
        kty:
          description: >-
            Cryptographic algorithm family for the certificate's keypair. Valid
            value: `RSA`
          type: string
          readOnly: true
        'n':
          description: >-
            RSA modulus value that is used by both the public and private keys
            and provides a link between them
          type: string
        status:
          description: >-
            An `ACTIVE` Key is used to sign tokens issued by the authorization
            server. Supported values: `ACTIVE`, `NEXT`, or `EXPIRED`<br>

            A `NEXT` Key is the next Key that the authorization server uses to
            sign tokens when Keys are rotated. The `NEXT` Key might not be
            listed if it hasn't been generated.

            An `EXPIRED` Key is the previous Key that the authorization server
            used to sign tokens. The `EXPIRED` Key might not be listed if no Key
            has expired or the expired Key was deleted.
          type: string
        use:
          description: 'Acceptable use of the key. Valid value: `sig`'
          type: string
          readOnly: true
        _links:
          $ref: '#/components/schemas/LinksSelf'
    JwkUse:
      type: object
      properties:
        use:
          $ref: '#/components/schemas/JwkUseType'
    Error:
      title: Error
      type: object
      properties:
        errorCauses:
          type: array
          items:
            $ref: '#/components/schemas/ErrorCause'
        errorCode:
          type: string
          description: An Okta code for this type of error
        errorId:
          type: string
          description: >-
            A unique identifier for this error. This can be used by Okta Support
            to help with troubleshooting.
        errorLink:
          type: string
          description: An Okta code for this type of error
        errorSummary:
          type: string
          description: >-
            A short description of what caused this error. Sometimes this
            contains dynamically-generated information about your specific
            error.
    AuthorizationServerPolicy:
      allOf:
        - type: object
          properties:
            id:
              type: string
              description: ID of the Policy
            type:
              type: string
              description: Indicates that the Policy is an authorization server Policy
              enum:
                - OAUTH_AUTHORIZATION_POLICY
            name:
              type: string
              description: Name of the Policy
              maxLength: 100
              minLength: 1
            conditions:
              $ref: '#/components/schemas/AuthorizationServerPolicyConditions'
            description:
              type: string
              description: Description of the Policy
              maxLength: 255
              minLength: 1
            priority:
              type: integer
              description: >-
                Specifies the order in which this Policy is evaluated in
                relation to the other Policies in a custom authorization server
            status:
              type: string
              description: Specifies whether requests have access to this Policy
              enum:
                - ACTIVE
                - INACTIVE
            system:
              type: boolean
              description: Specifies whether Okta created this Policy
            created:
              type: string
              format: date-time
              readOnly: true
              description: Timestamp when the Policy was created
            lastUpdated:
              type: string
              format: date-time
              readOnly: true
              description: Timestamp when the Policy was last updated
            _links:
              allOf:
                - $ref: '#/components/schemas/LinksSelfAndLifecycle'
                - type: object
                  properties:
                    rules:
                      allOf:
                        - description: Link to the authorization server policy's rules
                        - $ref: '#/components/schemas/HrefObject'
    AuthorizationServerPolicyRule:
      type: object
      properties:
        actions:
          $ref: '#/components/schemas/AuthorizationServerPolicyRuleActions'
        conditions:
          $ref: '#/components/schemas/AuthorizationServerPolicyRuleConditions'
        created:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the rule was created
        id:
          type: string
          description: Identifier of the rule
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the rule was last modified
        name:
          type: string
          description: Name of the rule
        priority:
          type: integer
          description: Priority of the rule
        status:
          type: string
          description: Status of the rule
          enum:
            - ACTIVE
            - INACTIVE
        system:
          type: boolean
          description: Set to `true` for system rules. You can't delete system rules.
        type:
          type: string
          description: Rule type
          enum:
            - RESOURCE_ACCESS
        _links:
          allOf:
            - $ref: '#/components/schemas/LinksSelfAndLifecycle'
    AuthorizationServerPolicyRuleRequest:
      allOf:
        - $ref: '#/components/schemas/AuthorizationServerPolicyRule'
        - type: object
          required:
            - name
            - conditions
            - type
    OAuth2ResourceServerJsonWebKey:
      type: object
      properties:
        created:
          type: string
          description: Timestamp when the JSON Web Key was created
          example: '2023-02-21T20:08:24.000Z'
          readOnly: true
          nullable: false
        e:
          type: string
          description: RSA key value (exponent) for key binding
          example: AQAB
          nullable: false
        id:
          type: string
          description: The unique ID of the JSON Web Key
          example: apk2f4zrZbs8nUa7p0g4
          readOnly: true
          nullable: false
        kid:
          type: string
          description: >-
            Unique identifier of the JSON Web Key in the Custom Authorization
            Server's Public JWKS
          example: SIMcCQNY3uwXoW3y0vf6VxiBb5n9pf8L2fK8d-FIbm4
          nullable: true
        kty:
          type: string
          description: Cryptographic algorithm family for the certificate's key pair
          example: RSA
          nullable: false
        lastUpdated:
          type: string
          description: Timestamp when the JSON Web Key was updated
          example: '2023-02-21T20:08:24.000Z'
          readOnly: true
          nullable: false
        'n':
          type: string
          description: RSA key value (modulus) for key binding
          example: >-
            mkC6yAJVvFwUlmM9gKjb2d-YK5qHFt-mXSsbjWKKs4EfNm-BoQeeovBZtSACyaqLc8IYFTPEURFcbDQ9DkAL04uUIRD2gaHYY7uK0jsluEaXGq2RAIsmzAwNTzkiDw4q9pDL_q7n0f_SDt1TsMaMQayB6bU5jWsmqcWJ8MCRJ1aJMjZ16un5UVx51IIeCbe4QRDxEXGAvYNczsBoZxspDt28esSpq5W0dBFxcyGVudyl54Er3FzAguhgfMVjH-bUec9j2Tl40qDTktrYgYfxz9pfjm01Hl4WYP1YQxeETpSL7cQ5Ihz4jGDtHUEOcZ4GfJrPzrGpUrak8Qp5xcwCqQ
          nullable: false
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
          description: >-
            The status of the encryption key. You can use only an `ACTIVE` key
            to encrypt tokens issued by the authorization server.
          example: ACTIVE
          nullable: false
          default: ACTIVE
        use:
          type: string
          description: Acceptable use of the JSON Web Key
          example: enc
          nullable: false
        _links:
          $ref: '#/components/schemas/OAuthResourceServerKeyLinks'
          readOnly: true
          nullable: false
    OAuth2ResourceServerJsonWebKeyRequestBody:
      type: object
      properties:
        e:
          type: string
          description: RSA key value (exponent) for key binding
          example: AQAB
          nullable: false
        kid:
          type: string
          description: >-
            Unique identifier of the JSON web key in the custom authorization
            server's public JWKS
          example: SIMcCQNY3uwXoW3y0vf6VxiBb5n9pf8L2fK8d-FIbm4
          nullable: true
        kty:
          type: string
          description: Cryptographic algorithm family for the certificate's key pair
          example: RSA
          nullable: false
        'n':
          type: string
          description: RSA key value (modulus) for key binding
          example: >-
            mkC6yAJVvFwUlmM9gKjb2d-YK5qHFt-mXSsbjWKKs4EfNm-BoQeeovBZtSACyaqLc8IYFTPEURFcbDQ9DkAL04uUIRD2gaHYY7uK0jsluEaXGq2RAIsmzAwNTzkiDw4q9pDL_q7n0f_SDt1TsMaMQayB6bU5jWsmqcWJ8MCRJ1aJMjZ16un5UVx51IIeCbe4QRDxEXGAvYNczsBoZxspDt28esSpq5W0dBFxcyGVudyl54Er3FzAguhgfMVjH-bUec9j2Tl40qDTktrYgYfxz9pfjm01Hl4WYP1YQxeETpSL7cQ5Ihz4jGDtHUEOcZ4GfJrPzrGpUrak8Qp5xcwCqQ
          nullable: false
        status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
          description: Status of the JSON Web Key
          example: ACTIVE
        use:
          type: string
          description: Acceptable use of the JSON Web Key
          example: enc
          nullable: false
    OAuth2Scope:
      type: object
      properties:
        consent:
          $ref: '#/components/schemas/OAuth2ScopeConsentType'
        default:
          type: boolean
          description: Indicates if this Scope is a default scope
          default: false
        description:
          type: string
          description: Description of the Scope
        displayName:
          type: string
          description: Name of the end user displayed in a consent dialog
        id:
          type: string
          description: Scope object ID
          readOnly: true
        metadataPublish:
          $ref: '#/components/schemas/OAuth2ScopeMetadataPublish'
        name:
          type: string
          description: Scope name
        optional:
          type: boolean
          description: >-
            Indicates whether the Scope is optional. When set to `true`, the
            user can skip consent for the scope.
          default: false
        system:
          type: boolean
          description: Indicates if Okta created the Scope
          default: false
        _links:
          $ref: '#/components/schemas/LinksSelf'
      required:
        - name
    KeyEncryptionAlgorithm:
      description: >-
        <x-lifecycle-container><x-lifecycle
        class="ea"></x-lifecycle></x-lifecycle-container>The algorithm for
        encrypting access tokens issued by this authorization server. If this is
        requested, the response is signed, and then encrypted. The result is a
        nested JWT. The default, if omitted, is that no encryption is performed.
      x-okta-lifecycle:
        lifecycle: EA
        isGenerallyAvailable: true
      type: string
      enum:
        - RSA-OAEP-256
        - RSA-OAEP-384
        - RSA-OAEP-512
    AuthorizationServerCredentials:
      type: object
      properties:
        signing:
          $ref: '#/components/schemas/AuthorizationServerCredentialsSigningConfig'
    ResourceServerJsonWebKeys:
      description: >-
        <x-lifecycle-container><x-lifecycle
        class="ea"></x-lifecycle></x-lifecycle-container>A [JSON Web Key
        Set](https://tools.ietf.org/html/rfc7517#section-5) for encrypting JWTs
        minted by the custom authorization server
      x-okta-lifecycle:
        lifecycle: EA
        isGenerallyAvailable: true
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/ResourceServerJsonWebKey'
    LifecycleStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    AuthServerLinks:
      allOf:
        - $ref: '#/components/schemas/LinksSelf'
        - type: object
          properties:
            claims:
              allOf:
                - description: Link to the authorization server claims
                - $ref: '#/components/schemas/HrefObject'
            deactivate:
              allOf:
                - $ref: '#/components/schemas/HrefObjectDeactivateLink'
            metadata:
              description: Link to the authorization server metadata
              type: array
              items:
                $ref: '#/components/schemas/HrefObject'
            policies:
              allOf:
                - description: Link to the authorization server policies
                - $ref: '#/components/schemas/HrefObject'
            rotateKey:
              allOf:
                - description: Link to the authorization server key rotation
                - $ref: '#/components/schemas/HrefObject'
            scopes:
              allOf:
                - description: Link to the authorization server scopes
                - $ref: '#/components/schemas/HrefObject'
    OAuth2ClaimType:
      description: >-
        Specifies whether the Claim is for an access token (`RESOURCE`) or an ID
        token (`IDENTITY`)
      type: string
      enum:
        - IDENTITY
        - RESOURCE
    OAuth2ClaimConditions:
      description: Specifies the scopes for the Claim
      type: object
      properties:
        scopes:
          type: array
          items:
            type: string
    OAuth2ClaimGroupFilterType:
      description: >-
        Specifies the type of group filter if `valueType` is `GROUPS`


        If `valueType` is `GROUPS`, then the groups returned are filtered
        according to the value of `group_filter_type`.


        If you have complex filters for Groups, you can [create a Groups
        allowlist](https://developer.okta.com/docs/guides/customize-tokens-groups-claim/main/)
        to put them all in a Claim.
      type: string
      enum:
        - CONTAINS
        - EQUALS
        - REGEX
        - STARTS_WITH
      x-enumDescriptions:
        STARTS_WITH: >-
          Group names start with `value` (not case-sensitive). For example, if
          `value` is `group1`, then `group123` and `Group123` are included.
        EQUALS: >-
          Group name is the same as `value` (not case-sensitive). For example,
          if `value` is `group1`, then `group1` and `Group1` are included, but
          `group123` isn't.
        CONTAINS: >-
          Group names contain `value` (not case-sensitive). For example, if
          `value` is `group1`, then `MyGroup123` and `group1` are included.
        REGEX: >-
          Group names match the regular expression in `value` (case-sensitive).
          For example if `value` is `/^[a-z0-9_-]{3,16}$/`, then any Group name
          that has at least three letters, no more than 16, and contains
          lowercase letters, a hyphen, or numbers is a match.
    OAuth2ClaimValueType:
      description: >-
        Specifies whether the Claim is an Okta Expression Language (EL)
        expression (`EXPRESSION`), a set of groups (`GROUPS`), or a system claim
        (`SYSTEM`)
      type: string
      enum:
        - EXPRESSION
        - GROUPS
        - SYSTEM
    LinksSelf:
      description: >-
        Specifies link relations (see [Web
        Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the
        [JSON Hypertext Application
        Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06)
        specification. This object is used for dynamic discovery of related
        resources and lifecycle operations.
      type: object
      properties:
        self:
          $ref: '#/components/schemas/HrefObjectSelfLink'
      readOnly: true
    GrantResourcesHrefObject:
      type: object
      properties:
        href:
          type: string
          description: Link URI
          example: >-
            https://{yourOktaDomain}/api/v1/users/00u5t60iloOHN9pBi0h7/clients/0oabskvc6442nkvQO0h7/grants
    TokenResourcesHrefObject:
      type: object
      properties:
        href:
          type: string
          description: Link URI
          example: >-
            https://{yourOktaDomain}/api/v1/users/00u5t60iloOHN9pBi0h7/clients/0oabskvc6442nkvQO0h7/tokens
    createdProperty:
      description: Timestamp when the object was created
      format: date-time
      example: '2017-03-28T01:11:10.000Z'
      type: string
      readOnly: true
    lastUpdatedProperty:
      format: date-time
      description: Timestamp when the object was last updated
      type: string
      readOnly: true
    GrantOrTokenStatus:
      description: Status
      example: ACTIVE
      type: string
      enum:
        - ACTIVE
        - REVOKED
      readOnly: true
    OAuth2RefreshTokenScope:
      type: object
      properties:
        description:
          type: string
          description: Description of the Scope
          example: >-
            Requests a refresh token by default, used to obtain more access
            tokens without re-prompting the user for authentication
        displayName:
          type: string
          description: Name of the end user displayed in a consent dialog
        id:
          type: string
          description: Scope object ID
          readOnly: true
          example: scppb56cIl4GvGxy70g3
        name:
          type: string
          description: Scope name
          example: offline_access
        _links:
          description: >-
            Specifies link relations (see [Web
            Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the
            current status of an application using the [JSON Hypertext
            Application
            Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06)
            specification. This object is used for dynamic discovery of related
            resources and lifecycle operations.
          type: object
          properties:
            scope:
              description: Link to Scope resource
              allOf:
                - $ref: '#/components/schemas/OfflineAccessScopeResourceHrefObject'
    AppResourceHrefObject:
      type: object
      properties:
        href:
          type: string
          description: Link URI
          example: https://{yourOktaDomain}/api/v1/apps/0oabskvc6442nkvQO0h7
        title:
          type: string
          description: Link name
          example: My App
    RevokeRefreshTokenHrefObject:
      type: object
      properties:
        href:
          type: string
          description: Link URI
          example: >-
            https://{yourOktaDomain}/api/v1/users/00u5t60iloOHN9pBi0h7/clients/0oabskvc6442nkvQO0h7/tokens/oar579Mcp7OUsNTlo0g3
    UserResourceHrefObject:
      type: object
      properties:
        href:
          type: string
          description: Link URI
          example: https://{yourOktaDomain}/api/v1/users/00u5t60iloOHN9pBi0h7
        title:
          type: string
          description: Link name
          example: SAML Jackson
    AuthorizationServerResourceHrefObject:
      type: object
      properties:
        href:
          type: string
          description: Link URI
          example: >-
            https://{yourOktaDomain}/api/v1/authorizationServers/ausain6z9zIedDCxB0h7
        title:
          type: string
          description: Link name
          example: Example Authorization Server
    JwkUseType:
      description: Purpose of the certificate. The only supported value is `sig`.
      type: string
      enum:
        - sig
    ErrorCause:
      type: object
      properties:
        errorSummary:
          type: string
    AuthorizationServerPolicyConditions:
      type: object
      properties:
        clients:
          $ref: '#/components/schemas/ClientPolicyCondition'
    LinksSelfAndLifecycle:
      allOf:
        - $ref: '#/components/schemas/LinksSelf'
        - type: object
          properties:
            activate:
              $ref: '#/components/schemas/HrefObjectActivateLink'
            deactivate:
              $ref: '#/components/schemas/HrefObjectDeactivateLink'
    HrefObject:
      title: Link Object
      additionalProperties: true
      type: object
      properties:
        hints:
          $ref: '#/components/schemas/HrefHints'
          readOnly: true
        href:
          type: string
          description: Link URI
        name:
          type: string
          description: Link name
          readOnly: true
        templated:
          type: boolean
          description: >-
            Indicates whether the link object's `href` property is a URI
            template.
          readOnly: true
        type:
          type: string
          description: >-
            The media type of the link. If omitted, it is implicitly
            `application/json`.
          readOnly: true
      required:
        - href
    AuthorizationServerPolicyRuleActions:
      allOf:
        - $ref: '#/components/schemas/PolicyRuleActions'
        - type: object
          properties:
            token:
              $ref: '#/components/schemas/TokenAuthorizationServerPolicyRuleAction'
    AuthorizationServerPolicyRuleConditions:
      type: object
      properties:
        grantTypes:
          $ref: '#/components/schemas/GrantTypePolicyRuleCondition'
        people:
          $ref: '#/components/schemas/AuthorizationServerPolicyPeopleCondition'
        scopes:
          $ref: '#/components/schemas/OAuth2ScopesMediationPolicyRuleCondition'
    OAuthResourceServerKeyLinks:
      description: >-
        Specifies link relations (see [Web
        Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the
        current status of a JSON Web Key using the [JSON Hypertext Application
        Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06)
        specification. This object is used for dynamic discovery of related
        resources and lifecycle operations.
      properties:
        activate:
          $ref: '#/components/schemas/HrefObjectActivateLink'
        delete:
          $ref: '#/components/schemas/HrefObjectDeleteLink'
      readOnly: true
      type: object
    OAuth2ScopeConsentType:
      description: Indicates whether a consent dialog is needed for the Scope
      default: IMPLICIT
      type: string
      enum:
        - FLEXIBLE
        - IMPLICIT
        - REQUIRED
    OAuth2ScopeMetadataPublish:
      description: Indicates whether the Scope is included in the metadata
      default: NO_CLIENTS
      type: string
      enum:
        - ALL_CLIENTS
        - NO_CLIENTS
    AuthorizationServerCredentialsSigningConfig:
      type: object
      properties:
        kid:
          type: string
          description: >-
            The ID of the JSON Web Key used for signing tokens issued by the
            authorization server
          readOnly: true
        lastRotated:
          type: string
          description: >-
            The timestamp when the authorization server started using the `kid`
            for signing tokens
          format: date-time
          readOnly: true
        nextRotation:
          type: string
          description: >-
            The timestamp when the authorization server changes the Key for
            signing tokens. This is only returned when `rotationMode` is set to
            `AUTO`.
          format: date-time
          readOnly: true
        rotationMode:
          $ref: '#/components/schemas/AuthorizationServerCredentialsRotationMode'
        use:
          $ref: '#/components/schemas/AuthorizationServerCredentialsUse'
    ResourceServerJsonWebKey:
      description: >-
        A [JSON Web Key (JWK)](https://tools.ietf.org/html/rfc7517) is a JSON
        representation of a cryptographic key. Okta can use the active key to
        encrypt the access token minted by the authorization server. Okta
        supports only RSA keys with 'use: enc'.
      type: object
      properties:
        e:
          type: string
          description: The key exponent of a RSA key
        kid:
          type: string
          description: The unique identifier of the key
        kty:
          $ref: '#/components/schemas/JsonWebKeyType'
        'n':
          type: string
          description: The modulus of the RSA key
        status:
          $ref: '#/components/schemas/JsonWebKeyStatus'
        use:
          $ref: '#/components/schemas/JsonWebKeyUse'
    HrefObjectDeactivateLink:
      allOf:
        - $ref: '#/components/schemas/HrefObject'
        - description: Link to deactivate the resource
    HrefObjectSelfLink:
      allOf:
        - $ref: '#/components/schemas/HrefObject'
        - description: Link to the resource (self)
    OfflineAccessScopeResourceHrefObject:
      type: object
      properties:
        href:
          type: string
          description: Link URI
          example: >-
            https://{yourOktaDomain}/api/v1/authorizationServers/ausain6z9zIedDCxB0h7/scopes/scppb56cIl4GvGxy70g3
        title:
          type: string
          description: Link name
          example: offline_access
    ClientPolicyCondition:
      description: Specifies which clients are included in the Policy
      type: object
      properties:
        include:
          type: array
          description: Which clients are included in the Policy
          items:
            type: string
    HrefObjectActivateLink:
      allOf:
        - $ref: '#/components/schemas/HrefObject'
        - description: Link to activate the resource
    HrefHints:
      description: Describes allowed HTTP verbs for the `href`
      type: object
      properties:
        allow:
          type: array
          items:
            $ref: '#/components/schemas/HttpMethod'
    PolicyRuleActions:
      type: object
    TokenAuthorizationServerPolicyRuleAction:
      type: object
      properties:
        accessTokenLifetimeMinutes:
          type: integer
          description: >-
            Lifetime of the access token in minutes. The minimum is five
            minutes. The maximum is one day.
        inlineHook:
          $ref: >-
            #/components/schemas/TokenAuthorizationServerPolicyRuleActionInlineHook
        refreshTokenLifetimeMinutes:
          type: integer
          description: Lifetime of the refresh token is the minimum access token lifetime.
        refreshTokenWindowMinutes:
          type: integer
          description: >-
            Timeframe when the refresh token is valid. The minimum is 10
            minutes. The maximum is five years (2,628,000 minutes).
    GrantTypePolicyRuleCondition:
      description: >-
        Array of grant types that this condition includes. Determines the
        mechanism that Okta uses to authorize the creation of the tokens.
      type: object
      properties:
        include:
          type: array
          description: Array of grant types that this condition includes.
          items:
            type: string
    AuthorizationServerPolicyPeopleCondition:
      description: Identifies Users and Groups that are used together
      type: object
      properties:
        groups:
          $ref: '#/components/schemas/AuthorizationServerPolicyRuleGroupCondition'
        users:
          $ref: '#/components/schemas/AuthorizationServerPolicyRuleUserCondition'
    OAuth2ScopesMediationPolicyRuleCondition:
      description: Array of scopes that the condition includes
      type: object
      properties:
        include:
          type: array
          items:
            type: string
    HrefObjectDeleteLink:
      allOf:
        - $ref: '#/components/schemas/HrefObject'
        - description: Link to delete the resource
    AuthorizationServerCredentialsRotationMode:
      description: The Key rotation mode for the authorization server
      type: string
      enum:
        - AUTO
        - MANUAL
    AuthorizationServerCredentialsUse:
      description: How the key is used
      type: string
      enum:
        - sig
    JsonWebKeyType:
      description: The type of public key
      type: string
      enum:
        - RSA
    JsonWebKeyStatus:
      description: The status of the public key
      type: string
      enum:
        - ACTIVE
        - INACTIVE
    JsonWebKeyUse:
      description: The intended use of the public key
      type: string
      enum:
        - enc
    HttpMethod:
      type: string
      enum:
        - DELETE
        - GET
        - POST
        - PUT
    TokenAuthorizationServerPolicyRuleActionInlineHook:
      type: object
      properties:
        id:
          type: string
          readOnly: false
    AuthorizationServerPolicyRuleGroupCondition:
      description: Specifies a set of Groups whose Users are to be included
      type: object
      properties:
        include:
          type: array
          description: Groups to be included
          items:
            type: string
    AuthorizationServerPolicyRuleUserCondition:
      description: Specifies a set of Users to be included
      type: object
      properties:
        include:
          description: Users to be included
          type: array
          items:
            type: string
  responses:
    ErrorAccessDenied403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            AccessDenied:
              $ref: '#/components/examples/ErrorAccessDenied'
    ErrorTooManyRequests429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            TooManyRequests:
              $ref: '#/components/examples/ErrorTooManyRequests'
    ErrorApiValidationFailed400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            APIValidationFailed:
              $ref: '#/components/examples/ErrorApiValidationFailed'
    ErrorResourceNotFound404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            ResourceNotFound:
              $ref: '#/components/examples/ErrorResourceNotFound'
    ErrorInvalidToken401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            InvalidTokenProvided:
              $ref: '#/components/examples/ErrorInvalidTokenProvided'
  parameters:
    pathAuthServerId:
      name: authServerId
      description: '`id` of the Authorization Server'
      in: path
      required: true
      schema:
        type: string
        example: GeGRTEr7f3yu2n7grw22
    pathAssociatedServerId:
      name: associatedServerId
      description: '`id` of the associated Authorization Server'
      in: path
      required: true
      schema:
        type: string
        example: aus6xt9jKPmCyn6kg0g4
    pathClaimId:
      name: claimId
      description: '`id` of Claim'
      in: path
      required: true
      schema:
        type: string
        example: hNJ3Uk76xLagWkGx5W3N
    pathClientId:
      name: clientId
      description: Client app ID
      in: path
      required: true
      schema:
        type: string
        example: 52Uy4BUWVBOjFItcg2jWsmnd83Ad8dD
    pathTokenId:
      name: tokenId
      description: '`id` of Token'
      in: path
      required: true
      schema:
        type: string
        example: sHHSth53yJAyNSTQKDJZ
    pathCredentialKeyId:
      name: keyId
      description: '`id` of the certificate key'
      in: path
      required: true
      schema:
        type: string
        example: P7jXpG-LG2ObNgY9C0Mn2uf4InCQTmRZMDCZoVNxdrk
    pathPolicyId:
      name: policyId
      description: '`id` of the Policy'
      in: path
      required: true
      schema:
        type: string
        example: 00plrilJ7jZ66Gn0X0g3
    pathRuleId:
      name: ruleId
      description: '`id` of the policy rule'
      in: path
      required: true
      schema:
        type: string
        example: ruld3hJ7jZh4fn0st0g3
    pathJsonWebKeyId:
      name: keyId
      in: path
      schema:
        type: string
      required: true
      description: Unique `id` of the Custom Authorization Server JSON Web Key
      example: apk2f4zrZbs8nUa7p0g4
    pathScopeId:
      name: scopeId
      description: '`id` of Scope'
      in: path
      required: true
      schema:
        type: string
        example: 0TMRpCWXRKFjP7HiPFNM
  examples:
    ListAuthServersResponse:
      summary: List all custom authorization servers in your org
      value:
        - id: '{authorizationServerId}'
          name: Sample Authorization Server
          description: Sample Authorization Server description
          audiences:
            - https://api.resource.com
          issuer: https://{yourOktaDomain}/oauth2/{authorizationServerId}
          issuerMode: ORG_URL
          status: ACTIVE
          created: '2023-05-17T22:25:57.000Z'
          lastUpdated: '2023-05-17T22:25:57.000Z'
          credentials:
            signing:
              rotationMode: AUTO
              lastRotated: '2023-05-17T22:25:57.000Z'
              nextRotation: '2023-08-15T22:25:57.000Z'
              kid: WYQxoK4XAwGFn5Zw5AzLxFvqEKLP79BbsKmWeuc5TB4
          _links:
            scopes:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/scopes
              hints:
                allow:
                  - GET
            claims:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/claims
              hints:
                allow:
                  - GET
            policies:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/policies
              hints:
                allow:
                  - GET
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}
              hints:
                allow:
                  - GET
                  - DELETE
                  - PUT
            metadata:
              - name: oauth-authorization-server
                href: >-
                  https://{yourOktaDomain}/oauth2/{authorizationServerId}/.well-known/oauth-authorization-server
                hints:
                  allow:
                    - GET
              - name: openid-configuration
                href: >-
                  https://{yourOktaDomain}/oauth2/{authorizationServerId}/.well-known/openid-configuration
                hints:
                  allow:
                    - GET
            rotateKey:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/credentials/lifecycle/keyRotate
              hints:
                allow:
                  - POST
            deactivate:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/lifecycle/deactivate
              hints:
                allow:
                  - POST
    CreateAuthServerBody:
      summary: Create a custom authorization server
      value:
        name: Sample Authorization Server
        description: Sample Authorization Server description
        audiences:
          - api://default
    CreateAuthServerWithAccessTokenEncryptionBody:
      summary: >-
        Create a custom authorization server with access token encryption
        enabled
      value:
        name: Sample Authorization Server
        description: Sample authorization server description
        audiences:
          - api://default
        accessTokenEncryptedResponseAlgorithm: RSA-OAEP-256
        jwks:
          keys:
            - kty: RSA
              id: apk2g3sd6bqV5YZxu0h8
              status: ACTIVE
              kid: encKey
              use: enc
              e: AQAB
              'n': >-
                iHYyA5KXL82veBfNP81D7Q1GMRWIixNTu5jY03Z19DN7qTg1xYPRyPEPuMJ5Xjdhrm3dJdW7p1woRa6CHfw8FS7aosXUZkplxPs0NICP32nCkwpX3U3CltgVWrpMEUrd-JljKm0AgrervZuLkgBEfwY3BXP_SCKjF0JtbQjcK9MOKFNUUUK3_xTrFcyZThlSOtiOmhjDHTfHzeG2Q0NG2Opom1kfKWLDUVy5qrzYJWgcCaPOyEE1xnk4u5syH_8APOi2tKwKBCgS_D-kXzZ_379VhVuEpo2CGBU20t9Ys_m8KLqMCOyJaoQ3R1r6cWHfnYSab31L1my3rLwuippXkQ
    CreateAuthServerResponse:
      summary: Create a custom authorization server
      value:
        id: '{authorizationServerId}'
        name: Sample Authorization Server
        description: Sample Authorization Server description
        audiences:
          - https://api.resource.com
        issuer: https://{yourOktaDomain}/oauth2/{authorizationServerId}
        issuerMode: ORG_URL
        status: ACTIVE
        created: '2023-05-17T22:25:57.000Z'
        lastUpdated: '2023-05-17T22:25:57.000Z'
        credentials:
          signing:
            rotationMode: AUTO
            lastRotated: '2023-05-17T22:25:57.000Z'
            nextRotation: '2023-08-15T22:25:57.000Z'
            kid: WYQxoK4XAwGFn5Zw5AzLxFvqEKLP79BbsKmWeuc5TB4
        _links:
          scopes:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/scopes
            hints:
              allow:
                - GET
          claims:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/claims
            hints:
              allow:
                - GET
          policies:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/policies
            hints:
              allow:
                - GET
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}
            hints:
              allow:
                - GET
                - DELETE
                - PUT
          metadata:
            - name: oauth-authorization-server
              href: >-
                https://{yourOktaDomain}/oauth2/{authorizationServerId}/.well-known/oauth-authorization-server
              hints:
                allow:
                  - GET
            - name: openid-configuration
              href: >-
                https://{yourOktaDomain}/oauth2/{authorizationServerId}/.well-known/openid-configuration
              hints:
                allow:
                  - GET
          rotateKey:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/credentials/lifecycle/keyRotate
            hints:
              allow:
                - POST
          deactivate:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/lifecycle/deactivate
            hints:
              allow:
                - POST
    CreateAuthServerWithAccessTokenEncryptionResponse:
      summary: >-
        Create a custom authorization server with access token encryption
        enabled
      value:
        id: '{authorizationServerId}'
        name: Sample Authorization Server
        description: Sample authorization server description
        audiences:
          - https://api.resource.com
        issuer: https://{yourOktaDomain}/oauth2/{authorizationServerId}
        issuerMode: ORG_URL
        status: ACTIVE
        created: '2023-05-17T22:25:57.000Z'
        lastUpdated: '2023-05-17T22:25:57.000Z'
        credentials:
          signing:
            rotationMode: AUTO
            lastRotated: '2023-05-17T22:25:57.000Z'
            nextRotation: '2023-08-15T22:25:57.000Z'
            kid: WYQxoK4XAwGFn5Zw5AzLxFvqEKLP79BbsKmWeuc5TB4
        accessTokenEncryptedResponseAlgorithm: RSA-OAEP-256
        jwks:
          keys:
            - kty: RSA
              id: apk2g3sd6bqV5YZxu0h8
              status: ACTIVE
              kid: encKey
              use: enc
              e: AQAB
              'n': >-
                iHYyA5KXL82veBfNP81D7Q1GMRWIixNTu5jY03Z19DN7qTg1xYPRyPEPuMJ5Xjdhrm3dJdW7p1woRa6CHfw8FS7aosXUZkplxPs0NICP32nCkwpX3U3CltgVWrpMEUrd-JljKm0AgrervZuLkgBEfwY3BXP_SCKjF0JtbQjcK9MOKFNUUUK3_xTrFcyZThlSOtiOmhjDHTfHzeG2Q0NG2Opom1kfKWLDUVy5qrzYJWgcCaPOyEE1xnk4u5syH_8APOi2tKwKBCgS_D-kXzZ_379VhVuEpo2CGBU20t9Ys_m8KLqMCOyJaoQ3R1r6cWHfnYSab31L1my3rLwuippXkQ
        _links:
          scopes:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/scopes
            hints:
              allow:
                - GET
          claims:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/claims
            hints:
              allow:
                - GET
          policies:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/policies
            hints:
              allow:
                - GET
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}
            hints:
              allow:
                - GET
                - DELETE
                - PUT
          metadata:
            - name: oauth-authorization-server
              href: >-
                https://{yourOktaDomain}/oauth2/{authorizationServerId}/.well-known/oauth-authorization-server
              hints:
                allow:
                  - GET
            - name: openid-configuration
              href: >-
                https://{yourOktaDomain}/oauth2/{authorizationServerId}/.well-known/openid-configuration
              hints:
                allow:
                  - GET
          rotateKey:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/credentials/lifecycle/keyRotate
            hints:
              allow:
                - POST
          deactivate:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/lifecycle/deactivate
            hints:
              allow:
                - POST
    RetrieveAuthServerResponse:
      summary: Retrieve a custom authorization server
      value:
        id: '{authorizationServerId}'
        name: Sample Authorization Server
        description: Sample Authorization Server description
        audiences:
          - https://api.resource.com
        issuer: https://{yourOktaDomain}/oauth2/{authorizationServerId}
        issuerMode: ORG_URL
        status: ACTIVE
        created: '2023-05-17T22:25:57.000Z'
        lastUpdated: '2023-05-17T22:25:57.000Z'
        credentials:
          signing:
            rotationMode: AUTO
            lastRotated: '2023-05-17T22:25:57.000Z'
            nextRotation: '2023-08-15T22:25:57.000Z'
            kid: WYQxoK4XAwGFn5Zw5AzLxFvqEKLP79BbsKmWeuc5TB4
        _links:
          scopes:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/scopes
            hints:
              allow:
                - GET
          claims:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/claims
            hints:
              allow:
                - GET
          policies:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/policies
            hints:
              allow:
                - GET
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}
            hints:
              allow:
                - GET
                - DELETE
                - PUT
          metadata:
            - name: oauth-authorization-server
              href: >-
                https://{yourOktaDomain}/oauth2/{authorizationServerId}/.well-known/oauth-authorization-server
              hints:
                allow:
                  - GET
            - name: openid-configuration
              href: >-
                https://{yourOktaDomain}/oauth2/{authorizationServerId}/.well-known/openid-configuration
              hints:
                allow:
                  - GET
          rotateKey:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/credentials/lifecycle/keyRotate
            hints:
              allow:
                - POST
          deactivate:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/lifecycle/deactivate
            hints:
              allow:
                - POST
    ReplaceAuthServerBody:
      summary: Replace a custom authorization server
      value:
        name: New Authorization Server
        description: Authorization Server description
        audiences:
          - api://default
        credentials:
          signing:
            rotationMode: AUTO
            use: sig
        issuer: https://{yourOktaDomain}/oauth2/{authorizationServerId}
        issuerMode: ORG_URL
        status: ACTIVE
    ReplaceAuthServerEnableTokenEncryptionBody:
      summary: Rotate the active encryption key for access token encryption
      value:
        name: New Authorization Server
        description: Authorization server description
        audiences:
          - api://default
        credentials:
          signing:
            rotationMode: AUTO
            use: sig
        issuer: https://{yourOktaDomain}/oauth2/{authorizationServerId}
        issuerMode: ORG_URL
        status: ACTIVE
        accessTokenEncryptedResponseAlgorithm: RSA-OAEP-256
        jwks:
          keys:
            - kty: RSA
              id: apk2g3sd6bqV5YZxu0h8
              status: ACTIVE
              kid: encKey1
              use: enc
              e: AQAB
              'n': >-
                iHYyA5KXL82veBfNP81D7Q1GMRWIixNTu5jY03Z19DN7qTg1xYPRyPEPuMJ5Xjdhrm3dJdW7p1woRa6CHfw8FS7aosXUZkplxPs0NICP32nCkwpX3U3CltgVWrpMEUrd-JljKm0AgrervZuLkgBEfwY3BXP_SCKjF0JtbQjcK9MOKFNUUUK3_xTrFcyZThlSOtiOmhjDHTfHzeG2Q0NG2Opom1kfKWLDUVy5qrzYJWgcCaPOyEE1xnk4u5syH_8APOi2tKwKBCgS_D-kXzZ_379VhVuEpo2CGBU20t9Ys_m8KLqMCOyJaoQ3R1r6cWHfnYSab31L1my3rLwuippXkQ
            - kty: RSA
              id: apk5f3fg7kkG4TUzv0h8
              status: INACTIVE
              kid: encKey2
              use: enc
              e: AQAB
              'n': >-
                iHYyA5KXL82veBfNP81D7Q1GMRWIixNTu5jY03Z19DN7qTg1xYPRyPEPuMJ5Xjdhrm3dJdW7p1woRa6CHfw8FS7aosXUZkplxPs0NICP32nCkwpX3U3CltgVWrpMEUrd-JljKm0AgrervZuLkgBEfwY3BXP_SCKjF0JtbQjcK9MOKFNUUUK3_xTrFcyZThlSOtiOmhjDHTfHzeG2Q0NG2Opom1kfKWLDUVy5qrzYJWgcCaPOyEE1xnk4u5syH_8APOi2tKwKBCgS_D-kXzZ_379VhVuEpo2CGBU20t9Ys_m8KLqMCOyJaoQ3R1r6cWHfnYSab31L1my3rLwuippXkQ
    ReplaceAuthServerResponse:
      summary: Replace a custom authorization server
      value:
        id: '{authorizationServerId}'
        name: Sample Authorization Server
        description: Sample Authorization Server description
        audiences:
          - https://api.resource.com
        issuer: https://{yourOktaDomain}/oauth2/{authorizationServerId}
        issuerMode: ORG_URL
        status: ACTIVE
        created: '2023-05-17T22:25:57.000Z'
        lastUpdated: '2023-05-17T22:25:57.000Z'
        credentials:
          signing:
            rotationMode: AUTO
            lastRotated: '2023-05-17T22:25:57.000Z'
            nextRotation: '2023-08-15T22:25:57.000Z'
            kid: WYQxoK4XAwGFn5Zw5AzLxFvqEKLP79BbsKmWeuc5TB4
        _links:
          scopes:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/scopes
            hints:
              allow:
                - GET
          claims:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/claims
            hints:
              allow:
                - GET
          policies:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/policies
            hints:
              allow:
                - GET
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}
            hints:
              allow:
                - GET
                - DELETE
                - PUT
          metadata:
            - name: oauth-authorization-server
              href: >-
                https://{yourOktaDomain}/oauth2/{authorizationServerId}/.well-known/oauth-authorization-server
              hints:
                allow:
                  - GET
            - name: openid-configuration
              href: >-
                https://{yourOktaDomain}/oauth2/{authorizationServerId}/.well-known/openid-configuration
              hints:
                allow:
                  - GET
          rotateKey:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/credentials/lifecycle/keyRotate
            hints:
              allow:
                - POST
          deactivate:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/lifecycle/deactivate
            hints:
              allow:
                - POST
    ReplaceAuthServerEnableTokenEncryptionResponse:
      summary: Rotate the active encryption key for access token encryption
      value:
        id: '{authorizationServerId}'
        name: Sample Authorization Server
        description: Sample authorization server description
        audiences:
          - https://api.resource.com
        issuer: https://{yourOktaDomain}/oauth2/{authorizationServerId}
        issuerMode: ORG_URL
        status: ACTIVE
        created: '2023-05-17T22:25:57.000Z'
        lastUpdated: '2023-05-17T22:25:57.000Z'
        credentials:
          signing:
            rotationMode: AUTO
            lastRotated: '2023-05-17T22:25:57.000Z'
            nextRotation: '2023-08-15T22:25:57.000Z'
            kid: WYQxoK4XAwGFn5Zw5AzLxFvqEKLP79BbsKmWeuc5TB4
        accessTokenEncryptedResponseAlgorithm: RSA-OAEP-256
        jwks:
          keys:
            - kty: RSA
              id: apk2g3sd6bqV5YZxu0h8
              status: ACTIVE
              kid: encKey1
              use: enc
              e: AQAB
              'n': >-
                iHYyA5KXL82veBfNP81D7Q1GMRWIixNTu5jY03Z19DN7qTg1xYPRyPEPuMJ5Xjdhrm3dJdW7p1woRa6CHfw8FS7aosXUZkplxPs0NICP32nCkwpX3U3CltgVWrpMEUrd-JljKm0AgrervZuLkgBEfwY3BXP_SCKjF0JtbQjcK9MOKFNUUUK3_xTrFcyZThlSOtiOmhjDHTfHzeG2Q0NG2Opom1kfKWLDUVy5qrzYJWgcCaPOyEE1xnk4u5syH_8APOi2tKwKBCgS_D-kXzZ_379VhVuEpo2CGBU20t9Ys_m8KLqMCOyJaoQ3R1r6cWHfnYSab31L1my3rLwuippXkQ
            - kty: RSA
              id: apk5f3fg7kkG4TUzv0h8
              status: INACTIVE
              kid: encKey2
              use: enc
              e: AQAB
              'n': >-
                iHYyA5KXL82veBfNP81D7Q1GMRWIixNTu5jY03Z19DN7qTg1xYPRyPEPuMJ5Xjdhrm3dJdW7p1woRa6CHfw8FS7aosXUZkplxPs0NICP32nCkwpX3U3CltgVWrpMEUrd-JljKm0AgrervZuLkgBEfwY3BXP_SCKjF0JtbQjcK9MOKFNUUUK3_xTrFcyZThlSOtiOmhjDHTfHzeG2Q0NG2Opom1kfKWLDUVy5qrzYJWgcCaPOyEE1xnk4u5syH_8APOi2tKwKBCgS_D-kXzZ_379VhVuEpo2CGBU20t9Ys_m8KLqMCOyJaoQ3R1r6cWHfnYSab31L1my3rLwuippXkQ
        _links:
          scopes:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/scopes
            hints:
              allow:
                - GET
          claims:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/claims
            hints:
              allow:
                - GET
          policies:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/policies
            hints:
              allow:
                - GET
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}
            hints:
              allow:
                - GET
                - DELETE
                - PUT
          metadata:
            - name: oauth-authorization-server
              href: >-
                https://{yourOktaDomain}/oauth2/{authorizationServerId}/.well-known/oauth-authorization-server
              hints:
                allow:
                  - GET
            - name: openid-configuration
              href: >-
                https://{yourOktaDomain}/oauth2/{authorizationServerId}/.well-known/openid-configuration
              hints:
                allow:
                  - GET
          rotateKey:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/credentials/lifecycle/keyRotate
            hints:
              allow:
                - POST
          deactivate:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/lifecycle/deactivate
            hints:
              allow:
                - POST
    ListAssocAuthServerResponse:
      summary: List associated authorization servers
      value:
        - id: '{authorizationServerId}'
          name: Sample Authorization Server
          description: Sample Authorization Server description
          audiences:
            - https://api.resource.com
          issuer: https://{yourOktaDomain}/oauth2/{authorizationServerId}
          issuerMode: CUSTOM_URL
          status: ACTIVE
          created: '2023-05-17T22:25:57.000Z'
          lastUpdated: '2023-05-17T22:25:57.000Z'
          credentials:
            signing:
              rotationMode: DYNAMIC
              lastRotated: '2023-05-17T22:25:57.000Z'
              nextRotation: '2023-08-15T22:25:57.000Z'
              kid: WYQxoK4XAwGFn5Zw5AzLxFvqEKLP79BbsKmWeuc5TB4
              use: sig
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}
              hints:
                allow:
                  - DELETE
    CreateAssocAuthServerBody:
      summary: Create a trusted relationship between authorization servers
      value:
        - trusted: '{authorizationServerId}'
    CreateAssocAuthServerResponse:
      summary: Create a trusted relationship between authorization servers
      value:
        - id: '{authorizationServerId}'
          name: Sample Authorization Server
          description: Sample Authorization Server description
          audiences:
            - https://api.resource.com
          issuer: https://{yourOktaDomain}/oauth2/{authorizationServerId}
          issuerMode: CUSTOM_URL
          status: ACTIVE
          created: '2023-05-17T22:25:57.000Z'
          lastUpdated: '2023-05-17T22:25:57.000Z'
          credentials:
            signing:
              rotationMode: AUTO
              lastRotated: '2023-05-17T22:25:57.000Z'
              nextRotation: '2023-08-15T22:25:57.000Z'
              kid: WYQxoK4XAwGFn5Zw5AzLxFvqEKLP79BbsKmWeuc5TB4
              use: sig
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}
              hints:
                allow:
                  - DELETE
    ListCustomTokenClaimsResponse:
      summary: List all custom token claims for an authorization server
      value:
        - id: '{claimId}'
          name: sub
          status: ACTIVE
          claimType: RESOURCE
          valueType: EXPRESSION
          value: '(appuser != null) ? appuser.userName : app.clientId'
          conditions:
            scopes:
              - profile
          system: true
          alwaysIncludeInToken: true
          apiResourceId: null
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/claims/{claimId}
              hints:
                allow:
                  - GET
                  - PUT
                  - DELETE
    CreateCustomTokenClaimBody:
      summary: Create a custom token claim
      value:
        - alwaysIncludeInToken: true
          claimType: IDENTITY
          conditions:
            scopes:
              - profile
          group_filter_type: CONTAINS
          name: Support
          status: ACTIVE
          system: false
          value: Support
          valueType: GROUPS
    CreateCustomTokenClaimResponse:
      summary: Create a custom token claim response
      value:
        - id: '{claimId}'
          name: Support
          status: ACTIVE
          claimType: IDENTITY
          valueType: GROUPS
          value: Support
          conditions:
            scopes:
              - profile
          system: false
          alwaysIncludeInToken: true
          apiResourceId: null
          group_filter_type: CONTAINS
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/claims/{claimId}
              hints:
                allow:
                  - GET
                  - PUT
                  - DELETE
    RetrieveCustomTokenClaimResponse:
      summary: Retrieve a custom token claim response
      value:
        - id: '{claimId}'
          name: Support
          status: ACTIVE
          claimType: IDENTITY
          valueType: GROUPS
          value: Support
          conditions:
            scopes:
              - profile
          system: false
          alwaysIncludeInToken: true
          apiResourceId: null
          group_filter_type: CONTAINS
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/claims/{claimId}
              hints:
                allow:
                  - GET
                  - PUT
                  - DELETE
    ReplaceCustomTokenClaimBody:
      summary: Replace a custom token claim
      value:
        - alwaysIncludeInToken: true
          claimType: IDENTITY
          conditions:
            scopes:
              - profile
          group_filter_type: CONTAINS
          name: Knowledge_Base
          status: ACTIVE
          system: false
          value: Knowledge Base
          valueType: GROUPS
    ReplaceCustomTokenClaimResponse:
      summary: Replace a custom token claim response
      value:
        - id: '{claimId}'
          name: Knowledge_Base
          status: ACTIVE
          claimType: IDENTITY
          valueType: GROUPS
          value: Knowledge Base
          conditions:
            scopes:
              - profile
          system: false
          alwaysIncludeInToken: true
          apiResourceId: null
          group_filter_type: CONTAINS
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/claims/{claimId}
              hints:
                allow:
                  - GET
                  - PUT
                  - DELETE
    ListClientsResponse:
      summary: List all client resources for which an authorization server has tokens
      value:
        - client_id: '{clientId}'
          client_name: My Web App
          client_uri: null,
          logo_uri: null,
          _links:
            client:
              href: https://{yourOktaDomain}/oauth2/v1/clients/{clientId}
              title: My Web App
            tokens:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/clients/{clientId}/tokens
              hints:
                allow:
                  - GET
                  - DELETE
    ListRefreshTokensClientsResponse:
      summary: List all refresh tokens for a client
      value:
        - id: '{refreshTokenId}'
          status: ACTIVE
          created: '2023-09-21T19:59:56.000Z'
          lastUpdated: '2023-09-21T20:00:38.000Z'
          expiresAt: '2023-09-28T20:00:38.000Z'
          issuer: https://{yourOktaDomain}/oauth2/{authorizationServerId}
          client_id: '{clientId}'
          userId: '{userId}'
          scopes:
            - offline_access
            - openid
          _embedded:
            scopes:
              - id: '{scopeId}'
                name: openid
                displayName: openid
                description: Signals that a request is an OpenID request
                _links:
                  scope:
                    href: >-
                      https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/scopes/{scopeId}
                    title: openid
              - id: '{scopeID}'
                name: offline_access
                displayName: Keep you signed in to the app
                description: >-
                  This keeps you signed in to the app, even when you aren't
                  using it.
                _links:
                  scope:
                    href: >-
                      https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/scopes/{scopeId}
                    itle: Keep you signed in to the app
          _links:
            app:
              href: https://{yourOktaDomain}/api/v1/apps/{appId}
              title: My Web App
            authorizationServer:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}
              title: Authorization Server name
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/clients/{clientId}/tokens/{tokenId}
            revoke:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/clients/{clientId}/tokens/{tokenId}
              hints:
                allow:
                  - DELETE
            client:
              href: https://{yourOktaDomain}/oauth2/v1/clients/{clientId}
              title: My Web App
            user:
              href: https://{yourOktaDomain}/api/v1/users/{userId}
              title: Joe User
    RetrieveRefreshTokenClientResponse:
      summary: Retrieve a refresh token for a client
      value:
        - id: '{refreshTokenId}'
          status: ACTIVE
          created: '2023-09-21T19:59:56.000Z'
          lastUpdated: '2023-09-21T20:00:38.000Z'
          expiresAt: '2023-09-28T20:00:38.000Z'
          issuer: https://{yourOktaDomain}/oauth2/{authorizationServerId}
          client_id: '{clientId}'
          userId: '{userId}'
          scopes:
            - offline_access
            - openid
          _embedded:
            scopes:
              - id: '{scopeID}'
                name: offline_access
                displayName: Keep you signed in to the app
                description: >-
                  This keeps you signed in to the app, even when you aren't
                  using it.
                _links:
                  scope:
                    href: >-
                      https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/scopes/{scopeId}
                    title: Keep you signed in to the app
              - id: '{scopeId}'
                name: openid
                displayName: openid
                description: Signals that a request is an OpenID request
                _links:
                  scope:
                    href: >-
                      https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/scopes/{scopeId}
                    title: openid
          _links:
            app:
              href: https://{yourOktaDomain}/api/v1/apps/{appId}
              title: My Web App
            authorizationServer:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}
              title: Authorization Server name
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/clients/{clientId}/tokens/{tokenId}
            revoke:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/clients/{clientId}/tokens/{tokenId}
              hints:
                allow:
                  - DELETE
            client:
              href: https://{yourOktaDomain}/oauth2/v1/clients/{clientId}
              title: My Web App
            user:
              href: https://{yourOktaDomain}/api/v1/users/{userId}
              title: Joe User
    ListAuthorizationServerKeys:
      summary: All credential keys
      value:
        - status: ACTIVE
          alg: RS256
          e: AQAB
          'n': >-
            g0MirhrysJMPm_wK45jvMbbyanfhl-jmTBv0o69GeifPaISaXGv8LKn3-CyJvUJcjjeHE17KtumJWVxUDRzFqtIMZ1ctCZyIAuWO0n
            LKilg7_EIDXJrS8k14biqkPO1lXGFwtjo3zLHeFSLw6sWf-CEN9zv6Ff3IAXb-RMYpfh-bVrxIgWsWCxjLW-UKI3la-gs0nWHH2PJr5HLJuI
            JIOL5HLJuIJIOLWahqTnm_r1LSCSYr6N4C-fh--w2_BW8DzTHalBYe76bNr0d7AqtR4tGazmrvrc79Wa2bjyxmhhN1u9jSaZQqq-3VZEod8q3,
            WHH2PJ5v1LoXniJQ4a2W8nDVqb6h4E8MUKYOpljTfQ
          kid: RQ8DuhdxCczyMvy7GNJb4Ka3lQ99vrSo3oFBUiZjzzc
          kty: RSA
          use: sig
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/credentials/keys/RQ8DuhdxCczyMvy7GNJb4Ka3lQ99vrSo3oFBUiZjzzc
              hints:
                allow:
                  - GET
        - status: NEXT
          alg: RS256
          e: AQAB
          'n': >-
            l1hZ_g2sgBE3oHvu34T-5XP18FYJWgtul_nRNg-5xra5ySkaXEOJUDRERUG0HrR42uqf9jYrUTwg9fp-SqqNIdHRaN8EwRSDRsKAwK
            3
            HIJ2NJfgmrrO2ABkeyUq6rzHxAumiKv1iLFpSawSIiTEBJERtUCDcjbbqyHVFuivIFgH8L37
            - XDIDb0XG - R8DOoOHLJPTpsgH - rJe
            M5w96VIRZInsGC5OGWkFdtgk6OkbvVd7_TXcxLCpWeg1vlbmX - 0
            TmG5yjSj7ek05txcpxIqYu - 7 FIGT0KKvXge_BOSEUlJpBhLKU28
            OtsOnmc3NLIGXB - GeDiUZiBYQdPR - myB4ZoQ
          kid: Y3vBOdYT-l-I0j-gRQ26XjutSX00TeWiSguuDhW3ngo
          kty: RSA
          use: sig
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/credentials/keys/Y3vBOdYT-l-I0j-gRQ26XjutSX00TeWiSguuDhW3ngo
              hints:
                allow:
                  - GET
        - status: EXPIRED
          alg: RS256
          e: AQAB
          'n': >-
            lC4ehVB6W0OCtNPnz8udYH9Ao83B6EKnHA5eTcMOap_lQZ-nKtS1lZwBj4wXRVc1XmS0d2OQFA1VMQ-dHLDE3CiGfsGqWbaiZFdW7U
            GLO1nAwfDdH6xp3xwpKOMewDXbAHJlXdYYAe2ap -
            CE9c5WLTUBU6JROuWcorHCNJisj1aExyiY5t3JQQVGpBz2oUIHo7NRzQoKimvp
            dMvMzcYnTlk1dhlG11b1GTkBclprm1BmOP7Ltjd7aEumOJWS67nKcAZzl48Zyg5KtV11V9F9dkGt25qHauqFKL7w3wu
            - DYhT0hmyFc wn - tXS6e6HQbfHhR_MQxysLtDGOk2ViWv8AQ
          kid: h5Sr3LXcpQiQlAUVPdhrdLFoIvkhRTAVs_h39bQnxlU
          kty: RSA
          use: sig
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/credentials/keys/h5Sr3LXcpQiQlAUVPdhrdLFoIvkhRTAVs_h39bQnxlU
              hints:
                allow:
                  - GET
    ActiveAuthorizationServerKey:
      summary: Active authorization server key
      value:
        status: ACTIVE
        alg: RS256
        e: AQAB
        'n': >-
          g0MirhrysJMPm_wK45jvMbbyanfhl-jmTBv0o69GeifPaISaXGv8LKn3-CyJvUJcjjeHE17KtumJWVxUDRzFqtIMZ1ctCZyIAuWO0n
          LKilg7_EIDXJrS8k14biqkPO1lXGFwtjo3zLHeFSLw6sWf-CEN9zv6Ff3IAXb-RMYpfh-bVrxIgWsWCxjLW-UKI3la-gs0nWHH2PJr5HLJuI
          JIOL5HLJuIJIOLWahqTnm_r1LSCSYr6N4C-fh--w2_BW8DzTHalBYe76bNr0d7AqtR4tGazmrvrc79Wa2bjyxmhhN1u9jSaZQqq-3VZEod8q3,
          WHH2PJ5v1LoXniJQ4a2W8nDVqb6h4E8MUKYOpljTfQ
        kid: RQ8DuhdxCczyMvy7GNJb4Ka3lQ99vrSo3oFBUiZjzzc
        kty: RSA
        use: sig
        _links:
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/credentials/keys/RQ8DuhdxCczyMvy7GNJb4Ka3lQ99vrSo3oFBUiZjzzc
            hints:
              allow:
                - GET
    NextAuthorizationServerKey:
      summary: Next authorization server key
      value:
        status: NEXT
        alg: RS256
        e: AQAB
        'n': >-
          l1hZ_g2sgBE3oHvu34T-5XP18FYJWgtul_nRNg-5xra5ySkaXEOJUDRERUG0HrR42uqf9jYrUTwg9fp-SqqNIdHRaN8EwRSDRsKAwK
          3
          HIJ2NJfgmrrO2ABkeyUq6rzHxAumiKv1iLFpSawSIiTEBJERtUCDcjbbqyHVFuivIFgH8L37
          - XDIDb0XG - R8DOoOHLJPTpsgH - rJe
          M5w96VIRZInsGC5OGWkFdtgk6OkbvVd7_TXcxLCpWeg1vlbmX - 0
          TmG5yjSj7ek05txcpxIqYu - 7 FIGT0KKvXge_BOSEUlJpBhLKU28 OtsOnmc3NLIGXB
          - GeDiUZiBYQdPR - myB4ZoQ
        kid: Y3vBOdYT-l-I0j-gRQ26XjutSX00TeWiSguuDhW3ngo
        kty: RSA
        use: sig
        _links:
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/credentials/keys/Y3vBOdYT-l-I0j-gRQ26XjutSX00TeWiSguuDhW3ngo
            hints:
              allow:
                - GET
    ExpiredAuthorizationServerKey:
      summary: Expired authorization server key
      value:
        status: EXPIRED
        alg: RS256
        e: AQAB
        'n': >-
          lC4ehVB6W0OCtNPnz8udYH9Ao83B6EKnHA5eTcMOap_lQZ-nKtS1lZwBj4wXRVc1XmS0d2OQFA1VMQ-dHLDE3CiGfsGqWbaiZFdW7U
          GLO1nAwfDdH6xp3xwpKOMewDXbAHJlXdYYAe2ap -
          CE9c5WLTUBU6JROuWcorHCNJisj1aExyiY5t3JQQVGpBz2oUIHo7NRzQoKimvp
          dMvMzcYnTlk1dhlG11b1GTkBclprm1BmOP7Ltjd7aEumOJWS67nKcAZzl48Zyg5KtV11V9F9dkGt25qHauqFKL7w3wu
          - DYhT0hmyFc wn - tXS6e6HQbfHhR_MQxysLtDGOk2ViWv8AQ
        kid: h5Sr3LXcpQiQlAUVPdhrdLFoIvkhRTAVs_h39bQnxlU
        kty: RSA
        use: sig
        _links:
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/credentials/keys/h5Sr3LXcpQiQlAUVPdhrdLFoIvkhRTAVs_h39bQnxlU
            hints:
              allow:
                - GET
    InvalidRotateUse:
      summary: Invalid use
      value:
        errorCode: E0000001
        errorSummary: 'Api validation failed: rotateKeys'
        errorLink: E0000001
        errorId: oaeprak9qKHRlaWiclJ4oPJRQ
        errorCauses:
          - errorSummary: Invalid value specified for key 'use' parameter
    ListAuthorizationServerPolicies:
      summary: List authorization server policies
      value:
        - type: OAUTH_AUTHORIZATION_POLICY
          id: 00palyaappA22DPkj0h7
          status: ACTIVE
          name: Vendor2 Policy
          description: Vendor2 policy description
          priority: 1
          system: false
          conditions:
            clients:
              include:
                - ALL_CLIENTS
          created: '2017-05-26T19:43:53.000Z'
          lastUpdated: '2017-06-07T15:28:17.000Z'
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/policies/00palyaappA22DPkj0h7
              hints:
                allow:
                  - GET
                  - PUT
                  - DELETE
            deactivate:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/policies/00palyaappA22DPkj0h7/lifecycle/deactivate
              hints:
                allow:
                  - POST
            rules:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/policies/00palyaappA22DPkj0h7/rules
              hints:
                allow:
                  - GET
    CreateAuthorizationServerPolicyRequest:
      summary: Create an authorization server policy
      value:
        type: OAUTH_AUTHORIZATION_POLICY
        status: ACTIVE
        name: Default Policy
        description: Default policy description
        priority: 1
        system: false
        conditions:
          clients":
            include":
              - ALL_CLIENTS
    AuthorizationServerPolicy:
      summary: Authorization server policy
      value:
        type: OAUTH_AUTHORIZATION_POLICY
        id: 00palyaappA22DPkj0h7
        status: ACTIVE
        name: Vendor2 Policy
        description: Vendor2 policy description
        priority: 1
        system: false
        conditions:
          clients:
            include:
              - ALL_CLIENTS
        created: '2017-05-26T19:43:53.000Z'
        lastUpdated: '2017-06-07T15:28:17.000Z'
        _links:
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/policies/00palyaappA22DPkj0h7
            hints:
              allow:
                - GET
                - PUT
                - DELETE
          deactivate:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/policies/00palyaappA22DPkj0h7/lifecycle/deactivate
            hints:
              allow:
                - POST
          rules:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/policies/00palyaappA22DPkj0h7/rules
            hints:
              allow:
                - GET
    UpdateAuthorizationServerPolicyRequest:
      summary: Update an authorization server policy
      value:
        id: 00p5m9xrrBffPd9ah0g4
        type: OAUTH_AUTHORIZATION_POLICY
        status: ACTIVE
        name: Default Policy
        description: Default policy description
        priority: 1
        system: false
        conditions:
          clients":
            include":
              - ALL_CLIENTS
    ListAuthorizationServerPolicyRules:
      summary: List authorization server policy rules
      value:
        - type: RESOURCE_ACCESS
          id: 0prbsjfyl01zfSZ9K0h7
          status: ACTIVE
          name: Default Policy Rule
          priority: 1
          created: '2017-08-25T16:57:02.000Z'
          lastUpdated: '2017-08-30T14:51:05.000Z'
          system: false
          conditions:
            people:
              users:
                include: []
                exclude: []
              groups:
                include:
                  - EVERYONE
                exclude: []
            grantTypes:
              include:
                - implicit
                - client_credentials
                - authorization_code
                - password
            scopes:
              include:
                - '*'
          actions:
            token:
              accessTokenLifetimeMinutes: 60
              refreshTokenLifetimeMinutes: 0
              refreshTokenWindowMinutes: 10080
              inlineHook:
                id: cal4egvp1mbMldrYN0g7
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/0prbsjfyl01zfSZ9K0h7
              hints:
                allow:
                  - GET
                  - PUT
                  - DELETE
              deactivate:
                href: >-
                  https://{yourOktaDomain}/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/0prbsjfyl01zfSZ9K0h7/lifecycle/deactivate
                hints:
                  allow:
                    - POST
    CreateAuthorizationServerPolicyRuleRequest:
      summary: Create authorization server policy rule
      value:
        type: RESOURCE_ACCESS
        name: Default Policy Rule
        priority: 1
        conditions:
          people:
            groups:
              include:
                - EVERYONE
          grantTypes:
            include:
              - implicit
              - client_credentials
              - authorization_code
              - password
          scopes:
            include:
              - '*'
        actions:
          token:
            accessTokenLifetimeMinutes: 60
            refreshTokenLifetimeMinutes: 0
            refreshTokenWindowMinutes: 10080
            inlineHook:
              id: cal4egvp1mbMldrYN0g7
    AuthorizationServerPolicyRule:
      summary: Authorization server policy rule
      value:
        type: RESOURCE_ACCESS
        id: 0prbsjfyl01zfSZ9K0h7
        status: ACTIVE
        name: Default Policy Rule
        priority: 1
        created: '2017-08-25T16:57:02.000Z'
        lastUpdated: '2017-08-30T14:51:05.000Z'
        system: false
        conditions:
          people:
            users:
              include: []
              exclude: []
            groups:
              include:
                - EVERYONE
              exclude: []
          grantTypes:
            include:
              - implicit
              - client_credentials
              - authorization_code
              - password
          scopes:
            include:
              - '*'
        actions:
          token:
            accessTokenLifetimeMinutes: 60
            refreshTokenLifetimeMinutes: 0
            refreshTokenWindowMinutes: 10080
            inlineHook:
              id: cal4egvp1mbMldrYN0g7
        _links:
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/0prbsjfyl01zfSZ9K0h7
            hints:
              allow:
                - GET
                - PUT
                - DELETE
            deactivate:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authServerId}/policies/{policyId}/rules/0prbsjfyl01zfSZ9K0h7/lifecycle/deactivate
              hints:
                allow:
                  - POST
    UpdateAuthorizationServerPolicyRuleRequest:
      summary: Update authorization server policy rule
      value:
        type: RESOURCE_ACCESS
        name: Default Policy Rule
        priority: 1
        status: ACTIVE
        conditions:
          people:
            groups:
              include:
                - EVERYONE
          grantTypes:
            include:
              - implicit
              - client_credentials
              - authorization_code
              - password
          scopes:
            include:
              - '*'
        actions:
          token:
            accessTokenLifetimeMinutes: 60
            refreshTokenLifetimeMinutes: 0
            refreshTokenWindowMinutes: 10080
            inlineHook:
              id: cal4egvp1mbMldrYN0g7
    ListOAuth2ResourceServerJsonWebKeys:
      summary: All OAuth2 Resource Server JSON Web Keys
      value:
        - status: ACTIVE
          id: apk40n33xfjbPaf6D0g5
          e: AQAB
          'n': >-
            g0MirhrysJMPm_wK45jvMbbyanfhl-jmTBv0o69GeifPaISaXGv8LKn3-CyJvUJcjjeHE17KtumJWVxUDRzFqtIMZ1ctCZyIAuWO0n
            LKilg7_EIDXJrS8k14biqkPO1lXGFwtjo3zLHeFSLw6sWf-CEN9zv6Ff3IAXb-RMYpfh-bVrxIgWsWCxjLW-UKI3la-gs0nWHH2PJr5HLJuI
            JIOL5HLJuIJIOLWahqTnm_r1LSCSYr6N4C-fh--w2_BW8DzTHalBYe76bNr0d7AqtR4tGazmrvrc79Wa2bjyxmhhN1u9jSaZQqq-3VZEod8q3,
            WHH2PJ5v1LoXniJQ4a2W8nDVqb6h4E8MUKYOpljTfQ
          kid: RQ8DuhdxCczyMvy7GNJb4Ka3lQ99vrSo3oFBUiZjzzc
          kty: RSA
          use: enc
          created: '2023-04-06T21:32:33.000Z'
          lastUpdated: '2023-04-06T21:32:33.000Z'
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/resourceservercredentials/keys/RQ8DuhdxCczyMvy7GNJb4Ka3lQ99vrSo3oFBUiZjzzc
              hints:
                allow:
                  - GET
        - status: INACTIVE
          id: apk33a45xfjbDfg6D0g5
          e: AQAB
          'n': >-
            l1hZ_g2sgBE3oHvu34T-5XP18FYJWgtul_nRNg-5xra5ySkaXEOJUDRERUG0HrR42uqf9jYrUTwg9fp-SqqNIdHRaN8EwRSDRsKAwK
            3
            HIJ2NJfgmrrO2ABkeyUq6rzHxAumiKv1iLFpSawSIiTEBJERtUCDcjbbqyHVFuivIFgH8L37
            - XDIDb0XG - R8DOoOHLJPTpsgH - rJe
            M5w96VIRZInsGC5OGWkFdtgk6OkbvVd7_TXcxLCpWeg1vlbmX - 0
            TmG5yjSj7ek05txcpxIqYu - 7 FIGT0KKvXge_BOSEUlJpBhLKU28
            OtsOnmc3NLIGXB - GeDiUZiBYQdPR - myB4ZoQ
          kid: Y3vBOdYT-l-I0j-gRQ26XjutSX00TeWiSguuDhW3ngo
          kty: RSA
          use: enc
          created: '2023-04-06T21:32:33.000Z'
          lastUpdated: '2023-04-06T21:32:33.000Z'
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/resourceservercredentials/keys/Y3vBOdYT-l-I0j-gRQ26XjutSX00TeWiSguuDhW3ngo
              hints:
                allow:
                  - GET
    AddOAuth2ResourceServerJsonWebKeyRequest:
      summary: JSON Web Key request example
      value:
        kid: ASHJHGasa782333-Sla3x3POBiIxDreBCdZuFs5B
        kty: RSA
        use: enc
        e: AQAB
        'n': AJncrzOrouIUCSMlRL0HU.....Kuine49_CEVR4GPn=
        status: INACTIVE
    OAuth2ResourceServerJsonWebKey:
      summary: JSON Web Key example
      value:
        id: apk2f4zrZbs8nUa7p0g4
        kid: ASHJHGasa782333-Sla3x3POBiIxDreBCdZuFs5B
        kty: RSA
        alg: RS256
        use: enc
        e: AQAB
        'n': AJncrzOrouIUCSMlRL0HU.....Kuine49_CEVR4GPn=
        status: INACTIVE
        created: '2023-04-06T21:32:33.000Z'
        lastUpdated: '2023-04-06T21:32:33.000Z'
        _links:
          delete:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/resourceservercredentials/keys/RQ8DuhdxCczyMvy7GNJb4Ka3lQ99vrSo3oFBUiZjzzc/lifecycle/delete
            hints:
              allow:
                - DELETE
    ErrorJsonWebKeyNonUniqueKid:
      value:
        errorCode: E0000001
        errorSummary: 'Api validation failed: JsonWebKey'
        errorLink: E0000001
        errorId: sampleQPivGUj_ND5v78vbYWW
        errorCauses:
          - errorSummary: Each key must have a unique ''kid''.
    ErrorJsonWebKeyKidLengthTooShort:
      value:
        errorCode: E0000001
        errorSummary: 'Api validation failed: JsonWebKey'
        errorLink: E0000001
        errorId: sampleQPivGUj_ND5v78vbYWW
        errorCauses:
          - errorSummary: >-
              RSA key length in the 'jwks' is less than '2,048' bits for the
              given key.
    ErrorJsonWebKeyTooManyKids:
      value:
        errorCode: E0000001
        errorSummary: 'Api validation failed: JsonWebKey'
        errorLink: E0000001
        errorId: sampleQPivGUj_ND5v78vbYWW
        errorCauses:
          - errorSummary: >-
              You can't create a new key. You have reached the maximum number of
              keys allowed (5). To add another key, you must first delete an
              existing one.
    ErrorJsonWebKeyCannotAddActiveKey:
      value:
        errorCode: E0000001,
        errorSummary: 'Api validation failed: JsonWebKey'
        errorLink: E0000001,
        errorId: sampleQPivGUj_ND5v78vbYWW,
        errorCauses:
          - errorSummary: >-
              Keys cannot be created with an ''ACTIVE'' status. Create an
              ''INACTIVE'' key and then activate it.
    ErrorDeleteActiveJsonWebKey:
      value:
        errorCode: E0000001
        errorSummary: 'Api validation failed: JsonWebKey'
        errorLink: E0000001
        errorId: sampleQPivGUj_ND5v78vbYWW
        errorCauses:
          - errorSummary: >-
              ''ACTIVE'' keys cannot be deleted. Activate another key before
              deleting this one.
    ErrorDeactivateActiveKey:
      value:
        errorCode: E0000001
        errorSummary: 'Api validation failed: JsonWebKey'
        errorLink: E0000001
        errorId: sampleQPivGUj_ND5v78vbYWW
        errorCauses:
          - errorSummary: >-
              You cannot deactivate the active key when access token encryption
              is enabled.
    ExampleOAuth2Scopes:
      summary: All scopes
      value:
        - id: scp5yu8kLOnDzo7lh0g4
          name: car:drive
          description: Drive car
          system: false
          default: false
          displayName: Saml Jackson
          consent: REQUIRED
          optional: false
          metadataPublish: NO_CLIENTS
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/scopes/scp5yu8kLOnDzo7lh0g4
              hints:
                allow:
                  - GET
                  - PUT
                  - DELETE
    CreateOAuth2ScopeRequest:
      summary: Example scope
      value:
        name: car:drive
        description: Drive car
        consent: REQUIRED
        displayName: Saml Jackson
    ExampleOAuth2Scope:
      summary: Example scope
      value:
        id: scp5yu8kLOnDzo7lh0g4
        name: car:drive
        description: Drive car
        system: false
        default: false
        displayName: Saml Jackson
        consent: REQUIRED
        optional: false
        metadataPublish: NO_CLIENTS
        _links:
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/scopes/scp5yu8kLOnDzo7lh0g4
            hints:
              allow:
                - GET
                - PUT
                - DELETE
    UpdateOAuth2ScopeRequest:
      summary: Example scope
      value:
        description: Order car
        name: car:order
        metadataPublish: ALL_CLIENTS
    UpdatedOAuth2ScopeResponse:
      summary: Updated scope
      value:
        id: scp5yu8kLOnDzo7lh0g4
        name: car:order
        description: Order car
        system: false
        default: false
        displayName: Saml Jackson
        consent: REQUIRED
        optional: false
        metadataPublish: ALL_CLIENTS
        _links:
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/authorizationServers/{authorizationServerId}/scopes/scp5yu8kLOnDzo7lh0g4
            hints:
              allow:
                - GET
                - PUT
                - DELETE
    ErrorAccessDenied:
      summary: Access Denied
      value:
        errorCode: E0000006
        errorSummary: You do not have permission to perform the requested action
        errorLink: E0000006
        errorId: sampleNUSD_8fdkFd8fs8SDBK
        errorCauses: []
    ErrorTooManyRequests:
      summary: Too Many Requests
      value:
        errorCode: E0000047
        errorSummary: API call exceeded rate limit due to too many requests.
        errorLink: E0000047
        errorId: sampleQPivGUj_ND5v78vbYWW
        errorCauses: []
    ErrorApiValidationFailed:
      summary: API Validation Failed
      value:
        errorCode: E0000001
        errorSummary: 'Api validation failed: {0}'
        errorLink: E0000001
        errorId: sampleiCF-8D5rLW6myqiPItW
        errorCauses: []
    ErrorResourceNotFound:
      summary: Resource Not Found
      value:
        errorCode: E0000007
        errorSummary: 'Not found: {0}'
        errorLink: E0000007
        errorId: sampleMlLvGUj_YD5v16vkYWY
        errorCauses: []
    ErrorInvalidTokenProvided:
      summary: Invalid Token Provided
      value:
        errorCode: E0000011
        errorSummary: Invalid token provided
        errorLink: E0000011
        errorId: sampleQPivGUj_ND5v78vbYWW
        errorCauses: []
  x-stackQL-resources:
    authorization_servers:
      id: okta.authorizationservers.authorization_servers
      name: authorization_servers
      title: Authorization Servers
      methods:
        list_authorization_servers:
          operation:
            $ref: '#/paths/~1api~1v1~1authorizationServers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_authorization_server:
          operation:
            $ref: '#/paths/~1api~1v1~1authorizationServers/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_authorization_server:
          operation:
            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        replace_authorization_server:
          operation:
            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_authorization_server:
          operation:
            $ref: '#/paths/~1api~1v1~1authorizationServers~1{authServerId}/delete'
          response:
            mediaType: ''
            openAPIDocKey: '204'
        activate_authorization_server:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1lifecycle~1activate/post
          response:
            mediaType: ''
            openAPIDocKey: '204'
        deactivate_authorization_server:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1lifecycle~1deactivate/post
          response:
            mediaType: ''
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/authorization_servers/methods/list_authorization_servers
          - $ref: >-
              #/components/x-stackQL-resources/authorization_servers/methods/get_authorization_server
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/authorization_servers/methods/create_authorization_server
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/authorization_servers/methods/delete_authorization_server
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/authorization_servers/methods/replace_authorization_server
    associated_servers:
      id: okta.authorizationservers.associated_servers
      name: associated_servers
      title: Associated Servers
      methods:
        list_associated_servers_by_trusted_type:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1associatedServers/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_associated_servers:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1associatedServers/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_associated_server:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1associatedServers~1{associatedServerId}/delete
          response:
            mediaType: ''
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/associated_servers/methods/list_associated_servers_by_trusted_type
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/associated_servers/methods/create_associated_servers
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/associated_servers/methods/delete_associated_server
        replace: []
    claims:
      id: okta.authorizationservers.claims
      name: claims
      title: Claims
      methods:
        list_oauth2_claims:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1claims/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_oauth2_claim:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1claims/post
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_oauth2_claim:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1claims~1{claimId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        replace_oauth2_claim:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1claims~1{claimId}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_oauth2_claim:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1claims~1{claimId}/delete
          response:
            mediaType: ''
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/claims/methods/list_oauth2_claims'
          - $ref: '#/components/x-stackQL-resources/claims/methods/get_oauth2_claim'
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/claims/methods/create_oauth2_claim
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/claims/methods/delete_oauth2_claim
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/claims/methods/replace_oauth2_claim
    clients:
      id: okta.authorizationservers.clients
      name: clients
      title: Clients
      methods:
        list_oauth2_clients_for_authorization_server:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1clients/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/clients/methods/list_oauth2_clients_for_authorization_server
        insert: []
        update: []
        delete: []
        replace: []
    refresh_tokens:
      id: okta.authorizationservers.refresh_tokens
      name: refresh_tokens
      title: Refresh Tokens
      methods:
        list_refresh_tokens_for_authorization_server_and_client:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1clients~1{clientId}~1tokens/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        revoke_refresh_tokens_for_authorization_server_and_client:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1clients~1{clientId}~1tokens/delete
          response:
            mediaType: ''
            openAPIDocKey: '204'
        get_refresh_token_for_authorization_server_and_client:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1clients~1{clientId}~1tokens~1{tokenId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        revoke_refresh_token_for_authorization_server_and_client:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1clients~1{clientId}~1tokens~1{tokenId}/delete
          response:
            mediaType: ''
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/refresh_tokens/methods/list_refresh_tokens_for_authorization_server_and_client
          - $ref: >-
              #/components/x-stackQL-resources/refresh_tokens/methods/get_refresh_token_for_authorization_server_and_client
        insert: []
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/refresh_tokens/methods/revoke_refresh_tokens_for_authorization_server_and_client
          - $ref: >-
              #/components/x-stackQL-resources/refresh_tokens/methods/revoke_refresh_token_for_authorization_server_and_client
        replace: []
    keys:
      id: okta.authorizationservers.keys
      name: keys
      title: Keys
      methods:
        list_authorization_server_keys:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1credentials~1keys/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_authorization_server_key:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1credentials~1keys~1{keyId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        rotate_authorization_server_keys:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1credentials~1lifecycle~1keyRotate/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/keys/methods/list_authorization_server_keys
          - $ref: >-
              #/components/x-stackQL-resources/keys/methods/get_authorization_server_key
        insert: []
        update: []
        delete: []
        replace: []
    policies:
      id: okta.authorizationservers.policies
      name: policies
      title: Policies
      methods:
        list_authorization_server_policies:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_authorization_server_policy:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies/post
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_authorization_server_policy:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        replace_authorization_server_policy:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_authorization_server_policy:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}/delete
          response:
            mediaType: ''
            openAPIDocKey: '204'
        activate_authorization_server_policy:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1lifecycle~1activate/post
          response:
            mediaType: ''
            openAPIDocKey: '204'
        deactivate_authorization_server_policy:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1lifecycle~1deactivate/post
          response:
            mediaType: ''
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/policies/methods/list_authorization_server_policies
          - $ref: >-
              #/components/x-stackQL-resources/policies/methods/get_authorization_server_policy
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/policies/methods/create_authorization_server_policy
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/policies/methods/delete_authorization_server_policy
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/policies/methods/replace_authorization_server_policy
    rules:
      id: okta.authorizationservers.rules
      name: rules
      title: Rules
      methods:
        list_authorization_server_policy_rules:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_authorization_server_policy_rule:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules/post
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_authorization_server_policy_rule:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules~1{ruleId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        replace_authorization_server_policy_rule:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules~1{ruleId}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_authorization_server_policy_rule:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules~1{ruleId}/delete
          response:
            mediaType: ''
            openAPIDocKey: '204'
        activate_authorization_server_policy_rule:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules~1{ruleId}~1lifecycle~1activate/post
          response:
            mediaType: ''
            openAPIDocKey: '204'
        deactivate_authorization_server_policy_rule:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1policies~1{policyId}~1rules~1{ruleId}~1lifecycle~1deactivate/post
          response:
            mediaType: ''
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/rules/methods/list_authorization_server_policy_rules
          - $ref: >-
              #/components/x-stackQL-resources/rules/methods/get_authorization_server_policy_rule
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/rules/methods/create_authorization_server_policy_rule
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/rules/methods/delete_authorization_server_policy_rule
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/rules/methods/replace_authorization_server_policy_rule
    oauth2_resource_server_jwks:
      id: okta.authorizationservers.oauth2_resource_server_jwks
      name: oauth2_resource_server_jwks
      title: Oauth2 Resource Server Jwks
      methods:
        list_oauth2_resource_server_json_web_keys:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1resourceservercredentials~1keys/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        add_oauth2_resource_server_json_web_key:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1resourceservercredentials~1keys/post
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_oauth2_resource_server_json_web_key:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1resourceservercredentials~1keys~1{keyId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_oauth2_resource_server_json_web_key:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1resourceservercredentials~1keys~1{keyId}/delete
          response:
            mediaType: ''
            openAPIDocKey: '204'
        activate_oauth2_resource_server_json_web_key:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1resourceservercredentials~1keys~1{keyId}~1lifecycle~1activate/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        deactivate_oauth2_resource_server_json_web_key:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1resourceservercredentials~1keys~1{keyId}~1lifecycle~1deactivate/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/oauth2_resource_server_jwks/methods/list_oauth2_resource_server_json_web_keys
          - $ref: >-
              #/components/x-stackQL-resources/oauth2_resource_server_jwks/methods/get_oauth2_resource_server_json_web_key
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/oauth2_resource_server_jwks/methods/add_oauth2_resource_server_json_web_key
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/oauth2_resource_server_jwks/methods/delete_oauth2_resource_server_json_web_key
        replace: []
    scopes:
      id: okta.authorizationservers.scopes
      name: scopes
      title: Scopes
      methods:
        list_oauth2_scopes:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1scopes/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_oauth2_scope:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1scopes/post
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_oauth2_scope:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1scopes~1{scopeId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        replace_oauth2_scope:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1scopes~1{scopeId}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_oauth2_scope:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1authorizationServers~1{authServerId}~1scopes~1{scopeId}/delete
          response:
            mediaType: ''
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/scopes/methods/list_oauth2_scopes'
          - $ref: '#/components/x-stackQL-resources/scopes/methods/get_oauth2_scope'
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/scopes/methods/create_oauth2_scope
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/scopes/methods/delete_oauth2_scope
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/scopes/methods/replace_oauth2_scope
servers:
  - url: https://{subdomain}.okta.com/
    variables:
      subdomain:
        default: my-org
        description: >-
          The domain of your organization. This can be a provided subdomain of
          an official okta domain (okta.com, oktapreview.com, etc) or one of
          your configured custom domains.
