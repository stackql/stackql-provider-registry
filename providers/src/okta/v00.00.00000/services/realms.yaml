openapi: 3.0.3
info:
  title: realms API
  description: okta realms API
  version: 5.1.0
paths:
  /api/v1/realms:
    get:
      x-okta-lifecycle:
        lifecycle: GA
      summary: List all realms
      description: Lists all Realms
      operationId: listRealms
      parameters:
        - name: limit
          in: query
          description: >-
            Specifies the number of results returned. Defaults to 10 if `search`
            is provided.
          schema:
            type: integer
            format: int32
            default: 200
        - $ref: '#/components/parameters/queryAfter'
        - name: search
          in: query
          description: >-
            Searches for realms with a supported filtering expression for most
            properties.


            Searches for realms can be filtered by the contains (`co`) operator.
            You can only use `co` with the `profile.name` property. See
            [Operators](https://developer.okta.com/docs/api/#operators).
          schema:
            type: string
        - name: sortBy
          in: query
          description: >-
            Specifies the field to sort by and can be any single property (for
            search queries only)
          schema:
            type: string
            example: profile.name
        - name: sortOrder
          in: query
          description: >-
            Specifies the sort order: `asc` or `desc` (for search queries only).
            This parameter is ignored if `sortBy` isn't present.
          schema:
            type: string
            default: asc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Realm'
              examples:
                Realm Lists:
                  $ref: '#/components/examples/ListRealmsResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.realms.read
      tags:
        - Realm
    post:
      x-okta-lifecycle:
        lifecycle: GA
      summary: Create a realm
      description: Creates a new realm
      operationId: createRealm
      x-codegen-request-body-name: body
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRealmRequest'
            examples:
              Create a realm:
                $ref: '#/components/examples/CreateRealmRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Realm'
              examples:
                Realm Lists:
                  $ref: '#/components/examples/ListRealmsResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.realms.manage
      tags:
        - Realm
  /api/v1/realms/{realmId}:
    get:
      x-okta-lifecycle:
        lifecycle: GA
      summary: Retrieve a realm
      description: Retrieves a realm
      operationId: getRealm
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Realm'
              examples:
                DefaultRealm:
                  $ref: '#/components/examples/DefaultRealmResponse'
                NonDefaultRealm:
                  $ref: '#/components/examples/RealmResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.realms.read
      tags:
        - Realm
    put:
      x-okta-lifecycle:
        lifecycle: GA
      summary: Replace the realm profile
      description: Replaces the realm profile
      operationId: replaceRealm
      x-codegen-request-body-name: body
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRealmRequest'
            examples:
              Replace a realm:
                $ref: '#/components/examples/CreateRealmRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Realm'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.realms.manage
      tags:
        - Realm
    delete:
      x-okta-lifecycle:
        lifecycle: GA
      summary: Delete a realm
      description: >-
        Deletes a realm permanently. This operation can only be performed after
        disassociating other entities like users and identity providers from a
        realm.
      operationId: deleteRealm
      responses:
        '204':
          description: No Content
          content: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.realms.manage
      tags:
        - Realm
    parameters:
      - $ref: '#/components/parameters/pathRealmId'
components:
  schemas:
    Realm:
      type: object
      properties:
        created:
          type: string
          format: date-time
          description: Timestamp when the realm was created
          readOnly: true
        id:
          type: string
          description: Unique ID for the realm
          readOnly: true
        isDefault:
          type: boolean
          description: >-
            Indicates the default realm. Existing users will start out in the
            default realm and can be moved to other realms individually or
            through realm assignments. See [Realms Assignments
            API](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/RealmAssignment/).
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          description: Timestamp when the realm was updated
          readOnly: true
        profile:
          $ref: '#/components/schemas/RealmProfile'
        _links:
          $ref: '#/components/schemas/LinksSelf'
    Error:
      title: Error
      type: object
      properties:
        errorCauses:
          type: array
          items:
            $ref: '#/components/schemas/ErrorCause'
        errorCode:
          type: string
          description: An Okta code for this type of error
        errorId:
          type: string
          description: >-
            A unique identifier for this error. This can be used by Okta Support
            to help with troubleshooting.
        errorLink:
          type: string
          description: An Okta code for this type of error
        errorSummary:
          type: string
          description: >-
            A short description of what caused this error. Sometimes this
            contains dynamically-generated information about your specific
            error.
    CreateRealmRequest:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/RealmProfile'
    UpdateRealmRequest:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/RealmProfile'
    RealmProfile:
      type: object
      properties:
        domains:
          type: array
          description: >-
            Array of allowed domains. No user in this realm can be created or
            updated unless they have a username and email from one of these
            domains.


            The following characters aren't allowed in the domain name:
            `!$%^&()=*+,:;<>'[]|/?\`
        name:
          type: string
          description: Name of a realm
        realmType:
          type: string
          description: >-
            Used to store partner users. This property must be set to `PARTNER`
            to access Okta's external partner portal.
          enum:
            - PARTNER
            - DEFAULT
          x-enumDescriptions:
            PARTNER: Realm with external partner portal
            DEFAULT: Default
      required:
        - name
    LinksSelf:
      description: >-
        Specifies link relations (see [Web
        Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the
        [JSON Hypertext Application
        Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06)
        specification. This object is used for dynamic discovery of related
        resources and lifecycle operations.
      type: object
      properties:
        self:
          $ref: '#/components/schemas/HrefObjectSelfLink'
      readOnly: true
    ErrorCause:
      type: object
      properties:
        errorSummary:
          type: string
    HrefObjectSelfLink:
      allOf:
        - $ref: '#/components/schemas/HrefObject'
        - description: Link to the resource (self)
    HrefObject:
      title: Link Object
      additionalProperties: true
      type: object
      properties:
        hints:
          $ref: '#/components/schemas/HrefHints'
          readOnly: true
        href:
          type: string
          description: Link URI
        name:
          type: string
          description: Link name
          readOnly: true
        templated:
          type: boolean
          description: >-
            Indicates whether the link object's `href` property is a URI
            template.
          readOnly: true
        type:
          type: string
          description: >-
            The media type of the link. If omitted, it is implicitly
            `application/json`.
          readOnly: true
      required:
        - href
    HrefHints:
      description: Describes allowed HTTP verbs for the `href`
      type: object
      properties:
        allow:
          type: array
          items:
            $ref: '#/components/schemas/HttpMethod'
    HttpMethod:
      type: string
      enum:
        - DELETE
        - GET
        - POST
        - PUT
  responses:
    ErrorTooManyRequests429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            TooManyRequests:
              $ref: '#/components/examples/ErrorTooManyRequests'
    ErrorApiValidationFailed400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            APIValidationFailed:
              $ref: '#/components/examples/ErrorApiValidationFailed'
    ErrorAccessDenied403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            AccessDenied:
              $ref: '#/components/examples/ErrorAccessDenied'
    ErrorResourceNotFound404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            ResourceNotFound:
              $ref: '#/components/examples/ErrorResourceNotFound'
  parameters:
    queryAfter:
      name: after
      in: query
      schema:
        type: string
      description: >-
        The cursor to use for pagination. It is an opaque string that specifies
        your current location in the list and is obtained from the `Link`
        response header. See
        [Pagination](https://developer.okta.com/docs/api/#pagination).
    pathRealmId:
      name: realmId
      description: ID of the realm
      in: path
      required: true
      schema:
        type: string
        example: vvrcFogtKCrK9aYq3fgV
  examples:
    ListRealmsResponse:
      value:
        - id: guox9jQ16k9V8IFEL0g3
          created: '2022-04-04T15:56:05.000Z'
          lastUpdated: '2022-05-05T18:15:44.000Z'
          isDefault: false
          profile:
            name: Car Co
            realmType: PARTNER
            domains:
              - atko.com
              - user.com
          _links:
            self:
              rel: self
              href: >-
                http://your-subdomain.okta.com/api/v1/realms/guox9jQ16k9V8IFEL0g3
              method: GET
    CreateRealmRequest:
      value:
        profile:
          name: Car Co
          realmType: PARTNER
          domains:
            - atko.com
            - user.com
    DefaultRealmResponse:
      value:
        id: guox9jQ16k9V8IQWL0g3
        created: '2022-04-04T15:56:05.000Z'
        lastUpdated: '2022-05-05T18:15:44.000Z'
        isDefault: true
        profile:
          name: Default realm
        _links:
          self:
            rel: self
            href: http://your-subdomain.okta.com/api/v1/realms/guox9jQ16k9V8IQWL0g3
            method: GET
    RealmResponse:
      value:
        id: guox9jQ16k9V8IFEL0g3
        created: '2022-04-04T15:56:05.000Z'
        lastUpdated: '2022-05-05T18:15:44.000Z'
        isDefault: false
        profile:
          name: Car Co
          domains:
            - atko.com
            - user.com
        _links:
          self:
            rel: self
            href: http://your-subdomain.okta.com/api/v1/realms/guox9jQ16k9V8IFEL0g3
            method: GET
    ErrorTooManyRequests:
      summary: Too Many Requests
      value:
        errorCode: E0000047
        errorSummary: API call exceeded rate limit due to too many requests.
        errorLink: E0000047
        errorId: sampleQPivGUj_ND5v78vbYWW
        errorCauses: []
    ErrorApiValidationFailed:
      summary: API Validation Failed
      value:
        errorCode: E0000001
        errorSummary: 'Api validation failed: {0}'
        errorLink: E0000001
        errorId: sampleiCF-8D5rLW6myqiPItW
        errorCauses: []
    ErrorAccessDenied:
      summary: Access Denied
      value:
        errorCode: E0000006
        errorSummary: You do not have permission to perform the requested action
        errorLink: E0000006
        errorId: sampleNUSD_8fdkFd8fs8SDBK
        errorCauses: []
    ErrorResourceNotFound:
      summary: Resource Not Found
      value:
        errorCode: E0000007
        errorSummary: 'Not found: {0}'
        errorLink: E0000007
        errorId: sampleMlLvGUj_YD5v16vkYWY
        errorCauses: []
  x-stackQL-resources:
    realms:
      id: okta.realms.realms
      name: realms
      title: Realms
      methods:
        list_realms:
          operation:
            $ref: '#/paths/~1api~1v1~1realms/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_realm:
          operation:
            $ref: '#/paths/~1api~1v1~1realms/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_realm:
          operation:
            $ref: '#/paths/~1api~1v1~1realms~1{realmId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        replace_realm:
          operation:
            $ref: '#/paths/~1api~1v1~1realms~1{realmId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_realm:
          operation:
            $ref: '#/paths/~1api~1v1~1realms~1{realmId}/delete'
          response:
            mediaType: ''
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/realms/methods/list_realms'
          - $ref: '#/components/x-stackQL-resources/realms/methods/get_realm'
        insert:
          - $ref: '#/components/x-stackQL-resources/realms/methods/create_realm'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/realms/methods/delete_realm'
        replace:
          - $ref: '#/components/x-stackQL-resources/realms/methods/replace_realm'
servers:
  - url: https://{subdomain}.okta.com/
    variables:
      subdomain:
        default: my-org
        description: >-
          The domain of your organization. This can be a provided subdomain of
          an official okta domain (okta.com, oktapreview.com, etc) or one of
          your configured custom domains.
