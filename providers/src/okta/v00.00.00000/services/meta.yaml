openapi: 3.0.3
info:
  title: meta API
  description: okta meta API
  version: 5.1.0
paths:
  /api/v1/meta/schemas/apps/{appId}/default:
    get:
      x-okta-iam-permissions:
        - okta.apps.read
        - okta.apps.manage
      x-okta-iam-admin-roles:
        - API_ACCESS_MANAGEMENT_ADMIN
        - READ_ONLY_ADMIN
        - MOBILE_ADMIN
        - ORG_ADMIN
        - APP_ADMIN
      summary: Retrieve the default app user schema for an app
      description: >-
        Retrieves the default schema for an app user.


        The [User
        Types](https://developer.okta.com/docs/apihttps://developer.okta.com/docs/api/openapi/okta-management/management/tag/UserType/)
        feature does not extend to apps. All users assigned to a given app use
        the same app user schema. Therefore, unlike the user schema operations,
        the app user schema operations all specify `default` and don't accept a
        schema ID.
      operationId: getApplicationUserSchema
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
              examples:
                Response with a subset of properties for brevity:
                  $ref: '#/components/examples/DefaultAppUserSchemaResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.schemas.read
      tags:
        - Schema
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    post:
      x-okta-iam-permissions:
        - okta.apps.manage
      x-okta-iam-admin-roles:
        - API_ACCESS_MANAGEMENT_ADMIN
        - APP_ADMIN
      summary: Update the app user profile schema for an app
      description: >-
        Updates the app user schema. This updates, adds, or removes one or more
        custom profile properties or the nullability of a base property in the
        app user schema for an app. Changing a base property's nullability (for
        example, the value of its `required` field) is allowed only if it is
        nullable in the default predefined schema for the app.


        > **Note:** You must set properties explicitly to `null` to remove them
        from the schema; otherwise, `POST` is interpreted as a partial update.


        The [User
        Types](https://developer.okta.com/docs/apihttps://developer.okta.com/docs/api/openapi/okta-management/management/tag/UserType/)
        feature does not extend to apps. All users assigned to a given app use
        the same app user schema. Therefore, unlike the user schema operations,
        the app user schema operations all specify `default` and don't accept a
        schema ID.
      operationId: updateApplicationUserProfile
      x-codegen-request-body-name: body
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
            examples:
              Add a custom property to the app user schema:
                $ref: '#/components/examples/AppUserSchemaAddRequest'
        required: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
              examples:
                Response with a subset of properties for brevity:
                  $ref: '#/components/examples/AppUserSchemaResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.schemas.manage
      tags:
        - Schema
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    parameters:
      - $ref: '#/components/parameters/pathAppId'
  /api/v1/meta/schemas/group/default:
    get:
      x-okta-iam-permissions:
        - okta.apps.manage
      x-okta-iam-admin-roles:
        - API_ACCESS_MANAGEMENT_ADMIN
        - APP_ADMIN
        - ORG_ADMIN
      summary: Retrieve the default group schema
      description: >-
        Retrieves the group schema


        The [User
        Types](https://developer.okta.com/docs/apihttps://developer.okta.com/docs/api/openapi/okta-management/management/tag/UserType/)
        feature does not extend to groups. All groups use the same group schema.
        Unlike user schema operations, group schema operations all specify
        `default` and don't accept a schema ID.
      operationId: getGroupSchema
      parameters: []
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupSchema'
              examples:
                Response with a subset of properties for brevity:
                  $ref: '#/components/examples/GroupSchemaResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.schemas.read
      tags:
        - Schema
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    post:
      x-okta-iam-permissions:
        - okta.apps.manage
      x-okta-iam-admin-roles:
        - API_ACCESS_MANAGEMENT_ADMIN
        - APP_ADMIN
        - ORG_ADMIN
      summary: Update the group profile schema
      description: >-
        Updates the group profile schema. This updates, adds, or removes one or
        more custom profile properties in a group schema. Currently Okta does
        not support changing base group profile properties.


        > **Note:** You must set properties explicitly to `null` to remove them
        from the schema; otherwise, `POST` is interpreted as a partial update.


        The [User
        Types](https://developer.okta.com/docs/apihttps://developer.okta.com/docs/api/openapi/okta-management/management/tag/UserType/)
        feature does not extend to groups. All groups use the same group schema.
        Unlike user schema operations, group schema operations all specify
        `default` and don't accept a schema ID.
      operationId: updateGroupSchema
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupSchema'
            examples:
              Add a custom property to the group schema:
                $ref: '#/components/examples/GroupSchemaAddRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupSchema'
              example:
                Response with a subset of properties for brevity:
                  $ref: '#/components/examples/GroupSchemaResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.schemas.manage
      tags:
        - Schema
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
  /api/v1/meta/schemas/logStream:
    get:
      x-okta-iam-admin-roles:
        - SUPER_ADMIN
      summary: List the log stream schemas
      description: Lists the schema for all log stream types visible for this org
      operationId: listLogStreamSchemas
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogStreamSchema'
              examples:
                All log stream schemas for your org:
                  $ref: '#/components/examples/LogStreamSchemaList'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.logStreams.read
      tags:
        - Schema
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs: []
  /api/v1/meta/schemas/logStream/{logStreamType}:
    get:
      x-okta-iam-admin-roles:
        - SUPER_ADMIN
      summary: Retrieve the log stream schema for the schema type
      description: >-
        Retrieves the schema for a log stream type. The `logStreamType` element
        in the URL specifies the log stream type, which is either
        `aws_eventbridge` or `splunk_cloud_logstreaming`. Use the
        `aws_eventbridge` literal to retrieve the AWS EventBridge type schema,
        and use the `splunk_cloud_logstreaming` literal retrieve the Splunk
        Cloud type schema.
      operationId: getLogStreamSchema
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogStreamSchema'
              examples:
                Schema for type `aws_eventbridge`:
                  $ref: '#/components/examples/LogStreamSchemaAws'
                Schema for type `splunk_cloud_logstreaming`:
                  $ref: '#/components/examples/LogStreamSchemaSplunk'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.logStreams.read
      tags:
        - Schema
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: false
        SKUs: []
    parameters:
      - $ref: '#/components/parameters/pathLogStreamType'
  /api/v1/meta/schemas/user/linkedObjects:
    get:
      x-okta-iam-permissions:
        - okta.apps.manage
      x-okta-iam-admin-roles:
        - API_ACCESS_MANAGEMENT_ADMIN
        - APP_ADMIN
        - ORG_ADMIN
      summary: List all linked object definitions
      description: Lists all Linked Object definitions
      operationId: listLinkedObjectDefinitions
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LinkedObject'
              examples:
                ListLinkedObjectsEx:
                  $ref: '#/components/examples/ListLinkedObjects'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.linkedObjects.read
      tags:
        - LinkedObject
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    post:
      x-okta-iam-permissions:
        - okta.apps.manage
      x-okta-iam-admin-roles:
        - API_ACCESS_MANAGEMENT_ADMIN
        - APP_ADMIN
        - ORG_ADMIN
      summary: Create a linked object definition
      description: Creates a Linked Object definition
      operationId: createLinkedObjectDefinition
      x-codegen-request-body-name: linkedObject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkedObject'
            examples:
              CreateLinkedObjectRequestEx:
                $ref: '#/components/examples/CreateLinkedObjectRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedObject'
              examples:
                CreateLinkedObjectResponseEx:
                  $ref: '#/components/examples/CreateLinkedObjectResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                ErrorInvalidLinkedObjectDefEx:
                  $ref: '#/components/examples/ErrorInvalidLinkedObjectDef'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.linkedObjects.manage
      tags:
        - LinkedObject
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
  /api/v1/meta/schemas/user/linkedObjects/{linkedObjectName}:
    get:
      summary: Retrieve a linked object definition
      description: Retrieves a Linked Object definition
      operationId: getLinkedObjectDefinition
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkedObject'
              examples:
                CreateLinkedObjectResponseEx:
                  $ref: '#/components/examples/CreateLinkedObjectResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.linkedObjects.read
      tags:
        - LinkedObject
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    delete:
      x-okta-iam-permissions:
        - okta.apps.manage
      x-okta-iam-admin-roles:
        - API_ACCESS_MANAGEMENT_ADMIN
        - APP_ADMIN
        - ORG_ADMIN
      summary: Delete a linked object definition
      description: >-
        Deletes the Linked Object definition specified by either the `primary`
        or `associated` name. The entire definition is removed, regardless of
        which name that you specify.
      operationId: deleteLinkedObjectDefinition
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.linkedObjects.manage
      tags:
        - LinkedObject
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    parameters:
      - $ref: '#/components/parameters/pathLinkedObjectName'
  /api/v1/meta/schemas/user/{schemaId}:
    get:
      x-okta-iam-permissions:
        - okta.apps.manage
      x-okta-iam-admin-roles:
        - API_ACCESS_MANAGEMENT_ADMIN
        - APP_ADMIN
        - ORG_ADMIN
      summary: Retrieve a user schema
      description: Retrieves the schema for a user type
      operationId: getUserSchema
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
              examples:
                Response with a subset of properties for brevity:
                  $ref: '#/components/examples/UserSchemaResponse'
                Response using default with a subset of properties for brevity:
                  $ref: '#/components/examples/UserSchemaDefaultResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.schemas.read
      tags:
        - Schema
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    post:
      x-okta-iam-admin-roles:
        - API_ACCESS_MANAGEMENT_ADMIN
        - ORG_ADMIN
        - APP_ADMIN
      summary: Update a user schema
      description: >-
        Updates a user schema. Use this request to update, add, or remove one or
        more profile properties in a user schema. If you specify `default` for
        the `schemaId`, updates will apply to the default user type.


        Unlike custom user profile properties, limited changes are allowed to
        base user profile properties (permissions, nullability of the
        `firstName` and `lastName` properties, or pattern for `login`).

        You can't remove a property from the default schema if it's being
        referenced as a
        [`matchAttribute`](https://developer.okta.com/docs/api/openapi/okta-management/management/tag/IdentityProvider/#tag/IdentityProvider/operation/createIdentityProvider!path=policy/subject/matchAttribute&t=request)
        in `SAML2` IdPs.

        Currently, all validation of SAML assertions are only performed against
        the default user type.


        > **Note:** You must set properties explicitly to `null` to remove them
        from the schema; otherwise, `POST` is interpreted as a partial update.
      operationId: updateUserProfile
      x-codegen-request-body-name: userSchema
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSchema'
            examples:
              Add a custom property to the user schema:
                $ref: '#/components/examples/UserSchemaAddRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchema'
              examples:
                Response with a subset of properties for brevity:
                  $ref: '#/components/examples/UserSchemaResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.schemas.manage
      tags:
        - Schema
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    parameters:
      - $ref: '#/components/parameters/pathSchemaId'
  /api/v1/meta/types/user:
    get:
      summary: List all user types
      description: Lists all user types in your org
      operationId: listUserTypes
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserType'
              examples:
                ListsAllUserTypes:
                  $ref: '#/components/examples/ListsAllUserTypes'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.userTypes.read
      tags:
        - UserType
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    post:
      summary: Create a user type
      description: >-
        Creates a new user type. Okta automatically creates a `default` user
        type for your org. You may add up to nine additional user types.

        > **Note**: New user types are based on the current default schema
        template. Modifications to this schema do not automatically propagate to
        previously created user types.
      operationId: createUserType
      x-codegen-request-body-name: userType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserType'
            examples:
              CreateUserRequest:
                $ref: '#/components/examples/CreateUserRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserType'
              examples:
                CreateUserResponse:
                  $ref: '#/components/examples/CreateUserResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.userTypes.manage
      tags:
        - UserType
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
  /api/v1/meta/types/user/{typeId}:
    get:
      summary: Retrieve a user type
      description: >-
        Retrieves a user type by ID. Use `default` to fetch the default user
        type.
      operationId: getUserType
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserType'
              examples:
                GetUserResponse:
                  $ref: '#/components/examples/GetUserResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.userTypes.read
      tags:
        - UserType
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    post:
      summary: Update a user type
      description: >-
        Updates an existing user type. This operation is a partial update.

        > **Note**: You can only update the `displayName` and `description`
        elements. The `name` of an existing user type can't be changed.
      operationId: updateUserType
      x-codegen-request-body-name: userType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTypePostRequest'
            examples:
              UpdateUserTypePostRequest:
                $ref: '#/components/examples/UpdateUserTypePostRequest'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserType'
              examples:
                UpdateUserTypePutRequest:
                  $ref: '#/components/examples/UpdateUserTypePostResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.userTypes.manage
      tags:
        - UserType
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    put:
      summary: Replace a user type
      description: >-
        Replaces an existing user type. This operation is a full update.

        > **Note**: The `name` of an existing user type can't be changed, but
        must be part of the request body. You can only replace the `displayName`
        and `description` elements.
      operationId: replaceUserType
      x-codegen-request-body-name: userType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserTypePutRequest'
            examples:
              ReplaceUserTypePutRequest:
                $ref: '#/components/examples/ReplaceUserTypePutRequest'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserType'
              examples:
                ReplaceUserTypePutResponse:
                  $ref: '#/components/examples/ReplaceUserTypePutResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.userTypes.manage
      tags:
        - UserType
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    delete:
      summary: Delete a user type
      description: >-
        Deletes a user type permanently.

        > **Note**: You can't delete the default user type or a user type that
        is currently assigned to users.
      operationId: deleteUserType
      responses:
        '204':
          description: No Content
          content: {}
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.userTypes.manage
      tags:
        - UserType
      x-okta-lifecycle:
        lifecycle: GA
        isGenerallyAvailable: true
    parameters:
      - $ref: '#/components/parameters/pathTypeId'
  /api/v1/meta/uischemas:
    get:
      summary: List all UI schemas
      description: Lists all UI Schemas in your org
      operationId: listUISchemas
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UISchemasResponseObject'
              examples:
                UIISchemaList:
                  summary: Lists all UI schemas response
                  $ref: '#/components/examples/ListUISchemaResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.uischemas.read
      tags:
        - UISchema
      x-okta-lifecycle:
        lifecycle: LIMITED_GA
        isGenerallyAvailable: false
        SKUs:
          - Okta Identity Engine
    post:
      summary: Create a UI schema
      description: Creates an input for an enrollment form
      operationId: createUISchema
      x-codegen-request-body-name: uischemabody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUISchema'
            examples:
              UISchemaCreate:
                $ref: '#/components/examples/CreateUISchemaBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UISchemasResponseObject'
              examples:
                UISchemaCreate:
                  $ref: '#/components/examples/CreateUISchemaResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.uischemas.manage
      tags:
        - UISchema
      x-okta-lifecycle:
        lifecycle: LIMITED_GA
        isGenerallyAvailable: false
        SKUs:
          - Okta Identity Engine
  /api/v1/meta/uischemas/{id}:
    get:
      summary: Retrieve a UI schema
      description: Retrieves a UI Schema by `id`
      operationId: getUISchema
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UISchemasResponseObject'
              examples:
                UISchemaRetrieve:
                  summary: Retrieves a UI schema response
                  $ref: '#/components/examples/RetrieveUISchemaResponse'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.uischemas.read
      tags:
        - UISchema
      x-okta-lifecycle:
        lifecycle: LIMITED_GA
        isGenerallyAvailable: false
        SKUs:
          - Okta Identity Engine
    put:
      summary: Replace a UI schema
      description: Replaces a UI Schema by `id`
      operationId: replaceUISchemas
      x-codegen-request-body-name: updateUISchemaBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUISchema'
            examples:
              UISchemaPUT:
                $ref: '#/components/examples/CreateUISchemaBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UISchemasResponseObject'
              examples:
                UISchemaUpdate:
                  $ref: '#/components/examples/CreateUISchemaResponse'
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.uischemas.manage
      tags:
        - UISchema
      x-okta-lifecycle:
        lifecycle: LIMITED_GA
        isGenerallyAvailable: false
        SKUs:
          - Okta Identity Engine
    delete:
      summary: Delete a UI schema
      description: Deletes a UI Schema by `id`
      operationId: deleteUISchemas
      responses:
        '204':
          description: No Content
          content: {}
        '400':
          $ref: '#/components/responses/ErrorApiValidationFailed400'
        '403':
          $ref: '#/components/responses/ErrorAccessDenied403'
        '404':
          $ref: '#/components/responses/ErrorResourceNotFound404'
        '429':
          $ref: '#/components/responses/ErrorTooManyRequests429'
      security:
        - apiToken: []
        - oauth2:
            - okta.uischemas.manage
      tags:
        - UISchema
      x-okta-lifecycle:
        lifecycle: LIMITED_GA
        isGenerallyAvailable: false
        SKUs:
          - Okta Identity Engine
    parameters:
      - $ref: '#/components/parameters/UISchemaId'
components:
  schemas:
    UserSchema:
      type: object
      properties:
        $schema:
          type: string
          readOnly: true
          description: JSON schema version identifier
        created:
          type: string
          readOnly: true
          description: Timestamp when the schema was created
        definitions:
          allOf:
            - $ref: '#/components/schemas/UserSchemaDefinitions'
          description: >-
            User profile subschemas


            The profile object for a user is defined by a composite schema of
            base and custom properties using a JSON path to reference
            subschemas. The `#base` properties are defined and versioned by
            Okta, while `#custom` properties are extensible. Custom property
            names for the profile object must be unique and can't conflict with
            a property name defined in the `#base` subschema.
        id:
          type: string
          readOnly: true
          description: URI of user schema
        lastUpdated:
          type: string
          readOnly: true
          description: Timestamp when the schema was last updated
        name:
          type: string
          readOnly: true
          description: Name of the schema
        properties:
          allOf:
            - $ref: '#/components/schemas/UserSchemaProperties'
          description: User Object Properties
        title:
          type: string
          description: User-defined display name for the schema
        type:
          type: string
          readOnly: true
          description: >-
            Type of [root
            schema](https://tools.ietf.org/html/draft-zyp-json-schema-04#section-3.4)
        _links:
          $ref: '#/components/schemas/LinksSelf'
    GroupSchema:
      type: object
      properties:
        $schema:
          readOnly: true
          type: string
          description: JSON schema version identifier
        created:
          readOnly: true
          type: string
          description: Timestamp when the schema was created
        definitions:
          $ref: '#/components/schemas/GroupSchemaDefinitions'
        description:
          type: string
          description: Description for the schema
        id:
          readOnly: true
          type: string
          description: URI of group schema
        lastUpdated:
          readOnly: true
          type: string
          description: Timestamp when the schema was last updated
        name:
          readOnly: true
          type: string
          description: Name of the schema
        properties:
          $ref: '#/components/schemas/UserSchemaProperties'
          description: Group object properties
        title:
          type: string
          description: User-defined display name for the schema
        type:
          readOnly: true
          type: string
          description: >-
            Type of [root
            schema](https://tools.ietf.org/html/draft-zyp-json-schema-04#section-3.4)
        _links:
          $ref: '#/components/schemas/LinksSelf'
      x-okta-allow-null-property-value-for-updates: true
    LogStreamSchema:
      type: object
      properties:
        $schema:
          type: string
          readOnly: true
          description: JSON schema version identifier
        errorMessage:
          type: object
          description: >-
            A collection of error messages for individual properties in the
            schema. Okta implements a subset of
            [ajv-errors](https://github.com/ajv-validator/ajv-errors).
        id:
          type: string
          readOnly: true
          description: URI of log stream schema
        oneOf:
          items:
            $ref: '#/components/schemas/UserSchemaAttributeEnum'
          type: array
          nullable: true
          description: >-
            Non-empty array of valid JSON schemas.


            Okta only supports `oneOf` for specifying display names for an
            `enum`. Each schema has the following format:


            ```

            {
              "const": "enumValue",
              "title": "display name"
            }

            ```
        pattern:
          type: string
          description: >-
            For `string` log stream schema property type, specifies the regular
            expression used to validate the property
        properties:
          type: object
          description: log stream schema properties object
        required:
          type: array
          items:
            type: string
          description: Required properties for this log stream schema object
        title:
          type: string
          description: Name of the log streaming integration
        type:
          type: string
          readOnly: true
          description: Type of log stream schema property
        _links:
          $ref: '#/components/schemas/LinksSelf'
    LinkedObject:
      title: LinkedObject
      type: object
      properties:
        associated:
          $ref: '#/components/schemas/LinkedObjectDetails'
        primary:
          $ref: '#/components/schemas/LinkedObjectDetails'
        _links:
          $ref: '#/components/schemas/LinkedObjectLinksSelf'
    Error:
      title: Error
      type: object
      properties:
        errorCauses:
          type: array
          items:
            $ref: '#/components/schemas/ErrorCause'
        errorCode:
          type: string
          description: An Okta code for this type of error
        errorId:
          type: string
          description: >-
            A unique identifier for this error. This can be used by Okta Support
            to help with troubleshooting.
        errorLink:
          type: string
          description: An Okta code for this type of error
        errorSummary:
          type: string
          description: >-
            A short description of what caused this error. Sometimes this
            contains dynamically-generated information about your specific
            error.
    UserType:
      type: object
      properties:
        created:
          type: string
          format: date-time
          description: A timestamp from when the user type was created
          readOnly: true
        createdBy:
          type: string
          description: The user ID of the account that created the user type
          readOnly: true
        default:
          type: boolean
          description: A boolean value to indicate if this is the default user type
          readOnly: true
        description:
          type: string
          description: The human-readable description of the user type
        displayName:
          type: string
          description: The human-readable name of the user type
        id:
          type: string
          description: The unique key for the user type
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          description: A timestamp from when the user type was most recently updated
          readOnly: true
        lastUpdatedBy:
          type: string
          description: The user ID of the most recent account to edit the user type
          readOnly: true
        name:
          type: string
          description: >-
            The name of the user type. The name must start with A-Z or a-z and
            contain only A-Z, a-z, 0-9, or underscore (_) characters. This value
            becomes read-only after creation and can't be updated.
        _links:
          $ref: '#/components/schemas/UserTypeLinks'
      required:
        - name
        - displayName
    UserTypePostRequest:
      type: object
      properties:
        description:
          type: string
          description: The updated human-readable description of the user type
        displayName:
          type: string
          description: The updated human-readable display name for the user type
    UserTypePutRequest:
      type: object
      properties:
        description:
          type: string
          description: The human-readable description of the user type
        displayName:
          type: string
          description: The human-readable name of the user type
        name:
          type: string
          description: The name of the existing type
      required:
        - name
        - displayName
        - description
    UISchemasResponseObject:
      type: object
      properties:
        created:
          type: string
          format: date-time
          description: Timestamp when the UI Schema was created (ISO 86001)
          readOnly: true
        id:
          type: string
          description: Unique identifier for the UI Schema
          readOnly: true
        lastUpdated:
          type: string
          format: date-time
          description: Timestamp when the UI Schema was last modified (ISO 86001)
          readOnly: true
        uiSchema:
          $ref: '#/components/schemas/UISchemaObject'
        _links:
          $ref: '#/components/schemas/LinksSelf'
      required:
        - id
        - uiSchema
        - created
        - lastUpdated
        - _links
    CreateUISchema:
      description: The request body properties for the new UI Schema
      type: object
      properties:
        uiSchema:
          $ref: '#/components/schemas/UISchemaObject'
    UpdateUISchema:
      description: The updated request body properties
      type: object
      properties:
        uiSchema:
          $ref: '#/components/schemas/UISchemaObject'
    UserSchemaDefinitions:
      type: object
      properties:
        base:
          $ref: '#/components/schemas/UserSchemaBase'
        custom:
          $ref: '#/components/schemas/UserSchemaPublic'
    UserSchemaProperties:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/UserSchemaPropertiesProfile'
    LinksSelf:
      description: >-
        Specifies link relations (see [Web
        Linking](https://www.rfc-editor.org/rfc/rfc8288)) available using the
        [JSON Hypertext Application
        Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06)
        specification. This object is used for dynamic discovery of related
        resources and lifecycle operations.
      type: object
      properties:
        self:
          $ref: '#/components/schemas/HrefObjectSelfLink'
      readOnly: true
    GroupSchemaDefinitions:
      type: object
      properties:
        base:
          $ref: '#/components/schemas/GroupSchemaBase'
        custom:
          $ref: '#/components/schemas/GroupSchemaCustom'
    UserSchemaAttributeEnum:
      type: object
      properties:
        const:
          type: string
          description: The enumerated value
        title:
          type: string
          description: The display label for the enumerated value
    LogStreamType:
      description: >-
        Specifies the streaming provider used


        Supported providers:
          * `aws_eventbridge` ([AWS EventBridge](https://aws.amazon.com/eventbridge))
          * `splunk_cloud_logstreaming` ([Splunk Cloud](https://www.splunk.com/en_us/software/splunk-cloud-platform.html))

        Select the provider type to see provider-specific configurations in the
        `settings` property:
      type: string
      enum:
        - aws_eventbridge
        - splunk_cloud_logstreaming
    LinkedObjectDetails:
      title: LinkedObjectDetails
      type: object
      properties:
        description:
          type: string
          description: Description of the `primary` or the `associated` relationship
        name:
          type: string
          description: >-
            API name of the `primary` or the `associated` link. The `name`
            parameter can't start with a number and can only contain the
            following characters: `a-z`, `A-Z`,` 0-9`, and `_`.
        title:
          type: string
          description: Display name of the `primary` or the `associated` link
        type:
          $ref: '#/components/schemas/LinkedObjectDetailsType'
      required:
        - name
        - title
        - type
    LinkedObjectLinksSelf:
      description: >-
        Specifies link relations (see [Web
        Linking](https://www.rfc-editor.org/rfc/rfc8288)) available for the
        current status of an application using the [JSON Hypertext Application
        Language](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal-06)
        specification. This object is used for dynamic discovery of related
        resources and lifecycle operations.
      type: object
      properties:
        self:
          $ref: '#/components/schemas/LinkedHrefObject'
    ErrorCause:
      type: object
      properties:
        errorSummary:
          type: string
    UserTypeLinks:
      allOf:
        - $ref: '#/components/schemas/LinksSelf'
        - type: object
          properties:
            schema:
              allOf:
                - $ref: '#/components/schemas/HrefObject'
                - description: The associated schema
    UISchemaObject:
      description: Properties of the UI schema
      type: object
      properties:
        buttonLabel:
          type: string
          description: >-
            Specifies the button label for the `Submit` button at the bottom of
            the enrollment form
          default: Submit
        elements:
          $ref: '#/components/schemas/UIElement'
        label:
          type: string
          description: Specifies the label at the top of the enrollment form under the logo
          default: Sign in
        type:
          type: string
          description: Specifies the type of layout
    UserSchemaBase:
      description: >-
        All Okta-defined profile properties are defined in a profile subschema
        with the resolution scope `#base`. You can't modify these properties,
        except to update permissions, to change the nullability of `firstName`
        and `lastName`, or to specify a pattern for `login`. They can't be
        removed.


        The base user profile is based on the [System for Cross-domain Identity
        Management: Core
        Schema](https://tools.ietf.org/html/draft-ietf-scim-core-schema-22#section-4.1.1)
        and has the standard properties detailed below.
      type: object
      properties:
        id:
          type: string
          description: The subschema name
          readOnly: true
        properties:
          description: The `#base` object properties
          allOf:
            - $ref: '#/components/schemas/UserSchemaBaseProperties'
        required:
          type: array
          description: A collection indicating required property names
          readOnly: true
          items:
            type: string
        type:
          type: string
          description: The object type
          readOnly: true
    UserSchemaPublic:
      description: >-
        All custom profile properties are defined in a profile subschema with
        the resolution scope `#custom`.


        > **Notes:** 

        > * When you refer to custom profile attributes that differ only by
        case, name collisions occur. This includes naming custom profile
        attributes the same as base profile attributes, for example, `firstName`
        and `FirstName`.

        > * Certain attributes are reserved and can't be used for custom user
        profiles. See [Review reserved
        attributes](https://help.okta.com/okta_help.htm?type=oie&id=reserved-attributes).
      type: object
      properties:
        id:
          type: string
          description: The subschema name
          readOnly: true
        properties:
          type: object
          description: The `#custom` object properties
          additionalProperties:
            $ref: '#/components/schemas/UserSchemaAttribute'
        required:
          type: array
          description: A collection indicating required property names
          readOnly: true
          items:
            type: string
        type:
          type: string
          description: The object type
          readOnly: true
    UserSchemaPropertiesProfile:
      type: object
      properties:
        allOf:
          type: array
          items:
            $ref: '#/components/schemas/UserSchemaPropertiesProfileItem'
    HrefObjectSelfLink:
      allOf:
        - $ref: '#/components/schemas/HrefObject'
        - description: Link to the resource (self)
    GroupSchemaBase:
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: The subschema name
        properties:
          description: The `#base` object properties
          allOf:
            - $ref: '#/components/schemas/GroupSchemaBaseProperties'
        required:
          items:
            type: string
          type: array
          description: A collection indicating required property names
          readOnly: true
        type:
          description: The object type
          type: string
          readOnly: true
    GroupSchemaCustom:
      description: >-
        All custom profile properties are defined in a profile subschema with
        the resolution scope `#custom`
      type: object
      properties:
        id:
          readOnly: true
          type: string
          description: The subschema name
        properties:
          additionalProperties:
            $ref: '#/components/schemas/GroupSchemaAttribute'
          type: object
          description: The `#custom` object properties
        required:
          items:
            type: string
          type: array
          description: A collection indicating required property names
          readOnly: true
        type:
          type: string
          description: The object type
          readOnly: true
    LinkedObjectDetailsType:
      description: The object type for this relationship
      type: string
      enum:
        - USER
      x-enumDescriptions:
        USER: Specifies the type of object
    LinkedHrefObject:
      title: Link Object
      additionalProperties: true
      type: object
      properties:
        href:
          type: string
          description: Link URI
      required:
        - href
      readOnly: true
    HrefObject:
      title: Link Object
      additionalProperties: true
      type: object
      properties:
        hints:
          $ref: '#/components/schemas/HrefHints'
          readOnly: true
        href:
          type: string
          description: Link URI
        name:
          type: string
          description: Link name
          readOnly: true
        templated:
          type: boolean
          description: >-
            Indicates whether the link object's `href` property is a URI
            template.
          readOnly: true
        type:
          type: string
          description: >-
            The media type of the link. If omitted, it is implicitly
            `application/json`.
          readOnly: true
      required:
        - href
    UIElement:
      description: Specifies the configuration of an input field on an enrollment form
      type: object
      properties:
        label:
          type: string
          description: Label name for the UI element
        options:
          type: object
          description: UI Schema element options object
          properties:
            format:
              type: string
              description: Specifies how the input appears
              enum:
                - text
                - radio
                - select
                - checkbox
                - radio_yes_no
                - radio_true_false
              x-enumDescriptions:
                text: The default format for the majority of property types
                radio: >-
                  Radio button options. This option is only available for
                  `string` data types with an `enum` or `one of` constraint.
                select: >-
                  Displays input as a dropdown list. This option is only
                  available for the `country-code` data type or a string data
                  type with an enum or one of constraint.
                checkbox: >-
                  Displays input as a checkbox. This option is only available
                  for Boolean data types.
                radio_yes_no: >-
                  Displays input as two radio buttons, one with the option `yes`
                  and the other `no`. This option is only available for Boolean
                  data types.
                radio_true_false: >-
                  Displays input as two radio buttons, one with the option
                  `true` and the other `false`. This option is only available
                  for Boolean data types.
        scope:
          type: string
          description: >-
            Specifies the property bound to the input field. It must follow the
            format `#/properties/PROPERTY_NAME` where `PROPERTY_NAME` is a
            variable name for an attribute in `profile editor`.
        type:
          type: string
          description: >-
            Specifies the relationship between this input element and `scope`.
            The `Control` value specifies that this input controls the value
            represented by `scope`.
    UserSchemaBaseProperties:
      type: object
      properties:
        city:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: City or locality component of the user's address (`locality`)
        costCenter:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Name of a cost center assigned to the user
        countryCode:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: >-
            Country name component of the user's address (`country`.) This
            property uses [ISO 3166-1 alpha 2 "short" code
            format](https://tools.ietf.org/html/draft-ietf-scim-core-schema-22#ref-ISO3166).
        department:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Name of the user's department
        displayName:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Name of the user, suitable for display to end users
        division:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Name of the user's division
        email:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: >-
            Primary email address of the user. This property is formatted
            according to [RFC 5322 Section
            3.2.3](https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.3).
        employeeNumber:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Organization or company assigned unique identifier for the user
        firstName:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Given name of the user (`givenName`)
        honorificPrefix:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Honorific prefix(es) of the user or title in most Western languages
        honorificSuffix:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Honorific suffix(es) of the user
        lastName:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Family name of the user (`familyName`)
        locale:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: >-
            User's default location for purposes of localizing items such as
            currency, date time format, numerical representations, and so on.


            A locale value is a concatenation of the ISO 639-1 two-letter
            language code, an underscore, and the ISO 3166-1 two-letter country
            code. For example: `en_US` specifies the language English and
            country US. This value is `en_US` by default.
        login:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: >-
            Unique identifier for the user (`userName`)


            The login property is validated according to its pattern attribute,
            which is a string. By default, the attribute is null. When the
            attribute is null, the username is required to be formatted as an
            email address as defined by [RFC 6531 Section
            3.3](http://tools.ietf.org/html/rfc6531#section-3.3). The pattern
            can be set through the API to one of the following forms. (The Admin
            Console provides access to the same forms.)
              * A login pattern of `".+"` indicates that there is no restriction on usernames. Any non-empty, unique value is permitted, and the minimum length of five isn't enforced. In this case, usernames don't need to include the `@` character. If a name does include `@`, the portion ahead of the `@` can be used for logging in, provided it identifies a unique user within the org.
              * A login pattern of the form `"[...]+"` indicates that usernames must only contain characters from the set given between the brackets. The enclosing brackets and final `+` are required for this form. Character ranges can be indicated using hyphens. To include the hyphen itself in the allowed set, the hyphen must appear first. Any characters in the set except the hyphen, a-z, A-Z, and 0-9 must be preceded by a backslash (`\`). For example, `"[a-z13579\.]+"` would restrict usernames to lowercase letters, odd digits, and periods, while `"[-a-zA-Z0-9]+"` would allow basic alphanumeric characters and hyphens.
        manager:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: The `displayName` of the user's manager
        managerId:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: The `id` of the user's manager
        middleName:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Middle name(s) of the user
        mobilePhone:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Mobile phone number of the user
        nickName:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Casual way to address the user in real life
        organization:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Name of the user's organization
        postalAddress:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Mailing address component of the user's address
        preferredLanguage:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: >-
            User's preferred written or spoken languages. This property is
            formatted according to [RFC 7231 Section
            5.3.5](https://tools.ietf.org/html/rfc7231#section-5.3.5).
        primaryPhone:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Primary phone number of the user, such as home number
        profileUrl:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: >-
            URL of the user's online profile (for example, a web page.) This
            property is formatted according to the [Relative Uniform Resource
            Locators
            specification](https://tools.ietf.org/html/draft-ietf-scim-core-schema-22#ref-ISO3166).
        secondEmail:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: >-
            Secondary email address of the user typically used for account
            recovery. This property is formatted according to [RFC 5322 Section
            3.2.3](https://datatracker.ietf.org/doc/html/rfc5322#section-3.2.3).
        state:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: State or region component of the user's address (`region`)
        streetAddress:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: Full street address component of the user's address
        timezone:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: >-
            User's time zone. This property is formatted according to the [IANA
            Time Zone database format](https://tools.ietf.org/html/rfc6557).
        title:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: User's title, such as "Vice President"
        userType:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: >-
            Used to describe the organization to the user relationship such as
            "Employee" or "Contractor".


            **Note:** The `userType` field is an arbitrary string value and
            isn't related to the newer [User
            Types](https://developer.okta.com/docs/apihttps://developer.okta.com/docs/api/openapi/okta-management/management/tag/UserType/)
            feature.
        zipCode:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttribute'
          description: >-
            ZIP code or postal code component of the user's address
            (`postalCode`)
    UserSchemaAttribute:
      type: object
      properties:
        default:
          oneOf:
            - type: string
            - type: boolean
            - type: integer
            - type: array
            - type: object
            - type: number
          description: >-
            If specified, assigns the value as the default value for the custom
            attribute. This is a nullable property. If you don't specify a value
            for this custom attribute during user creation or update, the
            `default` is used instead of setting the value to `null` or empty.
        description:
          type: string
          description: Description of the property
        enum:
          type: array
          nullable: true
          description: >-
            Enumerated value of the property.


            The value of the property is limited to one of the values specified
            in the enum definition. The list of values for the enum must consist
            of unique elements.
          items:
            anyOf:
              - type: string
              - type: integer
        externalName:
          type: string
          description: >-
            Name of the property as it exists in an external application


            **NOTE**: When you add a custom property, only Identity Provider app
            user schemas require `externalName` to be

            included in the request body. If an existing custom Identity
            Provider app user schema property has an empty

            `externalName`, requests aren't allowed to update other properties
            until the `externalName` is defined.
        externalNamespace:
          type: string
          description: Namespace from the external application
        format:
          description: Identifies the type of data represented by the string
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttributeFormat'
        master:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttributeMaster'
          description: Identifies where the property is mastered
        maxLength:
          type: integer
          description: Maximum character length of a string property
          nullable: true
        minLength:
          type: integer
          description: Minimum character length of a string property
          nullable: true
        mutability:
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttributeMutabilityString'
          description: Defines the mutability of the property
        oneOf:
          type: array
          nullable: true
          description: >-
            Non-empty array of valid JSON schemas.


            The `oneOf` key is only supported in conjunction with `enum` and
            provides a mechanism to return a display name for the `enum`
            value.<br>

            Each schema has the following format:


            ```

            {
              "const": "enumValue",
              "title": "display name"
            }

            ```


            When `enum` is used in conjunction with `oneOf`, you must keep the
            set of enumerated values and their order.<br>

            For example:


            ```

            "enum": ["S","M","L","XL"],

            "oneOf": [
                {"const": "S", "title": "Small"},
                {"const": "M", "title": "Medium"},
                {"const": "L", "title": "Large"},
                {"const": "XL", "title": "Extra Large"}
              ]
            ```
          items:
            $ref: '#/components/schemas/UserSchemaAttributeEnum'
        pattern:
          type: string
          description: >-
            For `string` property types, specifies the regular expression used
            to validate the property
        permissions:
          type: array
          nullable: true
          description: Access control permissions for the property
          items:
            $ref: '#/components/schemas/UserSchemaAttributePermission'
        required:
          type: boolean
          nullable: true
          description: Determines whether the property is required
        scope:
          $ref: '#/components/schemas/UserSchemaAttributeScope'
        title:
          type: string
          minLength: 1
          description: User-defined display name for the property
        type:
          description: Type of property
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttributeType'
        unique:
          description: Determines whether property values must be unique
          type: boolean
          nullable: true
      x-okta-allow-null-property-value-for-updates: true
    UserSchemaPropertiesProfileItem:
      type: object
      properties:
        $ref:
          type: string
    GroupSchemaBaseProperties:
      description: >-
        All Okta-defined profile properties are defined in a profile subschema
        with the resolution scope `#base`. These properties can't be removed or
        edited, regardless of any attempt to do so.
      type: object
      properties:
        description:
          description: Human readable description of the group
          allOf:
            - $ref: '#/components/schemas/GroupSchemaAttribute'
        name:
          description: Unique identifier for the group
          allOf:
            - $ref: '#/components/schemas/GroupSchemaAttribute'
    GroupSchemaAttribute:
      type: object
      properties:
        description:
          type: string
          description: Description of the property
        enum:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          nullable: true
          description: >-
            Enumerated value of the property.


            The value of the property is limited to one of the values specified
            in the enum definition. The list of values for the enum must consist
            of unique elements.
        externalName:
          type: string
          description: Name of the property as it exists in an external application
        externalNamespace:
          type: string
          description: Namespace from the external application
        format:
          description: Identifies the type of data represented by the string
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttributeFormat'
        items:
          $ref: '#/components/schemas/UserSchemaAttributeItems'
          nullable: true
        master:
          description: Identifies where the property is mastered
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttributeMaster'
        maxLength:
          type: integer
          nullable: true
          description: Maximum character length of a string property
        minLength:
          type: integer
          nullable: true
          description: Minimum character length of a string property
        mutability:
          description: Defines the mutability of the property
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttributeMutabilityString'
        oneOf:
          items:
            $ref: '#/components/schemas/UserSchemaAttributeEnum'
          type: array
          nullable: true
          description: >-
            Non-empty array of valid JSON schemas.


            The `oneOf` key is only supported in conjunction with `enum` and
            provides a mechanism to return a display name for the `enum`
            value.<br>

            Each schema has the following format:


            ```

            {
              "const": "enumValue",
              "title": "display name"
            }

            ```


            When `enum` is used in conjunction with `oneOf`, you must keep the
            set of enumerated values and their order.<br>

            For example:


            ```

            "enum": ["S","M","L","XL"],

            "oneOf": [
                {"const": "S", "title": "Small"},
                {"const": "M", "title": "Medium"},
                {"const": "L", "title": "Large"},
                {"const": "XL", "title": "Extra Large"}
              ]
            ```
        permissions:
          description: Access control permissions for the property
          items:
            $ref: '#/components/schemas/UserSchemaAttributePermission'
          type: array
          nullable: true
        required:
          type: boolean
          nullable: true
          description: Determines whether the property is required
        scope:
          description: >-
            Determines whether a group attribute can be set at the individual or
            group level
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttributeScope'
        title:
          type: string
          minLength: 1
          description: User-defined display name for the property
        type:
          description: Type of property
          allOf:
            - $ref: '#/components/schemas/UserSchemaAttributeType'
        unique:
          description: Determines whether property values must be unique
          type: boolean
          nullable: true
    HrefHints:
      description: Describes allowed HTTP verbs for the `href`
      type: object
      properties:
        allow:
          type: array
          items:
            $ref: '#/components/schemas/HttpMethod'
    UserSchemaAttributeFormat:
      type: string
      enum:
        - country-code
        - date-time
        - email
        - encrypted
        - hashed
        - language-code
        - locale
        - ref-id
        - timezone
        - uri
    UserSchemaAttributeMaster:
      nullable: true
      type: object
      properties:
        priority:
          type: array
          items:
            $ref: '#/components/schemas/UserSchemaAttributeMasterPriority'
        type:
          $ref: '#/components/schemas/UserSchemaAttributeMasterType'
    UserSchemaAttributeMutabilityString:
      type: string
      enum:
        - IMMUTABLE
        - READ_ONLY
        - READ_WRITE
        - WRITE_ONLY
    UserSchemaAttributePermission:
      type: object
      properties:
        action:
          type: string
          description: Determines whether the principal can view or modify the property
        principal:
          type: string
          description: Security principal
    UserSchemaAttributeScope:
      type: string
      enum:
        - NONE
        - SELF
    UserSchemaAttributeType:
      type: string
      enum:
        - array
        - boolean
        - integer
        - number
        - string
    UserSchemaAttributeItems:
      type: object
      properties:
        enum:
          type: array
          items:
            type: string
        oneOf:
          type: array
          items:
            $ref: '#/components/schemas/UserSchemaAttributeEnum'
        type:
          type: string
    HttpMethod:
      type: string
      enum:
        - DELETE
        - GET
        - POST
        - PUT
    UserSchemaAttributeMasterPriority:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
    UserSchemaAttributeMasterType:
      type: string
      enum:
        - OKTA
        - OVERRIDE
        - PROFILE_MASTER
  responses:
    ErrorAccessDenied403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            AccessDenied:
              $ref: '#/components/examples/ErrorAccessDenied'
    ErrorResourceNotFound404:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            ResourceNotFound:
              $ref: '#/components/examples/ErrorResourceNotFound'
    ErrorTooManyRequests429:
      description: Too Many Requests
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            TooManyRequests:
              $ref: '#/components/examples/ErrorTooManyRequests'
    ErrorApiValidationFailed400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            APIValidationFailed:
              $ref: '#/components/examples/ErrorApiValidationFailed'
  parameters:
    pathAppId:
      name: appId
      description: Application ID
      in: path
      required: true
      schema:
        type: string
        example: 0oafxqCAJWWGELFTYASJ
    pathLogStreamType:
      name: logStreamType
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/LogStreamType'
    pathLinkedObjectName:
      name: linkedObjectName
      description: Primary or Associated name
      in: path
      required: true
      schema:
        type: string
    pathSchemaId:
      name: schemaId
      description: >-
        Schema ID. You can also use `default` to refer to the default user type
        schema.
      in: path
      required: true
      schema:
        type: string
    pathTypeId:
      name: typeId
      in: path
      required: true
      schema:
        type: string
        description: The unique key for the user type
    UISchemaId:
      name: id
      description: The unique ID of the UI Schema
      in: path
      required: true
      schema:
        type: string
        example: uis4a7liocgcRgcxZ0g7
  examples:
    DefaultAppUserSchemaResponse:
      value:
        id: https://{yourOktaDomain}/meta/schemas/apps/{appId}/default
        $schema: http://json-schema.org/draft-04/schema#
        name: Example app
        title: Example app User
        lastUpdated: '2015-09-05T10:40:45.000Z'
        created: '2015-02-02T10:27:36.000Z'
        definitions:
          custom:
            id: '#custom'
            type: object
            properties: {}
          base:
            id: '#base'
            type: object
            properties:
              userName:
                title: Username
                type: string
                required: true
                scope: SELF
                master:
                  type: PROFILE_MASTER
              name:
                title: Name
                description: End-User's full name in displayable form.
                type: string
                scope: SELF
                master:
                  type: PROFILE_MASTER
              email:
                title: Email
                description: End-User's preferred email address.
                type: string
                scope: SELF
                master:
                  type: PROFILE_MASTER
            required:
              - userName
          type: object
          properties:
            profile:
              allOf:
                - $ref: '#/definitions/base'
                - $ref: '#/definitions/custom'
    AppUserSchemaAddRequest:
      value:
        definitions:
          custom:
            id: '#custom'
            type: object
            properties:
              salesforceUserName:
                title: Salesforce username
                externalName: salesforceUserName
                description: User's username for Salesforce
                type: string
                required: false
                minLength: 1
                maxLength: 20
            required: []
    AppUserSchemaResponse:
      value:
        id: >-
          https://{yourOktaDomain}/meta/schemas/apps/0oa25gejWwdXNnFH90g4/default
        $schema: http://json-schema.org/draft-04/schema#
        name: Example app
        title: Example app user
        lastUpdated: '2017-07-18T23:18:43.000Z'
        created: '2017-07-18T22:35:30.000Z'
        definitions:
          base:
            id: '#base'
            type: object
            properties:
              userName:
                title: Username
                type: string
                required: true
                scope: NONE
                maxLength: 100
            required:
              - userName
          custom:
            id: '#custom'
            type: object
            properties:
              salesforceUserName:
                title: Salesforce username
                externalName: salesforceUserName
                description: User's username for Salesforce
                type: string
                scope: NONE
                minLength: 1
                maxLength: 20
            required: []
        type: object
        properties:
          profile:
            allOf:
              - $ref: '#/definitions/base'
              - $ref: '#/definitions/custom'
    GroupSchemaResponse:
      value:
        $schema: http://json-schema.org/draft-04/schema#
        _links:
          self:
            href: https://{yourOktaDomain}/api/v1/meta/schemas/group/default
            method: GET
            rel: self
        created: '2021-01-30T00:18:24.000Z'
        definitions:
          base:
            id: '#base'
            properties: {}
            required:
              - name
            type: object
          custom:
            id: '#custom'
            properties:
              groupContact:
                description: Group administrative contact
                master:
                  type: PROFILE_MASTER
                mutability: READ_WRITE
                permissions:
                  - action: READ_WRITE
                    principal: SELF
                scope: NONE
                title: Group administrative contact
                type: string
            required: []
            type: object
        description: Okta group profile template
        id: https://{yourOktaDomain}/meta/schemas/group/default
        lastUpdated: '2021-02-25T23:05:31.000Z'
        name: group
        properties:
          profile:
            allOf:
              - $ref: '#/definitions/custom'
              - $ref: '#/definitions/base'
        title: Okta group
        type: object
    GroupSchemaAddRequest:
      value:
        definitions:
          custom:
            id: '#custom'
            type: object
            properties:
              groupContact:
                title: Group administrative contact
                description: Group administrative contact
                type: string
                required: false
                minLength: 1
                maxLength: 20
                permissions:
                  - principal: SELF
                    action: READ_WRITE
            required: []
    LogStreamSchemaList:
      value:
        - $schema: https://json-schema.org/draft/2020-12/schema
          $id: >-
            http://{yourOktaDomain}/api/v1/meta/schemas/logStream/aws_eventbridge
          title: AWS EventBridge
          type: object
          properties:
            settings:
              description: Configuration properties specific to AWS EventBridge
              type: object
              properties:
                accountId:
                  title: AWS Account ID
                  description: Your Amazon AWS Account ID.
                  type: string
                  writeOnce: true
                  pattern: ^\d{12}$
                eventSourceName:
                  title: AWS Event Source Name
                  description: >-
                    An alphanumeric name (no spaces) to identify this event
                    source in AWS EventBridge.
                  type: string
                  writeOnce: true
                  pattern: ^[\.\-_A-Za-z0-9]{1,75}$
                region:
                  title: AWS Region
                  description: The destination AWS region for your system log events.
                  type: string
                  writeOnce: true
                  oneOf:
                    - title: US East (Ohio)
                      const: us-east-2
                    - title: US East (N. Virginia)
                      const: us-east-1
                    - title: US West (N. California)
                      const: us-west-1
                    - title: US West (Oregon)
                      const: us-west-2
                    - title: Canada (Central)
                      const: ca-central-1
                    - title: Europe (Frankfurt)
                      const: eu-central-1
                    - title: Europe (Ireland)
                      const: eu-west-1
                    - title: Europe (London)
                      const: eu-west-2
                    - title: Europe (Paris)
                      const: eu-west-3
                    - title: Europe (Milan)
                      const: eu-south-1
                    - title: Europe (Stockholm)
                      const: eu-north-1
              required:
                - eventSourceName
                - accountId
                - region
              errorMessage:
                properties:
                  accountId: Account number must be 12 digits.
                  eventSourceName: >-
                    Event source name can use numbers, letters, the symbols ".",
                    "-" or "_". It must use fewer than 76 characters.
                type: object
            name:
              title: Name
              description: A name for this log stream in Okta
              type: string
              writeOnce: false
              pattern: ^.{1,100}$
          required:
            - name
            - settings
          errorMessage:
            properties:
              name: Name can't exceed 100 characters.
            type: object
        - $schema: https://json-schema.org/draft/2020-12/schema
          id: >-
            http://{yourOktaDomain}/api/v1/meta/schemas/logStream/splunk_cloud_logstreaming
          title: Splunk Cloud
          type: object
          properties:
            settings:
              description: Configuration properties specific to Splunk Cloud
              type: object
              properties:
                host:
                  title: Host
                  description: >-
                    The domain for your Splunk Cloud instance without http or
                    https. For example: acme.splunkcloud.com
                  type: string
                  writeOnce: false
                  pattern: ^([a-z0-9]+(-[a-z0-9]+)*){1,100}\.splunkcloud(gc|fed)?\.com$
                token:
                  title: HEC Token
                  description: The token from your Splunk Cloud HTTP Event Collector (HEC).
                  type: string
                  writeOnce: false
                  pattern: >-
                    [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
              required:
                - host
                - token
              errorMessage:
                properties:
                  host: >-
                    Host should be a domain without http or https. For example:
                    acme.splunkcloud.com
                type: object
            name:
              title: Name
              description: A name for this log stream in Okta
              type: string
              writeOnce: false
              pattern: ^.{1,100}$
          required:
            - name
            - settings
          errorMessage:
            properties:
              name: Name can't exceed 100 characters.
            type: object
    LogStreamSchemaAws:
      value:
        $schema: https://json-schema.org/draft/2020-12/schema
        $id: http://{yourOktaDomain}/api/v1/meta/schemas/logStream/aws_eventbridge
        title: AWS EventBridge
        type: object
        properties:
          settings:
            description: Configuration properties specific to AWS EventBridge
            type: object
            properties:
              accountId:
                title: AWS Account ID
                description: Your Amazon AWS Account ID.
                type: string
                writeOnce: true
                pattern: ^\d{12}$
              eventSourceName:
                title: AWS Event Source Name
                description: >-
                  An alphanumeric name (no spaces) to identify this event source
                  in AWS EventBridge.
                type: string
                writeOnce: true
                pattern: ^[\.\-_A-Za-z0-9]{1,75}$
              region:
                title: AWS Region
                description: The destination AWS region for your system log events.
                type: string
                writeOnce: true
                oneOf:
                  - title: US East (Ohio)
                    const: us-east-2
                  - title: US East (N. Virginia)
                    const: us-east-1
                  - title: US West (N. California)
                    const: us-west-1
                  - title: US West (Oregon)
                    const: us-west-2
                  - title: Canada (Central)
                    const: ca-central-1
                  - title: Europe (Frankfurt)
                    const: eu-central-1
                  - title: Europe (Ireland)
                    const: eu-west-1
                  - title: Europe (London)
                    const: eu-west-2
                  - title: Europe (Paris)
                    const: eu-west-3
                  - title: Europe (Milan)
                    const: eu-south-1
                  - title: Europe (Stockholm)
                    const: eu-north-1
            required:
              - eventSourceName
              - accountId
              - region
            errorMessage:
              properties:
                accountId: Account number must be 12 digits.
                eventSourceName: >-
                  Event source name can use numbers, letters, the symbols ".",
                  "-" or "_". It must use fewer than 76 characters.
              type: object
          name:
            title: Name
            description: A name for this log stream in Okta
            type: string
            writeOnce: false
            pattern: ^.{1,100}$
        required:
          - name
          - settings
        errorMessage:
          properties:
            name: Name can't exceed 100 characters.
          type: object
    LogStreamSchemaSplunk:
      value:
        $schema: https://json-schema.org/draft/2020-12/schema
        id: >-
          http://{yourOktaDomain}/api/v1/meta/schemas/logStream/splunk_cloud_logstreaming
        title: Splunk Cloud
        type: object
        properties:
          settings:
            description: Configuration properties specific to Splunk Cloud
            type: object
            properties:
              host:
                title: Host
                description: >-
                  The domain for your Splunk Cloud instance without http or
                  https. For example: acme.splunkcloud.com
                type: string
                writeOnce: false
                pattern: ^([a-z0-9]+(-[a-z0-9]+)*){1,100}\.splunkcloud(gc|fed)?\.com$
              token:
                title: HEC Token
                description: The token from your Splunk Cloud HTTP Event Collector (HEC).
                type: string
                writeOnce: false
                pattern: >-
                  [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
            required:
              - host
              - token
            errorMessage:
              properties:
                host: >-
                  Host should be a domain without http or https. For example:
                  acme.splunkcloud.com
              type: object
          name:
            title: Name
            description: A name for this log stream in Okta
            type: string
            writeOnce: false
            pattern: ^.{1,100}$
        required:
          - name
          - settings
        errorMessage:
          properties:
            name: Name can't exceed 100 characters.
          type: object
    ListLinkedObjects:
      summary: List all linked object definitions
      value:
        - primary:
            name: manager
            title: manager
            description: Manager link property
            type: USER
          associated:
            name: subordinate
            title: subordinate
            description: Subordinate link property
            type: USER
          _links:
            self:
              href: >-
                http://your-subdomain.okta.com/api/v1/meta/schemas/user/linkedObjects/manager
    CreateLinkedObjectRequest:
      summary: Create manager-subordinate link request
      value:
        primary:
          name: manager
          title: manager
          description: Manager link property
          type: USER
        associated:
          name: subordinate
          title: subordinate
          description: Subordinate link property
          type: USER
    CreateLinkedObjectResponse:
      summary: Create manager-subordinate link property response
      value:
        primary:
          name: manager
          title: manager
          description: Manager link property
          type: USER
        associated:
          name: subordinate
          title: subordinate
          description: Subordinate link property
          type: USER
        _links:
          self:
            href: >-
              http://your-subdomain.okta.com/api/v1/meta/schemas/user/linkedObjects/manager
    ErrorInvalidLinkedObjectDef:
      summary: Invalid linked objection definition
      value:
        errorCode: E0000127
        errorSummary: >-
          Invalid linked objection definition. Linked object identifier is
          already in use.
        errorLink: E0000127
        errorId: oaeh5FICFF2RnqakoNofPadhw
        errorCauses:
          - errorSummary: Linked object identifier for primary is already in use.
            reason: UNIQUE_CONSTRAINT
            locationType: body
            domain: linkedObjects
          - errorSummary: Linked object identifier for associated is already in use.
            reason: UNIQUE_CONSTRAINT
            locationType: body
            domain: linkedObjects
    UserSchemaResponse:
      value:
        id: https://{yourOktaDomain}/meta/schemas/user/oscmlha7lcRyMn82P1d7
        $schema: http://json-schema.org/draft-04/schema#
        name: user
        title: An Okta user
        lastUpdated: '2015-09-05T10:40:45.000Z'
        created: '2015-02-02T10:27:36.000Z'
        definitions:
          base:
            id: '#base'
            type: object
            properties:
              login:
                title: Username
                type: string
                required: true
                minLength: 5
                maxLength: 100
                permissions:
                  - principal: SELF
                    action: READ_WRITE
              firstName:
                title: First name
                type: string
                required: true
                minLength: 1
                maxLength: 50
                permissions:
                  - principal: SELF
                    action: READ_WRITE
              lastName:
                title: Last name
                type: string
                required: true
                minLength: 1
                maxLength: 50
                permissions:
                  - principal: SELF
                    action: READ_WRITE
              email:
                title: Primary email
                type: string
                required: true
                format: email
                permissions:
                  - principal: SELF
                    action: READ_WRITE
            required:
              - login
              - firstName
              - lastName
              - email
          custom:
            id: '#custom'
            type: object
            properties:
              salesforceUserName:
                title: Salesforce username
                description: User's username for Salesforce
                type: string
                required: false
                default: salesforce-username
                minLength: 1
                maxLength: 20
                permissions:
                  - principal: SELF
                    action: READ_WRITE
            required: []
        type: object
        properties:
          profile:
            allOf:
              - $ref: '#/definitions/base'
              - $ref: '#/definitions/custom'
    UserSchemaDefaultResponse:
      value:
        id: https://{yourOktaDomain}/meta/schemas/user/default
        $schema: http://json-schema.org/draft-04/schema#
        name: user
        title: Default Okta user
        descripton: Okta user profile template with default permission settings
        lastUpdated: '2025-05-20T20:04:26.000Z'
        created: '2025-05-20T20:04:26.000Z'
        definitions:
          base:
            id: '#base'
            type: object
            properties:
              login:
                title: Username
                type: string
                required: true
                minLength: 5
                maxLength: 100
                permissions:
                  - principal: SELF
                    action: READ_WRITE
              firstName:
                title: First name
                type: string
                required: true
                minLength: 1
                maxLength: 50
                permissions:
                  - principal: SELF
                    action: READ_WRITE
              lastName:
                title: Last name
                type: string
                required: true
                minLength: 1
                maxLength: 50
                permissions:
                  - principal: SELF
                    action: READ_WRITE
              email:
                title: Primary email
                type: string
                required: true
                format: email
                permissions:
                  - principal: SELF
                    action: READ_WRITE
            required:
              - login
              - firstName
              - lastName
              - email
          custom:
            id: '#custom'
            type: object
            properties: {}
            required: []
        type: object
        properties:
          profile:
            allOf:
              - $ref: '#/definitions/base'
              - $ref: '#/definitions/custom'
    UserSchemaAddRequest:
      value:
        definitions:
          custom:
            id: '#custom'
            type: object
            properties:
              salesforceUserName:
                title: Salesforce username
                description: User's username for Salesforce
                type: string
                required: false
                minLength: 1
                maxLength: 20
                permissions:
                  - principal: SELF
                    action: READ_WRITE
            required: []
    ListsAllUserTypes:
      summary: Lists all user types
      value:
        - id: otyfnly5cQjJT9PnR0g4
          displayName: New user type
          name: newUserType
          description: A new custom user type
          createdBy: sprz9fj1ycBcsgopy1d6
          lastUpdatedBy: sprz9fj1ycBcsgopy1d6
          created: '2021-07-05T20:40:38.000Z'
          lastUpdated: '2021-07-05T20:40:38.000Z'
          default: false
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/meta/schemas/user/oscz9fj2jMiRBC1ZT1d6
            schema:
              href: >-
                https://{yourOktaDomain}/api/v1/meta/schemas/user/oscz9fj2jMiRBC1ZT1d6
        - id: otyz9fj2jMiRBC1ZT1d6
          displayName: User
          name: user
          description: Okta user profile template with default permission settings
          createdBy: sprz9fj1ycBcsgopy1d6
          lastUpdatedBy: sprz9fj1ycBcsgopy1d6
          created: '2021-07-05T20:40:38.000Z'
          lastUpdated: '2021-07-05T20:40:38.000Z'
          default: true
          _links:
            self:
              href: >-
                https://{yourOktaDomain}/api/v1/meta/schemas/user/oscz9fj2jMiRBC1ZT1d6
            schema:
              href: >-
                https://{yourOktaDomain}/api/v1/meta/schemas/user/oscz9fj2jMiRBC1ZT1d6
    CreateUserRequest:
      summary: Create a user type request
      value:
        description: A new custom user type
        displayName: New user type
        name: newUserType
    CreateUserResponse:
      summary: Create a user type response
      value:
        id: otyfnly5cQjJT9PnR0g4
        displayName: New user type
        name: newUserType
        description: A new custom user type
        createdBy: sprz9fj1ycBcsgopy1d6
        lastUpdatedBy: sprz9fj1ycBcsgopy1d6
        created: '2021-07-05T20:40:38.000Z'
        lastUpdated: '2021-07-05T20:40:38.000Z'
        default: false
        _links:
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/meta/schemas/user/oscz9fj2jMiRBC1ZT1d6
          schema:
            href: >-
              https://{yourOktaDomain}/api/v1/meta/schemas/user/oscz9fj2jMiRBC1ZT1d6
    GetUserResponse:
      summary: Retrieve a user type response
      value:
        id: otyfnly5cQjJT9PnR0g4
        displayName: New user type
        name: newUserType
        description: A new custom user type
        createdBy: sprz9fj1ycBcsgopy1d6
        lastUpdatedBy: sprz9fj1ycBcsgopy1d6
        created: '2021-07-05T20:40:38.000Z'
        lastUpdated: '2021-07-05T20:40:38.000Z'
        default: false
        _links:
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/meta/schemas/user/oscz9fj2jMiRBC1ZT1d6
          schema:
            href: >-
              https://{yourOktaDomain}/api/v1/meta/schemas/user/oscz9fj2jMiRBC1ZT1d6
    UpdateUserTypePostRequest:
      summary: Update user type request
      value:
        displayName: Updated Display Name
    UpdateUserTypePostResponse:
      summary: Update user type response
      value:
        id: otyfnly5cQjJT9PnR0g4
        displayName: Updated Display Name
        name: newUserType
        description: A new custom user type
        createdBy: sprz9fj1ycBcsgopy1d6
        lastUpdatedBy: sprz9fj1ycBcsgopy1d6
        created: '2021-07-05T20:40:38.000Z'
        lastUpdated: '2021-07-05T20:40:38.000Z'
        default: false
        _links:
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/meta/schemas/user/oscz9fj2jMiRBC1ZT1d6
          schema:
            href: >-
              https://{yourOktaDomain}/api/v1/meta/schemas/user/oscz9fj2jMiRBC1ZT1d6
    ReplaceUserTypePutRequest:
      summary: Replace user type request
      value:
        displayName: Replacement Display Name
        description: Replacement description
        name: newUserType
    ReplaceUserTypePutResponse:
      summary: Replace user type response
      value:
        id: otyfnly5cQjJT9PnR0g4
        displayName: Replacement Display Name
        name: newUserType
        description: Replacement description
        createdBy: sprz9fj1ycBcsgopy1d6
        lastUpdatedBy: sprz9fj1ycBcsgopy1d6
        created: '2021-07-05T20:40:38.000Z'
        lastUpdated: '2021-07-05T20:40:38.000Z'
        default: false
        _links:
          self:
            href: >-
              https://{yourOktaDomain}/api/v1/meta/schemas/user/oscz9fj2jMiRBC1ZT1d6
          schema:
            href: >-
              https://{yourOktaDomain}/api/v1/meta/schemas/user/oscz9fj2jMiRBC1ZT1d6
    ListUISchemaResponse:
      summary: Lists all UI schemas response
      value:
        - id: uis4a7liocgcRgcxZ0g7
          uiSchema:
            type: Group
            label: Sign in
            buttonLabel: Submit
            elements:
              - type: Control
                scope: '#/properties/firstName'
                label: First name
                options:
                  format: text
              - type: Control
                scope: '#/properties/lastName'
                label: Last name
                options:
                  format: text
              - type: Control
                scope: '#/properties/email'
                label: Email
                options:
                  format: text
              - type: Control
                scope: '#/properties/countryCode'
                label: Country code
                options:
                  format: select
              - type: Control
                scope: '#/properties/bool2'
                label: bool2
                options:
                  format: checkbox
              - type: Control
                scope: '#/properties/date'
                label: date
                options:
                  format: text
              - type: Control
                scope: '#/properties/enum'
                label: enum
                options:
                  format: radio
          created: '2022-07-25T12:56:31.000Z'
          lastUpdated: '2022-07-26T11:53:59.000Z'
          _links:
            self:
              href: https://example.com/api/v1/meta/uischemas/uis4a7liocgcRgcxZ0g7
              hints:
                allow:
                  - GET
                  - PUT
                  - DELETE
        - id: uis4abjqkkKXVPGAU0g7
          uiSchema:
            type: Group
            label: Sign in 2
            buttonLabel: Submit
            elements:
              - type: Control
                scope: '#/properties/firstName'
                label: First name
                options:
                  format: text
              - type: Control
                scope: '#/properties/lastName'
                label: Last name
                options:
                  format: text
              - type: Control
                scope: '#/properties/email'
                label: Email
                options:
                  format: text
              - type: Control
                scope: '#/properties/countryCode'
                label: Country code
                options:
                  format: select
              - type: Control
                scope: '#/properties/bool2'
                label: bool2
                options:
                  format: checkbox
              - type: Control
                scope: '#/properties/date'
                label: date
              - type: Control
                scope: '#/properties/enum'
                label: enum
                options:
                  format: radio
          created: '2022-07-25T12:56:31.000Z'
          lastUpdated: '2022-07-26T11:53:59.000Z'
          _links:
            self:
              href: https://example.com/api/v1/meta/uischemas/uis4abjqkkKXVPGAU0g7
              hints:
                allow:
                  - GET
                  - PUT
                  - DELETE
    CreateUISchemaBody:
      summary: UI schema body request
      value:
        uiSchema:
          type: Group
          elements:
            - type: Control
              scope: '#/properties/firstName'
              label: First Name
              options:
                format: text
            - type: Control
              scope: '#/properties/lastName'
              label: Last Name
              options:
                format: text
            - type: Control
              scope: '#/properties/email'
              label: Primary email
              options:
                format: text
          buttonLabel: Submit
          label: Sign in
    CreateUISchemaResponse:
      summary: Returns full UI schema body
      value:
        id: uis4a7liocgcRgcxZ0g7
        uiSchema:
          type: Group
          label: Sign in
          buttonLabel: Submit
          elements:
            - type: Control
              scope: '#/properties/firstName'
              label: First name
              options:
                format: text
            - type: Control
              scope: '#/properties/lastName'
              label: Last name
              options:
                format: text
            - type: Control
              scope: '#/properties/email'
              label: Primary email
              options:
                format: text
        created: '2022-07-25T12:56:31.000Z'
        lastUpdated: '2022-07-26T11:53:59.000Z'
        _links:
          self:
            href: https://exmaple.com/api/v1/meta/uischemas/uis4a7liocgcRgcxZ0g7
            hints:
              allow:
                - GET
                - PUT
                - DELETE
    RetrieveUISchemaResponse:
      summary: Retrieves a UI schema response
      value:
        id: uis4a7liocgcRgcxZ0g7
        uiSchema:
          type: Group
          label: Sign in
          buttonLabel: Submit
          elements:
            - type: Control
              scope: '#/properties/firstName'
              label: First name
              options:
                format: text
            - type: Control
              scope: '#/properties/lastName'
              label: Last name
              options:
                format: text
            - type: Control
              scope: '#/properties/email'
              label: Email
              options:
                format: text
            - type: Control
              scope: '#/properties/countryCode'
              label: Country code
              options:
                format: select
            - type: Control
              scope: '#/properties/bool2'
              label: bool2
              options:
                format: checkbox
            - type: Control
              scope: '#/properties/date'
              label: date
            - type: Control
              scope: '#/properties/enum'
              label: enum
              options:
                format: radio
        created: '2022-07-25T12:56:31.000Z'
        lastUpdated: '2022-07-26T11:53:59.000Z'
        _links:
          self:
            href: https://exmaple.com/api/v1/meta/uischemas/uis4a7liocgcRgcxZ0g7
            hints:
              allow:
                - GET
                - PUT
                - DELETE
    ErrorAccessDenied:
      summary: Access Denied
      value:
        errorCode: E0000006
        errorSummary: You do not have permission to perform the requested action
        errorLink: E0000006
        errorId: sampleNUSD_8fdkFd8fs8SDBK
        errorCauses: []
    ErrorResourceNotFound:
      summary: Resource Not Found
      value:
        errorCode: E0000007
        errorSummary: 'Not found: {0}'
        errorLink: E0000007
        errorId: sampleMlLvGUj_YD5v16vkYWY
        errorCauses: []
    ErrorTooManyRequests:
      summary: Too Many Requests
      value:
        errorCode: E0000047
        errorSummary: API call exceeded rate limit due to too many requests.
        errorLink: E0000047
        errorId: sampleQPivGUj_ND5v78vbYWW
        errorCauses: []
    ErrorApiValidationFailed:
      summary: API Validation Failed
      value:
        errorCode: E0000001
        errorSummary: 'Api validation failed: {0}'
        errorLink: E0000001
        errorId: sampleiCF-8D5rLW6myqiPItW
        errorCauses: []
  x-stackQL-resources:
    application_user_schemas:
      id: okta.meta.application_user_schemas
      name: application_user_schemas
      title: Application User Schemas
      methods:
        get_application_user_schema:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1schemas~1apps~1{appId}~1default/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_application_user_profile:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1schemas~1apps~1{appId}~1default/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/application_user_schemas/methods/get_application_user_schema
        insert: []
        update:
          - $ref: >-
              #/components/x-stackQL-resources/application_user_schemas/methods/update_application_user_profile
        delete: []
        replace: []
    group_schemas:
      id: okta.meta.group_schemas
      name: group_schemas
      title: Group Schemas
      methods:
        get_group_schema:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1schemas~1group~1default/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_group_schema:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1schemas~1group~1default/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/group_schemas/methods/get_group_schema
        insert: []
        update:
          - $ref: >-
              #/components/x-stackQL-resources/group_schemas/methods/update_group_schema
        delete: []
        replace: []
    log_stream_schemas:
      id: okta.meta.log_stream_schemas
      name: log_stream_schemas
      title: Log Stream Schemas
      methods:
        list_log_stream_schemas:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1schemas~1logStream/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_log_stream_schema:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1schemas~1logStream~1{logStreamType}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/log_stream_schemas/methods/list_log_stream_schemas
          - $ref: >-
              #/components/x-stackQL-resources/log_stream_schemas/methods/get_log_stream_schema
        insert: []
        update: []
        delete: []
        replace: []
    linked_object_definitions:
      id: okta.meta.linked_object_definitions
      name: linked_object_definitions
      title: Linked Object Definitions
      methods:
        list_linked_object_definitions:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1schemas~1user~1linkedObjects/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_linked_object_definition:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1schemas~1user~1linkedObjects/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_linked_object_definition:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1meta~1schemas~1user~1linkedObjects~1{linkedObjectName}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_linked_object_definition:
          operation:
            $ref: >-
              #/paths/~1api~1v1~1meta~1schemas~1user~1linkedObjects~1{linkedObjectName}/delete
          response:
            mediaType: ''
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/linked_object_definitions/methods/list_linked_object_definitions
          - $ref: >-
              #/components/x-stackQL-resources/linked_object_definitions/methods/get_linked_object_definition
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/linked_object_definitions/methods/create_linked_object_definition
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/linked_object_definitions/methods/delete_linked_object_definition
        replace: []
    user_schemas:
      id: okta.meta.user_schemas
      name: user_schemas
      title: User Schemas
      methods:
        get_user_schema:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1schemas~1user~1{schemaId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_user_profile:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1schemas~1user~1{schemaId}/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/user_schemas/methods/get_user_schema
        insert: []
        update:
          - $ref: >-
              #/components/x-stackQL-resources/user_schemas/methods/update_user_profile
        delete: []
        replace: []
    user_types:
      id: okta.meta.user_types
      name: user_types
      title: User Types
      methods:
        list_user_types:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1types~1user/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_user_type:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1types~1user/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_user_type:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1types~1user~1{typeId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_user_type:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1types~1user~1{typeId}/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        replace_user_type:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1types~1user~1{typeId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_user_type:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1types~1user~1{typeId}/delete'
          response:
            mediaType: ''
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/user_types/methods/list_user_types
          - $ref: '#/components/x-stackQL-resources/user_types/methods/get_user_type'
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/user_types/methods/create_user_type
        update:
          - $ref: >-
              #/components/x-stackQL-resources/user_types/methods/update_user_type
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/user_types/methods/delete_user_type
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/user_types/methods/replace_user_type
    ui_schemas:
      id: okta.meta.ui_schemas
      name: ui_schemas
      title: Ui Schemas
      methods:
        list_uischemas:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1uischemas/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_uischema:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1uischemas/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_uischema:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1uischemas~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        replace_uischemas:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1uischemas~1{id}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_uischemas:
          operation:
            $ref: '#/paths/~1api~1v1~1meta~1uischemas~1{id}/delete'
          response:
            mediaType: ''
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/ui_schemas/methods/list_uischemas'
          - $ref: '#/components/x-stackQL-resources/ui_schemas/methods/get_uischema'
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/ui_schemas/methods/create_uischema
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/ui_schemas/methods/delete_uischemas
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/ui_schemas/methods/replace_uischemas
servers:
  - url: https://{subdomain}.okta.com/
    variables:
      subdomain:
        default: my-org
        description: >-
          The domain of your organization. This can be a provided subdomain of
          an official okta domain (okta.com, oktapreview.com, etc) or one of
          your configured custom domains.
definitions:
  base:
    type: object
    description: "Dummy base definition for parser compatibility"
    properties:
      id:
        type: string
  custom:
    type: object
    description: "Dummy custom definition for parser compatibility"
    properties:
      name:
        type: string
