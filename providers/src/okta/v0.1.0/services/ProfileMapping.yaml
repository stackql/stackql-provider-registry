components:
  schemas:
    ProfileMapping:
      properties:
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        id:
          readOnly: true
          type: string
        properties:
          additionalProperties:
            $ref: '#/components/schemas/ProfileMappingProperty'
          readOnly: true
          type: object
        source:
          $ref: '#/components/schemas/ProfileMappingSource'
        target:
          $ref: '#/components/schemas/ProfileMappingSource'
      type: object
      x-okta-crud:
      - alias: read
        arguments:
        - dest: mappingId
          src: id
        operationId: getProfileMapping
      - alias: update
        arguments:
        - dest: mappingId
          src: id
        operationId: updateProfileMapping
      x-okta-tags:
      - ProfileMapping
    ProfileMappingProperty:
      properties:
        expression:
          type: string
        pushStatus:
          $ref: '#/components/schemas/ProfileMappingPropertyPushStatus'
      type: object
      x-okta-tags:
      - ProfileMapping
    ProfileMappingPropertyPushStatus:
      enum:
      - PUSH
      - DONT_PUSH
      type: object
      x-okta-tags:
      - ProfileMapping
    ProfileMappingSource:
      properties:
        _links:
          additionalProperties:
            properties: {}
            type: object
          readOnly: true
          type: object
        id:
          readOnly: true
          type: string
        name:
          readOnly: true
          type: string
        type:
          readOnly: true
          type: string
      type: object
      x-okta-tags:
      - ProfileMapping
  securitySchemes:
    api_token:
      description: SSWS {API Token}
      in: header
      name: Authorization
      type: apiKey
  x-stackQL-resources:
    mappings:
      id: okta.profilemapping.mappings
      methods:
        get:
          operation:
            $ref: '#/paths/~1api~1v1~1mappings~1{mappingId}/GET'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        insert:
          operation:
            $ref: '#/paths/~1api~1v1~1mappings~1{mappingId}/POST'
          request:
            mediaType: application/json
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1api~1v1~1mappings/GET'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      name: mappings
      title: mappings
externalDocs:
  description: Find more info here
  url: https://developer.okta.com/docs/api/getting_started/design_principles.html
info:
  contact:
    email: devex-public@okta.com
    name: Okta Developer Team
    url: https://developer.okta.com/
  description: Allows customers to easily access the Okta API
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://developer.okta.com/terms/
  title: Okta API
  version: 2.8.0
openapi: 3.0.1
paths:
  /api/v1/mappings:
    get:
      description: Enumerates Profile Mappings in your organization with pagination.
      operationId: listProfileMappings
      parameters:
      - in: query
        name: after
        schema:
          type: string
      - in: query
        name: limit
        schema:
          default: -1
          format: int32
          type: integer
      - in: query
        name: sourceId
        schema:
          type: string
      - in: query
        name: targetId
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ProfileMapping'
                type: array
          description: Success
      security:
      - api_token: []
      tags:
      - ProfileMapping
  /api/v1/mappings/{mappingId}:
    get:
      description: Fetches a single Profile Mapping referenced by its ID.
      operationId: getProfileMapping
      parameters:
      - in: path
        name: mappingId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileMapping'
          description: Success
      security:
      - api_token: []
      summary: Get Profile Mapping
      tags:
      - ProfileMapping
    post:
      description: Updates an existing Profile Mapping by adding, updating, or removing
        one or many Property Mappings.
      operationId: updateProfileMapping
      parameters:
      - in: path
        name: mappingId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileMapping'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileMapping'
          description: Success
      security:
      - api_token: []
      summary: Update Profile Mapping
      tags:
      - ProfileMapping
      x-codegen-request-body-name: profileMapping
servers:
- url: https://{subdomain}.okta.com/
  variables:
    subdomain:
      default: my-domain
