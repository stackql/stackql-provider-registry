openapi: 3.0.0
servers:
  - url: 'https://api.confluent.cloud'
    description: Confluent Cloud API
info:
  version: ''
  contact:
    name: Confluent Cloud
    url: 'https://www.confluent.io/cloud-contact-us/'
    email: support@confluent.io
  x-api-id: 46234552-5833-42eb-ba0f-883ad3f70d2b
  x-audience: external-public
  x-logo:
    url: 'https://assets.confluent.io/m/5ec23aa91903c00b/'
  title: Confluent Cloud APIs - catalog
  description: catalog
tags:
  - name: API Keys (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ApiKey` objects represent access to different parts of Confluent Cloud. Some types
      of API keys represent access to a single cluster/resource such as a Kafka cluster,
      Schema Registry cluster or a ksqlDB cluster. Cloud API Keys represent access to resources within an organization
      that are not tied to a specific cluster, such as the Org API, IAM API, Metrics API or Connect API.

      The API allows you to list, create, update and delete your API Keys.


      Related guide: [API Keys in Confluent Cloud](https://docs.confluent.io/cloud/current/client-apps/api-keys.html).

      ## The API Keys Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ApiKey" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `apikeys_per_org` | API Keys in one Confluent Cloud organization |
  - name: Environments (org/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Environment` objects represent an isolated namespace for your Confluent resources
      for organizational purposes.

      The API allows you to create, delete, and update your environments. You can retrieve
      individual environments as well as a list of all your environments.


      Related guide: [Environments in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/environments.html).

      ## The Environments Model
      <SchemaDefinition schemaRef="#/components/schemas/org.v2.Environment" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `environments_per_org` | Environments in one Confluent Cloud organization |
  - name: Organizations (org/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Organization` objects represent a customer organization. An organization contains all customer
      resources (e.g., Environments, Kafka Clusters, Service Accounts, API Keys) and is tied to a billing
      agreement (including any annual commitment or support plan).

      The API allows you to list, view, and update your organizations.


      Related guide: [Organizations for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/hierarchy/organizations/cloud-organization.html).

      ## The Organizations Model
      <SchemaDefinition schemaRef="#/components/schemas/org.v2.Organization" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `organizations_per_user` | Confluent Cloud organizations a user belongs to |
  - name: Users (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `User` objects represent individuals who may access your Confluent resources.

      The API allows you to retrieve, update, and delete individual users, as well as list of all your
      users. This API cannot be used to create new user accounts.


      Related guide: [Users in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/user-account.html).

      ## The Users Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.User" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `users_per_org` | Users in one Confluent Cloud organization |
  - name: Service Accounts (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ServiceAccount` objects are typically used to represent applications and other non-human principals
      that may access your Confluent resources.

      The API allows you to create, retrieve, update, and delete individual service accounts, as well as
      list all your service accounts.


      Related guide: [Service Accounts in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/service-account.html).

      ## The Service Accounts Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ServiceAccount" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `service_accounts_per_org` | Service Accounts in one Confluent Cloud organization |
  - name: Invitations (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Invitation` objects represent invitations to invite users to join your organizations in Confluent Cloud.

      The API allows you to list all your invitations, as well as create, read, and delete a specified invitation.


      Related guide: [User invitations in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/identity/user-accounts.html).

      ## The Invitations Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.Invitation" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `invitations_per_org` | Invitations in a Confluent Cloud organization |
  - name: IP Groups (iam/v2)
    description: |-
      [![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To IP Groups API](https://img.shields.io/badge/-Request%20Access%20To%20IP%20Groups%20API-%23bc8540)](mailto:cloud-support@confluent.io?subject=Request%20to%20join%20IP%20Filtering%20API%20Limited%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Limited%20Access%20for%20IP%20Filtering.%0AMy%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.%0A)

      Definitions of networks which can be named and referred by IP blocks, commonly used to attach to IP Filter rules.


      ## The IP Groups Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IpGroup" />
  - name: IP Filters (iam/v2)
    description: |-
      [![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To IP Filters API](https://img.shields.io/badge/-Request%20Access%20To%20IP%20Filters%20API-%23bc8540)](mailto:ccloud-api-access+iam-v2-limited-availability@confluent.io?subject=Request%20to%20join%20iam/v2%20API%20Limited%20Availability&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Limited%20Availability%20for%20iam/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `IP Filter` objects are bindings between IP Groups and Confluent resource(s).
      For example, a binding between "CorpNet" and "Management APIs" will enforce that
      access must come from one of the CIDR blocks associated with CorpNet.
      If there are multiple IP filters bound to a resource, a request matching any of the CIDR blocks
      for any of the IP Group will allow the request.
      If there are no IP Filters for a resource, then access will be granted to requests originating
      from any IP Address.


      ## The IP Filters Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IpFilter" />
  - name: Role Bindings (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A role binding grants a Principal a role on resources that match a pattern.

      The API allows you to perform create, delete, and list operations on role bindings.


      Related guide: [Role-Based Access Control (RBAC)](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html).

      ## The Role Bindings Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.RoleBinding" />
  - name: Subscriptions (notifications/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Subscription` objects represent the intent of the customers to get notifications of particular types.
      A subscription is created for a particular `NotificationType` and the user will get notifications on the
      `Integrations` that are provided while creating the subscription.

      This API allows you to create, retrieve, and update subscriptions,
      as well as to view the list of all your subscriptions. You can also delete subscriptions
      with RECOMMENDED or OPTIONAL notification types. Subscriptions with REQUIRED notification types cannot be deleted.


      Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

      ## The Subscriptions Model
      <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.Subscription" />
  - name: Integrations (notifications/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      You can create an `Integration` to specify how we can notify you when we receive an alert/notification for
      a subscription. Please note that you can only perform create, update and delete operations for integrations
      of type `Webhook`, `Slack` and `MsTeams`. You cannot create, update or delete integrations of type `RoleEmail`
      and `UserEmail`.


      Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

      ## The Integrations Model
      <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.Integration" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `integrations_per_org` | Maximum number of integrations in one Confluent Cloud organization |
  - name: Notification Types (notifications/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The type of notifications (and their corresponding metadata) supported by Confluent.


      Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

      ## The Notification Types Model
      <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.NotificationType" />
  - name: Clusters (cmk/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Clusters` objects represent Apache Kafka Clusters on Confluent Cloud.

      The API allows you to list, create, read, update, and delete your Kafka clusters.


      Related guide: [Confluent Cloud Cluster Management for Apache Kafka APIs](https://docs.confluent.io/cloud/current/clusters/cluster-api.html).

      ## The Clusters Model
      <SchemaDefinition schemaRef="#/components/schemas/cmk.v2.Cluster" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `kafka_clusters_per_environment` | Number of clusters in one Confluent Cloud environment |
  - name: Clusters (ksqldbcm/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Cluster` represents a ksqlDB runtime that you can issue queries to using its API endpoint.
      It executes SQL statements and queries which under the hood get built into corresponding
      Kafka Streams topologies. The API allows you to list, create, read, and delete your ksqlDB clusters.


      Related guide: [ksqlDB in Confluent Cloud](https://docs.confluent.io/cloud/current/ksqldb/ksqldb-cluster-api.html).

      ## The Clusters Model
      <SchemaDefinition schemaRef="#/components/schemas/ksqldbcm.v2.Cluster" />

      ## Quotas and Limits
      This resource is subject to the following quotas:

      | Quota | Description |
      | --- | --- |
      | `ksql.limits.max_apps_per_cluster` | Clusters in one Confluent Cloud Kafka Cluster. |
  - name: Connectors (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for Managed Connectors or Custom Connectors in Confluent Cloud.

      The API allows you to list, create, get, update and delete a Managed Connector or Custom Connector in Confluent Cloud.

      Connect metrics are available through the [Metrics v2 API](https://api.telemetry.confluent.cloud/docs#tag/Version-2).

      Related guide: [Confluent Cloud API and Managed Connectors](https://docs.confluent.io/cloud/current/connectors/connect-api-section.html).
  - name: Lifecycle (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for managing the lifecycle for a Managed Connector or Custom Connector in Confluent Cloud. Operations currently supported are Pause and Resume.
  - name: Status (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for requesting the status or the tasks for a Managed Connector or Custom Connector in Confluent Cloud.
  - name: Managed Connector Plugins (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for Managed connectors in Confluent Cloud.
  - name: Offsets (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for managing the offsets for a Managed Connector.

      Related guide: [Manage Connector Offsets](https://docs.confluent.io/cloud/current/connectors/offsets.html#manage-offsets-for-fully-managed-connectors-in-ccloud)
  - name: Custom Connector Plugins (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      CustomConnectorPlugins objects represent Custom Connector Plugins on Confluent Cloud.
      The API allows you to list, create, read, update, and delete your Custom Connector Plugins.
      Related guide:
      [Custom Connector Plugin API](https://docs.confluent.io/cloud/current/connectors/connect-api-section.html).


      ## The Custom Connector Plugins Model
      <SchemaDefinition schemaRef="#/components/schemas/connect.v1.CustomConnectorPlugin" />
  - name: Presigned Urls (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Request a presigned upload URL for new Custom Connector Plugin. Note that
      the URL policy expires in one hour. If the policy expires, you can request
      a new presigned upload URL.

      Related guide:
      [Custom Connector Plugin API](https://docs.confluent.io/cloud/current/connectors/connect-api-section.html).


      ## The Presigned Urls Model
      <SchemaDefinition schemaRef="#/components/schemas/connect.v1.PresignedUrl" />
  - name: Cluster (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Configs (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: ACL (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Consumer Group (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Partition (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Topic (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Records (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Cluster Linking (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Applied Quotas (service-quota/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A `quota` object represents a quota configuration for a specific Confluent Cloud resource.
      Use this API to retrieve an individual quota or list of quotas for a given scope.


      Related guide: [Service Quotas for Confluent Cloud](https://docs.confluent.io/cloud/current/quotas/index.html).

      ## The Applied Quotas Model
      <SchemaDefinition schemaRef="#/components/schemas/service-quota.v1.AppliedQuota" />
  - name: Scopes (service-quota/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Gets a list of all available scopes for applied quotas.


      Related guide: [Quota Scopes](https://docs.confluent.io/cloud/current/quotas/quotas.html#query-for-scopes).

      ## The Scopes Model
      <SchemaDefinition schemaRef="#/components/schemas/service-quota.v1.Scope" />
  - name: Entitlements (partner/v2)
    description: |
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `Entitlement` objects represent metadata about a marketplace entitlement.

      An entitlement includes metadata about a marketplace purchase
      (start date, end date, billing information, partner IDs, etc).
      The API allows partners to create, read, and list entitlements. (Unless you
      need entitlement creation and customer registration to be separate,
      we recommend using the Signup API to create an organization and entitlement
      at the same time)

      The API only allows authorized partners to interact with the Entitlements API.
  - name: Regions (srcm/v2)
    description: |-
      [![Deprecated](https://img.shields.io/badge/Lifecycle%20Stage-Deprecated-%23ff005c)](#section/Versioning/API-Lifecycle-Policy)

      `Region` objects represent cloud provider regions available when placing Schema Registry clusters.
      The API allows you to list Schema Registry regions.


      Related guides:
      * [Confluent Cloud providers and region support](https://docs.confluent.io/cloud/current/stream-governance/packages.html#cloud-providers-and-region-support).
      * [srcm/v3 Migration Guide](https://docs.confluent.io/cloud/current/stream-governance/packages.html#deprecation-of-srcm-v2-clusters-and-regions-apis-and-upgrade-guide).


      ## The Regions Model
      <SchemaDefinition schemaRef="#/components/schemas/srcm.v2.Region" />
  - name: Clusters (srcm/v2)
    description: |-
      [![Deprecated](https://img.shields.io/badge/Lifecycle%20Stage-Deprecated-%23ff005c)](#section/Versioning/API-Lifecycle-Policy)

      `Clusters` objects represent Schema Registry Clusters on Confluent Cloud.

      The API allows you to list, create, read, and delete your Schema Registry clusters.


      Related guides:
      * [Confluent Cloud Schema Registry Cluster APIs](https://docs.confluent.io/cloud/current/stream-governance/clusters-regions-api.html#schema-registry-cluster-management).
      * [srcm/v3 Migration Guide](https://docs.confluent.io/cloud/current/stream-governance/packages.html#deprecation-of-srcm-v2-clusters-and-regions-apis-and-upgrade-guide).


      ## The Clusters Model
      <SchemaDefinition schemaRef="#/components/schemas/srcm.v2.Cluster" />
  - name: Clusters (srcm/v3)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Clusters` objects represent Schema Registry Clusters on Confluent Cloud.

      The API allows you to list and read your Schema Registry clusters.


      Related guide: [Confluent Cloud Schema Registry Cluster APIs](https://docs.confluent.io/cloud/current/stream-governance/clusters-regions-api.html#schema-registry-cluster-management).

      ## The Clusters Model
      <SchemaDefinition schemaRef="#/components/schemas/srcm.v3.Cluster" />
  - name: Compatibility (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to test schema compatibility.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Config (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to manage and query schema compatibility settings and cluster configurations.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Contexts (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to retrieve information about schema contexts.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Exporters (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete exporters.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Modes (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete schema subjects modes of operation.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Schemas (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete schemas.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Subjects (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete schema subjects and versions.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Key Encryption Keys (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete key encryption keys.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Data Encryption Keys (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete data encryption keys.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Entity (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete catalog entities.

      Related guide: [Catalog API Documentation](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#catalog-api-documentation).
  - name: Search (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to search for entities.

      Related guide: [Catalog API Documentation](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#catalog-api-documentation).
  - name: Types (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete catalog types such as tag definitions.

      Related guide: [Catalog API Documentation](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#catalog-api-documentation).
  - name: Provider Shared Resources (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ProviderSharedResource` object contains details of the data stream
      (topic, schema registry subjects, sharing metadata) that you have shared through Stream Sharing.


      ## The Provider Shared Resources Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.ProviderSharedResource" />
  - name: Provider Shares (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ProviderShare` object respresents the share that you have created through Stream Sharing.


      Related guide: [Provider Stream Shares in Confluent Cloud](https://docs.confluent.io/cloud/current/stream-sharing/produce-shared-data.html#stream-shares).

      ## The Provider Shares Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.ProviderShare" />
  - name: Consumer Shared Resources (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ConsumerSharedResource` object contains details of the data stream
      (topic, schema registry subjects, sharing metadata) that you received through Stream Sharing.


      ## The Consumer Shared Resources Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.ConsumerSharedResource" />
  - name: Consumer Shares (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ConsumerShare` object respresents the share that you received through Stream Sharing.


      Related guide: [Consumer Stream Shares in Confluent Cloud](https://docs.confluent.io/cloud/current/stream-sharing/consume-shared-data.html).

      ## The Consumer Shares Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.ConsumerShare" />
  - name: Shared Tokens (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Encrypted Token shared with consumer


      ## The Shared Tokens Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.SharedToken" />
  - name: Opt Ins (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Stream sharing opt in options

      ## The Opt Ins Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.OptIn" />
  - name: Organizations (partner/v2)
    description: |
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `Organizations` objects represent an entire Confluent Cloud organization.
      Partners are allowed to get an organization they have signed up or
      list all organizations they have signed up.
  - name: Signup (partner/v2)
    description: |
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `Signup` APIs can only be performed by partners.
  - name: Networks (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Network` represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud
      provider accounts. Dedicated networks support more networking options but can only contain Dedicated clusters.
      Shared networks can contain any cluster type.

      The API allows you to list, create, read, update, and delete your networks.


      Related guide: [APIs to manage networks in Confluent Cloud](https://docs.confluent.io/cloud/current/networking/overview.html).

      ## The Networks Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Network" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `dedicated_networks_per_environment` | Number of dedicated networks per Confluent Cloud environment |
  - name: Peerings (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Add or remove VPC/VNet peering connections between your VPC/VNet and Confluent Cloud.

      Related guides:
      * [Use VPC peering connections with Confluent Cloud on AWS](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html).
      * [Use VNet peering connections with Confluent Cloud on Azure](https://docs.confluent.io/cloud/current/networking/peering/azure-peering.html).
      * [Use VPC peering connections with Confluent Cloud on Google Cloud](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html).


      ## The Peerings Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Peering" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `peerings_per_network` | Number of peerings per network |
  - name: Transit Gateway Attachments (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      AWS Transit Gateway Attachments

      Related guide: [APIs to manage AWS Transit Gateway Attachments](https://docs.confluent.io/cloud/current/networking/aws-transit-gateway.html).

      ## The Transit Gateway Attachments Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.TransitGatewayAttachment" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `tgw_attachments_per_network` | Number of TGW attachments per network |
  - name: Private Link Accesses (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Add or remove access to PrivateLink endpoints by AWS account, Azure subscription and GCP project ID.

      Related guides:
      * [Use Google Cloud Private Service Connect with Confluent Cloud](https://docs.confluent.io/cloud/current/networking/private-links/gcp-private-service-connect.html).
      * [Use Azure Private Link with Confluent Cloud](https://docs.confluent.io/cloud/current/networking/private-links/azure-privatelink.html).
      * [Use AWS PrivateLink with Confluent Cloud](https://docs.confluent.io/cloud/current/networking/private-links/aws-privatelink.html).


      ## The Private Link Accesses Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.PrivateLinkAccess" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `private_link_accounts_per_network` | Number of AWS accounts per network |
      | `private_link_subscriptions_per_network` | Number of Azure subscriptions per network |
      | `private_service_connect_projects_per_network` | Number of GCP projects per network |
  - name: Network Link Services (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Network Link Service is associated with a Private Link Confluent Cloud Network.
      It enables connectivity from other Private Link Confluent Cloud Networks based on
      the configured accept policies.


      Related guide: [Network Linking Overview](https://docs.confluent.io/cloud/current/networking/network-linking.html).

      ## The Network Link Services Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkService" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `network_link_service_per_network` | Number of network link services per network |
  - name: Network Link Endpoints (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A Network Link Enpoint is associated with a Private Link Confluent Cloud Network at the origin and a
      Network Link Service (associated with another Private Link Confluent Cloud Network) at the target.
      It enables connectivity between the origin network and the target network.
      It can only be associated with a Private Link network.


      Related guide: [Network Linking Overview](https://docs.confluent.io/cloud/current/networking/network-linking.html).

      ## The Network Link Endpoints Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkEndpoint" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `network_link_endpoints_per_network` | Number of network link endpoints per network |
  - name: Network Link Service Associations (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      List of incoming Network Link Enpoints associated with the Network Link Service.


      Related guide: [Network Linking Overview](https://docs.confluent.io/cloud/current/networking/network-linking.html).

      ## The Network Link Service Associations Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkServiceAssociation" />
  - name: Gateways (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A gateway is a resource that defines network access to Confluent cloud resources.


      ## The Gateways Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Gateway" />
  - name: IP Addresses (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      IP Addresses

      Related guide: [Use Public Egress IP addresses on Confluent Cloud](https://docs.confluent.io/cloud/current/networking/static-egress-ip-addresses.html)

      ## The IP Addresses Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.IpAddress" />
  - name: Private Link Attachments (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      PrivateLink attachment objects represent reservations to establish PrivateLink connections
      to a cloud region in order to access resources that belong to a Confluent Cloud Environment.
      The API allows you to list, create, read update and delete your PrivateLink attachments.


      ## The Private Link Attachments Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.PrivateLinkAttachment" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `private_link_attachments_per_environment` | Number of PrivateLink Attachments per environment |
  - name: Private Link Attachment Connections (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      PrivateLink attachment connection objects represent connections established to a cloud region
      in order to access resources that belong to a Confluent Cloud Environment.
      The API allows you to list, create, read update and delete your PrivateLink attachment connections.


      ## The Private Link Attachment Connections Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.PrivateLinkAttachmentConnection" />
  - name: Identity Providers (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `IdentityProvider` objects represent external OAuth-OIDC providers in Confluent Cloud.

      The API allows you to list, create, read, update, and delete your Identity Provider.


      Related guide: [OAuth for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).

      ## The Identity Providers Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IdentityProvider" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `identity_providers_per_org` | Number of OAuth identity providers per organization |
      | `public_keys_per_provider` | Number of public keys saved per identity provider |
  - name: Jwks (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `JWKS` objects represent public key sets for a specific OAuth/OpenID Connect provider within
      Confluent Cloud.

      The API allows you to refresh JWKS public key data.


      Related guide: [OAuth for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).

      ## The Jwks Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.Jwks" />
  - name: Identity Pools (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `IdentityPool` objects represent groups of identities tied to a given a `IdentityProvider`
      that authorizes them to Confluent Cloud resources.

      It provides a mapping functionality of your `Identity Provider` user to a Confluent identity pool that
      is then used to provide access to Confluent Resources.


      Related guide: [Use identity pools with your OAuth provider](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html).

      ## The Identity Pools Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IdentityPool" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `identity_pools_per_provider` | Number of Identity Pools per Identity Provider |
  - name: OAuth Tokens (sts/v1)
    description: |
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      OAuth Token is a [JSON Web Token (JWT)](https://www.rfc-editor.org/rfc/rfc7519) that enables the use of
      external identities to access Confluent Cloud APIs
  - name: Client Quotas (kafka-quotas/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ClientQuota` objects represent Client Quotas you can set at the service account level.

      The API allows you to list, create, read, update, and delete your client quotas.


      Related guide: [Client Quotas in Confluent Cloud](https://docs.confluent.io/cloud/current/clusters/client-quotas.html).

      ## The Client Quotas Model
      <SchemaDefinition schemaRef="#/components/schemas/kafka-quotas.v1.ClientQuota" />
  - name: Pipelines (sd/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Pipeline` objects represent information about a user-defined pipeline of Confluent Cloud components.
      The pipeline's content is available separately.

      The API allows you to create, retrieve, update, and delete your pipelines,
      as well as list all of your pipelines for the particular environment and Kafka cluster.


      Related guide: [Pipelines in Confluent Cloud](https://docs.confluent.io/cloud/current/stream-designer/).

      ## The Pipelines Model
      <SchemaDefinition schemaRef="#/components/schemas/sd.v1.Pipeline" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `pipelines_per_org` | Pipelines in one Confluent Cloud organization |
      | `pipelines_per_cluster` | Pipelines in one Confluent Cloud Kafka cluster |
  - name: Keys (byok/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Key` objects represent customer managed keys on dedicated Confluent Cloud clusters.

      Keys are used to protect data at rest stored in your dedicated Confluent Cloud clusters on AWS, Azure, and GCP.
      This API allows you to upload and retrieve self-managed keys on Confluent Cloud.


      Related guide: [Confluent Cloud Bring Your Own Key (BYOK) Management API](https://docs.confluent.io/cloud/current/clusters/byok/index.html).

      ## The Keys Model
      <SchemaDefinition schemaRef="#/components/schemas/byok.v1.Key" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `byok.max_keys.per_org` | BYOK keys in one Confluent Cloud organisation. |
  - name: Costs (billing/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Cost` objects represent the aggregated billing costs for an organization


      Related guide: [Retrieve costs for a range of dates](https://docs.confluent.io/cloud/current/billing/overview.html#retrieve-costs-for-a-range-of-dates).

      ## The Costs Model
      <SchemaDefinition schemaRef="#/components/schemas/billing.v1.Cost" />
  - name: Group Mappings (iam/v2/sso)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `GroupMapping` objects establish relationships between user groups in your SSO
      identity provider and specific RBAC roles in Confluent Cloud.

      Group mappings enable automated and secure access control to Confluent Cloud resources,
      reducing administrative workload by streamlining user provisioning and authorization.


      Related guide: [Use group mappings with your SSO identity provider](https://docs.confluent.io/cloud/current/access-management/authenticate/sso/group-mapping/overview.html).

      ## The Group Mappings Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.sso.GroupMapping" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `group_mappings_per_org` | Number of group mappings per organization |
  - name: Compute Pools (fcpm/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A Compute Pool represents a set of compute resources that is used to run your Queries.
      The resources (CPUs, memory,…) provided by a Compute Pool are shared between all Queries that use it.


      ## The Compute Pools Model
      <SchemaDefinition schemaRef="#/components/schemas/fcpm.v2.ComputePool" />
  - name: Regions (fcpm/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Region` objects represent cloud provider regions available when placing Flink compute pools.
      The API allows you to list Flink regions.


      ## The Regions Model
      <SchemaDefinition schemaRef="#/components/schemas/fcpm.v2.Region" />
  - name: Statements (sql/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Statement` represents a core resource used to model SQL statements for execution.
      A statement generalizes DDL, DML, DQL, etc., but doesn’t attempt to handle session
      management or any higher-level functionality.
      The API allows you to list, create, read, and delete your statements.
      ## The Statements Model
      <SchemaDefinition schemaRef="#/components/schemas/sql.v1.Statement" />
  - name: Statement Results (sql/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `StatementResult` represents a result of a `Statement` resource.
      The API allows you to read your statement's results.
      ## The Statement Results Model
      <SchemaDefinition schemaRef="#/components/schemas/sql.v1.StatementResult" />
  - name: Statement Exceptions (sql/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `StatementException` represents an exception of a `Statement` resource.
      The API allows you to read your statement's exceptions.
      ## The Statement Exceptions Model
      <SchemaDefinition schemaRef="#/components/schemas/sql.v1.StatementException" />
  - name: Connections (sql/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Connection` represents a core resource used to model SQL connections for execution.
      A connection generalizes DDL, DML, DQL, etc., but doesn’t attempt to handle session
      management or any higher-level functionality.
      The API allows you to list, create, read, and delete your connections.
      ## The Connections Model
      <SchemaDefinition schemaRef="#/components/schemas/sql.v1.Connection" />
  - name: DNS Forwarders (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Add, remove, and update DNS forwarder for your gateway.

      Related guides:
      * [Use VPC peering connections with Confluent Cloud on AWS](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html).
      * [Use VNet peering connections with Confluent Cloud on Azure](https://docs.confluent.io/cloud/current/networking/peering/azure-peering.html).


      ## The DNS Forwarders Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.DnsForwarder" />
  - name: Access Points (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      AccessPoint objects represent network connections in and out of Gateways.
      This API allows you to list, create, read, update, and delete your access points.


      ## The Access Points Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.AccessPoint" />
  - name: DNS Records (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      DNS record objects are associated with Confluent Cloud networking resources. This API allows you to list, create, read, update, and delete your DNS records.

      ## The DNS Records Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.DnsRecord" />
  - name: Certificate Authorities (iam/v2)
    description: |-
      [![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `CertificateAuthority` objects represent signing certificate authorities in Confluent Cloud.

      The API allows you to list, create, read, update, and delete your Certificate Authority.


      Related guide: [Manage certificate authorities used for client authentication with X.509 certificates.](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/overview.html).

      ## The Certificate Authorities Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.CertificateAuthority" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `certificate_authorities_per_org` | Number of certificate authorities per organization |
  - name: Certificate Identity Pools (iam/v2)
    description: |-
      [![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Identitypool` objects represent workload identities in Confluent Cloud.

      The API allows you to list, create, read, update, and delete your identity pools associated
      with Certificate Authorities


      Related guide: [Manage Certificate Identity Pools for Granular Client Access Management](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/configure.html#step-2-create-certificate-identity-pools-for-granular-access-control).

      ## The Certificate Identity Pools Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.CertificateIdentityPool" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `identity_pools_per_certificate_authority` | Number of Identity Pools per Certificate Authority |
  - name: Integrations (pim/v1)
    description: |-
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Provider Integration](https://img.shields.io/badge/-Request%20Access%20To%20Provider%20Integration-%23bc8540)](mailto:ccloud-api-access+pim-v1-early-access@confluent.io?subject=Request%20to%20join%20pim/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20pim/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `Provider Integration` objects represent access to public cloud service provider (CSP) resources
      that may be accessed by Confluent resources (for example, connectors).

      The API allows you to create, retrieve, and delete individual integrations, and also obtain a
      list of all your provider integrations.


      Related guide: [Provider Integration in Confluent Cloud](https://docs.confluent.io/home/overview.html).

      ## The Integrations Model
      <SchemaDefinition schemaRef="#/components/schemas/pim.v1.Integration" />
  - name: Flink Artifacts (artifact/v1)
    description: |-
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Flink Artifact API EA](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Artifact%20API%20EA-%23bc8540)](mailto:ccloud-api-access+artifact-v1-early-access@confluent.io?subject=Request%20to%20join%20artifact/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20artifact/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      FlinkArtifact objects represent Flink Artifacts on Confluent Cloud.


      ## The Flink Artifacts Model
      <SchemaDefinition schemaRef="#/components/schemas/artifact.v1.FlinkArtifact" />
  - name: Presigned Urls (artifact/v1)
    description: |-
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Flink Artifact API EA](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Artifact%20API%20EA-%23bc8540)](mailto:ccloud-api-access+artifact-v1-early-access@confluent.io?subject=Request%20to%20join%20artifact/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20artifact/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      Request a presigned upload URL for new Flink Artifact. Note that
      the URL policy expires in one hour. If the policy expires, you can request
      a new presigned upload URL.


      ## The Presigned Urls Model
      <SchemaDefinition schemaRef="#/components/schemas/artifact.v1.PresignedUrl" />
  - name: Flink Artifact Versions (artifact/v1)
    description: |-
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Flink Artifact API EA](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Artifact%20API%20EA-%23bc8540)](mailto:ccloud-api-access+artifact-v1-early-access@confluent.io?subject=Request%20to%20join%20artifact/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20artifact/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      FlinkArtifactVersion objects represent Flink Artifact Versions on Confluent Cloud.


      ## The Flink Artifact Versions Model
      <SchemaDefinition schemaRef="#/components/schemas/artifact.v1.FlinkArtifactVersion" />
components:
  schemas:
    BusinessMetadataDefResponse:
      properties:
        category:
          enum:
            - PRIMITIVE
            - OBJECT_ID_TYPE
            - ENUM
            - STRUCT
            - CLASSIFICATION
            - ENTITY
            - ARRAY
            - MAP
            - RELATIONSHIP
            - BUSINESS_METADATA
          type: string
          description: The category
        guid:
          type: string
          description: The internal guid
        createdBy:
          type: string
          description: The creator
        updatedBy:
          type: string
          description: The updater
        createTime:
          format: int64
          type: integer
          description: The create time
        updateTime:
          format: int64
          type: integer
          description: The update time
        version:
          format: int32
          type: integer
          description: The version
        name:
          type: string
          description: The name
        description:
          type: string
          description: The description
        typeVersion:
          type: string
          description: The type version
        serviceType:
          type: string
          description: The service type
        options:
          additionalProperties:
            type: string
          type: object
          description: The options
        attributeDefs:
          items:
            $ref: '#/components/schemas/AttributeDef'
          type: array
          description: The attribute definitions
        error:
          $ref: '#/components/schemas/ErrorMessage'
      type: object
    AttributeDef:
      type: object
      properties:
        name:
          type: string
          description: The name
        typeName:
          type: string
          description: The type name
        isOptional:
          type: boolean
          description: Whether is optional
        cardinality:
          type: string
          description: The cardinality
          enum:
            - SINGLE
            - LIST
            - SET
        valuesMinCount:
          type: integer
          description: The values min count
          format: int32
        valuesMaxCount:
          type: integer
          description: The values max count
          format: int32
        isUnique:
          type: boolean
          description: Whether is unique
        isIndexable:
          type: boolean
          description: Whether is indexable
        includeInNotification:
          type: boolean
          description: Whether to include in notifications
        defaultValue:
          type: string
          description: The default value
        description:
          type: string
          description: The description
        searchWeight:
          type: integer
          description: The search weight
          format: int32
        indexType:
          type: string
          description: The index type
          enum:
            - DEFAULT
            - STRING
        constraints:
          type: array
          description: The constraints
          items:
            $ref: '#/components/schemas/ConstraintDef'
        options:
          type: object
          description: The options
          additionalProperties:
            type: string
        displayName:
          type: string
          description: The display name
    ErrorMessage:
      type: object
      properties:
        error_code:
          type: integer
          description: The error code
          format: int32
        message:
          type: string
          description: The error message
      description: Error message of this operation
    AclOperation:
      type: string
      x-extensible-enum:
        - UNKNOWN
        - ANY
        - ALL
        - READ
        - WRITE
        - CREATE
        - DELETE
        - ALTER
        - DESCRIBE
        - CLUSTER_ACTION
        - DESCRIBE_CONFIGS
        - ALTER_CONFIGS
        - IDEMPOTENT_WRITE
    AclPatternType:
      type: string
      x-extensible-enum:
        - UNKNOWN
        - ANY
        - MATCH
        - LITERAL
        - PREFIXED
    AclPermission:
      type: string
      x-extensible-enum:
        - UNKNOWN
        - ANY
        - DENY
        - ALLOW
    AclResourceType:
      type: string
      enum:
        - UNKNOWN
        - ANY
        - TOPIC
        - GROUP
        - CLUSTER
        - TRANSACTIONAL_ID
        - DELEGATION_TOKEN
    BrokerTaskType:
      type: string
      enum:
        - add-broker
        - remove-broker
    MirrorTopicStatus:
      enum:
        - ACTIVE
        - FAILED
        - LINK_FAILED
        - LINK_PAUSED
        - PAUSED
        - PENDING_STOPPED
        - SOURCE_UNAVAILABLE
        - STOPPED
        - PENDING_MIRROR
        - PENDING_SYNCHRONIZE
        - PENDING_SETUP_FOR_RESTORE
        - PENDING_RESTORE
      type: string
    AlterConfigBatchRequestData:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              value:
                type: string
                nullable: true
              operation:
                type: string
                x-extensible-enum:
                  - SET
                  - DELETE
                nullable: true
        validate_only:
          type: boolean
    CreateAclRequestData:
      type: object
      required:
        - resource_type
        - resource_name
        - pattern_type
        - principal
        - host
        - operation
        - permission
      properties:
        resource_type:
          $ref: '#/components/schemas/AclResourceType'
        resource_name:
          type: string
        pattern_type:
          $ref: '#/components/schemas/AclPatternType'
        principal:
          type: string
        host:
          type: string
        operation:
          $ref: '#/components/schemas/AclOperation'
        permission:
          $ref: '#/components/schemas/AclPermission'
    CreateAclRequestDataList:
      allOf:
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/CreateAclRequestData'
    CreateTopicRequestData:
      type: object
      required:
        - topic_name
      properties:
        topic_name:
          type: string
        partitions_count:
          type: integer
        replication_factor:
          type: integer
        configs:
          type: array
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              value:
                type: string
                nullable: true
        validate_only:
          type: boolean
    ProduceRequest:
      type: object
      properties:
        partition_id:
          type: integer
          nullable: true
          format: int32
        headers:
          type: array
          items:
            $ref: '#/components/schemas/ProduceRequestHeader'
        key:
          $ref: '#/components/schemas/ProduceRequestData'
        value:
          $ref: '#/components/schemas/ProduceRequestData'
        timestamp:
          type: string
          format: date-time
          nullable: true
    UpdateConfigRequestData:
      type: object
      properties:
        value:
          type: string
          nullable: true
    CreateLinkRequestData:
      properties:
        source_cluster_id:
          type: string
        destination_cluster_id:
          type: string
        remote_cluster_id:
          description: The expected remote cluster ID.
          type: string
        cluster_link_id:
          description: 'The expected cluster link ID. Can be provided when creating the second side of a bidirectional link for validating the link ID is as expected. If it''s not provided, it''s inferred from the remote cluster.'
          type: string
        configs:
          items:
            $ref: '#/components/schemas/ConfigData'
          type: array
      type: object
    UpdateLinkConfigRequestData:
      properties:
        value:
          type: string
      required:
        - value
      type: object
    CreateMirrorTopicRequestData:
      properties:
        source_topic_name:
          type: string
        mirror_topic_name:
          type: string
        replication_factor:
          type: integer
        configs:
          type: array
          items:
            $ref: '#/components/schemas/ConfigData'
      required:
        - source_topic_name
      type: object
    AlterMirrorsRequestData:
      properties:
        mirror_topic_names:
          description: The mirror topics specified as a list of topic names.
          type: array
          items:
            type: string
        mirror_topic_name_pattern:
          description: The mirror topics specified as a pattern.
          type: string
      type: object
    RemoveBrokersRequestData:
      properties:
        broker_ids:
          type: array
          items:
            type: integer
      required:
        - broker_ids
      type: object
    BrokerReplicaExclusionBatchRequestData:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BrokerReplicaExclusionRequestData'
    ConstraintDef:
      type: object
      properties:
        type:
          type: string
          description: The type
        params:
          type: object
          description: The params
          additionalProperties:
            type: object
    ProduceRequestHeader:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        value:
          type: string
          format: byte
          nullable: true
    ProduceRequestData:
      type: object
      properties:
        type:
          type: string
          x-extensible-enum:
            - BINARY
            - JSON
            - STRING
        data:
          $ref: '#/components/schemas/AnyValue'
      nullable: true
    ConfigData:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
      required:
        - name
        - value
    BrokerReplicaExclusionRequestData:
      type: object
      required:
        - broker_id
        - reason
      properties:
        broker_id:
          type: integer
        reason:
          type: string
    AnyValue:
      nullable: true
    BusinessMetadataDef:
      properties:
        category:
          enum:
            - PRIMITIVE
            - OBJECT_ID_TYPE
            - ENUM
            - STRUCT
            - CLASSIFICATION
            - ENTITY
            - ARRAY
            - MAP
            - RELATIONSHIP
            - BUSINESS_METADATA
          type: string
          description: The category
        guid:
          type: string
          description: The internal guid
        createdBy:
          type: string
          description: The creator
        updatedBy:
          type: string
          description: The updater
        createTime:
          format: int64
          type: integer
          description: The create time
        updateTime:
          format: int64
          type: integer
          description: The update time
        version:
          format: int32
          type: integer
          description: The version
        name:
          type: string
          description: The name
        description:
          type: string
          description: The description
        typeVersion:
          type: string
          description: The type version
        serviceType:
          type: string
          description: The service type
        options:
          additionalProperties:
            type: string
          type: object
          description: The options
        attributeDefs:
          items:
            $ref: '#/components/schemas/AttributeDef'
          type: array
          description: The attribute definitions
      type: object
    BusinessMetadata:
      properties:
        typeName:
          type: string
          description: The business metadata name
        attributes:
          type: object
          description: The business metadata attributes
        entityType:
          type: string
          description: The entity type
        entityName:
          type: string
          description: The qualified name of the entity
      type: object
    BusinessMetadataResponse:
      properties:
        typeName:
          type: string
          description: The business metadata name
        attributes:
          type: object
          description: The business metadata attributes
        entityType:
          type: string
          description: The entity type
        entityName:
          type: string
          description: The qualified name of the entity
        error:
          $ref: '#/components/schemas/ErrorMessage'
      type: object
    Tag:
      type: object
      properties:
        typeName:
          type: string
          description: The tag name
        attributes:
          type: object
          description: The tag attributes
        entityGuid:
          type: string
          description: The internal entity guid
        entityStatus:
          type: string
          description: The entity status
          enum:
            - ACTIVE
            - DELETED
            - PURGED
        propagate:
          type: boolean
          description: Whether to propagate the tag
        validityPeriods:
          type: array
          description: The validity periods
          items:
            $ref: '#/components/schemas/TimeBoundary'
        removePropagationsOnEntityDelete:
          type: boolean
          description: Whether to remove propagations on entity delete
        entityType:
          type: string
          description: The entity type
        entityName:
          type: string
          description: The qualified name of the entity
    TagResponse:
      type: object
      properties:
        typeName:
          type: string
          description: The tag name
        attributes:
          type: object
          description: The tag attributes
        entityGuid:
          type: string
          description: The internal entity guid
        entityStatus:
          type: string
          description: The entity status
          enum:
            - ACTIVE
            - DELETED
            - PURGED
        propagate:
          type: boolean
          description: Whether to propagate the tag
        validityPeriods:
          type: array
          description: The validity periods
          items:
            $ref: '#/components/schemas/TimeBoundary'
        removePropagationsOnEntityDelete:
          type: boolean
          description: Whether to remove propagations on entity delete
        entityType:
          type: string
          description: The entity type
        entityName:
          type: string
          description: The qualified name of the entity
        error:
          $ref: '#/components/schemas/ErrorMessage'
    TimeBoundary:
      type: object
      properties:
        startTime:
          type: string
          description: 'The start time of format yyyy/MM/dd HH:mm:ss'
        endTime:
          type: string
          description: 'The end time of format yyyy/MM/dd HH:mm:ss'
        timeZone:
          type: string
          description: The time zone (see java.util.TimeZone)
    EntityWithExtInfo:
      type: object
      properties:
        referredEntities:
          type: object
          description: The referred entities
          additionalProperties:
            $ref: '#/components/schemas/Entity'
        entity:
          $ref: '#/components/schemas/Entity'
    Entity:
      type: object
      description: The entity
      properties:
        typeName:
          type: string
          description: The type name
        attributes:
          type: object
          description: The type attributes
        guid:
          type: string
          description: The internal guid
        homeId:
          type: string
          description: The home id
        isProxy:
          type: boolean
          description: Whether is a proxy
          writeOnly: true
        isIncomplete:
          type: boolean
          description: Whether is incomplete
        provenanceType:
          type: integer
          description: The provenance type
          format: int32
        status:
          type: string
          description: The status
          enum:
            - ACTIVE
            - DELETED
            - PURGED
        createdBy:
          type: string
          description: The creator
        updatedBy:
          type: string
          description: The updater
        createTime:
          type: integer
          description: The create time
          format: int64
        updateTime:
          type: integer
          description: The update time
          format: int64
        version:
          type: integer
          description: The version
          format: int32
        relationshipAttributes:
          type: object
          description: The relationship attributes
        classifications:
          type: array
          description: The classifications (tags)
          items:
            $ref: '#/components/schemas/Classification'
        meanings:
          type: array
          description: The meanings
          items:
            $ref: '#/components/schemas/TermAssignmentHeader'
        customAttributes:
          type: object
          description: The custom attributes
          additionalProperties:
            type: string
        businessAttributes:
          type: object
          description: The business attributes
          additionalProperties:
            type: object
        labels:
          uniqueItems: true
          type: array
          description: The labels
          items:
            type: string
        proxy:
          type: boolean
          description: Whether is a proxy
    Classification:
      type: object
      properties:
        typeName:
          type: string
          description: The tag name
        attributes:
          type: object
          description: The tag attributes
          additionalProperties:
            type: object
        entityGuid:
          type: string
          description: The internal entity guid
        entityStatus:
          type: string
          description: The entity status
          enum:
            - ACTIVE
            - DELETED
            - PURGED
        propagate:
          type: boolean
          description: Whether to propagate the tag
        validityPeriods:
          type: array
          description: The validity periods
          items:
            $ref: '#/components/schemas/TimeBoundary'
        removePropagationsOnEntityDelete:
          type: boolean
          description: Whether to remove propagations on entity delete
    TermAssignmentHeader:
      type: object
      properties:
        termGuid:
          type: string
          description: The term guid
        relationGuid:
          type: string
          description: The relation guid
        description:
          type: string
          description: The description
        displayText:
          type: string
          description: The display text
        expression:
          type: string
          description: The expression
        createdBy:
          type: string
          description: The creator
        steward:
          type: string
          description: The steward
        source:
          type: string
          description: The source
        confidence:
          type: integer
          description: The confidence
          format: int32
        status:
          type: string
          description: The status
          enum:
            - DISCOVERED
            - PROPOSED
            - IMPORTED
            - VALIDATED
            - DEPRECATED
            - OBSOLETE
            - OTHER
    EntityPartialUpdateResponse:
      type: object
      properties:
        mutatedEntities:
          $ref: '#/components/schemas/EntityPartialUpdate'
      description: The type name
    EntityPartialUpdate:
      type: object
      properties:
        UPDATE:
          type: array
          description: The updated entities.
          items:
            $ref: '#/components/schemas/PartialUpdateParams'
      description: The updated entities.
    PartialUpdateParams:
      type: object
      properties:
        typeName:
          type: string
          description: The type name
        attributes:
          type: object
          description: The attributes
        guid:
          type: string
          description: The internal guid
        status:
          type: string
          description: The status
          enum:
            - ACTIVE
            - DELETED
            - PURGED
        classificationNames:
          type: array
          description: The classification (tag) names
          items:
            type: string
        classifications:
          type: array
          description: The classifications (tags)
          items:
            $ref: '#/components/schemas/ClassificationHeader'
        isIncomplete:
          type: boolean
          description: Whether is incomplete
    ClassificationHeader:
      type: object
      properties:
        typeName:
          type: string
          description: The tag name
        entityGuid:
          type: string
          description: The internal entity guid
        entityStatus:
          type: string
          description: The entity status
          enum:
            - ACTIVE
            - DELETED
            - PURGED
        propagate:
          type: boolean
          description: Whether to propagate the tag
        removePropagationsOnEntityDelete:
          type: boolean
          description: Whether to remove propagations on entity delete
    SearchResult:
      type: object
      properties:
        searchParameters:
          $ref: '#/components/schemas/SearchParams'
        types:
          type: array
          description: The types
          items:
            type: string
        entities:
          type: array
          description: The entities
          items:
            $ref: '#/components/schemas/EntityHeader'
        referredEntities:
          type: object
          description: The referred entities
          additionalProperties:
            $ref: '#/components/schemas/EntityHeader'
    SearchParams:
      type: object
      description: Search paramas to filter results
      properties:
        includeDeleted:
          type: boolean
          description: Whether to include deleted
        limit:
          type: integer
          description: The limit
          format: int32
        offset:
          type: integer
          description: The offset
          format: int32
    EntityHeader:
      type: object
      properties:
        typeName:
          type: string
          description: The type name
        attributes:
          type: object
          description: The attributes
          additionalProperties: true
        guid:
          type: string
          description: The internal guid
        status:
          type: string
          description: The status
          enum:
            - ACTIVE
            - DELETED
            - PURGED
        displayText:
          type: string
          description: The display text
        classificationNames:
          type: array
          description: The classification (tag) names
          items:
            type: string
        classifications:
          type: array
          description: The classifications (tags)
          items:
            $ref: '#/components/schemas/Classification'
        meaningNames:
          type: array
          description: The meaning names
          items:
            type: string
        meanings:
          type: array
          description: The meanings
          items:
            $ref: '#/components/schemas/TermAssignmentHeader'
        isIncomplete:
          type: boolean
          description: Whether is incomplete
        labels:
          uniqueItems: true
          type: array
          description: The labels
          items:
            type: string
    TagDefResponse:
      type: object
      properties:
        category:
          type: string
          description: The category
          enum:
            - PRIMITIVE
            - OBJECT_ID_TYPE
            - ENUM
            - STRUCT
            - CLASSIFICATION
            - ENTITY
            - ARRAY
            - MAP
            - RELATIONSHIP
            - BUSINESS_METADATA
        guid:
          type: string
          description: The internal guid
        createdBy:
          type: string
          description: The creator
        updatedBy:
          type: string
          description: The updater
        createTime:
          type: integer
          description: The create time
          format: int64
        updateTime:
          type: integer
          description: The update time
          format: int64
        version:
          type: integer
          description: The version
          format: int32
        name:
          type: string
          description: The name
        description:
          type: string
          description: The description
        typeVersion:
          type: string
          description: The type version
        serviceType:
          type: string
          description: The service type
        options:
          type: object
          description: The options
          additionalProperties:
            type: string
        attributeDefs:
          type: array
          description: The attribute definitions
          items:
            $ref: '#/components/schemas/AttributeDef'
        superTypes:
          uniqueItems: true
          type: array
          description: The supertypes
          items:
            type: string
        entityTypes:
          uniqueItems: true
          type: array
          description: The entity types
          items:
            type: string
        subTypes:
          uniqueItems: true
          type: array
          description: The subtypes
          items:
            type: string
        error:
          $ref: '#/components/schemas/ErrorMessage'
    TagDef:
      type: object
      properties:
        category:
          type: string
          description: The category
          enum:
            - PRIMITIVE
            - OBJECT_ID_TYPE
            - ENUM
            - STRUCT
            - CLASSIFICATION
            - ENTITY
            - ARRAY
            - MAP
            - RELATIONSHIP
            - BUSINESS_METADATA
        guid:
          type: string
          description: The internal guid
        createdBy:
          type: string
          description: The creator
        updatedBy:
          type: string
          description: The updater
        createTime:
          type: integer
          description: The create time
          format: int64
        updateTime:
          type: integer
          description: The update time
          format: int64
        version:
          type: integer
          description: The version
          format: int32
        name:
          type: string
          description: The name
        description:
          type: string
          description: The description
        typeVersion:
          type: string
          description: The type version
        serviceType:
          type: string
          description: The service type
        options:
          type: object
          description: The options
          additionalProperties:
            type: string
        attributeDefs:
          type: array
          description: The attribute definitions
          items:
            $ref: '#/components/schemas/AttributeDef'
        superTypes:
          uniqueItems: true
          type: array
          description: The supertypes
          items:
            type: string
        entityTypes:
          uniqueItems: true
          type: array
          description: The entity types
          items:
            type: string
        subTypes:
          uniqueItems: true
          type: array
          description: The subtypes
          items:
            type: string
  parameters:
    AclHost:
      name: host
      description: The ACL host.
      in: query
      required: false
      schema:
        type: string
    AclOperation:
      name: operation
      description: The ACL operation.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/AclOperation'
    AclOperationRequired:
      name: operation
      description: The ACL operation.
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AclOperation'
    AclPatternType:
      name: pattern_type
      description: The ACL pattern type.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/AclPatternType'
    AclPatternTypeRequired:
      name: pattern_type
      description: The ACL pattern type.
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AclPatternType'
    AclPermission:
      name: permission
      description: The ACL permission.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/AclPermission'
    AclPermissionRequired:
      name: permission
      description: The ACL permission.
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AclPermission'
    AclPrincipal:
      name: principal
      description: The ACL principal. This is the Service Account name or user name.
      in: query
      required: false
      schema:
        type: string
    AclResourceName:
      name: resource_name
      description: The ACL resource name.
      in: query
      required: false
      schema:
        type: string
    AclResourceType:
      name: resource_type
      description: The ACL resource type.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/AclResourceType'
    AclResourceTypeRequired:
      name: resource_type
      description: The ACL resource type.
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AclResourceType'
    BrokerId:
      name: broker_id
      description: The Kafka broker ID.
      in: path
      required: true
      schema:
        type: integer
      example: 1
    ClusterId:
      name: cluster_id
      description: The Kafka cluster ID.
      in: path
      required: true
      schema:
        type: string
      example: cluster-1
    ConfigName:
      name: name
      description: The configuration parameter name.
      in: path
      required: true
      schema:
        type: string
      example: compression.type
    ConsumerGroupId:
      name: consumer_group_id
      description: The consumer group ID.
      in: path
      required: true
      schema:
        type: string
      example: consumer-group-1
    ConsumerId:
      name: consumer_id
      description: The consumer ID.
      in: path
      required: true
      schema:
        type: string
      example: consumer-1
    IncludeAuthorizedOperations:
      name: include_authorized_operations
      description: Specify if authorized operations should be included in the response.
      in: query
      required: false
      schema:
        type: boolean
    PartitionId:
      name: partition_id
      description: The partition ID.
      in: path
      required: true
      schema:
        type: integer
      example: 0
    TopicName:
      name: topic_name
      description: The topic name.
      in: path
      required: true
      schema:
        type: string
      example: topic-1
    BrokerTaskType:
      name: task_type
      description: The Kafka broker task type.
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/BrokerTaskType'
      example: remove-broker
    ShouldShutdown:
      name: should_shutdown
      description: 'To shutdown the broker or not, Default: true'
      in: query
      required: false
      schema:
        type: boolean
      example: true
    ValidateOnly:
      name: validate_only
      description: 'To validate the action can be performed successfully or not. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    ValidateLink:
      name: validate_link
      description: 'To synchronously validate that the source cluster ID is expected and the dest cluster has the permission to read topics in the source cluster. Default: true'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    IncludeTasks:
      name: include_tasks
      description: 'Whether to include cluster linking tasks in the response. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    IncludeStateTransitionErrors:
      name: include_state_transition_errors
      description: 'Whether to include mirror state transition errors in the response. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    Force:
      name: force
      description: 'Force the action. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    IncludePartitionLevelTruncationData:
      name: include_partition_level_truncation_data
      description: 'Whether to include partition level truncation information when truncating and restoring a topic in the response. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    LinkName:
      name: link_name
      description: The link name
      in: path
      required: true
      schema:
        type: string
      example: link-sb1
    LinkConfigName:
      name: config_name
      description: The link config name
      in: path
      required: true
      schema:
        type: string
      example: consumer.offset.sync.enable
    MirrorTopicStatus:
      name: mirror_status
      description: 'The status of the mirror topic. If not specified, all mirror topics will be returned.'
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/MirrorTopicStatus'
      example: ACTIVE
    MirrorTopicName:
      name: mirror_topic_name
      description: Cluster Linking mirror topic name
      in: path
      required: true
      schema:
        type: string
      example: topic-1
    QueryParamLinkName:
      name: link_name
      description: The link name
      in: query
      required: true
      schema:
        type: string
      example: link-sb1
  responses: {}
  securitySchemes:
    cloud-api-key:
      type: http
      scheme: basic
      description: Authenticate with Cloud API Keys using HTTP Basic Auth. Treat the Cloud API Key ID as the username and Cloud API Key Secret as the password.
    confluent-sts-access-token:
      type: oauth2
      description: Authenticate with Confluent API using this credentials (JSON Web Tokens) following OAuth 2.0.
      flows:
        clientCredentials:
          tokenUrl: 'https://api.confluent.cloud/sts/v1/oauth2/token'
          scopes: {}
    api-key:
      type: http
      scheme: basic
      description: Authenticate with API Keys using HTTP Basic Auth. Treat the API Key ID as the username and API Key Secret as the password.
    resource-api-key:
      type: http
      scheme: basic
      description: |
        Authenticate with resource-specific API Keys using HTTP Basic Auth. Treat the resource-specific API Key ID 
        as the username and resource-specific API Key Secret as the password.
    external-access-token:
      type: oauth2
      description: Authenticate with OAuth 2.0.
      flows:
        clientCredentials:
          tokenUrl: 'https://<oauth-identity-provider>/token'
          scopes: {}
    oauth:
      type: oauth2
      description: Authenticate with OAuth 2.0. Currently this is only supported for partner APIs.
      flows:
        clientCredentials:
          tokenUrl: /oauth2/token
          scopes:
            'partner:alter': enables partners to alter entitlements
            'partner:create': enables partners to create entitlements and signup on behalf of customers
            'partner:delete': enables partners to delete entitlements and organizations
            'partner:describe': enables partners to read and list entitlements and organizations
  requestBodies:
    AlterBrokerConfigBatchRequest:
      description: The alter broker configuration parameter batch request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
          example:
            data:
              - name: max.connections
                operation: DELETE
              - name: compression.type
                value: gzip
    AlterClusterConfigBatchRequest:
      description: The alter cluster configuration parameter batch request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
          example:
            data:
              - name: max.connections
                operation: DELETE
              - name: compression.type
                value: gzip
    AlterTopicConfigBatchRequest:
      description: The alter topic configuration parameter batch request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
          examples:
            batch_alter_topic_configs:
              value:
                data:
                  - name: cleanup.policy
                    operation: DELETE
                  - name: compression.type
                    value: gzip
            validate_only_batch_alter_topic_configs:
              value:
                data:
                  - name: cleanup.policy
                    operation: DELETE
                  - name: compression.type
                    value: gzip
                validate_only: true
    CreateAclRequest:
      description: The ACL creation request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateAclRequestData'
          example:
            resource_type: CLUSTER
            resource_name: kafka-cluster
            pattern_type: LITERAL
            principal: 'principalType:principalName'
            host: '*'
            operation: DESCRIBE
            permission: DENY
    BatchCreateAclRequest:
      description: The batch ACL creation request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateAclRequestDataList'
          example:
            data:
              - resource_type: CLUSTER
                resource_name: kafka-cluster
                pattern_type: LITERAL
                principal: 'principalType:principalName'
                host: '*'
                operation: DESCRIBE
                permission: DENY
              - resource_type: TOPIC
                resource_name: kafka-cluster
                pattern_type: LITERAL
                principal: 'principalType:principalName'
                host: '*'
                operation: READ
                permission: ALLOW
    CreateTopicRequest:
      description: 'The topic creation request. Note that Confluent Cloud allows only specific replication factor values. Because of that the replication factor field should either be omitted or it should use one of the allowed values (see https://docs.confluent.io/cloud/current/client-apps/optimizing/durability.html).'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTopicRequestData'
          examples:
            uniform_replication:
              value:
                topic_name: topic-X
                partitions_count: 64
                replication_factor: 3
                configs:
                  - name: cleanup.policy
                    value: compact
                  - name: compression.type
                    value: gzip
            dry_run_create_topic:
              value:
                topic_name: topic-X
                partitions_count: 64
                replication_factor: 3
                validate_only: true
    ProduceRequest:
      description: 'A single record to be produced to Kafka. To produce multiple records in the same request, simply concatenate the records. The delivery reports are concatenated in the same order as the records are sent.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProduceRequest'
          examples:
            binary_and_json:
              description: 'If using type, one of "BINARY", "JSON" or "STRING" is required.'
              value:
                partition_id: 1
                headers:
                  - name: Header-1
                    value: SGVhZGVyLTE=
                  - name: Header-2
                    value: SGVhZGVyLTI=
                key:
                  type: BINARY
                  data: Zm9vYmFy
                value:
                  type: JSON
                  data:
                    foo: bar
                timestamp: '2021-02-05T19:14:42Z'
            string:
              description: 'If using type, one of "BINARY", "JSON" or "STRING" is required.'
              value:
                value:
                  type: STRING
                  data: My message
            empty_value:
              description: key or value can be omitted entirely.
              value:
                key:
                  data: 1000
    UpdateBrokerConfigRequest:
      description: The broker configuration parameter update request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
          example:
            value: gzip
    UpdateClusterConfigRequest:
      description: The cluster configuration parameter update request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
          example:
            value: gzip
    UpdateTopicConfigRequest:
      description: The topic configuration parameter update request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
          example:
            value: gzip
    CreateLinkRequest:
      description: Create a cluster link
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateLinkRequestData'
          examples:
            destination_initiated_link:
              description: Create a destination initiated cluster link
              value:
                source_cluster_id: cluster-1
                configs:
                  - name: bootstrap.servers
                    value: cluster-1-bootstrap-server
                  - name: acl.sync.enable
                    value: 'false'
                  - name: consumer.offset.sync.ms
                    value: '30000'
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
            source_initiated_link_at_source_cluster:
              description: Create a source initiated cluster link at source cluster
              value:
                destination_cluster_id: cluster-2
                configs:
                  - name: bootstrap.servers
                    value: cluster-2-bootstrap-server
                  - name: link.mode
                    value: SOURCE
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
            source_initiated_link_at_destination_cluster:
              description: Create a source initiated cluster link at destination cluster
              value:
                destination_cluster_id: cluster-1
                configs:
                  - name: bootstrap.servers
                    value: cluster-1-bootstrap-server
                  - name: link.mode
                    value: DESTINATION
                  - name: connection.mode
                    value: INBOUND
                  - name: acl.sync.enable
                    value: 'false'
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
            bidirectional_link_east:
              description: Create a bidirectional cluster link in east
              value:
                remote_cluster_id: cluster-west
                configs:
                  - name: bootstrap.servers
                    value: cluster-west-bootstrap-server
                  - name: link.mode
                    value: BIDIRECTIONAL
                  - name: cluster.link.prefix
                    value: west.
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
            bidirectional_link_west:
              description: Create a bidirectional cluster link in west
              value:
                remote_cluster_id: cluster-east
                cluster_link_id: eEBkTffYSESld6EO898x3w
                configs:
                  - name: bootstrap.servers
                    value: cluster-east-bootstrap-server
                  - name: link.mode
                    value: BIDIRECTIONAL
                  - name: cluster.link.prefix
                    value: east.
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
    UpdateLinkConfigRequest:
      content:
        application/json:
          example:
            value: '300000'
          schema:
            $ref: '#/components/schemas/UpdateLinkConfigRequestData'
      description: Link config value to update
    AlterLinkConfigBatchRequest:
      content:
        application/json:
          example:
            data:
              - name: cleanup.policy
                operation: DELETE
              - name: compression.type
                value: gzip
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
    CreateMirrorTopicRequest:
      description: 'Name and configs of the topics mirroring from and mirroring to. Note that Confluent Cloud allows only specific replication factor values. Because of that the replication factor field should either be omitted or it should use one of the allowed values (see https://docs.confluent.io/cloud/current/client-apps/optimizing/durability.html).'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateMirrorTopicRequestData'
          examples:
            generic_example:
              description: Generic example of creating a mirror topic
              value:
                source_topic_name: topic-1
                configs:
                  - name: unclean.leader.election.enable
                    value: 'true'
                replication_factor: 1
            example_with_mirror_topic_name:
              description: Example using optional mirror_topic_name flag
              value:
                source_topic_name: topic-1
                mirror_topic_name: link1_topic-1
                configs:
                  - name: unclean.leader.election.enable
                    value: 'true'
                replication_factor: 3
    AlterMirrorsRequest:
      description: Mirror topics to be altered.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterMirrorsRequestData'
          examples:
            mirror_topic_names:
              description: Example using mirror topic names
              value:
                mirror_topic_names:
                  - topic-1
                  - topic-2
            mirror_topic_name_pattern:
              description: Example using mirror topic name pattern
              value:
                mirror_topic_name_pattern: .*
    RemoveBrokersRequest:
      content:
        application/json:
          example:
            broker_ids:
              - 1
              - 2
              - 3
          schema:
            $ref: '#/components/schemas/RemoveBrokersRequestData'
      description: Broker ids to remove
    BrokerReplicaExclusionBatchRequest:
      description: Alter Broker Replica Exclusions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BrokerReplicaExclusionBatchRequestData'
          example:
            data:
              - broker_id: 1
                reason: The broker is to be removed.
              - broker_id: 2
                reason: The broker is to be removed.
  x-stackQL-resources:
    business_metadata_defs:
      id: confluent.catalog.business_metadata_defs
      name: business_metadata_defs
      title: Business Metadata Defs
      methods:
        get_all_business_metadata_defs:
          operation:
            $ref: '#/paths/~1catalog~1v1~1types~1businessmetadatadefs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_business_metadata_defs:
          operation:
            $ref: '#/paths/~1catalog~1v1~1types~1businessmetadatadefs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_business_metadata_defs:
          operation:
            $ref: '#/paths/~1catalog~1v1~1types~1businessmetadatadefs/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_business_metadata_def:
          operation:
            $ref: '#/paths/~1catalog~1v1~1types~1businessmetadatadefs~1{bmName}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_business_metadata_def_by_name:
          operation:
            $ref: '#/paths/~1catalog~1v1~1types~1businessmetadatadefs~1{bmName}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/BusinessMetadataDef'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/business_metadata_defs/methods/get_business_metadata_def_by_name'
          - $ref: '#/components/x-stackQL-resources/business_metadata_defs/methods/get_all_business_metadata_defs'
        insert:
          - $ref: '#/components/x-stackQL-resources/business_metadata_defs/methods/create_business_metadata_defs'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/business_metadata_defs/methods/delete_business_metadata_def'
    business_metadata:
      id: confluent.catalog.business_metadata
      name: business_metadata
      title: Business Metadata
      methods:
        create_business_metadata:
          operation:
            $ref: '#/paths/~1catalog~1v1~1entity~1businessmetadata/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_business_metadata:
          operation:
            $ref: '#/paths/~1catalog~1v1~1entity~1businessmetadata/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_business_metadata:
          operation:
            $ref: '#/paths/~1catalog~1v1~1entity~1type~1{typeName}~1name~1{qualifiedName}~1businessmetadata/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_business_metadata:
          operation:
            $ref: '#/paths/~1catalog~1v1~1entity~1type~1{typeName}~1name~1{qualifiedName}~1businessmetadata~1{bmName}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/business_metadata/methods/get_business_metadata'
        insert:
          - $ref: '#/components/x-stackQL-resources/business_metadata/methods/create_business_metadata'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/business_metadata/methods/delete_business_metadata'
    tags:
      id: confluent.catalog.tags
      name: tags
      title: Tags
      methods:
        update_tags:
          operation:
            $ref: '#/paths/~1catalog~1v1~1entity~1tags/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_tags:
          operation:
            $ref: '#/paths/~1catalog~1v1~1entity~1tags/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_tags:
          operation:
            $ref: '#/paths/~1catalog~1v1~1entity~1type~1{typeName}~1name~1{qualifiedName}~1tags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_tag:
          operation:
            $ref: '#/paths/~1catalog~1v1~1entity~1type~1{typeName}~1name~1{qualifiedName}~1tags~1{tagName}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tags/methods/get_tags'
        insert:
          - $ref: '#/components/x-stackQL-resources/tags/methods/create_tags'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/tags/methods/delete_tag'
    entities:
      id: confluent.catalog.entities
      name: entities
      title: Entities
      methods:
        get_by_unique_attributes:
          operation:
            $ref: '#/paths/~1catalog~1v1~1entity~1type~1{typeName}~1name~1{qualifiedName}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/EntityWithExtInfo'
        partial_entity_update:
          operation:
            $ref: '#/paths/~1catalog~1v1~1entity/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/EntityPartialUpdateResponse'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/entities/methods/get_by_unique_attributes'
        insert: []
        update: []
        replace: []
        delete: []
    searches:
      id: confluent.catalog.searches
      name: searches
      title: Searches
      methods:
        search_using_attribute:
          operation:
            $ref: '#/paths/~1catalog~1v1~1search~1attribute/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/SearchResult'
        search_using_basic:
          operation:
            $ref: '#/paths/~1catalog~1v1~1search~1basic/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/SearchResult'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/searches/methods/search_using_attribute'
          - $ref: '#/components/x-stackQL-resources/searches/methods/search_using_basic'
        insert: []
        update: []
        replace: []
        delete: []
    tag_defs:
      id: confluent.catalog.tag_defs
      name: tag_defs
      title: Tag Defs
      methods:
        get_all_tag_defs:
          operation:
            $ref: '#/paths/~1catalog~1v1~1types~1tagdefs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_tag_defs:
          operation:
            $ref: '#/paths/~1catalog~1v1~1types~1tagdefs/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_tag_defs:
          operation:
            $ref: '#/paths/~1catalog~1v1~1types~1tagdefs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_tag_def_by_name:
          operation:
            $ref: '#/paths/~1catalog~1v1~1types~1tagdefs~1{tagName}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/TagDef'
        delete_tag_def:
          operation:
            $ref: '#/paths/~1catalog~1v1~1types~1tagdefs~1{tagName}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tag_defs/methods/get_tag_def_by_name'
          - $ref: '#/components/x-stackQL-resources/tag_defs/methods/get_all_tag_defs'
        insert:
          - $ref: '#/components/x-stackQL-resources/tag_defs/methods/create_tag_defs'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/tag_defs/methods/delete_tag_def'
paths:
  /catalog/v1/types/businessmetadatadefs:
    get:
      summary: Bulk Read Business Metadata Definitions
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk retrieval API for retrieving business metadata definitions.
      operationId: getAllBusinessMetadataDefs
      tags:
        - Types (v1)
      parameters:
        - description: The prefix of a business metadata definition name
          explode: true
          in: query
          name: prefix
          required: false
          schema:
            type: string
          style: form
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BusinessMetadataDefResponse'
                type: array
          description: The business metadata definitions
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            conn.request("GET", "/catalog/v1/types/businessmetadatadefs")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/types/businessmetadatadefs",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
    post:
      summary: Bulk Create Business Metadata Definitions
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk create API for business metadata definitions.
      operationId: createBusinessMetadataDefs
      tags:
        - Types (v1)
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/BusinessMetadataDef'
              type: array
        description: The business metadata definitions to create
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BusinessMetadataDefResponse'
                type: array
          description: The business metadata definitions. Errored business metadata definitions will have an additional error property.
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs \
              --header 'content-type: application/json' \
              --data '[{"category":"PRIMITIVE","guid":"string","createdBy":"string","updatedBy":"string","createTime":0,"updateTime":0,"version":0,"name":"string","description":"string","typeVersion":"string","serviceType":"string","options":{"property1":"string","property2":"string"},"attributeDefs":[{"name":"string","typeName":"string","isOptional":true,"cardinality":"SINGLE","valuesMinCount":0,"valuesMaxCount":0,"isUnique":true,"isIndexable":true,"includeInNotification":true,"defaultValue":"string","description":"string","searchWeight":0,"indexType":"DEFAULT","constraints":[{"type":"string","params":{"property1":{},"property2":{}}}],"options":{"property1":"string","property2":"string"},"displayName":"string"}]}]'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}]}]");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs")
              .post(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs\"\n\n\tpayload := strings.NewReader(\"[{\\\"category\\\":\\\"PRIMITIVE\\\",\\\"guid\\\":\\\"string\\\",\\\"createdBy\\\":\\\"string\\\",\\\"updatedBy\\\":\\\"string\\\",\\\"createTime\\\":0,\\\"updateTime\\\":0,\\\"version\\\":0,\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"typeVersion\\\":\\\"string\\\",\\\"serviceType\\\":\\\"string\\\",\\\"options\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"attributeDefs\\\":[{\\\"name\\\":\\\"string\\\",\\\"typeName\\\":\\\"string\\\",\\\"isOptional\\\":true,\\\"cardinality\\\":\\\"SINGLE\\\",\\\"valuesMinCount\\\":0,\\\"valuesMaxCount\\\":0,\\\"isUnique\\\":true,\\\"isIndexable\\\":true,\\\"includeInNotification\\\":true,\\\"defaultValue\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"searchWeight\\\":0,\\\"indexType\\\":\\\"DEFAULT\\\",\\\"constraints\\\":[{\\\"type\\\":\\\"string\\\",\\\"params\\\":{\\\"property1\\\":{},\\\"property2\\\":{}}}],\\\"options\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"displayName\\\":\\\"string\\\"}]}]\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}]}]"

            headers = { 'content-type': "application/json" }

            conn.request("POST", "/catalog/v1/types/businessmetadatadefs", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/types/businessmetadatadefs",
              "headers": {
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify([
              {
                category: 'PRIMITIVE',
                guid: 'string',
                createdBy: 'string',
                updatedBy: 'string',
                createTime: 0,
                updateTime: 0,
                version: 0,
                name: 'string',
                description: 'string',
                typeVersion: 'string',
                serviceType: 'string',
                options: {property1: 'string', property2: 'string'},
                attributeDefs: [
                  {
                    name: 'string',
                    typeName: 'string',
                    isOptional: true,
                    cardinality: 'SINGLE',
                    valuesMinCount: 0,
                    valuesMaxCount: 0,
                    isUnique: true,
                    isIndexable: true,
                    includeInNotification: true,
                    defaultValue: 'string',
                    description: 'string',
                    searchWeight: 0,
                    indexType: 'DEFAULT',
                    constraints: [{type: 'string', params: {property1: {}, property2: {}}}],
                    options: {property1: 'string', property2: 'string'},
                    displayName: 'string'
                  }
                ]
              }
            ]));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/json");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}]}]");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs");
            var request = new RestRequest(Method.POST);
            request.AddHeader("content-type", "application/json");
            request.AddParameter("application/json", "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}]}]", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
    put:
      summary: Bulk Update Business Metadata Definitions
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk update API for business metadata definitions.
      operationId: updateBusinessMetadataDefs
      tags:
        - Types (v1)
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/BusinessMetadataDef'
              type: array
        description: The business metadata definitions to update
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BusinessMetadataDefResponse'
                type: array
          description: The business metadata definitions. Errored business metadata definitions will have an additional error property.
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs \
              --header 'content-type: application/json' \
              --data '[{"category":"PRIMITIVE","guid":"string","createdBy":"string","updatedBy":"string","createTime":0,"updateTime":0,"version":0,"name":"string","description":"string","typeVersion":"string","serviceType":"string","options":{"property1":"string","property2":"string"},"attributeDefs":[{"name":"string","typeName":"string","isOptional":true,"cardinality":"SINGLE","valuesMinCount":0,"valuesMaxCount":0,"isUnique":true,"isIndexable":true,"includeInNotification":true,"defaultValue":"string","description":"string","searchWeight":0,"indexType":"DEFAULT","constraints":[{"type":"string","params":{"property1":{},"property2":{}}}],"options":{"property1":"string","property2":"string"},"displayName":"string"}]}]'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}]}]");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs")
              .put(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs\"\n\n\tpayload := strings.NewReader(\"[{\\\"category\\\":\\\"PRIMITIVE\\\",\\\"guid\\\":\\\"string\\\",\\\"createdBy\\\":\\\"string\\\",\\\"updatedBy\\\":\\\"string\\\",\\\"createTime\\\":0,\\\"updateTime\\\":0,\\\"version\\\":0,\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"typeVersion\\\":\\\"string\\\",\\\"serviceType\\\":\\\"string\\\",\\\"options\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"attributeDefs\\\":[{\\\"name\\\":\\\"string\\\",\\\"typeName\\\":\\\"string\\\",\\\"isOptional\\\":true,\\\"cardinality\\\":\\\"SINGLE\\\",\\\"valuesMinCount\\\":0,\\\"valuesMaxCount\\\":0,\\\"isUnique\\\":true,\\\"isIndexable\\\":true,\\\"includeInNotification\\\":true,\\\"defaultValue\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"searchWeight\\\":0,\\\"indexType\\\":\\\"DEFAULT\\\",\\\"constraints\\\":[{\\\"type\\\":\\\"string\\\",\\\"params\\\":{\\\"property1\\\":{},\\\"property2\\\":{}}}],\\\"options\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"displayName\\\":\\\"string\\\"}]}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}]}]"

            headers = { 'content-type': "application/json" }

            conn.request("PUT", "/catalog/v1/types/businessmetadatadefs", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/types/businessmetadatadefs",
              "headers": {
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify([
              {
                category: 'PRIMITIVE',
                guid: 'string',
                createdBy: 'string',
                updatedBy: 'string',
                createTime: 0,
                updateTime: 0,
                version: 0,
                name: 'string',
                description: 'string',
                typeVersion: 'string',
                serviceType: 'string',
                options: {property1: 'string', property2: 'string'},
                attributeDefs: [
                  {
                    name: 'string',
                    typeName: 'string',
                    isOptional: true,
                    cardinality: 'SINGLE',
                    valuesMinCount: 0,
                    valuesMaxCount: 0,
                    isUnique: true,
                    isIndexable: true,
                    includeInNotification: true,
                    defaultValue: 'string',
                    description: 'string',
                    searchWeight: 0,
                    indexType: 'DEFAULT',
                    constraints: [{type: 'string', params: {property1: {}, property2: {}}}],
                    options: {property1: 'string', property2: 'string'},
                    displayName: 'string'
                  }
                ]
              }
            ]));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/json");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}]}]");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("content-type", "application/json");
            request.AddParameter("application/json", "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}]}]", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
  '/catalog/v1/types/businessmetadatadefs/{bmName}':
    delete:
      summary: Delete Business Metadata Definition
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Delete API for business metadata definition identified by its name.
      operationId: deleteBusinessMetadataDef
      tags:
        - Types (v1)
      parameters:
        - description: The name of the business metadata definition
          explode: false
          in: path
          name: bmName
          required: true
          schema:
            type: string
          style: simple
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs/{bmName}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs/{bmName}")
              .delete(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs/{bmName}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            conn.request("DELETE", "/catalog/v1/types/businessmetadatadefs/{bmName}")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/types/businessmetadatadefs/{bmName}",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs/{bmName}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs/{bmName}");
            var request = new RestRequest(Method.DELETE);
            IRestResponse response = client.Execute(request);
    get:
      summary: Read Business Metadata Definition
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Get the business metadata definition with the given name.
      operationId: getBusinessMetadataDefByName
      tags:
        - Types (v1)
      parameters:
        - description: The name of the business metadata definition
          explode: false
          in: path
          name: bmName
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessMetadataDef'
          description: The business metadata definition
        '400':
          description: Bad Request
        '404':
          description: Business metadata definition not found
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs/{bmName}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs/{bmName}")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs/{bmName}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            conn.request("GET", "/catalog/v1/types/businessmetadatadefs/{bmName}")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/types/businessmetadatadefs/{bmName}",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs/{bmName}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/businessmetadatadefs/{bmName}");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
  /catalog/v1/entity/businessmetadata:
    post:
      summary: Bulk Create Business Metadata
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk API to create multiple business metadata.
      operationId: createBusinessMetadata
      tags:
        - Entity (v1)
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/BusinessMetadata'
              type: array
        description: The business metadata
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BusinessMetadataResponse'
                type: array
          description: The business metadata. Errored business metadata will have an additional error property.
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/businessmetadata \
              --header 'content-type: application/json' \
              --data '[{"typeName":"string","attributes":{},"entityType":"string","entityName":"string"}]'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "[{\"typeName\":\"string\",\"attributes\":{},\"entityType\":\"string\",\"entityName\":\"string\"}]");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/businessmetadata")
              .post(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/businessmetadata\"\n\n\tpayload := strings.NewReader(\"[{\\\"typeName\\\":\\\"string\\\",\\\"attributes\\\":{},\\\"entityType\\\":\\\"string\\\",\\\"entityName\\\":\\\"string\\\"}]\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "[{\"typeName\":\"string\",\"attributes\":{},\"entityType\":\"string\",\"entityName\":\"string\"}]"

            headers = { 'content-type': "application/json" }

            conn.request("POST", "/catalog/v1/entity/businessmetadata", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/entity/businessmetadata",
              "headers": {
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify([
              {typeName: 'string', attributes: {}, entityType: 'string', entityName: 'string'}
            ]));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/businessmetadata");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/json");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "[{\"typeName\":\"string\",\"attributes\":{},\"entityType\":\"string\",\"entityName\":\"string\"}]");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/businessmetadata");
            var request = new RestRequest(Method.POST);
            request.AddHeader("content-type", "application/json");
            request.AddParameter("application/json", "[{\"typeName\":\"string\",\"attributes\":{},\"entityType\":\"string\",\"entityName\":\"string\"}]", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
    put:
      summary: Bulk Update Business Metadata
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk API to update multiple business metadata.
      operationId: updateBusinessMetadata
      tags:
        - Entity (v1)
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/BusinessMetadata'
              type: array
        description: The business metadata
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BusinessMetadataResponse'
                type: array
          description: The business metadata. Errored business metadata will have an additional error property.
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/businessmetadata \
              --header 'content-type: application/json' \
              --data '[{"typeName":"string","attributes":{},"entityType":"string","entityName":"string"}]'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "[{\"typeName\":\"string\",\"attributes\":{},\"entityType\":\"string\",\"entityName\":\"string\"}]");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/businessmetadata")
              .put(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/businessmetadata\"\n\n\tpayload := strings.NewReader(\"[{\\\"typeName\\\":\\\"string\\\",\\\"attributes\\\":{},\\\"entityType\\\":\\\"string\\\",\\\"entityName\\\":\\\"string\\\"}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "[{\"typeName\":\"string\",\"attributes\":{},\"entityType\":\"string\",\"entityName\":\"string\"}]"

            headers = { 'content-type': "application/json" }

            conn.request("PUT", "/catalog/v1/entity/businessmetadata", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/entity/businessmetadata",
              "headers": {
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify([
              {typeName: 'string', attributes: {}, entityType: 'string', entityName: 'string'}
            ]));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/businessmetadata");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/json");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "[{\"typeName\":\"string\",\"attributes\":{},\"entityType\":\"string\",\"entityName\":\"string\"}]");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/businessmetadata");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("content-type", "application/json");
            request.AddParameter("application/json", "[{\"typeName\":\"string\",\"attributes\":{},\"entityType\":\"string\",\"entityName\":\"string\"}]", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
  '/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata':
    get:
      summary: Read Business Metadata for an Entity
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Gets the list of business metadata for a given entity represented
        by a qualified name.
      operationId: getBusinessMetadata
      tags:
        - Entity (v1)
      parameters:
        - description: The type of the entity
          explode: false
          in: path
          name: typeName
          required: true
          schema:
            type: string
          style: simple
        - description: The qualified name of the entity
          explode: false
          in: path
          name: qualifiedName
          required: true
          schema:
            type: string
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BusinessMetadataResponse'
                type: array
          description: The business metadata
        '400':
          description: Bad Request
        '404':
          description: Entity not found
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            conn.request("GET", "/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
  '/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata/{bmName}':
    delete:
      summary: Delete a Business Metadata for an Entity
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Delete a business metadata on an entity.
      operationId: deleteBusinessMetadata
      tags:
        - Entity (v1)
      parameters:
        - description: The type of the entity
          explode: false
          in: path
          name: typeName
          required: true
          schema:
            type: string
          style: simple
        - description: The qualified name of the entity
          explode: false
          in: path
          name: qualifiedName
          required: true
          schema:
            type: string
          style: simple
        - description: The name of the business metadata
          explode: false
          in: path
          name: bmName
          required: true
          schema:
            type: string
          style: simple
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata/{bmName}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata/{bmName}")
              .delete(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata/{bmName}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            conn.request("DELETE", "/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata/{bmName}")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata/{bmName}",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata/{bmName}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/businessmetadata/{bmName}");
            var request = new RestRequest(Method.DELETE);
            IRestResponse response = client.Execute(request);
  /catalog/v1/entity/tags:
    put:
      summary: Bulk Update Tags
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk API to update multiple tags.
      tags:
        - Entity (v1)
      operationId: updateTags
      requestBody:
        description: The tags
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
      responses:
        '200':
          description: The tags. Errored tags will have an additional error property.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagResponse'
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags \
              --header 'content-type: application/json' \
              --data '[{"typeName":"string","attributes":{},"entityGuid":"string","entityStatus":"ACTIVE","propagate":true,"validityPeriods":[{"startTime":"string","endTime":"string","timeZone":"string"}],"removePropagationsOnEntityDelete":true,"entityType":"string","entityName":"string"}]'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "[{\"typeName\":\"string\",\"attributes\":{},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags")
              .put(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags\"\n\n\tpayload := strings.NewReader(\"[{\\\"typeName\\\":\\\"string\\\",\\\"attributes\\\":{},\\\"entityGuid\\\":\\\"string\\\",\\\"entityStatus\\\":\\\"ACTIVE\\\",\\\"propagate\\\":true,\\\"validityPeriods\\\":[{\\\"startTime\\\":\\\"string\\\",\\\"endTime\\\":\\\"string\\\",\\\"timeZone\\\":\\\"string\\\"}],\\\"removePropagationsOnEntityDelete\\\":true,\\\"entityType\\\":\\\"string\\\",\\\"entityName\\\":\\\"string\\\"}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "[{\"typeName\":\"string\",\"attributes\":{},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]"

            headers = { 'content-type': "application/json" }

            conn.request("PUT", "/catalog/v1/entity/tags", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/entity/tags",
              "headers": {
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify([
              {
                typeName: 'string',
                attributes: {},
                entityGuid: 'string',
                entityStatus: 'ACTIVE',
                propagate: true,
                validityPeriods: [{startTime: 'string', endTime: 'string', timeZone: 'string'}],
                removePropagationsOnEntityDelete: true,
                entityType: 'string',
                entityName: 'string'
              }
            ]));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/json");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "[{\"typeName\":\"string\",\"attributes\":{},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("content-type", "application/json");
            request.AddParameter("application/json", "[{\"typeName\":\"string\",\"attributes\":{},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
    post:
      summary: Bulk Create Tags
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk API to create multiple tags.
      tags:
        - Entity (v1)
      operationId: createTags
      requestBody:
        description: The tags
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
      responses:
        '200':
          description: The tags. Errored tags will have an additional error property.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagResponse'
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags \
              --header 'content-type: application/json' \
              --data '[{"typeName":"string","attributes":{},"entityGuid":"string","entityStatus":"ACTIVE","propagate":true,"validityPeriods":[{"startTime":"string","endTime":"string","timeZone":"string"}],"removePropagationsOnEntityDelete":true,"entityType":"string","entityName":"string"}]'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "[{\"typeName\":\"string\",\"attributes\":{},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags")
              .post(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags\"\n\n\tpayload := strings.NewReader(\"[{\\\"typeName\\\":\\\"string\\\",\\\"attributes\\\":{},\\\"entityGuid\\\":\\\"string\\\",\\\"entityStatus\\\":\\\"ACTIVE\\\",\\\"propagate\\\":true,\\\"validityPeriods\\\":[{\\\"startTime\\\":\\\"string\\\",\\\"endTime\\\":\\\"string\\\",\\\"timeZone\\\":\\\"string\\\"}],\\\"removePropagationsOnEntityDelete\\\":true,\\\"entityType\\\":\\\"string\\\",\\\"entityName\\\":\\\"string\\\"}]\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "[{\"typeName\":\"string\",\"attributes\":{},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]"

            headers = { 'content-type': "application/json" }

            conn.request("POST", "/catalog/v1/entity/tags", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/entity/tags",
              "headers": {
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify([
              {
                typeName: 'string',
                attributes: {},
                entityGuid: 'string',
                entityStatus: 'ACTIVE',
                propagate: true,
                validityPeriods: [{startTime: 'string', endTime: 'string', timeZone: 'string'}],
                removePropagationsOnEntityDelete: true,
                entityType: 'string',
                entityName: 'string'
              }
            ]));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/json");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "[{\"typeName\":\"string\",\"attributes\":{},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/tags");
            var request = new RestRequest(Method.POST);
            request.AddHeader("content-type", "application/json");
            request.AddParameter("application/json", "[{\"typeName\":\"string\",\"attributes\":{},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true,\"entityType\":\"string\",\"entityName\":\"string\"}]", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
  '/catalog/v1/entity/type/{typeName}/name/{qualifiedName}':
    get:
      summary: Read an Entity
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Fetch complete definition of an entity given its type and unique attribute.
      operationId: getByUniqueAttributes
      parameters:
        - name: typeName
          in: path
          description: The type of the entity
          required: true
          schema:
            type: string
        - name: qualifiedName
          in: path
          description: The qualified name of the entity
          required: true
          schema:
            type: string
        - name: minExtInfo
          in: query
          description: Whether to populate on header and schema attributes
          schema:
            type: boolean
            default: false
        - name: ignoreRelationships
          in: query
          description: Whether to ignore relationships
          schema:
            type: boolean
            default: false
      tags:
        - Entity (v1)
      responses:
        '200':
          description: The entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityWithExtInfo'
        '400':
          description: Bad Request
        '404':
          description: Entity not found
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            conn.request("GET", "/catalog/v1/entity/type/{typeName}/name/{qualifiedName}")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/entity/type/{typeName}/name/{qualifiedName}",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
  '/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags':
    get:
      summary: Read Tags for an Entity
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Gets the list of tags for a given entity represented by a qualified name.
      operationId: getTags
      parameters:
        - name: typeName
          in: path
          description: The type of the entity
          required: true
          schema:
            type: string
        - name: qualifiedName
          in: path
          description: The qualified name of the entity
          required: true
          schema:
            type: string
      tags:
        - Entity (v1)
      responses:
        '200':
          description: The tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagResponse'
        '400':
          description: Bad Request
        '404':
          description: Entity not found
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            conn.request("GET", "/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
  /catalog/v1/entity:
    put:
      summary: Update an Entity Attribute
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Partially update an entity attribute.
      operationId: partialEntityUpdate
      requestBody:
        description: The entity to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityWithExtInfo'
      tags:
        - Entity (v1)
      responses:
        '200':
          description: The updated entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityPartialUpdateResponse'
        '400':
          description: Bad Request
        '404':
          description: Entity not found
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity \
              --header 'content-type: application/json' \
              --data '{"referredEntities":{"property1":{"typeName":"string","attributes":{},"guid":"string","homeId":"string","isProxy":true,"isIncomplete":true,"provenanceType":0,"status":"ACTIVE","createdBy":"string","updatedBy":"string","createTime":0,"updateTime":0,"version":0,"relationshipAttributes":{},"classifications":[{"typeName":"string","attributes":{"property1":{},"property2":{}},"entityGuid":"string","entityStatus":"ACTIVE","propagate":true,"validityPeriods":[{"startTime":"string","endTime":"string","timeZone":"string"}],"removePropagationsOnEntityDelete":true}],"meanings":[{"termGuid":"string","relationGuid":"string","description":"string","displayText":"string","expression":"string","createdBy":"string","steward":"string","source":"string","confidence":0,"status":"DISCOVERED"}],"customAttributes":{"property1":"string","property2":"string"},"businessAttributes":{"property1":{},"property2":{}},"labels":["string"],"proxy":true},"property2":{"typeName":"string","attributes":{},"guid":"string","homeId":"string","isProxy":true,"isIncomplete":true,"provenanceType":0,"status":"ACTIVE","createdBy":"string","updatedBy":"string","createTime":0,"updateTime":0,"version":0,"relationshipAttributes":{},"classifications":[{"typeName":"string","attributes":{"property1":{},"property2":{}},"entityGuid":"string","entityStatus":"ACTIVE","propagate":true,"validityPeriods":[{"startTime":"string","endTime":"string","timeZone":"string"}],"removePropagationsOnEntityDelete":true}],"meanings":[{"termGuid":"string","relationGuid":"string","description":"string","displayText":"string","expression":"string","createdBy":"string","steward":"string","source":"string","confidence":0,"status":"DISCOVERED"}],"customAttributes":{"property1":"string","property2":"string"},"businessAttributes":{"property1":{},"property2":{}},"labels":["string"],"proxy":true}},"entity":{"typeName":"string","attributes":{},"guid":"string","homeId":"string","isProxy":true,"isIncomplete":true,"provenanceType":0,"status":"ACTIVE","createdBy":"string","updatedBy":"string","createTime":0,"updateTime":0,"version":0,"relationshipAttributes":{},"classifications":[{"typeName":"string","attributes":{"property1":{},"property2":{}},"entityGuid":"string","entityStatus":"ACTIVE","propagate":true,"validityPeriods":[{"startTime":"string","endTime":"string","timeZone":"string"}],"removePropagationsOnEntityDelete":true}],"meanings":[{"termGuid":"string","relationGuid":"string","description":"string","displayText":"string","expression":"string","createdBy":"string","steward":"string","source":"string","confidence":0,"status":"DISCOVERED"}],"customAttributes":{"property1":"string","property2":"string"},"businessAttributes":{"property1":{},"property2":{}},"labels":["string"],"proxy":true}}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"referredEntities\":{\"property1\":{\"typeName\":\"string\",\"attributes\":{},\"guid\":\"string\",\"homeId\":\"string\",\"isProxy\":true,\"isIncomplete\":true,\"provenanceType\":0,\"status\":\"ACTIVE\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"relationshipAttributes\":{},\"classifications\":[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true}],\"meanings\":[{\"termGuid\":\"string\",\"relationGuid\":\"string\",\"description\":\"string\",\"displayText\":\"string\",\"expression\":\"string\",\"createdBy\":\"string\",\"steward\":\"string\",\"source\":\"string\",\"confidence\":0,\"status\":\"DISCOVERED\"}],\"customAttributes\":{\"property1\":\"string\",\"property2\":\"string\"},\"businessAttributes\":{\"property1\":{},\"property2\":{}},\"labels\":[\"string\"],\"proxy\":true},\"property2\":{\"typeName\":\"string\",\"attributes\":{},\"guid\":\"string\",\"homeId\":\"string\",\"isProxy\":true,\"isIncomplete\":true,\"provenanceType\":0,\"status\":\"ACTIVE\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"relationshipAttributes\":{},\"classifications\":[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true}],\"meanings\":[{\"termGuid\":\"string\",\"relationGuid\":\"string\",\"description\":\"string\",\"displayText\":\"string\",\"expression\":\"string\",\"createdBy\":\"string\",\"steward\":\"string\",\"source\":\"string\",\"confidence\":0,\"status\":\"DISCOVERED\"}],\"customAttributes\":{\"property1\":\"string\",\"property2\":\"string\"},\"businessAttributes\":{\"property1\":{},\"property2\":{}},\"labels\":[\"string\"],\"proxy\":true}},\"entity\":{\"typeName\":\"string\",\"attributes\":{},\"guid\":\"string\",\"homeId\":\"string\",\"isProxy\":true,\"isIncomplete\":true,\"provenanceType\":0,\"status\":\"ACTIVE\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"relationshipAttributes\":{},\"classifications\":[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true}],\"meanings\":[{\"termGuid\":\"string\",\"relationGuid\":\"string\",\"description\":\"string\",\"displayText\":\"string\",\"expression\":\"string\",\"createdBy\":\"string\",\"steward\":\"string\",\"source\":\"string\",\"confidence\":0,\"status\":\"DISCOVERED\"}],\"customAttributes\":{\"property1\":\"string\",\"property2\":\"string\"},\"businessAttributes\":{\"property1\":{},\"property2\":{}},\"labels\":[\"string\"],\"proxy\":true}}");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity")
              .put(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity\"\n\n\tpayload := strings.NewReader(\"{\\\"referredEntities\\\":{\\\"property1\\\":{\\\"typeName\\\":\\\"string\\\",\\\"attributes\\\":{},\\\"guid\\\":\\\"string\\\",\\\"homeId\\\":\\\"string\\\",\\\"isProxy\\\":true,\\\"isIncomplete\\\":true,\\\"provenanceType\\\":0,\\\"status\\\":\\\"ACTIVE\\\",\\\"createdBy\\\":\\\"string\\\",\\\"updatedBy\\\":\\\"string\\\",\\\"createTime\\\":0,\\\"updateTime\\\":0,\\\"version\\\":0,\\\"relationshipAttributes\\\":{},\\\"classifications\\\":[{\\\"typeName\\\":\\\"string\\\",\\\"attributes\\\":{\\\"property1\\\":{},\\\"property2\\\":{}},\\\"entityGuid\\\":\\\"string\\\",\\\"entityStatus\\\":\\\"ACTIVE\\\",\\\"propagate\\\":true,\\\"validityPeriods\\\":[{\\\"startTime\\\":\\\"string\\\",\\\"endTime\\\":\\\"string\\\",\\\"timeZone\\\":\\\"string\\\"}],\\\"removePropagationsOnEntityDelete\\\":true}],\\\"meanings\\\":[{\\\"termGuid\\\":\\\"string\\\",\\\"relationGuid\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"displayText\\\":\\\"string\\\",\\\"expression\\\":\\\"string\\\",\\\"createdBy\\\":\\\"string\\\",\\\"steward\\\":\\\"string\\\",\\\"source\\\":\\\"string\\\",\\\"confidence\\\":0,\\\"status\\\":\\\"DISCOVERED\\\"}],\\\"customAttributes\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"businessAttributes\\\":{\\\"property1\\\":{},\\\"property2\\\":{}},\\\"labels\\\":[\\\"string\\\"],\\\"proxy\\\":true},\\\"property2\\\":{\\\"typeName\\\":\\\"string\\\",\\\"attributes\\\":{},\\\"guid\\\":\\\"string\\\",\\\"homeId\\\":\\\"string\\\",\\\"isProxy\\\":true,\\\"isIncomplete\\\":true,\\\"provenanceType\\\":0,\\\"status\\\":\\\"ACTIVE\\\",\\\"createdBy\\\":\\\"string\\\",\\\"updatedBy\\\":\\\"string\\\",\\\"createTime\\\":0,\\\"updateTime\\\":0,\\\"version\\\":0,\\\"relationshipAttributes\\\":{},\\\"classifications\\\":[{\\\"typeName\\\":\\\"string\\\",\\\"attributes\\\":{\\\"property1\\\":{},\\\"property2\\\":{}},\\\"entityGuid\\\":\\\"string\\\",\\\"entityStatus\\\":\\\"ACTIVE\\\",\\\"propagate\\\":true,\\\"validityPeriods\\\":[{\\\"startTime\\\":\\\"string\\\",\\\"endTime\\\":\\\"string\\\",\\\"timeZone\\\":\\\"string\\\"}],\\\"removePropagationsOnEntityDelete\\\":true}],\\\"meanings\\\":[{\\\"termGuid\\\":\\\"string\\\",\\\"relationGuid\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"displayText\\\":\\\"string\\\",\\\"expression\\\":\\\"string\\\",\\\"createdBy\\\":\\\"string\\\",\\\"steward\\\":\\\"string\\\",\\\"source\\\":\\\"string\\\",\\\"confidence\\\":0,\\\"status\\\":\\\"DISCOVERED\\\"}],\\\"customAttributes\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"businessAttributes\\\":{\\\"property1\\\":{},\\\"property2\\\":{}},\\\"labels\\\":[\\\"string\\\"],\\\"proxy\\\":true}},\\\"entity\\\":{\\\"typeName\\\":\\\"string\\\",\\\"attributes\\\":{},\\\"guid\\\":\\\"string\\\",\\\"homeId\\\":\\\"string\\\",\\\"isProxy\\\":true,\\\"isIncomplete\\\":true,\\\"provenanceType\\\":0,\\\"status\\\":\\\"ACTIVE\\\",\\\"createdBy\\\":\\\"string\\\",\\\"updatedBy\\\":\\\"string\\\",\\\"createTime\\\":0,\\\"updateTime\\\":0,\\\"version\\\":0,\\\"relationshipAttributes\\\":{},\\\"classifications\\\":[{\\\"typeName\\\":\\\"string\\\",\\\"attributes\\\":{\\\"property1\\\":{},\\\"property2\\\":{}},\\\"entityGuid\\\":\\\"string\\\",\\\"entityStatus\\\":\\\"ACTIVE\\\",\\\"propagate\\\":true,\\\"validityPeriods\\\":[{\\\"startTime\\\":\\\"string\\\",\\\"endTime\\\":\\\"string\\\",\\\"timeZone\\\":\\\"string\\\"}],\\\"removePropagationsOnEntityDelete\\\":true}],\\\"meanings\\\":[{\\\"termGuid\\\":\\\"string\\\",\\\"relationGuid\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"displayText\\\":\\\"string\\\",\\\"expression\\\":\\\"string\\\",\\\"createdBy\\\":\\\"string\\\",\\\"steward\\\":\\\"string\\\",\\\"source\\\":\\\"string\\\",\\\"confidence\\\":0,\\\"status\\\":\\\"DISCOVERED\\\"}],\\\"customAttributes\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"businessAttributes\\\":{\\\"property1\\\":{},\\\"property2\\\":{}},\\\"labels\\\":[\\\"string\\\"],\\\"proxy\\\":true}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "{\"referredEntities\":{\"property1\":{\"typeName\":\"string\",\"attributes\":{},\"guid\":\"string\",\"homeId\":\"string\",\"isProxy\":true,\"isIncomplete\":true,\"provenanceType\":0,\"status\":\"ACTIVE\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"relationshipAttributes\":{},\"classifications\":[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true}],\"meanings\":[{\"termGuid\":\"string\",\"relationGuid\":\"string\",\"description\":\"string\",\"displayText\":\"string\",\"expression\":\"string\",\"createdBy\":\"string\",\"steward\":\"string\",\"source\":\"string\",\"confidence\":0,\"status\":\"DISCOVERED\"}],\"customAttributes\":{\"property1\":\"string\",\"property2\":\"string\"},\"businessAttributes\":{\"property1\":{},\"property2\":{}},\"labels\":[\"string\"],\"proxy\":true},\"property2\":{\"typeName\":\"string\",\"attributes\":{},\"guid\":\"string\",\"homeId\":\"string\",\"isProxy\":true,\"isIncomplete\":true,\"provenanceType\":0,\"status\":\"ACTIVE\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"relationshipAttributes\":{},\"classifications\":[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true}],\"meanings\":[{\"termGuid\":\"string\",\"relationGuid\":\"string\",\"description\":\"string\",\"displayText\":\"string\",\"expression\":\"string\",\"createdBy\":\"string\",\"steward\":\"string\",\"source\":\"string\",\"confidence\":0,\"status\":\"DISCOVERED\"}],\"customAttributes\":{\"property1\":\"string\",\"property2\":\"string\"},\"businessAttributes\":{\"property1\":{},\"property2\":{}},\"labels\":[\"string\"],\"proxy\":true}},\"entity\":{\"typeName\":\"string\",\"attributes\":{},\"guid\":\"string\",\"homeId\":\"string\",\"isProxy\":true,\"isIncomplete\":true,\"provenanceType\":0,\"status\":\"ACTIVE\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"relationshipAttributes\":{},\"classifications\":[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true}],\"meanings\":[{\"termGuid\":\"string\",\"relationGuid\":\"string\",\"description\":\"string\",\"displayText\":\"string\",\"expression\":\"string\",\"createdBy\":\"string\",\"steward\":\"string\",\"source\":\"string\",\"confidence\":0,\"status\":\"DISCOVERED\"}],\"customAttributes\":{\"property1\":\"string\",\"property2\":\"string\"},\"businessAttributes\":{\"property1\":{},\"property2\":{}},\"labels\":[\"string\"],\"proxy\":true}}"

            headers = { 'content-type': "application/json" }

            conn.request("PUT", "/catalog/v1/entity", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/entity",
              "headers": {
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              referredEntities: {
                property1: {
                  typeName: 'string',
                  attributes: {},
                  guid: 'string',
                  homeId: 'string',
                  isProxy: true,
                  isIncomplete: true,
                  provenanceType: 0,
                  status: 'ACTIVE',
                  createdBy: 'string',
                  updatedBy: 'string',
                  createTime: 0,
                  updateTime: 0,
                  version: 0,
                  relationshipAttributes: {},
                  classifications: [
                    {
                      typeName: 'string',
                      attributes: {property1: {}, property2: {}},
                      entityGuid: 'string',
                      entityStatus: 'ACTIVE',
                      propagate: true,
                      validityPeriods: [{startTime: 'string', endTime: 'string', timeZone: 'string'}],
                      removePropagationsOnEntityDelete: true
                    }
                  ],
                  meanings: [
                    {
                      termGuid: 'string',
                      relationGuid: 'string',
                      description: 'string',
                      displayText: 'string',
                      expression: 'string',
                      createdBy: 'string',
                      steward: 'string',
                      source: 'string',
                      confidence: 0,
                      status: 'DISCOVERED'
                    }
                  ],
                  customAttributes: {property1: 'string', property2: 'string'},
                  businessAttributes: {property1: {}, property2: {}},
                  labels: ['string'],
                  proxy: true
                },
                property2: {
                  typeName: 'string',
                  attributes: {},
                  guid: 'string',
                  homeId: 'string',
                  isProxy: true,
                  isIncomplete: true,
                  provenanceType: 0,
                  status: 'ACTIVE',
                  createdBy: 'string',
                  updatedBy: 'string',
                  createTime: 0,
                  updateTime: 0,
                  version: 0,
                  relationshipAttributes: {},
                  classifications: [
                    {
                      typeName: 'string',
                      attributes: {property1: {}, property2: {}},
                      entityGuid: 'string',
                      entityStatus: 'ACTIVE',
                      propagate: true,
                      validityPeriods: [{startTime: 'string', endTime: 'string', timeZone: 'string'}],
                      removePropagationsOnEntityDelete: true
                    }
                  ],
                  meanings: [
                    {
                      termGuid: 'string',
                      relationGuid: 'string',
                      description: 'string',
                      displayText: 'string',
                      expression: 'string',
                      createdBy: 'string',
                      steward: 'string',
                      source: 'string',
                      confidence: 0,
                      status: 'DISCOVERED'
                    }
                  ],
                  customAttributes: {property1: 'string', property2: 'string'},
                  businessAttributes: {property1: {}, property2: {}},
                  labels: ['string'],
                  proxy: true
                }
              },
              entity: {
                typeName: 'string',
                attributes: {},
                guid: 'string',
                homeId: 'string',
                isProxy: true,
                isIncomplete: true,
                provenanceType: 0,
                status: 'ACTIVE',
                createdBy: 'string',
                updatedBy: 'string',
                createTime: 0,
                updateTime: 0,
                version: 0,
                relationshipAttributes: {},
                classifications: [
                  {
                    typeName: 'string',
                    attributes: {property1: {}, property2: {}},
                    entityGuid: 'string',
                    entityStatus: 'ACTIVE',
                    propagate: true,
                    validityPeriods: [{startTime: 'string', endTime: 'string', timeZone: 'string'}],
                    removePropagationsOnEntityDelete: true
                  }
                ],
                meanings: [
                  {
                    termGuid: 'string',
                    relationGuid: 'string',
                    description: 'string',
                    displayText: 'string',
                    expression: 'string',
                    createdBy: 'string',
                    steward: 'string',
                    source: 'string',
                    confidence: 0,
                    status: 'DISCOVERED'
                  }
                ],
                customAttributes: {property1: 'string', property2: 'string'},
                businessAttributes: {property1: {}, property2: {}},
                labels: ['string'],
                proxy: true
              }
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/json");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"referredEntities\":{\"property1\":{\"typeName\":\"string\",\"attributes\":{},\"guid\":\"string\",\"homeId\":\"string\",\"isProxy\":true,\"isIncomplete\":true,\"provenanceType\":0,\"status\":\"ACTIVE\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"relationshipAttributes\":{},\"classifications\":[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true}],\"meanings\":[{\"termGuid\":\"string\",\"relationGuid\":\"string\",\"description\":\"string\",\"displayText\":\"string\",\"expression\":\"string\",\"createdBy\":\"string\",\"steward\":\"string\",\"source\":\"string\",\"confidence\":0,\"status\":\"DISCOVERED\"}],\"customAttributes\":{\"property1\":\"string\",\"property2\":\"string\"},\"businessAttributes\":{\"property1\":{},\"property2\":{}},\"labels\":[\"string\"],\"proxy\":true},\"property2\":{\"typeName\":\"string\",\"attributes\":{},\"guid\":\"string\",\"homeId\":\"string\",\"isProxy\":true,\"isIncomplete\":true,\"provenanceType\":0,\"status\":\"ACTIVE\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"relationshipAttributes\":{},\"classifications\":[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true}],\"meanings\":[{\"termGuid\":\"string\",\"relationGuid\":\"string\",\"description\":\"string\",\"displayText\":\"string\",\"expression\":\"string\",\"createdBy\":\"string\",\"steward\":\"string\",\"source\":\"string\",\"confidence\":0,\"status\":\"DISCOVERED\"}],\"customAttributes\":{\"property1\":\"string\",\"property2\":\"string\"},\"businessAttributes\":{\"property1\":{},\"property2\":{}},\"labels\":[\"string\"],\"proxy\":true}},\"entity\":{\"typeName\":\"string\",\"attributes\":{},\"guid\":\"string\",\"homeId\":\"string\",\"isProxy\":true,\"isIncomplete\":true,\"provenanceType\":0,\"status\":\"ACTIVE\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"relationshipAttributes\":{},\"classifications\":[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true}],\"meanings\":[{\"termGuid\":\"string\",\"relationGuid\":\"string\",\"description\":\"string\",\"displayText\":\"string\",\"expression\":\"string\",\"createdBy\":\"string\",\"steward\":\"string\",\"source\":\"string\",\"confidence\":0,\"status\":\"DISCOVERED\"}],\"customAttributes\":{\"property1\":\"string\",\"property2\":\"string\"},\"businessAttributes\":{\"property1\":{},\"property2\":{}},\"labels\":[\"string\"],\"proxy\":true}}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("content-type", "application/json");
            request.AddParameter("application/json", "{\"referredEntities\":{\"property1\":{\"typeName\":\"string\",\"attributes\":{},\"guid\":\"string\",\"homeId\":\"string\",\"isProxy\":true,\"isIncomplete\":true,\"provenanceType\":0,\"status\":\"ACTIVE\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"relationshipAttributes\":{},\"classifications\":[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true}],\"meanings\":[{\"termGuid\":\"string\",\"relationGuid\":\"string\",\"description\":\"string\",\"displayText\":\"string\",\"expression\":\"string\",\"createdBy\":\"string\",\"steward\":\"string\",\"source\":\"string\",\"confidence\":0,\"status\":\"DISCOVERED\"}],\"customAttributes\":{\"property1\":\"string\",\"property2\":\"string\"},\"businessAttributes\":{\"property1\":{},\"property2\":{}},\"labels\":[\"string\"],\"proxy\":true},\"property2\":{\"typeName\":\"string\",\"attributes\":{},\"guid\":\"string\",\"homeId\":\"string\",\"isProxy\":true,\"isIncomplete\":true,\"provenanceType\":0,\"status\":\"ACTIVE\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"relationshipAttributes\":{},\"classifications\":[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true}],\"meanings\":[{\"termGuid\":\"string\",\"relationGuid\":\"string\",\"description\":\"string\",\"displayText\":\"string\",\"expression\":\"string\",\"createdBy\":\"string\",\"steward\":\"string\",\"source\":\"string\",\"confidence\":0,\"status\":\"DISCOVERED\"}],\"customAttributes\":{\"property1\":\"string\",\"property2\":\"string\"},\"businessAttributes\":{\"property1\":{},\"property2\":{}},\"labels\":[\"string\"],\"proxy\":true}},\"entity\":{\"typeName\":\"string\",\"attributes\":{},\"guid\":\"string\",\"homeId\":\"string\",\"isProxy\":true,\"isIncomplete\":true,\"provenanceType\":0,\"status\":\"ACTIVE\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"relationshipAttributes\":{},\"classifications\":[{\"typeName\":\"string\",\"attributes\":{\"property1\":{},\"property2\":{}},\"entityGuid\":\"string\",\"entityStatus\":\"ACTIVE\",\"propagate\":true,\"validityPeriods\":[{\"startTime\":\"string\",\"endTime\":\"string\",\"timeZone\":\"string\"}],\"removePropagationsOnEntityDelete\":true}],\"meanings\":[{\"termGuid\":\"string\",\"relationGuid\":\"string\",\"description\":\"string\",\"displayText\":\"string\",\"expression\":\"string\",\"createdBy\":\"string\",\"steward\":\"string\",\"source\":\"string\",\"confidence\":0,\"status\":\"DISCOVERED\"}],\"customAttributes\":{\"property1\":\"string\",\"property2\":\"string\"},\"businessAttributes\":{\"property1\":{},\"property2\":{}},\"labels\":[\"string\"],\"proxy\":true}}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
  '/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags/{tagName}':
    delete:
      summary: Delete a Tag for an Entity
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Delete a tag for an entity.
      operationId: deleteTag
      parameters:
        - name: typeName
          in: path
          description: The type of the entity
          required: true
          schema:
            type: string
        - name: qualifiedName
          in: path
          description: The qualified name of the entity
          required: true
          schema:
            type: string
        - name: tagName
          in: path
          description: The name of the tag
          required: true
          schema:
            type: string
      tags:
        - Entity (v1)
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags/{tagName}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags/{tagName}")
              .delete(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags/{tagName}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            conn.request("DELETE", "/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags/{tagName}")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags/{tagName}",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags/{tagName}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/entity/type/{typeName}/name/{qualifiedName}/tags/{tagName}");
            var request = new RestRequest(Method.DELETE);
            IRestResponse response = client.Execute(request);
  /catalog/v1/search/attribute:
    get:
      summary: Search by Attribute
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve data for the specified attribute search query.
      operationId: searchUsingAttribute
      parameters:
        - name: type
          in: query
          description: Limit the result to only entities of specified types
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: attr
          in: query
          description: One of more additional attributes to return in the response
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: attrName
          in: query
          description: The attribute to search
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: attrValuePrefix
          in: query
          description: The prefix for the attribute value to search
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: tag
          in: query
          description: Limit the result to only entities tagged with the given tag
          schema:
            type: string
        - name: sortBy
          in: query
          description: An attribute to sort by
          schema:
            type: string
        - name: sortOrder
          in: query
          description: 'Sort order, either ASCENDING (default) or DESCENDING'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
        - name: deleted
          in: query
          description: Whether to include deleted entities
          schema:
            type: boolean
        - name: limit
          in: query
          description: Limit the result set to only include the specified number of entries
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Start offset of the result set (useful for pagination)
          schema:
            type: integer
            format: int32
      tags:
        - Search (v1)
      responses:
        '200':
          description: 'On successful search query with some results, might return an empty list if execution succeeded without any results'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
        '400':
          description: Invalid wildcard or query parameters
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/attribute
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/attribute")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/attribute\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            conn.request("GET", "/catalog/v1/search/attribute")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/search/attribute",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/attribute");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/attribute");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
  /catalog/v1/search/basic:
    get:
      summary: Search by Fulltext Query
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Retrieve data for the specified fulltext query.
      operationId: searchUsingBasic
      parameters:
        - name: query
          in: query
          description: The full-text query
          schema:
            type: string
        - name: type
          in: query
          description: Limit the result to only entities of specified types
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: attr
          in: query
          description: One of more additional attributes to return in the response
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
        - name: tag
          in: query
          description: Limit the result to only entities tagged with the given tag
          schema:
            type: string
        - name: sortBy
          in: query
          description: An attribute to sort by
          schema:
            type: string
        - name: sortOrder
          in: query
          description: 'Sort order, either ASCENDING (default) or DESCENDING'
          schema:
            type: string
            enum:
              - ASCENDING
              - DESCENDING
        - name: deleted
          in: query
          description: Whether to include deleted entities
          schema:
            type: boolean
        - name: limit
          in: query
          description: Limit the result set to only include the specified number of entries
          schema:
            type: integer
            format: int32
        - name: offset
          in: query
          description: Start offset of the result set (useful for pagination)
          schema:
            type: integer
            format: int32
      tags:
        - Search (v1)
      responses:
        '200':
          description: 'On successful fulltext query with some results, might return an empty list if execution succeeded without any results'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
        '400':
          description: Invalid fulltext or query parameters
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/basic
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/basic")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/basic\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            conn.request("GET", "/catalog/v1/search/basic")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/search/basic",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/basic");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/search/basic");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
  /catalog/v1/types/tagdefs:
    get:
      summary: Bulk Read Tag Definitions
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk retrieval API for retrieving tag definitions.
      operationId: getAllTagDefs
      parameters:
        - name: prefix
          in: query
          description: The prefix of a tag definition name
          schema:
            type: string
      tags:
        - Types (v1)
      responses:
        '200':
          description: The tag definitions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagDefResponse'
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            conn.request("GET", "/catalog/v1/types/tagdefs")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/types/tagdefs",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
    put:
      summary: Bulk Update Tag Definitions
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk update API for tag definitions.
      tags:
        - Types (v1)
      operationId: updateTagDefs
      requestBody:
        description: The tag definitions to update
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TagDef'
      responses:
        '200':
          description: The tag definitions. Errored tag definitions will have an additional error property.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagDefResponse'
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs \
              --header 'content-type: application/json' \
              --data '[{"category":"PRIMITIVE","guid":"string","createdBy":"string","updatedBy":"string","createTime":0,"updateTime":0,"version":0,"name":"string","description":"string","typeVersion":"string","serviceType":"string","options":{"property1":"string","property2":"string"},"attributeDefs":[{"name":"string","typeName":"string","isOptional":true,"cardinality":"SINGLE","valuesMinCount":0,"valuesMaxCount":0,"isUnique":true,"isIndexable":true,"includeInNotification":true,"defaultValue":"string","description":"string","searchWeight":0,"indexType":"DEFAULT","constraints":[{"type":"string","params":{"property1":{},"property2":{}}}],"options":{"property1":"string","property2":"string"},"displayName":"string"}],"superTypes":["string"],"entityTypes":["string"],"subTypes":["string"]}]'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs")
              .put(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs\"\n\n\tpayload := strings.NewReader(\"[{\\\"category\\\":\\\"PRIMITIVE\\\",\\\"guid\\\":\\\"string\\\",\\\"createdBy\\\":\\\"string\\\",\\\"updatedBy\\\":\\\"string\\\",\\\"createTime\\\":0,\\\"updateTime\\\":0,\\\"version\\\":0,\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"typeVersion\\\":\\\"string\\\",\\\"serviceType\\\":\\\"string\\\",\\\"options\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"attributeDefs\\\":[{\\\"name\\\":\\\"string\\\",\\\"typeName\\\":\\\"string\\\",\\\"isOptional\\\":true,\\\"cardinality\\\":\\\"SINGLE\\\",\\\"valuesMinCount\\\":0,\\\"valuesMaxCount\\\":0,\\\"isUnique\\\":true,\\\"isIndexable\\\":true,\\\"includeInNotification\\\":true,\\\"defaultValue\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"searchWeight\\\":0,\\\"indexType\\\":\\\"DEFAULT\\\",\\\"constraints\\\":[{\\\"type\\\":\\\"string\\\",\\\"params\\\":{\\\"property1\\\":{},\\\"property2\\\":{}}}],\\\"options\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"displayName\\\":\\\"string\\\"}],\\\"superTypes\\\":[\\\"string\\\"],\\\"entityTypes\\\":[\\\"string\\\"],\\\"subTypes\\\":[\\\"string\\\"]}]\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]"

            headers = { 'content-type': "application/json" }

            conn.request("PUT", "/catalog/v1/types/tagdefs", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/types/tagdefs",
              "headers": {
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify([
              {
                category: 'PRIMITIVE',
                guid: 'string',
                createdBy: 'string',
                updatedBy: 'string',
                createTime: 0,
                updateTime: 0,
                version: 0,
                name: 'string',
                description: 'string',
                typeVersion: 'string',
                serviceType: 'string',
                options: {property1: 'string', property2: 'string'},
                attributeDefs: [
                  {
                    name: 'string',
                    typeName: 'string',
                    isOptional: true,
                    cardinality: 'SINGLE',
                    valuesMinCount: 0,
                    valuesMaxCount: 0,
                    isUnique: true,
                    isIndexable: true,
                    includeInNotification: true,
                    defaultValue: 'string',
                    description: 'string',
                    searchWeight: 0,
                    indexType: 'DEFAULT',
                    constraints: [{type: 'string', params: {property1: {}, property2: {}}}],
                    options: {property1: 'string', property2: 'string'},
                    displayName: 'string'
                  }
                ],
                superTypes: ['string'],
                entityTypes: ['string'],
                subTypes: ['string']
              }
            ]));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/json");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("content-type", "application/json");
            request.AddParameter("application/json", "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
    post:
      summary: Bulk Create Tag Definitions
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Bulk create API for tag definitions.
      tags:
        - Types (v1)
      operationId: createTagDefs
      requestBody:
        description: The tag definitions to create
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TagDef'
      responses:
        '200':
          description: The tag definitions. Errored tag definitions will have an additional error property.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TagDefResponse'
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs \
              --header 'content-type: application/json' \
              --data '[{"category":"PRIMITIVE","guid":"string","createdBy":"string","updatedBy":"string","createTime":0,"updateTime":0,"version":0,"name":"string","description":"string","typeVersion":"string","serviceType":"string","options":{"property1":"string","property2":"string"},"attributeDefs":[{"name":"string","typeName":"string","isOptional":true,"cardinality":"SINGLE","valuesMinCount":0,"valuesMaxCount":0,"isUnique":true,"isIndexable":true,"includeInNotification":true,"defaultValue":"string","description":"string","searchWeight":0,"indexType":"DEFAULT","constraints":[{"type":"string","params":{"property1":{},"property2":{}}}],"options":{"property1":"string","property2":"string"},"displayName":"string"}],"superTypes":["string"],"entityTypes":["string"],"subTypes":["string"]}]'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs")
              .post(body)
              .addHeader("content-type", "application/json")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs\"\n\n\tpayload := strings.NewReader(\"[{\\\"category\\\":\\\"PRIMITIVE\\\",\\\"guid\\\":\\\"string\\\",\\\"createdBy\\\":\\\"string\\\",\\\"updatedBy\\\":\\\"string\\\",\\\"createTime\\\":0,\\\"updateTime\\\":0,\\\"version\\\":0,\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"typeVersion\\\":\\\"string\\\",\\\"serviceType\\\":\\\"string\\\",\\\"options\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"attributeDefs\\\":[{\\\"name\\\":\\\"string\\\",\\\"typeName\\\":\\\"string\\\",\\\"isOptional\\\":true,\\\"cardinality\\\":\\\"SINGLE\\\",\\\"valuesMinCount\\\":0,\\\"valuesMaxCount\\\":0,\\\"isUnique\\\":true,\\\"isIndexable\\\":true,\\\"includeInNotification\\\":true,\\\"defaultValue\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"searchWeight\\\":0,\\\"indexType\\\":\\\"DEFAULT\\\",\\\"constraints\\\":[{\\\"type\\\":\\\"string\\\",\\\"params\\\":{\\\"property1\\\":{},\\\"property2\\\":{}}}],\\\"options\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"displayName\\\":\\\"string\\\"}],\\\"superTypes\\\":[\\\"string\\\"],\\\"entityTypes\\\":[\\\"string\\\"],\\\"subTypes\\\":[\\\"string\\\"]}]\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]"

            headers = { 'content-type': "application/json" }

            conn.request("POST", "/catalog/v1/types/tagdefs", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/types/tagdefs",
              "headers": {
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify([
              {
                category: 'PRIMITIVE',
                guid: 'string',
                createdBy: 'string',
                updatedBy: 'string',
                createTime: 0,
                updateTime: 0,
                version: 0,
                name: 'string',
                description: 'string',
                typeVersion: 'string',
                serviceType: 'string',
                options: {property1: 'string', property2: 'string'},
                attributeDefs: [
                  {
                    name: 'string',
                    typeName: 'string',
                    isOptional: true,
                    cardinality: 'SINGLE',
                    valuesMinCount: 0,
                    valuesMaxCount: 0,
                    isUnique: true,
                    isIndexable: true,
                    includeInNotification: true,
                    defaultValue: 'string',
                    description: 'string',
                    searchWeight: 0,
                    indexType: 'DEFAULT',
                    constraints: [{type: 'string', params: {property1: {}, property2: {}}}],
                    options: {property1: 'string', property2: 'string'},
                    displayName: 'string'
                  }
                ],
                superTypes: ['string'],
                entityTypes: ['string'],
                subTypes: ['string']
              }
            ]));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/json");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs");
            var request = new RestRequest(Method.POST);
            request.AddHeader("content-type", "application/json");
            request.AddParameter("application/json", "[{\"category\":\"PRIMITIVE\",\"guid\":\"string\",\"createdBy\":\"string\",\"updatedBy\":\"string\",\"createTime\":0,\"updateTime\":0,\"version\":0,\"name\":\"string\",\"description\":\"string\",\"typeVersion\":\"string\",\"serviceType\":\"string\",\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"attributeDefs\":[{\"name\":\"string\",\"typeName\":\"string\",\"isOptional\":true,\"cardinality\":\"SINGLE\",\"valuesMinCount\":0,\"valuesMaxCount\":0,\"isUnique\":true,\"isIndexable\":true,\"includeInNotification\":true,\"defaultValue\":\"string\",\"description\":\"string\",\"searchWeight\":0,\"indexType\":\"DEFAULT\",\"constraints\":[{\"type\":\"string\",\"params\":{\"property1\":{},\"property2\":{}}}],\"options\":{\"property1\":\"string\",\"property2\":\"string\"},\"displayName\":\"string\"}],\"superTypes\":[\"string\"],\"entityTypes\":[\"string\"],\"subTypes\":[\"string\"]}]", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
  '/catalog/v1/types/tagdefs/{tagName}':
    get:
      summary: Read Tag Definition
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Get the tag definition with the given name.
      operationId: getTagDefByName
      parameters:
        - name: tagName
          in: path
          description: The name of the tag definiton
          required: true
          schema:
            type: string
      tags:
        - Types (v1)
      responses:
        '200':
          description: The tag definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagDef'
        '400':
          description: Bad Request
        '404':
          description: Tag definition not found
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/{tagName}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/{tagName}")
              .get()
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/{tagName}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            conn.request("GET", "/catalog/v1/types/tagdefs/{tagName}")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/types/tagdefs/{tagName}",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/{tagName}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/{tagName}");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
    delete:
      summary: Delete Tag Definition
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Delete API for tag definition identified by its name.
      operationId: deleteTagDef
      parameters:
        - name: tagName
          in: path
          description: The name of the tag definition
          required: true
          schema:
            type: string
      tags:
        - Types (v1)
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
        '429':
          description: Rate Limit Error
        '500':
          description: Internal Server Error
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/{tagName}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/{tagName}")
              .delete(null)
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/{tagName}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            conn.request("DELETE", "/catalog/v1/types/tagdefs/{tagName}")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/catalog/v1/types/tagdefs/{tagName}",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/{tagName}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/catalog/v1/types/tagdefs/{tagName}");
            var request = new RestRequest(Method.DELETE);
            IRestResponse response = client.Execute(request);
