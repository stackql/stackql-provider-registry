openapi: 3.0.0
servers:
  - url: 'https://api.confluent.cloud'
    description: Confluent Cloud API
info:
  version: ''
  contact:
    name: Confluent Cloud
    url: 'https://www.confluent.io/cloud-contact-us/'
    email: support@confluent.io
  x-api-id: 46234552-5833-42eb-ba0f-883ad3f70d2b
  x-audience: external-public
  x-logo:
    url: 'https://assets.confluent.io/m/5ec23aa91903c00b/'
  title: Confluent Cloud APIs - schema_registry
  description: schema_registry
tags:
  - name: API Keys (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ApiKey` objects represent access to different parts of Confluent Cloud. Some types
      of API keys represent access to a single cluster/resource such as a Kafka cluster,
      Schema Registry cluster or a ksqlDB cluster. Cloud API Keys represent access to resources within an organization
      that are not tied to a specific cluster, such as the Org API, IAM API, Metrics API or Connect API.

      The API allows you to list, create, update and delete your API Keys.


      Related guide: [API Keys in Confluent Cloud](https://docs.confluent.io/cloud/current/client-apps/api-keys.html).

      ## The API Keys Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ApiKey" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `apikeys_per_org` | API Keys in one Confluent Cloud organization |
  - name: Environments (org/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Environment` objects represent an isolated namespace for your Confluent resources
      for organizational purposes.

      The API allows you to create, delete, and update your environments. You can retrieve
      individual environments as well as a list of all your environments.


      Related guide: [Environments in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/environments.html).

      ## The Environments Model
      <SchemaDefinition schemaRef="#/components/schemas/org.v2.Environment" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `environments_per_org` | Environments in one Confluent Cloud organization |
  - name: Organizations (org/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Organization` objects represent a customer organization. An organization contains all customer
      resources (e.g., Environments, Kafka Clusters, Service Accounts, API Keys) and is tied to a billing
      agreement (including any annual commitment or support plan).

      The API allows you to list, view, and update your organizations.


      Related guide: [Organizations for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/hierarchy/organizations/cloud-organization.html).

      ## The Organizations Model
      <SchemaDefinition schemaRef="#/components/schemas/org.v2.Organization" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `organizations_per_user` | Confluent Cloud organizations a user belongs to |
  - name: Users (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `User` objects represent individuals who may access your Confluent resources.

      The API allows you to retrieve, update, and delete individual users, as well as list of all your
      users. This API cannot be used to create new user accounts.


      Related guide: [Users in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/user-account.html).

      ## The Users Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.User" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `users_per_org` | Users in one Confluent Cloud organization |
  - name: Service Accounts (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ServiceAccount` objects are typically used to represent applications and other non-human principals
      that may access your Confluent resources.

      The API allows you to create, retrieve, update, and delete individual service accounts, as well as
      list all your service accounts.


      Related guide: [Service Accounts in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/service-account.html).

      ## The Service Accounts Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ServiceAccount" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `service_accounts_per_org` | Service Accounts in one Confluent Cloud organization |
  - name: Invitations (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Invitation` objects represent invitations to invite users to join your organizations in Confluent Cloud.

      The API allows you to list all your invitations, as well as create, read, and delete a specified invitation.


      Related guide: [User invitations in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/identity/user-accounts.html).

      ## The Invitations Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.Invitation" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `invitations_per_org` | Invitations in a Confluent Cloud organization |
  - name: IP Groups (iam/v2)
    description: |-
      [![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To IP Groups API](https://img.shields.io/badge/-Request%20Access%20To%20IP%20Groups%20API-%23bc8540)](mailto:cloud-support@confluent.io?subject=Request%20to%20join%20IP%20Filtering%20API%20Limited%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Limited%20Access%20for%20IP%20Filtering.%0AMy%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.%0A)

      Definitions of networks which can be named and referred by IP blocks, commonly used to attach to IP Filter rules.


      ## The IP Groups Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IpGroup" />
  - name: IP Filters (iam/v2)
    description: |-
      [![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To IP Filters API](https://img.shields.io/badge/-Request%20Access%20To%20IP%20Filters%20API-%23bc8540)](mailto:ccloud-api-access+iam-v2-limited-availability@confluent.io?subject=Request%20to%20join%20iam/v2%20API%20Limited%20Availability&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Limited%20Availability%20for%20iam/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `IP Filter` objects are bindings between IP Groups and Confluent resource(s).
      For example, a binding between "CorpNet" and "Management APIs" will enforce that
      access must come from one of the CIDR blocks associated with CorpNet.
      If there are multiple IP filters bound to a resource, a request matching any of the CIDR blocks
      for any of the IP Group will allow the request.
      If there are no IP Filters for a resource, then access will be granted to requests originating
      from any IP Address.


      ## The IP Filters Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IpFilter" />
  - name: Role Bindings (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A role binding grants a Principal a role on resources that match a pattern.

      The API allows you to perform create, delete, and list operations on role bindings.


      Related guide: [Role-Based Access Control (RBAC)](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html).

      ## The Role Bindings Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.RoleBinding" />
  - name: Subscriptions (notifications/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Subscription` objects represent the intent of the customers to get notifications of particular types.
      A subscription is created for a particular `NotificationType` and the user will get notifications on the
      `Integrations` that are provided while creating the subscription.

      This API allows you to create, retrieve, and update subscriptions,
      as well as to view the list of all your subscriptions. You can also delete subscriptions
      with RECOMMENDED or OPTIONAL notification types. Subscriptions with REQUIRED notification types cannot be deleted.


      Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

      ## The Subscriptions Model
      <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.Subscription" />
  - name: Integrations (notifications/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      You can create an `Integration` to specify how we can notify you when we receive an alert/notification for
      a subscription. Please note that you can only perform create, update and delete operations for integrations
      of type `Webhook`, `Slack` and `MsTeams`. You cannot create, update or delete integrations of type `RoleEmail`
      and `UserEmail`.


      Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

      ## The Integrations Model
      <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.Integration" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `integrations_per_org` | Maximum number of integrations in one Confluent Cloud organization |
  - name: Notification Types (notifications/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The type of notifications (and their corresponding metadata) supported by Confluent.


      Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

      ## The Notification Types Model
      <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.NotificationType" />
  - name: Clusters (cmk/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Clusters` objects represent Apache Kafka Clusters on Confluent Cloud.

      The API allows you to list, create, read, update, and delete your Kafka clusters.


      Related guide: [Confluent Cloud Cluster Management for Apache Kafka APIs](https://docs.confluent.io/cloud/current/clusters/cluster-api.html).

      ## The Clusters Model
      <SchemaDefinition schemaRef="#/components/schemas/cmk.v2.Cluster" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `kafka_clusters_per_environment` | Number of clusters in one Confluent Cloud environment |
  - name: Clusters (ksqldbcm/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Cluster` represents a ksqlDB runtime that you can issue queries to using its API endpoint.
      It executes SQL statements and queries which under the hood get built into corresponding
      Kafka Streams topologies. The API allows you to list, create, read, and delete your ksqlDB clusters.


      Related guide: [ksqlDB in Confluent Cloud](https://docs.confluent.io/cloud/current/ksqldb/ksqldb-cluster-api.html).

      ## The Clusters Model
      <SchemaDefinition schemaRef="#/components/schemas/ksqldbcm.v2.Cluster" />

      ## Quotas and Limits
      This resource is subject to the following quotas:

      | Quota | Description |
      | --- | --- |
      | `ksql.limits.max_apps_per_cluster` | Clusters in one Confluent Cloud Kafka Cluster. |
  - name: Connectors (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for Managed Connectors or Custom Connectors in Confluent Cloud.

      The API allows you to list, create, get, update and delete a Managed Connector or Custom Connector in Confluent Cloud.

      Connect metrics are available through the [Metrics v2 API](https://api.telemetry.confluent.cloud/docs#tag/Version-2).

      Related guide: [Confluent Cloud API and Managed Connectors](https://docs.confluent.io/cloud/current/connectors/connect-api-section.html).
  - name: Lifecycle (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for managing the lifecycle for a Managed Connector or Custom Connector in Confluent Cloud. Operations currently supported are Pause and Resume.
  - name: Status (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for requesting the status or the tasks for a Managed Connector or Custom Connector in Confluent Cloud.
  - name: Managed Connector Plugins (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for Managed connectors in Confluent Cloud.
  - name: Offsets (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for managing the offsets for a Managed Connector.

      Related guide: [Manage Connector Offsets](https://docs.confluent.io/cloud/current/connectors/offsets.html#manage-offsets-for-fully-managed-connectors-in-ccloud)
  - name: Custom Connector Plugins (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      CustomConnectorPlugins objects represent Custom Connector Plugins on Confluent Cloud.
      The API allows you to list, create, read, update, and delete your Custom Connector Plugins.
      Related guide:
      [Custom Connector Plugin API](https://docs.confluent.io/cloud/current/connectors/connect-api-section.html).


      ## The Custom Connector Plugins Model
      <SchemaDefinition schemaRef="#/components/schemas/connect.v1.CustomConnectorPlugin" />
  - name: Presigned Urls (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Request a presigned upload URL for new Custom Connector Plugin. Note that
      the URL policy expires in one hour. If the policy expires, you can request
      a new presigned upload URL.

      Related guide:
      [Custom Connector Plugin API](https://docs.confluent.io/cloud/current/connectors/connect-api-section.html).


      ## The Presigned Urls Model
      <SchemaDefinition schemaRef="#/components/schemas/connect.v1.PresignedUrl" />
  - name: Cluster (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Configs (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: ACL (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Consumer Group (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Partition (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Topic (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Records (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Cluster Linking (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Applied Quotas (service-quota/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A `quota` object represents a quota configuration for a specific Confluent Cloud resource.
      Use this API to retrieve an individual quota or list of quotas for a given scope.


      Related guide: [Service Quotas for Confluent Cloud](https://docs.confluent.io/cloud/current/quotas/index.html).

      ## The Applied Quotas Model
      <SchemaDefinition schemaRef="#/components/schemas/service-quota.v1.AppliedQuota" />
  - name: Scopes (service-quota/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Gets a list of all available scopes for applied quotas.


      Related guide: [Quota Scopes](https://docs.confluent.io/cloud/current/quotas/quotas.html#query-for-scopes).

      ## The Scopes Model
      <SchemaDefinition schemaRef="#/components/schemas/service-quota.v1.Scope" />
  - name: Entitlements (partner/v2)
    description: |
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `Entitlement` objects represent metadata about a marketplace entitlement.

      An entitlement includes metadata about a marketplace purchase
      (start date, end date, billing information, partner IDs, etc).
      The API allows partners to create, read, and list entitlements. (Unless you
      need entitlement creation and customer registration to be separate,
      we recommend using the Signup API to create an organization and entitlement
      at the same time)

      The API only allows authorized partners to interact with the Entitlements API.
  - name: Regions (srcm/v2)
    description: |-
      [![Deprecated](https://img.shields.io/badge/Lifecycle%20Stage-Deprecated-%23ff005c)](#section/Versioning/API-Lifecycle-Policy)

      `Region` objects represent cloud provider regions available when placing Schema Registry clusters.
      The API allows you to list Schema Registry regions.


      Related guides:
      * [Confluent Cloud providers and region support](https://docs.confluent.io/cloud/current/stream-governance/packages.html#cloud-providers-and-region-support).
      * [srcm/v3 Migration Guide](https://docs.confluent.io/cloud/current/stream-governance/packages.html#deprecation-of-srcm-v2-clusters-and-regions-apis-and-upgrade-guide).


      ## The Regions Model
      <SchemaDefinition schemaRef="#/components/schemas/srcm.v2.Region" />
  - name: Clusters (srcm/v2)
    description: |-
      [![Deprecated](https://img.shields.io/badge/Lifecycle%20Stage-Deprecated-%23ff005c)](#section/Versioning/API-Lifecycle-Policy)

      `Clusters` objects represent Schema Registry Clusters on Confluent Cloud.

      The API allows you to list, create, read, and delete your Schema Registry clusters.


      Related guides:
      * [Confluent Cloud Schema Registry Cluster APIs](https://docs.confluent.io/cloud/current/stream-governance/clusters-regions-api.html#schema-registry-cluster-management).
      * [srcm/v3 Migration Guide](https://docs.confluent.io/cloud/current/stream-governance/packages.html#deprecation-of-srcm-v2-clusters-and-regions-apis-and-upgrade-guide).


      ## The Clusters Model
      <SchemaDefinition schemaRef="#/components/schemas/srcm.v2.Cluster" />
  - name: Clusters (srcm/v3)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Clusters` objects represent Schema Registry Clusters on Confluent Cloud.

      The API allows you to list and read your Schema Registry clusters.


      Related guide: [Confluent Cloud Schema Registry Cluster APIs](https://docs.confluent.io/cloud/current/stream-governance/clusters-regions-api.html#schema-registry-cluster-management).

      ## The Clusters Model
      <SchemaDefinition schemaRef="#/components/schemas/srcm.v3.Cluster" />
  - name: Compatibility (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to test schema compatibility.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Config (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to manage and query schema compatibility settings and cluster configurations.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Contexts (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to retrieve information about schema contexts.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Exporters (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete exporters.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Modes (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete schema subjects modes of operation.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Schemas (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete schemas.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Subjects (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete schema subjects and versions.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Key Encryption Keys (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete key encryption keys.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Data Encryption Keys (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete data encryption keys.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Entity (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete catalog entities.

      Related guide: [Catalog API Documentation](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#catalog-api-documentation).
  - name: Search (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to search for entities.

      Related guide: [Catalog API Documentation](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#catalog-api-documentation).
  - name: Types (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete catalog types such as tag definitions.

      Related guide: [Catalog API Documentation](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#catalog-api-documentation).
  - name: Provider Shared Resources (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ProviderSharedResource` object contains details of the data stream
      (topic, schema registry subjects, sharing metadata) that you have shared through Stream Sharing.


      ## The Provider Shared Resources Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.ProviderSharedResource" />
  - name: Provider Shares (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ProviderShare` object respresents the share that you have created through Stream Sharing.


      Related guide: [Provider Stream Shares in Confluent Cloud](https://docs.confluent.io/cloud/current/stream-sharing/produce-shared-data.html#stream-shares).

      ## The Provider Shares Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.ProviderShare" />
  - name: Consumer Shared Resources (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ConsumerSharedResource` object contains details of the data stream
      (topic, schema registry subjects, sharing metadata) that you received through Stream Sharing.


      ## The Consumer Shared Resources Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.ConsumerSharedResource" />
  - name: Consumer Shares (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ConsumerShare` object respresents the share that you received through Stream Sharing.


      Related guide: [Consumer Stream Shares in Confluent Cloud](https://docs.confluent.io/cloud/current/stream-sharing/consume-shared-data.html).

      ## The Consumer Shares Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.ConsumerShare" />
  - name: Shared Tokens (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Encrypted Token shared with consumer


      ## The Shared Tokens Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.SharedToken" />
  - name: Opt Ins (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Stream sharing opt in options

      ## The Opt Ins Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.OptIn" />
  - name: Organizations (partner/v2)
    description: |
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `Organizations` objects represent an entire Confluent Cloud organization.
      Partners are allowed to get an organization they have signed up or
      list all organizations they have signed up.
  - name: Signup (partner/v2)
    description: |
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `Signup` APIs can only be performed by partners.
  - name: Networks (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Network` represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud
      provider accounts. Dedicated networks support more networking options but can only contain Dedicated clusters.
      Shared networks can contain any cluster type.

      The API allows you to list, create, read, update, and delete your networks.


      Related guide: [APIs to manage networks in Confluent Cloud](https://docs.confluent.io/cloud/current/networking/overview.html).

      ## The Networks Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Network" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `dedicated_networks_per_environment` | Number of dedicated networks per Confluent Cloud environment |
  - name: Peerings (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Add or remove VPC/VNet peering connections between your VPC/VNet and Confluent Cloud.

      Related guides:
      * [Use VPC peering connections with Confluent Cloud on AWS](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html).
      * [Use VNet peering connections with Confluent Cloud on Azure](https://docs.confluent.io/cloud/current/networking/peering/azure-peering.html).
      * [Use VPC peering connections with Confluent Cloud on Google Cloud](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html).


      ## The Peerings Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Peering" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `peerings_per_network` | Number of peerings per network |
  - name: Transit Gateway Attachments (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      AWS Transit Gateway Attachments

      Related guide: [APIs to manage AWS Transit Gateway Attachments](https://docs.confluent.io/cloud/current/networking/aws-transit-gateway.html).

      ## The Transit Gateway Attachments Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.TransitGatewayAttachment" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `tgw_attachments_per_network` | Number of TGW attachments per network |
  - name: Private Link Accesses (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Add or remove access to PrivateLink endpoints by AWS account, Azure subscription and GCP project ID.

      Related guides:
      * [Use Google Cloud Private Service Connect with Confluent Cloud](https://docs.confluent.io/cloud/current/networking/private-links/gcp-private-service-connect.html).
      * [Use Azure Private Link with Confluent Cloud](https://docs.confluent.io/cloud/current/networking/private-links/azure-privatelink.html).
      * [Use AWS PrivateLink with Confluent Cloud](https://docs.confluent.io/cloud/current/networking/private-links/aws-privatelink.html).


      ## The Private Link Accesses Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.PrivateLinkAccess" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `private_link_accounts_per_network` | Number of AWS accounts per network |
      | `private_link_subscriptions_per_network` | Number of Azure subscriptions per network |
      | `private_service_connect_projects_per_network` | Number of GCP projects per network |
  - name: Network Link Services (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Network Link Service is associated with a Private Link Confluent Cloud Network.
      It enables connectivity from other Private Link Confluent Cloud Networks based on
      the configured accept policies.


      Related guide: [Network Linking Overview](https://docs.confluent.io/cloud/current/networking/network-linking.html).

      ## The Network Link Services Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkService" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `network_link_service_per_network` | Number of network link services per network |
  - name: Network Link Endpoints (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A Network Link Enpoint is associated with a Private Link Confluent Cloud Network at the origin and a
      Network Link Service (associated with another Private Link Confluent Cloud Network) at the target.
      It enables connectivity between the origin network and the target network.
      It can only be associated with a Private Link network.


      Related guide: [Network Linking Overview](https://docs.confluent.io/cloud/current/networking/network-linking.html).

      ## The Network Link Endpoints Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkEndpoint" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `network_link_endpoints_per_network` | Number of network link endpoints per network |
  - name: Network Link Service Associations (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      List of incoming Network Link Enpoints associated with the Network Link Service.


      Related guide: [Network Linking Overview](https://docs.confluent.io/cloud/current/networking/network-linking.html).

      ## The Network Link Service Associations Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkServiceAssociation" />
  - name: Gateways (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A gateway is a resource that defines network access to Confluent cloud resources.


      ## The Gateways Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Gateway" />
  - name: IP Addresses (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      IP Addresses

      Related guide: [Use Public Egress IP addresses on Confluent Cloud](https://docs.confluent.io/cloud/current/networking/static-egress-ip-addresses.html)

      ## The IP Addresses Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.IpAddress" />
  - name: Private Link Attachments (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      PrivateLink attachment objects represent reservations to establish PrivateLink connections
      to a cloud region in order to access resources that belong to a Confluent Cloud Environment.
      The API allows you to list, create, read update and delete your PrivateLink attachments.


      ## The Private Link Attachments Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.PrivateLinkAttachment" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `private_link_attachments_per_environment` | Number of PrivateLink Attachments per environment |
  - name: Private Link Attachment Connections (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      PrivateLink attachment connection objects represent connections established to a cloud region
      in order to access resources that belong to a Confluent Cloud Environment.
      The API allows you to list, create, read update and delete your PrivateLink attachment connections.


      ## The Private Link Attachment Connections Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.PrivateLinkAttachmentConnection" />
  - name: Identity Providers (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `IdentityProvider` objects represent external OAuth-OIDC providers in Confluent Cloud.

      The API allows you to list, create, read, update, and delete your Identity Provider.


      Related guide: [OAuth for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).

      ## The Identity Providers Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IdentityProvider" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `identity_providers_per_org` | Number of OAuth identity providers per organization |
      | `public_keys_per_provider` | Number of public keys saved per identity provider |
  - name: Jwks (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `JWKS` objects represent public key sets for a specific OAuth/OpenID Connect provider within
      Confluent Cloud.

      The API allows you to refresh JWKS public key data.


      Related guide: [OAuth for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).

      ## The Jwks Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.Jwks" />
  - name: Identity Pools (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `IdentityPool` objects represent groups of identities tied to a given a `IdentityProvider`
      that authorizes them to Confluent Cloud resources.

      It provides a mapping functionality of your `Identity Provider` user to a Confluent identity pool that
      is then used to provide access to Confluent Resources.


      Related guide: [Use identity pools with your OAuth provider](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html).

      ## The Identity Pools Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IdentityPool" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `identity_pools_per_provider` | Number of Identity Pools per Identity Provider |
  - name: OAuth Tokens (sts/v1)
    description: |
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      OAuth Token is a [JSON Web Token (JWT)](https://www.rfc-editor.org/rfc/rfc7519) that enables the use of
      external identities to access Confluent Cloud APIs
  - name: Client Quotas (kafka-quotas/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ClientQuota` objects represent Client Quotas you can set at the service account level.

      The API allows you to list, create, read, update, and delete your client quotas.


      Related guide: [Client Quotas in Confluent Cloud](https://docs.confluent.io/cloud/current/clusters/client-quotas.html).

      ## The Client Quotas Model
      <SchemaDefinition schemaRef="#/components/schemas/kafka-quotas.v1.ClientQuota" />
  - name: Pipelines (sd/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Pipeline` objects represent information about a user-defined pipeline of Confluent Cloud components.
      The pipeline's content is available separately.

      The API allows you to create, retrieve, update, and delete your pipelines,
      as well as list all of your pipelines for the particular environment and Kafka cluster.


      Related guide: [Pipelines in Confluent Cloud](https://docs.confluent.io/cloud/current/stream-designer/).

      ## The Pipelines Model
      <SchemaDefinition schemaRef="#/components/schemas/sd.v1.Pipeline" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `pipelines_per_org` | Pipelines in one Confluent Cloud organization |
      | `pipelines_per_cluster` | Pipelines in one Confluent Cloud Kafka cluster |
  - name: Keys (byok/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Key` objects represent customer managed keys on dedicated Confluent Cloud clusters.

      Keys are used to protect data at rest stored in your dedicated Confluent Cloud clusters on AWS, Azure, and GCP.
      This API allows you to upload and retrieve self-managed keys on Confluent Cloud.


      Related guide: [Confluent Cloud Bring Your Own Key (BYOK) Management API](https://docs.confluent.io/cloud/current/clusters/byok/index.html).

      ## The Keys Model
      <SchemaDefinition schemaRef="#/components/schemas/byok.v1.Key" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `byok.max_keys.per_org` | BYOK keys in one Confluent Cloud organisation. |
  - name: Costs (billing/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Cost` objects represent the aggregated billing costs for an organization


      Related guide: [Retrieve costs for a range of dates](https://docs.confluent.io/cloud/current/billing/overview.html#retrieve-costs-for-a-range-of-dates).

      ## The Costs Model
      <SchemaDefinition schemaRef="#/components/schemas/billing.v1.Cost" />
  - name: Group Mappings (iam/v2/sso)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `GroupMapping` objects establish relationships between user groups in your SSO
      identity provider and specific RBAC roles in Confluent Cloud.

      Group mappings enable automated and secure access control to Confluent Cloud resources,
      reducing administrative workload by streamlining user provisioning and authorization.


      Related guide: [Use group mappings with your SSO identity provider](https://docs.confluent.io/cloud/current/access-management/authenticate/sso/group-mapping/overview.html).

      ## The Group Mappings Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.sso.GroupMapping" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `group_mappings_per_org` | Number of group mappings per organization |
  - name: Compute Pools (fcpm/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A Compute Pool represents a set of compute resources that is used to run your Queries.
      The resources (CPUs, memory,…) provided by a Compute Pool are shared between all Queries that use it.


      ## The Compute Pools Model
      <SchemaDefinition schemaRef="#/components/schemas/fcpm.v2.ComputePool" />
  - name: Regions (fcpm/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Region` objects represent cloud provider regions available when placing Flink compute pools.
      The API allows you to list Flink regions.


      ## The Regions Model
      <SchemaDefinition schemaRef="#/components/schemas/fcpm.v2.Region" />
  - name: Statements (sql/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Statement` represents a core resource used to model SQL statements for execution.
      A statement generalizes DDL, DML, DQL, etc., but doesn’t attempt to handle session
      management or any higher-level functionality.
      The API allows you to list, create, read, and delete your statements.
      ## The Statements Model
      <SchemaDefinition schemaRef="#/components/schemas/sql.v1.Statement" />
  - name: Statement Results (sql/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `StatementResult` represents a result of a `Statement` resource.
      The API allows you to read your statement's results.
      ## The Statement Results Model
      <SchemaDefinition schemaRef="#/components/schemas/sql.v1.StatementResult" />
  - name: Statement Exceptions (sql/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `StatementException` represents an exception of a `Statement` resource.
      The API allows you to read your statement's exceptions.
      ## The Statement Exceptions Model
      <SchemaDefinition schemaRef="#/components/schemas/sql.v1.StatementException" />
  - name: Connections (sql/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Connection` represents a core resource used to model SQL connections for execution.
      A connection generalizes DDL, DML, DQL, etc., but doesn’t attempt to handle session
      management or any higher-level functionality.
      The API allows you to list, create, read, and delete your connections.
      ## The Connections Model
      <SchemaDefinition schemaRef="#/components/schemas/sql.v1.Connection" />
  - name: DNS Forwarders (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Add, remove, and update DNS forwarder for your gateway.

      Related guides:
      * [Use VPC peering connections with Confluent Cloud on AWS](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html).
      * [Use VNet peering connections with Confluent Cloud on Azure](https://docs.confluent.io/cloud/current/networking/peering/azure-peering.html).


      ## The DNS Forwarders Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.DnsForwarder" />
  - name: Access Points (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      AccessPoint objects represent network connections in and out of Gateways.
      This API allows you to list, create, read, update, and delete your access points.


      ## The Access Points Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.AccessPoint" />
  - name: DNS Records (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      DNS record objects are associated with Confluent Cloud networking resources. This API allows you to list, create, read, update, and delete your DNS records.

      ## The DNS Records Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.DnsRecord" />
  - name: Certificate Authorities (iam/v2)
    description: |-
      [![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `CertificateAuthority` objects represent signing certificate authorities in Confluent Cloud.

      The API allows you to list, create, read, update, and delete your Certificate Authority.


      Related guide: [Manage certificate authorities used for client authentication with X.509 certificates.](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/overview.html).

      ## The Certificate Authorities Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.CertificateAuthority" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `certificate_authorities_per_org` | Number of certificate authorities per organization |
  - name: Certificate Identity Pools (iam/v2)
    description: |-
      [![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Identitypool` objects represent workload identities in Confluent Cloud.

      The API allows you to list, create, read, update, and delete your identity pools associated
      with Certificate Authorities


      Related guide: [Manage Certificate Identity Pools for Granular Client Access Management](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/configure.html#step-2-create-certificate-identity-pools-for-granular-access-control).

      ## The Certificate Identity Pools Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.CertificateIdentityPool" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `identity_pools_per_certificate_authority` | Number of Identity Pools per Certificate Authority |
  - name: Integrations (pim/v1)
    description: |-
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Provider Integration](https://img.shields.io/badge/-Request%20Access%20To%20Provider%20Integration-%23bc8540)](mailto:ccloud-api-access+pim-v1-early-access@confluent.io?subject=Request%20to%20join%20pim/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20pim/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `Provider Integration` objects represent access to public cloud service provider (CSP) resources
      that may be accessed by Confluent resources (for example, connectors).

      The API allows you to create, retrieve, and delete individual integrations, and also obtain a
      list of all your provider integrations.


      Related guide: [Provider Integration in Confluent Cloud](https://docs.confluent.io/home/overview.html).

      ## The Integrations Model
      <SchemaDefinition schemaRef="#/components/schemas/pim.v1.Integration" />
  - name: Flink Artifacts (artifact/v1)
    description: |-
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Flink Artifact API EA](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Artifact%20API%20EA-%23bc8540)](mailto:ccloud-api-access+artifact-v1-early-access@confluent.io?subject=Request%20to%20join%20artifact/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20artifact/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      FlinkArtifact objects represent Flink Artifacts on Confluent Cloud.


      ## The Flink Artifacts Model
      <SchemaDefinition schemaRef="#/components/schemas/artifact.v1.FlinkArtifact" />
  - name: Presigned Urls (artifact/v1)
    description: |-
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Flink Artifact API EA](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Artifact%20API%20EA-%23bc8540)](mailto:ccloud-api-access+artifact-v1-early-access@confluent.io?subject=Request%20to%20join%20artifact/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20artifact/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      Request a presigned upload URL for new Flink Artifact. Note that
      the URL policy expires in one hour. If the policy expires, you can request
      a new presigned upload URL.


      ## The Presigned Urls Model
      <SchemaDefinition schemaRef="#/components/schemas/artifact.v1.PresignedUrl" />
  - name: Flink Artifact Versions (artifact/v1)
    description: |-
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Flink Artifact API EA](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Artifact%20API%20EA-%23bc8540)](mailto:ccloud-api-access+artifact-v1-early-access@confluent.io?subject=Request%20to%20join%20artifact/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20artifact/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      FlinkArtifactVersion objects represent Flink Artifact Versions on Confluent Cloud.


      ## The Flink Artifact Versions Model
      <SchemaDefinition schemaRef="#/components/schemas/artifact.v1.FlinkArtifactVersion" />
components:
  schemas:
    ClusterConfig:
      type: object
      properties:
        maxSchemas:
          type: integer
          description: Maximum number of registered schemas allowed
          format: int32
          example: 20000
        maxRequestsPerSec:
          type: integer
          description: Maximum number of allowed requests per second
          format: int32
          example: 25
      description: Cluster Config
    AclOperation:
      type: string
      x-extensible-enum:
        - UNKNOWN
        - ANY
        - ALL
        - READ
        - WRITE
        - CREATE
        - DELETE
        - ALTER
        - DESCRIBE
        - CLUSTER_ACTION
        - DESCRIBE_CONFIGS
        - ALTER_CONFIGS
        - IDEMPOTENT_WRITE
    AclPatternType:
      type: string
      x-extensible-enum:
        - UNKNOWN
        - ANY
        - MATCH
        - LITERAL
        - PREFIXED
    AclPermission:
      type: string
      x-extensible-enum:
        - UNKNOWN
        - ANY
        - DENY
        - ALLOW
    AclResourceType:
      type: string
      enum:
        - UNKNOWN
        - ANY
        - TOPIC
        - GROUP
        - CLUSTER
        - TRANSACTIONAL_ID
        - DELEGATION_TOKEN
    BrokerTaskType:
      type: string
      enum:
        - add-broker
        - remove-broker
    MirrorTopicStatus:
      enum:
        - ACTIVE
        - FAILED
        - LINK_FAILED
        - LINK_PAUSED
        - PAUSED
        - PENDING_STOPPED
        - SOURCE_UNAVAILABLE
        - STOPPED
        - PENDING_MIRROR
        - PENDING_SYNCHRONIZE
        - PENDING_SETUP_FOR_RESTORE
        - PENDING_RESTORE
      type: string
    ErrorMessage:
      type: object
      properties:
        error_code:
          type: integer
          description: The error code
          format: int32
        message:
          type: string
          description: The error message
      description: Error message of this operation
    AlterConfigBatchRequestData:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              value:
                type: string
                nullable: true
              operation:
                type: string
                x-extensible-enum:
                  - SET
                  - DELETE
                nullable: true
        validate_only:
          type: boolean
    CreateAclRequestData:
      type: object
      required:
        - resource_type
        - resource_name
        - pattern_type
        - principal
        - host
        - operation
        - permission
      properties:
        resource_type:
          $ref: '#/components/schemas/AclResourceType'
        resource_name:
          type: string
        pattern_type:
          $ref: '#/components/schemas/AclPatternType'
        principal:
          type: string
        host:
          type: string
        operation:
          $ref: '#/components/schemas/AclOperation'
        permission:
          $ref: '#/components/schemas/AclPermission'
    CreateAclRequestDataList:
      allOf:
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/CreateAclRequestData'
    CreateTopicRequestData:
      type: object
      required:
        - topic_name
      properties:
        topic_name:
          type: string
        partitions_count:
          type: integer
        replication_factor:
          type: integer
        configs:
          type: array
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              value:
                type: string
                nullable: true
        validate_only:
          type: boolean
    ProduceRequest:
      type: object
      properties:
        partition_id:
          type: integer
          nullable: true
          format: int32
        headers:
          type: array
          items:
            $ref: '#/components/schemas/ProduceRequestHeader'
        key:
          $ref: '#/components/schemas/ProduceRequestData'
        value:
          $ref: '#/components/schemas/ProduceRequestData'
        timestamp:
          type: string
          format: date-time
          nullable: true
    UpdateConfigRequestData:
      type: object
      properties:
        value:
          type: string
          nullable: true
    CreateLinkRequestData:
      properties:
        source_cluster_id:
          type: string
        destination_cluster_id:
          type: string
        remote_cluster_id:
          description: The expected remote cluster ID.
          type: string
        cluster_link_id:
          description: 'The expected cluster link ID. Can be provided when creating the second side of a bidirectional link for validating the link ID is as expected. If it''s not provided, it''s inferred from the remote cluster.'
          type: string
        configs:
          items:
            $ref: '#/components/schemas/ConfigData'
          type: array
      type: object
    UpdateLinkConfigRequestData:
      properties:
        value:
          type: string
      required:
        - value
      type: object
    CreateMirrorTopicRequestData:
      properties:
        source_topic_name:
          type: string
        mirror_topic_name:
          type: string
        replication_factor:
          type: integer
        configs:
          type: array
          items:
            $ref: '#/components/schemas/ConfigData'
      required:
        - source_topic_name
      type: object
    AlterMirrorsRequestData:
      properties:
        mirror_topic_names:
          description: The mirror topics specified as a list of topic names.
          type: array
          items:
            type: string
        mirror_topic_name_pattern:
          description: The mirror topics specified as a pattern.
          type: string
      type: object
    RemoveBrokersRequestData:
      properties:
        broker_ids:
          type: array
          items:
            type: integer
      required:
        - broker_ids
      type: object
    BrokerReplicaExclusionBatchRequestData:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BrokerReplicaExclusionRequestData'
    ProduceRequestHeader:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        value:
          type: string
          format: byte
          nullable: true
    ProduceRequestData:
      type: object
      properties:
        type:
          type: string
          x-extensible-enum:
            - BINARY
            - JSON
            - STRING
        data:
          $ref: '#/components/schemas/AnyValue'
      nullable: true
    ConfigData:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
      required:
        - name
        - value
    BrokerReplicaExclusionRequestData:
      type: object
      required:
        - broker_id
        - reason
      properties:
        broker_id:
          type: integer
        reason:
          type: string
    AnyValue:
      nullable: true
    RegisterSchemaRequest:
      type: object
      properties:
        version:
          type: integer
          description: Version number
          format: int32
        id:
          type: integer
          description: Globally unique identifier of the schema
          format: int32
        schemaType:
          type: string
          description: Schema type
        references:
          type: array
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
        schema:
          type: string
          description: Schema definition string
        metadata:
          $ref: '#/components/schemas/Metadata'
        ruleSet:
          $ref: '#/components/schemas/RuleSet'
      description: Schema register request
    CompatibilityCheckResponse:
      type: object
      properties:
        is_compatible:
          type: boolean
          description: Whether the compared schemas are compatible
        messages:
          type: array
          description: Error messages
          example: []
          items:
            type: string
            description: Error messages
            example: '[]'
      description: Compatibility check response
    SchemaReference:
      type: object
      properties:
        name:
          type: string
          description: Reference name
          example: io.confluent.kafka.example.User
        subject:
          type: string
          description: Name of the referenced subject
          example: User
        version:
          type: integer
          description: Version number of the referenced subject
          format: int32
          example: 1
      description: Schema reference
    Metadata:
      description: User-defined metadata
      nullable: true
      properties:
        tags:
          additionalProperties:
            items:
              type: string
            type: array
            uniqueItems: true
          type: object
        properties:
          additionalProperties:
            type: string
          type: object
        sensitive:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    RuleSet:
      description: Schema rule set
      nullable: true
      properties:
        migrationRules:
          items:
            $ref: '#/components/schemas/Rule'
          type: array
        domainRules:
          items:
            $ref: '#/components/schemas/Rule'
          type: array
      type: object
    Rule:
      description: Rule
      properties:
        name:
          description: Rule name
          type: string
        doc:
          description: Rule doc
          type: string
        kind:
          description: Rule kind
          enum:
            - TRANSFORM
            - CONDITION
          type: string
        mode:
          description: Rule mode
          enum:
            - UPGRADE
            - DOWNGRADE
            - UPDOWN
            - WRITE
            - READ
            - WRITEREAD
          type: string
        type:
          description: Rule type
          type: string
        tags:
          description: The tags to which this rule applies
          items:
            description: The tags to which this rule applies
            type: string
          type: array
          uniqueItems: true
        params:
          additionalProperties:
            description: Optional params for the rule
            type: string
          description: Optional params for the rule
          type: object
        expr:
          description: Rule expression
          type: string
        onSuccess:
          description: Rule action on success
          type: string
        onFailure:
          description: Rule action on failure
          type: string
        disabled:
          description: Whether the rule is disabled
          type: boolean
      type: object
    Config:
      type: object
      properties:
        alias:
          type: string
          description: |-
            If alias is specified, then this subject is an alias for the subject
            named by the alias. That means that any reference to this subject
            will be replaced by the alias.
        normalize:
          type: boolean
          description: |-
            If true, then schemas are automatically normalized when registered or
            when passed during lookups. This means that clients do not have to
            pass the "normalize" query parameter to have normalization occur.
        compatibilityLevel:
          type: string
          description: Compatibility Level
          example: FULL_TRANSITIVE
          x-extensible-enum:
            - BACKWARD
            - BACKWARD_TRANSITIVE
            - FORWARD
            - FORWARD_TRANSITIVE
            - FULL
            - FULL_TRANSITIVE
            - NONE
        compatibilityGroup:
          type: string
          description: |-
            Only schemas that belong to the same compatibility group will be
            checked for compatibility.
        defaultMetadata:
          type: object
          description: Default value for the metadata to be used during schema registration.
          properties:
            properties:
              type: object
              description: The metadata properties and their new values
        overrideMetadata:
          type: object
          description: Override value for the metadata to be used during schema registration.
          properties:
            properties:
              type: object
              description: The metadata properties and their new values
        defaultRuleSet:
          type: object
          description: Default value for the ruleSet to be used during schema registration.
          properties:
            properties:
              type: object
              description: The metadata properties and their new values
        overrideRuleSet:
          type: object
          description: Override value for the ruleSet to be used during schema registration.
          properties:
            properties:
              type: object
              description: The metadata properties and their new values
      description: Config
    ConfigUpdateRequest:
      type: object
      properties:
        alias:
          type: string
          description: |-
            If alias is specified, then this subject is an alias for the subject
            named by the alias. That means that any reference to this subject
            will be replaced by the alias.
        normalize:
          type: boolean
          description: |-
            If true, then schemas are automatically normalized when registered
            or when passed during lookups. This means that clients do not have
            to pass the "normalize" query parameter to have normalization occur.
        compatibility:
          type: string
          description: Compatibility Level
          example: FULL_TRANSITIVE
          x-extensible-enum:
            - BACKWARD
            - BACKWARD_TRANSITIVE
            - FORWARD
            - FORWARD_TRANSITIVE
            - FULL
            - FULL_TRANSITIVE
            - NONE
        compatibilityGroup:
          type: string
          description: |-
            Only schemas that belong to the same compatibility group will be
            checked for compatibility.
        defaultMetadata:
          type: object
          description: Default value for the metadata to be used during schema registration.
          properties:
            properties:
              type: object
              description: The metadata properties and their new values
        overrideMetadata:
          type: object
          description: Override value for the metadata to be used during schema registration.
          properties:
            properties:
              type: object
              description: The metadata properties and their new values
        defaultRuleSet:
          type: object
          description: Default value for the ruleSet to be used during schema registration.
          properties:
            properties:
              type: object
              description: The metadata properties and their new values
        overrideRuleSet:
          type: object
          description: Override value for the ruleSet to be used during schema registration.
          properties:
            properties:
              type: object
              description: The metadata properties and their new values
      description: Config update request
    ExporterReference:
      type: object
      properties:
        name:
          type: string
          description: Name of the exporter
          example: test-exporter
        contextType:
          description: 'Context type of the exporter. One of CUSTOM, NONE or AUTO (default)'
          type: string
          example: CUSTOM
          x-extensible-enum:
            - CUSTOM
            - AUTO
            - NONE
        context:
          type: string
          description: Customized context of the exporter if contextType equals CUSTOM.
          example: User
        subjects:
          type: array
          description: Name of each exporter subject
          items:
            type: string
        subjectRenameFormat:
          type: string
          description: 'Format string for the subject name in the destination cluster, which may contain ${subject} as a placeholder for the originating subject name. For example, dc_${subject} for the subject orders will map to the destination subject name dc_orders.'
        config:
          type: object
          description: The map containing exporter’s configurations
          additionalProperties:
            type: string
      description: The format for a typical exporter object
    ExporterResponse:
      type: object
      properties:
        name:
          type: string
          description: Name of the exporter
          example: test-exporter
      description: Exporter register response
    ExporterUpdateRequest:
      type: object
      properties:
        contextType:
          description: 'Context type of the exporter. One of CUSTOM, NONE or AUTO (default)'
          type: string
          example: CUSTOM
          x-extensible-enum:
            - CUSTOM
            - AUTO
            - NONE
        context:
          type: string
          description: Customized context of the exporter if contextType equals CUSTOM.
          example: User
        subjects:
          type: array
          description: Name of each exporter subject
          items:
            type: string
        subjectRenameFormat:
          type: string
          description: 'Format string for the subject name in the destination cluster, which may contain ${subject} as a placeholder for the originating subject name. For example, dc_${subject} for the subject orders will map to the destination subject name dc_orders.'
        config:
          type: object
          description: The map containing exporter’s configurations
          additionalProperties:
            type: string
      description: Exporter update request
    ExporterStatusResponse:
      type: object
      properties:
        name:
          description: Name of exporter.
          type: string
          example: test-exporter
        state:
          type: string
          description: 'State of the exporter. Could be STARTING, RUNNING or PAUSED'
          example: RUNNING
          x-extensible-enum:
            - STARTING
            - RUNNING
            - PAUSED
        offset:
          type: integer
          description: Offset of the exporter
          format: int64
          example: 100
        ts:
          type: integer
          description: Timestamp of the exporter
          format: int64
          example: 1631206325
        trace:
          description: Error trace of the exporter
          type: string
          example: ''
      description: Exporter status get request
    ExporterConfigResponse:
      type: object
      properties:
        schema.registry.url:
          description: Config SR URL
          type: string
          example: <Physical SR Endpoint>
        basic.auth.credentials.source:
          description: Config SR Auth
          type: string
          example: USER_INFO
        basic.auth.user.info:
          description: Config SR User Info
          type: string
      description: The map containing exporter’s configurations
    Mode:
      type: object
      properties:
        mode:
          type: string
          description: Schema Registry operating mode
          example: READWRITE
          x-extensible-enum:
            - READWRITE
            - READONLY
            - READONLY_OVERRIDE
            - IMPORT
      description: Schema Registry operating mode
    ModeUpdateRequest:
      type: object
      properties:
        mode:
          type: string
          description: Schema Registry operating mode
          example: READWRITE
          x-extensible-enum:
            - READWRITE
            - READONLY
            - READONLY_OVERRIDE
            - IMPORT
      description: Mode update request
    SchemaString:
      type: object
      properties:
        schemaType:
          type: string
          description: Schema type
          example: AVRO
        schema:
          type: string
          description: Schema string identified by the ID
          example: '{"schema": "{"type": "string"}"}'
        references:
          type: array
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
        maxId:
          type: integer
          description: Maximum ID
          format: int32
          example: 1
      description: Schema definition
    Schema:
      type: object
      properties:
        subject:
          type: string
          description: Name of the subject
          example: User
        version:
          type: integer
          description: Version number
          format: int32
          example: 1
        id:
          type: integer
          description: Globally unique identifier of the schema
          format: int32
          example: 100001
        schemaType:
          type: string
          description: Schema type
          example: AVRO
        references:
          type: array
          description: References to other schemas
          items:
            $ref: '#/components/schemas/SchemaReference'
        schema:
          type: string
          description: Schema definition string
          example: '{"schema": "{"type": "string"}"}'
        metadata:
          $ref: '#/components/schemas/Metadata'
        ruleSet:
          $ref: '#/components/schemas/RuleSet'
      description: Schema
    SubjectVersion:
      type: object
      properties:
        subject:
          type: string
          description: Name of the subject
          example: User
        version:
          type: integer
          description: Version number
          format: int32
          example: 1
      description: Subject version pair
    RegisterSchemaResponse:
      type: object
      properties:
        id:
          type: integer
          description: Globally unique identifier of the schema
          format: int32
          example: 100001
      description: Schema register response
  parameters:
    AclHost:
      name: host
      description: The ACL host.
      in: query
      required: false
      schema:
        type: string
    AclOperation:
      name: operation
      description: The ACL operation.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/AclOperation'
    AclOperationRequired:
      name: operation
      description: The ACL operation.
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AclOperation'
    AclPatternType:
      name: pattern_type
      description: The ACL pattern type.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/AclPatternType'
    AclPatternTypeRequired:
      name: pattern_type
      description: The ACL pattern type.
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AclPatternType'
    AclPermission:
      name: permission
      description: The ACL permission.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/AclPermission'
    AclPermissionRequired:
      name: permission
      description: The ACL permission.
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AclPermission'
    AclPrincipal:
      name: principal
      description: The ACL principal. This is the Service Account name or user name.
      in: query
      required: false
      schema:
        type: string
    AclResourceName:
      name: resource_name
      description: The ACL resource name.
      in: query
      required: false
      schema:
        type: string
    AclResourceType:
      name: resource_type
      description: The ACL resource type.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/AclResourceType'
    AclResourceTypeRequired:
      name: resource_type
      description: The ACL resource type.
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AclResourceType'
    BrokerId:
      name: broker_id
      description: The Kafka broker ID.
      in: path
      required: true
      schema:
        type: integer
      example: 1
    ClusterId:
      name: cluster_id
      description: The Kafka cluster ID.
      in: path
      required: true
      schema:
        type: string
      example: cluster-1
    ConfigName:
      name: name
      description: The configuration parameter name.
      in: path
      required: true
      schema:
        type: string
      example: compression.type
    ConsumerGroupId:
      name: consumer_group_id
      description: The consumer group ID.
      in: path
      required: true
      schema:
        type: string
      example: consumer-group-1
    ConsumerId:
      name: consumer_id
      description: The consumer ID.
      in: path
      required: true
      schema:
        type: string
      example: consumer-1
    IncludeAuthorizedOperations:
      name: include_authorized_operations
      description: Specify if authorized operations should be included in the response.
      in: query
      required: false
      schema:
        type: boolean
    PartitionId:
      name: partition_id
      description: The partition ID.
      in: path
      required: true
      schema:
        type: integer
      example: 0
    TopicName:
      name: topic_name
      description: The topic name.
      in: path
      required: true
      schema:
        type: string
      example: topic-1
    BrokerTaskType:
      name: task_type
      description: The Kafka broker task type.
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/BrokerTaskType'
      example: remove-broker
    ShouldShutdown:
      name: should_shutdown
      description: 'To shutdown the broker or not, Default: true'
      in: query
      required: false
      schema:
        type: boolean
      example: true
    ValidateOnly:
      name: validate_only
      description: 'To validate the action can be performed successfully or not. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    ValidateLink:
      name: validate_link
      description: 'To synchronously validate that the source cluster ID is expected and the dest cluster has the permission to read topics in the source cluster. Default: true'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    IncludeTasks:
      name: include_tasks
      description: 'Whether to include cluster linking tasks in the response. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    IncludeStateTransitionErrors:
      name: include_state_transition_errors
      description: 'Whether to include mirror state transition errors in the response. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    Force:
      name: force
      description: 'Force the action. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    IncludePartitionLevelTruncationData:
      name: include_partition_level_truncation_data
      description: 'Whether to include partition level truncation information when truncating and restoring a topic in the response. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    LinkName:
      name: link_name
      description: The link name
      in: path
      required: true
      schema:
        type: string
      example: link-sb1
    LinkConfigName:
      name: config_name
      description: The link config name
      in: path
      required: true
      schema:
        type: string
      example: consumer.offset.sync.enable
    MirrorTopicStatus:
      name: mirror_status
      description: 'The status of the mirror topic. If not specified, all mirror topics will be returned.'
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/MirrorTopicStatus'
      example: ACTIVE
    MirrorTopicName:
      name: mirror_topic_name
      description: Cluster Linking mirror topic name
      in: path
      required: true
      schema:
        type: string
      example: topic-1
    QueryParamLinkName:
      name: link_name
      description: The link name
      in: query
      required: true
      schema:
        type: string
      example: link-sb1
  responses:
    schemaregistry.v1.BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            error_code: 400
            message: Bad Request
    schemaregistry.v1.UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            error_code: 401
            message: Unauthorized
    schemaregistry.v1.ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            error_code: 403
            message: Forbidden
    RateLimitError:
      description: Rate Limit Exceeded
      headers:
        X-Request-Id:
          schema:
            type: string
          description: The unique identifier for the API request.
        X-RateLimit-Limit:
          schema:
            type: integer
          description: The maximum number of requests you're permitted to make per time period.
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: The number of requests remaining in the current rate limit window.
        X-RateLimit-Reset:
          schema:
            type: integer
          description: |-
            The relative time in seconds until the current rate-limit window resets.  
              
            **Important:** This differs from Github and Twitter's same-named header which uses UTC epoch seconds. We use relative time to avoid client/server time synchronization issues.
        Retry-After:
          schema:
            type: integer
          description: The number of seconds to wait until the rate limit window resets. Only sent when the rate limit is reached.
    schemaregistry.v1.DefaultSystemError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            error_code: 500
            message: 'Oops, something went wrong'
    schemaregistry.v1.AccountNotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            error_code: 404
            message: account not found
  securitySchemes:
    cloud-api-key:
      type: http
      scheme: basic
      description: Authenticate with Cloud API Keys using HTTP Basic Auth. Treat the Cloud API Key ID as the username and Cloud API Key Secret as the password.
    confluent-sts-access-token:
      type: oauth2
      description: Authenticate with Confluent API using this credentials (JSON Web Tokens) following OAuth 2.0.
      flows:
        clientCredentials:
          tokenUrl: 'https://api.confluent.cloud/sts/v1/oauth2/token'
          scopes: {}
    api-key:
      type: http
      scheme: basic
      description: Authenticate with API Keys using HTTP Basic Auth. Treat the API Key ID as the username and API Key Secret as the password.
    resource-api-key:
      type: http
      scheme: basic
      description: |
        Authenticate with resource-specific API Keys using HTTP Basic Auth. Treat the resource-specific API Key ID 
        as the username and resource-specific API Key Secret as the password.
    external-access-token:
      type: oauth2
      description: Authenticate with OAuth 2.0.
      flows:
        clientCredentials:
          tokenUrl: 'https://<oauth-identity-provider>/token'
          scopes: {}
    oauth:
      type: oauth2
      description: Authenticate with OAuth 2.0. Currently this is only supported for partner APIs.
      flows:
        clientCredentials:
          tokenUrl: /oauth2/token
          scopes:
            'partner:alter': enables partners to alter entitlements
            'partner:create': enables partners to create entitlements and signup on behalf of customers
            'partner:delete': enables partners to delete entitlements and organizations
            'partner:describe': enables partners to read and list entitlements and organizations
  requestBodies:
    AlterBrokerConfigBatchRequest:
      description: The alter broker configuration parameter batch request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
          example:
            data:
              - name: max.connections
                operation: DELETE
              - name: compression.type
                value: gzip
    AlterClusterConfigBatchRequest:
      description: The alter cluster configuration parameter batch request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
          example:
            data:
              - name: max.connections
                operation: DELETE
              - name: compression.type
                value: gzip
    AlterTopicConfigBatchRequest:
      description: The alter topic configuration parameter batch request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
          examples:
            batch_alter_topic_configs:
              value:
                data:
                  - name: cleanup.policy
                    operation: DELETE
                  - name: compression.type
                    value: gzip
            validate_only_batch_alter_topic_configs:
              value:
                data:
                  - name: cleanup.policy
                    operation: DELETE
                  - name: compression.type
                    value: gzip
                validate_only: true
    CreateAclRequest:
      description: The ACL creation request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateAclRequestData'
          example:
            resource_type: CLUSTER
            resource_name: kafka-cluster
            pattern_type: LITERAL
            principal: 'principalType:principalName'
            host: '*'
            operation: DESCRIBE
            permission: DENY
    BatchCreateAclRequest:
      description: The batch ACL creation request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateAclRequestDataList'
          example:
            data:
              - resource_type: CLUSTER
                resource_name: kafka-cluster
                pattern_type: LITERAL
                principal: 'principalType:principalName'
                host: '*'
                operation: DESCRIBE
                permission: DENY
              - resource_type: TOPIC
                resource_name: kafka-cluster
                pattern_type: LITERAL
                principal: 'principalType:principalName'
                host: '*'
                operation: READ
                permission: ALLOW
    CreateTopicRequest:
      description: 'The topic creation request. Note that Confluent Cloud allows only specific replication factor values. Because of that the replication factor field should either be omitted or it should use one of the allowed values (see https://docs.confluent.io/cloud/current/client-apps/optimizing/durability.html).'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTopicRequestData'
          examples:
            uniform_replication:
              value:
                topic_name: topic-X
                partitions_count: 64
                replication_factor: 3
                configs:
                  - name: cleanup.policy
                    value: compact
                  - name: compression.type
                    value: gzip
            dry_run_create_topic:
              value:
                topic_name: topic-X
                partitions_count: 64
                replication_factor: 3
                validate_only: true
    ProduceRequest:
      description: 'A single record to be produced to Kafka. To produce multiple records in the same request, simply concatenate the records. The delivery reports are concatenated in the same order as the records are sent.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProduceRequest'
          examples:
            binary_and_json:
              description: 'If using type, one of "BINARY", "JSON" or "STRING" is required.'
              value:
                partition_id: 1
                headers:
                  - name: Header-1
                    value: SGVhZGVyLTE=
                  - name: Header-2
                    value: SGVhZGVyLTI=
                key:
                  type: BINARY
                  data: Zm9vYmFy
                value:
                  type: JSON
                  data:
                    foo: bar
                timestamp: '2021-02-05T19:14:42Z'
            string:
              description: 'If using type, one of "BINARY", "JSON" or "STRING" is required.'
              value:
                value:
                  type: STRING
                  data: My message
            empty_value:
              description: key or value can be omitted entirely.
              value:
                key:
                  data: 1000
    UpdateBrokerConfigRequest:
      description: The broker configuration parameter update request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
          example:
            value: gzip
    UpdateClusterConfigRequest:
      description: The cluster configuration parameter update request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
          example:
            value: gzip
    UpdateTopicConfigRequest:
      description: The topic configuration parameter update request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
          example:
            value: gzip
    CreateLinkRequest:
      description: Create a cluster link
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateLinkRequestData'
          examples:
            destination_initiated_link:
              description: Create a destination initiated cluster link
              value:
                source_cluster_id: cluster-1
                configs:
                  - name: bootstrap.servers
                    value: cluster-1-bootstrap-server
                  - name: acl.sync.enable
                    value: 'false'
                  - name: consumer.offset.sync.ms
                    value: '30000'
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
            source_initiated_link_at_source_cluster:
              description: Create a source initiated cluster link at source cluster
              value:
                destination_cluster_id: cluster-2
                configs:
                  - name: bootstrap.servers
                    value: cluster-2-bootstrap-server
                  - name: link.mode
                    value: SOURCE
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
            source_initiated_link_at_destination_cluster:
              description: Create a source initiated cluster link at destination cluster
              value:
                destination_cluster_id: cluster-1
                configs:
                  - name: bootstrap.servers
                    value: cluster-1-bootstrap-server
                  - name: link.mode
                    value: DESTINATION
                  - name: connection.mode
                    value: INBOUND
                  - name: acl.sync.enable
                    value: 'false'
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
            bidirectional_link_east:
              description: Create a bidirectional cluster link in east
              value:
                remote_cluster_id: cluster-west
                configs:
                  - name: bootstrap.servers
                    value: cluster-west-bootstrap-server
                  - name: link.mode
                    value: BIDIRECTIONAL
                  - name: cluster.link.prefix
                    value: west.
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
            bidirectional_link_west:
              description: Create a bidirectional cluster link in west
              value:
                remote_cluster_id: cluster-east
                cluster_link_id: eEBkTffYSESld6EO898x3w
                configs:
                  - name: bootstrap.servers
                    value: cluster-east-bootstrap-server
                  - name: link.mode
                    value: BIDIRECTIONAL
                  - name: cluster.link.prefix
                    value: east.
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
    UpdateLinkConfigRequest:
      content:
        application/json:
          example:
            value: '300000'
          schema:
            $ref: '#/components/schemas/UpdateLinkConfigRequestData'
      description: Link config value to update
    AlterLinkConfigBatchRequest:
      content:
        application/json:
          example:
            data:
              - name: cleanup.policy
                operation: DELETE
              - name: compression.type
                value: gzip
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
    CreateMirrorTopicRequest:
      description: 'Name and configs of the topics mirroring from and mirroring to. Note that Confluent Cloud allows only specific replication factor values. Because of that the replication factor field should either be omitted or it should use one of the allowed values (see https://docs.confluent.io/cloud/current/client-apps/optimizing/durability.html).'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateMirrorTopicRequestData'
          examples:
            generic_example:
              description: Generic example of creating a mirror topic
              value:
                source_topic_name: topic-1
                configs:
                  - name: unclean.leader.election.enable
                    value: 'true'
                replication_factor: 1
            example_with_mirror_topic_name:
              description: Example using optional mirror_topic_name flag
              value:
                source_topic_name: topic-1
                mirror_topic_name: link1_topic-1
                configs:
                  - name: unclean.leader.election.enable
                    value: 'true'
                replication_factor: 3
    AlterMirrorsRequest:
      description: Mirror topics to be altered.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterMirrorsRequestData'
          examples:
            mirror_topic_names:
              description: Example using mirror topic names
              value:
                mirror_topic_names:
                  - topic-1
                  - topic-2
            mirror_topic_name_pattern:
              description: Example using mirror topic name pattern
              value:
                mirror_topic_name_pattern: .*
    RemoveBrokersRequest:
      content:
        application/json:
          example:
            broker_ids:
              - 1
              - 2
              - 3
          schema:
            $ref: '#/components/schemas/RemoveBrokersRequestData'
      description: Broker ids to remove
    BrokerReplicaExclusionBatchRequest:
      description: Alter Broker Replica Exclusions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BrokerReplicaExclusionBatchRequestData'
          example:
            data:
              - broker_id: 1
                reason: The broker is to be removed.
              - broker_id: 2
                reason: The broker is to be removed.
  x-stackQL-resources:
    cluster_config:
      id: confluent.schema_registry.cluster_config
      name: cluster_config
      title: Cluster Config
      methods:
        get_cluster_config:
          operation:
            $ref: '#/paths/~1clusterconfig/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ClusterConfig'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/cluster_config/methods/get_cluster_config'
        insert: []
        update: []
        replace: []
        delete: []
    compatibilities:
      id: confluent.schema_registry.compatibilities
      name: compatibilities
      title: Compatibilities
      methods:
        test_compatibility_by_subject_name:
          operation:
            $ref: '#/paths/~1compatibility~1subjects~1{subject}~1versions~1{version}/post'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/CompatibilityCheckResponse'
        test_compatibility_for_subject:
          operation:
            $ref: '#/paths/~1compatibility~1subjects~1{subject}~1versions/post'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/CompatibilityCheckResponse'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    subject_level_config:
      id: confluent.schema_registry.subject_level_config
      name: subject_level_config
      title: Subject Level Config
      methods:
        get_subject_level_config:
          operation:
            $ref: '#/paths/~1config~1{subject}/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/Config'
        update_subject_level_config:
          operation:
            $ref: '#/paths/~1config~1{subject}/put'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ConfigUpdateRequest'
        delete_subject_config:
          operation:
            $ref: '#/paths/~1config~1{subject}/delete'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/subject_level_config/methods/get_subject_level_config'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/subject_level_config/methods/delete_subject_config'
    top_level_config:
      id: confluent.schema_registry.top_level_config
      name: top_level_config
      title: Top Level Config
      methods:
        get_top_level_config:
          operation:
            $ref: '#/paths/~1config/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/Config'
        update_top_level_config:
          operation:
            $ref: '#/paths/~1config/put'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ConfigUpdateRequest'
        delete_top_level_config:
          operation:
            $ref: '#/paths/~1config/delete'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/top_level_config/methods/get_top_level_config'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/top_level_config/methods/delete_top_level_config'
    exporters:
      id: confluent.schema_registry.exporters
      name: exporters
      title: Exporters
      methods:
        list_exporters:
          operation:
            $ref: '#/paths/~1exporters/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
        register_exporter:
          operation:
            $ref: '#/paths/~1exporters/post'
          response:
            mediaType: application/json; qs=0.5
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ExporterResponse'
        get_exporter_info_by_name:
          operation:
            $ref: '#/paths/~1exporters~1{name}/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ExporterReference'
        update_exporter_info:
          operation:
            $ref: '#/paths/~1exporters~1{name}/put'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ExporterResponse'
        delete_exporter:
          operation:
            $ref: '#/paths/~1exporters~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        pause_exporter_by_name:
          operation:
            $ref: '#/paths/~1exporters~1{name}~1pause/put'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ExporterResponse'
        reset_exporter_by_name:
          operation:
            $ref: '#/paths/~1exporters~1{name}~1reset/put'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ExporterResponse'
        resume_exporter_by_name:
          operation:
            $ref: '#/paths/~1exporters~1{name}~1resume/put'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ExporterResponse'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/exporters/methods/get_exporter_info_by_name'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/exporters/methods/delete_exporter'
    exporter_status:
      id: confluent.schema_registry.exporter_status
      name: exporter_status
      title: Exporter Status
      methods:
        get_exporter_status_by_name:
          operation:
            $ref: '#/paths/~1exporters~1{name}~1status/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ExporterStatusResponse'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/exporter_status/methods/get_exporter_status_by_name'
        insert: []
        update: []
        replace: []
        delete: []
    exporter_configs:
      id: confluent.schema_registry.exporter_configs
      name: exporter_configs
      title: Exporter Configs
      methods:
        get_exporter_config_by_name:
          operation:
            $ref: '#/paths/~1exporters~1{name}~1config/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ExporterConfigResponse'
        update_exporter_config_by_name:
          operation:
            $ref: '#/paths/~1exporters~1{name}~1config/put'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ExporterResponse'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/exporter_configs/methods/get_exporter_config_by_name'
        insert: []
        update: []
        replace: []
        delete: []
    contexts:
      id: confluent.schema_registry.contexts
      name: contexts
      title: Contexts
      methods:
        list_contexts:
          operation:
            $ref: '#/paths/~1contexts/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/contexts/methods/list_contexts'
        insert: []
        update: []
        replace: []
        delete: []
    modes:
      id: confluent.schema_registry.modes
      name: modes
      title: Modes
      methods:
        get_mode:
          operation:
            $ref: '#/paths/~1mode~1{subject}/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/Mode'
        update_mode:
          operation:
            $ref: '#/paths/~1mode~1{subject}/put'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ModeUpdateRequest'
        delete_subject_mode:
          operation:
            $ref: '#/paths/~1mode~1{subject}/delete'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/Mode'
        get_top_level_mode:
          operation:
            $ref: '#/paths/~1mode/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/Mode'
        update_top_level_mode:
          operation:
            $ref: '#/paths/~1mode/put'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/ModeUpdateRequest'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/modes/methods/get_mode'
          - $ref: '#/components/x-stackQL-resources/modes/methods/get_top_level_mode'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/modes/methods/delete_subject_mode'
    schemas:
      id: confluent.schema_registry.schemas
      name: schemas
      title: Schemas
      methods:
        get_schema:
          operation:
            $ref: '#/paths/~1schemas~1ids~1{id}/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/SchemaString'
        get_schema_only:
          operation:
            $ref: '#/paths/~1schemas~1ids~1{id}~1schema/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
        get_schemas:
          operation:
            $ref: '#/paths/~1schemas/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/schemas/methods/get_schema'
          - $ref: '#/components/x-stackQL-resources/schemas/methods/get_schemas'
        insert: []
        update: []
        replace: []
        delete: []
    types:
      id: confluent.schema_registry.types
      name: types
      title: Types
      methods:
        get_schema_types:
          operation:
            $ref: '#/paths/~1schemas~1types/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/types/methods/get_schema_types'
        insert: []
        update: []
        replace: []
        delete: []
    schema_subjects:
      id: confluent.schema_registry.schema_subjects
      name: schema_subjects
      title: Schema Subjects
      methods:
        get_subjects:
          operation:
            $ref: '#/paths/~1schemas~1ids~1{id}~1subjects/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/schema_subjects/methods/get_subjects'
        insert: []
        update: []
        replace: []
        delete: []
    versions:
      id: confluent.schema_registry.versions
      name: versions
      title: Versions
      methods:
        get_versions:
          operation:
            $ref: '#/paths/~1schemas~1ids~1{id}~1versions/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
        list_versions:
          operation:
            $ref: '#/paths/~1subjects~1{subject}~1versions/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/versions/methods/get_versions'
          - $ref: '#/components/x-stackQL-resources/versions/methods/list_versions'
        insert: []
        update: []
        replace: []
        delete: []
    subjects:
      id: confluent.schema_registry.subjects
      name: subjects
      title: Subjects
      methods:
        get_schema_by_version:
          operation:
            $ref: '#/paths/~1subjects~1{subject}~1versions~1{version}/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/Schema'
        delete_schema_version:
          operation:
            $ref: '#/paths/~1subjects~1{subject}~1versions~1{version}/delete'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
        get_referenced_by:
          operation:
            $ref: '#/paths/~1subjects~1{subject}~1versions~1{version}~1referencedby/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
        get_schema_only_1:
          operation:
            $ref: '#/paths/~1subjects~1{subject}~1versions~1{version}~1schema/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
        register:
          operation:
            $ref: '#/paths/~1subjects~1{subject}~1versions/post'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/RegisterSchemaResponse'
        look_up_schema_under_subject:
          operation:
            $ref: '#/paths/~1subjects~1{subject}/post'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
            schemaRef: '#/components/schemas/Schema'
        delete_subject:
          operation:
            $ref: '#/paths/~1subjects~1{subject}/delete'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1subjects/get'
          response:
            mediaType: application/vnd.schemaregistry.v1+json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/subjects/methods/get_schema_by_version'
          - $ref: '#/components/x-stackQL-resources/subjects/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/subjects/methods/delete_schema_version'
          - $ref: '#/components/x-stackQL-resources/subjects/methods/delete_subject'
paths:
  /clusterconfig:
    get:
      tags:
        - Config (v1)
      summary: Get cluster config
      description: Retrieves cluster config information.
      operationId: getClusterConfig
      responses:
        '200':
          description: The cluster config
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ClusterConfig'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ClusterConfig'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ClusterConfig'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/schemaregistry.v1.DefaultSystemError'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://psrc-00000.region.provider.confluent.cloud/clusterconfig \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/clusterconfig")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/clusterconfig\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/clusterconfig", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/clusterconfig",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/clusterconfig");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/clusterconfig");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/compatibility/subjects/{subject}/versions/{version}':
    post:
      tags:
        - Compatibility (v1)
      summary: Test schema compatibility against a particular schema subject-version
      description: 'Test input schema against a particular version of a subject''s schema for compatibility. The compatibility level applied for the check is the configured compatibility level for the subject (http:get:: /config/(string: subject)). If this subject''s compatibility level was never changed, then the global compatibility level applies (http:get:: /config).'
      operationId: testCompatibilityBySubjectName
      parameters:
        - name: subject
          in: path
          description: Subject of the schema version against which compatibility is to be tested
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: 'Version of the subject''s schema against which compatibility is to be tested. Valid values for versionId are between [1,2^31-1] or the string "latest"."latest" checks compatibility of the input schema with the last registered schema under the specified subject'
          required: true
          schema:
            type: string
        - name: verbose
          in: query
          description: Whether to return detailed error messages
          schema:
            type: boolean
      requestBody:
        description: Schema
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        required: true
      responses:
        '200':
          description: Compatibility check result.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found. Error code 40402 indicates version not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: Unprocessable entity. Error code 42201 indicates an invalid schema or schema type. Error code 42202 indicates an invalid version.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions/{version}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/octet-stream' \
              --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"io.confluent.kafka.example.User","subject":"User","version":1}],"schema":"string","metadata":{"tags":{"property1":["string"],"property2":["string"]},"properties":{"property1":"string","property2":"string"},"sensitive":["string"]},"ruleSet":{"migrationRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}],"domainRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}]}}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions/{version}")
              .post(body)
              .addHeader("content-type", "application/octet-stream")
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions/{version}\"\n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"io.confluent.kafka.example.User\\\",\\\"subject\\\":\\\"User\\\",\\\"version\\\":1}],\\\"schema\\\":\\\"string\\\",\\\"metadata\\\":{\\\"tags\\\":{\\\"property1\\\":[\\\"string\\\"],\\\"property2\\\":[\\\"string\\\"]},\\\"properties\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"sensitive\\\":[\\\"string\\\"]},\\\"ruleSet\\\":{\\\"migrationRules\\\":[{\\\"name\\\":\\\"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\":\\\"TRANSFORM\\\",\\\"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\",\\\"tags\\\":[\\\"string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"expr\\\":\\\"string\\\",\\\"onSuccess\\\":\\\"string\\\",\\\"onFailure\\\":\\\"string\\\",\\\"disabled\\\":true}],\\\"domainRules\\\":[{\\\"name\\\":\\\"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\":\\\"TRANSFORM\\\",\\\"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\",\\\"tags\\\":[\\\"string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"expr\\\":\\\"string\\\",\\\"onSuccess\\\":\\\"string\\\",\\\"onFailure\\\":\\\"string\\\",\\\"disabled\\\":true}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}"

            headers = {
                'content-type': "application/octet-stream",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("POST", "/compatibility/subjects/{subject}/versions/{version}", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/compatibility/subjects/{subject}/versions/{version}",
              "headers": {
                "content-type": "application/octet-stream",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              version: 0,
              id: 0,
              schemaType: 'string',
              references: [{name: 'io.confluent.kafka.example.User', subject: 'User', version: 1}],
              schema: 'string',
              metadata: {
                tags: {property1: ['string'], property2: ['string']},
                properties: {property1: 'string', property2: 'string'},
                sensitive: ['string']
              },
              ruleSet: {
                migrationRules: [
                  {
                    name: 'string',
                    doc: 'string',
                    kind: 'TRANSFORM',
                    mode: 'UPGRADE',
                    type: 'string',
                    tags: ['string'],
                    params: {property1: 'string', property2: 'string'},
                    expr: 'string',
                    onSuccess: 'string',
                    onFailure: 'string',
                    disabled: true
                  }
                ],
                domainRules: [
                  {
                    name: 'string',
                    doc: 'string',
                    kind: 'TRANSFORM',
                    mode: 'UPGRADE',
                    type: 'string',
                    tags: ['string'],
                    params: {property1: 'string', property2: 'string'},
                    expr: 'string',
                    onSuccess: 'string',
                    onFailure: 'string',
                    disabled: true
                  }
                ]
              }
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions/{version}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/octet-stream");
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions/{version}");
            var request = new RestRequest(Method.POST);
            request.AddHeader("content-type", "application/octet-stream");
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
  '/compatibility/subjects/{subject}/versions':
    post:
      tags:
        - Compatibility (v1)
      summary: Test schema compatibility against all schemas under a subject
      description: 'Test input schema against a subject''s schemas for compatibility, based on the configured compatibility level of the subject. In other words, it will perform the same compatibility check as register for that subject. The compatibility level applied for the check is the configured compatibility level for the subject (http:get:: /config/(string: subject)). If this subject''s compatibility level was never changed, then the global compatibility level applies (http:get:: /config).'
      operationId: testCompatibilityForSubject
      parameters:
        - name: subject
          in: path
          description: Subject of the schema version against which compatibility is to be tested
          required: true
          schema:
            type: string
        - name: verbose
          in: query
          description: Whether to return detailed error messages
          schema:
            type: boolean
      requestBody:
        description: Schema
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        required: true
      responses:
        '200':
          description: Compatibility check result.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/CompatibilityCheckResponse'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/octet-stream' \
              --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"io.confluent.kafka.example.User","subject":"User","version":1}],"schema":"string","metadata":{"tags":{"property1":["string"],"property2":["string"]},"properties":{"property1":"string","property2":"string"},"sensitive":["string"]},"ruleSet":{"migrationRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}],"domainRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}]}}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions")
              .post(body)
              .addHeader("content-type", "application/octet-stream")
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions\"\n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"io.confluent.kafka.example.User\\\",\\\"subject\\\":\\\"User\\\",\\\"version\\\":1}],\\\"schema\\\":\\\"string\\\",\\\"metadata\\\":{\\\"tags\\\":{\\\"property1\\\":[\\\"string\\\"],\\\"property2\\\":[\\\"string\\\"]},\\\"properties\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"sensitive\\\":[\\\"string\\\"]},\\\"ruleSet\\\":{\\\"migrationRules\\\":[{\\\"name\\\":\\\"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\":\\\"TRANSFORM\\\",\\\"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\",\\\"tags\\\":[\\\"string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"expr\\\":\\\"string\\\",\\\"onSuccess\\\":\\\"string\\\",\\\"onFailure\\\":\\\"string\\\",\\\"disabled\\\":true}],\\\"domainRules\\\":[{\\\"name\\\":\\\"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\":\\\"TRANSFORM\\\",\\\"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\",\\\"tags\\\":[\\\"string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"expr\\\":\\\"string\\\",\\\"onSuccess\\\":\\\"string\\\",\\\"onFailure\\\":\\\"string\\\",\\\"disabled\\\":true}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}"

            headers = {
                'content-type': "application/octet-stream",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("POST", "/compatibility/subjects/{subject}/versions", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/compatibility/subjects/{subject}/versions",
              "headers": {
                "content-type": "application/octet-stream",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              version: 0,
              id: 0,
              schemaType: 'string',
              references: [{name: 'io.confluent.kafka.example.User', subject: 'User', version: 1}],
              schema: 'string',
              metadata: {
                tags: {property1: ['string'], property2: ['string']},
                properties: {property1: 'string', property2: 'string'},
                sensitive: ['string']
              },
              ruleSet: {
                migrationRules: [
                  {
                    name: 'string',
                    doc: 'string',
                    kind: 'TRANSFORM',
                    mode: 'UPGRADE',
                    type: 'string',
                    tags: ['string'],
                    params: {property1: 'string', property2: 'string'},
                    expr: 'string',
                    onSuccess: 'string',
                    onFailure: 'string',
                    disabled: true
                  }
                ],
                domainRules: [
                  {
                    name: 'string',
                    doc: 'string',
                    kind: 'TRANSFORM',
                    mode: 'UPGRADE',
                    type: 'string',
                    tags: ['string'],
                    params: {property1: 'string', property2: 'string'},
                    expr: 'string',
                    onSuccess: 'string',
                    onFailure: 'string',
                    disabled: true
                  }
                ]
              }
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/octet-stream");
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/compatibility/subjects/{subject}/versions");
            var request = new RestRequest(Method.POST);
            request.AddHeader("content-type", "application/octet-stream");
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
  '/config/{subject}':
    get:
      tags:
        - Config (v1)
      summary: Get subject compatibility level
      description: |-
        Retrieves compatibility level, compatibility group, normalization,
        default metadata, and rule set for a subject.
      operationId: getSubjectLevelConfig
      parameters:
        - name: subject
          in: path
          description: Name of the subject
          required: true
          schema:
            type: string
        - name: defaultToGlobal
          in: query
          description: Whether to return the global compatibility level  if subject compatibility level not found
          schema:
            type: boolean
      responses:
        '200':
          description: The subject compatibility level.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Config'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Config'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Config'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/config/{subject}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/config/{subject}")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config/{subject}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/config/{subject}", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/config/{subject}",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config/{subject}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config/{subject}");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
    put:
      tags:
        - Config (v1)
      summary: Update subject compatibility level
      description: |-
        Update compatibility level, compatibility group, normalization,
        default metadata, and rule set for the specified subject. On success,
        echoes the original request back to the client.
      operationId: updateSubjectLevelConfig
      parameters:
        - name: subject
          in: path
          description: Name of the subject
          required: true
          schema:
            type: string
      requestBody:
        description: Config Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        required: true
      responses:
        '200':
          description: The original request.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '422':
          description: Unprocessable Entity. Error code 42203 indicates invalid compatibility level.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store. Error code 50003 indicates a failure forwarding the request to the primary.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url 'https://psrc-00000.region.provider.confluent.cloud/config/{subject}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/octet-stream' \
              --data '{"alias":"string","normalize":true,"compatibility":"FULL_TRANSITIVE","compatibilityGroup":"string","defaultMetadata":{"properties":{}},"overrideMetadata":{"properties":{}},"defaultRuleSet":{"properties":{}},"overrideRuleSet":{"properties":{}}}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/config/{subject}")
              .put(body)
              .addHeader("content-type", "application/octet-stream")
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config/{subject}\"\n\n\tpayload := strings.NewReader(\"{\\\"alias\\\":\\\"string\\\",\\\"normalize\\\":true,\\\"compatibility\\\":\\\"FULL_TRANSITIVE\\\",\\\"compatibilityGroup\\\":\\\"string\\\",\\\"defaultMetadata\\\":{\\\"properties\\\":{}},\\\"overrideMetadata\\\":{\\\"properties\\\":{}},\\\"defaultRuleSet\\\":{\\\"properties\\\":{}},\\\"overrideRuleSet\\\":{\\\"properties\\\":{}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}"

            headers = {
                'content-type': "application/octet-stream",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("PUT", "/config/{subject}", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/config/{subject}",
              "headers": {
                "content-type": "application/octet-stream",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              alias: 'string',
              normalize: true,
              compatibility: 'FULL_TRANSITIVE',
              compatibilityGroup: 'string',
              defaultMetadata: {properties: {}},
              overrideMetadata: {properties: {}},
              defaultRuleSet: {properties: {}},
              overrideRuleSet: {properties: {}}
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config/{subject}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/octet-stream");
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config/{subject}");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("content-type", "application/octet-stream");
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("application/octet-stream", "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
    delete:
      tags:
        - Config (v1)
      summary: Delete subject compatibility level
      description: Deletes the specified subject-level compatibility level config and reverts to the global default.
      operationId: deleteSubjectConfig
      parameters:
        - name: subject
          in: path
          description: Name of the subject
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operation succeeded. Returns old compatibility level.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
                x-extensible-enum:
                  - NONE
                  - BACKWARD
                  - BACKWARD_TRANSITIVE
                  - FORWARD
                  - FORWARD_TRANSITIVE
                  - FULL
                  - FULL_TRANSITIVE
                example: FULL_TRANSITIVE
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
                x-extensible-enum:
                  - NONE
                  - BACKWARD
                  - BACKWARD_TRANSITIVE
                  - FORWARD
                  - FORWARD_TRANSITIVE
                  - FULL
                  - FULL_TRANSITIVE
                example: FULL_TRANSITIVE
            application/json; qs=0.5:
              schema:
                type: string
                x-extensible-enum:
                  - NONE
                  - BACKWARD
                  - BACKWARD_TRANSITIVE
                  - FORWARD
                  - FORWARD_TRANSITIVE
                  - FULL
                  - FULL_TRANSITIVE
                example: FULL_TRANSITIVE
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://psrc-00000.region.provider.confluent.cloud/config/{subject}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/config/{subject}")
              .delete(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config/{subject}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("DELETE", "/config/{subject}", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/config/{subject}",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config/{subject}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config/{subject}");
            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  /config:
    get:
      tags:
        - Config (v1)
      summary: Get global compatibility level
      description: |-
        Retrieves the global compatibility level, compatibility group,
        normalization, default metadata, and rule set.
      operationId: getTopLevelConfig
      responses:
        '200':
          description: The global compatibility level.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Config'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Config'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Config'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://psrc-00000.region.provider.confluent.cloud/config \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/config")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/config", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/config",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
    put:
      tags:
        - Config (v1)
      summary: Update global compatibility level
      description: |-
        Updates the global compatibility level, compatibility group,
        schema normalization, default metadata, and rule set. On success, echoes the
        original request back to the client.
      operationId: updateTopLevelConfig
      requestBody:
        description: Config Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
        required: true
      responses:
        '200':
          description: The original request.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ConfigUpdateRequest'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '422':
          description: Unprocessable Entity. Error code 42203 indicates invalid compatibility level.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store. Error code 50003 indicates a failure forwarding the request to the primary.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://psrc-00000.region.provider.confluent.cloud/config \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/octet-stream' \
              --data '{"alias":"string","normalize":true,"compatibility":"FULL_TRANSITIVE","compatibilityGroup":"string","defaultMetadata":{"properties":{}},"overrideMetadata":{"properties":{}},"defaultRuleSet":{"properties":{}},"overrideRuleSet":{"properties":{}}}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/config")
              .put(body)
              .addHeader("content-type", "application/octet-stream")
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config\"\n\n\tpayload := strings.NewReader(\"{\\\"alias\\\":\\\"string\\\",\\\"normalize\\\":true,\\\"compatibility\\\":\\\"FULL_TRANSITIVE\\\",\\\"compatibilityGroup\\\":\\\"string\\\",\\\"defaultMetadata\\\":{\\\"properties\\\":{}},\\\"overrideMetadata\\\":{\\\"properties\\\":{}},\\\"defaultRuleSet\\\":{\\\"properties\\\":{}},\\\"overrideRuleSet\\\":{\\\"properties\\\":{}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}"

            headers = {
                'content-type': "application/octet-stream",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("PUT", "/config", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/config",
              "headers": {
                "content-type": "application/octet-stream",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              alias: 'string',
              normalize: true,
              compatibility: 'FULL_TRANSITIVE',
              compatibilityGroup: 'string',
              defaultMetadata: {properties: {}},
              overrideMetadata: {properties: {}},
              defaultRuleSet: {properties: {}},
              overrideRuleSet: {properties: {}}
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/octet-stream");
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("content-type", "application/octet-stream");
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("application/octet-stream", "{\"alias\":\"string\",\"normalize\":true,\"compatibility\":\"FULL_TRANSITIVE\",\"compatibilityGroup\":\"string\",\"defaultMetadata\":{\"properties\":{}},\"overrideMetadata\":{\"properties\":{}},\"defaultRuleSet\":{\"properties\":{}},\"overrideRuleSet\":{\"properties\":{}}}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
    delete:
      tags:
        - Config (v1)
      summary: Delete global compatibility level
      description: Deletes the global compatibility level config and reverts to the default.
      operationId: deleteTopLevelConfig
      responses:
        '200':
          description: Operation succeeded. Returns old global compatibility level.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
                x-extensible-enum:
                  - NONE
                  - BACKWARD
                  - BACKWARD_TRANSITIVE
                  - FORWARD
                  - FORWARD_TRANSITIVE
                  - FULL
                  - FULL_TRANSITIVE
              example: FULL_TRANSITIVE
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
                x-extensible-enum:
                  - NONE
                  - BACKWARD
                  - BACKWARD_TRANSITIVE
                  - FORWARD
                  - FORWARD_TRANSITIVE
                  - FULL
                  - FULL_TRANSITIVE
              example: FULL_TRANSITIVE
            application/json; qs=0.5:
              schema:
                type: string
                x-extensible-enum:
                  - NONE
                  - BACKWARD
                  - BACKWARD_TRANSITIVE
                  - FORWARD
                  - FORWARD_TRANSITIVE
                  - FULL
                  - FULL_TRANSITIVE
              example: FULL_TRANSITIVE
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://psrc-00000.region.provider.confluent.cloud/config \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/config")
              .delete(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/config\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("DELETE", "/config", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/config",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/config");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/config");
            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  /exporters:
    get:
      tags:
        - Exporters (v1)
      summary: Gets all schema exporters
      description: Retrieves a list of schema exporters that have been created.
      operationId: listExporters
      responses:
        '200':
          description: Name of the exporter
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: array
                items:
                  type: string
                  example: '["exporter1", "exporter2"]'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/schemaregistry.v1.DefaultSystemError'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://psrc-00000.region.provider.confluent.cloud/exporters \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/exporters")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/exporters", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/exporters",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
    post:
      tags:
        - Exporters (v1)
      summary: Creates a new schema exporter
      description: Creates a new schema exporter. All attributes in request body are optional except config.
      operationId: registerExporter
      requestBody:
        description: Schema
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ExporterReference'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ExporterReference'
          application/json:
            schema:
              $ref: '#/components/schemas/ExporterReference'
        required: true
      responses:
        '200':
          description: Schema successfully registered.
          content:
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ExporterResponse'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '409':
          description: Conflict. Error code 40950 – Missing or invalid exporter name \ Error code 40951 – Missing or invalid exporter config \ Error code 40952 – Invalid exporter subjects \ Error code 40960 – Exporter already exists \ Error code 40964 – Too many exporters
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/schemaregistry.v1.DefaultSystemError'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://psrc-00000.region.provider.confluent.cloud/exporters \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"name":"test-exporter","contextType":"CUSTOM","context":"User","subjects":["string"],"subjectRenameFormat":"string","config":{"property1":"string","property2":"string"}}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"name\":\"test-exporter\",\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/exporters")
              .post(body)
              .addHeader("content-type", "application/json")
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"test-exporter\\\",\\\"contextType\\\":\\\"CUSTOM\\\",\\\"context\\\":\\\"User\\\",\\\"subjects\\\":[\\\"string\\\"],\\\"subjectRenameFormat\\\":\\\"string\\\",\\\"config\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "{\"name\":\"test-exporter\",\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("POST", "/exporters", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/exporters",
              "headers": {
                "content-type": "application/json",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              name: 'test-exporter',
              contextType: 'CUSTOM',
              context: 'User',
              subjects: ['string'],
              subjectRenameFormat: 'string',
              config: {property1: 'string', property2: 'string'}
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/json");
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"name\":\"test-exporter\",\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters");
            var request = new RestRequest(Method.POST);
            request.AddHeader("content-type", "application/json");
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("application/json", "{\"name\":\"test-exporter\",\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
  '/exporters/{name}':
    get:
      tags:
        - Exporters (v1)
      summary: Gets schema exporter by name
      description: Retrieves the information of the schema exporter.
      operationId: getExporterInfoByName
      parameters:
        - name: name
          in: path
          description: Name of the exporter
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The original request.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterReference'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40450 – Exporter not found
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/schemaregistry.v1.DefaultSystemError'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/exporters/{name}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/{name}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/exporters/{name}", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/exporters/{name}",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/{name}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
    put:
      tags:
        - Exporters (v1)
      summary: Update schema exporter by name
      description: Updates the information or configurations of the schema exporter. All attributes in request body are optional.
      operationId: updateExporterInfo
      parameters:
        - name: name
          in: path
          description: Name of the exporter
          required: true
          schema:
            type: string
      requestBody:
        description: Exporter Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ExporterUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ExporterUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ExporterUpdateRequest'
        required: true
      responses:
        '200':
          description: The original request.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterResponse'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '409':
          description: Invalid. Error code 40952 – Invalid exporter subjects. Error code 40963 – Exporter not paused.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/schemaregistry.v1.DefaultSystemError'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url 'https://psrc-00000.region.provider.confluent.cloud/exporters/{name}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"contextType":"CUSTOM","context":"User","subjects":["string"],"subjectRenameFormat":"string","config":{"property1":"string","property2":"string"}}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}")
              .put(body)
              .addHeader("content-type", "application/json")
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/{name}\"\n\n\tpayload := strings.NewReader(\"{\\\"contextType\\\":\\\"CUSTOM\\\",\\\"context\\\":\\\"User\\\",\\\"subjects\\\":[\\\"string\\\"],\\\"subjectRenameFormat\\\":\\\"string\\\",\\\"config\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "{\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("PUT", "/exporters/{name}", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/exporters/{name}",
              "headers": {
                "content-type": "application/json",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              contextType: 'CUSTOM',
              context: 'User',
              subjects: ['string'],
              subjectRenameFormat: 'string',
              config: {property1: 'string', property2: 'string'}
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/{name}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/json");
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("content-type", "application/json");
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("application/json", "{\"contextType\":\"CUSTOM\",\"context\":\"User\",\"subjects\":[\"string\"],\"subjectRenameFormat\":\"string\",\"config\":{\"property1\":\"string\",\"property2\":\"string\"}}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
    delete:
      tags:
        - Exporters (v1)
      summary: Delete schema exporter by name
      description: Deletes the schema exporter.
      operationId: deleteExporter
      parameters:
        - name: name
          in: path
          description: Name of the exporter
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content.
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          $ref: '#/components/responses/schemaregistry.v1.AccountNotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/schemaregistry.v1.DefaultSystemError'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://psrc-00000.region.provider.confluent.cloud/exporters/{name}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}")
              .delete(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/{name}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("DELETE", "/exporters/{name}", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/exporters/{name}",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/{name}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}");
            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/exporters/{name}/status':
    get:
      tags:
        - Exporters (v1)
      summary: Gets schema exporter status by name
      description: Retrieves the status of the schema exporter.
      operationId: getExporterStatusByName
      parameters:
        - name: name
          in: path
          description: Name of the exporter
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The original request.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterStatusResponse'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40450 – Exporter not found
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/schemaregistry.v1.DefaultSystemError'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/status' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/status")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/status\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/exporters/{name}/status", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/exporters/{name}/status",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/status");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/status");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/exporters/{name}/config':
    get:
      tags:
        - Exporters (v1)
      summary: Gets schema exporter config by name
      description: Retrieves the config of the schema exporter.
      operationId: getExporterConfigByName
      parameters:
        - name: name
          in: path
          description: Name of the exporter
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The original request
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterConfigResponse'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40450 – Exporter not found
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/schemaregistry.v1.DefaultSystemError'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/config' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/config")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/config\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/exporters/{name}/config", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/exporters/{name}/config",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/config");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/config");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
    put:
      tags:
        - Exporters (v1)
      summary: Update schema exporter config by name
      description: Retrieves the config of the schema exporter.
      operationId: updateExporterConfigByName
      parameters:
        - name: name
          in: path
          description: Name of the exporter
          required: true
          schema:
            type: string
      requestBody:
        description: Exporter Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ExporterConfigResponse'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ExporterConfigResponse'
          application/json:
            schema:
              $ref: '#/components/schemas/ExporterConfigResponse'
        required: true
      responses:
        '200':
          description: The original request.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterResponse'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '409':
          description: Invalid. Error code 40952 – Invalid exporter subjects. Error code 40963 – Exporter not paused.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/schemaregistry.v1.DefaultSystemError'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url 'https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/config' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"schema.registry.url":"<Physical SR Endpoint>","basic.auth.credentials.source":"USER_INFO","basic.auth.user.info":"string"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"schema.registry.url\":\"<Physical SR Endpoint>\",\"basic.auth.credentials.source\":\"USER_INFO\",\"basic.auth.user.info\":\"string\"}");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/config")
              .put(body)
              .addHeader("content-type", "application/json")
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/config\"\n\n\tpayload := strings.NewReader(\"{\\\"schema.registry.url\\\":\\\"<Physical SR Endpoint>\\\",\\\"basic.auth.credentials.source\\\":\\\"USER_INFO\\\",\\\"basic.auth.user.info\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "{\"schema.registry.url\":\"<Physical SR Endpoint>\",\"basic.auth.credentials.source\":\"USER_INFO\",\"basic.auth.user.info\":\"string\"}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("PUT", "/exporters/{name}/config", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/exporters/{name}/config",
              "headers": {
                "content-type": "application/json",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              'schema.registry.url': '<Physical SR Endpoint>',
              'basic.auth.credentials.source': 'USER_INFO',
              'basic.auth.user.info': 'string'
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/config");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/json");
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"schema.registry.url\":\"<Physical SR Endpoint>\",\"basic.auth.credentials.source\":\"USER_INFO\",\"basic.auth.user.info\":\"string\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/config");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("content-type", "application/json");
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("application/json", "{\"schema.registry.url\":\"<Physical SR Endpoint>\",\"basic.auth.credentials.source\":\"USER_INFO\",\"basic.auth.user.info\":\"string\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
  '/exporters/{name}/pause':
    put:
      tags:
        - Exporters (v1)
      summary: Pause schema exporter by name
      description: Pauses the state of the schema exporter.
      operationId: pauseExporterByName
      parameters:
        - name: name
          in: path
          description: Name of the exporter
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The original request.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterResponse'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '409':
          description: Invalid. Error code 40952 – Invalid exporter subjects. Error code 40963 – Exporter not paused.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/schemaregistry.v1.DefaultSystemError'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url 'https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/pause' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/pause")
              .put(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/pause\"\n\n\treq, _ := http.NewRequest(\"PUT\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("PUT", "/exporters/{name}/pause", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/exporters/{name}/pause",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/pause");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/pause");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/exporters/{name}/reset':
    put:
      tags:
        - Exporters (v1)
      summary: Reset schema exporter by name
      description: Reset the state of the schema exporter.
      operationId: resetExporterByName
      parameters:
        - name: name
          in: path
          description: Name of the exporter
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The original request.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterResponse'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40450 – Exporter not found
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '409':
          description: Invalid. Error code 40963 – Exporter not paused.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/schemaregistry.v1.DefaultSystemError'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url 'https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/reset' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/reset")
              .put(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/reset\"\n\n\treq, _ := http.NewRequest(\"PUT\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("PUT", "/exporters/{name}/reset", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/exporters/{name}/reset",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/reset");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/reset");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/exporters/{name}/resume':
    put:
      tags:
        - Exporters (v1)
      summary: Resume schema exporter by name
      description: Resume running of the schema exporter.
      operationId: resumeExporterByName
      parameters:
        - name: name
          in: path
          description: Name of the exporter
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The original request.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ExporterResponse'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40450 indicates subject not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '409':
          description: Invalid. Error code 40961 – Exporter already running.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/schemaregistry.v1.DefaultSystemError'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url 'https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/resume' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/resume")
              .put(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/resume\"\n\n\treq, _ := http.NewRequest(\"PUT\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("PUT", "/exporters/{name}/resume", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/exporters/{name}/resume",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/resume");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/exporters/{name}/resume");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  /contexts:
    get:
      tags:
        - Contexts (v1)
      summary: List contexts
      description: Retrieves a list of contexts.
      operationId: listContexts
      responses:
        '200':
          description: The contexts.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: array
                items:
                  type: string
                  example: .
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: array
                items:
                  type: string
                  example: .
            application/json; qs=0.5:
              schema:
                type: array
                items:
                  type: string
                  example: .
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: 'Internal Server Error. Error code 50001 indicates a failure in the backend data store. '
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://psrc-00000.region.provider.confluent.cloud/contexts \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/contexts")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/contexts\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/contexts", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/contexts",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/contexts");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/contexts");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/mode/{subject}':
    get:
      tags:
        - Modes (v1)
      summary: Get subject mode
      description: Retrieves the subject mode.
      operationId: getMode
      parameters:
        - name: subject
          in: path
          description: Name of the subject
          required: true
          schema:
            type: string
        - name: defaultToGlobal
          in: query
          description: Whether to return the global mode if subject mode not found
          schema:
            type: boolean
      responses:
        '200':
          description: The subject mode.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Mode'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Mode'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Mode'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/mode/{subject}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/mode/{subject}")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode/{subject}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/mode/{subject}", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/mode/{subject}",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode/{subject}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode/{subject}");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
    put:
      tags:
        - Modes (v1)
      summary: Update subject mode
      description: 'Update mode for the specified subject. On success, echoes the original request back to the client.'
      operationId: updateMode
      parameters:
        - name: subject
          in: path
          description: Name of the subject
          required: true
          schema:
            type: string
        - name: force
          in: query
          description: Whether to force update if setting mode to IMPORT and schemas currently exist
          schema:
            type: boolean
      requestBody:
        description: Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        required: true
      responses:
        '200':
          description: The original request.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '422':
          description: Unprocessable Entity. Error code 42204 indicates an invalid mode. Error code 42205 indicates operation not permitted.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store. Error code 50003 indicates a failure forwarding the request to the primary. Error code 50004 indicates unknown leader.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url 'https://psrc-00000.region.provider.confluent.cloud/mode/{subject}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/octet-stream' \
              --data '{"mode":"READWRITE"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"mode\":\"READWRITE\"}");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/mode/{subject}")
              .put(body)
              .addHeader("content-type", "application/octet-stream")
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode/{subject}\"\n\n\tpayload := strings.NewReader(\"{\\\"mode\\\":\\\"READWRITE\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "{\"mode\":\"READWRITE\"}"

            headers = {
                'content-type': "application/octet-stream",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("PUT", "/mode/{subject}", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/mode/{subject}",
              "headers": {
                "content-type": "application/octet-stream",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({mode: 'READWRITE'}));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode/{subject}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/octet-stream");
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mode\":\"READWRITE\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode/{subject}");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("content-type", "application/octet-stream");
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("application/octet-stream", "{\"mode\":\"READWRITE\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
    delete:
      tags:
        - Modes (v1)
      summary: Delete subject mode
      description: Deletes the specified subject-level mode and reverts to the global default.
      operationId: deleteSubjectMode
      parameters:
        - name: subject
          in: path
          description: Name of the subject
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Operation succeeded. Returns old mode.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Mode'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Mode'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Mode'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://psrc-00000.region.provider.confluent.cloud/mode/{subject}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/mode/{subject}")
              .delete(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode/{subject}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("DELETE", "/mode/{subject}", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/mode/{subject}",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode/{subject}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode/{subject}");
            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  /mode:
    get:
      tags:
        - Modes (v1)
      summary: Get global mode
      description: Retrieves global mode.
      operationId: getTopLevelMode
      responses:
        '200':
          description: The global mode
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Mode'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Mode'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Mode'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Error code 50001 -- Error in the backend data store
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://psrc-00000.region.provider.confluent.cloud/mode \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/mode")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/mode", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/mode",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
    put:
      tags:
        - Modes (v1)
      summary: Update global mode
      description: 'Update global mode. On success, echoes the original request back to the client.'
      operationId: updateTopLevelMode
      parameters:
        - name: force
          in: query
          description: Whether to force update if setting mode to IMPORT and schemas currently exist
          schema:
            type: boolean
      requestBody:
        description: Update Request
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/ModeUpdateRequest'
        required: true
      responses:
        '200':
          description: The original request.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ModeUpdateRequest'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '422':
          description: Unprocessable Entity. Error code 42204 indicates an invalid mode. Error code 42205 indicates operation not permitted.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store. Error code 50003 indicates a failure forwarding the request to the primary. Error code 50004 indicates unknown leader.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://psrc-00000.region.provider.confluent.cloud/mode \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/octet-stream' \
              --data '{"mode":"READWRITE"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"mode\":\"READWRITE\"}");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/mode")
              .put(body)
              .addHeader("content-type", "application/octet-stream")
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/mode\"\n\n\tpayload := strings.NewReader(\"{\\\"mode\\\":\\\"READWRITE\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "{\"mode\":\"READWRITE\"}"

            headers = {
                'content-type': "application/octet-stream",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("PUT", "/mode", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/mode",
              "headers": {
                "content-type": "application/octet-stream",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({mode: 'READWRITE'}));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/mode");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/octet-stream");
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mode\":\"READWRITE\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/mode");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("content-type", "application/octet-stream");
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("application/octet-stream", "{\"mode\":\"READWRITE\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
  '/schemas/ids/{id}':
    get:
      tags:
        - Schemas (v1)
      summary: Get schema string by ID
      description: Retrieves the schema string identified by the input ID.
      operationId: getSchema
      parameters:
        - name: id
          in: path
          description: Globally unique identifier of the schema
          required: true
          schema:
            type: integer
            format: int32
        - name: subject
          in: query
          description: Name of the subject
          schema:
            type: string
        - name: format
          in: query
          description: 'Desired output format, dependent on schema type'
          schema:
            type: string
            default: ''
        - name: fetchMaxId
          in: query
          description: Whether to fetch the maximum schema identifier that exists
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: The schema string.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/SchemaString'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/SchemaString'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/SchemaString'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40403 indicates schema not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/schemas/ids/{id}", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/schemas/ids/{id}",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/schemas/ids/{id}/schema':
    get:
      tags:
        - Schemas (v1)
      summary: Get schema by ID
      description: Retrieves the schema identified by the input ID.
      operationId: getSchemaOnly
      parameters:
        - name: id
          in: path
          description: Globally unique identifier of the schema
          required: true
          schema:
            type: integer
            format: int32
        - name: subject
          in: query
          description: Name of the subject
          schema:
            type: string
        - name: format
          in: query
          description: 'Desired output format, dependent on schema type'
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: Raw schema string.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
                example: '{"schema": "{"type": "string"}"}'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
                example: '{"schema": "{"type": "string"}"}'
            application/json; qs=0.5:
              schema:
                type: string
                example: '{"schema": "{"type": "string"}"}'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40403 indicates schema not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/schema' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/schema")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/schema\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/schemas/ids/{id}/schema", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/schemas/ids/{id}/schema",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/schema");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/schema");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  /schemas/types:
    get:
      tags:
        - Schemas (v1)
      summary: List supported schema types
      description: Retrieve the schema types supported by this registry.
      operationId: getSchemaTypes
      responses:
        '200':
          description: List of supported schema types.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: array
                items:
                  type: string
                  example: AVRO
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: array
                items:
                  type: string
                  example: AVRO
            application/json; qs=0.5:
              schema:
                type: array
                items:
                  type: string
                  example: AVRO
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://psrc-00000.region.provider.confluent.cloud/schemas/types \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/schemas/types")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/types\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/schemas/types", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/schemas/types",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/types");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/types");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  /schemas:
    get:
      tags:
        - Schemas (v1)
      summary: List schemas
      description: Get the schemas matching the specified parameters.
      operationId: getSchemas
      parameters:
        - name: subjectPrefix
          in: query
          description: Filters results by the respective subject prefix
          schema:
            type: string
            default: ''
        - name: deleted
          in: query
          description: Whether to return soft deleted schemas
          schema:
            type: boolean
            default: false
        - name: latestOnly
          in: query
          description: Whether to return latest schema versions only for each matching subject
          schema:
            type: boolean
            default: false
        - name: offset
          in: query
          description: Pagination offset for results
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: Pagination size for results. Ignored if negative
          schema:
            type: integer
            format: int32
            default: -1
      responses:
        '200':
          description: List of schemas matching the specified parameters.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schema'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://psrc-00000.region.provider.confluent.cloud/schemas \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/schemas")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/schemas", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/schemas",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/schemas/ids/{id}/subjects':
    get:
      tags:
        - Schemas (v1)
      summary: List subjects associated to schema ID
      description: Retrieves all the subjects associated with a particular schema ID.
      operationId: getSubjects
      parameters:
        - name: id
          in: path
          description: Globally unique identifier of the schema
          required: true
          schema:
            type: integer
            format: int32
        - name: subject
          in: query
          description: Filters results by the respective subject
          schema:
            type: string
        - name: deleted
          in: query
          description: Whether to include subjects where the schema was deleted
          schema:
            type: boolean
      responses:
        '200':
          description: List of subjects matching the specified parameters.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: array
                items:
                  type: string
                  example: User
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: array
                items:
                  type: string
                  example: User
            application/json; qs=0.5:
              schema:
                type: array
                items:
                  type: string
                  example: User
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40403 indicates schema not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/subjects' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/subjects")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/subjects\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/schemas/ids/{id}/subjects", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/schemas/ids/{id}/subjects",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/subjects");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/subjects");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/schemas/ids/{id}/versions':
    get:
      tags:
        - Schemas (v1)
      summary: List subject-versions associated to schema ID
      description: Get all the subject-version pairs associated with the input ID.
      operationId: getVersions
      parameters:
        - name: id
          in: path
          description: Globally unique identifier of the schema
          required: true
          schema:
            type: integer
            format: int32
        - name: subject
          in: query
          description: Filters results by the respective subject
          schema:
            type: string
        - name: deleted
          in: query
          description: Whether to include subject versions where the schema was deleted
          schema:
            type: boolean
      responses:
        '200':
          description: List of subject versions matching the specified parameters.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectVersion'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectVersion'
            application/json; qs=0.5:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectVersion'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40403 indicates schema not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/versions' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/versions")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/versions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/schemas/ids/{id}/versions", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/schemas/ids/{id}/versions",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/versions");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/schemas/ids/{id}/versions");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/subjects/{subject}/versions/{version}':
    get:
      tags:
        - Subjects (v1)
      summary: Get schema by version
      description: Retrieves a specific version of the schema registered under this subject.
      operationId: getSchemaByVersion
      parameters:
        - name: subject
          in: path
          description: Name of the subject
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: 'Version of the schema to be returned. Valid values for versionId are between [1,2^31-1] or the string "latest". "latest" returns the last registered schema under the specified subject. Note that there may be a new latest schema that gets registered right after this request is served.'
          required: true
          schema:
            type: string
        - name: deleted
          in: query
          description: Whether to include deleted schema
          schema:
            type: boolean
      responses:
        '200':
          description: The schema.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Schema'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found. Error code 40402 indicates version not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: Unprocessable Entity. Error code 42202 indicates an invalid version.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/subjects/{subject}/versions/{version}", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/subjects/{subject}/versions/{version}",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
    delete:
      tags:
        - Subjects (v1)
      summary: Delete schema version
      description: 'Deletes a specific version of the schema registered under this subject. This only deletes the version and the schema ID remains intact making it still possible to decode data using the schema ID. This API is recommended to be used only in development environments or under extreme circumstances where-in, its required to delete a previously registered schema for compatibility purposes or re-register previously registered schema.'
      operationId: deleteSchemaVersion
      parameters:
        - name: subject
          in: path
          description: Name of the subject
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: 'Version of the schema to be returned. Valid values for versionId are between [1,2^31-1] or the string "latest". "latest" returns the last registered schema under the specified subject. Note that there may be a new latest schema that gets registered right after this request is served.'
          required: true
          schema:
            type: string
        - name: permanent
          in: query
          description: Whether to perform a permanent delete
          schema:
            type: boolean
      responses:
        '200':
          description: Operation succeeded. Returns the schema version.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: integer
                format: int32
                example: 1
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: integer
                format: int32
                example: 1
            application/json; qs=0.5:
              schema:
                type: integer
                format: int32
                example: 1
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found. Error code 40402 indicates version not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: Unprocessable Entity. Error code 42202 indicates an invalid version.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}")
              .delete(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("DELETE", "/subjects/{subject}/versions/{version}", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/subjects/{subject}/versions/{version}",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}");
            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/subjects/{subject}/versions/{version}/referencedby':
    get:
      tags:
        - Subjects (v1)
      summary: List schemas referencing a schema
      description: Retrieves the IDs of schemas that reference the specified schema.
      operationId: getReferencedBy
      parameters:
        - name: subject
          in: path
          description: Name of the subject
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: 'Version of the schema to be returned. Valid values for versionId are between [1,2^31-1] or the string "latest". "latest" returns the last registered schema under the specified subject. Note that there may be a new latest schema that gets registered right after this request is served.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of IDs for schemas that reference the specified schema.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  example: 100001
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  example: 100001
            application/json; qs=0.5:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  example: 100001
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found. Error code 40402 indicates version not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: Unprocessable Entity. Error code 42202 indicates an invalid version.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/referencedby' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/referencedby")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/referencedby\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/subjects/{subject}/versions/{version}/referencedby", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/subjects/{subject}/versions/{version}/referencedby",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/referencedby");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/referencedby");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/subjects/{subject}/versions/{version}/schema':
    get:
      tags:
        - Subjects (v1)
      summary: Get schema string by version
      description: Retrieves the schema for the specified version of this subject. Only the unescaped schema string is returned.
      operationId: getSchemaOnly_1
      parameters:
        - name: subject
          in: path
          description: Name of the subject
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: 'Version of the schema to be returned. Valid values for versionId are between [1,2^31-1] or the string "latest". "latest" returns the last registered schema under the specified subject. Note that there may be a new latest schema that gets registered right after this request is served.'
          required: true
          schema:
            type: string
        - name: deleted
          in: query
          description: Whether to include deleted schema
          schema:
            type: boolean
      responses:
        '200':
          description: The schema string.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: string
                example: '{"schema": "{"type": "string"}"}'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: string
                example: '{"schema": "{"type": "string"}"}'
            application/json; qs=0.5:
              schema:
                type: string
                example: '{"schema": "{"type": "string"}"}'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found. Error code 40402 indicates version not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: Unprocessable Entity. Error code 42202 indicates an invalid version.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/schema' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/schema")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/schema\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/subjects/{subject}/versions/{version}/schema", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/subjects/{subject}/versions/{version}/schema",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/schema");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions/{version}/schema");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/subjects/{subject}/versions':
    get:
      tags:
        - Subjects (v1)
      summary: List versions under subject
      description: Retrieves a list of versions registered under the specified subject.
      operationId: listVersions
      parameters:
        - name: subject
          in: path
          description: Name of the subject
          required: true
          schema:
            type: string
        - name: deleted
          in: query
          description: Whether to include deleted schemas
          schema:
            type: boolean
      responses:
        '200':
          description: List of version numbers matching the specified parameters.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  example: 1
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  example: 1
            application/json; qs=0.5:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  example: 1
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: 'Not Found. Error code 40401 indicates subject not found. '
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/subjects/{subject}/versions", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/subjects/{subject}/versions",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
    post:
      tags:
        - Subjects (v1)
      summary: Register schema under a subject
      description: |-
        Register a new schema under the specified subject. If successfully registered, this returns the unique identifier of this schema in the registry. The returned identifier should be used to retrieve this schema from the schemas resource and is different from the schema's version which is associated with the subject. If the same schema is registered under a different subject, the same identifier will be returned. However, the version of the schema may be different under different subjects.
        A schema should be compatible with the previously registered schema or schemas (if there are any) as per the configured compatibility level. The configured compatibility level can be obtained by issuing a GET http:get:: /config/(string: subject). If that returns null, then GET http:get:: /config
        When there are multiple instances of Schema Registry running in the same cluster, the schema registration request will be forwarded to one of the instances designated as the primary. If the primary is not available, the client will get an error code indicating that the forwarding has failed.
      operationId: register
      parameters:
        - name: subject
          in: path
          description: Name of the subject
          required: true
          schema:
            type: string
        - name: normalize
          in: query
          description: Whether to register the normalized schema
          schema:
            type: boolean
      requestBody:
        description: Schema
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        required: true
      responses:
        '200':
          description: Schema successfully registered.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/RegisterSchemaResponse'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '409':
          description: Conflict. Incompatible schema.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '422':
          description: 'Unprocessable entity. Error code 42201 indicates an invalid schema or schema type. '
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.Error code 50002 indicates operation timed out. Error code 50003 indicates a failure forwarding the request to the primary.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/octet-stream' \
              --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"io.confluent.kafka.example.User","subject":"User","version":1}],"schema":"string","metadata":{"tags":{"property1":["string"],"property2":["string"]},"properties":{"property1":"string","property2":"string"},"sensitive":["string"]},"ruleSet":{"migrationRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}],"domainRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}]}}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions")
              .post(body)
              .addHeader("content-type", "application/octet-stream")
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions\"\n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"io.confluent.kafka.example.User\\\",\\\"subject\\\":\\\"User\\\",\\\"version\\\":1}],\\\"schema\\\":\\\"string\\\",\\\"metadata\\\":{\\\"tags\\\":{\\\"property1\\\":[\\\"string\\\"],\\\"property2\\\":[\\\"string\\\"]},\\\"properties\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"sensitive\\\":[\\\"string\\\"]},\\\"ruleSet\\\":{\\\"migrationRules\\\":[{\\\"name\\\":\\\"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\":\\\"TRANSFORM\\\",\\\"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\",\\\"tags\\\":[\\\"string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"expr\\\":\\\"string\\\",\\\"onSuccess\\\":\\\"string\\\",\\\"onFailure\\\":\\\"string\\\",\\\"disabled\\\":true}],\\\"domainRules\\\":[{\\\"name\\\":\\\"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\":\\\"TRANSFORM\\\",\\\"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\",\\\"tags\\\":[\\\"string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"expr\\\":\\\"string\\\",\\\"onSuccess\\\":\\\"string\\\",\\\"onFailure\\\":\\\"string\\\",\\\"disabled\\\":true}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}"

            headers = {
                'content-type': "application/octet-stream",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("POST", "/subjects/{subject}/versions", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/subjects/{subject}/versions",
              "headers": {
                "content-type": "application/octet-stream",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              version: 0,
              id: 0,
              schemaType: 'string',
              references: [{name: 'io.confluent.kafka.example.User', subject: 'User', version: 1}],
              schema: 'string',
              metadata: {
                tags: {property1: ['string'], property2: ['string']},
                properties: {property1: 'string', property2: 'string'},
                sensitive: ['string']
              },
              ruleSet: {
                migrationRules: [
                  {
                    name: 'string',
                    doc: 'string',
                    kind: 'TRANSFORM',
                    mode: 'UPGRADE',
                    type: 'string',
                    tags: ['string'],
                    params: {property1: 'string', property2: 'string'},
                    expr: 'string',
                    onSuccess: 'string',
                    onFailure: 'string',
                    disabled: true
                  }
                ],
                domainRules: [
                  {
                    name: 'string',
                    doc: 'string',
                    kind: 'TRANSFORM',
                    mode: 'UPGRADE',
                    type: 'string',
                    tags: ['string'],
                    params: {property1: 'string', property2: 'string'},
                    expr: 'string',
                    onSuccess: 'string',
                    onFailure: 'string',
                    disabled: true
                  }
                ]
              }
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/octet-stream");
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}/versions");
            var request = new RestRequest(Method.POST);
            request.AddHeader("content-type", "application/octet-stream");
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
  '/subjects/{subject}':
    post:
      tags:
        - Subjects (v1)
      summary: Lookup schema under subject
      description: 'Check if a schema has already been registered under the specified subject. If so, this returns the schema string along with its globally unique identifier, its version under this subject and the subject name.'
      operationId: lookUpSchemaUnderSubject
      parameters:
        - name: subject
          in: path
          description: Subject under which the schema will be registered
          required: true
          schema:
            type: string
        - name: normalize
          in: query
          description: Whether to lookup the normalized schema
          schema:
            type: boolean
        - name: deleted
          in: query
          description: Whether to lookup deleted schemas
          schema:
            type: boolean
      requestBody:
        description: Schema
        content:
          application/vnd.schemaregistry.v1+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/vnd.schemaregistry+json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/RegisterSchemaRequest'
        required: true
      responses:
        '200':
          description: The schema.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/Schema'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/Schema'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/Schema'
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found. Error code 40403 indicates schema not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/octet-stream' \
              --data '{"version":0,"id":0,"schemaType":"string","references":[{"name":"io.confluent.kafka.example.User","subject":"User","version":1}],"schema":"string","metadata":{"tags":{"property1":["string"],"property2":["string"]},"properties":{"property1":"string","property2":"string"},"sensitive":["string"]},"ruleSet":{"migrationRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}],"domainRules":[{"name":"string","doc":"string","kind":"TRANSFORM","mode":"UPGRADE","type":"string","tags":["string"],"params":{"property1":"string","property2":"string"},"expr":"string","onSuccess":"string","onFailure":"string","disabled":true}]}}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");
            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}")
              .post(body)
              .addHeader("content-type", "application/octet-stream")
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}\"\n\n\tpayload := strings.NewReader(\"{\\\"version\\\":0,\\\"id\\\":0,\\\"schemaType\\\":\\\"string\\\",\\\"references\\\":[{\\\"name\\\":\\\"io.confluent.kafka.example.User\\\",\\\"subject\\\":\\\"User\\\",\\\"version\\\":1}],\\\"schema\\\":\\\"string\\\",\\\"metadata\\\":{\\\"tags\\\":{\\\"property1\\\":[\\\"string\\\"],\\\"property2\\\":[\\\"string\\\"]},\\\"properties\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"sensitive\\\":[\\\"string\\\"]},\\\"ruleSet\\\":{\\\"migrationRules\\\":[{\\\"name\\\":\\\"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\":\\\"TRANSFORM\\\",\\\"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\",\\\"tags\\\":[\\\"string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"expr\\\":\\\"string\\\",\\\"onSuccess\\\":\\\"string\\\",\\\"onFailure\\\":\\\"string\\\",\\\"disabled\\\":true}],\\\"domainRules\\\":[{\\\"name\\\":\\\"string\\\",\\\"doc\\\":\\\"string\\\",\\\"kind\\\":\\\"TRANSFORM\\\",\\\"mode\\\":\\\"UPGRADE\\\",\\\"type\\\":\\\"string\\\",\\\"tags\\\":[\\\"string\\\"],\\\"params\\\":{\\\"property1\\\":\\\"string\\\",\\\"property2\\\":\\\"string\\\"},\\\"expr\\\":\\\"string\\\",\\\"onSuccess\\\":\\\"string\\\",\\\"onFailure\\\":\\\"string\\\",\\\"disabled\\\":true}]}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/octet-stream\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            payload = "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}"

            headers = {
                'content-type': "application/octet-stream",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("POST", "/subjects/{subject}", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/subjects/{subject}",
              "headers": {
                "content-type": "application/octet-stream",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              version: 0,
              id: 0,
              schemaType: 'string',
              references: [{name: 'io.confluent.kafka.example.User', subject: 'User', version: 1}],
              schema: 'string',
              metadata: {
                tags: {property1: ['string'], property2: ['string']},
                properties: {property1: 'string', property2: 'string'},
                sensitive: ['string']
              },
              ruleSet: {
                migrationRules: [
                  {
                    name: 'string',
                    doc: 'string',
                    kind: 'TRANSFORM',
                    mode: 'UPGRADE',
                    type: 'string',
                    tags: ['string'],
                    params: {property1: 'string', property2: 'string'},
                    expr: 'string',
                    onSuccess: 'string',
                    onFailure: 'string',
                    disabled: true
                  }
                ],
                domainRules: [
                  {
                    name: 'string',
                    doc: 'string',
                    kind: 'TRANSFORM',
                    mode: 'UPGRADE',
                    type: 'string',
                    tags: ['string'],
                    params: {property1: 'string', property2: 'string'},
                    expr: 'string',
                    onSuccess: 'string',
                    onFailure: 'string',
                    disabled: true
                  }
                ]
              }
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/octet-stream");
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}");
            var request = new RestRequest(Method.POST);
            request.AddHeader("content-type", "application/octet-stream");
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("application/octet-stream", "{\"version\":0,\"id\":0,\"schemaType\":\"string\",\"references\":[{\"name\":\"io.confluent.kafka.example.User\",\"subject\":\"User\",\"version\":1}],\"schema\":\"string\",\"metadata\":{\"tags\":{\"property1\":[\"string\"],\"property2\":[\"string\"]},\"properties\":{\"property1\":\"string\",\"property2\":\"string\"},\"sensitive\":[\"string\"]},\"ruleSet\":{\"migrationRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}],\"domainRules\":[{\"name\":\"string\",\"doc\":\"string\",\"kind\":\"TRANSFORM\",\"mode\":\"UPGRADE\",\"type\":\"string\",\"tags\":[\"string\"],\"params\":{\"property1\":\"string\",\"property2\":\"string\"},\"expr\":\"string\",\"onSuccess\":\"string\",\"onFailure\":\"string\",\"disabled\":true}]}}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
    delete:
      tags:
        - Subjects (v1)
      summary: Delete subject
      description: Deletes the specified subject and its associated compatibility level if registered. It is recommended to use this API only when a topic needs to be recycled or in development environment.
      operationId: deleteSubject
      parameters:
        - name: subject
          in: path
          description: Name of the subject
          required: true
          schema:
            type: string
        - name: permanent
          in: query
          description: Whether to perform a permanent delete
          schema:
            type: boolean
      responses:
        '200':
          description: Operation succeeded. Returns list of schema versions deleted
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  example: 1
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  example: 1
            application/json; qs=0.5:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  example: 1
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '404':
          description: Not Found. Error code 40401 indicates subject not found.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}")
              .delete(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("DELETE", "/subjects/{subject}", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/subjects/{subject}",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects/{subject}");
            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  /subjects:
    get:
      tags:
        - Subjects (v1)
      summary: List subjects
      description: Retrieves a list of registered subjects matching specified parameters.
      operationId: list
      parameters:
        - name: subjectPrefix
          in: query
          description: Subject name prefix
          schema:
            type: string
            default: ':*:'
        - name: deleted
          in: query
          description: Whether to look up deleted subjects
          schema:
            type: boolean
      responses:
        '200':
          description: List of subjects matching the specified parameters.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                type: array
                items:
                  type: string
                  example: User
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                type: array
                items:
                  type: string
                  example: User
            application/json; qs=0.5:
              schema:
                type: array
                items:
                  type: string
                  example: User
        '400':
          $ref: '#/components/responses/schemaregistry.v1.BadRequestError'
        '401':
          $ref: '#/components/responses/schemaregistry.v1.UnauthorizedError'
        '403':
          $ref: '#/components/responses/schemaregistry.v1.ForbiddenError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          description: Internal Server Error. Error code 50001 indicates a failure in the backend data store.
          content:
            application/vnd.schemaregistry.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/vnd.schemaregistry+json; qs=0.9:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
            application/json; qs=0.5:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
      security:
        - resource-api-key: []
        - external-access-token: []
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://psrc-00000.region.provider.confluent.cloud/subjects \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://psrc-00000.region.provider.confluent.cloud/subjects")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://psrc-00000.region.provider.confluent.cloud/subjects\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("psrc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/subjects", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "psrc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/subjects",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://psrc-00000.region.provider.confluent.cloud/subjects");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://psrc-00000.region.provider.confluent.cloud/subjects");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
