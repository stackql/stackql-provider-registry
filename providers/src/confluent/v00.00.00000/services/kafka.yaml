openapi: 3.0.0
servers:
  - url: 'https://api.confluent.cloud'
    description: Confluent Cloud API
info:
  version: ''
  contact:
    name: Confluent Cloud
    url: 'https://www.confluent.io/cloud-contact-us/'
    email: support@confluent.io
  x-api-id: 46234552-5833-42eb-ba0f-883ad3f70d2b
  x-audience: external-public
  x-logo:
    url: 'https://assets.confluent.io/m/5ec23aa91903c00b/'
  title: Confluent Cloud APIs - kafka
  description: kafka
tags:
  - name: API Keys (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ApiKey` objects represent access to different parts of Confluent Cloud. Some types
      of API keys represent access to a single cluster/resource such as a Kafka cluster,
      Schema Registry cluster or a ksqlDB cluster. Cloud API Keys represent access to resources within an organization
      that are not tied to a specific cluster, such as the Org API, IAM API, Metrics API or Connect API.

      The API allows you to list, create, update and delete your API Keys.


      Related guide: [API Keys in Confluent Cloud](https://docs.confluent.io/cloud/current/client-apps/api-keys.html).

      ## The API Keys Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ApiKey" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `apikeys_per_org` | API Keys in one Confluent Cloud organization |
  - name: Environments (org/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Environment` objects represent an isolated namespace for your Confluent resources
      for organizational purposes.

      The API allows you to create, delete, and update your environments. You can retrieve
      individual environments as well as a list of all your environments.


      Related guide: [Environments in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/environments.html).

      ## The Environments Model
      <SchemaDefinition schemaRef="#/components/schemas/org.v2.Environment" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `environments_per_org` | Environments in one Confluent Cloud organization |
  - name: Organizations (org/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Organization` objects represent a customer organization. An organization contains all customer
      resources (e.g., Environments, Kafka Clusters, Service Accounts, API Keys) and is tied to a billing
      agreement (including any annual commitment or support plan).

      The API allows you to list, view, and update your organizations.


      Related guide: [Organizations for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/hierarchy/organizations/cloud-organization.html).

      ## The Organizations Model
      <SchemaDefinition schemaRef="#/components/schemas/org.v2.Organization" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `organizations_per_user` | Confluent Cloud organizations a user belongs to |
  - name: Users (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `User` objects represent individuals who may access your Confluent resources.

      The API allows you to retrieve, update, and delete individual users, as well as list of all your
      users. This API cannot be used to create new user accounts.


      Related guide: [Users in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/user-account.html).

      ## The Users Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.User" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `users_per_org` | Users in one Confluent Cloud organization |
  - name: Service Accounts (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ServiceAccount` objects are typically used to represent applications and other non-human principals
      that may access your Confluent resources.

      The API allows you to create, retrieve, update, and delete individual service accounts, as well as
      list all your service accounts.


      Related guide: [Service Accounts in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/service-account.html).

      ## The Service Accounts Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.ServiceAccount" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `service_accounts_per_org` | Service Accounts in one Confluent Cloud organization |
  - name: Invitations (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Invitation` objects represent invitations to invite users to join your organizations in Confluent Cloud.

      The API allows you to list all your invitations, as well as create, read, and delete a specified invitation.


      Related guide: [User invitations in Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/identity/user-accounts.html).

      ## The Invitations Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.Invitation" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `invitations_per_org` | Invitations in a Confluent Cloud organization |
  - name: IP Groups (iam/v2)
    description: |-
      [![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To IP Groups API](https://img.shields.io/badge/-Request%20Access%20To%20IP%20Groups%20API-%23bc8540)](mailto:cloud-support@confluent.io?subject=Request%20to%20join%20IP%20Filtering%20API%20Limited%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Limited%20Access%20for%20IP%20Filtering.%0AMy%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.%0A)

      Definitions of networks which can be named and referred by IP blocks, commonly used to attach to IP Filter rules.


      ## The IP Groups Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IpGroup" />
  - name: IP Filters (iam/v2)
    description: |-
      [![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To IP Filters API](https://img.shields.io/badge/-Request%20Access%20To%20IP%20Filters%20API-%23bc8540)](mailto:ccloud-api-access+iam-v2-limited-availability@confluent.io?subject=Request%20to%20join%20iam/v2%20API%20Limited%20Availability&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Limited%20Availability%20for%20iam/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `IP Filter` objects are bindings between IP Groups and Confluent resource(s).
      For example, a binding between "CorpNet" and "Management APIs" will enforce that
      access must come from one of the CIDR blocks associated with CorpNet.
      If there are multiple IP filters bound to a resource, a request matching any of the CIDR blocks
      for any of the IP Group will allow the request.
      If there are no IP Filters for a resource, then access will be granted to requests originating
      from any IP Address.


      ## The IP Filters Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IpFilter" />
  - name: Role Bindings (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A role binding grants a Principal a role on resources that match a pattern.

      The API allows you to perform create, delete, and list operations on role bindings.


      Related guide: [Role-Based Access Control (RBAC)](https://docs.confluent.io/cloud/current/access-management/access-control/cloud-rbac.html).

      ## The Role Bindings Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.RoleBinding" />
  - name: Subscriptions (notifications/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Subscription` objects represent the intent of the customers to get notifications of particular types.
      A subscription is created for a particular `NotificationType` and the user will get notifications on the
      `Integrations` that are provided while creating the subscription.

      This API allows you to create, retrieve, and update subscriptions,
      as well as to view the list of all your subscriptions. You can also delete subscriptions
      with RECOMMENDED or OPTIONAL notification types. Subscriptions with REQUIRED notification types cannot be deleted.


      Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

      ## The Subscriptions Model
      <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.Subscription" />
  - name: Integrations (notifications/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      You can create an `Integration` to specify how we can notify you when we receive an alert/notification for
      a subscription. Please note that you can only perform create, update and delete operations for integrations
      of type `Webhook`, `Slack` and `MsTeams`. You cannot create, update or delete integrations of type `RoleEmail`
      and `UserEmail`.


      Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

      ## The Integrations Model
      <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.Integration" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `integrations_per_org` | Maximum number of integrations in one Confluent Cloud organization |
  - name: Notification Types (notifications/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The type of notifications (and their corresponding metadata) supported by Confluent.


      Related guide: [Cloud Notifications](https://docs.confluent.io/cloud/current/monitoring/configure-notifications.html#notifications-for-ccloud).

      ## The Notification Types Model
      <SchemaDefinition schemaRef="#/components/schemas/notifications.v1.NotificationType" />
  - name: Clusters (cmk/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Clusters` objects represent Apache Kafka Clusters on Confluent Cloud.

      The API allows you to list, create, read, update, and delete your Kafka clusters.


      Related guide: [Confluent Cloud Cluster Management for Apache Kafka APIs](https://docs.confluent.io/cloud/current/clusters/cluster-api.html).

      ## The Clusters Model
      <SchemaDefinition schemaRef="#/components/schemas/cmk.v2.Cluster" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `kafka_clusters_per_environment` | Number of clusters in one Confluent Cloud environment |
  - name: Clusters (ksqldbcm/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Cluster` represents a ksqlDB runtime that you can issue queries to using its API endpoint.
      It executes SQL statements and queries which under the hood get built into corresponding
      Kafka Streams topologies. The API allows you to list, create, read, and delete your ksqlDB clusters.


      Related guide: [ksqlDB in Confluent Cloud](https://docs.confluent.io/cloud/current/ksqldb/ksqldb-cluster-api.html).

      ## The Clusters Model
      <SchemaDefinition schemaRef="#/components/schemas/ksqldbcm.v2.Cluster" />

      ## Quotas and Limits
      This resource is subject to the following quotas:

      | Quota | Description |
      | --- | --- |
      | `ksql.limits.max_apps_per_cluster` | Clusters in one Confluent Cloud Kafka Cluster. |
  - name: Connectors (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for Managed Connectors or Custom Connectors in Confluent Cloud.

      The API allows you to list, create, get, update and delete a Managed Connector or Custom Connector in Confluent Cloud.

      Connect metrics are available through the [Metrics v2 API](https://api.telemetry.confluent.cloud/docs#tag/Version-2).

      Related guide: [Confluent Cloud API and Managed Connectors](https://docs.confluent.io/cloud/current/connectors/connect-api-section.html).
  - name: Lifecycle (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for managing the lifecycle for a Managed Connector or Custom Connector in Confluent Cloud. Operations currently supported are Pause and Resume.
  - name: Status (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for requesting the status or the tasks for a Managed Connector or Custom Connector in Confluent Cloud.
  - name: Managed Connector Plugins (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for Managed connectors in Confluent Cloud.
  - name: Offsets (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      API for managing the offsets for a Managed Connector.

      Related guide: [Manage Connector Offsets](https://docs.confluent.io/cloud/current/connectors/offsets.html#manage-offsets-for-fully-managed-connectors-in-ccloud)
  - name: Custom Connector Plugins (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      CustomConnectorPlugins objects represent Custom Connector Plugins on Confluent Cloud.
      The API allows you to list, create, read, update, and delete your Custom Connector Plugins.
      Related guide:
      [Custom Connector Plugin API](https://docs.confluent.io/cloud/current/connectors/connect-api-section.html).


      ## The Custom Connector Plugins Model
      <SchemaDefinition schemaRef="#/components/schemas/connect.v1.CustomConnectorPlugin" />
  - name: Presigned Urls (connect/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Request a presigned upload URL for new Custom Connector Plugin. Note that
      the URL policy expires in one hour. If the policy expires, you can request
      a new presigned upload URL.

      Related guide:
      [Custom Connector Plugin API](https://docs.confluent.io/cloud/current/connectors/connect-api-section.html).


      ## The Presigned Urls Model
      <SchemaDefinition schemaRef="#/components/schemas/connect.v1.PresignedUrl" />
  - name: Cluster (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Configs (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: ACL (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Consumer Group (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Partition (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Topic (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Records (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Cluster Linking (v3)
    description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
  - name: Applied Quotas (service-quota/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A `quota` object represents a quota configuration for a specific Confluent Cloud resource.
      Use this API to retrieve an individual quota or list of quotas for a given scope.


      Related guide: [Service Quotas for Confluent Cloud](https://docs.confluent.io/cloud/current/quotas/index.html).

      ## The Applied Quotas Model
      <SchemaDefinition schemaRef="#/components/schemas/service-quota.v1.AppliedQuota" />
  - name: Scopes (service-quota/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Gets a list of all available scopes for applied quotas.


      Related guide: [Quota Scopes](https://docs.confluent.io/cloud/current/quotas/quotas.html#query-for-scopes).

      ## The Scopes Model
      <SchemaDefinition schemaRef="#/components/schemas/service-quota.v1.Scope" />
  - name: Entitlements (partner/v2)
    description: |
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `Entitlement` objects represent metadata about a marketplace entitlement.

      An entitlement includes metadata about a marketplace purchase
      (start date, end date, billing information, partner IDs, etc).
      The API allows partners to create, read, and list entitlements. (Unless you
      need entitlement creation and customer registration to be separate,
      we recommend using the Signup API to create an organization and entitlement
      at the same time)

      The API only allows authorized partners to interact with the Entitlements API.
  - name: Regions (srcm/v2)
    description: |-
      [![Deprecated](https://img.shields.io/badge/Lifecycle%20Stage-Deprecated-%23ff005c)](#section/Versioning/API-Lifecycle-Policy)

      `Region` objects represent cloud provider regions available when placing Schema Registry clusters.
      The API allows you to list Schema Registry regions.


      Related guides:
      * [Confluent Cloud providers and region support](https://docs.confluent.io/cloud/current/stream-governance/packages.html#cloud-providers-and-region-support).
      * [srcm/v3 Migration Guide](https://docs.confluent.io/cloud/current/stream-governance/packages.html#deprecation-of-srcm-v2-clusters-and-regions-apis-and-upgrade-guide).


      ## The Regions Model
      <SchemaDefinition schemaRef="#/components/schemas/srcm.v2.Region" />
  - name: Clusters (srcm/v2)
    description: |-
      [![Deprecated](https://img.shields.io/badge/Lifecycle%20Stage-Deprecated-%23ff005c)](#section/Versioning/API-Lifecycle-Policy)

      `Clusters` objects represent Schema Registry Clusters on Confluent Cloud.

      The API allows you to list, create, read, and delete your Schema Registry clusters.


      Related guides:
      * [Confluent Cloud Schema Registry Cluster APIs](https://docs.confluent.io/cloud/current/stream-governance/clusters-regions-api.html#schema-registry-cluster-management).
      * [srcm/v3 Migration Guide](https://docs.confluent.io/cloud/current/stream-governance/packages.html#deprecation-of-srcm-v2-clusters-and-regions-apis-and-upgrade-guide).


      ## The Clusters Model
      <SchemaDefinition schemaRef="#/components/schemas/srcm.v2.Cluster" />
  - name: Clusters (srcm/v3)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Clusters` objects represent Schema Registry Clusters on Confluent Cloud.

      The API allows you to list and read your Schema Registry clusters.


      Related guide: [Confluent Cloud Schema Registry Cluster APIs](https://docs.confluent.io/cloud/current/stream-governance/clusters-regions-api.html#schema-registry-cluster-management).

      ## The Clusters Model
      <SchemaDefinition schemaRef="#/components/schemas/srcm.v3.Cluster" />
  - name: Compatibility (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to test schema compatibility.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Config (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to manage and query schema compatibility settings and cluster configurations.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Contexts (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to retrieve information about schema contexts.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Exporters (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete exporters.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Modes (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete schema subjects modes of operation.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Schemas (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete schemas.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Subjects (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete schema subjects and versions.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Key Encryption Keys (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete key encryption keys.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Data Encryption Keys (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete data encryption keys.

      Related guide: [Manage Schemas in Confluent Cloud](https://docs.confluent.io/cloud/current/sr/schemas-manage.html#manage-schemas-in-ccloud).
  - name: Entity (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete catalog entities.

      Related guide: [Catalog API Documentation](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#catalog-api-documentation).
  - name: Search (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to search for entities.

      Related guide: [Catalog API Documentation](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#catalog-api-documentation).
  - name: Types (v1)
    description: |-
      [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      The API allows you to create, retrieve, update, and delete catalog types such as tag definitions.

      Related guide: [Catalog API Documentation](https://docs.confluent.io/cloud/current/stream-governance/stream-catalog.html#catalog-api-documentation).
  - name: Provider Shared Resources (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ProviderSharedResource` object contains details of the data stream
      (topic, schema registry subjects, sharing metadata) that you have shared through Stream Sharing.


      ## The Provider Shared Resources Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.ProviderSharedResource" />
  - name: Provider Shares (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ProviderShare` object respresents the share that you have created through Stream Sharing.


      Related guide: [Provider Stream Shares in Confluent Cloud](https://docs.confluent.io/cloud/current/stream-sharing/produce-shared-data.html#stream-shares).

      ## The Provider Shares Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.ProviderShare" />
  - name: Consumer Shared Resources (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ConsumerSharedResource` object contains details of the data stream
      (topic, schema registry subjects, sharing metadata) that you received through Stream Sharing.


      ## The Consumer Shared Resources Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.ConsumerSharedResource" />
  - name: Consumer Shares (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ConsumerShare` object respresents the share that you received through Stream Sharing.


      Related guide: [Consumer Stream Shares in Confluent Cloud](https://docs.confluent.io/cloud/current/stream-sharing/consume-shared-data.html).

      ## The Consumer Shares Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.ConsumerShare" />
  - name: Shared Tokens (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Encrypted Token shared with consumer


      ## The Shared Tokens Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.SharedToken" />
  - name: Opt Ins (cdx/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Stream sharing opt in options

      ## The Opt Ins Model
      <SchemaDefinition schemaRef="#/components/schemas/cdx.v1.OptIn" />
  - name: Organizations (partner/v2)
    description: |
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `Organizations` objects represent an entire Confluent Cloud organization.
      Partners are allowed to get an organization they have signed up or
      list all organizations they have signed up.
  - name: Signup (partner/v2)
    description: |
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Partner v2](https://img.shields.io/badge/-Request%20Access%20To%20Partner%20v2-%23bc8540)](mailto:ccloud-api-access+partner-v2-early-access@confluent.io?subject=Request%20to%20join%20partner/v2%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20partner/v2%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `Signup` APIs can only be performed by partners.
  - name: Networks (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Network` represents a network (VPC) in Confluent Cloud. All Networks exist within Confluent-managed cloud
      provider accounts. Dedicated networks support more networking options but can only contain Dedicated clusters.
      Shared networks can contain any cluster type.

      The API allows you to list, create, read, update, and delete your networks.


      Related guide: [APIs to manage networks in Confluent Cloud](https://docs.confluent.io/cloud/current/networking/overview.html).

      ## The Networks Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Network" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `dedicated_networks_per_environment` | Number of dedicated networks per Confluent Cloud environment |
  - name: Peerings (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Add or remove VPC/VNet peering connections between your VPC/VNet and Confluent Cloud.

      Related guides:
      * [Use VPC peering connections with Confluent Cloud on AWS](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html).
      * [Use VNet peering connections with Confluent Cloud on Azure](https://docs.confluent.io/cloud/current/networking/peering/azure-peering.html).
      * [Use VPC peering connections with Confluent Cloud on Google Cloud](https://docs.confluent.io/cloud/current/networking/peering/gcp-peering.html).


      ## The Peerings Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Peering" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `peerings_per_network` | Number of peerings per network |
  - name: Transit Gateway Attachments (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      AWS Transit Gateway Attachments

      Related guide: [APIs to manage AWS Transit Gateway Attachments](https://docs.confluent.io/cloud/current/networking/aws-transit-gateway.html).

      ## The Transit Gateway Attachments Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.TransitGatewayAttachment" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `tgw_attachments_per_network` | Number of TGW attachments per network |
  - name: Private Link Accesses (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Add or remove access to PrivateLink endpoints by AWS account, Azure subscription and GCP project ID.

      Related guides:
      * [Use Google Cloud Private Service Connect with Confluent Cloud](https://docs.confluent.io/cloud/current/networking/private-links/gcp-private-service-connect.html).
      * [Use Azure Private Link with Confluent Cloud](https://docs.confluent.io/cloud/current/networking/private-links/azure-privatelink.html).
      * [Use AWS PrivateLink with Confluent Cloud](https://docs.confluent.io/cloud/current/networking/private-links/aws-privatelink.html).


      ## The Private Link Accesses Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.PrivateLinkAccess" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `private_link_accounts_per_network` | Number of AWS accounts per network |
      | `private_link_subscriptions_per_network` | Number of Azure subscriptions per network |
      | `private_service_connect_projects_per_network` | Number of GCP projects per network |
  - name: Network Link Services (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Network Link Service is associated with a Private Link Confluent Cloud Network.
      It enables connectivity from other Private Link Confluent Cloud Networks based on
      the configured accept policies.


      Related guide: [Network Linking Overview](https://docs.confluent.io/cloud/current/networking/network-linking.html).

      ## The Network Link Services Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkService" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `network_link_service_per_network` | Number of network link services per network |
  - name: Network Link Endpoints (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A Network Link Enpoint is associated with a Private Link Confluent Cloud Network at the origin and a
      Network Link Service (associated with another Private Link Confluent Cloud Network) at the target.
      It enables connectivity between the origin network and the target network.
      It can only be associated with a Private Link network.


      Related guide: [Network Linking Overview](https://docs.confluent.io/cloud/current/networking/network-linking.html).

      ## The Network Link Endpoints Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkEndpoint" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `network_link_endpoints_per_network` | Number of network link endpoints per network |
  - name: Network Link Service Associations (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      List of incoming Network Link Enpoints associated with the Network Link Service.


      Related guide: [Network Linking Overview](https://docs.confluent.io/cloud/current/networking/network-linking.html).

      ## The Network Link Service Associations Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.NetworkLinkServiceAssociation" />
  - name: Gateways (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A gateway is a resource that defines network access to Confluent cloud resources.


      ## The Gateways Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.Gateway" />
  - name: IP Addresses (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      IP Addresses

      Related guide: [Use Public Egress IP addresses on Confluent Cloud](https://docs.confluent.io/cloud/current/networking/static-egress-ip-addresses.html)

      ## The IP Addresses Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.IpAddress" />
  - name: Private Link Attachments (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      PrivateLink attachment objects represent reservations to establish PrivateLink connections
      to a cloud region in order to access resources that belong to a Confluent Cloud Environment.
      The API allows you to list, create, read update and delete your PrivateLink attachments.


      ## The Private Link Attachments Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.PrivateLinkAttachment" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `private_link_attachments_per_environment` | Number of PrivateLink Attachments per environment |
  - name: Private Link Attachment Connections (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      PrivateLink attachment connection objects represent connections established to a cloud region
      in order to access resources that belong to a Confluent Cloud Environment.
      The API allows you to list, create, read update and delete your PrivateLink attachment connections.


      ## The Private Link Attachment Connections Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.PrivateLinkAttachmentConnection" />
  - name: Identity Providers (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `IdentityProvider` objects represent external OAuth-OIDC providers in Confluent Cloud.

      The API allows you to list, create, read, update, and delete your Identity Provider.


      Related guide: [OAuth for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).

      ## The Identity Providers Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IdentityProvider" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `identity_providers_per_org` | Number of OAuth identity providers per organization |
      | `public_keys_per_provider` | Number of public keys saved per identity provider |
  - name: Jwks (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `JWKS` objects represent public key sets for a specific OAuth/OpenID Connect provider within
      Confluent Cloud.

      The API allows you to refresh JWKS public key data.


      Related guide: [OAuth for Confluent Cloud](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/overview.html).

      ## The Jwks Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.Jwks" />
  - name: Identity Pools (iam/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `IdentityPool` objects represent groups of identities tied to a given a `IdentityProvider`
      that authorizes them to Confluent Cloud resources.

      It provides a mapping functionality of your `Identity Provider` user to a Confluent identity pool that
      is then used to provide access to Confluent Resources.


      Related guide: [Use identity pools with your OAuth provider](https://docs.confluent.io/cloud/current/access-management/authenticate/oauth/identity-pools.html).

      ## The Identity Pools Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.IdentityPool" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `identity_pools_per_provider` | Number of Identity Pools per Identity Provider |
  - name: OAuth Tokens (sts/v1)
    description: |
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      OAuth Token is a [JSON Web Token (JWT)](https://www.rfc-editor.org/rfc/rfc7519) that enables the use of
      external identities to access Confluent Cloud APIs
  - name: Client Quotas (kafka-quotas/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `ClientQuota` objects represent Client Quotas you can set at the service account level.

      The API allows you to list, create, read, update, and delete your client quotas.


      Related guide: [Client Quotas in Confluent Cloud](https://docs.confluent.io/cloud/current/clusters/client-quotas.html).

      ## The Client Quotas Model
      <SchemaDefinition schemaRef="#/components/schemas/kafka-quotas.v1.ClientQuota" />
  - name: Pipelines (sd/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Pipeline` objects represent information about a user-defined pipeline of Confluent Cloud components.
      The pipeline's content is available separately.

      The API allows you to create, retrieve, update, and delete your pipelines,
      as well as list all of your pipelines for the particular environment and Kafka cluster.


      Related guide: [Pipelines in Confluent Cloud](https://docs.confluent.io/cloud/current/stream-designer/).

      ## The Pipelines Model
      <SchemaDefinition schemaRef="#/components/schemas/sd.v1.Pipeline" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `pipelines_per_org` | Pipelines in one Confluent Cloud organization |
      | `pipelines_per_cluster` | Pipelines in one Confluent Cloud Kafka cluster |
  - name: Keys (byok/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Key` objects represent customer managed keys on dedicated Confluent Cloud clusters.

      Keys are used to protect data at rest stored in your dedicated Confluent Cloud clusters on AWS, Azure, and GCP.
      This API allows you to upload and retrieve self-managed keys on Confluent Cloud.


      Related guide: [Confluent Cloud Bring Your Own Key (BYOK) Management API](https://docs.confluent.io/cloud/current/clusters/byok/index.html).

      ## The Keys Model
      <SchemaDefinition schemaRef="#/components/schemas/byok.v1.Key" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `byok.max_keys.per_org` | BYOK keys in one Confluent Cloud organisation. |
  - name: Costs (billing/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Cost` objects represent the aggregated billing costs for an organization


      Related guide: [Retrieve costs for a range of dates](https://docs.confluent.io/cloud/current/billing/overview.html#retrieve-costs-for-a-range-of-dates).

      ## The Costs Model
      <SchemaDefinition schemaRef="#/components/schemas/billing.v1.Cost" />
  - name: Group Mappings (iam/v2/sso)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `GroupMapping` objects establish relationships between user groups in your SSO
      identity provider and specific RBAC roles in Confluent Cloud.

      Group mappings enable automated and secure access control to Confluent Cloud resources,
      reducing administrative workload by streamlining user provisioning and authorization.


      Related guide: [Use group mappings with your SSO identity provider](https://docs.confluent.io/cloud/current/access-management/authenticate/sso/group-mapping/overview.html).

      ## The Group Mappings Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.sso.GroupMapping" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `group_mappings_per_org` | Number of group mappings per organization |
  - name: Compute Pools (fcpm/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      A Compute Pool represents a set of compute resources that is used to run your Queries.
      The resources (CPUs, memory,…) provided by a Compute Pool are shared between all Queries that use it.


      ## The Compute Pools Model
      <SchemaDefinition schemaRef="#/components/schemas/fcpm.v2.ComputePool" />
  - name: Regions (fcpm/v2)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Region` objects represent cloud provider regions available when placing Flink compute pools.
      The API allows you to list Flink regions.


      ## The Regions Model
      <SchemaDefinition schemaRef="#/components/schemas/fcpm.v2.Region" />
  - name: Statements (sql/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Statement` represents a core resource used to model SQL statements for execution.
      A statement generalizes DDL, DML, DQL, etc., but doesn’t attempt to handle session
      management or any higher-level functionality.
      The API allows you to list, create, read, and delete your statements.
      ## The Statements Model
      <SchemaDefinition schemaRef="#/components/schemas/sql.v1.Statement" />
  - name: Statement Results (sql/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `StatementResult` represents a result of a `Statement` resource.
      The API allows you to read your statement's results.
      ## The Statement Results Model
      <SchemaDefinition schemaRef="#/components/schemas/sql.v1.StatementResult" />
  - name: Statement Exceptions (sql/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `StatementException` represents an exception of a `Statement` resource.
      The API allows you to read your statement's exceptions.
      ## The Statement Exceptions Model
      <SchemaDefinition schemaRef="#/components/schemas/sql.v1.StatementException" />
  - name: Connections (sql/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Connection` represents a core resource used to model SQL connections for execution.
      A connection generalizes DDL, DML, DQL, etc., but doesn’t attempt to handle session
      management or any higher-level functionality.
      The API allows you to list, create, read, and delete your connections.
      ## The Connections Model
      <SchemaDefinition schemaRef="#/components/schemas/sql.v1.Connection" />
  - name: DNS Forwarders (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      Add, remove, and update DNS forwarder for your gateway.

      Related guides:
      * [Use VPC peering connections with Confluent Cloud on AWS](https://docs.confluent.io/cloud/current/networking/peering/aws-peering.html).
      * [Use VNet peering connections with Confluent Cloud on Azure](https://docs.confluent.io/cloud/current/networking/peering/azure-peering.html).


      ## The DNS Forwarders Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.DnsForwarder" />
  - name: Access Points (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      AccessPoint objects represent network connections in and out of Gateways.
      This API allows you to list, create, read, update, and delete your access points.


      ## The Access Points Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.AccessPoint" />
  - name: DNS Records (networking/v1)
    description: |-
      [![General Availability](https://img.shields.io/badge/Lifecycle%20Stage-General%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      DNS record objects are associated with Confluent Cloud networking resources. This API allows you to list, create, read, update, and delete your DNS records.

      ## The DNS Records Model
      <SchemaDefinition schemaRef="#/components/schemas/networking.v1.DnsRecord" />
  - name: Certificate Authorities (iam/v2)
    description: |-
      [![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `CertificateAuthority` objects represent signing certificate authorities in Confluent Cloud.

      The API allows you to list, create, read, update, and delete your Certificate Authority.


      Related guide: [Manage certificate authorities used for client authentication with X.509 certificates.](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/overview.html).

      ## The Certificate Authorities Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.CertificateAuthority" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `certificate_authorities_per_org` | Number of certificate authorities per organization |
  - name: Certificate Identity Pools (iam/v2)
    description: |-
      [![Limited Availability](https://img.shields.io/badge/Lifecycle%20Stage-Limited%20Availability-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

      `Identitypool` objects represent workload identities in Confluent Cloud.

      The API allows you to list, create, read, update, and delete your identity pools associated
      with Certificate Authorities


      Related guide: [Manage Certificate Identity Pools for Granular Client Access Management](https://docs.confluent.io/cloud/current/access-management/authenticate/mtls/configure.html#step-2-create-certificate-identity-pools-for-granular-access-control).

      ## The Certificate Identity Pools Model
      <SchemaDefinition schemaRef="#/components/schemas/iam.v2.CertificateIdentityPool" />

      ## Quotas and Limits
      This resource is subject to the [following quotas](https://docs.confluent.io/cloud/current/quotas/overview.html):

      | Quota | Description |
      | --- | --- |
      | `identity_pools_per_certificate_authority` | Number of Identity Pools per Certificate Authority |
  - name: Integrations (pim/v1)
    description: |-
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Provider Integration](https://img.shields.io/badge/-Request%20Access%20To%20Provider%20Integration-%23bc8540)](mailto:ccloud-api-access+pim-v1-early-access@confluent.io?subject=Request%20to%20join%20pim/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20pim/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      `Provider Integration` objects represent access to public cloud service provider (CSP) resources
      that may be accessed by Confluent resources (for example, connectors).

      The API allows you to create, retrieve, and delete individual integrations, and also obtain a
      list of all your provider integrations.


      Related guide: [Provider Integration in Confluent Cloud](https://docs.confluent.io/home/overview.html).

      ## The Integrations Model
      <SchemaDefinition schemaRef="#/components/schemas/pim.v1.Integration" />
  - name: Flink Artifacts (artifact/v1)
    description: |-
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Flink Artifact API EA](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Artifact%20API%20EA-%23bc8540)](mailto:ccloud-api-access+artifact-v1-early-access@confluent.io?subject=Request%20to%20join%20artifact/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20artifact/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      FlinkArtifact objects represent Flink Artifacts on Confluent Cloud.


      ## The Flink Artifacts Model
      <SchemaDefinition schemaRef="#/components/schemas/artifact.v1.FlinkArtifact" />
  - name: Presigned Urls (artifact/v1)
    description: |-
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Flink Artifact API EA](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Artifact%20API%20EA-%23bc8540)](mailto:ccloud-api-access+artifact-v1-early-access@confluent.io?subject=Request%20to%20join%20artifact/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20artifact/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      Request a presigned upload URL for new Flink Artifact. Note that
      the URL policy expires in one hour. If the policy expires, you can request
      a new presigned upload URL.


      ## The Presigned Urls Model
      <SchemaDefinition schemaRef="#/components/schemas/artifact.v1.PresignedUrl" />
  - name: Flink Artifact Versions (artifact/v1)
    description: |-
      [![Early Access](https://img.shields.io/badge/Lifecycle%20Stage-Early%20Access-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Request Access To Flink Artifact API EA](https://img.shields.io/badge/-Request%20Access%20To%20Flink%20Artifact%20API%20EA-%23bc8540)](mailto:ccloud-api-access+artifact-v1-early-access@confluent.io?subject=Request%20to%20join%20artifact/v1%20API%20Early%20Access&body=I%E2%80%99d%20like%20to%20join%20the%20Confluent%20Cloud%20API%20Early%20Access%20for%20artifact/v1%20to%20provide%20early%20feedback%21%20My%20Cloud%20Organization%20ID%20is%20%3Cretrieve%20from%20https%3A//confluent.cloud/settings/billing/payment%3E.)

      FlinkArtifactVersion objects represent Flink Artifact Versions on Confluent Cloud.


      ## The Flink Artifact Versions Model
      <SchemaDefinition schemaRef="#/components/schemas/artifact.v1.FlinkArtifactVersion" />
components:
  schemas:
    AclOperation:
      type: string
      x-extensible-enum:
        - UNKNOWN
        - ANY
        - ALL
        - READ
        - WRITE
        - CREATE
        - DELETE
        - ALTER
        - DESCRIBE
        - CLUSTER_ACTION
        - DESCRIBE_CONFIGS
        - ALTER_CONFIGS
        - IDEMPOTENT_WRITE
    AclPatternType:
      type: string
      x-extensible-enum:
        - UNKNOWN
        - ANY
        - MATCH
        - LITERAL
        - PREFIXED
    AclPermission:
      type: string
      x-extensible-enum:
        - UNKNOWN
        - ANY
        - DENY
        - ALLOW
    AclResourceType:
      type: string
      enum:
        - UNKNOWN
        - ANY
        - TOPIC
        - GROUP
        - CLUSTER
        - TRANSACTIONAL_ID
        - DELEGATION_TOKEN
    BrokerTaskType:
      type: string
      enum:
        - add-broker
        - remove-broker
    MirrorTopicStatus:
      enum:
        - ACTIVE
        - FAILED
        - LINK_FAILED
        - LINK_PAUSED
        - PAUSED
        - PENDING_STOPPED
        - SOURCE_UNAVAILABLE
        - STOPPED
        - PENDING_MIRROR
        - PENDING_SYNCHRONIZE
        - PENDING_SETUP_FOR_RESTORE
        - PENDING_RESTORE
      type: string
    ClusterData:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          required:
            - cluster_id
            - acls
            - brokers
            - broker_configs
            - consumer_groups
            - topics
            - partition_reassignments
          properties:
            cluster_id:
              type: string
            controller:
              $ref: '#/components/schemas/Relationship'
            acls:
              $ref: '#/components/schemas/Relationship'
            brokers:
              $ref: '#/components/schemas/Relationship'
            broker_configs:
              $ref: '#/components/schemas/Relationship'
            consumer_groups:
              $ref: '#/components/schemas/Relationship'
            topics:
              $ref: '#/components/schemas/Relationship'
            partition_reassignments:
              $ref: '#/components/schemas/Relationship'
    Error:
      type: object
      description: Describes a particular error encountered while performing an operation.
      properties:
        id:
          description: A unique identifier for this particular occurrence of the problem.
          type: string
          maxLength: 255
        status:
          description: 'The HTTP status code applicable to this problem, expressed as a string value.'
          type: string
        code:
          description: 'An application-specific error code, expressed as a string value.'
          type: string
        title:
          description: 'A short, human-readable summary of the problem. It **SHOULD NOT** change from occurrence to occurrence of the problem, except for purposes of localization.'
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
        source:
          type: object
          description: 'If this error was caused by a particular part of the API request, the source will point to the query string parameter or request body property that caused it.'
          properties:
            pointer:
              description: 'A JSON Pointer [RFC6901] to the associated entity in the request document [e.g. "/spec" for a spec object, or "/spec/title" for a specific field].'
              type: string
            parameter:
              description: A string indicating which query parameter caused the error.
              type: string
        error_code:
          type: integer
          format: int32
        message:
          type: string
          nullable: true
      additionalProperties: false
    AlterConfigBatchRequestData:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              value:
                type: string
                nullable: true
              operation:
                type: string
                x-extensible-enum:
                  - SET
                  - DELETE
                nullable: true
        validate_only:
          type: boolean
    CreateAclRequestData:
      type: object
      required:
        - resource_type
        - resource_name
        - pattern_type
        - principal
        - host
        - operation
        - permission
      properties:
        resource_type:
          $ref: '#/components/schemas/AclResourceType'
        resource_name:
          type: string
        pattern_type:
          $ref: '#/components/schemas/AclPatternType'
        principal:
          type: string
        host:
          type: string
        operation:
          $ref: '#/components/schemas/AclOperation'
        permission:
          $ref: '#/components/schemas/AclPermission'
    CreateAclRequestDataList:
      allOf:
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/CreateAclRequestData'
    CreateTopicRequestData:
      type: object
      required:
        - topic_name
      properties:
        topic_name:
          type: string
        partitions_count:
          type: integer
        replication_factor:
          type: integer
        configs:
          type: array
          items:
            type: object
            required:
              - name
            properties:
              name:
                type: string
              value:
                type: string
                nullable: true
        validate_only:
          type: boolean
    ProduceRequest:
      type: object
      properties:
        partition_id:
          type: integer
          nullable: true
          format: int32
        headers:
          type: array
          items:
            $ref: '#/components/schemas/ProduceRequestHeader'
        key:
          $ref: '#/components/schemas/ProduceRequestData'
        value:
          $ref: '#/components/schemas/ProduceRequestData'
        timestamp:
          type: string
          format: date-time
          nullable: true
    UpdateConfigRequestData:
      type: object
      properties:
        value:
          type: string
          nullable: true
    CreateLinkRequestData:
      properties:
        source_cluster_id:
          type: string
        destination_cluster_id:
          type: string
        remote_cluster_id:
          description: The expected remote cluster ID.
          type: string
        cluster_link_id:
          description: 'The expected cluster link ID. Can be provided when creating the second side of a bidirectional link for validating the link ID is as expected. If it''s not provided, it''s inferred from the remote cluster.'
          type: string
        configs:
          items:
            $ref: '#/components/schemas/ConfigData'
          type: array
      type: object
    UpdateLinkConfigRequestData:
      properties:
        value:
          type: string
      required:
        - value
      type: object
    CreateMirrorTopicRequestData:
      properties:
        source_topic_name:
          type: string
        mirror_topic_name:
          type: string
        replication_factor:
          type: integer
        configs:
          type: array
          items:
            $ref: '#/components/schemas/ConfigData'
      required:
        - source_topic_name
      type: object
    AlterMirrorsRequestData:
      properties:
        mirror_topic_names:
          description: The mirror topics specified as a list of topic names.
          type: array
          items:
            type: string
        mirror_topic_name_pattern:
          description: The mirror topics specified as a pattern.
          type: string
      type: object
    RemoveBrokersRequestData:
      properties:
        broker_ids:
          type: array
          items:
            type: integer
      required:
        - broker_ids
      type: object
    BrokerReplicaExclusionBatchRequestData:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BrokerReplicaExclusionRequestData'
    Resource:
      type: object
      required:
        - kind
        - metadata
      properties:
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/ResourceMetadata'
    Relationship:
      type: object
      required:
        - related
      properties:
        related:
          type: string
    ProduceRequestHeader:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        value:
          type: string
          format: byte
          nullable: true
    ProduceRequestData:
      type: object
      properties:
        type:
          type: string
          x-extensible-enum:
            - BINARY
            - JSON
            - STRING
        data:
          $ref: '#/components/schemas/AnyValue'
      nullable: true
    ConfigData:
      example:
        name: name
        value: value
      properties:
        name:
          type: string
        value:
          nullable: true
          type: string
      required:
        - name
        - value
    BrokerReplicaExclusionRequestData:
      type: object
      required:
        - broker_id
        - reason
      properties:
        broker_id:
          type: integer
        reason:
          type: string
    ResourceMetadata:
      type: object
      required:
        - self
      properties:
        self:
          type: string
        resource_name:
          type: string
          nullable: true
    AnyValue:
      nullable: true
    AclDataList:
      allOf:
        - $ref: '#/components/schemas/ResourceCollection'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/AclData'
    ResourceCollection:
      type: object
      required:
        - kind
        - metadata
      properties:
        kind:
          type: string
        metadata:
          $ref: '#/components/schemas/ResourceCollectionMetadata'
    AclData:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          required:
            - cluster_id
            - resource_type
            - resource_name
            - pattern_type
            - principal
            - host
            - operation
            - permission
          properties:
            cluster_id:
              type: string
            resource_type:
              $ref: '#/components/schemas/AclResourceType'
            resource_name:
              type: string
            pattern_type:
              $ref: '#/components/schemas/AclPatternType'
            principal:
              type: string
            host:
              type: string
            operation:
              $ref: '#/components/schemas/AclOperation'
            permission:
              $ref: '#/components/schemas/AclPermission'
    ResourceCollectionMetadata:
      type: object
      required:
        - self
      properties:
        self:
          type: string
        next:
          type: string
          nullable: true
    ClusterConfigDataList:
      allOf:
        - $ref: '#/components/schemas/ResourceCollection'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ClusterConfigData'
    ClusterConfigData:
      allOf:
        - $ref: '#/components/schemas/AbstractConfigData'
        - type: object
          required:
            - config_type
          properties:
            config_type:
              $ref: '#/components/schemas/ClusterConfigType'
    AbstractConfigData:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          required:
            - cluster_id
            - name
            - is_default
            - is_read_only
            - is_sensitive
            - source
            - synonyms
          properties:
            cluster_id:
              type: string
            name:
              type: string
            value:
              type: string
              nullable: true
            is_default:
              type: boolean
            is_read_only:
              type: boolean
            is_sensitive:
              type: boolean
            source:
              $ref: '#/components/schemas/ConfigSource'
            synonyms:
              type: array
              items:
                $ref: '#/components/schemas/ConfigSynonymData'
    ClusterConfigType:
      type: string
      x-extensible-enum:
        - BROKER
    ConfigSource:
      type: string
      x-extensible-enum:
        - DYNAMIC_CLUSTER_LINK_CONFIG
        - DYNAMIC_TOPIC_CONFIG
        - DYNAMIC_BROKER_LOGGER_CONFIG
        - DYNAMIC_BROKER_CONFIG
        - DYNAMIC_DEFAULT_BROKER_CONFIG
        - STATIC_BROKER_CONFIG
        - DEFAULT_CONFIG
        - UNKNOWN
    ConfigSynonymData:
      type: object
      required:
        - name
        - source
      properties:
        name:
          type: string
        value:
          type: string
          nullable: true
        source:
          $ref: '#/components/schemas/ConfigSource'
    ConsumerGroupDataList:
      allOf:
        - $ref: '#/components/schemas/ResourceCollection'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ConsumerGroupData'
    ConsumerGroupData:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          required:
            - cluster_id
            - consumer_group_id
            - is_simple
            - partition_assignor
            - state
            - coordinator
            - consumers
            - lag_summary
          properties:
            cluster_id:
              type: string
            consumer_group_id:
              type: string
            is_simple:
              type: boolean
            partition_assignor:
              type: string
            state:
              $ref: '#/components/schemas/ConsumerGroupState'
            coordinator:
              $ref: '#/components/schemas/Relationship'
            consumer:
              $ref: '#/components/schemas/Relationship'
            lag_summary:
              $ref: '#/components/schemas/Relationship'
    ConsumerGroupState:
      type: string
      x-extensible-enum:
        - UNKNOWN
        - PREPARING_REBALANCE
        - COMPLETING_REBALANCE
        - STABLE
        - DEAD
        - EMPTY
    ConsumerDataList:
      allOf:
        - $ref: '#/components/schemas/ResourceCollection'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ConsumerData'
    ConsumerData:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          required:
            - cluster_id
            - consumer_group_id
            - consumer_id
            - client_id
            - assignments
          properties:
            cluster_id:
              type: string
            consumer_group_id:
              type: string
            consumer_id:
              type: string
            instance_id:
              type: string
              nullable: true
            client_id:
              type: string
            assignments:
              $ref: '#/components/schemas/Relationship'
    ConsumerGroupLagSummaryData:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          required:
            - cluster_id
            - consumer_group_id
            - max_lag_consumer_id
            - max_lag_client_id
            - max_lag_topic_name
            - max_lag_partition_id
            - max_lag
            - total_lag
            - max_lag_consumer
            - max_lag_partition
          properties:
            cluster_id:
              type: string
            consumer_group_id:
              type: string
            max_lag_consumer_id:
              type: string
            max_lag_instance_id:
              type: string
              nullable: true
            max_lag_client_id:
              type: string
            max_lag_topic_name:
              type: string
            max_lag_partition_id:
              type: integer
            max_lag:
              type: integer
              format: int64
            total_lag:
              type: integer
              format: int64
            max_lag_consumer:
              $ref: '#/components/schemas/Relationship'
            max_lag_partition:
              $ref: '#/components/schemas/Relationship'
    ConsumerLagDataList:
      allOf:
        - $ref: '#/components/schemas/ResourceCollection'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ConsumerLagData'
    ConsumerLagData:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          required:
            - cluster_id
            - consumer_group_id
            - topic_name
            - partition_id
            - current_offset
            - log_end_offset
            - lag
            - consumer_id
            - client_id
          properties:
            cluster_id:
              type: string
            consumer_group_id:
              type: string
            topic_name:
              type: string
            partition_id:
              type: integer
            current_offset:
              type: integer
              format: int64
            log_end_offset:
              type: integer
              format: int64
            lag:
              type: integer
              format: int64
            consumer_id:
              type: string
            instance_id:
              type: string
              nullable: true
            client_id:
              type: string
    TopicDataList:
      allOf:
        - $ref: '#/components/schemas/ResourceCollection'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/TopicData'
    TopicData:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          required:
            - cluster_id
            - topic_name
            - is_internal
            - replication_factor
            - partitions_count
            - partitions
            - configs
            - partition_reassignments
          properties:
            cluster_id:
              type: string
            topic_name:
              type: string
            is_internal:
              type: boolean
            replication_factor:
              type: integer
            partitions_count:
              type: integer
            partitions:
              $ref: '#/components/schemas/Relationship'
            configs:
              $ref: '#/components/schemas/Relationship'
            partition_reassignments:
              $ref: '#/components/schemas/Relationship'
            authorized_operations:
              $ref: '#/components/schemas/AuthorizedOperations'
    AuthorizedOperations:
      type: array
      items:
        type: string
        x-extensible-enum:
          - UNKNOWN
          - ALL
          - READ
          - WRITE
          - CREATE
          - DELETE
          - ALTER
          - DESCRIBE
          - CLUSTER_ACTION
          - DESCRIBE_CONFIGS
          - ALTER_CONFIGS
          - IDEMPOTENT_WRITE
    UpdatePartitionCountRequestData:
      type: object
      required:
        - partitions_count
      properties:
        partitions_count:
          type: integer
          format: int32
    TopicConfigDataList:
      allOf:
        - $ref: '#/components/schemas/ResourceCollection'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/TopicConfigData'
    TopicConfigData:
      allOf:
        - $ref: '#/components/schemas/AbstractConfigData'
        - type: object
          required:
            - topic_name
          properties:
            topic_name:
              type: string
    PartitionDataList:
      allOf:
        - $ref: '#/components/schemas/ResourceCollection'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/PartitionData'
    PartitionData:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          required:
            - cluster_id
            - topic_name
            - partition_id
            - replicas
            - reassignment
          properties:
            cluster_id:
              type: string
            topic_name:
              type: string
            partition_id:
              type: integer
            leader:
              $ref: '#/components/schemas/Relationship'
            replicas:
              $ref: '#/components/schemas/Relationship'
            reassignment:
              $ref: '#/components/schemas/Relationship'
    ProduceResponse:
      type: object
      required:
        - error_code
      properties:
        error_code:
          type: integer
          format: int32
        message:
          type: string
        cluster_id:
          type: string
        topic_name:
          type: string
        partition_id:
          type: integer
          format: int32
        offset:
          type: integer
          format: int64
        timestamp:
          type: string
          format: date-time
          nullable: true
        key:
          $ref: '#/components/schemas/ProduceResponseData'
        value:
          $ref: '#/components/schemas/ProduceResponseData'
    ProduceResponseData:
      type: object
      required:
        - size
        - type
      properties:
        size:
          type: integer
        type:
          type: string
          x-extensible-enum:
            - BINARY
            - JSON
            - STRING
      nullable: true
    ListLinksResponseDataList:
      allOf:
        - $ref: '#/components/schemas/ResourceCollection'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ListLinksResponseData'
    ListLinksResponseData:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          required:
            - link_name
            - cluster_link_id
            - topic_names
          properties:
            source_cluster_id:
              type: string
              nullable: true
            destination_cluster_id:
              type: string
              nullable: true
            remote_cluster_id:
              type: string
              nullable: true
            link_name:
              type: string
            link_id:
              type: string
              deprecated: true
            cluster_link_id:
              type: string
            topic_names:
              type: array
              items:
                type: string
            link_error:
              $ref: '#/components/schemas/LinkError'
              nullable: true
            link_error_message:
              type: string
              nullable: true
            link_state:
              $ref: '#/components/schemas/LinkState'
              nullable: true
            tasks:
              nullable: true
              type: array
              items:
                $ref: '#/components/schemas/LinkTask'
    LinkError:
      type: string
      x-extensible-enum:
        - UNKNOWN
        - NO_ERROR
        - AUTHENTICATION_ERROR
        - UNRESOLVABLE_BOOTSTRAP_ERROR
        - INVALID_BOOTSTRAP_INTERNAL_ENDPOINT_ERROR
        - BOOTSTRAP_TCP_CONNECTION_FAILED_ERROR
        - TIMEOUT_ERROR
    LinkState:
      type: string
      x-extensible-enum:
        - ACTIVE
        - FAILED
        - UNAVAILABLE
        - PAUSED
        - UNKNOWN
    LinkTask:
      type: object
      required:
        - task_name
        - state
        - errors
      properties:
        task_name:
          type: string
        state:
          $ref: '#/components/schemas/LinkTaskState'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/LinkTaskError'
    LinkTaskState:
      type: string
      x-extensible-enum:
        - UNKNOWN
        - ACTIVE
        - IN_ERROR
        - NOT_CONFIGURED
        - LINK_FAILED
        - LINK_UNAVAILABLE
        - LINK_PAUSED
    LinkTaskError:
      type: object
      required:
        - error_code
        - error_message
      properties:
        error_code:
          type: string
        error_message:
          type: string
    ListLinkConfigsResponseDataList:
      allOf:
        - $ref: '#/components/schemas/ResourceCollection'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ListLinkConfigsResponseData'
    ListLinkConfigsResponseData:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          required:
            - cluster_id
            - name
            - value
            - default
            - read_only
            - sensitive
            - source
            - synonyms
            - link_name
          properties:
            cluster_id:
              type: string
            name:
              type: string
            value:
              type: string
            read_only:
              type: boolean
            sensitive:
              type: boolean
            source:
              type: string
              x-extensible-enum:
                - DYNAMIC_CLUSTER_LINK_CONFIG
            synonyms:
              type: array
              items:
                type: string
            link_name:
              type: string
    ListMirrorTopicsResponseDataList:
      allOf:
        - $ref: '#/components/schemas/ResourceCollection'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/ListMirrorTopicsResponseData'
    ListMirrorTopicsResponseData:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          required:
            - link_name
            - mirror_topic_name
            - source_topic_name
            - num_partitions
            - mirror_lags
            - mirror_status
            - state_time_ms
          properties:
            link_name:
              type: string
            mirror_topic_name:
              type: string
            source_topic_name:
              type: string
            num_partitions:
              type: integer
            mirror_lags:
              $ref: '#/components/schemas/MirrorLags'
            mirror_status:
              $ref: '#/components/schemas/MirrorTopicStatus'
            state_time_ms:
              type: integer
              format: int64
            mirror_state_transition_errors:
              type: array
              items:
                $ref: '#/components/schemas/LinkTaskError'
    MirrorLags:
      type: array
      items:
        $ref: '#/components/schemas/MirrorLag'
    MirrorLag:
      type: object
      required:
        - partition
        - lag
        - last_source_fetch_offset
      properties:
        partition:
          type: integer
        lag:
          type: integer
          format: int64
        last_source_fetch_offset:
          type: integer
          format: int64
    AlterMirrorStatusResponseDataList:
      allOf:
        - $ref: '#/components/schemas/ResourceCollection'
        - type: object
          required:
            - data
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/AlterMirrorStatusResponseData'
    AlterMirrorStatusResponseData:
      allOf:
        - $ref: '#/components/schemas/Resource'
        - type: object
          required:
            - mirror_topic_name
            - error_message
            - error_code
            - mirror_lags
            - messages_truncated
            - partition_level_truncation_data
          properties:
            mirror_topic_name:
              type: string
            error_message:
              type: string
              nullable: true
            error_code:
              type: integer
              nullable: true
            mirror_lags:
              $ref: '#/components/schemas/MirrorLags'
            messages_truncated:
              type: integer
              format: int64
              nullable: true
            partition_level_truncation_data:
              $ref: '#/components/schemas/PartitionLevelTruncationDataList'
              nullable: true
    PartitionLevelTruncationDataList:
      type: array
      items:
        $ref: '#/components/schemas/PartitionLevelTruncationData'
    PartitionLevelTruncationData:
      type: object
      required:
        - partition_id
        - offset_truncated_to
        - messages_truncated
      properties:
        partition_id:
          type: integer
        offset_truncated_to:
          type: integer
          format: int64
        messages_truncated:
          type: integer
          format: int64
  parameters:
    AclHost:
      name: host
      description: The ACL host.
      in: query
      required: false
      schema:
        type: string
    AclOperation:
      name: operation
      description: The ACL operation.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/AclOperation'
    AclOperationRequired:
      name: operation
      description: The ACL operation.
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AclOperation'
    AclPatternType:
      name: pattern_type
      description: The ACL pattern type.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/AclPatternType'
    AclPatternTypeRequired:
      name: pattern_type
      description: The ACL pattern type.
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AclPatternType'
    AclPermission:
      name: permission
      description: The ACL permission.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/AclPermission'
    AclPermissionRequired:
      name: permission
      description: The ACL permission.
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AclPermission'
    AclPrincipal:
      name: principal
      description: The ACL principal. This is the Service Account name or user name.
      in: query
      required: false
      schema:
        type: string
    AclResourceName:
      name: resource_name
      description: The ACL resource name.
      in: query
      required: false
      schema:
        type: string
    AclResourceType:
      name: resource_type
      description: The ACL resource type.
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/AclResourceType'
    AclResourceTypeRequired:
      name: resource_type
      description: The ACL resource type.
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/AclResourceType'
    BrokerId:
      name: broker_id
      description: The Kafka broker ID.
      in: path
      required: true
      schema:
        type: integer
      example: 1
    ClusterId:
      name: cluster_id
      description: The Kafka cluster ID.
      in: path
      required: true
      schema:
        type: string
      example: cluster-1
    ConfigName:
      name: name
      description: The configuration parameter name.
      in: path
      required: true
      schema:
        type: string
      example: compression.type
    ConsumerGroupId:
      name: consumer_group_id
      description: The consumer group ID.
      in: path
      required: true
      schema:
        type: string
      example: consumer-group-1
    ConsumerId:
      name: consumer_id
      description: The consumer ID.
      in: path
      required: true
      schema:
        type: string
      example: consumer-1
    IncludeAuthorizedOperations:
      name: include_authorized_operations
      description: Specify if authorized operations should be included in the response.
      in: query
      required: false
      schema:
        type: boolean
    PartitionId:
      name: partition_id
      description: The partition ID.
      in: path
      required: true
      schema:
        type: integer
      example: 0
    TopicName:
      name: topic_name
      description: The topic name.
      in: path
      required: true
      schema:
        type: string
      example: topic-1
    BrokerTaskType:
      name: task_type
      description: The Kafka broker task type.
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/BrokerTaskType'
      example: remove-broker
    ShouldShutdown:
      name: should_shutdown
      description: 'To shutdown the broker or not, Default: true'
      in: query
      required: false
      schema:
        type: boolean
      example: true
    ValidateOnly:
      name: validate_only
      description: 'To validate the action can be performed successfully or not. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    ValidateLink:
      name: validate_link
      description: 'To synchronously validate that the source cluster ID is expected and the dest cluster has the permission to read topics in the source cluster. Default: true'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    IncludeTasks:
      name: include_tasks
      description: 'Whether to include cluster linking tasks in the response. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    IncludeStateTransitionErrors:
      name: include_state_transition_errors
      description: 'Whether to include mirror state transition errors in the response. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    Force:
      name: force
      description: 'Force the action. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    IncludePartitionLevelTruncationData:
      name: include_partition_level_truncation_data
      description: 'Whether to include partition level truncation information when truncating and restoring a topic in the response. Default: false'
      in: query
      required: false
      schema:
        type: boolean
      example: false
    LinkName:
      name: link_name
      description: The link name
      in: path
      required: true
      schema:
        type: string
      example: link-sb1
    LinkConfigName:
      name: config_name
      description: The link config name
      in: path
      required: true
      schema:
        type: string
      example: consumer.offset.sync.enable
    MirrorTopicStatus:
      name: mirror_status
      description: 'The status of the mirror topic. If not specified, all mirror topics will be returned.'
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/MirrorTopicStatus'
      example: ACTIVE
    MirrorTopicName:
      name: mirror_topic_name
      description: Cluster Linking mirror topic name
      in: path
      required: true
      schema:
        type: string
      example: topic-1
    QueryParamLinkName:
      name: link_name
      description: The link name
      in: query
      required: true
      schema:
        type: string
      example: link-sb1
  responses:
    GetClusterResponse:
      description: The Kafka cluster.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClusterData'
          example:
            kind: KafkaCluster
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1'
              resource_name: 'crn:///kafka=cluster-1'
            cluster_id: cluster-1
            controller:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1'
            acls:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls'
            brokers:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers'
            broker_configs:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs'
            consumer_groups:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups'
            topics:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics'
            partition_reassignments:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/partitions/-/reassignment'
    BadRequestErrorResponse:
      description: Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            bad_request_cannot_deserialize:
              description: Thrown when trying to deserialize an integer from non-integer data.
              value:
                error_code: 400
                message: 'Cannot deserialize value of type `java.lang.Integer` from String "A": not a valid `java.lang.Integer` value'
            unsupported_version_exception:
              description: Thrown when the version of this API is not supported in the underlying Kafka cluster.
              value:
                error_code: 40035
                message: The version of this API is not supported in the underlying Kafka cluster.
    UnauthorizedErrorResponse:
      description: Indicates a client authentication error. Kafka authentication failures will contain error code 40101 in the response body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            kafka_authentication_failed:
              description: Thrown when using Basic authentication with wrong Kafka credentials.
              value:
                error_code: 40101
                message: Authentication failed
    ForbiddenErrorResponse:
      description: Indicates a client authorization error. Kafka authorization failures will contain error code 40301 in the response body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            kafka_authorization_failed:
              description: Thrown when the caller is not authorized to perform the underlying operation.
              value:
                error_code: 40301
                message: Request is not authorized
    TooManyRequestsErrorResponse:
      description: 'Indicates that a rate limit threshold has been reached, and the client should retry again later.'
      content:
        text/html:
          schema:
            type: string
          example:
            description: A sample response from Jetty's DoSFilter.
            value: '<html> <head> <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/> <title>Error 429 Too Many Requests</title> </head> <body> <h2>HTTP ERROR 429 Too Many Requests</h2> <table> <tr> <th>URI:</th> <td>/v3/clusters/my-cluster</td> </tr> <tr> <th>STATUS:</th> <td>429</td> </tr> <tr> <th>MESSAGE:</th> <td>Too Many Requests</td> </tr> <tr> <th>SERVLET:</th> <td>default</td> </tr> </table> </body> </html>'
    ServerErrorResponse:
      description: A server-side problem that might not be addressable from the client side. Retriable Kafka errors will contain error code 50003 in the response body.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            generic_internal_server_error:
              description: Thrown for generic HTTP 500 errors.
              value:
                error_code: 500
                message: Internal Server Error
    BadRequestErrorResponse_CreateAcls:
      description: Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            create_acls_cluster_name_invalid:
              description: Thrown when creating an ACL for a CLUSTER resource specifying the wrong resource name.
              value:
                error_code: 40002
                message: The only valid name for the CLUSTER resource is kafka-cluster"
    SearchAclsResponse:
      description: The list of ACLs.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AclDataList'
          example:
            kind: KafkaAclList
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?principal=User%3Aalice'
            data:
              - kind: KafkaAcl
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=User%3Aalice&host=*&operation=ALL&permission=ALLOW'
                cluster_id: cluster-1
                resource_type: TOPIC
                resource_name: topic-
                pattern_type: PREFIXED
                principal: 'User:alice'
                host: '*'
                operation: ALL
                permission: ALLOW
              - kind: KafkaAcl
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=kafka-cluster&pattern_type=LITERAL&principal=User%3Aalice&host=*&operation=DESCRIBE&permission=DENY'
                cluster_id: cluster-1
                resource_type: CLUSTER
                resource_name: kafka-cluster
                pattern_type: LITERAL
                principal: 'User:alice'
                host: '*'
                operation: DESCRIBE
                permission: DENY
    DeleteAclsResponse:
      description: The list of deleted ACLs.
      content:
        application/json:
          schema:
            type: object
            required:
              - data
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/AclData'
          example:
            data:
              - kind: KafkaAcl
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=TOPIC&resource_name=topic-&pattern_type=PREFIXED&principal=User%3Aalice&host=*&operation=ALL&permission=ALLOW'
                cluster_id: cluster-1
                resource_type: TOPIC
                resource_name: topic-
                pattern_type: PREFIXED
                principal: 'User:alice'
                host: '*'
                operation: ALL
                permission: ALLOW
              - kind: KafkaAcl
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=CLUSTER&resource_name=kafka-cluster&pattern_type=LITERAL&principal=User%3Aalice&host=*&operation=DESCRIBE&permission=DENY'
                cluster_id: cluster-1
                resource_type: CLUSTER
                resource_name: kafka-cluster
                pattern_type: LITERAL
                principal: 'User:alice'
                host: '*'
                operation: DESCRIBE
                permission: DENY
    BadRequestErrorResponse_DeleteAcls:
      description: Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            delete_acls_unspecified_resource_type:
              description: Thrown when trying to delete ACLs without specifying a valid resource type.
              value:
                error_code: 400
                message: resource_type cannot be unspecified or UNKNOWN
    ListClusterConfigsResponse:
      description: The list of cluster configs.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClusterConfigDataList'
          example:
            kind: KafkaClusterConfigList
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs'
              next: null
            data:
              - kind: KafkaClusterConfig
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/max.connections'
                  resource_name: 'crn:///kafka=cluster-1/broker-config=max.connections'
                cluster_id: cluster-1
                config_type: BROKER
                name: max.connections
                value: '1000'
                is_default: false
                is_read_only: false
                is_sensitive: false
                source: DYNAMIC_DEFAULT_BROKER_CONFIG
                synonyms:
                  - name: max.connections
                    value: '1000'
                    source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  - name: max.connections
                    value: '2147483647'
                    source: DEFAULT_CONFIG
              - kind: KafkaClusterConfig
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type'
                  resource_name: 'crn:///kafka=cluster-1/broker-config=compression.type'
                cluster_id: cluster-1
                config_type: BROKER
                name: compression.type
                value: gzip
                is_default: false
                is_read_only: false
                is_sensitive: false
                source: DYNAMIC_DEFAULT_BROKER_CONFIG
                synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_DEFAULT_BROKER_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
    GetClusterConfigResponse:
      description: The cluster configuration parameter.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClusterConfigData'
          example:
            kind: KafkaClusterConfig
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type'
              resource_name: 'crn:///kafka=cluster-1/broker-config=compression.type'
            cluster_id: cluster-1
            config_type: BROKER
            name: compression.type
            value: gzip
            is_default: false
            is_read_only: false
            is_sensitive: false
            source: DYNAMIC_DEFAULT_BROKER_CONFIG
            synonyms:
              - name: compression.type
                value: gzip
                source: DYNAMIC_DEFAULT_BROKER_CONFIG
              - name: compression.type
                value: producer
                source: DEFAULT_CONFIG
    ListConsumerGroupsResponse:
      description: The list of consumer groups.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConsumerGroupDataList'
          example:
            kind: KafkaConsumerGroupList
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups'
              next: null
            data:
              - kind: KafkaConsumerGroup
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1'
                  resource_name: 'crn:///kafka=cluster-1/consumer-group=consumer-group-1'
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                is_simple: false
                partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
                state: STABLE
                coordinator:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1'
                consumers:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers'
                lag_summary:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary'
              - kind: KafkaConsumerGroup
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2'
                  resource_name: 'crn:///kafka=cluster-1/consumer-group=consumer-group-2'
                cluster_id: cluster-1
                consumer_group_id: consumer-group-2
                is_simple: false
                partition_assignor: org.apache.kafka.clients.consumer.StickyAssignor
                state: PREPARING_REBALANCE
                coordinator:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/2'
                consumers:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/consumers'
                lag_summary:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-2/lag-summary'
              - kind: KafkaConsumerGroup
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3'
                  resource_name: 'crn:///kafka=cluster-1/consumer-group=consumer-group-3'
                cluster_id: cluster-1
                consumer_group_id: consumer-group-3
                is_simple: false
                partition_assignor: org.apache.kafka.clients.consumer.RangeAssignor
                state: DEAD
                coordinator:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/3'
                consumers:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/consumers'
                lag_summary:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-3/lag-summary'
    GetConsumerGroupResponse:
      description: The consumer group.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConsumerGroupData'
          example:
            kind: KafkaConsumerGroup
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1'
              resource_name: 'crn:///kafka=cluster-1/consumer-group=consumer-group-1'
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            is_simple: false
            partition_assignor: org.apache.kafka.clients.consumer.RoundRobinAssignor
            state: STABLE
            coordinator:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/brokers/1'
            consumers:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers'
            lag_summary:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary'
    ListConsumersResponse:
      description: The list of consumers.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConsumerDataList'
          example:
            kind: KafkaConsumerList
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers'
              next: null
            data:
              - kind: KafkaConsumer
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1'
                  resource_name: 'crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1'
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                consumer_id: consumer-1
                instance_id: consumer-instance-1
                client_id: client-1
                assignments:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments'
              - kind: KafkaConsumer
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2'
                  resource_name: 'crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2'
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                consumer_id: consumer-2
                instance_id: consumer-instance-2
                client_id: client-2
                assignments:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments'
              - kind: KafkaConsumer
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2'
                  resource_name: 'crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-2'
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                consumer_id: consumer-2
                instance_id: consumer-instance-2
                client_id: client-2
                assignments:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-2/assignments'
    GetConsumerGroupLagSummaryResponse:
      description: The max and total consumer lag in a consumer group.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConsumerGroupLagSummaryData'
          example:
            kind: KafkaConsumerGroupLagSummary
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary'
              resource_name: 'crn:///kafka=cluster-1/consumer-groups=consumer-group-1/lag-summary'
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            max_lag_consumer_id: consumer-1
            max_lag_instance_id: consumer-instance-1
            max_lag_client_id: client-1
            max_lag_topic_name: topic-1
            max_lag_partition_id: 1
            max_lag: 100
            total_lag: 110
            max_lag_consumer:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1'
            max_lag_partition:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1'
    ListConsumerLagsResponse:
      description: The list of consumer lags.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConsumerLagDataList'
          example:
            kind: KafkaConsumerLagList
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags'
              next: null
            data:
              - kind: KafkaConsumerLag
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1'
                  resource_name: 'crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1'
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                topic_name: topic-1
                partition_id: 1
                consumer_id: consumer-1
                instance_id: consumer-instance-1
                client_id: client-1
                current_offset: 1
                log_end_offset: 101
                lag: 100
              - kind: KafkaConsumerLag
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/2'
                  resource_name: 'crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=2'
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                topic_name: topic-1
                partition_id: 2
                consumer_id: consumer-2
                instance_id: consumer-instance-2
                client_id: client-2
                current_offset: 1
                log_end_offset: 11
                lag: 10
              - kind: KafkaConsumerLag
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/3'
                  resource_name: 'crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=3'
                cluster_id: cluster-1
                consumer_group_id: consumer-group-1
                topic_name: topic-1
                partition_id: 3
                consumer_id: consumer-3
                instance_id: consumer-instance-3
                client_id: client-3
                current_offset: 1
                log_end_offset: 1
                lag: 0
    GetConsumerLagResponse:
      description: The consumer lag.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConsumerLagData'
          example:
            kind: KafkaConsumerLag
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/1'
              resource_name: 'crn:///kafka=cluster-1/consumer-group=consumer-group-1/lag=topic-1/partition=1'
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            topic_name: topic-1
            partition_id: 1
            consumer_id: consumer-1
            instance_id: consumer-instance-1
            client_id: client-1
            current_offset: 1
            log_end_offset: 101
            lag: 100
    GetConsumerResponse:
      description: The consumer.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ConsumerData'
          example:
            kind: KafkaConsumer
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1'
              resource_name: 'crn:///kafka=cluster-1/consumer-group=consumer-group-1/consumer=consumer-1'
            cluster_id: cluster-1
            consumer_group_id: consumer-group-1
            consumer_id: consumer-1
            instance_id: consumer-instance-1
            client_id: client-1
            assignments:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1/assignments'
    ListTopicsResponse:
      description: The list of topics.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopicDataList'
          example:
            kind: KafkaTopicList
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics'
              next: null
            data:
              - kind: KafkaTopic
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1'
                  resource_name: 'crn:///kafka=cluster-1/topic=topic-1'
                cluster_id: cluster-1
                topic_name: topic-1
                is_internal: false
                replication_factor: 3
                partitions_count: 1
                partitions:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions'
                configs:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs'
                partition_reassignments:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments'
              - kind: KafkaTopic
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2'
                  resource_name: 'crn:///kafka=cluster-1/topic=topic-2'
                cluster_id: cluster-1
                topic_name: topic-2
                is_internal: true
                replication_factor: 4
                partitions_count: 1
                partitions:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions'
                configs:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/configs'
                partition_reassignments:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-2/partitions/-/reassignments'
              - kind: KafkaTopic
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3'
                  resource_name: 'crn:///kafka=cluster-1/topic=topic-3'
                cluster_id: cluster-1
                topic_name: topic-3
                is_internal: false
                replication_factor: 5
                partitions_count: 1
                partitions:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions'
                configs:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/configs'
                partition_reassignments:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-3/partitions/-/reassignments'
    CreateTopicResponse:
      description: The created topic.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopicData'
          example:
            kind: KafkaTopic
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X'
              resource_name: 'crn:///kafka=cluster-1/topic=topic-X'
            cluster_id: cluster-1
            topic_name: topic-X
            is_internal: false
            replication_factor: 3
            partitions_count: 1
            partitions:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions'
            configs:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/configs'
            partition_reassignments:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-X/partitions/-/reassignments'
    BadRequestErrorResponse_CreateTopic:
      description: Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            create_topic_already_exists:
              description: Thrown when trying to create a topic with a name already used by an existing topic.
              value:
                error_code: 40002
                message: Topic 'my-topic' already exists.
            create_topic_replication_factor_too_large:
              description: Thrown when trying to create a topic with a replication factor larger than the number of brokers.
              value:
                error_code: 40002
                message: 'Replication factor: 2 larger than available brokers: 1.'
    GetTopicResponse:
      description: The topic.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopicData'
          example:
            kind: KafkaTopic
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1'
              resource_name: 'crn:///kafka=cluster-1/topic=topic-1'
            cluster_id: cluster-1
            topic_name: topic-1
            is_internal: false
            replication_factor: 3
            partitions_count: 1
            partitions:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions'
            configs:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs'
            partition_reassignments:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/-/reassignments'
    NotFoundErrorResponse:
      description: Indicates attempted access to an unreachable or non-existing resource like e.g. an unknown topic or partition. GET requests to endpoints not allowed in the accesslists will also result in this response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            endpoint_not_found:
              description: Thrown for generic HTTP 404 errors.
              value:
                error_code: 404
                message: HTTP 404 Not Found
            cluster_not_found:
              description: Thrown when using a non-existing cluster ID.
              value:
                error_code: 404
                message: Cluster my-cluster cannot be found.
            unknown_topic_or_partition:
              description: Thrown when using a non-existing topic name or partition ID.
              value:
                error_code: 40403
                message: This server does not host this topic-partition.
    BadRequestErrorResponse_UpdatePartitionCountTopic:
      description: Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            topic_update_partitions_invalid:
              description: Thrown when trying to update the number of partitions incorrectly.
              value:
                error_code: 40002
                message: Topic already has 1 partitions.
    ListTopicConfigsResponse:
      description: The list of cluster configs.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopicConfigDataList'
          example:
            kind: KafkaTopicConfigList
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs'
              next: null
            data:
              - kind: KafkaTopicConfig
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/cleanup.policy'
                  resource_name: 'crn:///kafka=cluster-1/topic=topic-1/config=cleanup.policy'
                cluster_id: cluster-1
                topic_name: topic-1
                name: cleanup.policy
                value: compact
                is_default: false
                is_read_only: false
                is_sensitive: false
                source: DYNAMIC_TOPIC_CONFIG
                synonyms:
                  - name: cleanup.policy
                    value: compact
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: cleanup.policy
                    value: delete
                    source: DEFAULT_CONFIG
              - kind: KafkaTopicConfig
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type'
                  resource_name: 'crn:///kafka=cluster-1/topic=topic-1/config=compression.type'
                cluster_id: cluster-1
                topic_name: topic-1
                name: compression.type
                value: gzip
                is_default: false
                is_read_only: false
                is_sensitive: false
                source: DYNAMIC_TOPIC_CONFIG
                synonyms:
                  - name: compression.type
                    value: gzip
                    source: DYNAMIC_TOPIC_CONFIG
                  - name: compression.type
                    value: producer
                    source: DEFAULT_CONFIG
    GetTopicConfigResponse:
      description: The topic configuration parameter.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TopicConfigData'
          example:
            kind: KafkaTopicConfig
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/compression.type'
              resource_name: 'crn:///kafka=cluster-1/topic=topic-1/config=compression.type'
            cluster_id: cluster-1
            topic_name: topic-1
            name: compression.type
            value: gzip
            is_default: false
            is_read_only: false
            is_sensitive: false
            source: DYNAMIC_TOPIC_CONFIG
            synonyms:
              - name: compression.type
                value: gzip
                source: DYNAMIC_TOPIC_CONFIG
              - name: compression.type
                value: producer
                source: DEFAULT_CONFIG
    ListPartitionsResponse:
      description: The list of partitions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PartitionDataList'
          example:
            kind: KafkaPartitionList
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions'
              next: null
            data:
              - kind: KafkaPartition
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1'
                  resource_name: 'crn:///kafka=cluster-1/topic=topic-1/partition=1'
                cluster_id: cluster-1
                topic_name: topic-1
                partition_id: 1
                leader:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1'
                replicas:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas'
                reassignment:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment'
              - kind: KafkaPartition
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2'
                  resource_name: 'crn:///kafka=cluster-1/topic=topic-1/partition=2'
                cluster_id: cluster-1
                topic_name: topic-1
                partition_id: 2
                leader:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas/2'
                replicas:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/replicas'
                reassignment:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/2/reassignment'
              - kind: KafkaPartition
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3'
                  resource_name: 'crn:///kafka=cluster-1/topic=topic-1/partition=3'
                cluster_id: cluster-1
                topic_name: topic-1
                partition_id: 3
                leader:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas/3'
                replicas:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/replicas'
                reassignment:
                  related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/3/reassignment'
    GetPartitionResponse:
      description: The partition
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PartitionData'
          example:
            kind: KafkaPartition
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1'
              resource_name: 'crn:///kafka=cluster-1/topic=topic-1/partition=1'
            cluster_id: cluster-1
            topic_name: topic-1
            partition_id: 1
            leader:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas/1'
            replicas:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/replicas'
            reassignment:
              related: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/1/reassignment'
    ProduceResponse:
      description: |-
        The response containing a delivery report for a record produced to a topic. In streaming mode,
        for each record sent, a separate delivery report will be returned, in the same order,
        each with its own error_code.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProduceResponse'
          examples:
            produce_record_success:
              description: The record was successfully produced to the topic.
              value:
                error_code: 200
                cluster_id: cluster-1
                topic_name: topic-1
                partition_id: 1
                offset: 0
                timestamp: '2021-02-05T19:14:42Z'
                key:
                  type: BINARY
                  size: 7
                value:
                  type: JSON
                  size: 15
            produce_record_bad_binary_data:
              description: Thrown when sending a BINARY value which is not a base64-encoded string.
              value:
                error_code: 400
                message: 'Bad Request: data=1 is not a base64 string.'
    BadRequestErrorResponse_ProduceRecords:
      description: Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            header_not_base64_encoded:
              description: Thrown when headers in the produce-record are not base64 encoded.
              value:
                error_code: 400
                message: 'Cannot deserialize value of type `byte[]` from String "": Unexpected end of base64-encoded String: base64 variant ''MIME-NO-LINEFEEDS'' expects padding (one or more ''='' characters) at the end. This Base64Variant might have been incorrectly configured'
    RequestEntityTooLargeErrorResponse:
      description: This implies the client is sending a request payload that is larger than the maximum message size the server can accept.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            produce_records_expects_json:
              description: Thrown by /records API if payload size exceeds the message max size
              value:
                error_code: 413
                message: The request included a message larger than the maximum message size the server can accept.
    UnsupportedMediaTypeErrorResponse:
      description: This implies the client is sending the request payload format in an unsupported format.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            produce_records_expects_json:
              description: Thrown by /records API if payload format content-type doesn't match expected application/json
              value:
                error_code: 415
                message: HTTP 415 Unsupported Media Type
    UnprocessableEntity_ProduceRecord:
      description: Indicates a bad request error. It could be caused by an unexpected request body format or other forms of request validation failure.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            produce_record_empty_request_body:
              description: Thrown when the request body is empty.
              value:
                error_code: 422
                message: Payload error. Request body is empty. Data is required.
    ListLinksResponse:
      description: A list of link names and properties
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListLinksResponseDataList'
          example:
            kind: KafkaLinkDataList
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links'
              next: null
            data:
              - kind: KafkaLinkData
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-1'
                  resource_name: null
                source_cluster_id: src-cluster-id
                link_name: my-new-link-1
                link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                cluster_link_id: eEBkTffYSESld6EO898x3w
                topic_names:
                  - topic-sb-1
                  - topic-sb-2
                link_state: ACTIVE
              - kind: KafkaLinkData
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-2'
                  resource_name: null
                remote_cluster_id: src-cluster-id
                link_name: my-new-link-2
                link_id: f749116e-f847-4bd2-b1f6-5c4e518a0678
                cluster_link_id: 90kRbvhHS9Kx9lxOUYoGeA
                topic_names:
                  - topic-db-1
                  - topic-db-2
                link_state: UNAVAILABLE
                link_error: AUTHENTICATION_ERROR
                link_error_message: Please check your api key and secret
              - kind: KafkaLinkData
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/CIL-69l7S1CwoVNAhoQLug/links/my-new-link-3'
                  resource_name: null
                destination_cluster_id: dest-cluster-id
                link_name: my-new-link-3
                link_id: 9cd1711e-a4ef-4390-a35e-dfd758d97a82
                cluster_link_id: nNFxHqTvQ5CjXt_XWNl6gg
                topic_names: []
                link_state: ACTIVE
    NoContentResponse:
      description: 'Operation succeeded, no content in the response'
    GetLinkResponse:
      description: Single link name and properties
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListLinksResponseData'
          examples:
            link_at_destination_cluster:
              description: Link at destination cluster
              value:
                kind: KafkaLinkData
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/my-new-link-1'
                resource_name: null
                source_cluster_id: src-cluster-id
                link_name: my-new-link-1
                link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                cluster_link_id: eEBkTffYSESld6EO898x3w
                topic_names:
                  - topic-db-1
                  - topic-db-2
            link_at_source_cluster:
              description: Link at source cluster
              value:
                kind: KafkaLinkData
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/my-new-link-1'
                resource_name: null
                destination_cluster_id: dst-cluster-id
                link_name: my-new-link-1
                link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
                cluster_link_id: eEBkTffYSESld6EO898x3w
                topic_names: []
    ListLinkConfigsResponse:
      description: Config name and value
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListLinkConfigsResponseDataList'
          example:
            kind: KafkaLinkConfigDataList
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/v-0Ce-CkTyKQol9v46LaCQ/links/link-nb-1/configs'
              next: null
            data:
              - kind: KafkaLinkConfigData
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1'
                  resource_name: null
                cluster_id: 1Rh_4htxSuen7RYGvGmgNw
                name: consumer.offset.sync.ms
                value: '3825940'
                default: false
                read_only: false
                sensitive: false
                source: DYNAMIC_CLUSTER_LINK_CONFIG
                synonyms:
                  - cosm
                link_name: link-db-1
                link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
              - kind: KafkaLinkConfigData
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1'
                  resource_name: null
                cluster_id: 1Rh_4htxSuen7RYGvGmgNw
                name: acl.sync.ms
                value: '5000'
                default: false
                read_only: false
                sensitive: false
                source: DYNAMIC_CLUSTER_LINK_CONFIG
                synonyms:
                  - asm
                link_name: link-db-1
                link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
    GetLinkConfigsResponse:
      description: Config name and value
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListLinkConfigsResponseData'
          example:
            kind: KafkaLinkConfigData
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/1Rh_4htxSuen7RYGvGmgNw/links/my-new-link-1'
              resource_name: null
            cluster_id: 1Rh_4htxSuen7RYGvGmgNw
            name: consumer.offset.sync.ms
            value: '3825940'
            default: false
            read_only: false
            sensitive: false
            source: DYNAMIC_CLUSTER_LINK_CONFIG
            synonyms:
              - cosm
            link_name: link-db-1
            link_id: 7840644d-f7d8-4844-a577-a10ef3df31df
            topics:
              - topic-db-1
              - topic-db-2
    ListMirrorTopicsResponse:
      description: Metadata of mirror topics
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListMirrorTopicsResponseDataList'
          example:
            kind: KafkaMirrorDataList
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors'
              resource_name: 'crn:///kafka=cluster-1'
              next: null
            data:
              - kind: KafkaMirrorData
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-1'
                  resource_name: 'crn:///kafka=cluster-1'
                link_name: link-sb-1
                resource_name: 'crn:///kafka=cluster-1'
                mirror_topic_name: topic-1
                source_topic_name: topic-1
                num_partitions: 3
                mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                mirror_status: ACTIVE
                state_time_ms: 1612550939300
              - kind: KafkaMirrorData
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/Fds7TcT9TTqEXsoRLEKMcQ/links/link-1/mirrors/topic-2'
                  resource_name: 'crn:///kafka=cluster-1'
                link_name: link-sb-2
                resource_name: 'crn:///kafka=cluster-1'
                mirror_topic_name: topic-2
                source_topic_name: topic-2
                num_partitions: 3
                mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                mirror_status: STOPPED
                state_time_ms: 1612551353640
    DescribeMirrorTopicResponse:
      description: Metadata of the mirror topic
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListMirrorTopicsResponseData'
          example:
            kind: KafkaMirrorData
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/link/link-1/mirrors/topic-1'
              resource_name: 'crn:///kafka=cluster-1'
            link_name: link-sb-1
            mirror_topic_name: topic-1
            source_topic_name: topic-1
            num_partitions: 3
            mirror_lags:
              - partition: 0
                lag: 0
                last_source_fetch_offset: 0
              - partition: 1
                lag: 10000
                last_source_fetch_offset: 1000
              - partition: 2
                lag: 40000
                last_source_fetch_offset: 12030
            mirror_status: ACTIVE
            state_time_ms: 1612550939300
    AlterMirrorStatusResponse:
      description: Mirror status alternation result
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterMirrorStatusResponseDataList'
          example:
            kind: KafkaPromoteMirror
            metadata:
              self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-1/mirrors'
              resource_name: 'crn:///kafka=cluster-1'
            data:
              - kind: AlterMirrorsData
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-1'
                  resource: 'crn:///kafka=cluster-1'
                mirror_topic_name: topic-sb
                error_code: null
                error_message: null
                mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                messages_truncated: null
                partition_level_truncation_data:
                  - partition_id: 0
                    offset_truncated_to: 10000
                    messages_truncated: 10000
                  - partition_id: 1
                    offset_truncated_to: 40000
                    messages_truncated: 12030
                  - partition_id: 2
                    offset_truncated_to: 20000
                    messages_truncated: 20000
              - kind: AlterMirrorsData
                metadata:
                  self: 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/my-new-link-1/mirrors/topic-2'
                  resource: 'crn:///kafka=cluster-1'
                mirror_topic_name: topic-2
                error_code: 400
                error_message: Topic 'topic-2' has already stopped its mirror from 'my-new-link-1'
                mirror_lags:
                  - partition: 0
                    lag: 0
                    last_source_fetch_offset: 0
                  - partition: 1
                    lag: 10000
                    last_source_fetch_offset: 1000
                  - partition: 2
                    lag: 40000
                    last_source_fetch_offset: 12030
                messages_truncated: null
                partition_level_truncation_data:
                  - partition_id: 0
                    offset_truncated_to: 10000
                    messages_truncated: 10000
                  - partition_id: 1
                    offset_truncated_to: 40000
                    messages_truncated: 12030
                  - partition_id: 2
                    offset_truncated_to: 20000
                    messages_truncated: 20000
  securitySchemes:
    cloud-api-key:
      type: http
      scheme: basic
      description: Authenticate with Cloud API Keys using HTTP Basic Auth. Treat the Cloud API Key ID as the username and Cloud API Key Secret as the password.
    confluent-sts-access-token:
      type: oauth2
      description: Authenticate with Confluent API using this credentials (JSON Web Tokens) following OAuth 2.0.
      flows:
        clientCredentials:
          tokenUrl: 'https://api.confluent.cloud/sts/v1/oauth2/token'
          scopes: {}
    api-key:
      type: http
      scheme: basic
      description: Authenticate with API Keys using HTTP Basic Auth. Treat the API Key ID as the username and API Key Secret as the password.
    resource-api-key:
      type: http
      scheme: basic
      description: |
        Authenticate with resource-specific API Keys using HTTP Basic Auth. Treat the resource-specific API Key ID 
        as the username and resource-specific API Key Secret as the password.
    external-access-token:
      type: oauth2
      description: Authenticate with OAuth 2.0.
      flows:
        clientCredentials:
          tokenUrl: 'https://<oauth-identity-provider>/token'
          scopes: {}
    oauth:
      type: oauth2
      description: Authenticate with OAuth 2.0. Currently this is only supported for partner APIs.
      flows:
        clientCredentials:
          tokenUrl: /oauth2/token
          scopes:
            'partner:alter': enables partners to alter entitlements
            'partner:create': enables partners to create entitlements and signup on behalf of customers
            'partner:delete': enables partners to delete entitlements and organizations
            'partner:describe': enables partners to read and list entitlements and organizations
  requestBodies:
    AlterBrokerConfigBatchRequest:
      description: The alter broker configuration parameter batch request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
          example:
            data:
              - name: max.connections
                operation: DELETE
              - name: compression.type
                value: gzip
    AlterClusterConfigBatchRequest:
      description: The alter cluster configuration parameter batch request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
          example:
            data:
              - name: max.connections
                operation: DELETE
              - name: compression.type
                value: gzip
    AlterTopicConfigBatchRequest:
      description: The alter topic configuration parameter batch request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
          examples:
            batch_alter_topic_configs:
              value:
                data:
                  - name: cleanup.policy
                    operation: DELETE
                  - name: compression.type
                    value: gzip
            validate_only_batch_alter_topic_configs:
              value:
                data:
                  - name: cleanup.policy
                    operation: DELETE
                  - name: compression.type
                    value: gzip
                validate_only: true
    CreateAclRequest:
      description: The ACL creation request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateAclRequestData'
          example:
            resource_type: CLUSTER
            resource_name: kafka-cluster
            pattern_type: LITERAL
            principal: 'principalType:principalName'
            host: '*'
            operation: DESCRIBE
            permission: DENY
    BatchCreateAclRequest:
      description: The batch ACL creation request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateAclRequestDataList'
          example:
            data:
              - resource_type: CLUSTER
                resource_name: kafka-cluster
                pattern_type: LITERAL
                principal: 'principalType:principalName'
                host: '*'
                operation: DESCRIBE
                permission: DENY
              - resource_type: TOPIC
                resource_name: kafka-cluster
                pattern_type: LITERAL
                principal: 'principalType:principalName'
                host: '*'
                operation: READ
                permission: ALLOW
    CreateTopicRequest:
      description: 'The topic creation request. Note that Confluent Cloud allows only specific replication factor values. Because of that the replication factor field should either be omitted or it should use one of the allowed values (see https://docs.confluent.io/cloud/current/client-apps/optimizing/durability.html).'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTopicRequestData'
          examples:
            uniform_replication:
              value:
                topic_name: topic-X
                partitions_count: 64
                replication_factor: 3
                configs:
                  - name: cleanup.policy
                    value: compact
                  - name: compression.type
                    value: gzip
            dry_run_create_topic:
              value:
                topic_name: topic-X
                partitions_count: 64
                replication_factor: 3
                validate_only: true
    ProduceRequest:
      description: 'A single record to be produced to Kafka. To produce multiple records in the same request, simply concatenate the records. The delivery reports are concatenated in the same order as the records are sent.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProduceRequest'
          examples:
            binary_and_json:
              description: 'If using type, one of "BINARY", "JSON" or "STRING" is required.'
              value:
                partition_id: 1
                headers:
                  - name: Header-1
                    value: SGVhZGVyLTE=
                  - name: Header-2
                    value: SGVhZGVyLTI=
                key:
                  type: BINARY
                  data: Zm9vYmFy
                value:
                  type: JSON
                  data:
                    foo: bar
                timestamp: '2021-02-05T19:14:42Z'
            string:
              description: 'If using type, one of "BINARY", "JSON" or "STRING" is required.'
              value:
                value:
                  type: STRING
                  data: My message
            empty_value:
              description: key or value can be omitted entirely.
              value:
                key:
                  data: 1000
    UpdateBrokerConfigRequest:
      description: The broker configuration parameter update request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
          example:
            value: gzip
    UpdateClusterConfigRequest:
      description: The cluster configuration parameter update request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
          example:
            value: gzip
    UpdateTopicConfigRequest:
      description: The topic configuration parameter update request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateConfigRequestData'
          example:
            value: gzip
    CreateLinkRequest:
      description: Create a cluster link
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateLinkRequestData'
          examples:
            destination_initiated_link:
              description: Create a destination initiated cluster link
              value:
                source_cluster_id: cluster-1
                configs:
                  - name: bootstrap.servers
                    value: cluster-1-bootstrap-server
                  - name: acl.sync.enable
                    value: 'false'
                  - name: consumer.offset.sync.ms
                    value: '30000'
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
            source_initiated_link_at_source_cluster:
              description: Create a source initiated cluster link at source cluster
              value:
                destination_cluster_id: cluster-2
                configs:
                  - name: bootstrap.servers
                    value: cluster-2-bootstrap-server
                  - name: link.mode
                    value: SOURCE
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
            source_initiated_link_at_destination_cluster:
              description: Create a source initiated cluster link at destination cluster
              value:
                destination_cluster_id: cluster-1
                configs:
                  - name: bootstrap.servers
                    value: cluster-1-bootstrap-server
                  - name: link.mode
                    value: DESTINATION
                  - name: connection.mode
                    value: INBOUND
                  - name: acl.sync.enable
                    value: 'false'
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
            bidirectional_link_east:
              description: Create a bidirectional cluster link in east
              value:
                remote_cluster_id: cluster-west
                configs:
                  - name: bootstrap.servers
                    value: cluster-west-bootstrap-server
                  - name: link.mode
                    value: BIDIRECTIONAL
                  - name: cluster.link.prefix
                    value: west.
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
            bidirectional_link_west:
              description: Create a bidirectional cluster link in west
              value:
                remote_cluster_id: cluster-east
                cluster_link_id: eEBkTffYSESld6EO898x3w
                configs:
                  - name: bootstrap.servers
                    value: cluster-east-bootstrap-server
                  - name: link.mode
                    value: BIDIRECTIONAL
                  - name: cluster.link.prefix
                    value: east.
                  - name: sasl.mechanism
                    value: PLAIN
                  - name: sasl.protocol
                    value: SASL_SSL
                  - name: sasl.jaas.config
                    value: sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username='<Kafka API Key>' password='<Kafka API Secret>';
    UpdateLinkConfigRequest:
      content:
        application/json:
          example:
            value: '300000'
          schema:
            $ref: '#/components/schemas/UpdateLinkConfigRequestData'
      description: Link config value to update
    AlterLinkConfigBatchRequest:
      content:
        application/json:
          example:
            data:
              - name: cleanup.policy
                operation: DELETE
              - name: compression.type
                value: gzip
          schema:
            $ref: '#/components/schemas/AlterConfigBatchRequestData'
    CreateMirrorTopicRequest:
      description: 'Name and configs of the topics mirroring from and mirroring to. Note that Confluent Cloud allows only specific replication factor values. Because of that the replication factor field should either be omitted or it should use one of the allowed values (see https://docs.confluent.io/cloud/current/client-apps/optimizing/durability.html).'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateMirrorTopicRequestData'
          examples:
            generic_example:
              description: Generic example of creating a mirror topic
              value:
                source_topic_name: topic-1
                configs:
                  - name: unclean.leader.election.enable
                    value: 'true'
                replication_factor: 1
            example_with_mirror_topic_name:
              description: Example using optional mirror_topic_name flag
              value:
                source_topic_name: topic-1
                mirror_topic_name: link1_topic-1
                configs:
                  - name: unclean.leader.election.enable
                    value: 'true'
                replication_factor: 3
    AlterMirrorsRequest:
      description: Mirror topics to be altered.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AlterMirrorsRequestData'
          examples:
            mirror_topic_names:
              description: Example using mirror topic names
              value:
                mirror_topic_names:
                  - topic-1
                  - topic-2
            mirror_topic_name_pattern:
              description: Example using mirror topic name pattern
              value:
                mirror_topic_name_pattern: .*
    RemoveBrokersRequest:
      content:
        application/json:
          example:
            broker_ids:
              - 1
              - 2
              - 3
          schema:
            $ref: '#/components/schemas/RemoveBrokersRequestData'
      description: Broker ids to remove
    BrokerReplicaExclusionBatchRequest:
      description: Alter Broker Replica Exclusions.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BrokerReplicaExclusionBatchRequestData'
          example:
            data:
              - broker_id: 1
                reason: The broker is to be removed.
              - broker_id: 2
                reason: The broker is to be removed.
  x-stackQL-resources:
    clusters:
      id: confluent.kafka.clusters
      name: clusters
      title: Clusters
      methods:
        get_kafka_cluster:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    acls:
      id: confluent.kafka.acls
      name: acls
      title: Acls
      methods:
        batch_create_kafka_acls:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1acls:batch/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        get_kafka_acls:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1acls/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_kafka_acls:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1acls/post'
          response:
            mediaType: application/json
            openAPIDocKey: '201'
        delete_kafka_acls:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1acls/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/acls/methods/create_kafka_acls'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/acls/methods/delete_kafka_acls'
    cluster_configs:
      id: confluent.kafka.cluster_configs
      name: cluster_configs
      title: Cluster Configs
      methods:
        list_kafka_cluster_configs:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1broker-configs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_kafka_cluster_configs:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1broker-configs:alter/post'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_kafka_cluster_config:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1broker-configs~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_kafka_cluster_config:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1broker-configs~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        delete_kafka_cluster_config:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1broker-configs~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select: []
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/cluster_configs/methods/update_kafka_cluster_configs'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/cluster_configs/methods/delete_kafka_cluster_config'
    consumer_groups:
      id: confluent.kafka.consumer_groups
      name: consumer_groups
      title: Consumer Groups
      methods:
        list_kafka_consumer_groups:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1consumer-groups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_kafka_consumer_group:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1consumer-groups~1{consumer_group_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    consumers:
      id: confluent.kafka.consumers
      name: consumers
      title: Consumers
      methods:
        list_kafka_consumers:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1consumer-groups~1{consumer_group_id}~1consumers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_kafka_consumer:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1consumer-groups~1{consumer_group_id}~1consumers~1{consumer_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    consumers_lag_summary:
      id: confluent.kafka.consumers_lag_summary
      name: consumers_lag_summary
      title: Consumers Lag Summary
      methods:
        get_kafka_consumer_group_lag_summary:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1consumer-groups~1{consumer_group_id}~1lag-summary/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    consumers_lags:
      id: confluent.kafka.consumers_lags
      name: consumers_lags
      title: Consumers Lags
      methods:
        list_kafka_consumer_lags:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1consumer-groups~1{consumer_group_id}~1lags/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_kafka_consumer_lag:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1consumer-groups~1{consumer_group_id}~1lags~1{topic_name}~1partitions~1{partition_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    topics:
      id: confluent.kafka.topics
      name: topics
      title: Topics
      methods:
        list_kafka_topics:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_kafka_topic:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_kafka_topic:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics~1{topic_name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_partition_count_kafka_topic:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics~1{topic_name}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_kafka_topic:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics~1{topic_name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/topics/methods/create_kafka_topic'
        update:
          - $ref: '#/components/x-stackQL-resources/topics/methods/update_partition_count_kafka_topic'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/topics/methods/delete_kafka_topic'
    topic_configs:
      id: confluent.kafka.topic_configs
      name: topic_configs
      title: Topic Configs
      methods:
        list_kafka_topic_configs:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics~1{topic_name}~1configs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_kafka_topic_config_batch:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics~1{topic_name}~1configs:alter/post'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_kafka_topic_config:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics~1{topic_name}~1configs~1{name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_kafka_topic_config:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics~1{topic_name}~1configs~1{name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        delete_kafka_topic_config:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics~1{topic_name}~1configs~1{name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        list_kafka_all_topic_configs:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics~1-~1configs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/topic_configs/methods/update_kafka_topic_config_batch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/topic_configs/methods/delete_kafka_topic_config'
    topic_partitions:
      id: confluent.kafka.topic_partitions
      name: topic_partitions
      title: Topic Partitions
      methods:
        list_kafka_partitions:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics~1{topic_name}~1partitions/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_kafka_partition:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics~1{topic_name}~1partitions~1{partition_id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    records:
      id: confluent.kafka.records
      name: records
      title: Records
      methods:
        produce_record:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics~1{topic_name}~1records/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    cluster_links:
      id: confluent.kafka.cluster_links
      name: cluster_links
      title: Cluster Links
      methods:
        list_kafka_links:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create_kafka_link:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links/post'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get_kafka_link:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete_kafka_link:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/cluster_links/methods/create_kafka_link'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/cluster_links/methods/delete_kafka_link'
    default_topic_configs:
      id: confluent.kafka.default_topic_configs
      name: default_topic_configs
      title: Default Topic Configs
      methods:
        list_kafka_default_topic_configs:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1topics~1{topic_name}~1default-configs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    cluster_link_configs:
      id: confluent.kafka.cluster_link_configs
      name: cluster_link_configs
      title: Cluster Link Configs
      methods:
        list_kafka_link_configs:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1configs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_kafka_link_configs:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1configs~1{config_name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_kafka_link_config:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1configs~1{config_name}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        delete_kafka_link_config:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1configs~1{config_name}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        update_kafka_link_config_batch:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1configs:alter/put'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/cluster_link_configs/methods/delete_kafka_link_config'
    mirror_topics:
      id: confluent.kafka.mirror_topics
      name: mirror_topics
      title: Mirror Topics
      methods:
        create_kafka_mirror_topic:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1mirrors/post'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        list_kafka_mirror_topics_under_link:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1mirrors/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list_kafka_mirror_topics:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1-~1mirrors/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        read_kafka_mirror_topic:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1mirrors~1{mirror_topic_name}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_kafka_mirror_topics_promote:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1mirrors:promote/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_kafka_mirror_topics_failover:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1mirrors:failover/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_kafka_mirror_topics_pause:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1mirrors:pause/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_kafka_mirror_topics_resume:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1mirrors:resume/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_kafka_mirror_topics_reverse_and_start_mirror:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1mirrors:reverse-and-start-mirror/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_kafka_mirror_topics_reverse_and_pause_mirror:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1mirrors:reverse-and-pause-mirror/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_kafka_mirror_topics_truncate_and_restore_mirror:
          operation:
            $ref: '#/paths/~1kafka~1v3~1clusters~1{cluster_id}~1links~1{link_name}~1mirrors:truncate-and-restore/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: '#/components/x-stackQL-resources/mirror_topics/methods/create_kafka_mirror_topic'
        update: []
        replace: []
        delete: []
paths:
  '/kafka/v3/clusters/{cluster_id}':
    get:
      summary: Get Cluster
      operationId: getKafkaCluster
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the Kafka cluster with the specified ``cluster_id``.
      tags:
        - Cluster (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/GetClusterResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1 \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
  '/kafka/v3/clusters/{cluster_id}/acls:batch':
    post:
      summary: Batch Create ACLs
      operationId: batchCreateKafkaAcls
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Create ACLs.
      tags:
        - ACL (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/BatchCreateAclRequest'
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse_CreateAcls'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"data":[{"resource_type":"UNKNOWN","resource_name":"string","pattern_type":"string","principal":"string","host":"string","operation":"string","permission":"string"}]}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"data\":[{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}]}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":[{\\\"resource_type\\\":\\\"UNKNOWN\\\",\\\"resource_name\\\":\\\"string\\\",\\\"pattern_type\\\":\\\"string\\\",\\\"principal\\\":\\\"string\\\",\\\"host\\\":\\\"string\\\",\\\"operation\\\":\\\"string\\\",\\\"permission\\\":\\\"string\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"data\":[{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}]}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/acls:batch", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/acls:batch",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              data: [
                {
                  resource_type: 'UNKNOWN',
                  resource_name: 'string',
                  pattern_type: 'string',
                  principal: 'string',
                  host: 'string',
                  operation: 'string',
                  permission: 'string'
                }
              ]
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"data\":[{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}]}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls:batch");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"data\":[{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}]}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
  '/kafka/v3/clusters/{cluster_id}/acls':
    get:
      summary: List ACLs
      operationId: getKafkaAcls
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return a list of ACLs that match the search criteria.
      tags:
        - ACL (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      parameters:
        - $ref: '#/components/parameters/ClusterId'
      responses:
        '200':
          $ref: '#/components/responses/SearchAclsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
    post:
      summary: Create an ACL
      operationId: createKafkaAcls
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Create an ACL.
      tags:
        - ACL (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/CreateAclRequest'
      responses:
        '201':
          description: Created
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse_CreateAcls'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"resource_type":"UNKNOWN","resource_name":"string","pattern_type":"string","principal":"string","host":"string","operation":"string","permission":"string"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls\"\n\n\tpayload := strings.NewReader(\"{\\\"resource_type\\\":\\\"UNKNOWN\\\",\\\"resource_name\\\":\\\"string\\\",\\\"pattern_type\\\":\\\"string\\\",\\\"principal\\\":\\\"string\\\",\\\"host\\\":\\\"string\\\",\\\"operation\\\":\\\"string\\\",\\\"permission\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/acls", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/acls",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              resource_type: 'UNKNOWN',
              resource_name: 'string',
              pattern_type: 'string',
              principal: 'string',
              host: 'string',
              operation: 'string',
              permission: 'string'
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"resource_type\":\"UNKNOWN\",\"resource_name\":\"string\",\"pattern_type\":\"string\",\"principal\":\"string\",\"host\":\"string\",\"operation\":\"string\",\"permission\":\"string\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
    delete:
      summary: Delete ACLs
      operationId: deleteKafkaAcls
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Delete the ACLs that match the search criteria.
      tags:
        - ACL (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      parameters:
        - $ref: '#/components/parameters/ClusterId'
      responses:
        '200':
          $ref: '#/components/responses/DeleteAclsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse_DeleteAcls'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE")
              .delete(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("DELETE", "/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/acls?resource_type=SOME_STRING_VALUE&pattern_type=SOME_STRING_VALUE&operation=SOME_STRING_VALUE&permission=SOME_STRING_VALUE");
            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/kafka/v3/clusters/{cluster_id}/broker-configs':
    get:
      summary: List Dynamic Broker Configs
      operationId: listKafkaClusterConfigs
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return a list of dynamic cluster-wide broker configuration parameters for the specified Kafka
        cluster. Returns an empty list if there are no dynamic cluster-wide broker configuration parameters.
      tags:
        - Configs (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/ListClusterConfigsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/broker-configs", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/broker-configs",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
  '/kafka/v3/clusters/{cluster_id}/broker-configs:alter':
    post:
      summary: Batch Alter Dynamic Broker Configs
      operationId: updateKafkaClusterConfigs
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Update or delete a set of dynamic cluster-wide broker configuration parameters.
      tags:
        - Configs (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/AlterClusterConfigBatchRequest'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"data":[{"name":"string","value":"string","operation":"string"}],"validate_only":true}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":[{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"operation\\\":\\\"string\\\"}],\\\"validate_only\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/broker-configs:alter", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/broker-configs:alter",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              data: [{name: 'string', value: 'string', operation: 'string'}],
              validate_only: true
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs:alter");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
  '/kafka/v3/clusters/{cluster_id}/broker-configs/{name}':
    get:
      summary: Get Dynamic Broker Config
      operationId: getKafkaClusterConfig
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the dynamic cluster-wide broker configuration parameter specified by ``name``.
      tags:
        - Configs (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/GetClusterConfigResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/broker-configs/compression.type", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/broker-configs/compression.type",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/ConfigName'
    put:
      summary: Update Dynamic Broker Config
      operationId: updateKafkaClusterConfig
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Update the dynamic cluster-wide broker configuration parameter specified by ``name``.
      tags:
        - Configs (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/UpdateClusterConfigRequest'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"value":"string"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"value\":\"string\"}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type")
              .put(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type\"\n\n\tpayload := strings.NewReader(\"{\\\"value\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"value\":\"string\"}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("PUT", "/kafka/v3/clusters/cluster-1/broker-configs/compression.type", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/broker-configs/compression.type",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({value: 'string'}));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"value\":\"string\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"value\":\"string\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/ConfigName'
    delete:
      summary: Reset Dynamic Broker Config
      operationId: deleteKafkaClusterConfig
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Reset the configuration parameter specified by ``name`` to its
        default value by deleting a dynamic cluster-wide configuration.
      tags:
        - Configs (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type")
              .delete(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("DELETE", "/kafka/v3/clusters/cluster-1/broker-configs/compression.type", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/broker-configs/compression.type",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/broker-configs/compression.type");
            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/ConfigName'
  '/kafka/v3/clusters/{cluster_id}/consumer-groups':
    get:
      summary: List Consumer Groups
      operationId: listKafkaConsumerGroups
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the list of consumer groups that belong to the specified
        Kafka cluster.
      tags:
        - Consumer Group (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/ListConsumerGroupsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/consumer-groups",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
  '/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}':
    get:
      summary: Get Consumer Group
      operationId: getKafkaConsumerGroup
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the consumer group specified by the ``consumer_group_id``.
      tags:
        - Consumer Group (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/GetConsumerGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1 \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/ConsumerGroupId'
  '/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/consumers':
    get:
      summary: List Consumers
      operationId: listKafkaConsumers
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return a list of consumers that belong to the specified consumer
        group.
      tags:
        - Consumer Group (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/ListConsumersResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/ConsumerGroupId'
  '/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lag-summary':
    get:
      summary: Get Consumer Group Lag Summary
      operationId: getKafkaConsumerGroupLagSummary
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)

        Return the maximum and total lag of the consumers belonging to the
        specified consumer group.
      tags:
        - Consumer Group (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/GetConsumerGroupLagSummaryResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lag-summary");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/ConsumerGroupId'
  '/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lags':
    get:
      summary: List Consumer Lags
      operationId: listKafkaConsumerLags
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)

        Return a list of consumer lags of the consumers belonging to the
        specified consumer group.
      tags:
        - Consumer Group (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/ListConsumerLagsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/ConsumerGroupId'
  '/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/lags/{topic_name}/partitions/{partition_id}':
    get:
      summary: Get Consumer Lag
      operationId: getKafkaConsumerLag
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy) [![Available in dedicated clusters only](https://img.shields.io/badge/-Available%20in%20dedicated%20clusters%20only-%23bc8540)](https://docs.confluent.io/cloud/current/clusters/cluster-types.html#dedicated-cluster)

        Return the consumer lag on a partition with the given `partition_id`.
      tags:
        - Consumer Group (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/GetConsumerLagResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0 \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/lags/topic-1/partitions/0");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/ConsumerGroupId'
        - $ref: '#/components/parameters/TopicName'
        - $ref: '#/components/parameters/PartitionId'
  '/kafka/v3/clusters/{cluster_id}/consumer-groups/{consumer_group_id}/consumers/{consumer_id}':
    get:
      summary: Get Consumer
      operationId: getKafkaConsumer
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the consumer specified by the ``consumer_id``.
      tags:
        - Consumer Group (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/GetConsumerResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1 \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/consumer-groups/consumer-group-1/consumers/consumer-1");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/ConsumerGroupId'
        - $ref: '#/components/parameters/ConsumerId'
  '/kafka/v3/clusters/{cluster_id}/topics':
    get:
      summary: List Topics
      operationId: listKafkaTopics
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the list of topics that belong to the specified Kafka cluster.
      tags:
        - Topic (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/ListTopicsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/topics", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
    post:
      summary: Create Topic
      operationId: createKafkaTopic
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Create a topic.
        Also supports a dry-run mode that only validates whether the topic creation would succeed
        if the ``validate_only`` request property is explicitly specified and set to true. Note that
        when dry-run mode is being used the response status would be 200 OK instead of 201 Created.
      tags:
        - Topic (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/CreateTopicRequest'
      responses:
        '200':
          $ref: '#/components/responses/CreateTopicResponse'
        '201':
          $ref: '#/components/responses/CreateTopicResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse_CreateTopic'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"topic_name":"string","partitions_count":0,"replication_factor":0,"configs":[{"name":"string","value":"string"}],"validate_only":true}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"topic_name\":\"string\",\"partitions_count\":0,\"replication_factor\":0,\"configs\":[{\"name\":\"string\",\"value\":\"string\"}],\"validate_only\":true}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics\"\n\n\tpayload := strings.NewReader(\"{\\\"topic_name\\\":\\\"string\\\",\\\"partitions_count\\\":0,\\\"replication_factor\\\":0,\\\"configs\\\":[{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"validate_only\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"topic_name\":\"string\",\"partitions_count\":0,\"replication_factor\":0,\"configs\":[{\"name\":\"string\",\"value\":\"string\"}],\"validate_only\":true}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/topics", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              topic_name: 'string',
              partitions_count: 0,
              replication_factor: 0,
              configs: [{name: 'string', value: 'string'}],
              validate_only: true
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"topic_name\":\"string\",\"partitions_count\":0,\"replication_factor\":0,\"configs\":[{\"name\":\"string\",\"value\":\"string\"}],\"validate_only\":true}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"topic_name\":\"string\",\"partitions_count\":0,\"replication_factor\":0,\"configs\":[{\"name\":\"string\",\"value\":\"string\"}],\"validate_only\":true}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
  '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}':
    get:
      summary: Get Topic
      operationId: getKafkaTopic
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the topic with the given `topic_name`.
      tags:
        - Topic (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/TopicName'
      responses:
        '200':
          $ref: '#/components/responses/GetTopicResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1 \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics/topic-1",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
    patch:
      summary: Update Partition Count
      operationId: updatePartitionCountKafkaTopic
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Increase the number of partitions for a topic.
      tags:
        - Topic (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePartitionCountRequestData'
      responses:
        '200':
          $ref: '#/components/responses/GetTopicResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse_UpdatePartitionCountTopic'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PATCH \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1 \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --header 'content-type: application/json' \
              --data '{"partitions_count":0}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"partitions_count\":0}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1")
              .patch(body)
              .addHeader("content-type", "application/json")
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1\"\n\n\tpayload := strings.NewReader(\"{\\\"partitions_count\\\":0}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"partitions_count\":0}"

            headers = {
                'content-type': "application/json",
                'Authorization': "Basic REPLACE_BASIC_AUTH"
                }

            conn.request("PATCH", "/kafka/v3/clusters/cluster-1/topics/topic-1", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PATCH",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics/topic-1",
              "headers": {
                "content-type": "application/json",
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({partitions_count: 0}));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PATCH");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "content-type: application/json");
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"partitions_count\":0}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");
            var request = new RestRequest(Method.PATCH);
            request.AddHeader("content-type", "application/json");
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("application/json", "{\"partitions_count\":0}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/TopicName'
    delete:
      summary: Delete Topic
      operationId: deleteKafkaTopic
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Delete the topic with the given `topic_name`.
      tags:
        - Topic (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1 \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1")
              .delete(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("DELETE", "/kafka/v3/clusters/cluster-1/topics/topic-1", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics/topic-1",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1");
            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/TopicName'
  '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}/configs':
    get:
      summary: List Topic Configs
      operationId: listKafkaTopicConfigs
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the list of configuration parameters that belong to the specified topic.
      tags:
        - Configs (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/ListTopicConfigsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/TopicName'
  '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}/configs:alter':
    post:
      summary: Batch Alter Topic Configs
      operationId: updateKafkaTopicConfigBatch
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Update or delete a set of topic configuration parameters.
        Also supports a dry-run mode that only validates whether the operation would succeed if the
        ``validate_only`` request property is explicitly specified and set to true.
      tags:
        - Configs (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/AlterTopicConfigBatchRequest'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"data":[{"name":"string","value":"string","operation":"string"}],"validate_only":true}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":[{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"operation\\\":\\\"string\\\"}],\\\"validate_only\\\":true}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              data: [{name: 'string', value: 'string', operation: 'string'}],
              validate_only: true
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs:alter");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/TopicName'
  '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}/configs/{name}':
    get:
      summary: Get Topic Config
      operationId: getKafkaTopicConfig
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the configuration parameter with the given `name`.
      tags:
        - Configs (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/GetTopicConfigResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/TopicName'
        - $ref: '#/components/parameters/ConfigName'
    put:
      summary: Update Topic Config
      operationId: updateKafkaTopicConfig
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Update the configuration parameter with given `name`.
      tags:
        - Configs (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/UpdateTopicConfigRequest'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"value":"string"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"value\":\"string\"}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type")
              .put(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type\"\n\n\tpayload := strings.NewReader(\"{\\\"value\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"value\":\"string\"}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("PUT", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({value: 'string'}));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"value\":\"string\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"value\":\"string\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/TopicName'
        - $ref: '#/components/parameters/ConfigName'
    delete:
      summary: Reset Topic Config
      operationId: deleteKafkaTopicConfig
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Reset the configuration parameter with given `name` to its default value.
      tags:
        - Configs (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type")
              .delete(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("DELETE", "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/configs/compression.type");
            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/TopicName'
        - $ref: '#/components/parameters/ConfigName'
  '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}/partitions':
    get:
      summary: List Partitions
      operationId: listKafkaPartitions
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the list of partitions that belong to the specified topic.
      tags:
        - Partition (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/ListPartitionsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/partitions", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/partitions",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/TopicName'
  '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}/partitions/{partition_id}':
    get:
      summary: Get Partition
      operationId: getKafkaPartition
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the partition with the given `partition_id`.
      tags:
        - Partition (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/GetPartitionResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0 \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/partitions/0");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/TopicName'
        - $ref: '#/components/parameters/PartitionId'
  '/kafka/v3/clusters/{cluster_id}/topics/-/configs':
    get:
      summary: List All Topic Configs
      operationId: listKafkaAllTopicConfigs
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Return the list of configuration parameters for all topics hosted by the specified
        cluster.
      tags:
        - Configs (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/ListTopicConfigsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/-/configs", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics/-/configs",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/-/configs");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
  '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}/records':
    post:
      summary: Produce Records
      operationId: produceRecord
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Produce records to the given topic, returning delivery reports for each
        record produced. This API can be used in streaming mode by setting
        "Transfer-Encoding: chunked" header. For as long as the connection is
        kept open, the server will keep accepting records. Records are streamed
        to and from the server as Concatenated JSON. For each record sent to the
        server, the server will asynchronously send back a delivery report, in
        the same order, each with its own error_code. An error_code of 200
        indicates success. The HTTP status code will be HTTP 200 OK as long as
        the connection is successfully established. To identify records that
        have encountered an error, check the error_code of each delivery report.

        Note that the cluster_id is validated only when running in Confluent Cloud.

        This API currently does not support Schema Registry integration. Sending
        schemas is not supported. Only BINARY, JSON, and STRING formats are
        supported.
      tags:
        - Records (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/ProduceRequest'
      responses:
        '200':
          $ref: '#/components/responses/ProduceResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse_ProduceRecords'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '403':
          $ref: '#/components/responses/ForbiddenErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '413':
          $ref: '#/components/responses/RequestEntityTooLargeErrorResponse'
        '415':
          $ref: '#/components/responses/UnsupportedMediaTypeErrorResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntity_ProduceRecord'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"partition_id":0,"headers":[{"name":"string","value":"string"}],"key":{"type":"string","data":null},"value":{"type":"string","data":null},"timestamp":"2019-08-24T14:15:22Z"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"partition_id\":0,\"headers\":[{\"name\":\"string\",\"value\":\"string\"}],\"key\":{\"type\":\"string\",\"data\":null},\"value\":{\"type\":\"string\",\"data\":null},\"timestamp\":\"2019-08-24T14:15:22Z\"}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records\"\n\n\tpayload := strings.NewReader(\"{\\\"partition_id\\\":0,\\\"headers\\\":[{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"key\\\":{\\\"type\\\":\\\"string\\\",\\\"data\\\":null},\\\"value\\\":{\\\"type\\\":\\\"string\\\",\\\"data\\\":null},\\\"timestamp\\\":\\\"2019-08-24T14:15:22Z\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"partition_id\":0,\"headers\":[{\"name\":\"string\",\"value\":\"string\"}],\"key\":{\"type\":\"string\",\"data\":null},\"value\":{\"type\":\"string\",\"data\":null},\"timestamp\":\"2019-08-24T14:15:22Z\"}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/topics/topic-1/records", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/records",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              partition_id: 0,
              headers: [{name: 'string', value: 'string'}],
              key: {type: 'string', data: null},
              value: {type: 'string', data: null},
              timestamp: '2019-08-24T14:15:22Z'
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"partition_id\":0,\"headers\":[{\"name\":\"string\",\"value\":\"string\"}],\"key\":{\"type\":\"string\",\"data\":null},\"value\":{\"type\":\"string\",\"data\":null},\"timestamp\":\"2019-08-24T14:15:22Z\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/records");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"partition_id\":0,\"headers\":[{\"name\":\"string\",\"value\":\"string\"}],\"key\":{\"type\":\"string\",\"data\":null},\"value\":{\"type\":\"string\",\"data\":null},\"timestamp\":\"2019-08-24T14:15:22Z\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/TopicName'
  '/kafka/v3/clusters/{cluster_id}/links':
    get:
      summary: List all cluster links in the dest cluster
      operationId: listKafkaLinks
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        ``link_id`` in ``ListLinksResponseData`` is deprecated and may be removed in a future release. Use the new ``cluster_link_id`` instead.
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/ListLinksResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/links", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
    post:
      summary: Create a cluster link
      operationId: createKafkaLink
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Cluster link creation requires source cluster security configurations in
        the configs JSON section of the data request payload.
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      parameters:
        - $ref: '#/components/parameters/ClusterId'
      requestBody:
        $ref: '#/components/requestBodies/CreateLinkRequest'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"source_cluster_id":"string","destination_cluster_id":"string","remote_cluster_id":"string","cluster_link_id":"string","configs":[{"name":"name","value":"value"}]}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"source_cluster_id\":\"string\",\"destination_cluster_id\":\"string\",\"remote_cluster_id\":\"string\",\"cluster_link_id\":\"string\",\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links\"\n\n\tpayload := strings.NewReader(\"{\\\"source_cluster_id\\\":\\\"string\\\",\\\"destination_cluster_id\\\":\\\"string\\\",\\\"remote_cluster_id\\\":\\\"string\\\",\\\"cluster_link_id\\\":\\\"string\\\",\\\"configs\\\":[{\\\"name\\\":\\\"name\\\",\\\"value\\\":\\\"value\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"source_cluster_id\":\"string\",\"destination_cluster_id\":\"string\",\"remote_cluster_id\":\"string\",\"cluster_link_id\":\"string\",\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/links", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              source_cluster_id: 'string',
              destination_cluster_id: 'string',
              remote_cluster_id: 'string',
              cluster_link_id: 'string',
              configs: [{name: 'name', value: 'value'}]
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"source_cluster_id\":\"string\",\"destination_cluster_id\":\"string\",\"remote_cluster_id\":\"string\",\"cluster_link_id\":\"string\",\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"source_cluster_id\":\"string\",\"destination_cluster_id\":\"string\",\"remote_cluster_id\":\"string\",\"cluster_link_id\":\"string\",\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
  '/kafka/v3/clusters/{cluster_id}/links/{link_name}':
    get:
      summary: Describe the cluster link
      operationId: getKafkaLink
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        ``link_id`` in ``ListLinksResponseData`` is deprecated and may be removed in a future release. Use the new ``cluster_link_id`` instead.
      tags:
        - Cluster Linking (v3)
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/GetLinkResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1 \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
    delete:
      summary: Delete the cluster link
      operationId: deleteKafkaLink
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
      responses:
        '200':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1 \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1")
              .delete(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("DELETE", "/kafka/v3/clusters/cluster-1/links/link-sb1", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1");
            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/kafka/v3/clusters/{cluster_id}/topics/{topic_name}/default-configs':
    get:
      summary: List New Topic Default Configs
      operationId: listKafkaDefaultTopicConfigs
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        List the default configuration parameters used if the topic were to be newly created.
      tags:
        - Configs (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/ListTopicConfigsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/topics/topic-1/default-configs");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/TopicName'
  '/kafka/v3/clusters/{cluster_id}/links/{link_name}/configs':
    get:
      summary: List all configs of the cluster link
      operationId: listKafkaLinkConfigs
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/ListLinkConfigsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
  '/kafka/v3/clusters/{cluster_id}/links/{link_name}/configs/{config_name}':
    get:
      summary: Describe the config under the cluster link
      operationId: getKafkaLinkConfigs
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/GetLinkConfigsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
        - $ref: '#/components/parameters/LinkConfigName'
    put:
      summary: Alter the config under the cluster link
      operationId: updateKafkaLinkConfig
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/UpdateLinkConfigRequest'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"value":"string"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"value\":\"string\"}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable")
              .put(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable\"\n\n\tpayload := strings.NewReader(\"{\\\"value\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"value\":\"string\"}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("PUT", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({value: 'string'}));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"value\":\"string\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"value\":\"string\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
        - $ref: '#/components/parameters/LinkConfigName'
    delete:
      summary: Reset the given config to default value
      operationId: deleteKafkaLinkConfig
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request DELETE \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable")
              .delete(null)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("DELETE", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "DELETE");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs/consumer.offset.sync.enable");
            var request = new RestRequest(Method.DELETE);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
        - $ref: '#/components/parameters/LinkConfigName'
  '/kafka/v3/clusters/{cluster_id}/links/{link_name}/configs:alter':
    put:
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Batch Alter Cluster Link Configs
      operationId: updateKafkaLinkConfigBatch
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
      requestBody:
        $ref: '#/components/requestBodies/AlterLinkConfigBatchRequest'
      responses:
        '204':
          description: No Content
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      summary: Batch Alter Cluster Link Configs
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request PUT \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"data":[{"name":"string","value":"string","operation":"string"}],"validate_only":true}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter")
              .put(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":[{\\\"name\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\",\\\"operation\\\":\\\"string\\\"}],\\\"validate_only\\\":true}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("PUT", "/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PUT",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              data: [{name: 'string', value: 'string', operation: 'string'}],
              validate_only: true
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/configs:alter");
            var request = new RestRequest(Method.PUT);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"data\":[{\"name\":\"string\",\"value\":\"string\",\"operation\":\"string\"}],\"validate_only\":true}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
  '/kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors':
    post:
      summary: Create a mirror topic
      operationId: createKafkaMirrorTopic
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        Create a topic in the destination cluster mirroring a topic in
        the source cluster
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/CreateMirrorTopicRequest'
      responses:
        '204':
          $ref: '#/components/responses/NoContentResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"source_topic_name":"string","mirror_topic_name":"string","replication_factor":0,"configs":[{"name":"name","value":"value"}]}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"source_topic_name\":\"string\",\"mirror_topic_name\":\"string\",\"replication_factor\":0,\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors\"\n\n\tpayload := strings.NewReader(\"{\\\"source_topic_name\\\":\\\"string\\\",\\\"mirror_topic_name\\\":\\\"string\\\",\\\"replication_factor\\\":0,\\\"configs\\\":[{\\\"name\\\":\\\"name\\\",\\\"value\\\":\\\"value\\\"}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"source_topic_name\":\"string\",\"mirror_topic_name\":\"string\",\"replication_factor\":0,\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              source_topic_name: 'string',
              mirror_topic_name: 'string',
              replication_factor: 0,
              configs: [{name: 'name', value: 'value'}]
            }));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"source_topic_name\":\"string\",\"mirror_topic_name\":\"string\",\"replication_factor\":0,\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"source_topic_name\":\"string\",\"mirror_topic_name\":\"string\",\"replication_factor\":0,\"configs\":[{\"name\":\"name\",\"value\":\"value\"}]}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
    get:
      summary: List mirror topics
      operationId: listKafkaMirrorTopicsUnderLink
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        List all mirror topics under the link
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
      responses:
        '200':
          $ref: '#/components/responses/ListMirrorTopicsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url 'https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE' \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors?mirror_status=ACTIVE");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/kafka/v3/clusters/{cluster_id}/links/-/mirrors':
    get:
      summary: List mirror topics
      operationId: listKafkaMirrorTopics
      description: |-
        [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)

        List all mirror topics in the cluster
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      parameters:
        - $ref: '#/components/parameters/ClusterId'
      responses:
        '200':
          $ref: '#/components/responses/ListMirrorTopicsResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/links/-/mirrors", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/-/mirrors",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/-/mirrors");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors/{mirror_topic_name}':
    get:
      summary: Describe the mirror topic
      operationId: readKafkaMirrorTopic
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      tags:
        - Cluster Linking (v3)
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
        - $ref: '#/components/parameters/MirrorTopicName'
      security:
        - resource-api-key: []
        - external-access-token: []
      responses:
        '200':
          $ref: '#/components/responses/DescribeMirrorTopicResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request GET \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1 \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1")
              .get()
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("GET", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "GET");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors/topic-1");
            var request = new RestRequest(Method.GET);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            IRestResponse response = client.Execute(request);
  '/kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:promote':
    post:
      summary: Promote the mirror topics
      operationId: updateKafkaMirrorTopicsPromote
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        '200':
          $ref: '#/components/responses/AlterMirrorStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"mirror_topic_names":["string"],"mirror_topic_name_pattern":"string"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote\"\n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\"],\\\"mirror_topic_name_pattern\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({mirror_topic_names: ['string'], mirror_topic_name_pattern: 'string'}));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:promote");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
        - $ref: '#/components/parameters/ValidateOnly'
  '/kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:failover':
    post:
      summary: Failover the mirror topics
      operationId: updateKafkaMirrorTopicsFailover
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        '200':
          $ref: '#/components/responses/AlterMirrorStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"mirror_topic_names":["string"],"mirror_topic_name_pattern":"string"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover\"\n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\"],\\\"mirror_topic_name_pattern\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({mirror_topic_names: ['string'], mirror_topic_name_pattern: 'string'}));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:failover");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
        - $ref: '#/components/parameters/ValidateOnly'
  '/kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:pause':
    post:
      summary: Pause the mirror topics
      operationId: updateKafkaMirrorTopicsPause
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        '200':
          $ref: '#/components/responses/AlterMirrorStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"mirror_topic_names":["string"],"mirror_topic_name_pattern":"string"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause\"\n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\"],\\\"mirror_topic_name_pattern\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({mirror_topic_names: ['string'], mirror_topic_name_pattern: 'string'}));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:pause");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
        - $ref: '#/components/parameters/ValidateOnly'
  '/kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:resume':
    post:
      summary: Resume the mirror topics
      operationId: updateKafkaMirrorTopicsResume
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        '200':
          $ref: '#/components/responses/AlterMirrorStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"mirror_topic_names":["string"],"mirror_topic_name_pattern":"string"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume\"\n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\"],\\\"mirror_topic_name_pattern\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({mirror_topic_names: ['string'], mirror_topic_name_pattern: 'string'}));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:resume");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
        - $ref: '#/components/parameters/ValidateOnly'
  '/kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:reverse-and-start-mirror':
    post:
      summary: Reverse the local mirror topic and start the remote mirror topic
      operationId: updateKafkaMirrorTopicsReverseAndStartMirror
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        '200':
          $ref: '#/components/responses/AlterMirrorStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-start-mirror \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"mirror_topic_names":["string"],"mirror_topic_name_pattern":"string"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-start-mirror")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-start-mirror\"\n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\"],\\\"mirror_topic_name_pattern\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-start-mirror", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-start-mirror",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({mirror_topic_names: ['string'], mirror_topic_name_pattern: 'string'}));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-start-mirror");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-start-mirror");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
        - $ref: '#/components/parameters/ValidateOnly'
  '/kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:reverse-and-pause-mirror':
    post:
      summary: Reverse the local mirror topic and Pause the remote mirror topic
      operationId: updateKafkaMirrorTopicsReverseAndPauseMirror
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        '200':
          $ref: '#/components/responses/AlterMirrorStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-pause-mirror \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"mirror_topic_names":["string"],"mirror_topic_name_pattern":"string"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-pause-mirror")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-pause-mirror\"\n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\"],\\\"mirror_topic_name_pattern\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-pause-mirror", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-pause-mirror",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({mirror_topic_names: ['string'], mirror_topic_name_pattern: 'string'}));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-pause-mirror");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:reverse-and-pause-mirror");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
        - $ref: '#/components/parameters/ValidateOnly'
  '/kafka/v3/clusters/{cluster_id}/links/{link_name}/mirrors:truncate-and-restore':
    post:
      summary: Truncates the local topic to the remote stopped mirror log end offsets and restores mirroring to the local topic to mirror from the remote topic
      operationId: updateKafkaMirrorTopicsTruncateAndRestoreMirror
      description: '[![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)'
      tags:
        - Cluster Linking (v3)
      security:
        - resource-api-key: []
        - external-access-token: []
      requestBody:
        $ref: '#/components/requestBodies/AlterMirrorsRequest'
      responses:
        '200':
          $ref: '#/components/responses/AlterMirrorStatusResponse'
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        5XX:
          $ref: '#/components/responses/ServerErrorResponse'
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --request POST \
              --url https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:truncate-and-restore \
              --header 'Authorization: Basic REPLACE_BASIC_AUTH' \
              --data '{"mirror_topic_names":["string"],"mirror_topic_name_pattern":"string"}'
        - lang: Java
          source: |-
            OkHttpClient client = new OkHttpClient();

            MediaType mediaType = MediaType.parse("application/json");
            RequestBody body = RequestBody.create(mediaType, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");
            Request request = new Request.Builder()
              .url("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:truncate-and-restore")
              .post(body)
              .addHeader("Authorization", "Basic REPLACE_BASIC_AUTH")
              .build();

            Response response = client.newCall(request).execute();
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:truncate-and-restore\"\n\n\tpayload := strings.NewReader(\"{\\\"mirror_topic_names\\\":[\\\"string\\\"],\\\"mirror_topic_name_pattern\\\":\\\"string\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Basic REPLACE_BASIC_AUTH\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: Python
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("pkc-00000.region.provider.confluent.cloud")

            payload = "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}"

            headers = { 'Authorization': "Basic REPLACE_BASIC_AUTH" }

            conn.request("POST", "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:truncate-and-restore", payload, headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "pkc-00000.region.provider.confluent.cloud",
              "port": null,
              "path": "/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:truncate-and-restore",
              "headers": {
                "Authorization": "Basic REPLACE_BASIC_AUTH"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({mirror_topic_names: ['string'], mirror_topic_name_pattern: 'string'}));
            req.end();
        - lang: C
          source: |-
            CURL *hnd = curl_easy_init();

            curl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, "POST");
            curl_easy_setopt(hnd, CURLOPT_URL, "https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:truncate-and-restore");

            struct curl_slist *headers = NULL;
            headers = curl_slist_append(headers, "Authorization: Basic REPLACE_BASIC_AUTH");
            curl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);

            curl_easy_setopt(hnd, CURLOPT_POSTFIELDS, "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}");

            CURLcode ret = curl_easy_perform(hnd);
        - lang: C#
          source: |-
            var client = new RestClient("https://pkc-00000.region.provider.confluent.cloud/kafka/v3/clusters/cluster-1/links/link-sb1/mirrors:truncate-and-restore");
            var request = new RestRequest(Method.POST);
            request.AddHeader("Authorization", "Basic REPLACE_BASIC_AUTH");
            request.AddParameter("undefined", "{\"mirror_topic_names\":[\"string\"],\"mirror_topic_name_pattern\":\"string\"}", ParameterType.RequestBody);
            IRestResponse response = client.Execute(request);
      parameters:
        - $ref: '#/components/parameters/ClusterId'
        - $ref: '#/components/parameters/LinkName'
        - $ref: '#/components/parameters/IncludePartitionLevelTruncationData'
        - $ref: '#/components/parameters/ValidateOnly'
