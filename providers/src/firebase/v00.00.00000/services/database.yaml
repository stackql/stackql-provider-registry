openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Firebase Realtime Database Management API
  description: >-
    The Firebase Realtime Database API enables programmatic provisioning and
    management of Realtime Database instances.
  version: v1beta
  x-discovery-doc-revision: '20250826'
  x-generated-date: '2025-08-28'
externalDocs:
  url: >-
    https://firebase.google.com/docs/reference/rest/database/database-management/rest/
servers:
  - url: https://firebasedatabase.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
            https://www.googleapis.com/auth/cloud-platform.read-only: >-
              View your data across Google Cloud services and see the email
              address of your Google Account
            https://www.googleapis.com/auth/firebase: View and administer all your Firebase data and settings
            https://www.googleapis.com/auth/firebase.readonly: View all your Firebase data and settings
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    DatabaseInstance:
      id: DatabaseInstance
      description: >-
        Representation of a Realtime Database instance. Details on interacting
        with contents of a DatabaseInstance can be found at:
        https://firebase.google.com/docs/database/rest/start.
      type: object
      properties:
        name:
          description: >-
            The fully qualified resource name of the database instance, in the
            form:
            `projects/{project-number}/locations/{location-id}/instances/{database-id}`.
          type: string
        project:
          description: >-
            Output only. The resource name of the project this instance belongs
            to. For example: `projects/{project-number}`.
          readOnly: true
          type: string
        databaseUrl:
          description: >-
            Output only. Output Only. The globally unique hostname of the
            database.
          readOnly: true
          type: string
        type:
          description: >-
            Immutable. The database instance type. On creation only
            USER_DATABASE is allowed, which is also the default when omitted.
          type: string
          enumDescriptions:
            - >-
              Unknown state, likely the result of an error on the backend. This
              is only used for distinguishing unset values.
            - >-
              The default database that is provisioned when a project is
              created.
            - A database that the user created.
          enum:
            - DATABASE_INSTANCE_TYPE_UNSPECIFIED
            - DEFAULT_DATABASE
            - USER_DATABASE
        state:
          description: Output only. The database's lifecycle state. Read-only.
          readOnly: true
          type: string
          enumDescriptions:
            - >-
              Unspecified state, likely the result of an error on the backend.
              This is only used for distinguishing unset values.
            - The normal and active state.
            - The database is in a disabled state. It can be re-enabled later.
            - The database is in a deleted state.
          enum:
            - LIFECYCLE_STATE_UNSPECIFIED
            - ACTIVE
            - DISABLED
            - DELETED
    ListDatabaseInstancesResponse:
      id: ListDatabaseInstancesResponse
      description: The response from the ListDatabaseInstances method.
      type: object
      properties:
        instances:
          description: >-
            List of each DatabaseInstance that is in the parent Firebase
            project.
          type: array
          items:
            $ref: '#/components/schemas/DatabaseInstance'
        nextPageToken:
          description: >-
            If the result list is too large to fit in a single response, then a
            token is returned. If the string is empty, then this response is the
            last page of results. This token can be used in a subsequent call to
            `ListDatabaseInstances` to find the next group of database
            instances. Page tokens are short-lived and should not be persisted.
          type: string
    UndeleteDatabaseInstanceRequest:
      id: UndeleteDatabaseInstanceRequest
      description: The request sent to UndeleteDatabaseInstance method.
      type: object
      properties: {}
    DisableDatabaseInstanceRequest:
      id: DisableDatabaseInstanceRequest
      description: The request sent to the DisableDatabaseInstance method.
      type: object
      properties: {}
    ReenableDatabaseInstanceRequest:
      id: ReenableDatabaseInstanceRequest
      description: The request sent to the ReenableDatabaseInstance method.
      type: object
      properties: {}
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    instances:
      id: firebase.database.instances
      name: instances
      title: Instances
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1beta~1projects~1{projectsId}~1locations~1{locationsId}~1instances/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1beta~1projects~1{projectsId}~1locations~1{locationsId}~1instances/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.instances
        get:
          operation:
            $ref: >-
              #/paths/~1v1beta~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1beta~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        undelete:
          operation:
            $ref: >-
              #/paths/~1v1beta~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}:undelete/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        disable:
          operation:
            $ref: >-
              #/paths/~1v1beta~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}:disable/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        reenable:
          operation:
            $ref: >-
              #/paths/~1v1beta~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}:reenable/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/instances/methods/get'
          - $ref: '#/components/x-stackQL-resources/instances/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/instances/methods/create'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/instances/methods/delete'
paths:
  /v1beta/projects/{projectsId}/locations/{locationsId}/instances:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    post:
      description: >-
        Requests that a new DatabaseInstance be created. The state of a
        successfully created DatabaseInstance is ACTIVE. Only available for
        projects on the Blaze plan. Projects can be upgraded using the Cloud
        Billing API
        https://cloud.google.com/billing/reference/rest/v1/projects/updateBillingInfo.
        Note that it might take a few minutes for billing enablement state to
        propagate to Firebase systems.
      operationId: firebasedatabase.projects.locations.instances.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DatabaseInstance'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseInstance'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: databaseId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
    get:
      description: >-
        Lists each DatabaseInstance associated with the specified parent
        project. The list items are returned in no particular order, but will be
        a consistent view of the database instances when additional requests are
        made with a `pageToken`. The resulting list contains instances in any
        STATE. The list results may be stale by a few seconds. Use
        GetDatabaseInstance for consistent reads.
      operationId: firebasedatabase.projects.locations.instances.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
        - Oauth2:
            - https://www.googleapis.com/auth/firebase.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/firebase.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDatabaseInstancesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: showDeleted
          schema:
            type: boolean
  /v1beta/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:
    parameters: *ref_1
    get:
      description: Gets the DatabaseInstance identified by the specified resource name.
      operationId: firebasedatabase.projects.locations.instances.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform.read-only
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform.read-only
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
        - Oauth2:
            - https://www.googleapis.com/auth/firebase.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/firebase.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseInstance'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Marks a DatabaseInstance to be deleted. The DatabaseInstance will be set
        to the DELETED state for 20 days, and will be purged within 30 days. The
        default database cannot be deleted. IDs for deleted database instances
        may never be recovered or re-used. The Database may only be deleted if
        it is already in a DISABLED state.
      operationId: firebasedatabase.projects.locations.instances.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseInstance'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
  /v1beta/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:undelete:
    parameters: *ref_1
    post:
      description: >-
        Restores a DatabaseInstance that was previously marked to be deleted.
        After the delete method is used, DatabaseInstances are set to the
        DELETED state for 20 days, and will be purged within 30 days. Databases
        in the DELETED state can be undeleted without losing any data. This
        method may only be used on a DatabaseInstance in the DELETED state.
        Purged DatabaseInstances may not be recovered.
      operationId: firebasedatabase.projects.locations.instances.undelete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UndeleteDatabaseInstanceRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseInstance'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
  /v1beta/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:disable:
    parameters: *ref_1
    post:
      description: >-
        Disables a DatabaseInstance. The database can be re-enabled later using
        ReenableDatabaseInstance. When a database is disabled, all reads and
        writes are denied, including view access in the Firebase console.
      operationId: firebasedatabase.projects.locations.instances.disable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisableDatabaseInstanceRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseInstance'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
  /v1beta/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:reenable:
    parameters: *ref_1
    post:
      description: >-
        Enables a DatabaseInstance. The database must have been disabled
        previously using DisableDatabaseInstance. The state of a successfully
        reenabled DatabaseInstance is ACTIVE.
      operationId: firebasedatabase.projects.locations.instances.reenable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReenableDatabaseInstanceRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseInstance'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
