openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Firebase App Distribution API
  description: ''
  version: v1
  x-discovery-doc-revision: '20250827'
  x-generated-date: '2025-08-28'
externalDocs:
  url: https://firebase.google.com/products/app-distribution
servers:
  - url: https://firebaseappdistribution.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    GoogleLongrunningListOperationsResponse:
      id: GoogleLongrunningListOperationsResponse
      description: The response message for Operations.ListOperations.
      type: object
      properties:
        operations:
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/GoogleLongrunningOperation'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    GoogleLongrunningOperation:
      id: GoogleLongrunningOperation
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      type: object
      properties:
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
          type: string
        metadata:
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
          type: boolean
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/GoogleRpcStatus'
        response:
          description: >-
            The normal, successful response of the operation. If the original
            method returns no data on success, such as `Delete`, the response is
            `google.protobuf.Empty`. If the original method is standard
            `Get`/`Create`/`Update`, the response should be the resource. For
            other methods, the response should have the type `XxxResponse`,
            where `Xxx` is the original method name. For example, if the
            original method name is `TakeSnapshot()`, the inferred response type
            is `TakeSnapshotResponse`.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    GoogleRpcStatus:
      id: GoogleRpcStatus
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      type: object
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    GoogleProtobufEmpty:
      id: GoogleProtobufEmpty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    GoogleLongrunningCancelOperationRequest:
      id: GoogleLongrunningCancelOperationRequest
      description: The request message for Operations.CancelOperation.
      type: object
      properties: {}
    GoogleLongrunningWaitOperationRequest:
      id: GoogleLongrunningWaitOperationRequest
      description: The request message for Operations.WaitOperation.
      type: object
      properties:
        timeout:
          description: >-
            The maximum duration to wait before timing out. If left blank, the
            wait will be at most the time permitted by the underlying HTTP/RPC
            protocol. If RPC context deadline is also specified, the shorter one
            will be used.
          type: string
          format: google-duration
    GoogleFirebaseAppdistroV1AabInfo:
      id: GoogleFirebaseAppdistroV1AabInfo
      description: Android App Bundle (AAB) information for a Firebase app.
      type: object
      properties:
        name:
          description: >-
            The name of the `AabInfo` resource. Format:
            `projects/{project_number}/apps/{app}/aabInfo`
          type: string
        integrationState:
          description: App bundle integration state. Only valid for android apps.
          type: string
          enumDescriptions:
            - Aab integration state unspecified
            - App can receive app bundle uploads
            - Firebase project is not linked to a Play developer account
            - >-
              There is no app in linked Play developer account with the same
              bundle id
            - The app in Play developer account is not in a published state
            - Play App status is unavailable
            - Play IAS terms not accepted
          enum:
            - AAB_INTEGRATION_STATE_UNSPECIFIED
            - INTEGRATED
            - PLAY_ACCOUNT_NOT_LINKED
            - NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT
            - APP_NOT_PUBLISHED
            - AAB_STATE_UNAVAILABLE
            - PLAY_IAS_TERMS_NOT_ACCEPTED
        testCertificate:
          description: >-
            App bundle test certificate generated for the app. Set after the
            first app bundle is uploaded for this app.
          $ref: '#/components/schemas/GoogleFirebaseAppdistroV1TestCertificate'
    GoogleFirebaseAppdistroV1TestCertificate:
      id: GoogleFirebaseAppdistroV1TestCertificate
      description: App bundle test certificate
      type: object
      properties:
        hashSha1:
          description: >-
            Hex string of SHA1 hash of the test certificate used to resign the
            AAB
          type: string
        hashSha256:
          description: >-
            Hex string of SHA256 hash of the test certificate used to resign the
            AAB
          type: string
        hashMd5:
          description: >-
            Hex string of MD5 hash of the test certificate used to resign the
            AAB
          type: string
    GoogleFirebaseAppdistroV1UploadReleaseRequest:
      id: GoogleFirebaseAppdistroV1UploadReleaseRequest
      description: Request message for `UploadRelease`.
      type: object
      properties:
        blob:
          description: Binary to upload
          $ref: '#/components/schemas/GdataMedia'
    GdataMedia:
      id: GdataMedia
      description: A reference to data stored on the filesystem, on GFS or in blobstore.
      type: object
      properties:
        contentType:
          description: MIME type of the data
          type: string
        timestamp:
          description: >-
            Time at which the media data was last updated, in milliseconds since
            UNIX epoch
          type: string
          format: uint64
        token:
          description: A unique fingerprint/version id for the media data
          type: string
        length:
          description: Size of the data, in bytes
          type: string
          format: int64
        filename:
          description: Original file name
          type: string
        referenceType:
          description: Describes what the field reference contains.
          type: string
          enumDescriptions:
            - Reference contains a GFS path or a local path.
            - >-
              Reference points to a blobstore object. This could be either a v1
              blob_ref or a v2 blobstore2_info. Clients should check
              blobstore2_info first, since v1 is being deprecated.
            - Data is included into this proto buffer
            - >-
              Data should be accessed from the current service using the
              operation GetMedia.
            - >-
              The content for this media object is stored across multiple
              partial media objects under the composite_media field.
            - Reference points to a bigstore object
            - Indicates the data is stored in diff_version_response.
            - Indicates the data is stored in diff_checksums_response.
            - Indicates the data is stored in diff_download_response.
            - Indicates the data is stored in diff_upload_request.
            - Indicates the data is stored in diff_upload_response.
            - Indicates the data is stored in cosmo_binary_reference.
            - >-
              Informs Scotty to generate a response payload with the size
              specified in the length field. The contents of the payload are
              generated by Scotty and are undefined. This is useful for testing
              download speeds between the user and Scotty without involving a
              real payload source. Note: range is not supported when using
              arbitrary_bytes.
          enum:
            - PATH
            - BLOB_REF
            - INLINE
            - GET_MEDIA
            - COMPOSITE_MEDIA
            - BIGSTORE_REF
            - DIFF_VERSION_RESPONSE
            - DIFF_CHECKSUMS_RESPONSE
            - DIFF_DOWNLOAD_RESPONSE
            - DIFF_UPLOAD_REQUEST
            - DIFF_UPLOAD_RESPONSE
            - COSMO_BINARY_REFERENCE
            - ARBITRARY_BYTES
        path:
          description: Path to the data, set if reference_type is PATH
          type: string
        blobRef:
          description: >-
            Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This
            should be the byte representation of a blobstore.BlobRef. Since
            Blobstore is deprecating v1, use blobstore2_info instead. For now,
            any v2 blob will also be represented in this field as v1 BlobRef.
          deprecated: true
          type: string
          format: byte
        inline:
          description: Media data, set if reference_type is INLINE
          type: string
          format: byte
        mediaId:
          description: >-
            Media id to forward to the operation GetMedia. Can be set if
            reference_type is GET_MEDIA.
          type: string
          format: byte
        hash:
          description: >-
            Deprecated, use one of explicit hash type fields instead. These two
            hash related fields will only be populated on Scotty based media
            uploads and will contain the content of the hash group in the
            NotificationRequest:
            http://cs/#google3/blobstore2/api/scotty/service/proto/upload_listener.proto&q=class:Hash
            Hex encoded hash value of the uploaded media.
          deprecated: true
          type: string
        algorithm:
          description: >-
            Deprecated, use one of explicit hash type fields instead. Algorithm
            used for calculating the hash. As of 2011/01/21, "MD5" is the only
            possible value for this field. New values may be added at any time.
          deprecated: true
          type: string
        compositeMedia:
          description: >-
            A composite media composed of one or more media objects, set if
            reference_type is COMPOSITE_MEDIA. The media length field must be
            set to the sum of the lengths of all composite media objects. Note:
            All composite media must have length specified.
          type: array
          items:
            $ref: '#/components/schemas/GdataCompositeMedia'
        bigstoreObjectRef:
          description: Use object_id instead.
          deprecated: true
          type: string
          format: byte
        objectId:
          description: Reference to a TI Blob, set if reference_type is BIGSTORE_REF.
          $ref: '#/components/schemas/GdataObjectId'
        blobstore2Info:
          description: >-
            Blobstore v2 info, set if reference_type is BLOBSTORE_REF and it
            refers to a v2 blob.
          $ref: '#/components/schemas/GdataBlobstore2Info'
        diffVersionResponse:
          description: Set if reference_type is DIFF_VERSION_RESPONSE.
          $ref: '#/components/schemas/GdataDiffVersionResponse'
        diffChecksumsResponse:
          description: Set if reference_type is DIFF_CHECKSUMS_RESPONSE.
          $ref: '#/components/schemas/GdataDiffChecksumsResponse'
        diffDownloadResponse:
          description: Set if reference_type is DIFF_DOWNLOAD_RESPONSE.
          $ref: '#/components/schemas/GdataDiffDownloadResponse'
        diffUploadRequest:
          description: Set if reference_type is DIFF_UPLOAD_REQUEST.
          $ref: '#/components/schemas/GdataDiffUploadRequest'
        diffUploadResponse:
          description: Set if reference_type is DIFF_UPLOAD_RESPONSE.
          $ref: '#/components/schemas/GdataDiffUploadResponse'
        contentTypeInfo:
          description: Extended content type information provided for Scotty uploads.
          $ref: '#/components/schemas/GdataContentTypeInfo'
        downloadParameters:
          description: Parameters for a media download.
          $ref: '#/components/schemas/GdataDownloadParameters'
        crc32cHash:
          description: >-
            For Scotty Uploads: Scotty-provided hashes for uploads For Scotty
            Downloads: (WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY
            TEAM.) A Hash provided by the agent to be used to verify the data
            being downloaded. Currently only supported for inline payloads.
            Further, only crc32c_hash is currently supported.
          type: integer
          format: uint32
        md5Hash:
          description: Scotty-provided MD5 hash for an upload.
          type: string
          format: byte
        sha1Hash:
          description: Scotty-provided SHA1 hash for an upload.
          type: string
          format: byte
        sha256Hash:
          description: Scotty-provided SHA256 hash for an upload.
          type: string
          format: byte
        isPotentialRetry:
          description: >-
            |is_potential_retry| is set false only when Scotty is certain that
            it has not sent the request before. When a client resumes an upload,
            this field must be set true in agent calls, because Scotty cannot be
            certain that it has never sent the request before due to potential
            failure in the session state persistence.
          type: boolean
        cosmoBinaryReference:
          description: >-
            A binary data reference for a media download. Serves as a
            technology-agnostic binary reference in some Google infrastructure.
            This value is a serialized storage_cosmo.BinaryReference proto.
            Storing it as bytes is a hack to get around the fact that the cosmo
            proto (as well as others it includes) doesn't support JavaScript.
            This prevents us from including the actual type of this field.
          type: string
          format: byte
        hashVerified:
          description: >-
            For Scotty uploads only. If a user sends a hash code and the backend
            has requested that Scotty verify the upload against the client hash,
            Scotty will perform the check on behalf of the backend and will
            reject it if the hashes don't match. This is set to true if Scotty
            performed this verification.
          type: boolean
    GdataCompositeMedia:
      id: GdataCompositeMedia
      description: >-
        A sequence of media data references representing composite data.
        Introduced to support Bigstore composite objects. For details, visit
        http://go/bigstore-composites.
      type: object
      properties:
        length:
          description: Size of the data, in bytes
          type: string
          format: int64
        referenceType:
          description: Describes what the field reference contains.
          type: string
          enumDescriptions:
            - Reference contains a GFS path or a local path.
            - >-
              Reference points to a blobstore object. This could be either a v1
              blob_ref or a v2 blobstore2_info. Clients should check
              blobstore2_info first, since v1 is being deprecated.
            - Data is included into this proto buffer
            - Reference points to a bigstore object
            - Indicates the data is stored in cosmo_binary_reference.
          enum:
            - PATH
            - BLOB_REF
            - INLINE
            - BIGSTORE_REF
            - COSMO_BINARY_REFERENCE
        path:
          description: Path to the data, set if reference_type is PATH
          type: string
        blobRef:
          description: >-
            Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This
            should be the byte representation of a blobstore.BlobRef. Since
            Blobstore is deprecating v1, use blobstore2_info instead. For now,
            any v2 blob will also be represented in this field as v1 BlobRef.
          deprecated: true
          type: string
          format: byte
        inline:
          description: Media data, set if reference_type is INLINE
          type: string
          format: byte
        objectId:
          description: Reference to a TI Blob, set if reference_type is BIGSTORE_REF.
          $ref: '#/components/schemas/GdataObjectId'
        blobstore2Info:
          description: >-
            Blobstore v2 info, set if reference_type is BLOBSTORE_REF and it
            refers to a v2 blob.
          $ref: '#/components/schemas/GdataBlobstore2Info'
        cosmoBinaryReference:
          description: >-
            A binary data reference for a media download. Serves as a
            technology-agnostic binary reference in some Google infrastructure.
            This value is a serialized storage_cosmo.BinaryReference proto.
            Storing it as bytes is a hack to get around the fact that the cosmo
            proto (as well as others it includes) doesn't support JavaScript.
            This prevents us from including the actual type of this field.
          type: string
          format: byte
        crc32cHash:
          description: crc32.c hash for the payload.
          type: integer
          format: uint32
        md5Hash:
          description: MD5 hash for the payload.
          type: string
          format: byte
        sha1Hash:
          description: SHA-1 hash for the payload.
          type: string
          format: byte
    GdataObjectId:
      id: GdataObjectId
      description: >-
        This is a copy of the tech.blob.ObjectId proto, which could not be used
        directly here due to transitive closure issues with JavaScript support;
        see http://b/8801763.
      type: object
      properties:
        bucketName:
          description: The name of the bucket to which this object belongs.
          type: string
        objectName:
          description: The name of the object.
          type: string
        generation:
          description: >-
            Generation of the object. Generations are monotonically increasing
            across writes, allowing them to be be compared to determine which
            generation is newer. If this is omitted in a request, then you are
            requesting the live object. See http://go/bigstore-versions
          type: string
          format: int64
    GdataBlobstore2Info:
      id: GdataBlobstore2Info
      description: Information to read/write to blobstore2.
      type: object
      properties:
        blobId:
          description: The blob id, e.g., /blobstore/prod/playground/scotty
          type: string
        blobGeneration:
          description: The blob generation id.
          type: string
          format: int64
        readToken:
          description: >-
            The blob read token. Needed to read blobs that have not been
            replicated. Might not be available until the final call.
          type: string
        uploadMetadataContainer:
          description: >-
            Metadata passed from Blobstore -> Scotty for a new GCS upload. This
            is a signed, serialized blobstore2.BlobMetadataContainer proto which
            must never be consumed outside of Bigstore, and is not applicable to
            non-GCS media uploads.
          type: string
          format: byte
        downloadReadHandle:
          description: >-
            Read handle passed from Bigstore -> Scotty for a GCS download. This
            is a signed, serialized blobstore2.ReadHandle proto which must never
            be set outside of Bigstore, and is not applicable to non-GCS media
            downloads.
          type: string
          format: byte
    GdataDiffVersionResponse:
      id: GdataDiffVersionResponse
      description: >-
        Backend response for a Diff get version response. For details on the
        Scotty Diff protocol, visit http://go/scotty-diff-protocol.
      type: object
      properties:
        objectVersion:
          description: The version of the object stored at the server.
          type: string
        objectSizeBytes:
          description: The total size of the server object.
          type: string
          format: int64
    GdataDiffChecksumsResponse:
      id: GdataDiffChecksumsResponse
      description: >-
        Backend response for a Diff get checksums response. For details on the
        Scotty Diff protocol, visit http://go/scotty-diff-protocol.
      type: object
      properties:
        objectVersion:
          description: >-
            The object version of the object the checksums are being returned
            for.
          type: string
        objectSizeBytes:
          description: The total size of the server object.
          type: string
          format: int64
        chunkSizeBytes:
          description: The chunk size of checksums. Must be a multiple of 256KB.
          type: string
          format: int64
        checksumsLocation:
          description: >-
            Exactly one of these fields must be populated. If checksums_location
            is filled, the server will return the corresponding contents to the
            user. If object_location is filled, the server will calculate the
            checksums based on the content there and return that to the user.
            For details on the format of the checksums, see
            http://go/scotty-diff-protocol.
          $ref: '#/components/schemas/GdataCompositeMedia'
        objectLocation:
          description: >-
            If set, calculate the checksums based on the contents and return
            them to the caller.
          $ref: '#/components/schemas/GdataCompositeMedia'
    GdataDiffDownloadResponse:
      id: GdataDiffDownloadResponse
      description: >-
        Backend response for a Diff download response. For details on the Scotty
        Diff protocol, visit http://go/scotty-diff-protocol.
      type: object
      properties:
        objectLocation:
          description: The original object location.
          $ref: '#/components/schemas/GdataCompositeMedia'
    GdataDiffUploadRequest:
      id: GdataDiffUploadRequest
      description: >-
        A Diff upload request. For details on the Scotty Diff protocol, visit
        http://go/scotty-diff-protocol.
      type: object
      properties:
        objectVersion:
          description: >-
            The object version of the object that is the base version the
            incoming diff script will be applied to. This field will always be
            filled in.
          type: string
        objectInfo:
          description: >-
            The location of the new object. Agents must clone the object located
            here, as the upload server will delete the contents once a response
            is received.
          $ref: '#/components/schemas/GdataCompositeMedia'
        checksumsInfo:
          description: >-
            The location of the checksums for the new object. Agents must clone
            the object located here, as the upload server will delete the
            contents once a response is received. For details on the format of
            the checksums, see http://go/scotty-diff-protocol.
          $ref: '#/components/schemas/GdataCompositeMedia'
    GdataDiffUploadResponse:
      id: GdataDiffUploadResponse
      description: >-
        Backend response for a Diff upload request. For details on the Scotty
        Diff protocol, visit http://go/scotty-diff-protocol.
      type: object
      properties:
        objectVersion:
          description: >-
            The object version of the object at the server. Must be included in
            the end notification response. The version in the end notification
            response must correspond to the new version of the object that is
            now stored at the server, after the upload.
          type: string
        originalObject:
          description: >-
            The location of the original file for a diff upload request. Must be
            filled in if responding to an upload start notification.
          $ref: '#/components/schemas/GdataCompositeMedia'
    GdataContentTypeInfo:
      id: GdataContentTypeInfo
      description: >-
        Detailed Content-Type information from Scotty. The Content-Type of the
        media will typically be filled in by the header or Scotty's best_guess,
        but this extended information provides the backend with more information
        so that it can make a better decision if needed. This is only used on
        media upload requests from Scotty.
      type: object
      properties:
        bestGuess:
          description: Scotty's best guess of what the content type of the file is.
          type: string
        fromHeader:
          description: >-
            The content type of the file as specified in the request headers,
            multipart headers, or RUPIO start request.
          type: string
        fromFileName:
          description: >-
            The content type of the file derived from the file extension of the
            original file name used by the client.
          type: string
        fromUrlPath:
          description: >-
            The content type of the file derived from the file extension of the
            URL path. The URL path is assumed to represent a file name (which is
            typically only true for agents that are providing a REST API).
          type: string
        fromBytes:
          description: >-
            The content type of the file derived by looking at specific bytes
            (i.e. "magic bytes") of the actual file.
          type: string
    GdataDownloadParameters:
      id: GdataDownloadParameters
      description: Parameters specific to media downloads.
      type: object
      properties:
        allowGzipCompression:
          description: >-
            A boolean to be returned in the response to Scotty. Allows/disallows
            gzip encoding of the payload content when the server thinks it's
            advantageous (hence, does not guarantee compression) which allows
            Scotty to GZip the response to the client.
          type: boolean
        ignoreRange:
          description: >-
            Determining whether or not Apiary should skip the inclusion of any
            Content-Range header on its response to Scotty.
          type: boolean
    GoogleFirebaseAppdistroV1Release:
      id: GoogleFirebaseAppdistroV1Release
      description: A release of a Firebase app.
      type: object
      properties:
        name:
          description: >-
            The name of the release resource. Format:
            `projects/{project_number}/apps/{app_id}/releases/{release_id}`
          type: string
        releaseNotes:
          description: Notes of the release.
          $ref: '#/components/schemas/GoogleFirebaseAppdistroV1ReleaseNotes'
        displayVersion:
          description: >-
            Output only. Display version of the release. For an Android release,
            the display version is the `versionName`. For an iOS release, the
            display version is the `CFBundleShortVersionString`.
          readOnly: true
          type: string
        buildVersion:
          description: >-
            Output only. Build version of the release. For an Android release,
            the build version is the `versionCode`. For an iOS release, the
            build version is the `CFBundleVersion`.
          readOnly: true
          type: string
        createTime:
          description: Output only. The time the release was created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The time the release was last updated.
          readOnly: true
          type: string
          format: google-datetime
        expireTime:
          description: Output only. The time the release will expire.
          readOnly: true
          type: string
          format: google-datetime
        firebaseConsoleUri:
          description: >-
            Output only. A link to the Firebase console displaying a single
            release.
          readOnly: true
          type: string
        testingUri:
          description: >-
            Output only. A link to the release in the tester web clip or Android
            app that lets testers (which were granted access to the app) view
            release notes and install the app onto their devices.
          readOnly: true
          type: string
        binaryDownloadUri:
          description: >-
            Output only. A signed link (which expires in one hour) to directly
            download the app binary (IPA/APK/AAB) file.
          readOnly: true
          type: string
    GoogleFirebaseAppdistroV1ReleaseNotes:
      id: GoogleFirebaseAppdistroV1ReleaseNotes
      description: Notes that belong to a release.
      type: object
      properties:
        text:
          description: The text of the release notes.
          type: string
    GoogleFirebaseAppdistroV1ListReleasesResponse:
      id: GoogleFirebaseAppdistroV1ListReleasesResponse
      description: The response message for `ListReleases`.
      type: object
      properties:
        releases:
          description: The releases
          type: array
          items:
            $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Release'
        nextPageToken:
          description: >-
            A short-lived token, which can be sent as `pageToken` to retrieve
            the next page. If this field is omitted, there are no subsequent
            pages.
          type: string
    GoogleFirebaseAppdistroV1DistributeReleaseRequest:
      id: GoogleFirebaseAppdistroV1DistributeReleaseRequest
      description: The request message for `DistributeRelease`.
      type: object
      properties:
        testerEmails:
          description: >-
            Optional. A list of tester email addresses to be given access to
            this release. A combined maximum of 999 `testerEmails` and
            `groupAliases` can be specified in a single request.
          type: array
          items:
            type: string
        groupAliases:
          description: >-
            Optional. A list of group aliases (IDs) to be given access to this
            release. A combined maximum of 999 `testerEmails` and `groupAliases`
            can be specified in a single request.
          type: array
          items:
            type: string
    GoogleFirebaseAppdistroV1DistributeReleaseResponse:
      id: GoogleFirebaseAppdistroV1DistributeReleaseResponse
      description: The response message for `DistributeRelease`.
      type: object
      properties: {}
    GoogleFirebaseAppdistroV1BatchAddTestersRequest:
      id: GoogleFirebaseAppdistroV1BatchAddTestersRequest
      description: The Request message for batch adding testers
      type: object
      properties:
        emails:
          description: >-
            Required. The email addresses of the tester resources to create. A
            maximum of 999 and a minimum of 1 tester can be created in a batch.
          type: array
          items:
            type: string
    GoogleFirebaseAppdistroV1BatchAddTestersResponse:
      id: GoogleFirebaseAppdistroV1BatchAddTestersResponse
      description: The Response message for `BatchAddTesters`.
      type: object
      properties:
        testers:
          description: The testers which are created and/or already exist
          type: array
          items:
            $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Tester'
    GoogleFirebaseAppdistroV1Tester:
      id: GoogleFirebaseAppdistroV1Tester
      description: A person that can be invited to test apps in a Firebase project.
      type: object
      properties:
        name:
          description: >-
            The name of the tester resource. Format:
            `projects/{project_number}/testers/{email_address}`
          type: string
        displayName:
          description: >-
            The name of the tester associated with the Google account used to
            accept the tester invitation.
          type: string
        groups:
          description: The resource names of the groups this tester belongs to.
          type: array
          items:
            type: string
        lastActivityTime:
          description: >-
            Output only. The time the tester was last active. This is the most
            recent time the tester installed one of the apps. If they've never
            installed one or if the release no longer exists, this is the time
            the tester was added to the project.
          readOnly: true
          type: string
          format: google-datetime
    GoogleFirebaseAppdistroV1BatchRemoveTestersRequest:
      id: GoogleFirebaseAppdistroV1BatchRemoveTestersRequest
      description: The request message for `BatchRemoveTesters`.
      type: object
      properties:
        emails:
          description: >-
            Required. The email addresses of the tester resources to removed. A
            maximum of 999 and a minimum of 1 testers can be deleted in a batch.
          type: array
          items:
            type: string
    GoogleFirebaseAppdistroV1BatchRemoveTestersResponse:
      id: GoogleFirebaseAppdistroV1BatchRemoveTestersResponse
      description: The response message for `BatchRemoveTesters`
      type: object
      properties:
        emails:
          description: List of deleted tester emails
          type: array
          items:
            type: string
    GoogleFirebaseAppdistroV1ListTestersResponse:
      id: GoogleFirebaseAppdistroV1ListTestersResponse
      description: The response message for `ListTesters`.
      type: object
      properties:
        testers:
          description: The testers listed.
          type: array
          items:
            $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Tester'
        nextPageToken:
          description: >-
            A short-lived token, which can be sent as `pageToken` to retrieve
            the next page. If this field is omitted, there are no subsequent
            pages.
          type: string
    GoogleFirebaseAppdistroV1BatchDeleteReleasesRequest:
      id: GoogleFirebaseAppdistroV1BatchDeleteReleasesRequest
      description: The request message for `BatchDeleteReleases`.
      type: object
      properties:
        names:
          description: >-
            Required. The names of the release resources to delete. Format:
            `projects/{project_number}/apps/{app_id}/releases/{release_id}` A
            maximum of 100 releases can be deleted per request.
          type: array
          items:
            type: string
    GoogleFirebaseAppdistroV1Group:
      id: GoogleFirebaseAppdistroV1Group
      description: >-
        A group which can contain testers. A group can be invited to test apps
        in a Firebase project.
      type: object
      properties:
        name:
          description: >-
            The name of the group resource. Format:
            `projects/{project_number}/groups/{group_alias}`
          type: string
        displayName:
          description: Required. The display name of the group.
          type: string
        testerCount:
          description: Output only. The number of testers who are members of this group.
          readOnly: true
          type: integer
          format: int32
        releaseCount:
          description: >-
            Output only. The number of releases this group is permitted to
            access.
          readOnly: true
          type: integer
          format: int32
        inviteLinkCount:
          description: Output only. The number of invite links for this group.
          readOnly: true
          type: integer
          format: int32
    GoogleFirebaseAppdistroV1ListGroupsResponse:
      id: GoogleFirebaseAppdistroV1ListGroupsResponse
      description: The response message for `ListGroups`.
      type: object
      properties:
        groups:
          description: The groups listed.
          type: array
          items:
            $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Group'
        nextPageToken:
          description: >-
            A short-lived token, which can be sent as `pageToken` to retrieve
            the next page. If this field is omitted, there are no subsequent
            pages.
          type: string
    GoogleFirebaseAppdistroV1BatchJoinGroupRequest:
      id: GoogleFirebaseAppdistroV1BatchJoinGroupRequest
      description: The request message for `BatchJoinGroup`
      type: object
      properties:
        emails:
          description: >-
            Required. The emails of the testers to be added to the group. A
            maximum of 999 and a minimum of 1 tester can be created in a batch.
          type: array
          items:
            type: string
        createMissingTesters:
          description: >-
            Indicates whether to create tester resources based on `emails` if
            they don't exist yet.
          type: boolean
    GoogleFirebaseAppdistroV1BatchLeaveGroupRequest:
      id: GoogleFirebaseAppdistroV1BatchLeaveGroupRequest
      description: Request message for `BatchLeaveGroup`
      type: object
      properties:
        emails:
          description: >-
            Required. The email addresses of the testers to be removed from the
            group. A maximum of 999 and a minimum of 1 testers can be removed in
            a batch.
          type: array
          items:
            type: string
    GoogleFirebaseAppdistroV1FeedbackReport:
      id: GoogleFirebaseAppdistroV1FeedbackReport
      description: A feedback report submitted by a tester for a release.
      type: object
      properties:
        name:
          description: >-
            The name of the feedback report resource. Format:
            `projects/{project_number}/apps/{app}/releases/{release}/feedbackReports/{feedback_report}`
          type: string
        tester:
          description: >-
            Output only. The resource name of the tester who submitted the
            feedback report.
          readOnly: true
          type: string
        text:
          description: Output only. The text of the feedback report.
          readOnly: true
          type: string
        screenshotUri:
          description: >-
            Output only. A signed link (which expires in one hour) that lets you
            directly download the screenshot.
          readOnly: true
          type: string
        firebaseConsoleUri:
          description: >-
            Output only. A link to the Firebase console displaying the feedback
            report.
          readOnly: true
          type: string
        createTime:
          description: Output only. The time when the feedback report was created.
          readOnly: true
          type: string
          format: google-datetime
    GoogleFirebaseAppdistroV1ListFeedbackReportsResponse:
      id: GoogleFirebaseAppdistroV1ListFeedbackReportsResponse
      description: The response message for `ListFeedbackReports`.
      type: object
      properties:
        feedbackReports:
          description: The feedback reports
          type: array
          items:
            $ref: '#/components/schemas/GoogleFirebaseAppdistroV1FeedbackReport'
        nextPageToken:
          description: >-
            A short-lived token, which can be sent as `pageToken` to retrieve
            the next page. If this field is omitted, there are no subsequent
            pages.
          type: string
    GoogleFirebaseAppdistroV1UploadReleaseMetadata:
      id: GoogleFirebaseAppdistroV1UploadReleaseMetadata
      description: Operation metadata for `UploadRelease`.
      type: object
      properties: {}
    GoogleFirebaseAppdistroV1UploadReleaseResponse:
      id: GoogleFirebaseAppdistroV1UploadReleaseResponse
      description: Response message for `UploadRelease`.
      type: object
      properties:
        result:
          description: Result of upload release.
          type: string
          enumDescriptions:
            - Upload binary result unspecified
            - Upload binary resulted in a new release
            - Upload binary updated an existing release
            - >-
              Upload binary resulted in a no-op. A release with the exact same
              binary already exists.
          enum:
            - UPLOAD_RELEASE_RESULT_UNSPECIFIED
            - RELEASE_CREATED
            - RELEASE_UPDATED
            - RELEASE_UNMODIFIED
        release:
          description: Release associated with the uploaded binary.
          $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Release'
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    apps_aab_info:
      id: firebase.appdistribution.apps_aab_info
      name: apps_aab_info
      title: Apps_aab_info
      methods:
        get_aab_info:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1aabInfo/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/apps_aab_info/methods/get_aab_info
        insert: []
        update: []
        replace: []
        delete: []
    releases:
      id: firebase.appdistribution.releases
      name: releases
      title: Releases
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases~1{releasesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases~1{releasesId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.releases
        distribute:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases~1{releasesId}:distribute/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batch_delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases:batchDelete/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/releases/methods/get'
          - $ref: '#/components/x-stackQL-resources/releases/methods/list'
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/releases/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/releases/methods/batch_delete'
    operations:
      id: firebase.appdistribution.operations
      name: operations
      title: Operations
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases~1{releasesId}~1operations/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases~1{releasesId}~1operations~1{operationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases~1{releasesId}~1operations~1{operationsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases~1{releasesId}~1operations~1{operationsId}:cancel/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        wait:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases~1{releasesId}~1operations~1{operationsId}:wait/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    feedback_reports:
      id: firebase.appdistribution.feedback_reports
      name: feedback_reports
      title: Feedback_reports
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases~1{releasesId}~1feedbackReports~1{feedbackReportsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases~1{releasesId}~1feedbackReports~1{feedbackReportsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases~1{releasesId}~1feedbackReports/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.feedbackReports
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/feedback_reports/methods/get'
          - $ref: '#/components/x-stackQL-resources/feedback_reports/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/feedback_reports/methods/delete'
    testers:
      id: firebase.appdistribution.testers
      name: testers
      title: Testers
      methods:
        batch_add:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1testers:batchAdd/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batch_remove:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1testers:batchRemove/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1testers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.testers
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1testers~1{testersId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/testers/methods/list'
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/testers/methods/patch'
        replace: []
        delete: []
    groups:
      id: firebase.appdistribution.groups
      name: groups
      title: Groups
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1groups~1{groupsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1groups~1{groupsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1groups~1{groupsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1groups/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.groups
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1groups/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batch_join:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1groups~1{groupsId}:batchJoin/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        batch_leave:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1groups~1{groupsId}:batchLeave/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/groups/methods/get'
          - $ref: '#/components/x-stackQL-resources/groups/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/groups/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/groups/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/groups/methods/delete'
    media:
      id: firebase.appdistribution.media
      name: media
      title: Media
      methods:
        upload:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1apps~1{appsId}~1releases:upload/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
paths:
  /v1/projects/{projectsId}/apps/{appsId}/aabInfo:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: Gets Android App Bundle (AAB) information for a Firebase app.
      operationId: firebaseappdistribution.projects.apps.getAabInfo
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirebaseAppdistroV1AabInfo'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/apps/{appsId}/releases/{releasesId}:
    parameters: *ref_1
    get:
      description: Gets a release.
      operationId: firebaseappdistribution.projects.apps.releases.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Release'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
    patch:
      description: Updates a release.
      operationId: firebaseappdistribution.projects.apps.releases.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Release'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Release'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/apps/{appsId}/releases:
    parameters: *ref_1
    get:
      description: Lists releases. By default, sorts by `createTime` in descending order.
      operationId: firebaseappdistribution.projects.apps.releases.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GoogleFirebaseAppdistroV1ListReleasesResponse
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/apps/{appsId}/releases/{releasesId}:distribute:
    parameters: *ref_1
    post:
      description: >-
        Distributes a release to testers. This call does the following: 1.
        Creates testers for the specified emails, if none exist. 2. Adds the
        testers and groups to the release. 3. Sends new testers an invitation
        email. 4. Sends existing testers a new release email. The request will
        fail with a `INVALID_ARGUMENT` if it contains a group that doesn't
        exist.
      operationId: firebaseappdistribution.projects.apps.releases.distribute
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/GoogleFirebaseAppdistroV1DistributeReleaseRequest
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GoogleFirebaseAppdistroV1DistributeReleaseResponse
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/apps/{appsId}/releases:batchDelete:
    parameters: *ref_1
    post:
      description: Deletes releases. A maximum of 100 releases can be deleted per request.
      operationId: firebaseappdistribution.projects.apps.releases.batchDelete
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/GoogleFirebaseAppdistroV1BatchDeleteReleasesRequest
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/apps/{appsId}/releases/{releasesId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: firebaseappdistribution.projects.apps.releases.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/apps/{appsId}/releases/{releasesId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: firebaseappdistribution.projects.apps.releases.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: firebaseappdistribution.projects.apps.releases.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/apps/{appsId}/releases/{releasesId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        `1`, corresponding to `Code.CANCELLED`.
      operationId: firebaseappdistribution.projects.apps.releases.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleLongrunningCancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/apps/{appsId}/releases/{releasesId}/operations/{operationsId}:wait:
    parameters: *ref_1
    post:
      description: >-
        Waits until the specified long-running operation is done or reaches at
        most a specified timeout, returning the latest state. If the operation
        is already done, the latest state is immediately returned. If the
        timeout specified is greater than the default HTTP/RPC timeout, the
        HTTP/RPC timeout is used. If the server does not support this method, it
        returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a
        best-effort basis. It may return the latest state before the specified
        timeout (including immediately), meaning even an immediate response is
        no guarantee that the operation is done.
      operationId: firebaseappdistribution.projects.apps.releases.operations.wait
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleLongrunningWaitOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/apps/{appsId}/releases/{releasesId}/feedbackReports/{feedbackReportsId}:
    parameters: *ref_1
    get:
      description: Gets a feedback report.
      operationId: firebaseappdistribution.projects.apps.releases.feedbackReports.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirebaseAppdistroV1FeedbackReport'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
        - in: path
          name: feedbackReportsId
          required: true
          schema:
            type: string
    delete:
      description: Deletes a feedback report.
      operationId: firebaseappdistribution.projects.apps.releases.feedbackReports.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
        - in: path
          name: feedbackReportsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/apps/{appsId}/releases/{releasesId}/feedbackReports:
    parameters: *ref_1
    get:
      description: >-
        Lists feedback reports. By default, sorts by `createTime` in descending
        order.
      operationId: firebaseappdistribution.projects.apps.releases.feedbackReports.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GoogleFirebaseAppdistroV1ListFeedbackReportsResponse
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/testers:batchAdd:
    parameters: *ref_1
    post:
      description: >-
        Batch adds testers. This call adds testers for the specified emails if
        they don't already exist. Returns all testers specified in the request,
        including newly created and previously existing testers. This action is
        idempotent.
      operationId: firebaseappdistribution.projects.testers.batchAdd
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/GoogleFirebaseAppdistroV1BatchAddTestersRequest
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GoogleFirebaseAppdistroV1BatchAddTestersResponse
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/testers:batchRemove:
    parameters: *ref_1
    post:
      description: >-
        Batch removes testers. If found, this call deletes testers for the
        specified emails. Returns all deleted testers.
      operationId: firebaseappdistribution.projects.testers.batchRemove
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/GoogleFirebaseAppdistroV1BatchRemoveTestersRequest
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GoogleFirebaseAppdistroV1BatchRemoveTestersResponse
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/testers:
    parameters: *ref_1
    get:
      description: Lists testers and their resource ids.
      operationId: firebaseappdistribution.projects.testers.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GoogleFirebaseAppdistroV1ListTestersResponse
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/testers/{testersId}:
    parameters: *ref_1
    patch:
      description: >-
        Update a tester. If the testers joins a group they gain access to all
        releases that the group has access to.
      operationId: firebaseappdistribution.projects.testers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Tester'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Tester'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: testersId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/groups/{groupsId}:
    parameters: *ref_1
    get:
      description: Get a group.
      operationId: firebaseappdistribution.projects.groups.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Group'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: groupsId
          required: true
          schema:
            type: string
    patch:
      description: Update a group.
      operationId: firebaseappdistribution.projects.groups.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Group'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Group'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: groupsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Delete a group.
      operationId: firebaseappdistribution.projects.groups.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: groupsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/groups:
    parameters: *ref_1
    get:
      description: List groups.
      operationId: firebaseappdistribution.projects.groups.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/GoogleFirebaseAppdistroV1ListGroupsResponse
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
    post:
      description: Create a group.
      operationId: firebaseappdistribution.projects.groups.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Group'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleFirebaseAppdistroV1Group'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: groupId
          schema:
            type: string
  /v1/projects/{projectsId}/groups/{groupsId}:batchJoin:
    parameters: *ref_1
    post:
      description: >-
        Batch adds members to a group. The testers will gain access to all
        releases that the groups have access to.
      operationId: firebaseappdistribution.projects.groups.batchJoin
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/GoogleFirebaseAppdistroV1BatchJoinGroupRequest
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: groupsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/groups/{groupsId}:batchLeave:
    parameters: *ref_1
    post:
      description: >-
        Batch removed members from a group. The testers will lose access to all
        releases that the groups have access to.
      operationId: firebaseappdistribution.projects.groups.batchLeave
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/GoogleFirebaseAppdistroV1BatchLeaveGroupRequest
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: groupsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/apps/{appsId}/releases:upload:
    parameters: *ref_1
    post:
      description: >-
        Uploads a binary. Uploading a binary can result in a new release being
        created, an update to an existing release, or a no-op if a release with
        the same binary already exists.
      operationId: firebaseappdistribution.media.upload
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/GoogleFirebaseAppdistroV1UploadReleaseRequest
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: appsId
          required: true
          schema:
            type: string
