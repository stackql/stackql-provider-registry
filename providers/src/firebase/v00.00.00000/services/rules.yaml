openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Firebase Rules API
  description: >-
    Creates and manages rules that determine when a Firebase Rules-enabled
    service should permit a request. 
  version: v1
  x-discovery-doc-revision: '20250727'
  x-generated-date: '2025-08-28'
externalDocs:
  url: https://firebase.google.com/docs/storage/security
servers:
  - url: https://firebaserules.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
            https://www.googleapis.com/auth/firebase: View and administer all your Firebase data and settings
            https://www.googleapis.com/auth/firebase.readonly: View all your Firebase data and settings
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    TestRulesetRequest:
      id: TestRulesetRequest
      description: The request for FirebaseRulesService.TestRuleset.
      type: object
      properties:
        source:
          description: >-
            Optional. Optional `Source` to be checked for correctness. This
            field must not be set when the resource name refers to a `Ruleset`.
          $ref: '#/components/schemas/Source'
        testSuite:
          description: >-
            Required. The tests to execute against the `Source`. When `Source`
            is provided inline, the test cases will only be run if the `Source`
            is syntactically and semantically valid. Inline `TestSuite` to run.
          $ref: '#/components/schemas/TestSuite'
    Source:
      id: Source
      description: >-
        `Source` is one or more `File` messages comprising a logical set of
        rules.
      type: object
      properties:
        files:
          description: Required. `File` set constituting the `Source` bundle.
          type: array
          items:
            $ref: '#/components/schemas/File'
    File:
      id: File
      description: '`File` containing source content.'
      type: object
      properties:
        content:
          description: Required. Textual Content.
          type: string
        name:
          description: Required. File name.
          type: string
        fingerprint:
          description: Fingerprint (e.g. github sha) associated with the `File`.
          type: string
          format: byte
    TestSuite:
      id: TestSuite
      description: >-
        `TestSuite` is a collection of `TestCase` instances that validate the
        logical correctness of a `Ruleset`. The `TestSuite` may be referenced
        in-line within a `TestRuleset` invocation or as part of a `Release`
        object as a pre-release check.
      type: object
      properties:
        testCases:
          description: Collection of test cases associated with the `TestSuite`.
          type: array
          items:
            $ref: '#/components/schemas/TestCase'
    TestCase:
      id: TestCase
      description: >-
        `TestCase` messages provide the request context and an expectation as to
        whether the given context will be allowed or denied. Test cases may
        specify the `request`, `resource`, and `function_mocks` to mock a
        function call to a service-provided function. The `request` object
        represents context present at request-time. The `resource` is the value
        of the target resource as it appears in persistent storage before the
        request is executed.
      type: object
      properties:
        expectation:
          description: Test expectation.
          type: string
          enumDescriptions:
            - Unspecified expectation.
            - Expect an allowed result.
            - Expect a denied result.
          enum:
            - EXPECTATION_UNSPECIFIED
            - ALLOW
            - DENY
        request:
          description: >-
            Request context. The exact format of the request context is
            service-dependent. See the appropriate service documentation for
            information about the supported fields and types on the request.
            Minimally, all services support the following fields and types:
            Request field | Type ---------------|----------------- auth.uid |
            `string` auth.token | `map` headers | `map` method | `string` params
            | `map` path | `string` time | `google.protobuf.Timestamp` If the
            request value is not well-formed for the service, the request will
            be rejected as an invalid argument.
          type: any
        resource:
          description: >-
            Optional resource value as it appears in persistent storage before
            the request is fulfilled. The resource type depends on the
            `request.path` value.
          type: any
        functionMocks:
          description: >-
            Optional function mocks for service-defined functions. If not set,
            any service defined function is expected to return an error, which
            may or may not influence the test outcome.
          type: array
          items:
            $ref: '#/components/schemas/FunctionMock'
        pathEncoding:
          description: Specifies whether paths (such as request.path) are encoded and how.
          type: string
          enumDescriptions:
            - >-
              No encoding has been specified. Defaults to "URL_ENCODED"
              behavior.
            - >-
              Treats path segments as URL encoded but with non-encoded
              separators ("/"). This is the default behavior.
            - Treats total path as non-URL encoded e.g. raw.
          enum:
            - ENCODING_UNSPECIFIED
            - URL_ENCODED
            - PLAIN
        expressionReportLevel:
          description: Specifies what should be included in the response.
          type: string
          enumDescriptions:
            - No level has been specified. Defaults to "NONE" behavior.
            - Do not include any additional information.
            - Include detailed reporting on expressions evaluated.
            - Only include the expressions that were visited during evaluation.
          enum:
            - LEVEL_UNSPECIFIED
            - NONE
            - FULL
            - VISITED
    FunctionMock:
      id: FunctionMock
      description: >-
        Mock function definition. Mocks must refer to a function declared by the
        target service. The type of the function args and result will be
        inferred at test time. If either the arg or result values are not
        compatible with function type declaration, the request will be
        considered invalid. More than one `FunctionMock` may be provided for a
        given function name so long as the `Arg` matchers are distinct. There
        may be only one function for a given overload where all `Arg` values are
        `Arg.any_value`.
      type: object
      properties:
        function:
          description: >-
            The name of the function. The function name must match one provided
            by a service declaration.
          type: string
        args:
          description: >-
            The list of `Arg` values to match. The order in which the arguments
            are provided is the order in which they must appear in the function
            invocation.
          type: array
          items:
            $ref: '#/components/schemas/Arg'
        result:
          description: The mock result of the function call.
          $ref: '#/components/schemas/Result'
    Arg:
      id: Arg
      description: Arg matchers for the mock function.
      type: object
      properties:
        exactValue:
          description: Argument exactly matches value provided.
          type: any
        anyValue:
          description: Argument matches any value provided.
          $ref: '#/components/schemas/Empty'
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    Result:
      id: Result
      description: Possible result values from the function mock invocation.
      type: object
      properties:
        value:
          description: >-
            The result is an actual value. The type of the value must match that
            of the type declared by the service.
          type: any
        undefined:
          description: The result is undefined, meaning the result could not be computed.
          $ref: '#/components/schemas/Empty'
    TestRulesetResponse:
      id: TestRulesetResponse
      description: The response for FirebaseRulesService.TestRuleset.
      type: object
      properties:
        issues:
          description: >-
            Syntactic and semantic `Source` issues of varying severity. Issues
            of `ERROR` severity will prevent tests from executing.
          type: array
          items:
            $ref: '#/components/schemas/Issue'
        testResults:
          description: >-
            The set of test results given the test cases in the `TestSuite`. The
            results will appear in the same order as the test cases appear in
            the `TestSuite`.
          type: array
          items:
            $ref: '#/components/schemas/TestResult'
    Issue:
      id: Issue
      description: Issues include warnings, errors, and deprecation notices.
      type: object
      properties:
        sourcePosition:
          description: Position of the issue in the `Source`.
          $ref: '#/components/schemas/SourcePosition'
        description:
          description: Short error description.
          type: string
        severity:
          description: The severity of the issue.
          type: string
          enumDescriptions:
            - An unspecified severity.
            - >-
              Deprecation issue for statements and method that may no longer be
              supported or maintained.
            - 'Warnings such as: unused variables.'
            - 'Errors such as: unmatched curly braces or variable redefinition.'
          enum:
            - SEVERITY_UNSPECIFIED
            - DEPRECATION
            - WARNING
            - ERROR
    SourcePosition:
      id: SourcePosition
      description: >-
        Position in the `Source` content including its line, column number, and
        an index of the `File` in the `Source` message. Used for debug purposes.
      type: object
      properties:
        fileName:
          description: Name of the `File`.
          type: string
        line:
          description: Line number of the source fragment. 1-based.
          type: integer
          format: int32
        column:
          description: First column on the source line associated with the source fragment.
          type: integer
          format: int32
        currentOffset:
          description: Start position relative to the beginning of the file.
          type: integer
          format: int32
        endOffset:
          description: End position relative to the beginning of the file.
          type: integer
          format: int32
    TestResult:
      id: TestResult
      description: >-
        Test result message containing the state of the test as well as a
        description and source position for test failures.
      type: object
      properties:
        state:
          description: State of the test.
          type: string
          enumDescriptions:
            - Test state is not set.
            - Test is a success.
            - Test is a failure.
          enum:
            - STATE_UNSPECIFIED
            - SUCCESS
            - FAILURE
        debugMessages:
          description: >-
            Debug messages related to test execution issues encountered during
            evaluation. Debug messages may be related to too many or too few
            invocations of function mocks or to runtime errors that occur during
            evaluation. For example: ```Unable to read variable [name:
            "resource"]```
          type: array
          items:
            type: string
        errorPosition:
          description: >-
            Position in the `Source` or `Ruleset` where the principle runtime
            error occurs. Evaluation of an expression may result in an error.
            Rules are deny by default, so a `DENY` expectation when an error is
            generated is valid. When there is a `DENY` with an error, the
            `SourcePosition` is returned. E.g. `error_position { line: 19
            column: 37 }`
          $ref: '#/components/schemas/SourcePosition'
        functionCalls:
          description: >-
            The set of function calls made to service-defined methods. Function
            calls are included in the order in which they are encountered during
            evaluation, are provided for both mocked and unmocked functions, and
            included on the response regardless of the test `state`.
          type: array
          items:
            $ref: '#/components/schemas/FunctionCall'
        visitedExpressions:
          description: >-
            The set of visited permission expressions for a given test. This
            returns the positions and evaluation results of all visited
            permission expressions which were relevant to the test case, e.g.
            ``` match /path { allow read if: } ``` For a detailed report of the
            intermediate evaluation states, see the `expression_reports` field
          type: array
          items:
            $ref: '#/components/schemas/VisitedExpression'
        expressionReports:
          description: >-
            The mapping from expression in the ruleset AST to the values they
            were evaluated to. Partially-nested to mirror AST structure. Note
            that this field is actually tracking expressions and not permission
            statements in contrast to the "visited_expressions" field above.
            Literal expressions are omitted.
          type: array
          items:
            $ref: '#/components/schemas/ExpressionReport'
    FunctionCall:
      id: FunctionCall
      description: >-
        Represents a service-defined function call that was invoked during test
        execution.
      type: object
      properties:
        function:
          description: Name of the function invoked.
          type: string
        args:
          description: The arguments that were provided to the function.
          type: array
          items:
            type: any
    VisitedExpression:
      id: VisitedExpression
      description: >-
        Store the position and access outcome for an expression visited in
        rules.
      type: object
      properties:
        sourcePosition:
          description: >-
            Position in the `Source` or `Ruleset` where an expression was
            visited.
          $ref: '#/components/schemas/SourcePosition'
        value:
          description: The evaluated value for the visited expression, e.g. true/false
          type: any
    ExpressionReport:
      id: ExpressionReport
      description: >-
        Describes where in a file an expression is found and what it was
        evaluated to over the course of its use.
      type: object
      properties:
        sourcePosition:
          description: Position of expression in original rules source.
          $ref: '#/components/schemas/SourcePosition'
        values:
          description: Values that this expression evaluated to when encountered.
          type: array
          items:
            $ref: '#/components/schemas/ValueCount'
        children:
          description: Subexpressions
          type: array
          items:
            $ref: '#/components/schemas/ExpressionReport'
    ValueCount:
      id: ValueCount
      description: >-
        Tuple for how many times an Expression was evaluated to a particular
        ExpressionValue.
      type: object
      properties:
        value:
          description: The return value of the expression
          type: any
        count:
          description: The amount of times that expression returned.
          type: integer
          format: int32
    Ruleset:
      id: Ruleset
      description: >-
        `Ruleset` is an immutable copy of `Source` with a globally unique
        identifier and a creation time.
      type: object
      properties:
        name:
          description: >-
            Output only. Name of the `Ruleset`. The ruleset_id is auto generated
            by the service. Format:
            `projects/{project_id}/rulesets/{ruleset_id}`
          readOnly: true
          type: string
        source:
          description: Required. `Source` for the `Ruleset`.
          $ref: '#/components/schemas/Source'
        createTime:
          description: Output only. Time the `Ruleset` was created.
          readOnly: true
          type: string
          format: google-datetime
        metadata:
          description: Output only. The metadata for this ruleset.
          readOnly: true
          $ref: '#/components/schemas/Metadata'
        attachmentPoint:
          description: >-
            Immutable. Intended resource to which this Ruleset should be
            released. May be left blank to signify the resource associated with
            the default release. Expected format:
            firestore.googleapis.com/projects//databases/
          type: string
    Metadata:
      id: Metadata
      description: Metadata for a Ruleset.
      type: object
      properties:
        services:
          description: >-
            Services that this ruleset has declarations for (e.g.,
            "cloud.firestore"). There may be 0+ of these.
          type: array
          items:
            type: string
    ListRulesetsResponse:
      id: ListRulesetsResponse
      description: The response for FirebaseRulesService.ListRulesets.
      type: object
      properties:
        rulesets:
          description: List of `Ruleset` instances.
          type: array
          items:
            $ref: '#/components/schemas/Ruleset'
        nextPageToken:
          description: >-
            The pagination token to retrieve the next page of results. If the
            value is empty, no further results remain.
          type: string
    Release:
      id: Release
      description: >-
        `Release` is a named reference to a `Ruleset`. Once a `Release` refers
        to a `Ruleset`, rules-enabled services will be able to enforce the
        `Ruleset`.
      type: object
      properties:
        name:
          description: 'Required. Format: `projects/{project_id}/releases/{release_id}`'
          type: string
        rulesetName:
          description: >-
            Required. Name of the `Ruleset` referred to by this `Release`. The
            `Ruleset` must exist for the `Release` to be created.
          type: string
        createTime:
          description: Output only. Time the release was created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. Time the release was updated.
          readOnly: true
          type: string
          format: google-datetime
    UpdateReleaseRequest:
      id: UpdateReleaseRequest
      description: The request for FirebaseRulesService.UpdateRelease.
      type: object
      properties:
        release:
          description: Required. `Release` to update.
          $ref: '#/components/schemas/Release'
        updateMask:
          description: Optional. Specifies which fields to update.
          type: string
          format: google-fieldmask
    ListReleasesResponse:
      id: ListReleasesResponse
      description: The response for FirebaseRulesService.ListReleases.
      type: object
      properties:
        releases:
          description: List of `Release` instances.
          type: array
          items:
            $ref: '#/components/schemas/Release'
        nextPageToken:
          description: >-
            The pagination token to retrieve the next page of results. If the
            value is empty, no further results remain.
          type: string
    GetReleaseExecutableResponse:
      id: GetReleaseExecutableResponse
      description: The response for FirebaseRulesService.GetReleaseExecutable
      type: object
      properties:
        executable:
          description: Executable view of the `Ruleset` referenced by the `Release`.
          type: string
          format: byte
        language:
          description: '`Language` used to generate the executable bytes.'
          type: string
          enumDescriptions:
            - Language unspecified. Defaults to FIREBASE_RULES.
            - Firebase Rules language.
            - Event Flow triggers.
          enum:
            - LANGUAGE_UNSPECIFIED
            - FIREBASE_RULES
            - EVENT_FLOW_TRIGGERS
        rulesetName:
          description: '`Ruleset` name associated with the `Release` executable.'
          type: string
        updateTime:
          description: Timestamp for the most recent `Release.update_time`.
          type: string
          format: google-datetime
        executableVersion:
          description: The Rules runtime version of the executable.
          type: string
          enumDescriptions:
            - >-
              Executable format unspecified. Defaults to
              FIREBASE_RULES_EXECUTABLE_V1
            - >-
              Firebase Rules syntax 'rules2' executable versions: Custom AST for
              use with Java clients.
            - CEL-based executable for use with C++ clients.
          enum:
            - RELEASE_EXECUTABLE_VERSION_UNSPECIFIED
            - FIREBASE_RULES_EXECUTABLE_V1
            - FIREBASE_RULES_EXECUTABLE_V2
        syncTime:
          description: >-
            Optional, indicates the freshness of the result. The response is
            guaranteed to be the latest within an interval up to the sync_time
            (inclusive).
          type: string
          format: google-datetime
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    projects:
      id: firebase.rules.projects
      name: projects
      title: Projects
      methods:
        test:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}:test/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    rulesets:
      id: firebase.rules.rulesets
      name: rulesets
      title: Rulesets
      methods:
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1rulesets/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1rulesets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.rulesets
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1rulesets~1{rulesetsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1rulesets~1{rulesetsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/rulesets/methods/get'
          - $ref: '#/components/x-stackQL-resources/rulesets/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/rulesets/methods/create'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/rulesets/methods/delete'
    releases:
      id: firebase.rules.releases
      name: releases
      title: Releases
      methods:
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1releases/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1releases/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.releases
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1releases~1{releasesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1releases~1{releasesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1releases~1{releasesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/releases/methods/get'
          - $ref: '#/components/x-stackQL-resources/releases/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/releases/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/releases/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/releases/methods/delete'
    releases_executable:
      id: firebase.rules.releases_executable
      name: releases_executable
      title: Releases_executable
      methods:
        get_executable:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1releases~1{releasesId}:getExecutable/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/releases_executable/methods/get_executable
        insert: []
        update: []
        replace: []
        delete: []
paths:
  /v1/projects/{projectsId}:test:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    post:
      description: >-
        Test `Source` for syntactic and semantic correctness. Issues present, if
        any, will be returned to the caller with a description, severity, and
        source location. The test method may be executed with `Source` or a
        `Ruleset` name. Passing `Source` is useful for unit testing new rules.
        Passing a `Ruleset` name is useful for regression testing an existing
        rule. The following is an example of `Source` that permits users to
        upload images to a bucket bearing their user id and matching the correct
        metadata: _*Example*_ // Users are allowed to subscribe and unsubscribe
        to the blog. service firebase.storage { match
        /users/{userId}/images/{imageName} { allow write: if userId ==
        request.auth.uid && (imageName.matches('*.png$') ||
        imageName.matches('*.jpg$')) && resource.mimeType.matches('^image/') } }
      operationId: firebaserules.projects.test
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestRulesetRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
        - Oauth2:
            - https://www.googleapis.com/auth/firebase.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/firebase.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestRulesetResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/rulesets:
    parameters: *ref_1
    post:
      description: >-
        Create a `Ruleset` from `Source`. The `Ruleset` is given a unique
        generated name which is returned to the caller. `Source` containing
        syntactic or semantics errors will result in an error response
        indicating the first error encountered. For a detailed view of `Source`
        issues, use TestRuleset.
      operationId: firebaserules.projects.rulesets.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ruleset'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ruleset'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
    get:
      description: >-
        List `Ruleset` metadata only and optionally filter the results by
        `Ruleset` name. The full `Source` contents of a `Ruleset` may be
        retrieved with GetRuleset.
      operationId: firebaserules.projects.rulesets.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
        - Oauth2:
            - https://www.googleapis.com/auth/firebase.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/firebase.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRulesetsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/rulesets/{rulesetsId}:
    parameters: *ref_1
    get:
      description: Get a `Ruleset` by name including the full `Source` contents.
      operationId: firebaserules.projects.rulesets.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
        - Oauth2:
            - https://www.googleapis.com/auth/firebase.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/firebase.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ruleset'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: rulesetsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Delete a `Ruleset` by resource name. If the `Ruleset` is referenced by a
        `Release` the operation will fail.
      operationId: firebaserules.projects.rulesets.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: rulesetsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/releases:
    parameters: *ref_1
    post:
      description: >-
        Create a `Release`. Release names should reflect the developer's
        deployment practices. For example, the release name may include the
        environment name, application name, application version, or any other
        name meaningful to the developer. Once a `Release` refers to a
        `Ruleset`, the rules can be enforced by Firebase Rules-enabled services.
        More than one `Release` may be 'live' concurrently. Consider the
        following three `Release` names for `projects/foo` and the `Ruleset` to
        which they refer. Release Name -> Ruleset Name *
        projects/foo/releases/prod -> projects/foo/rulesets/uuid123 *
        projects/foo/releases/prod/beta -> projects/foo/rulesets/uuid123 *
        projects/foo/releases/prod/v23 -> projects/foo/rulesets/uuid456 The
        relationships reflect a `Ruleset` rollout in progress. The `prod` and
        `prod/beta` releases refer to the same `Ruleset`. However, `prod/v23`
        refers to a new `Ruleset`. The `Ruleset` reference for a `Release` may
        be updated using the UpdateRelease method.
      operationId: firebaserules.projects.releases.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Release'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
    get:
      description: >-
        List the `Release` values for a project. This list may optionally be
        filtered by `Release` name, `Ruleset` name, `TestSuite` name, or any
        combination thereof.
      operationId: firebaserules.projects.releases.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
        - Oauth2:
            - https://www.googleapis.com/auth/firebase.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/firebase.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReleasesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/releases/{releasesId}:
    parameters: *ref_1
    patch:
      description: >-
        Update a `Release` via PATCH. Only updates to `ruleset_name` will be
        honored. `Release` rename is not supported. To create a `Release` use
        the CreateRelease method.
      operationId: firebaserules.projects.releases.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReleaseRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
    get:
      description: Get a `Release` by name.
      operationId: firebaserules.projects.releases.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
        - Oauth2:
            - https://www.googleapis.com/auth/firebase.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/firebase.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Release'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
    delete:
      description: Delete a `Release` by resource name.
      operationId: firebaserules.projects.releases.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/releases/{releasesId}:getExecutable:
    parameters: *ref_1
    get:
      description: Get the `Release` executable to use when enforcing rules.
      operationId: firebaserules.projects.releases.getExecutable
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
        - Oauth2:
            - https://www.googleapis.com/auth/firebase
          Oauth2c:
            - https://www.googleapis.com/auth/firebase
        - Oauth2:
            - https://www.googleapis.com/auth/firebase.readonly
          Oauth2c:
            - https://www.googleapis.com/auth/firebase.readonly
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetReleaseExecutableResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: releasesId
          required: true
          schema:
            type: string
        - in: query
          name: executableVersion
          schema:
            type: string
