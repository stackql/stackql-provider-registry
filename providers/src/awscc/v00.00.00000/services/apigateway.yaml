openapi: 3.0.0
info:
  title: ApiGateway
  version: 1.0.0
paths: {}
components:
  schemas:
    Account:
      type: object
      properties:
        Id:
          description: ''
          type: string
        CloudWatchRoleArn:
          description: The ARN of an Amazon CloudWatch role for the current Account.
          type: string
      x-stackql-resource-name: account
      x-stackql-primaryIdentifier:
        - Id
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - apigateway:PATCH
          - iam:GetRole
          - iam:PassRole
        read:
          - apigateway:GET
        update:
          - apigateway:PATCH
          - iam:GetRole
          - iam:PassRole
        delete: []
    StageKey:
      type: object
      additionalProperties: false
      properties:
        RestApiId:
          description: The string identifier of the associated RestApi.
          type: string
        StageName:
          description: The stage name associated with the stage key.
          type: string
      description: '``StageKey`` is a property of the [AWS::ApiGateway::ApiKey](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-apikey.html) resource that specifies the stage to associate with the API key. This association allows only clients with the key to make requests to methods in that stage.'
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    ApiKey:
      type: object
      properties:
        APIKeyId:
          description: ''
          type: string
        CustomerId:
          description: An MKT customer identifier, when integrating with the AWS SaaS Marketplace.
          type: string
        Description:
          description: The description of the ApiKey.
          type: string
        Enabled:
          description: Specifies whether the ApiKey can be used by callers.
          default: false
          type: boolean
        GenerateDistinctId:
          description: Specifies whether (``true``) or not (``false``) the key identifier is distinct from the created API key value. This parameter is deprecated and should not be used.
          type: boolean
        Name:
          description: |-
            A name for the API key. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the API key name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
             If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
          type: string
        StageKeys:
          description: DEPRECATED FOR USAGE PLANS - Specifies stages associated with the API key.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/StageKey'
        Tags:
          description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with ``aws:``. The tag value can be up to 256 characters.
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Value:
          description: Specifies a value of the API key.
          type: string
      x-stackql-resource-name: api_key
      x-stackql-primaryIdentifier:
        - APIKeyId
      x-create-only-properties:
        - GenerateDistinctId
        - Name
        - Value
      x-read-only-properties:
        - APIKeyId
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PATCH
          - apigateway:PUT
          - apigateway:DELETE
        delete:
          - apigateway:DELETE
          - apigateway:GET
        list:
          - apigateway:GET
    Authorizer:
      type: object
      properties:
        RestApiId:
          description: The string identifier of the associated RestApi.
          type: string
        AuthorizerId:
          type: string
          description: ''
        AuthType:
          description: Optional customer-defined field, used in OpenAPI imports and exports without functional impact.
          type: string
        AuthorizerCredentials:
          description: Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null.
          type: string
        AuthorizerResultTtlInSeconds:
          description: The TTL in seconds of cached authorizer results. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway will cache authorizer responses. If this field is not set, the default value is 300. The maximum value is 3600, or 1 hour.
          type: integer
        AuthorizerUri:
          description: >-
            Specifies the authorizer's Uniform Resource Identifier (URI). For ``TOKEN`` or ``REQUEST`` authorizers, this must be a well-formed Lambda function URI, for example, ``arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations``. In general, the URI has this form ``arn:aws:apigateway:{region}:lambda:path/{service_api}``, where ``{region}`` is the same as the region hosting the Lambda function,
            ``path`` indicates that the remaining substring in the URI should be treated as the path to the resource, including the initial ``/``. For Lambda functions, this is usually of the form ``/2015-03-31/functions/[FunctionARN]/invocations``.
          type: string
        IdentitySource:
          description: >-
            The identity source for which authorization is requested. For a ``TOKEN`` or ``COGNITO_USER_POOLS`` authorizer, this is required and specifies the request header mapping expression for the custom header holding the authorization token submitted by the client. For example, if the token header name is ``Auth``, the header mapping expression is ``method.request.header.Auth``. For the ``REQUEST`` authorizer, this is required when authorization caching is enabled. The value is a
            comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an ``Auth`` header, a ``Name`` query string parameter are defined as identity sources, this value is ``method.request.header.Auth, method.request.querystring.Name``. These parameters will be used to derive the authorization caching key and to perform runtime validation of the ``REQUEST`` authorizer by verifying all of the identity-related request parameters are present, not
            null and non-empty. Only when thi
          type: string
        IdentityValidationExpression:
          description: >-
            A validation expression for the incoming identity token. For ``TOKEN`` authorizers, this value is a regular expression. For ``COGNITO_USER_POOLS`` authorizers, API Gateway will match the ``aud`` field of the incoming token from the client against the specified regular expression. It will invoke the authorizer's Lambda function when there is a match. Otherwise, it will return a 401 Unauthorized response without calling the Lambda function. The validation expression does not apply to
            the ``REQUEST`` authorizer.
          type: string
        Name:
          description: The name of the authorizer.
          type: string
        ProviderARNs:
          description: 'A list of the Amazon Cognito user pool ARNs for the ``COGNITO_USER_POOLS`` authorizer. Each element is of this format: ``arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}``. For a ``TOKEN`` or ``REQUEST`` authorizer, this is not defined.'
          type: array
          uniqueItems: true
          items:
            type: string
          x-insertionOrder: false
        Type:
          description: The authorizer type. Valid values are ``TOKEN`` for a Lambda function using a single authorization token submitted in a custom header, ``REQUEST`` for a Lambda function using incoming request parameters, and ``COGNITO_USER_POOLS`` for using an Amazon Cognito user pool.
          type: string
      required:
        - RestApiId
        - Type
        - Name
      x-stackql-resource-name: authorizer
      x-stackql-primaryIdentifier:
        - RestApiId
        - AuthorizerId
      x-create-only-properties:
        - RestApiId
      x-read-only-properties:
        - AuthorizerId
      x-required-permissions:
        create:
          - apigateway:POST
          - iam:PassRole
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PATCH
          - iam:PassRole
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    BasePathMapping:
      type: object
      properties:
        BasePath:
          type: string
          description: The base path name that callers of the API must provide as part of the URL after the domain name.
        DomainName:
          type: string
          description: The domain name of the BasePathMapping resource to be described.
        RestApiId:
          type: string
          description: The string identifier of the associated RestApi.
        Stage:
          type: string
          description: The name of the associated stage.
      required:
        - DomainName
      x-stackql-resource-name: base_path_mapping
      x-stackql-primaryIdentifier:
        - DomainName
        - BasePath
      x-create-only-properties:
        - DomainName
        - BasePath
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:DELETE
          - apigateway:PATCH
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    ClientCertificate:
      type: object
      properties:
        ClientCertificateId:
          description: ''
          type: string
        Description:
          description: The description of the client certificate.
          type: string
        Tags:
          description: The collection of tags. Each tag element is associated with a given resource.
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: client_certificate
      x-stackql-primaryIdentifier:
        - ClientCertificateId
      x-read-only-properties:
        - ClientCertificateId
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PATCH
          - apigateway:PUT
          - apigateway:DELETE
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    StageDescription:
      type: object
      additionalProperties: false
      properties:
        AccessLogSetting:
          description: Specifies settings for logging access in this stage.
          $ref: '#/components/schemas/AccessLogSetting'
        CacheClusterEnabled:
          description: Specifies whether a cache cluster is enabled for the stage.
          type: boolean
        CacheClusterSize:
          description: The size of the stage's cache cluster. For more information, see [cacheClusterSize](https://docs.aws.amazon.com/apigateway/latest/api/API_CreateStage.html#apigw-CreateStage-request-cacheClusterSize) in the *API Gateway API Reference*.
          type: string
        CacheDataEncrypted:
          description: Indicates whether the cached responses are encrypted.
          type: boolean
        CacheTtlInSeconds:
          description: The time-to-live (TTL) period, in seconds, that specifies how long API Gateway caches responses.
          type: integer
        CachingEnabled:
          description: Indicates whether responses are cached and returned for requests. You must enable a cache cluster on the stage to cache responses. For more information, see [Enable API Gateway Caching in a Stage to Enhance API Performance](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html) in the *API Gateway Developer Guide*.
          type: boolean
        CanarySetting:
          description: Specifies settings for the canary deployment in this stage.
          $ref: '#/components/schemas/CanarySetting'
        ClientCertificateId:
          description: The identifier of the client certificate that API Gateway uses to call your integration endpoints in the stage.
          type: string
        DataTraceEnabled:
          description: Indicates whether data trace logging is enabled for methods in the stage. API Gateway pushes these logs to Amazon CloudWatch Logs.
          type: boolean
        Description:
          description: A description of the purpose of the stage.
          type: string
        DocumentationVersion:
          description: The version identifier of the API documentation snapshot.
          type: string
        LoggingLevel:
          description: The logging level for this method. For valid values, see the ``loggingLevel`` property of the [MethodSetting](https://docs.aws.amazon.com/apigateway/latest/api/API_MethodSetting.html) resource in the *Amazon API Gateway API Reference*.
          type: string
        MethodSettings:
          description: Configures settings for all of the stage's methods.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/MethodSetting'
        MetricsEnabled:
          description: Indicates whether Amazon CloudWatch metrics are enabled for methods in the stage.
          type: boolean
        Tags:
          description: An array of arbitrary tags (key-value pairs) to associate with the stage.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        ThrottlingBurstLimit:
          description: The target request burst rate limit. This allows more requests through for a period of time than the target rate limit. For more information, see [Manage API Request Throttling](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html) in the *API Gateway Developer Guide*.
          type: integer
        ThrottlingRateLimit:
          description: The target request steady-state rate limit. For more information, see [Manage API Request Throttling](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-request-throttling.html) in the *API Gateway Developer Guide*.
          type: number
        TracingEnabled:
          description: |-
            Specifies whether active tracing with X-ray is enabled for this stage.
             For more information, see [Trace API Gateway API Execution with X-Ray](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-xray.html) in the *API Gateway Developer Guide*.
          type: boolean
        Variables:
          description: 'A map that defines the stage variables. Variable names must consist of alphanumeric characters, and the values must match the following regular expression: ``[A-Za-z0-9-._~:/?#&=,]+``.'
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
      description: '``StageDescription`` is a property of the [AWS::ApiGateway::Deployment](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-deployment.html) resource that configures a deployment stage.'
    DeploymentCanarySettings:
      type: object
      additionalProperties: false
      properties:
        PercentTraffic:
          description: The percentage (0.0-100.0) of traffic routed to the canary deployment.
          type: number
        StageVariableOverrides:
          description: A stage variable overrides used for the canary release deployment. They can override existing stage variables or add new stage variables for the canary release deployment. These stage variables are represented as a string-to-string map between stage variable names and their values.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        UseStageCache:
          description: A Boolean flag to indicate whether the canary release deployment uses the stage cache or not.
          type: boolean
      description: The ``DeploymentCanarySettings`` property type specifies settings for the canary deployment.
    AccessLogSetting:
      description: |-
        The ``AccessLogSetting`` property type specifies settings for logging access in this stage.
          ``AccessLogSetting`` is a property of the [AWS::ApiGateway::Stage](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-stage.html) resource.
      type: object
      additionalProperties: false
      properties:
        DestinationArn:
          description: The Amazon Resource Name (ARN) of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with ``amazon-apigateway-``. This parameter is required to enable access logging.
          type: string
        Format:
          description: A single line format of the access logs of data, as specified by selected [$context variables](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html#context-variable-reference). The format must include at least ``$context.requestId``. This parameter is required to enable access logging.
          type: string
    CanarySetting:
      description: Configuration settings of a canary deployment.
      type: object
      additionalProperties: false
      properties:
        DeploymentId:
          description: The ID of the canary deployment.
          type: string
        PercentTraffic:
          description: The percent (0-100) of traffic diverted to a canary deployment.
          type: number
          minimum: 0
          maximum: 100
        StageVariableOverrides:
          description: Stage variables overridden for a canary release deployment, including new stage variables introduced in the canary. These stage variables are represented as a string-to-string map between stage variable names and their values.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        UseStageCache:
          description: A Boolean flag to indicate whether the canary deployment uses the stage cache or not.
          type: boolean
    MethodSetting:
      description: |-
        The ``MethodSetting`` property type configures settings for all methods in a stage.
         The ``MethodSettings`` property of the ``AWS::ApiGateway::Stage`` resource contains a list of ``MethodSetting`` property types.
      type: object
      additionalProperties: false
      properties:
        CacheDataEncrypted:
          description: Specifies whether the cached responses are encrypted.
          type: boolean
        CacheTtlInSeconds:
          description: Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
          type: integer
        CachingEnabled:
          description: Specifies whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
          type: boolean
        DataTraceEnabled:
          description: Specifies whether data trace logging is enabled for this method, which affects the log entries pushed to Amazon CloudWatch Logs. This can be useful to troubleshoot APIs, but can result in logging sensitive data. We recommend that you don't enable this option for production APIs.
          type: boolean
        HttpMethod:
          description: The HTTP method. To apply settings to multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a ``MethodSetting``.
          type: string
        LoggingLevel:
          description: Specifies the logging level for this method, which affects the log entries pushed to Amazon CloudWatch Logs. Valid values are ``OFF``, ``ERROR``, and ``INFO``. Choose ``ERROR`` to write only error-level entries to CloudWatch Logs, or choose ``INFO`` to include all ``ERROR`` events as well as extra informational events.
          type: string
        MetricsEnabled:
          description: Specifies whether Amazon CloudWatch metrics are enabled for this method.
          type: boolean
        ResourcePath:
          description: >-
            The resource path for this method. Forward slashes (``/``) are encoded as ``~1`` and the initial slash must include a forward slash. For example, the path value ``/resource/subresource`` must be encoded as ``/~1resource~1subresource``. To specify the root path, use only a slash (``/``). To apply settings to multiple resources and methods, specify an asterisk (``*``) for the ``HttpMethod`` and ``/*`` for the ``ResourcePath``. This parameter is required when you specify a
            ``MethodSetting``.
          type: string
        ThrottlingBurstLimit:
          description: Specifies the throttling burst limit.
          type: integer
          minimum: 0
        ThrottlingRateLimit:
          description: Specifies the throttling rate limit.
          type: number
          minimum: 0
    Deployment:
      type: object
      properties:
        DeploymentId:
          type: string
          description: ''
        DeploymentCanarySettings:
          $ref: '#/components/schemas/DeploymentCanarySettings'
          description: The input configuration for a canary deployment.
        Description:
          type: string
          description: The description for the Deployment resource to create.
        RestApiId:
          type: string
          description: The string identifier of the associated RestApi.
        StageDescription:
          $ref: '#/components/schemas/StageDescription'
          description: The description of the Stage resource for the Deployment resource to create. To specify a stage description, you must also provide a stage name.
        StageName:
          type: string
          description: The name of the Stage resource for the Deployment resource to create.
      required:
        - RestApiId
      x-stackql-resource-name: deployment
      x-stackql-primaryIdentifier:
        - DeploymentId
        - RestApiId
      x-create-only-properties:
        - DeploymentCanarySettings
        - RestApiId
      x-read-only-properties:
        - DeploymentId
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:PATCH
          - apigateway:PUT
          - apigateway:GET
        read:
          - apigateway:GET
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
          - apigateway:DELETE
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    Location:
      type: object
      additionalProperties: false
      properties:
        Method:
          description: >-
            The HTTP verb of a method. It is a valid field for the API entity types of ``METHOD``, ``PATH_PARAMETER``, ``QUERY_PARAMETER``, ``REQUEST_HEADER``, ``REQUEST_BODY``, ``RESPONSE``, ``RESPONSE_HEADER``, and ``RESPONSE_BODY``. The default value is ``*`` for any method. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other ``location`` attributes, the child entity's ``method`` attribute must match that of the
            parent entity exactly.
          type: string
        Name:
          description: The name of the targeted API entity. It is a valid and required field for the API entity types of ``AUTHORIZER``, ``MODEL``, ``PATH_PARAMETER``, ``QUERY_PARAMETER``, ``REQUEST_HEADER``, ``REQUEST_BODY`` and ``RESPONSE_HEADER``. It is an invalid field for any other entity type.
          type: string
        Path:
          description: >-
            The URL path of the target. It is a valid field for the API entity types of ``RESOURCE``, ``METHOD``, ``PATH_PARAMETER``, ``QUERY_PARAMETER``, ``REQUEST_HEADER``, ``REQUEST_BODY``, ``RESPONSE``, ``RESPONSE_HEADER``, and ``RESPONSE_BODY``. The default value is ``/`` for the root resource. When an applicable child entity inherits the content of another entity of the same type with more general specifications of the other ``location`` attributes, the child entity's ``path`` attribute
            must match that of the parent entity as a prefix.
          type: string
        StatusCode:
          description: The HTTP status code of a response. It is a valid field for the API entity types of ``RESPONSE``, ``RESPONSE_HEADER``, and ``RESPONSE_BODY``. The default value is ``*`` for any status code. When an applicable child entity inherits the content of an entity of the same type with more general specifications of the other ``location`` attributes, the child entity's ``statusCode`` attribute must match that of the parent entity exactly.
          type: string
        Type:
          description: The type of API entity to which the documentation content applies. Valid values are ``API``, ``AUTHORIZER``, ``MODEL``, ``RESOURCE``, ``METHOD``, ``PATH_PARAMETER``, ``QUERY_PARAMETER``, ``REQUEST_HEADER``, ``REQUEST_BODY``, ``RESPONSE``, ``RESPONSE_HEADER``, and ``RESPONSE_BODY``. Content inheritance does not apply to any entity of the ``API``, ``AUTHORIZER``, ``METHOD``, ``MODEL``, ``REQUEST_BODY``, or ``RESOURCE`` type.
          type: string
          enum:
            - API
            - AUTHORIZER
            - MODEL
            - RESOURCE
            - METHOD
            - PATH_PARAMETER
            - QUERY_PARAMETER
            - REQUEST_HEADER
            - REQUEST_BODY
            - RESPONSE
            - RESPONSE_HEADER
            - RESPONSE_BODY
      description: |-
        The ``Location`` property specifies the location of the Amazon API Gateway API entity that the documentation applies to. ``Location`` is a property of the [AWS::ApiGateway::DocumentationPart](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-documentationpart.html) resource.
         For more information about each property, including constraints and valid values, see [DocumentationPart](https://docs.aws.amazon.com/apigateway/latest/api/API_DocumentationPartLocation.html) in the *Amazon API Gateway REST API Reference*.
    DocumentationPart:
      type: object
      properties:
        DocumentationPartId:
          description: ''
          type: string
        Location:
          description: The location of the targeted API entity of the to-be-created documentation part.
          $ref: '#/components/schemas/Location'
        Properties:
          description: The new documentation content map of the targeted API entity. Enclosed key-value pairs are API-specific, but only OpenAPI-compliant key-value pairs can be exported and, hence, published.
          type: string
        RestApiId:
          description: The string identifier of the associated RestApi.
          type: string
      required:
        - Location
        - Properties
        - RestApiId
      x-stackql-resource-name: documentation_part
      x-stackql-primaryIdentifier:
        - DocumentationPartId
        - RestApiId
      x-create-only-properties:
        - Location
        - RestApiId
      x-read-only-properties:
        - DocumentationPartId
      x-required-permissions:
        create:
          - apigateway:GET
          - apigateway:POST
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PATCH
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    DocumentationVersion:
      type: object
      properties:
        Description:
          description: A description about the new documentation snapshot.
          type: string
        DocumentationVersion:
          description: The version identifier of the to-be-updated documentation version.
          type: string
          minLength: 1
        RestApiId:
          description: The string identifier of the associated RestApi.
          type: string
          minLength: 1
      required:
        - DocumentationVersion
        - RestApiId
      x-stackql-resource-name: documentation_version
      x-stackql-primaryIdentifier:
        - DocumentationVersion
        - RestApiId
      x-create-only-properties:
        - DocumentationVersion
        - RestApiId
      x-required-permissions:
        create:
          - apigateway:GET
          - apigateway:POST
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PATCH
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    EndpointConfiguration:
      type: object
      additionalProperties: false
      properties:
        Types:
          type: array
          uniqueItems: true
          items:
            type: string
          description: A list of endpoint types of an API (RestApi) or its custom domain name (DomainName). For an edge-optimized API and its custom domain name, the endpoint type is ``"EDGE"``. For a regional API and its custom domain name, the endpoint type is ``REGIONAL``. For a private API, the endpoint type is ``PRIVATE``.
        VpcEndpointIds:
          type: array
          uniqueItems: true
          items:
            type: string
          description: A list of VpcEndpointIds of an API (RestApi) against which to create Route53 ALIASes. It is only supported for ``PRIVATE`` endpoint type.
      description: |-
        The ``EndpointConfiguration`` property type specifies the endpoint types of a REST API.
         ``EndpointConfiguration`` is a property of the [AWS::ApiGateway::RestApi](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html) resource.
    MutualTlsAuthentication:
      type: object
      properties:
        TruststoreUri:
          type: string
        TruststoreVersion:
          type: string
      additionalProperties: false
    DomainName:
      type: object
      properties:
        DomainName:
          type: string
        DistributionDomainName:
          type: string
        DistributionHostedZoneId:
          type: string
        EndpointConfiguration:
          $ref: '#/components/schemas/EndpointConfiguration'
        MutualTlsAuthentication:
          $ref: '#/components/schemas/MutualTlsAuthentication'
        RegionalDomainName:
          type: string
        RegionalHostedZoneId:
          type: string
        CertificateArn:
          type: string
        RegionalCertificateArn:
          type: string
        OwnershipVerificationCertificateArn:
          type: string
        SecurityPolicy:
          type: string
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: domain_name
      x-stackql-primaryIdentifier:
        - DomainName
      x-create-only-properties:
        - DomainName
      x-read-only-properties:
        - RegionalHostedZoneId
        - DistributionDomainName
        - RegionalDomainName
        - DistributionHostedZoneId
      x-required-permissions:
        create:
          - apigateway:*
        read:
          - apigateway:*
        update:
          - apigateway:*
        delete:
          - apigateway:*
        list:
          - apigateway:*
    GatewayResponse:
      type: object
      properties:
        Id:
          description: ''
          type: string
        RestApiId:
          description: The string identifier of the associated RestApi.
          type: string
        ResponseType:
          description: The response type of the associated GatewayResponse.
          type: string
        StatusCode:
          description: The HTTP status code for this GatewayResponse.
          type: string
        ResponseParameters:
          description: Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        ResponseTemplates:
          description: Response templates of the GatewayResponse as a string-to-string map of key-value pairs.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
      required:
        - ResponseType
        - RestApiId
      x-stackql-resource-name: gateway_response
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - ResponseType
        - RestApiId
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - apigateway:PUT
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PUT
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    Integration:
      type: object
      additionalProperties: false
      properties:
        CacheKeyParameters:
          description: A list of request parameters whose values API Gateway caches. To be valid values for ``cacheKeyParameters``, these parameters must also be specified for Method ``requestParameters``.
          type: array
          uniqueItems: true
          items:
            type: string
        CacheNamespace:
          description: Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the ``cacheNamespace``. You can specify the same ``cacheNamespace`` across resources to return the same cached data for requests to different resources.
          type: string
        ConnectionId:
          description: The ID of the VpcLink used for the integration when ``connectionType=VPC_LINK`` and undefined, otherwise.
          type: string
        ConnectionType:
          description: The type of the network connection to the integration endpoint. The valid value is ``INTERNET`` for connections through the public routable internet or ``VPC_LINK`` for private connections between API Gateway and a network load balancer in a VPC. The default value is ``INTERNET``.
          type: string
          enum:
            - INTERNET
            - VPC_LINK
        ContentHandling:
          description: |-
            Specifies how to handle request payload content type conversions. Supported values are ``CONVERT_TO_BINARY`` and ``CONVERT_TO_TEXT``, with the following behaviors:
             If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the ``passthroughBehavior`` is configured to support payload pass-through.
          type: string
          enum:
            - CONVERT_TO_BINARY
            - CONVERT_TO_TEXT
        Credentials:
          description: Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string ``arn:aws:iam::\*:user/\*``. To use resource-based permissions on supported AWS services, specify null.
          type: string
        IntegrationHttpMethod:
          description: Specifies the integration's HTTP method type. For the Type property, if you specify ``MOCK``, this property is optional. For Lambda integrations, you must set the integration method to ``POST``. For all other types, you must specify this property.
          type: string
        IntegrationResponses:
          description: Specifies the integration's responses.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/IntegrationResponse'
        PassthroughBehavior:
          description: >-
            Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in ``requestTemplates``. The valid value is one of the following: ``WHEN_NO_MATCH``: passes the method request body through the integration request to the back end without
            transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. ``WHEN_NO_TEMPLATES``: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415
            Unsupported Media Type response
          type: string
          enum:
            - WHEN_NO_MATCH
            - WHEN_NO_TEMPLATES
            - NEVER
        RequestParameters:
          description: >-
            A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of ``method.request.{location}.{name}``, where ``location`` is ``querystring``, ``path``, or ``header`` and
            ``name`` must be a valid and unique method request parameter name.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        RequestTemplates:
          description: Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        TimeoutInMillis:
          description: Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.
          type: integer
          minimum: 50
        Type:
          description: |-
            Specifies an API method integration type. The valid value is one of the following:
             For the HTTP and HTTP proxy integrations, each integration can specify a protocol (``http/https``), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a ``connectionType`` of ``VPC_LINK`` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
          type: string
          enum:
            - AWS
            - AWS_PROXY
            - HTTP
            - HTTP_PROXY
            - MOCK
        Uri:
          description: |-
            Specifies Uniform Resource Identifier (URI) of the integration endpoint.
             For ``HTTP`` or ``HTTP_PROXY`` integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification for standard integrations. If ``connectionType`` is ``VPC_LINK`` specify the Network Load Balancer DNS name. For ``AWS`` or ``AWS_PROXY`` integrations, the URI is of the form ``arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}``. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated AWS service (e.g., s3); and {subdomain} is a designated subdomain supported by certain AWS service for fast host-name lookup. action can be used for an AWS service action-based API, using an Action={name}&{p1}={v1}&p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_ap
          type: string
      required:
        - Type
      description: '``Integration`` is a property of the [AWS::ApiGateway::Method](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-method.html) resource that specifies information about the target backend that a method calls.'
    MethodResponse:
      type: object
      additionalProperties: false
      properties:
        ResponseModels:
          description: Specifies the Model resources used for the response's content-type. Response models are represented as a key/value map, with a content-type as the key and a Model name as the value.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        ResponseParameters:
          description: >-
            A key-value map specifying required or optional response parameters that API Gateway can send back to the caller. A key defines a method response header and the value specifies whether the associated method response header is required or not. The expression of the key must match the pattern ``method.response.header.{name}``, where ``name`` is a valid and unique header name. API Gateway passes certain integration response data to the method response headers specified here according to
            the mapping you prescribe in the API's IntegrationResponse. The integration response data that can be mapped include an integration response header expressed in ``integration.response.header.{name}``, a static value enclosed within a pair of single quotes (e.g., ``'application/json'``), or a JSON expression from the back-end response payload in the form of ``integration.response.body.{JSON-expression}``, where ``JSON-expression`` is a valid JSON expression without the ``$`` prefix.)
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: boolean
        StatusCode:
          description: The method response's status code.
          type: string
      required:
        - StatusCode
      description: Represents a method response of a given HTTP status code returned to the client. The method response is passed from the back end through the associated integration response that can be transformed using a mapping template.
    IntegrationResponse:
      type: object
      additionalProperties: false
      properties:
        ContentHandling:
          description: |-
            Specifies how to handle response payload content type conversions. Supported values are ``CONVERT_TO_BINARY`` and ``CONVERT_TO_TEXT``, with the following behaviors:
             If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.
          type: string
          enum:
            - CONVERT_TO_BINARY
            - CONVERT_TO_TEXT
        ResponseParameters:
          description: >-
            A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of ``method.response.header.{name}``, where ``name`` is a valid and unique header name. The mapped non-static value
            must match the pattern of ``integration.response.header.{name}`` or ``integration.response.body.{JSON-expression}``, where ``name`` is a valid and unique response header name and ``JSON-expression`` is a valid JSON expression without the ``$`` prefix.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        ResponseTemplates:
          description: Specifies the templates used to transform the integration response body. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        SelectionPattern:
          description: >-
            Specifies the regular expression (regex) pattern used to choose an integration response based on the response from the back end. For example, if the success response returns nothing and the error response returns some string, you could use the ``.+`` regex to match error response. However, make sure that the error response does not contain any newline (``\n``) character in such cases. If the back end is an LAMlong function, the LAMlong function error header is matched. For all other
            HTTP and AWS back ends, the HTTP status code is matched.
          type: string
        StatusCode:
          description: Specifies the status code that is used to map the integration response to an existing MethodResponse.
          type: string
      required:
        - StatusCode
      description: '``IntegrationResponse`` is a property of the [Amazon API Gateway Method Integration](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apitgateway-method-integration.html) property type that specifies the response that API Gateway sends after a method''s backend finishes processing a request.'
    Method:
      type: object
      properties:
        ApiKeyRequired:
          description: A boolean flag specifying whether a valid ApiKey is required to invoke this method.
          type: boolean
        AuthorizationScopes:
          description: >-
            A list of authorization scopes configured on the method. The scopes are used with a ``COGNITO_USER_POOLS`` authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide
            an access token instead of an identity token for authorization purposes.
          type: array
          items:
            type: string
        AuthorizationType:
          description: |-
            The method's authorization type. This parameter is required. For valid values, see [Method](https://docs.aws.amazon.com/apigateway/latest/api/API_Method.html) in the *API Gateway API Reference*.
              If you specify the ``AuthorizerId`` property, specify ``CUSTOM`` or ``COGNITO_USER_POOLS`` for this property.
          type: string
          enum:
            - NONE
            - AWS_IAM
            - CUSTOM
            - COGNITO_USER_POOLS
        AuthorizerId:
          description: The identifier of an authorizer to use on this method. The method's authorization type must be ``CUSTOM`` or ``COGNITO_USER_POOLS``.
          type: string
        HttpMethod:
          description: The method's HTTP verb.
          type: string
        Integration:
          description: Represents an ``HTTP``, ``HTTP_PROXY``, ``AWS``, ``AWS_PROXY``, or Mock integration.
          $ref: '#/components/schemas/Integration'
        MethodResponses:
          description: Gets a method response associated with a given HTTP status code.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/MethodResponse'
        OperationName:
          description: A human-friendly operation identifier for the method. For example, you can assign the ``operationName`` of ``ListPets`` for the ``GET /pets`` method in the ``PetStore`` example.
          type: string
        RequestModels:
          description: A key-value map specifying data schemas, represented by Model resources, (as the mapped value) of the request payloads of given content types (as the mapping key).
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
        RequestParameters:
          description: >-
            A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key is a method request parameter name matching the pattern of ``method.request.{location}.{name}``, where ``location`` is ``querystring``, ``path``, or ``header`` and ``name`` is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (``true``) or optional (``false``). The method request parameter
            names defined here are available in Integration to be mapped to integration request parameters or templates.
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: boolean
        RequestValidatorId:
          description: The identifier of a RequestValidator for request validation.
          type: string
        ResourceId:
          description: The Resource identifier for the MethodResponse resource.
          type: string
        RestApiId:
          description: The string identifier of the associated RestApi.
          type: string
      required:
        - RestApiId
        - ResourceId
        - HttpMethod
      x-stackql-resource-name: method
      x-stackql-primaryIdentifier:
        - RestApiId
        - ResourceId
        - HttpMethod
      x-create-only-properties:
        - RestApiId
        - ResourceId
        - HttpMethod
      x-required-permissions:
        create:
          - apigateway:PUT
          - apigateway:GET
          - iam:PassRole
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:DELETE
          - apigateway:PUT
          - iam:PassRole
        delete:
          - apigateway:DELETE
    Model:
      type: object
      properties:
        ContentType:
          type: string
          description: The content-type for the model.
        Description:
          type: string
          description: The description of the model.
        Name:
          type: string
          description: |-
            A name for the model. If you don't specify a name, CFN generates a unique physical ID and uses that ID for the model name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
              If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
        RestApiId:
          type: string
          description: The string identifier of the associated RestApi.
        Schema:
          description: The schema for the model. For ``application/json`` models, this should be JSON schema draft 4 model. Do not include "\*/" characters in the description of any properties because such "\*/" characters may be interpreted as the closing marker for comments in some languages, such as Java or JavaScript, causing the installation of your API's SDK generated by API Gateway to fail.
          type: object
      required:
        - RestApiId
      x-stackql-resource-name: model
      x-stackql-primaryIdentifier:
        - RestApiId
        - Name
      x-create-only-properties:
        - ContentType
        - Name
        - RestApiId
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
        read:
          - apigateway:GET
        update:
          - apigateway:PATCH
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    RequestValidator:
      type: object
      properties:
        RequestValidatorId:
          description: ''
          type: string
        Name:
          description: The name of this RequestValidator
          type: string
        RestApiId:
          description: The string identifier of the associated RestApi.
          type: string
        ValidateRequestBody:
          description: A Boolean flag to indicate whether to validate a request body according to the configured Model schema.
          type: boolean
        ValidateRequestParameters:
          description: A Boolean flag to indicate whether to validate request parameters (``true``) or not (``false``).
          type: boolean
      required:
        - RestApiId
      x-stackql-resource-name: request_validator
      x-stackql-primaryIdentifier:
        - RestApiId
        - RequestValidatorId
      x-create-only-properties:
        - Name
        - RestApiId
      x-read-only-properties:
        - RequestValidatorId
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
        update:
          - apigateway:PATCH
          - apigateway:GET
        delete:
          - apigateway:DELETE
        read:
          - apigateway:GET
        list:
          - apigateway:GET
    Resource:
      type: object
      properties:
        ResourceId:
          description: ''
          type: string
        RestApiId:
          description: The string identifier of the associated RestApi.
          type: string
        ParentId:
          description: The parent resource's identifier.
          type: string
        PathPart:
          description: The last path segment for this resource.
          type: string
      required:
        - ParentId
        - PathPart
        - RestApiId
      x-stackql-resource-name: resource
      x-stackql-primaryIdentifier:
        - RestApiId
        - ResourceId
      x-create-only-properties:
        - PathPart
        - ParentId
        - RestApiId
      x-read-only-properties:
        - ResourceId
      x-required-permissions:
        read:
          - apigateway:GET
        create:
          - apigateway:POST
        update:
          - apigateway:GET
          - apigateway:PATCH
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    S3Location:
      type: object
      additionalProperties: false
      properties:
        Bucket:
          type: string
          description: The name of the S3 bucket where the OpenAPI file is stored.
        ETag:
          type: string
          description: The Amazon S3 ETag (a file checksum) of the OpenAPI file. If you don't specify a value, API Gateway skips ETag validation of your OpenAPI file.
        Version:
          type: string
          description: For versioning-enabled buckets, a specific version of the OpenAPI file.
        Key:
          type: string
          description: The file name of the OpenAPI file (Amazon S3 object name).
      description: |-
        ``S3Location`` is a property of the [AWS::ApiGateway::RestApi](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-restapi.html) resource that specifies the Amazon S3 location of a OpenAPI (formerly Swagger) file that defines a set of RESTful APIs in JSON or YAML.
         On January 1, 2016, the Swagger Specification was donated to the [OpenAPI initiative](https://docs.aws.amazon.com/https://www.openapis.org/), becoming the foundation of the OpenAPI Specification.
    RestApi:
      type: object
      properties:
        RestApiId:
          type: string
          description: ''
        RootResourceId:
          type: string
          description: ''
        ApiKeySourceType:
          type: string
          description: 'The source of the API key for metering requests according to a usage plan. Valid values are: ``HEADER`` to read the API key from the ``X-API-Key`` header of a request. ``AUTHORIZER`` to read the API key from the ``UsageIdentifierKey`` from a custom authorizer.'
        BinaryMediaTypes:
          type: array
          uniqueItems: true
          items:
            type: string
          description: The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.
        Body:
          type: object
          description: An OpenAPI specification that defines a set of RESTful APIs in JSON format. For YAML templates, you can also provide the specification in YAML format.
        BodyS3Location:
          $ref: '#/components/schemas/S3Location'
          description: The Amazon Simple Storage Service (Amazon S3) location that points to an OpenAPI file, which defines a set of RESTful APIs in JSON or YAML format.
        CloneFrom:
          type: string
          description: The ID of the RestApi that you want to clone from.
        EndpointConfiguration:
          $ref: '#/components/schemas/EndpointConfiguration'
          description: A list of the endpoint types of the API. Use this property when creating an API. When importing an existing API, specify the endpoint configuration types using the ``Parameters`` property.
        Description:
          type: string
          description: The description of the RestApi.
        DisableExecuteApiEndpoint:
          type: boolean
          description: Specifies whether clients can invoke your API by using the default ``execute-api`` endpoint. By default, clients can invoke your API with the default ``https://{api_id}.execute-api.{region}.amazonaws.com`` endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint
        FailOnWarnings:
          type: boolean
          description: A query parameter to indicate whether to rollback the API update (``true``) or not (``false``) when a warning is encountered. The default value is ``false``.
        Name:
          type: string
          description: The name of the RestApi. A name is required if the REST API is not based on an OpenAPI specification.
        MinimumCompressionSize:
          type: integer
          description: A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.
        Mode:
          type: string
          description: |-
            This property applies only when you use OpenAPI to define your REST API. The ``Mode`` determines how API Gateway handles resource updates.
             Valid values are ``overwrite`` or ``merge``. 
             For ``overwrite``, the new API definition replaces the existing one. The existing API identifier remains unchanged.
              For ``merge``, the new API definition is merged with the existing API.
             If you don't specify this property, a default value is chosen. For REST APIs created before March 29, 2021, the default is ``overwrite``. For REST APIs created after March 29, 2021, the new API definition takes precedence, but any container types such as endpoint configurations and binary media types are merged with the existing API. 
             Use the default mode to define top-level ``RestApi`` properties in addition to using OpenAPI. Generally, it's preferred to use API Gateway's OpenAPI extensions to model these properties.
        Policy:
          type: object
          description: A policy document that contains the permissions for the ``RestApi`` resource. To set the ARN for the policy, use the ``!Join`` intrinsic function with ``""`` as delimiter and values of ``"execute-api:/"`` and ``"*"``.
        Parameters:
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
          description: Custom header parameters as part of the request. For example, to exclude DocumentationParts from an imported API, set ``ignore=documentation`` as a ``parameters`` value, as in the AWS CLI command of ``aws apigateway import-rest-api --parameters ignore=documentation --body 'file:///path/to/imported-api-body.json'``.
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
          description: The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with ``aws:``. The tag value can be up to 256 characters.
      x-stackql-resource-name: rest_api
      x-stackql-primaryIdentifier:
        - RestApiId
      x-read-only-properties:
        - RestApiId
        - RootResourceId
      x-required-permissions:
        create:
          - apigateway:GET
          - apigateway:POST
          - apigateway:PUT
          - apigateway:PATCH
          - apigateway:UpdateRestApiPolicy
          - s3:GetObject
          - iam:PassRole
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:DELETE
          - apigateway:PATCH
          - apigateway:PUT
          - apigateway:UpdateRestApiPolicy
          - s3:GetObject
          - iam:PassRole
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    Stage:
      type: object
      properties:
        AccessLogSetting:
          description: Access log settings, including the access log format and access log destination ARN.
          $ref: '#/components/schemas/AccessLogSetting'
        CacheClusterEnabled:
          description: Specifies whether a cache cluster is enabled for the stage.
          type: boolean
        CacheClusterSize:
          description: The stage's cache capacity in GB. For more information about choosing a cache size, see [Enabling API caching to enhance responsiveness](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html).
          type: string
        CanarySetting:
          description: Settings for the canary deployment in this stage.
          $ref: '#/components/schemas/CanarySetting'
        ClientCertificateId:
          description: The identifier of a client certificate for an API stage.
          type: string
        DeploymentId:
          description: The identifier of the Deployment that the stage points to.
          type: string
        Description:
          description: The stage's description.
          type: string
        DocumentationVersion:
          description: The version of the associated API documentation.
          type: string
        MethodSettings:
          description: A map that defines the method settings for a Stage resource. Keys (designated as ``/{method_setting_key`` below) are method paths defined as ``{resource_path}/{http_method}`` for an individual method override, or ``/\*/\*`` for overriding all methods in the stage.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/MethodSetting'
        RestApiId:
          description: The string identifier of the associated RestApi.
          type: string
        StageName:
          description: The name of the stage is the first path segment in the Uniform Resource Identifier (URI) of a call to API Gateway. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.
          type: string
        Tags:
          description: The collection of tags. Each tag element is associated with a given resource.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        TracingEnabled:
          description: Specifies whether active tracing with X-ray is enabled for the Stage.
          type: boolean
        Variables:
          description: 'A map (string-to-string map) that defines the stage variables, where the variable name is the key and the variable value is the value. Variable names are limited to alphanumeric characters. Values must match the following regular expression: ``[A-Za-z0-9-._~:/?#&=,]+``.'
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
      required:
        - RestApiId
      x-stackql-resource-name: stage
      x-stackql-primaryIdentifier:
        - RestApiId
        - StageName
      x-create-only-properties:
        - RestApiId
        - StageName
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:PATCH
          - apigateway:PUT
          - apigateway:DELETE
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    ApiStage:
      type: object
      additionalProperties: false
      properties:
        ApiId:
          type: string
          description: API Id of the associated API stage in a usage plan.
        Stage:
          type: string
          description: API stage name of the associated API stage in a usage plan.
        Throttle:
          type: object
          description: Map containing method level throttling information for API stage in a usage plan.
          additionalProperties: false
          x-patternProperties:
            .*:
              $ref: '#/components/schemas/ThrottleSettings'
      description: API stage name of the associated API stage in a usage plan.
    ThrottleSettings:
      type: object
      additionalProperties: false
      properties:
        BurstLimit:
          type: integer
          minimum: 0
          description: The API target request burst rate limit. This allows more requests through for a period of time than the target rate limit.
        RateLimit:
          type: number
          minimum: 0
          description: The API target request rate limit.
      description: '``ThrottleSettings`` is a property of the [AWS::ApiGateway::UsagePlan](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-usageplan.html) resource that specifies the overall request rate (average requests per second) and burst capacity when users call your REST APIs.'
    QuotaSettings:
      type: object
      additionalProperties: false
      properties:
        Limit:
          type: integer
          minimum: 0
          description: The target maximum number of requests that can be made in a given time period.
        Offset:
          type: integer
          minimum: 0
          description: The number of requests subtracted from the given limit in the initial time period.
        Period:
          type: string
          description: The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".
      description: |-
        ``QuotaSettings`` is a property of the [AWS::ApiGateway::UsagePlan](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-usageplan.html) resource that specifies a target for the maximum number of requests users can make to your REST APIs.
         In some cases clients can exceed the targets that you set. Don’t rely on usage plans to control costs. Consider using [](https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html) to monitor costs and [](https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html) to manage API requests.
    UsagePlan:
      type: object
      properties:
        Id:
          type: string
          description: ''
        ApiStages:
          type: array
          description: The associated API stages of a usage plan.
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ApiStage'
        Description:
          type: string
          description: The description of a usage plan.
        Quota:
          $ref: '#/components/schemas/QuotaSettings'
          description: The target maximum number of permitted requests per a given unit time interval.
        Tags:
          type: array
          description: The collection of tags. Each tag element is associated with a given resource.
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Throttle:
          $ref: '#/components/schemas/ThrottleSettings'
          description: A map containing method level throttling information for API stage in a usage plan.
        UsagePlanName:
          type: string
          description: The name of a usage plan.
      x-stackql-resource-name: usage_plan
      x-stackql-primaryIdentifier:
        - Id
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        update:
          - apigateway:GET
          - apigateway:DELETE
          - apigateway:PATCH
          - apigateway:PUT
        delete:
          - apigateway:DELETE
          - apigateway:GET
          - apigateway:PATCH
        list:
          - apigateway:GET
    UsagePlanKey:
      type: object
      properties:
        KeyId:
          description: The Id of the UsagePlanKey resource.
          type: string
        KeyType:
          description: The type of a UsagePlanKey resource for a plan customer.
          type: string
          enum:
            - API_KEY
        UsagePlanId:
          description: The Id of the UsagePlan resource representing the usage plan containing the UsagePlanKey resource representing a plan customer.
          type: string
        Id:
          description: ''
          type: string
      required:
        - KeyType
        - UsagePlanId
        - KeyId
      x-stackql-resource-name: usage_plan_key
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - KeyId
        - UsagePlanId
        - KeyType
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
        read:
          - apigateway:GET
        delete:
          - apigateway:DELETE
          - apigateway:GET
        list:
          - apigateway:GET
    VpcLink:
      type: object
      properties:
        Name:
          description: A name for the VPC link.
          type: string
        Description:
          description: A description of the VPC link.
          type: string
        Tags:
          description: An array of arbitrary tags (key-value pairs) to associate with the stage.
          x-insertionOrder: false
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        TargetArns:
          description: The ARN of network load balancer of the VPC targeted by the VPC link. The network load balancer must be owned by the same AWS account of the API owner.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        VpcLinkId:
          description: The ID of the instance that backs VPC link.
          type: string
      required:
        - Name
        - TargetArns
      x-stackql-resource-name: vpc_link
      x-stackql-primaryIdentifier:
        - VpcLinkId
      x-create-only-properties:
        - TargetArns
      x-read-only-properties:
        - VpcLinkId
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:PUT
          - apigateway:GET
          - ec2:CreateVpcEndpointServiceConfiguration
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:ModifyVpcEndpointServicePermissions
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
          - ec2:CreateVpcEndpointServiceConfiguration
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:ModifyVpcEndpointServicePermissions
        read:
          - apigateway:GET
          - ec2:CreateVpcEndpointServiceConfiguration
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:ModifyVpcEndpointServicePermissions
        list:
          - apigateway:GET
          - ec2:CreateVpcEndpointServiceConfiguration
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:ModifyVpcEndpointServicePermissions
        delete:
          - apigateway:GET
          - apigateway:DELETE
          - apigateway:PUT
          - ec2:CreateVpcEndpointServiceConfiguration
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:ModifyVpcEndpointServicePermissions
  x-stackQL-resources:
    accounts:
      name: accounts
      id: awscc.apigateway.accounts
      x-cfn-schema-name: Account
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Account'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Account'
                AND region = 'us-east-1'
    account:
      name: account
      id: awscc.apigateway.account
      x-cfn-schema-name: Account
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CloudWatchRoleArn') as cloud_watch_role_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Account'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'CloudWatchRoleArn') as cloud_watch_role_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Account'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    api_keys:
      name: api_keys
      id: awscc.apigateway.api_keys
      x-cfn-schema-name: ApiKey
      x-type: list
      x-identifiers:
        - APIKeyId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.APIKeyId') as api_key_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::ApiKey'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'APIKeyId') as api_key_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::ApiKey'
                AND region = 'us-east-1'
    api_key:
      name: api_key
      id: awscc.apigateway.api_key
      x-cfn-schema-name: ApiKey
      x-type: get
      x-identifiers:
        - APIKeyId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.APIKeyId') as api_key_id,
              JSON_EXTRACT(Properties, '$.CustomerId') as customer_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.GenerateDistinctId') as generate_distinct_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.StageKeys') as stage_keys,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Value') as value
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::ApiKey'
              AND data__Identifier = '<APIKeyId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'APIKeyId') as api_key_id,
                json_extract_path_text(Properties, 'CustomerId') as customer_id,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Enabled') as enabled,
                json_extract_path_text(Properties, 'GenerateDistinctId') as generate_distinct_id,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'StageKeys') as stage_keys,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Value') as value
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::ApiKey'
                AND data__Identifier = '<APIKeyId>'
                AND region = 'us-east-1'
    authorizers:
      name: authorizers
      id: awscc.apigateway.authorizers
      x-cfn-schema-name: Authorizer
      x-type: list
      x-identifiers:
        - RestApiId
        - AuthorizerId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Authorizer'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'AuthorizerId') as authorizer_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Authorizer'
                AND region = 'us-east-1'
    authorizer:
      name: authorizer
      id: awscc.apigateway.authorizer
      x-cfn-schema-name: Authorizer
      x-type: get
      x-identifiers:
        - RestApiId
        - AuthorizerId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(Properties, '$.AuthorizerCredentials') as authorizer_credentials,
              JSON_EXTRACT(Properties, '$.AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
              JSON_EXTRACT(Properties, '$.AuthorizerUri') as authorizer_uri,
              JSON_EXTRACT(Properties, '$.IdentitySource') as identity_source,
              JSON_EXTRACT(Properties, '$.IdentityValidationExpression') as identity_validation_expression,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ProviderARNs') as provider_arns,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Authorizer'
              AND data__Identifier = '<RestApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'AuthorizerId') as authorizer_id,
                json_extract_path_text(Properties, 'AuthType') as auth_type,
                json_extract_path_text(Properties, 'AuthorizerCredentials') as authorizer_credentials,
                json_extract_path_text(Properties, 'AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
                json_extract_path_text(Properties, 'AuthorizerUri') as authorizer_uri,
                json_extract_path_text(Properties, 'IdentitySource') as identity_source,
                json_extract_path_text(Properties, 'IdentityValidationExpression') as identity_validation_expression,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'ProviderARNs') as provider_arns,
                json_extract_path_text(Properties, 'Type') as type
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Authorizer'
                AND data__Identifier = '<RestApiId>'
                AND region = 'us-east-1'
    base_path_mappings:
      name: base_path_mappings
      id: awscc.apigateway.base_path_mappings
      x-cfn-schema-name: BasePathMapping
      x-type: list
      x-identifiers:
        - DomainName
        - BasePath
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.BasePath') as base_path
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::BasePathMapping'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainName') as domain_name,
                json_extract_path_text(Properties, 'BasePath') as base_path
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::BasePathMapping'
                AND region = 'us-east-1'
    base_path_mapping:
      name: base_path_mapping
      id: awscc.apigateway.base_path_mapping
      x-cfn-schema-name: BasePathMapping
      x-type: get
      x-identifiers:
        - DomainName
        - BasePath
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BasePath') as base_path,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.Stage') as stage
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::BasePathMapping'
              AND data__Identifier = '<DomainName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'BasePath') as base_path,
                json_extract_path_text(Properties, 'DomainName') as domain_name,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'Stage') as stage
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::BasePathMapping'
                AND data__Identifier = '<DomainName>'
                AND region = 'us-east-1'
    client_certificates:
      name: client_certificates
      id: awscc.apigateway.client_certificates
      x-cfn-schema-name: ClientCertificate
      x-type: list
      x-identifiers:
        - ClientCertificateId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClientCertificateId') as client_certificate_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::ClientCertificate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ClientCertificateId') as client_certificate_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::ClientCertificate'
                AND region = 'us-east-1'
    client_certificate:
      name: client_certificate
      id: awscc.apigateway.client_certificate
      x-cfn-schema-name: ClientCertificate
      x-type: get
      x-identifiers:
        - ClientCertificateId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClientCertificateId') as client_certificate_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::ClientCertificate'
              AND data__Identifier = '<ClientCertificateId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ClientCertificateId') as client_certificate_id,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::ClientCertificate'
                AND data__Identifier = '<ClientCertificateId>'
                AND region = 'us-east-1'
    deployments:
      name: deployments
      id: awscc.apigateway.deployments
      x-cfn-schema-name: Deployment
      x-type: list
      x-identifiers:
        - DeploymentId
        - RestApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Deployment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DeploymentId') as deployment_id,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Deployment'
                AND region = 'us-east-1'
    deployment:
      name: deployment
      id: awscc.apigateway.deployment
      x-cfn-schema-name: Deployment
      x-type: get
      x-identifiers:
        - DeploymentId
        - RestApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.DeploymentCanarySettings') as deployment_canary_settings,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.StageDescription') as stage_description,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Deployment'
              AND data__Identifier = '<DeploymentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DeploymentId') as deployment_id,
                json_extract_path_text(Properties, 'DeploymentCanarySettings') as deployment_canary_settings,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'StageDescription') as stage_description,
                json_extract_path_text(Properties, 'StageName') as stage_name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Deployment'
                AND data__Identifier = '<DeploymentId>'
                AND region = 'us-east-1'
    documentation_parts:
      name: documentation_parts
      id: awscc.apigateway.documentation_parts
      x-cfn-schema-name: DocumentationPart
      x-type: list
      x-identifiers:
        - DocumentationPartId
        - RestApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DocumentationPartId') as documentation_part_id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DocumentationPart'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DocumentationPartId') as documentation_part_id,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DocumentationPart'
                AND region = 'us-east-1'
    documentation_part:
      name: documentation_part
      id: awscc.apigateway.documentation_part
      x-cfn-schema-name: DocumentationPart
      x-type: get
      x-identifiers:
        - DocumentationPartId
        - RestApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DocumentationPartId') as documentation_part_id,
              JSON_EXTRACT(Properties, '$.Location') as location,
              JSON_EXTRACT(Properties, '$.Properties') as properties,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DocumentationPart'
              AND data__Identifier = '<DocumentationPartId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DocumentationPartId') as documentation_part_id,
                json_extract_path_text(Properties, 'Location') as location,
                json_extract_path_text(Properties, 'Properties') as properties,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DocumentationPart'
                AND data__Identifier = '<DocumentationPartId>'
                AND region = 'us-east-1'
    documentation_versions:
      name: documentation_versions
      id: awscc.apigateway.documentation_versions
      x-cfn-schema-name: DocumentationVersion
      x-type: list
      x-identifiers:
        - DocumentationVersion
        - RestApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DocumentationVersion') as documentation_version,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DocumentationVersion') as documentation_version,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
                AND region = 'us-east-1'
    documentation_version:
      name: documentation_version
      id: awscc.apigateway.documentation_version
      x-cfn-schema-name: DocumentationVersion
      x-type: get
      x-identifiers:
        - DocumentationVersion
        - RestApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DocumentationVersion') as documentation_version,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
              AND data__Identifier = '<DocumentationVersion>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'DocumentationVersion') as documentation_version,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DocumentationVersion'
                AND data__Identifier = '<DocumentationVersion>'
                AND region = 'us-east-1'
    domain_names:
      name: domain_names
      id: awscc.apigateway.domain_names
      x-cfn-schema-name: DomainName
      x-type: list
      x-identifiers:
        - DomainName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DomainName'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainName') as domain_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::DomainName'
                AND region = 'us-east-1'
    domain_name:
      name: domain_name
      id: awscc.apigateway.domain_name
      x-cfn-schema-name: DomainName
      x-type: get
      x-identifiers:
        - DomainName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.DistributionDomainName') as distribution_domain_name,
              JSON_EXTRACT(Properties, '$.DistributionHostedZoneId') as distribution_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.EndpointConfiguration') as endpoint_configuration,
              JSON_EXTRACT(Properties, '$.MutualTlsAuthentication') as mutual_tls_authentication,
              JSON_EXTRACT(Properties, '$.RegionalDomainName') as regional_domain_name,
              JSON_EXTRACT(Properties, '$.RegionalHostedZoneId') as regional_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.RegionalCertificateArn') as regional_certificate_arn,
              JSON_EXTRACT(Properties, '$.OwnershipVerificationCertificateArn') as ownership_verification_certificate_arn,
              JSON_EXTRACT(Properties, '$.SecurityPolicy') as security_policy,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DomainName'
              AND data__Identifier = '<DomainName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainName') as domain_name,
                json_extract_path_text(Properties, 'DistributionDomainName') as distribution_domain_name,
                json_extract_path_text(Properties, 'DistributionHostedZoneId') as distribution_hosted_zone_id,
                json_extract_path_text(Properties, 'EndpointConfiguration') as endpoint_configuration,
                json_extract_path_text(Properties, 'MutualTlsAuthentication') as mutual_tls_authentication,
                json_extract_path_text(Properties, 'RegionalDomainName') as regional_domain_name,
                json_extract_path_text(Properties, 'RegionalHostedZoneId') as regional_hosted_zone_id,
                json_extract_path_text(Properties, 'CertificateArn') as certificate_arn,
                json_extract_path_text(Properties, 'RegionalCertificateArn') as regional_certificate_arn,
                json_extract_path_text(Properties, 'OwnershipVerificationCertificateArn') as ownership_verification_certificate_arn,
                json_extract_path_text(Properties, 'SecurityPolicy') as security_policy,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::DomainName'
                AND data__Identifier = '<DomainName>'
                AND region = 'us-east-1'
    gateway_responses:
      name: gateway_responses
      id: awscc.apigateway.gateway_responses
      x-cfn-schema-name: GatewayResponse
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::GatewayResponse'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::GatewayResponse'
                AND region = 'us-east-1'
    gateway_response:
      name: gateway_response
      id: awscc.apigateway.gateway_response
      x-cfn-schema-name: GatewayResponse
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ResponseType') as response_type,
              JSON_EXTRACT(Properties, '$.StatusCode') as status_code,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.ResponseTemplates') as response_templates
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::GatewayResponse'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'ResponseType') as response_type,
                json_extract_path_text(Properties, 'StatusCode') as status_code,
                json_extract_path_text(Properties, 'ResponseParameters') as response_parameters,
                json_extract_path_text(Properties, 'ResponseTemplates') as response_templates
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::GatewayResponse'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    methods:
      name: methods
      id: awscc.apigateway.methods
      x-cfn-schema-name: Method
      x-type: list
      x-identifiers:
        - RestApiId
        - ResourceId
        - HttpMethod
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.HttpMethod') as http_method
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Method'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'ResourceId') as resource_id,
                json_extract_path_text(Properties, 'HttpMethod') as http_method
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Method'
                AND region = 'us-east-1'
    method:
      name: method
      id: awscc.apigateway.method
      x-cfn-schema-name: Method
      x-type: get
      x-identifiers:
        - RestApiId
        - ResourceId
        - HttpMethod
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiKeyRequired') as api_key_required,
              JSON_EXTRACT(Properties, '$.AuthorizationScopes') as authorization_scopes,
              JSON_EXTRACT(Properties, '$.AuthorizationType') as authorization_type,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.HttpMethod') as http_method,
              JSON_EXTRACT(Properties, '$.Integration') as integration,
              JSON_EXTRACT(Properties, '$.MethodResponses') as method_responses,
              JSON_EXTRACT(Properties, '$.OperationName') as operation_name,
              JSON_EXTRACT(Properties, '$.RequestModels') as request_models,
              JSON_EXTRACT(Properties, '$.RequestParameters') as request_parameters,
              JSON_EXTRACT(Properties, '$.RequestValidatorId') as request_validator_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Method'
              AND data__Identifier = '<RestApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiKeyRequired') as api_key_required,
                json_extract_path_text(Properties, 'AuthorizationScopes') as authorization_scopes,
                json_extract_path_text(Properties, 'AuthorizationType') as authorization_type,
                json_extract_path_text(Properties, 'AuthorizerId') as authorizer_id,
                json_extract_path_text(Properties, 'HttpMethod') as http_method,
                json_extract_path_text(Properties, 'Integration') as integration,
                json_extract_path_text(Properties, 'MethodResponses') as method_responses,
                json_extract_path_text(Properties, 'OperationName') as operation_name,
                json_extract_path_text(Properties, 'RequestModels') as request_models,
                json_extract_path_text(Properties, 'RequestParameters') as request_parameters,
                json_extract_path_text(Properties, 'RequestValidatorId') as request_validator_id,
                json_extract_path_text(Properties, 'ResourceId') as resource_id,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Method'
                AND data__Identifier = '<RestApiId>'
                AND region = 'us-east-1'
    models:
      name: models
      id: awscc.apigateway.models
      x-cfn-schema-name: Model
      x-type: list
      x-identifiers:
        - RestApiId
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Model'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'Name') as name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Model'
                AND region = 'us-east-1'
    model:
      name: model
      id: awscc.apigateway.model
      x-cfn-schema-name: Model
      x-type: get
      x-identifiers:
        - RestApiId
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ContentType') as content_type,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.Schema') as _schema
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Model'
              AND data__Identifier = '<RestApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ContentType') as content_type,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'Schema') as _schema
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Model'
                AND data__Identifier = '<RestApiId>'
                AND region = 'us-east-1'
    request_validators:
      name: request_validators
      id: awscc.apigateway.request_validators
      x-cfn-schema-name: RequestValidator
      x-type: list
      x-identifiers:
        - RestApiId
        - RequestValidatorId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.RequestValidatorId') as request_validator_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::RequestValidator'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'RequestValidatorId') as request_validator_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::RequestValidator'
                AND region = 'us-east-1'
    request_validator:
      name: request_validator
      id: awscc.apigateway.request_validator
      x-cfn-schema-name: RequestValidator
      x-type: get
      x-identifiers:
        - RestApiId
        - RequestValidatorId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RequestValidatorId') as request_validator_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ValidateRequestBody') as validate_request_body,
              JSON_EXTRACT(Properties, '$.ValidateRequestParameters') as validate_request_parameters
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::RequestValidator'
              AND data__Identifier = '<RestApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RequestValidatorId') as request_validator_id,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'ValidateRequestBody') as validate_request_body,
                json_extract_path_text(Properties, 'ValidateRequestParameters') as validate_request_parameters
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::RequestValidator'
                AND data__Identifier = '<RestApiId>'
                AND region = 'us-east-1'
    resources:
      name: resources
      id: awscc.apigateway.resources
      x-cfn-schema-name: Resource
      x-type: list
      x-identifiers:
        - RestApiId
        - ResourceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Resource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'ResourceId') as resource_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Resource'
                AND region = 'us-east-1'
    resource:
      name: resource
      id: awscc.apigateway.resource
      x-cfn-schema-name: Resource
      x-type: get
      x-identifiers:
        - RestApiId
        - ResourceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.ParentId') as parent_id,
              JSON_EXTRACT(Properties, '$.PathPart') as path_part
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Resource'
              AND data__Identifier = '<RestApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ResourceId') as resource_id,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'ParentId') as parent_id,
                json_extract_path_text(Properties, 'PathPart') as path_part
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Resource'
                AND data__Identifier = '<RestApiId>'
                AND region = 'us-east-1'
    rest_apis:
      name: rest_apis
      id: awscc.apigateway.rest_apis
      x-cfn-schema-name: RestApi
      x-type: list
      x-identifiers:
        - RestApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::RestApi'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::RestApi'
                AND region = 'us-east-1'
    rest_api:
      name: rest_api
      id: awscc.apigateway.rest_api
      x-cfn-schema-name: RestApi
      x-type: get
      x-identifiers:
        - RestApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.RootResourceId') as root_resource_id,
              JSON_EXTRACT(Properties, '$.ApiKeySourceType') as api_key_source_type,
              JSON_EXTRACT(Properties, '$.BinaryMediaTypes') as binary_media_types,
              JSON_EXTRACT(Properties, '$.Body') as body,
              JSON_EXTRACT(Properties, '$.BodyS3Location') as body_s3_location,
              JSON_EXTRACT(Properties, '$.CloneFrom') as clone_from,
              JSON_EXTRACT(Properties, '$.EndpointConfiguration') as endpoint_configuration,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
              JSON_EXTRACT(Properties, '$.FailOnWarnings') as fail_on_warnings,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.MinimumCompressionSize') as minimum_compression_size,
              JSON_EXTRACT(Properties, '$.Mode') as mode,
              JSON_EXTRACT(Properties, '$.Policy') as policy,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::RestApi'
              AND data__Identifier = '<RestApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'RootResourceId') as root_resource_id,
                json_extract_path_text(Properties, 'ApiKeySourceType') as api_key_source_type,
                json_extract_path_text(Properties, 'BinaryMediaTypes') as binary_media_types,
                json_extract_path_text(Properties, 'Body') as body,
                json_extract_path_text(Properties, 'BodyS3Location') as body_s3_location,
                json_extract_path_text(Properties, 'CloneFrom') as clone_from,
                json_extract_path_text(Properties, 'EndpointConfiguration') as endpoint_configuration,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
                json_extract_path_text(Properties, 'FailOnWarnings') as fail_on_warnings,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'MinimumCompressionSize') as minimum_compression_size,
                json_extract_path_text(Properties, 'Mode') as mode,
                json_extract_path_text(Properties, 'Policy') as policy,
                json_extract_path_text(Properties, 'Parameters') as parameters,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::RestApi'
                AND data__Identifier = '<RestApiId>'
                AND region = 'us-east-1'
    stages:
      name: stages
      id: awscc.apigateway.stages
      x-cfn-schema-name: Stage
      x-type: list
      x-identifiers:
        - RestApiId
        - StageName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Stage'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'StageName') as stage_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::Stage'
                AND region = 'us-east-1'
    stage:
      name: stage
      id: awscc.apigateway.stage
      x-cfn-schema-name: Stage
      x-type: get
      x-identifiers:
        - RestApiId
        - StageName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccessLogSetting') as access_log_setting,
              JSON_EXTRACT(Properties, '$.CacheClusterEnabled') as cache_cluster_enabled,
              JSON_EXTRACT(Properties, '$.CacheClusterSize') as cache_cluster_size,
              JSON_EXTRACT(Properties, '$.CanarySetting') as canary_setting,
              JSON_EXTRACT(Properties, '$.ClientCertificateId') as client_certificate_id,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DocumentationVersion') as documentation_version,
              JSON_EXTRACT(Properties, '$.MethodSettings') as method_settings,
              JSON_EXTRACT(Properties, '$.RestApiId') as rest_api_id,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TracingEnabled') as tracing_enabled,
              JSON_EXTRACT(Properties, '$.Variables') as variables
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Stage'
              AND data__Identifier = '<RestApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccessLogSetting') as access_log_setting,
                json_extract_path_text(Properties, 'CacheClusterEnabled') as cache_cluster_enabled,
                json_extract_path_text(Properties, 'CacheClusterSize') as cache_cluster_size,
                json_extract_path_text(Properties, 'CanarySetting') as canary_setting,
                json_extract_path_text(Properties, 'ClientCertificateId') as client_certificate_id,
                json_extract_path_text(Properties, 'DeploymentId') as deployment_id,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'DocumentationVersion') as documentation_version,
                json_extract_path_text(Properties, 'MethodSettings') as method_settings,
                json_extract_path_text(Properties, 'RestApiId') as rest_api_id,
                json_extract_path_text(Properties, 'StageName') as stage_name,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TracingEnabled') as tracing_enabled,
                json_extract_path_text(Properties, 'Variables') as variables
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::Stage'
                AND data__Identifier = '<RestApiId>'
                AND region = 'us-east-1'
    usage_plans:
      name: usage_plans
      id: awscc.apigateway.usage_plans
      x-cfn-schema-name: UsagePlan
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::UsagePlan'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::UsagePlan'
                AND region = 'us-east-1'
    usage_plan:
      name: usage_plan
      id: awscc.apigateway.usage_plan
      x-cfn-schema-name: UsagePlan
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ApiStages') as api_stages,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Quota') as quota,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Throttle') as throttle,
              JSON_EXTRACT(Properties, '$.UsagePlanName') as usage_plan_name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::UsagePlan'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'ApiStages') as api_stages,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Quota') as quota,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Throttle') as throttle,
                json_extract_path_text(Properties, 'UsagePlanName') as usage_plan_name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::UsagePlan'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    usage_plan_keys:
      name: usage_plan_keys
      id: awscc.apigateway.usage_plan_keys
      x-cfn-schema-name: UsagePlanKey
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
                AND region = 'us-east-1'
    usage_plan_key:
      name: usage_plan_key
      id: awscc.apigateway.usage_plan_key
      x-cfn-schema-name: UsagePlanKey
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.KeyId') as key_id,
              JSON_EXTRACT(Properties, '$.KeyType') as key_type,
              JSON_EXTRACT(Properties, '$.UsagePlanId') as usage_plan_id,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'KeyId') as key_id,
                json_extract_path_text(Properties, 'KeyType') as key_type,
                json_extract_path_text(Properties, 'UsagePlanId') as usage_plan_id,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::UsagePlanKey'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    vpc_links:
      name: vpc_links
      id: awscc.apigateway.vpc_links
      x-cfn-schema-name: VpcLink
      x-type: list
      x-identifiers:
        - VpcLinkId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::VpcLink'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VpcLinkId') as vpc_link_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGateway::VpcLink'
                AND region = 'us-east-1'
    vpc_link:
      name: vpc_link
      id: awscc.apigateway.vpc_link
      x-cfn-schema-name: VpcLink
      x-type: get
      x-identifiers:
        - VpcLinkId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TargetArns') as target_arns,
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::VpcLink'
              AND data__Identifier = '<VpcLinkId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TargetArns') as target_arns,
                json_extract_path_text(Properties, 'VpcLinkId') as vpc_link_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGateway::VpcLink'
                AND data__Identifier = '<VpcLinkId>'
                AND region = 'us-east-1'
