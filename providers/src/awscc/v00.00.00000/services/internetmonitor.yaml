openapi: 3.0.0
info:
  title: InternetMonitor
  version: 1.0.0
paths: {}
components:
  schemas:
    MonitorConfigState:
      type: string
      enum:
        - PENDING
        - ACTIVE
        - INACTIVE
        - ERROR
    MonitorProcessingStatusCode:
      type: string
      enum:
        - OK
        - INACTIVE
        - COLLECTING_DATA
        - INSUFFICIENT_DATA
        - FAULT_SERVICE
        - FAULT_ACCESS_CLOUDWATCH
    Tag:
      description: The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.
      type: object
      properties:
        Key:
          type: string
        Value:
          type: string
      additionalProperties: false
    iso8601UTC:
      description: The date value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ssZ)
      type: string
      pattern: ^([0-2]\d{3})-(0[0-9]|1[0-2])-([0-2]\d|3[01])T([01]\d|2[0-4]):([0-5]\d):([0-6]\d)((\.\d{3})?)Z$
    InternetMeasurementsLogDelivery:
      type: object
      properties:
        S3Config:
          $ref: '#/components/schemas/S3Config'
      additionalProperties: false
    S3Config:
      type: object
      properties:
        BucketName:
          type: string
          minLength: 3
        BucketPrefix:
          type: string
        LogDeliveryStatus:
          type: string
          enum:
            - ENABLED
            - DISABLED
      additionalProperties: false
    HealthEventsConfig:
      type: object
      properties:
        AvailabilityScoreThreshold:
          type: number
          minimum: 0
          maximum: 100
        PerformanceScoreThreshold:
          type: number
          minimum: 0
          maximum: 100
        AvailabilityLocalHealthEventsConfig:
          $ref: '#/components/schemas/LocalHealthEventsConfig'
        PerformanceLocalHealthEventsConfig:
          $ref: '#/components/schemas/LocalHealthEventsConfig'
      additionalProperties: false
    LocalHealthEventsConfig:
      type: object
      properties:
        Status:
          type: string
          enum:
            - ENABLED
            - DISABLED
        HealthScoreThreshold:
          type: number
          minimum: 0
          maximum: 100
        MinTrafficImpact:
          type: number
          minimum: 0
          maximum: 100
      additionalProperties: false
    Monitor:
      type: object
      properties:
        CreatedAt:
          $ref: '#/components/schemas/iso8601UTC'
        ModifiedAt:
          $ref: '#/components/schemas/iso8601UTC'
        MonitorArn:
          type: string
          maxLength: 512
          minLength: 20
          pattern: ^arn:.*
        MonitorName:
          type: string
          maxLength: 255
          minLength: 1
          pattern: ^[a-zA-Z0-9_.-]+$
        ProcessingStatus:
          $ref: '#/components/schemas/MonitorProcessingStatusCode'
        ProcessingStatusInfo:
          type: string
        Resources:
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 2048
            minLength: 20
            pattern: ^arn:.*
        ResourcesToAdd:
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 2048
            minLength: 20
        ResourcesToRemove:
          type: array
          x-insertionOrder: false
          items:
            type: string
            maxLength: 2048
            minLength: 20
        Status:
          $ref: '#/components/schemas/MonitorConfigState'
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        MaxCityNetworksToMonitor:
          type: integer
          minimum: 1
          maximum: 500000
        TrafficPercentageToMonitor:
          type: integer
          minimum: 1
          maximum: 100
        InternetMeasurementsLogDelivery:
          $ref: '#/components/schemas/InternetMeasurementsLogDelivery'
        HealthEventsConfig:
          $ref: '#/components/schemas/HealthEventsConfig'
      required:
        - MonitorName
      x-stackql-resource-name: monitor
      x-stackql-primaryIdentifier:
        - MonitorName
      x-create-only-properties:
        - MonitorName
      x-read-only-properties:
        - CreatedAt
        - ModifiedAt
        - MonitorArn
        - ProcessingStatus
        - ProcessingStatusInfo
      x-required-permissions:
        create:
          - internetmonitor:CreateMonitor
          - internetmonitor:GetMonitor
          - internetmonitor:TagResource
          - internetmonitor:UntagResource
          - logs:CreateLogDelivery
          - logs:GetLogDelivery
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
          - s3:ListBucket
          - iam:PassRole
        read:
          - internetmonitor:GetMonitor
          - internetmonitor:ListTagsForResource
          - logs:GetLogDelivery
        update:
          - internetmonitor:CreateMonitor
          - internetmonitor:GetMonitor
          - internetmonitor:UpdateMonitor
          - internetmonitor:TagResource
          - internetmonitor:UntagResource
          - logs:CreateLogDelivery
          - logs:GetLogDelivery
          - logs:UpdateLogDelivery
          - logs:DeleteLogDelivery
          - logs:ListLogDeliveries
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
          - s3:ListBucket
          - iam:PassRole
        delete:
          - internetmonitor:UpdateMonitor
          - internetmonitor:DeleteMonitor
          - internetmonitor:GetMonitor
          - logs:DeleteLogDelivery
        list:
          - internetmonitor:ListMonitors
          - internetmonitor:GetMonitor
          - logs:GetLogDelivery
  x-stackQL-resources:
    monitors:
      name: monitors
      id: awscc.internetmonitor.monitors
      x-cfn-schema-name: Monitor
      x-type: list
      x-identifiers:
        - MonitorName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.MonitorName') as monitor_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::InternetMonitor::Monitor'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'MonitorName') as monitor_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::InternetMonitor::Monitor'
                AND region = 'us-east-1'
    monitor:
      name: monitor
      id: awscc.internetmonitor.monitor
      x-cfn-schema-name: Monitor
      x-type: get
      x-identifiers:
        - MonitorName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(Properties, '$.MonitorArn') as monitor_arn,
              JSON_EXTRACT(Properties, '$.MonitorName') as monitor_name,
              JSON_EXTRACT(Properties, '$.ProcessingStatus') as processing_status,
              JSON_EXTRACT(Properties, '$.ProcessingStatusInfo') as processing_status_info,
              JSON_EXTRACT(Properties, '$.Resources') as resources,
              JSON_EXTRACT(Properties, '$.ResourcesToAdd') as resources_to_add,
              JSON_EXTRACT(Properties, '$.ResourcesToRemove') as resources_to_remove,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.MaxCityNetworksToMonitor') as max_city_networks_to_monitor,
              JSON_EXTRACT(Properties, '$.TrafficPercentageToMonitor') as traffic_percentage_to_monitor,
              JSON_EXTRACT(Properties, '$.InternetMeasurementsLogDelivery') as internet_measurements_log_delivery,
              JSON_EXTRACT(Properties, '$.HealthEventsConfig') as health_events_config
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::InternetMonitor::Monitor'
              AND data__Identifier = '<MonitorName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'ModifiedAt') as modified_at,
                json_extract_path_text(Properties, 'MonitorArn') as monitor_arn,
                json_extract_path_text(Properties, 'MonitorName') as monitor_name,
                json_extract_path_text(Properties, 'ProcessingStatus') as processing_status,
                json_extract_path_text(Properties, 'ProcessingStatusInfo') as processing_status_info,
                json_extract_path_text(Properties, 'Resources') as resources,
                json_extract_path_text(Properties, 'ResourcesToAdd') as resources_to_add,
                json_extract_path_text(Properties, 'ResourcesToRemove') as resources_to_remove,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'MaxCityNetworksToMonitor') as max_city_networks_to_monitor,
                json_extract_path_text(Properties, 'TrafficPercentageToMonitor') as traffic_percentage_to_monitor,
                json_extract_path_text(Properties, 'InternetMeasurementsLogDelivery') as internet_measurements_log_delivery,
                json_extract_path_text(Properties, 'HealthEventsConfig') as health_events_config
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::InternetMonitor::Monitor'
                AND data__Identifier = '<MonitorName>'
                AND region = 'us-east-1'
