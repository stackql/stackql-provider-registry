openapi: 3.0.0
info:
  title: M2
  version: 1.0.0
paths: {}
components:
  schemas:
    Definition:
      oneOf:
        - type: object
          title: S3Location
          properties:
            S3Location:
              type: string
              pattern: ^\S{1,2000}$
          required:
            - S3Location
          additionalProperties: false
        - type: object
          title: Content
          properties:
            Content:
              type: string
              maxLength: 65000
              minLength: 1
          required:
            - Content
          additionalProperties: false
    EngineType:
      type: string
      description: The target platform for the environment.
      enum:
        - microfocus
        - bluage
    TagMap:
      type: object
      description: Defines tags associated to an environment.
      maxProperties: 200
      minProperties: 0
      x-patternProperties:
        ^(?!aws:).+$:
          type: string
          maxLength: 256
          minLength: 0
      additionalProperties: false
    Application:
      type: object
      properties:
        ApplicationArn:
          type: string
          pattern: ^arn:(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:([a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]):[0-9]{12}:[A-Za-z0-9/][A-Za-z0-9:_/+=,@.-]{0,1023}$
        ApplicationId:
          type: string
          pattern: ^\S{1,80}$
        Definition:
          $ref: '#/components/schemas/Definition'
        Description:
          type: string
          maxLength: 500
          minLength: 0
        EngineType:
          $ref: '#/components/schemas/EngineType'
        KmsKeyId:
          type: string
          maxLength: 2048
          description: The ID or the Amazon Resource Name (ARN) of the customer managed KMS Key used for encrypting application-related resources.
        Name:
          type: string
          pattern: ^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$
        RoleArn:
          type: string
          pattern: ^arn:(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:([a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]|):[0-9]{12}:[A-Za-z0-9/][A-Za-z0-9:_/+=,@.-]{0,1023}$
        Tags:
          $ref: '#/components/schemas/TagMap'
      required:
        - Definition
        - EngineType
        - Name
      x-stackql-resource-name: application
      x-stackql-primaryIdentifier:
        - ApplicationArn
      x-create-only-properties:
        - EngineType
        - Name
        - KmsKeyId
        - RoleArn
      x-read-only-properties:
        - ApplicationArn
        - ApplicationId
      x-required-permissions:
        create:
          - m2:CreateApplication
          - m2:GetApplication
          - m2:ListTagsForResource
          - m2:TagResource
          - s3:GetObject
          - s3:ListBucket
          - kms:DescribeKey
          - kms:CreateGrant
          - iam:PassRole
        read:
          - m2:GetApplication
          - m2:ListTagsForResource
        update:
          - m2:UpdateApplication
          - m2:GetApplication
          - m2:ListTagsForResource
          - m2:TagResource
          - m2:UntagResource
          - s3:GetObject
          - s3:ListBucket
        delete:
          - elasticloadbalancing:DeleteListener
          - elasticloadbalancing:DeleteTargetGroup
          - logs:DeleteLogDelivery
          - m2:GetApplication
          - m2:DeleteApplication
        list:
          - m2:ListApplications
    EfsStorageConfiguration:
      type: object
      description: Defines the storage configuration for an Amazon EFS file system.
      properties:
        FileSystemId:
          type: string
          description: The file system identifier.
          pattern: ^\S{1,200}$
        MountPoint:
          type: string
          description: The mount point for the file system.
          pattern: ^\S{1,200}$
      required:
        - FileSystemId
        - MountPoint
      additionalProperties: false
    FsxStorageConfiguration:
      type: object
      description: Defines the storage configuration for an Amazon FSx file system.
      properties:
        FileSystemId:
          type: string
          description: The file system identifier.
          pattern: ^\S{1,200}$
        MountPoint:
          type: string
          description: The mount point for the file system.
          pattern: ^\S{1,200}$
      required:
        - FileSystemId
        - MountPoint
      additionalProperties: false
    HighAvailabilityConfig:
      type: object
      description: Defines the details of a high availability configuration.
      properties:
        DesiredCapacity:
          type: integer
          maximum: 100
          minimum: 1
      required:
        - DesiredCapacity
      additionalProperties: false
    StorageConfiguration:
      type: object
      description: Defines the storage configuration for an environment.
      oneOf:
        - properties:
            Efs:
              $ref: '#/components/schemas/EfsStorageConfiguration'
          required:
            - Efs
          additionalProperties: false
        - properties:
            Fsx:
              $ref: '#/components/schemas/FsxStorageConfiguration'
          required:
            - Fsx
          additionalProperties: false
    Environment:
      type: object
      properties:
        Description:
          type: string
          description: The description of the environment.
          maxLength: 500
          minLength: 0
        EngineType:
          $ref: '#/components/schemas/EngineType'
        EngineVersion:
          type: string
          description: The version of the runtime engine for the environment.
          pattern: ^\S{1,10}$
        EnvironmentArn:
          type: string
          description: The Amazon Resource Name (ARN) of the runtime environment.
          pattern: ^arn:(aws|aws-cn|aws-iso|aws-iso-[a-z]{1}|aws-us-gov):[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:([a-z]{2}-((iso[a-z]{0,1}-)|(gov-)){0,1}[a-z]+-[0-9]):[0-9]{12}:[A-Za-z0-9/][A-Za-z0-9:_/+=,@.-]{0,1023}$
        EnvironmentId:
          type: string
          description: The unique identifier of the environment.
          pattern: ^\S{1,80}$
        HighAvailabilityConfig:
          $ref: '#/components/schemas/HighAvailabilityConfig'
        InstanceType:
          type: string
          description: The type of instance underlying the environment.
          pattern: ^\S{1,20}$
        KmsKeyId:
          type: string
          maxLength: 2048
          description: The ID or the Amazon Resource Name (ARN) of the customer managed KMS Key used for encrypting environment-related resources.
        Name:
          type: string
          description: The name of the environment.
          pattern: ^[A-Za-z0-9][A-Za-z0-9_\-]{1,59}$
        PreferredMaintenanceWindow:
          type: string
          description: Configures a desired maintenance window for the environment. If you do not provide a value, a random system-generated value will be assigned.
          pattern: ^\S{1,50}$
        PubliclyAccessible:
          type: boolean
          description: Specifies whether the environment is publicly accessible.
        SecurityGroupIds:
          type: array
          description: The list of security groups for the VPC associated with this environment.
          x-insertionOrder: false
          items:
            type: string
            pattern: ^\S{1,50}$
        StorageConfigurations:
          type: array
          description: The storage configurations defined for the runtime environment.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/StorageConfiguration'
        SubnetIds:
          type: array
          description: The unique identifiers of the subnets assigned to this runtime environment.
          x-insertionOrder: false
          items:
            type: string
            pattern: ^\S{1,50}$
        Tags:
          description: Tags associated to this environment.
          $ref: '#/components/schemas/TagMap'
      required:
        - EngineType
        - InstanceType
        - Name
      x-stackql-resource-name: environment
      x-stackql-primaryIdentifier:
        - EnvironmentArn
      x-create-only-properties:
        - Description
        - EngineType
        - KmsKeyId
        - Name
        - PubliclyAccessible
        - SecurityGroupIds
        - StorageConfigurations
        - SubnetIds
      x-read-only-properties:
        - EnvironmentArn
        - EnvironmentId
      x-required-permissions:
        create:
          - ec2:CreateNetworkInterface
          - ec2:CreateNetworkInterfacePermission
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcAttribute
          - ec2:DescribeVpcs
          - ec2:ModifyNetworkInterfaceAttribute
          - elasticfilesystem:DescribeMountTargets
          - elasticloadbalancing:CreateLoadBalancer
          - elasticloadbalancing:AddTags
          - fsx:DescribeFileSystems
          - iam:CreateServiceLinkedRole
          - kms:DescribeKey
          - kms:CreateGrant
          - m2:CreateEnvironment
          - m2:GetEnvironment
          - m2:ListTagsForResource
          - m2:TagResource
        read:
          - m2:ListTagsForResource
          - m2:GetEnvironment
        update:
          - m2:TagResource
          - m2:UntagResource
          - m2:ListTagsForResource
          - m2:GetEnvironment
          - m2:UpdateEnvironment
        delete:
          - elasticloadbalancing:DeleteLoadBalancer
          - m2:DeleteEnvironment
          - m2:GetEnvironment
        list:
          - m2:ListEnvironments
  x-stackQL-resources:
    applications:
      name: applications
      id: awscc.m2.applications
      x-cfn-schema-name: Application
      x-type: list
      x-identifiers:
        - ApplicationArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationArn') as application_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::M2::Application'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationArn') as application_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::M2::Application'
                AND region = 'us-east-1'
    application:
      name: application
      id: awscc.m2.application
      x-cfn-schema-name: Application
      x-type: get
      x-identifiers:
        - ApplicationArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ApplicationArn') as application_arn,
              JSON_EXTRACT(Properties, '$.ApplicationId') as application_id,
              JSON_EXTRACT(Properties, '$.Definition') as definition,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EngineType') as engine_type,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::M2::Application'
              AND data__Identifier = '<ApplicationArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ApplicationArn') as application_arn,
                json_extract_path_text(Properties, 'ApplicationId') as application_id,
                json_extract_path_text(Properties, 'Definition') as definition,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'EngineType') as engine_type,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::M2::Application'
                AND data__Identifier = '<ApplicationArn>'
                AND region = 'us-east-1'
    environments:
      name: environments
      id: awscc.m2.environments
      x-cfn-schema-name: Environment
      x-type: list
      x-identifiers:
        - EnvironmentArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EnvironmentArn') as environment_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::M2::Environment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EnvironmentArn') as environment_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::M2::Environment'
                AND region = 'us-east-1'
    environment:
      name: environment
      id: awscc.m2.environment
      x-cfn-schema-name: Environment
      x-type: get
      x-identifiers:
        - EnvironmentArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EngineType') as engine_type,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.EnvironmentArn') as environment_arn,
              JSON_EXTRACT(Properties, '$.EnvironmentId') as environment_id,
              JSON_EXTRACT(Properties, '$.HighAvailabilityConfig') as high_availability_config,
              JSON_EXTRACT(Properties, '$.InstanceType') as instance_type,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.PreferredMaintenanceWindow') as preferred_maintenance_window,
              JSON_EXTRACT(Properties, '$.PubliclyAccessible') as publicly_accessible,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.StorageConfigurations') as storage_configurations,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::M2::Environment'
              AND data__Identifier = '<EnvironmentArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'EngineType') as engine_type,
                json_extract_path_text(Properties, 'EngineVersion') as engine_version,
                json_extract_path_text(Properties, 'EnvironmentArn') as environment_arn,
                json_extract_path_text(Properties, 'EnvironmentId') as environment_id,
                json_extract_path_text(Properties, 'HighAvailabilityConfig') as high_availability_config,
                json_extract_path_text(Properties, 'InstanceType') as instance_type,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'PreferredMaintenanceWindow') as preferred_maintenance_window,
                json_extract_path_text(Properties, 'PubliclyAccessible') as publicly_accessible,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(Properties, 'StorageConfigurations') as storage_configurations,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::M2::Environment'
                AND data__Identifier = '<EnvironmentArn>'
                AND region = 'us-east-1'
