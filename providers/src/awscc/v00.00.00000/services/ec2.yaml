openapi: 3.0.0
info:
  title: EC2
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
        Value:
          type: string
      required:
        - Value
        - Key
    TagSpecification:
      description: |-
        Specifies the tags to apply to a resource when the resource is created for the launch template.
         ``TagSpecification`` is a property type of [TagSpecifications](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html#cfn-ec2-launchtemplate-launchtemplatedata-tagspecifications). [TagSpecifications](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html#cfn-ec2-launchtemplate-launchtemplatedata-tagspecifications) is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        ResourceType:
          description: |-
            The type of resource to tag.
             Valid Values lists all resource types for Amazon EC2 that can be tagged. When you create a launch template, you can specify tags for the following resource types only: ``instance`` | ``volume`` | ``network-interface`` | ``spot-instances-request``. If the instance does not include the resource type that you specify, the instance launch fails. For example, not all instance types include a volume.
             To tag a resource after it has been created, see [CreateTags](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html).
          type: string
        Tags:
          uniqueItems: false
          description: The tags to apply to the resource.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    CapacityReservation:
      type: object
      properties:
        Tenancy:
          type: string
        EndDateType:
          type: string
        TagSpecifications:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/TagSpecification'
        AvailabilityZone:
          type: string
        TotalInstanceCount:
          type: integer
        EndDate:
          type: string
        EbsOptimized:
          type: boolean
        OutPostArn:
          type: string
        InstanceCount:
          type: integer
        PlacementGroupArn:
          type: string
        AvailableInstanceCount:
          type: integer
        InstancePlatform:
          type: string
        Id:
          type: string
        InstanceType:
          type: string
        EphemeralStorage:
          type: boolean
        InstanceMatchCriteria:
          type: string
      required:
        - InstanceCount
        - AvailabilityZone
        - InstancePlatform
        - InstanceType
      x-stackql-resource-name: capacity_reservation
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Tenancy
        - InstanceMatchCriteria
        - InstancePlatform
        - InstanceType
        - AvailabilityZone
        - TagSpecifications
        - OutPostArn
        - EphemeralStorage
        - EbsOptimized
        - PlacementGroupArn
      x-read-only-properties:
        - Id
        - AvailableInstanceCount
        - TotalInstanceCount
      x-required-permissions:
        create:
          - ec2:CreateCapacityReservation
          - ec2:DescribeCapacityReservations
          - ec2:CancelCapacityReservation
          - ec2:CreateTags
        delete:
          - ec2:CreateCapacityReservation
          - ec2:DescribeCapacityReservations
          - ec2:CancelCapacityReservation
          - ec2:DeleteTags
        list:
          - ec2:DescribeCapacityReservations
        read:
          - ec2:DescribeCapacityReservations
        update:
          - ec2:ModifyCapacityReservation
          - ec2:CreateCapacityReservation
          - ec2:DescribeCapacityReservations
          - ec2:CancelCapacityReservation
          - ec2:CreateTags
          - ec2:DeleteTags
    InstanceTypeSpecification:
      type: object
      additionalProperties: false
      properties:
        InstanceType:
          type: string
        InstancePlatform:
          type: string
        Weight:
          type: number
        AvailabilityZone:
          type: string
        AvailabilityZoneId:
          type: string
        EbsOptimized:
          type: boolean
        Priority:
          type: integer
          minimum: 0
          maximum: 999
    CapacityReservationFleet:
      type: object
      properties:
        AllocationStrategy:
          type: string
        TagSpecifications:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/TagSpecification'
        InstanceTypeSpecifications:
          type: array
          x-insertionOrder: false
          uniqueItems: true
          maxItems: 50
          items:
            $ref: '#/components/schemas/InstanceTypeSpecification'
        TotalTargetCapacity:
          type: integer
          minimum: 1
          maximum: 25000
        EndDate:
          type: string
        InstanceMatchCriteria:
          type: string
          enum:
            - open
        CapacityReservationFleetId:
          type: string
        Tenancy:
          type: string
          enum:
            - default
        RemoveEndDate:
          type: boolean
        NoRemoveEndDate:
          type: boolean
      x-stackql-resource-name: capacity_reservation_fleet
      x-stackql-primaryIdentifier:
        - CapacityReservationFleetId
      x-create-only-properties:
        - InstanceTypeSpecifications
        - AllocationStrategy
        - TagSpecifications
        - EndDate
        - Tenancy
        - InstanceMatchCriteria
      x-read-only-properties:
        - CapacityReservationFleetId
      x-required-permissions:
        create:
          - ec2:CreateCapacityReservationFleet
          - ec2:ModifyCapacityReservationFleet
          - ec2:DescribeCapacityReservationFleets
          - ec2:CancelCapacityReservationFleets
          - ec2:CreateCapacityReservation
          - ec2:DescribeCapacityReservations
          - ec2:CancelCapacityReservation
          - ec2:DescribeInstances
          - ec2:CreateTags
          - iam:CreateServiceLinkedRole
        delete:
          - ec2:CreateCapacityReservationFleet
          - ec2:ModifyCapacityReservationFleet
          - ec2:DescribeCapacityReservationFleets
          - ec2:CancelCapacityReservationFleets
          - ec2:CreateCapacityReservation
          - ec2:DescribeCapacityReservations
          - ec2:CancelCapacityReservation
          - ec2:DeleteTags
        list:
          - ec2:DescribeCapacityReservationFleets
          - ec2:DescribeCapacityReservations
          - ec2:DescribeInstances
        read:
          - ec2:DescribeCapacityReservationFleets
          - ec2:DescribeInstances
          - ec2:DescribeCapacityReservations
        update:
          - ec2:CreateCapacityReservationFleet
          - ec2:ModifyCapacityReservationFleet
          - ec2:DescribeCapacityReservationFleets
          - ec2:CancelCapacityReservationFleets
          - ec2:CreateCapacityReservation
          - ec2:ModifyCapacityReservation
          - ec2:DescribeCapacityReservations
          - ec2:CancelCapacityReservation
          - ec2:DescribeInstances
          - ec2:DeleteTags
    Tags:
      type: array
      uniqueItems: true
      items:
        $ref: '#/components/schemas/Tag'
    CarrierGateway:
      type: object
      properties:
        CarrierGatewayId:
          description: The ID of the carrier gateway.
          type: string
        State:
          description: The state of the carrier gateway.
          type: string
        VpcId:
          description: The ID of the VPC.
          type: string
        OwnerId:
          description: The ID of the owner.
          type: string
        Tags:
          description: The tags for the carrier gateway.
          $ref: '#/components/schemas/Tags'
      required:
        - VpcId
      x-stackql-resource-name: carrier_gateway
      x-stackql-primaryIdentifier:
        - CarrierGatewayId
      x-create-only-properties:
        - VpcId
      x-read-only-properties:
        - CarrierGatewayId
        - OwnerId
        - State
      x-required-permissions:
        create:
          - ec2:CreateCarrierGateway
          - ec2:DescribeCarrierGateways
          - ec2:CreateTags
        read:
          - ec2:DescribeCarrierGateways
        update:
          - ec2:DescribeCarrierGateways
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteCarrierGateway
          - ec2:DescribeCarrierGateways
        list:
          - ec2:DescribeCarrierGateways
    CustomerGateway:
      type: object
      properties:
        CustomerGatewayId:
          type: string
          description: CustomerGateway ID generated after customer gateway is created. Each customer gateway has a unique ID.
        BgpAsn:
          type: integer
          default: 65000
          description: For devices that support BGP, the customer gateway's BGP ASN.
        IpAddress:
          type: string
          description: The internet-routable IP address for the customer gateway's outside interface. The address must be static.
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          description: One or more tags for the customer gateway.
        Type:
          type: string
          description: The type of VPN connection that this customer gateway supports.
        DeviceName:
          type: string
          description: A name for the customer gateway device.
      required:
        - BgpAsn
        - IpAddress
        - Type
      x-stackql-resource-name: customer_gateway
      x-stackql-primaryIdentifier:
        - CustomerGatewayId
      x-create-only-properties:
        - BgpAsn
        - Type
        - IpAddress
        - DeviceName
      x-read-only-properties:
        - CustomerGatewayId
      x-required-permissions:
        create:
          - ec2:CreateCustomerGateway
          - ec2:DescribeCustomerGateways
        read:
          - ec2:DescribeCustomerGateways
        update:
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteCustomerGateway
          - ec2:DescribeCustomerGateways
        list:
          - ec2:DescribeCustomerGateways
    DHCPOptions:
      type: object
      properties:
        NetbiosNameServers:
          uniqueItems: true
          description: The IPv4 addresses of up to four NetBIOS name servers.
          type: array
          items:
            type: string
        NtpServers:
          uniqueItems: false
          description: The IPv4 addresses of up to four Network Time Protocol (NTP) servers.
          type: array
          items:
            type: string
        DhcpOptionsId:
          type: string
        DomainName:
          description: This value is used to complete unqualified DNS hostnames.
          type: string
        NetbiosNodeType:
          description: The NetBIOS node type (1, 2, 4, or 8).
          type: integer
        DomainNameServers:
          uniqueItems: true
          description: The IPv4 addresses of up to four domain name servers, or AmazonProvidedDNS.
          type: array
          items:
            type: string
        Tags:
          uniqueItems: false
          description: Any tags assigned to the DHCP options set.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: dhcp_options
      x-stackql-primaryIdentifier:
        - DhcpOptionsId
      x-create-only-properties:
        - NetbiosNameServers
        - NetbiosNodeType
        - NtpServers
        - DomainName
        - DomainNameServers
      x-read-only-properties:
        - DhcpOptionsId
      x-required-permissions:
        read:
          - ec2:DescribeDhcpOptions
          - ec2:DescribeTags
        create:
          - ec2:CreateDhcpOptions
          - ec2:DescribeDhcpOptions
          - ec2:CreateTags
        update:
          - ec2:CreateTags
          - ec2:DescribeDhcpOptions
          - ec2:DeleteTags
        list:
          - ec2:DescribeDhcpOptions
        delete:
          - ec2:DeleteDhcpOptions
          - ec2:DeleteTags
          - ec2:DescribeDhcpOptions
    OnDemandOptionsRequest:
      type: object
      additionalProperties: false
      properties:
        SingleAvailabilityZone:
          type: boolean
        AllocationStrategy:
          type: string
        SingleInstanceType:
          type: boolean
        MinTargetCapacity:
          type: integer
        MaxTotalPrice:
          type: string
        CapacityReservationOptions:
          $ref: '#/components/schemas/CapacityReservationOptionsRequest'
    SpotOptionsRequest:
      type: object
      additionalProperties: false
      properties:
        MaintenanceStrategies:
          $ref: '#/components/schemas/MaintenanceStrategies'
        SingleAvailabilityZone:
          type: boolean
        AllocationStrategy:
          type: string
          enum:
            - lowest-price
            - lowestPrice
            - diversified
            - capacityOptimized
            - capacity-optimized
            - capacityOptimizedPrioritized
            - capacity-optimized-prioritized
            - priceCapacityOptimized
            - price-capacity-optimized
        SingleInstanceType:
          type: boolean
        MinTargetCapacity:
          type: integer
        MaxTotalPrice:
          type: string
        InstanceInterruptionBehavior:
          type: string
          enum:
            - hibernate
            - stop
            - terminate
        InstancePoolsToUseCount:
          type: integer
    TargetCapacitySpecificationRequest:
      type: object
      additionalProperties: false
      properties:
        DefaultTargetCapacityType:
          type: string
          enum:
            - on-demand
            - spot
        TargetCapacityUnitType:
          type: string
          enum:
            - vcpu
            - memory-mib
            - units
        TotalTargetCapacity:
          type: integer
        OnDemandTargetCapacity:
          type: integer
        SpotTargetCapacity:
          type: integer
      required:
        - TotalTargetCapacity
    FleetLaunchTemplateSpecificationRequest:
      type: object
      additionalProperties: false
      properties:
        LaunchTemplateName:
          type: string
          minLength: 3
          maxLength: 128
          pattern: '[a-zA-Z0-9\(\)\.\-/_]+'
        LaunchTemplateId:
          type: string
        Version:
          type: string
      required:
        - Version
    Placement:
      description: |-
        Specifies the placement of an instance.
         ``Placement`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        GroupName:
          description: The name of the placement group for the instance.
          type: string
        Tenancy:
          description: The tenancy of the instance. An instance with a tenancy of dedicated runs on single-tenant hardware.
          type: string
        SpreadDomain:
          description: Reserved for future use.
          type: string
        PartitionNumber:
          description: The number of the partition the instance should launch in. Valid only if the placement group strategy is set to ``partition``.
          type: integer
        AvailabilityZone:
          description: The Availability Zone for the instance.
          type: string
        Affinity:
          description: The affinity setting for an instance on a Dedicated Host.
          type: string
        HostId:
          description: The ID of the Dedicated Host for the instance.
          type: string
        HostResourceGroupArn:
          description: The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the *Tenancy* parameter or set it to ``host``.
          type: string
        GroupId:
          description: The Group Id of a placement group. You must specify the Placement Group *Group Id* to launch an instance in a shared placement group.
          type: string
    FleetLaunchTemplateConfigRequest:
      type: object
      additionalProperties: false
      properties:
        LaunchTemplateSpecification:
          $ref: '#/components/schemas/FleetLaunchTemplateSpecificationRequest'
        Overrides:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/FleetLaunchTemplateOverridesRequest'
    CapacityReservationOptionsRequest:
      type: object
      additionalProperties: false
      properties:
        UsageStrategy:
          type: string
          enum:
            - use-capacity-reservations-first
    FleetLaunchTemplateOverridesRequest:
      type: object
      additionalProperties: false
      properties:
        WeightedCapacity:
          type: number
        Placement:
          $ref: '#/components/schemas/Placement'
        Priority:
          type: number
        AvailabilityZone:
          type: string
        SubnetId:
          type: string
        InstanceType:
          type: string
        InstanceRequirements:
          $ref: '#/components/schemas/InstanceRequirementsRequest'
        MaxPrice:
          type: string
    InstanceRequirementsRequest:
      type: object
      additionalProperties: false
      properties:
        VCpuCount:
          $ref: '#/components/schemas/VCpuCountRangeRequest'
        MemoryMiB:
          $ref: '#/components/schemas/MemoryMiBRequest'
        CpuManufacturers:
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - intel
              - amd
              - amazon-web-services
        MemoryGiBPerVCpu:
          $ref: '#/components/schemas/MemoryGiBPerVCpuRequest'
        AllowedInstanceTypes:
          type: array
          uniqueItems: false
          items:
            type: string
            minLength: 1
            maxLength: 30
            pattern: '[a-zA-Z0-9\.\*]+'
        ExcludedInstanceTypes:
          type: array
          uniqueItems: false
          items:
            type: string
            minLength: 1
            maxLength: 30
            pattern: '[a-zA-Z0-9\.\*]+'
        InstanceGenerations:
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - current
              - previous
        SpotMaxPricePercentageOverLowestPrice:
          type: integer
        OnDemandMaxPricePercentageOverLowestPrice:
          type: integer
        MaxSpotPriceAsPercentageOfOptimalOnDemandPrice:
          type: integer
        BareMetal:
          type: string
          enum:
            - included
            - required
            - excluded
        BurstablePerformance:
          type: string
          enum:
            - included
            - required
            - excluded
        RequireHibernateSupport:
          type: boolean
        NetworkBandwidthGbps:
          $ref: '#/components/schemas/NetworkBandwidthGbpsRequest'
        NetworkInterfaceCount:
          $ref: '#/components/schemas/NetworkInterfaceCountRequest'
        LocalStorage:
          type: string
          enum:
            - included
            - required
            - excluded
        LocalStorageTypes:
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - hdd
              - ssd
        TotalLocalStorageGB:
          $ref: '#/components/schemas/TotalLocalStorageGBRequest'
        BaselineEbsBandwidthMbps:
          $ref: '#/components/schemas/BaselineEbsBandwidthMbpsRequest'
        AcceleratorTypes:
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - gpu
              - fpga
              - inference
        AcceleratorCount:
          $ref: '#/components/schemas/AcceleratorCountRequest'
        AcceleratorManufacturers:
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - amazon-web-services
              - amd
              - habana
              - nvidia
              - xilinx
        AcceleratorNames:
          type: array
          uniqueItems: false
          items:
            type: string
            enum:
              - a10g
              - a100
              - h100
              - inferentia
              - k520
              - k80
              - m60
              - radeon-pro-v520
              - t4
              - t4g
              - vu9p
              - v100
        AcceleratorTotalMemoryMiB:
          $ref: '#/components/schemas/AcceleratorTotalMemoryMiBRequest'
    VCpuCountRangeRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: integer
        Max:
          type: integer
    MemoryMiBRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: integer
        Max:
          type: integer
    MemoryGiBPerVCpuRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: number
        Max:
          type: number
    NetworkBandwidthGbpsRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: number
        Max:
          type: number
    NetworkInterfaceCountRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: integer
        Max:
          type: integer
    TotalLocalStorageGBRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: number
        Max:
          type: number
    BaselineEbsBandwidthMbpsRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: integer
        Max:
          type: integer
    AcceleratorCountRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: integer
        Max:
          type: integer
    AcceleratorTotalMemoryMiBRequest:
      type: object
      additionalProperties: false
      properties:
        Min:
          type: integer
        Max:
          type: integer
    MaintenanceStrategies:
      type: object
      additionalProperties: false
      properties:
        CapacityRebalance:
          $ref: '#/components/schemas/CapacityRebalance'
    CapacityRebalance:
      type: object
      additionalProperties: false
      properties:
        ReplacementStrategy:
          type: string
          enum:
            - launch
            - launch-before-terminate
        TerminationDelay:
          type: integer
    EC2Fleet:
      type: object
      properties:
        TargetCapacitySpecification:
          $ref: '#/components/schemas/TargetCapacitySpecificationRequest'
        OnDemandOptions:
          $ref: '#/components/schemas/OnDemandOptionsRequest'
        Type:
          type: string
          enum:
            - maintain
            - request
            - instant
        ExcessCapacityTerminationPolicy:
          type: string
          enum:
            - termination
            - no-termination
        TagSpecifications:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/TagSpecification'
        SpotOptions:
          $ref: '#/components/schemas/SpotOptionsRequest'
        ValidFrom:
          type: string
        ReplaceUnhealthyInstances:
          type: boolean
        LaunchTemplateConfigs:
          type: array
          uniqueItems: false
          maxItems: 50
          items:
            $ref: '#/components/schemas/FleetLaunchTemplateConfigRequest'
        FleetId:
          type: string
        TerminateInstancesWithExpiration:
          type: boolean
        ValidUntil:
          type: string
        Context:
          type: string
      required:
        - TargetCapacitySpecification
        - LaunchTemplateConfigs
      x-stackql-resource-name: ec2fleet
      x-stackql-primaryIdentifier:
        - FleetId
      x-create-only-properties:
        - LaunchTemplateConfigs
        - OnDemandOptions
        - ReplaceUnhealthyInstances
        - SpotOptions
        - TagSpecifications
        - TerminateInstancesWithExpiration
        - Type
        - ValidFrom
        - ValidUntil
      x-read-only-properties:
        - FleetId
      x-required-permissions:
        create:
          - ec2:CreateFleet
          - ec2:DescribeFleets
        delete:
          - ec2:DescribeFleets
          - ec2:DeleteFleets
        list:
          - ec2:DescribeFleets
        read:
          - ec2:DescribeFleets
        update:
          - ec2:ModifyFleet
          - ec2:DescribeFleets
    EgressOnlyInternetGateway:
      type: object
      properties:
        Id:
          description: Service Generated ID of the EgressOnlyInternetGateway
          type: string
        VpcId:
          description: The ID of the VPC for which to create the egress-only internet gateway.
          type: string
      required:
        - VpcId
      x-stackql-resource-name: egress_only_internet_gateway
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - VpcId
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - ec2:CreateEgressOnlyInternetGateway
          - ec2:DescribeEgressOnlyInternetGateways
        read:
          - ec2:DescribeEgressOnlyInternetGateways
        delete:
          - ec2:DeleteEgressOnlyInternetGateway
          - ec2:DescribeEgressOnlyInternetGateways
          - ec2:DescribeVpcs
        list:
          - ec2:DescribeEgressOnlyInternetGateways
    EIP:
      type: object
      properties:
        PublicIp:
          description: ''
          type: string
        AllocationId:
          description: ''
          type: string
        Domain:
          description: |-
            The network (``vpc``).
             If you define an Elastic IP address and associate it with a VPC that is defined in the same template, you must declare a dependency on the VPC-gateway attachment by using the [DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html) on this resource.
          type: string
        NetworkBorderGroup:
          description: |-
            A unique set of Availability Zones, Local Zones, or Wavelength Zones from which AWS advertises IP addresses. Use this parameter to limit the IP address to this location. IP addresses cannot move between network border groups.
             Use [DescribeAvailabilityZones](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html) to view the network border groups.
          type: string
        TransferAddress:
          description: The Elastic IP address you are accepting for transfer. You can only accept one transferred address. For more information on Elastic IP address transfers, see [Transfer Elastic IP addresses](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-eips.html#transfer-EIPs-intro) in the *Amazon Virtual Private Cloud User Guide*.
          type: string
        InstanceId:
          description: |-
            The ID of the instance.
              Updates to the ``InstanceId`` property may require *some interruptions*. Updates on an EIP reassociates the address on its associated resource.
          type: string
        PublicIpv4Pool:
          description: |-
            The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool.
              Updates to the ``PublicIpv4Pool`` property may require *some interruptions*. Updates on an EIP reassociates the address on its associated resource.
          type: string
        Tags:
          description: |-
            Any tags assigned to the Elastic IP address.
              Updates to the ``Tags`` property may require *some interruptions*. Updates on an EIP reassociates the address on its associated resource.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: eip
      x-stackql-primaryIdentifier:
        - PublicIp
        - AllocationId
      x-create-only-properties:
        - Domain
        - NetworkBorderGroup
        - TransferAddress
      x-read-only-properties:
        - PublicIp
        - AllocationId
      x-required-permissions:
        create:
          - ec2:AllocateAddress
          - ec2:AcceptAddressTransfer
          - ec2:DescribeAddresses
          - ec2:AssociateAddress
          - ec2:CreateTags
        read:
          - ec2:DescribeAddresses
        delete:
          - ec2:ReleaseAddress
          - ec2:DescribeAddresses
          - ec2:DisassociateAddress
        update:
          - ec2:DescribeAddresses
          - ec2:DisassociateAddress
          - ec2:DeleteTags
          - ec2:CreateTags
          - ec2:AssociateAddress
        list:
          - ec2:DescribeAddresses
    EIPAssociation:
      type: object
      properties:
        Id:
          description: Composite ID of non-empty properties, to determine the identification.
          type: string
        AllocationId:
          description: The allocation ID. This is required for EC2-VPC.
          type: string
        NetworkInterfaceId:
          description: The ID of the network interface.
          type: string
        InstanceId:
          description: The ID of the instance.
          type: string
        PrivateIpAddress:
          description: The primary or secondary private IP address to associate with the Elastic IP address.
          type: string
        EIP:
          description: The Elastic IP address to associate with the instance.
          type: string
      x-stackql-resource-name: eip_association
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - AllocationId
        - NetworkInterfaceId
        - InstanceId
        - PrivateIpAddress
        - EIP
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - ec2:DescribeAddresses
          - ec2:AssociateAddress
        read:
          - ec2:DescribeAddresses
        delete:
          - ec2:DisassociateAddress
          - ec2:DescribeAddresses
        list:
          - ec2:DescribeAddresses
    EnclaveCertificateIamRoleAssociation:
      type: object
      properties:
        CertificateArn:
          description: The Amazon Resource Name (ARN) of the ACM certificate with which to associate the IAM role.
          type: string
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:acm:[A-Za-z0-9-]{1,64}:([0-9]{12})?:certificate/.+$
          minLength: 1
          maxLength: 1283
        RoleArn:
          description: The Amazon Resource Name (ARN) of the IAM role to associate with the ACM certificate. You can associate up to 16 IAM roles with an ACM certificate.
          type: string
          pattern: ^arn:aws[A-Za-z0-9-]{0,64}:iam:.*:([0-9]{12})?:role/.+$
          minLength: 1
          maxLength: 1283
        CertificateS3BucketName:
          description: The name of the Amazon S3 bucket to which the certificate was uploaded.
          type: string
        CertificateS3ObjectKey:
          description: The Amazon S3 object key where the certificate, certificate chain, and encrypted private key bundle are stored.
          type: string
        EncryptionKmsKeyId:
          description: The ID of the AWS KMS CMK used to encrypt the private key of the certificate.
          type: string
      required:
        - CertificateArn
        - RoleArn
      x-stackql-resource-name: enclave_certificate_iam_role_association
      x-stackql-primaryIdentifier:
        - CertificateArn
        - RoleArn
      x-create-only-properties:
        - CertificateArn
        - RoleArn
      x-read-only-properties:
        - CertificateS3BucketName
        - CertificateS3ObjectKey
        - EncryptionKmsKeyId
      x-required-permissions:
        create:
          - ec2:AssociateEnclaveCertificateIamRole
        read:
          - ec2:GetAssociatedEnclaveCertificateIamRoles
        delete:
          - ec2:DisassociateEnclaveCertificateIamRole
        list:
          - ec2:GetAssociatedEnclaveCertificateIamRoles
    FlowLog:
      type: object
      properties:
        Id:
          description: The Flow Log ID
          type: string
        DeliverCrossAccountRole:
          description: The ARN of the IAM role that allows Amazon EC2 to publish flow logs across accounts.
          type: string
        DeliverLogsPermissionArn:
          description: The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account. If you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.
          type: string
        LogDestination:
          description: Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch Logs log group, an Amazon S3 bucket, or a Kinesis Firehose stream. The value specified for this parameter depends on the value specified for LogDestinationType.
          type: string
        LogDestinationType:
          description: Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3.
          type: string
          enum:
            - cloud-watch-logs
            - s3
            - kinesis-data-firehose
        LogFormat:
          description: The fields to include in the flow log record, in the order in which they should appear.
          type: string
        LogGroupName:
          description: The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs. If you specify LogDestinationType as s3 or kinesis-data-firehose, do not specify DeliverLogsPermissionArn or LogGroupName.
          type: string
        MaxAggregationInterval:
          description: The maximum interval of time during which a flow of packets is captured and aggregated into a flow log record. You can specify 60 seconds (1 minute) or 600 seconds (10 minutes).
          type: integer
        ResourceId:
          description: The ID of the subnet, network interface, or VPC for which you want to create a flow log.
          type: string
        ResourceType:
          description: The type of resource for which to create the flow log. For example, if you specified a VPC ID for the ResourceId property, specify VPC for this property.
          type: string
          enum:
            - NetworkInterface
            - Subnet
            - VPC
            - TransitGateway
            - TransitGatewayAttachment
        Tags:
          description: The tags to apply to the flow logs.
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        TrafficType:
          description: The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
          type: string
          enum:
            - ACCEPT
            - ALL
            - REJECT
        DestinationOptions:
          type: object
          additionalProperties: false
          properties:
            FileFormat:
              type: string
              enum:
                - plain-text
                - parquet
            HiveCompatiblePartitions:
              type: boolean
            PerHourPartition:
              type: boolean
          required:
            - FileFormat
            - HiveCompatiblePartitions
            - PerHourPartition
      required:
        - ResourceType
        - ResourceId
      x-stackql-resource-name: flow_log
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - DeliverCrossAccountRole
        - DeliverLogsPermissionArn
        - LogGroupName
        - LogDestination
        - ResourceId
        - TrafficType
        - LogDestinationType
        - ResourceType
        - LogFormat
        - MaxAggregationInterval
        - DestinationOptions
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - ec2:CreateFlowLogs
          - ec2:DescribeFlowLogs
          - ec2:CreateTags
          - iam:PassRole
          - logs:CreateLogDelivery
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
        read:
          - ec2:DescribeFlowLogs
        update:
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeFlowLogs
        delete:
          - ec2:DeleteFlowLogs
          - ec2:DescribeFlowLogs
          - logs:DeleteLogDelivery
        list:
          - ec2:DescribeFlowLogs
    GatewayRouteTableAssociation:
      type: object
      properties:
        RouteTableId:
          description: The ID of the route table.
          type: string
        GatewayId:
          description: The ID of the gateway.
          type: string
        AssociationId:
          description: The route table association ID.
          type: string
      required:
        - RouteTableId
        - GatewayId
      x-stackql-resource-name: gateway_route_table_association
      x-stackql-primaryIdentifier:
        - GatewayId
      x-create-only-properties:
        - GatewayId
      x-read-only-properties:
        - AssociationId
      x-required-permissions:
        create:
          - ec2:DescribeRouteTables
          - ec2:AssociateRouteTable
        read:
          - ec2:DescribeRouteTables
        update:
          - ec2:DescribeRouteTables
          - ec2:ReplaceRouteTableAssociation
        delete:
          - ec2:DescribeRouteTables
          - ec2:DisassociateRouteTable
    Host:
      type: object
      properties:
        HostId:
          description: ID of the host created.
          type: string
        AutoPlacement:
          description: Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID.
          type: string
        AvailabilityZone:
          description: The Availability Zone in which to allocate the Dedicated Host.
          type: string
        HostRecovery:
          description: Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default.
          type: string
        InstanceType:
          description: Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only.
          type: string
        InstanceFamily:
          description: Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated Hosts support multiple instance types within that instance family.
          type: string
        OutpostArn:
          description: The Amazon Resource Name (ARN) of the Amazon Web Services Outpost on which to allocate the Dedicated Host.
          type: string
        HostMaintenance:
          description: Automatically allocates a new dedicated host and moves your instances on to it if a degradation is detected on your current host.
          type: string
        AssetId:
          description: The ID of the Outpost hardware asset.
          type: string
      required:
        - AvailabilityZone
      x-stackql-resource-name: host
      x-stackql-primaryIdentifier:
        - HostId
      x-create-only-properties:
        - AvailabilityZone
        - InstanceType
        - InstanceFamily
        - OutpostArn
        - AssetId
      x-read-only-properties:
        - HostId
      x-required-permissions:
        create:
          - ec2:AllocateHosts
          - ec2:DescribeHosts
        read:
          - ec2:DescribeHosts
        update:
          - ec2:ModifyHosts
          - ec2:DescribeHosts
        delete:
          - ec2:ReleaseHosts
          - ec2:DescribeHosts
        list:
          - ec2:DescribeHosts
    SecurityGroupId:
      description: The ID of a security group for the endpoint.
      type: string
    InstanceConnectEndpoint:
      type: object
      properties:
        Id:
          description: The id of the instance connect endpoint
          type: string
        SubnetId:
          description: The subnet id of the instance connect endpoint
          type: string
        ClientToken:
          description: The client token of the instance connect endpoint.
          type: string
        PreserveClientIp:
          description: If true, the address of the instance connect endpoint client is preserved when connecting to the end resource
          type: boolean
        Tags:
          description: The tags of the instance connect endpoint.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        SecurityGroupIds:
          description: The security group IDs of the instance connect endpoint.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SecurityGroupId'
      required:
        - SubnetId
      x-stackql-resource-name: instance_connect_endpoint
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - SubnetId
        - ClientToken
        - PreserveClientIp
        - SecurityGroupIds
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - ec2:CreateInstanceConnectEndpoint
          - ec2:DescribeInstanceConnectEndpoints
          - ec2:CreateTags
          - ec2:CreateNetworkInterface
          - iam:CreateServiceLinkedRole
        read:
          - ec2:DescribeInstanceConnectEndpoints
        update:
          - ec2:DescribeInstanceConnectEndpoints
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteInstanceConnectEndpoint
          - ec2:DescribeInstanceConnectEndpoints
        list:
          - ec2:DescribeInstanceConnectEndpoints
    InternetGateway:
      type: object
      properties:
        InternetGatewayId:
          description: ID of internet gateway.
          type: string
        Tags:
          description: Any tags to assign to the internet gateway.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: internet_gateway
      x-stackql-primaryIdentifier:
        - InternetGatewayId
      x-read-only-properties:
        - InternetGatewayId
      x-required-permissions:
        create:
          - ec2:CreateInternetGateway
          - ec2:CreateTags
          - ec2:DescribeInternetGateways
        read:
          - ec2:DescribeInternetGateways
        delete:
          - ec2:DeleteInternetGateway
          - ec2:DescribeInternetGateways
        update:
          - ec2:DeleteTags
          - ec2:CreateTags
          - ec2:DescribeInternetGateways
        list:
          - ec2:DescribeInternetGateways
    IpamOperatingRegion:
      description: The regions IPAM Resource Discovery is enabled for. Allows for monitoring.
      type: object
      properties:
        RegionName:
          type: string
          description: The name of the region.
      required:
        - RegionName
      additionalProperties: false
    IPAM:
      type: object
      properties:
        IpamId:
          description: Id of the IPAM.
          type: string
        Arn:
          description: The Amazon Resource Name (ARN) of the IPAM.
          type: string
        DefaultResourceDiscoveryId:
          description: The Id of the default resource discovery, created with this IPAM.
          type: string
        DefaultResourceDiscoveryAssociationId:
          description: The Id of the default association to the default resource discovery, created with this IPAM.
          type: string
        ResourceDiscoveryAssociationCount:
          description: The count of resource discoveries associated with this IPAM.
          type: integer
        Description:
          type: string
        PublicDefaultScopeId:
          description: The Id of the default scope for publicly routable IP space, created with this IPAM.
          type: string
          maxLength: 255
        PrivateDefaultScopeId:
          description: The Id of the default scope for publicly routable IP space, created with this IPAM.
          type: string
        ScopeCount:
          description: The number of scopes that currently exist in this IPAM.
          type: integer
        OperatingRegions:
          description: The regions IPAM is enabled for. Allows pools to be created in these regions, as well as enabling monitoring
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/IpamOperatingRegion'
        Tier:
          description: The tier of the IPAM.
          type: string
          enum:
            - free
            - advanced
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required: []
      x-stackql-resource-name: ipam
      x-stackql-primaryIdentifier:
        - IpamId
      x-read-only-properties:
        - IpamId
        - Arn
        - PublicDefaultScopeId
        - PrivateDefaultScopeId
        - ScopeCount
        - ResourceDiscoveryAssociationCount
        - DefaultResourceDiscoveryId
        - DefaultResourceDiscoveryAssociationId
      x-required-permissions:
        create:
          - ec2:CreateIpam
          - iam:CreateServiceLinkedRole
          - ec2:CreateTags
          - ec2:DescribeIpams
        read:
          - ec2:DescribeIpams
        update:
          - ec2:ModifyIpam
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeIpams
        delete:
          - ec2:DeleteIpam
          - ec2:DeleteTags
          - ec2:DescribeIpams
        list:
          - ec2:DescribeIpams
    Cidr:
      description: Represents a single IPv4 or IPv6 CIDR
      type: string
    IPAMAllocation:
      type: object
      properties:
        IpamPoolAllocationId:
          description: Id of the allocation.
          type: string
        IpamPoolId:
          description: Id of the IPAM Pool.
          type: string
        Cidr:
          $ref: '#/components/schemas/Cidr'
        NetmaskLength:
          description: The desired netmask length of the allocation. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
          type: integer
        Description:
          type: string
      required:
        - IpamPoolId
      x-stackql-resource-name: ipam_allocation
      x-stackql-primaryIdentifier:
        - IpamPoolId
        - IpamPoolAllocationId
        - Cidr
      x-create-only-properties:
        - IpamPoolId
        - Cidr
        - Description
        - NetmaskLength
      x-read-only-properties:
        - IpamPoolAllocationId
      x-required-permissions:
        create:
          - ec2:AllocateIpamPoolCidr
          - ec2:GetIpamPoolAllocations
        read:
          - ec2:GetIpamPoolAllocations
        delete:
          - ec2:ReleaseIpamPoolAllocation
        list:
          - ec2:GetIpamPoolAllocations
    ProvisionedCidr:
      description: An address space to be inserted into this pool. All allocations must be made from this address space.
      type: object
      properties:
        Cidr:
          $ref: '#/components/schemas/Cidr'
      required:
        - Cidr
      additionalProperties: false
    SourceResource:
      description: The resource associated with this pool's space. Depending on the ResourceType, setting a SourceResource changes which space can be provisioned in this pool and which types of resources can receive allocations
      type: object
      properties:
        ResourceId:
          type: string
        ResourceType:
          type: string
        ResourceRegion:
          type: string
        ResourceOwner:
          type: string
      required:
        - ResourceId
        - ResourceType
        - ResourceRegion
        - ResourceOwner
      additionalProperties: false
    IPAMPool:
      type: object
      properties:
        IpamPoolId:
          description: Id of the IPAM Pool.
          type: string
        AddressFamily:
          description: The address family of the address space in this pool. Either IPv4 or IPv6.
          type: string
        AllocationMinNetmaskLength:
          description: The minimum allowed netmask length for allocations made from this pool.
          type: integer
        AllocationDefaultNetmaskLength:
          description: The default netmask length for allocations made from this pool. This value is used when the netmask length of an allocation isn't specified.
          type: integer
        AllocationMaxNetmaskLength:
          description: The maximum allowed netmask length for allocations made from this pool.
          type: integer
        AllocationResourceTags:
          description: When specified, an allocation will not be allowed unless a resource has a matching set of tags.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          description: The Amazon Resource Name (ARN) of the IPAM Pool.
          type: string
        AutoImport:
          description: Determines what to do if IPAM discovers resources that haven't been assigned an allocation. If set to true, an allocation will be made automatically.
          type: boolean
        AwsService:
          description: Limits which service in Amazon Web Services that the pool can be used in.
          type: string
          enum:
            - ec2
        Description:
          type: string
        IpamScopeId:
          description: The Id of the scope this pool is a part of.
          type: string
        IpamScopeArn:
          description: The Amazon Resource Name (ARN) of the scope this pool is a part of.
          type: string
        IpamScopeType:
          description: Determines whether this scope contains publicly routable space or space for a private network
          type: string
          enum:
            - public
            - private
        IpamArn:
          description: The Amazon Resource Name (ARN) of the IPAM this pool is a part of.
          type: string
        Locale:
          description: The region of this pool. If not set, this will default to "None" which will disable non-custom allocations. If the locale has been specified for the source pool, this value must match.
          type: string
        PoolDepth:
          description: The depth of this pool in the source pool hierarchy.
          type: integer
        ProvisionedCidrs:
          description: A list of cidrs representing the address space available for allocation in this pool.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/ProvisionedCidr'
        PublicIpSource:
          description: The IP address source for pools in the public scope. Only used for provisioning IP address CIDRs to pools in the public scope. Default is `byoip`.
          type: string
          enum:
            - byoip
            - amazon
        PubliclyAdvertisable:
          description: Determines whether or not address space from this pool is publicly advertised. Must be set if and only if the pool is IPv6.
          type: boolean
        SourceIpamPoolId:
          description: The Id of this pool's source. If set, all space provisioned in this pool must be free space provisioned in the parent pool.
          type: string
        SourceResource:
          $ref: '#/components/schemas/SourceResource'
        State:
          description: 'The state of this pool. This can be one of the following values: "create-in-progress", "create-complete", "modify-in-progress", "modify-complete", "delete-in-progress", or "delete-complete"'
          type: string
          enum:
            - create-in-progress
            - create-complete
            - modify-in-progress
            - modify-complete
            - delete-in-progress
            - delete-complete
        StateMessage:
          description: An explanation of how the pool arrived at it current state.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - IpamScopeId
        - AddressFamily
      x-stackql-resource-name: ipam_pool
      x-stackql-primaryIdentifier:
        - IpamPoolId
      x-create-only-properties:
        - IpamScopeId
        - SourceIpamPoolId
        - Locale
        - AddressFamily
        - PubliclyAdvertisable
        - PublicIpSource
        - AwsService
        - SourceResource
      x-read-only-properties:
        - IpamPoolId
        - Arn
        - IpamScopeArn
        - IpamScopeType
        - IpamArn
        - PoolDepth
        - State
        - StateMessage
      x-required-permissions:
        create:
          - ec2:CreateIpamPool
          - ec2:DescribeIpamPools
          - ec2:ProvisionIpamPoolCidr
          - ec2:GetIpamPoolCidrs
          - ec2:CreateTags
        read:
          - ec2:DescribeIpamPools
          - ec2:GetIpamPoolCidrs
        update:
          - ec2:ModifyIpamPool
          - ec2:DescribeIpamPools
          - ec2:GetIpamPoolCidrs
          - ec2:ProvisionIpamPoolCidr
          - ec2:DeprovisionIpamPoolCidr
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteIpamPool
          - ec2:DescribeIpamPools
          - ec2:GetIpamPoolCidrs
          - ec2:DeprovisionIpamPoolCidr
          - ec2:DeleteTags
        list:
          - ec2:DescribeIpamPools
    IPAMPoolCidr:
      type: object
      properties:
        IpamPoolCidrId:
          description: Id of the IPAM Pool Cidr.
          type: string
        IpamPoolId:
          description: Id of the IPAM Pool.
          type: string
        Cidr:
          description: Represents a single IPv4 or IPv6 CIDR
          type: string
        NetmaskLength:
          description: The desired netmask length of the provision. If set, IPAM will choose a block of free space with this size and return the CIDR representing it.
          type: integer
        State:
          description: Provisioned state of the cidr.
          type: string
      required:
        - IpamPoolId
      x-stackql-resource-name: ipam_pool_cidr
      x-stackql-primaryIdentifier:
        - IpamPoolId
        - IpamPoolCidrId
      x-create-only-properties:
        - IpamPoolId
        - Cidr
        - NetmaskLength
      x-read-only-properties:
        - IpamPoolCidrId
        - State
      x-required-permissions:
        create:
          - ec2:ProvisionIpamPoolCidr
          - ec2:GetIpamPoolCidrs
        read:
          - ec2:GetIpamPoolCidrs
        delete:
          - ec2:DeprovisionIpamPoolCidr
          - ec2:GetIpamPoolCidrs
        list:
          - ec2:GetIpamPoolCidrs
    IPAMResourceDiscovery:
      type: object
      properties:
        IpamResourceDiscoveryId:
          description: Id of the IPAM Pool.
          type: string
        OwnerId:
          description: Owner Account ID of the Resource Discovery
          type: string
        OperatingRegions:
          description: The regions Resource Discovery is enabled for. Allows resource discoveries to be created in these regions, as well as enabling monitoring
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/IpamOperatingRegion'
        IpamResourceDiscoveryRegion:
          description: 'The region the resource discovery is setup in. '
          type: string
        Description:
          type: string
        IsDefault:
          description: Determines whether or not address space from this pool is publicly advertised. Must be set if and only if the pool is IPv6.
          type: boolean
        IpamResourceDiscoveryArn:
          description: Amazon Resource Name (Arn) for the Resource Discovery.
          type: string
        State:
          description: The state of this Resource Discovery.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required: []
      x-stackql-resource-name: ipam_resource_discovery
      x-stackql-primaryIdentifier:
        - IpamResourceDiscoveryId
      x-read-only-properties:
        - IpamResourceDiscoveryId
        - IpamResourceDiscoveryArn
        - OwnerId
        - IpamResourceDiscoveryRegion
        - IsDefault
        - State
      x-required-permissions:
        create:
          - ec2:CreateIpamResourceDiscovery
          - ec2:DescribeIpamResourceDiscoveries
          - ec2:CreateTags
        read:
          - ec2:DescribeIpamResourceDiscoveries
        update:
          - ec2:ModifyIpamResourceDiscovery
          - ec2:DescribeIpamResourceDiscoveries
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteIpamResourceDiscovery
          - ec2:DescribeIpamResourceDiscoveries
          - ec2:DeleteTags
        list:
          - ec2:DescribeIpamResourceDiscoveries
    IPAMResourceDiscoveryAssociation:
      type: object
      properties:
        IpamArn:
          description: Arn of the IPAM.
          type: string
        IpamRegion:
          description: The home region of the IPAM.
          type: string
        IpamResourceDiscoveryAssociationId:
          description: Id of the IPAM Resource Discovery Association.
          type: string
        IpamResourceDiscoveryId:
          description: The Amazon Resource Name (ARN) of the IPAM Resource Discovery Association.
          type: string
        IpamId:
          description: The Id of the IPAM this Resource Discovery is associated to.
          type: string
        IpamResourceDiscoveryAssociationArn:
          description: The Amazon Resource Name (ARN) of the resource discovery association is a part of.
          type: string
        IsDefault:
          description: If the Resource Discovery Association exists due as part of CreateIpam.
          type: boolean
        OwnerId:
          description: The AWS Account ID for the account where the shared IPAM exists.
          type: string
        State:
          description: The operational state of the Resource Discovery Association. Related to Create/Delete activities.
          type: string
        ResourceDiscoveryStatus:
          description: The status of the resource discovery.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - IpamId
        - IpamResourceDiscoveryId
      x-stackql-resource-name: ipam_resource_discovery_association
      x-stackql-primaryIdentifier:
        - IpamResourceDiscoveryAssociationId
      x-create-only-properties:
        - IpamId
        - IpamResourceDiscoveryId
      x-read-only-properties:
        - IpamArn
        - IpamRegion
        - IpamResourceDiscoveryAssociationId
        - IpamResourceDiscoveryAssociationArn
        - IsDefault
        - ResourceDiscoveryStatus
        - State
        - OwnerId
      x-required-permissions:
        create:
          - ec2:AssociateIpamResourceDiscovery
          - ec2:DescribeIpamResourceDiscoveryAssociations
          - ec2:CreateTags
        read:
          - ec2:DescribeIpamResourceDiscoveryAssociations
        update:
          - ec2:DescribeIpamResourceDiscoveryAssociations
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DisassociateIpamResourceDiscovery
          - ec2:DescribeIpamResourceDiscoveryAssociations
          - ec2:DeleteTags
        list:
          - ec2:DescribeIpamResourceDiscoveryAssociations
    IPAMScope:
      type: object
      properties:
        IpamScopeId:
          description: Id of the IPAM scope.
          type: string
        Arn:
          description: The Amazon Resource Name (ARN) of the IPAM scope.
          type: string
        IpamId:
          description: The Id of the IPAM this scope is a part of.
          type: string
        IpamArn:
          description: The Amazon Resource Name (ARN) of the IPAM this scope is a part of.
          type: string
        IpamScopeType:
          description: Determines whether this scope contains publicly routable space or space for a private network
          type: string
          enum:
            - public
            - private
        IsDefault:
          description: Is this one of the default scopes created with the IPAM.
          type: boolean
        Description:
          type: string
        PoolCount:
          description: The number of pools that currently exist in this scope.
          type: integer
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - IpamId
      x-stackql-resource-name: ipam_scope
      x-stackql-primaryIdentifier:
        - IpamScopeId
      x-create-only-properties:
        - IpamId
      x-read-only-properties:
        - IpamScopeId
        - Arn
        - IpamArn
        - IsDefault
        - PoolCount
        - IpamScopeType
      x-required-permissions:
        create:
          - ec2:CreateIpamScope
          - ec2:DescribeIpamScopes
          - ec2:CreateTags
        read:
          - ec2:DescribeIpamScopes
        update:
          - ec2:ModifyIpamScope
          - ec2:DescribeIpamScopes
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteIpamScope
          - ec2:DescribeIpamScopes
          - ec2:DeleteTags
        list:
          - ec2:DescribeIpamScopes
    KeyPair:
      type: object
      properties:
        KeyName:
          description: The name of the SSH key pair
          type: string
        KeyType:
          description: The crypto-system used to generate a key pair.
          type: string
          default: rsa
          enum:
            - rsa
            - ed25519
        KeyFormat:
          description: The format of the private key
          type: string
          default: pem
          enum:
            - pem
            - ppk
        PublicKeyMaterial:
          description: Plain text public key to import
          type: string
        KeyFingerprint:
          description: A short sequence of bytes used for public key verification
          type: string
        KeyPairId:
          description: An AWS generated ID for the key pair
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - KeyName
      x-stackql-resource-name: key_pair
      x-stackql-primaryIdentifier:
        - KeyName
      x-create-only-properties:
        - KeyName
        - KeyType
        - KeyFormat
        - PublicKeyMaterial
        - Tags
      x-read-only-properties:
        - KeyPairId
        - KeyFingerprint
      x-required-permissions:
        create:
          - ec2:CreateKeyPair
          - ec2:ImportKeyPair
          - ec2:CreateTags
          - ssm:PutParameter
        read:
          - ec2:DescribeKeyPairs
        list:
          - ec2:DescribeKeyPairs
        delete:
          - ec2:DeleteKeyPair
          - ssm:DeleteParameter
          - ec2:DescribeKeyPairs
    LaunchTemplateData:
      description: |-
        The information to include in the launch template.
          You must specify at least one parameter for the launch template data.
      additionalProperties: false
      type: object
      properties:
        SecurityGroups:
          uniqueItems: false
          description: One or more security group names. For a nondefault VPC, you must use security group IDs instead.
          type: array
          items:
            type: string
        TagSpecifications:
          uniqueItems: false
          description: |-
            The tags to apply to the resources that are created during instance launch.
             To tag a resource after it has been created, see [CreateTags](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html).
             To tag the launch template itself, use [TagSpecifications](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#cfn-ec2-launchtemplate-tagspecifications).
          type: array
          items:
            $ref: '#/components/schemas/TagSpecification'
        UserData:
          description: |-
            The user data to make available to the instance. You must provide base64-encoded text. User data is limited to 16 KB. For more information, see [Run commands on your Linux instance at launch](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html) (Linux) or [Work with instance user data](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instancedata-add-user-data.html) (Windows) in the *Amazon Elastic Compute Cloud User Guide*.
             If you are creating the launch template for use with BATCH, the user data must be provided in the [MIME multi-part archive format](https://docs.aws.amazon.com/https://cloudinit.readthedocs.io/en/latest/topics/format.html#mime-multi-part-archive). For more information, see [Amazon EC2 user data in launch templates](https://docs.aws.amazon.com/batch/latest/userguide/launch-templates.html) in the *User Guide*.
          type: string
        BlockDeviceMappings:
          uniqueItems: false
          description: The block device mapping.
          type: array
          items:
            $ref: '#/components/schemas/BlockDeviceMapping'
        MaintenanceOptions:
          description: The maintenance options of your instance.
          $ref: '#/components/schemas/MaintenanceOptions'
        IamInstanceProfile:
          description: The name or Amazon Resource Name (ARN) of an IAM instance profile.
          $ref: '#/components/schemas/IamInstanceProfile'
        KernelId:
          description: |-
            The ID of the kernel.
             We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see [User Provided Kernels](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html) in the *Amazon EC2 User Guide*.
          type: string
        EbsOptimized:
          description: Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
          type: boolean
        ElasticGpuSpecifications:
          uniqueItems: false
          description: |-
            Deprecated.
              Amazon Elastic Graphics reached end of life on January 8, 2024. For workloads that require graphics acceleration, we recommend that you use Amazon EC2 G4ad, G4dn, or G5 instances.
          type: array
          items:
            $ref: '#/components/schemas/ElasticGpuSpecification'
        ElasticInferenceAccelerators:
          uniqueItems: false
          description: |-
            An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.
             You cannot specify accelerators from different generations in the same request.
              Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service.
          type: array
          items:
            $ref: '#/components/schemas/LaunchTemplateElasticInferenceAccelerator'
        Placement:
          description: The placement for the instance.
          $ref: '#/components/schemas/Placement'
        NetworkInterfaces:
          uniqueItems: false
          description: One or more network interfaces. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
        EnclaveOptions:
          description: |-
            Indicates whether the instance is enabled for AWS Nitro Enclaves. For more information, see [What is Nitro Enclaves?](https://docs.aws.amazon.com/enclaves/latest/user/nitro-enclave.html) in the *Nitro Enclaves User Guide*.
             You can't enable AWS Nitro Enclaves and hibernation on the same instance.
          $ref: '#/components/schemas/EnclaveOptions'
        ImageId:
          description: |-
            The ID of the AMI. Alternatively, you can specify a Systems Manager parameter, which will resolve to an AMI ID on launch.
             Valid formats:
              +   ``ami-17characters00000`` 
              +   ``resolve:ssm:parameter-name`` 
              +   ``resolve:ssm:parameter-name:version-number`` 
              +   ``resolve:ssm:parameter-name:label`` 
              
             For more information, see [Use a Systems Manager parameter to find an AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html#using-systems-manager-parameter-to-find-AMI) in the *Amazon Elastic Compute Cloud User Guide*.
          type: string
        InstanceType:
          description: |-
            The instance type. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon Elastic Compute Cloud User Guide*.
             If you specify ``InstanceType``, you can't specify ``InstanceRequirements``.
          type: string
        Monitoring:
          description: The monitoring for the instance.
          $ref: '#/components/schemas/Monitoring'
        HibernationOptions:
          description: Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the [hibernation prerequisites](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hibernating-prerequisites.html). For more information, see [Hibernate your instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html) in the *Amazon Elastic Compute Cloud User Guide*.
          $ref: '#/components/schemas/HibernationOptions'
        MetadataOptions:
          description: The metadata options for the instance. For more information, see [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the *Amazon Elastic Compute Cloud User Guide*.
          $ref: '#/components/schemas/MetadataOptions'
        LicenseSpecifications:
          uniqueItems: false
          description: The license configurations.
          type: array
          items:
            $ref: '#/components/schemas/LicenseSpecification'
        InstanceInitiatedShutdownBehavior:
          description: |-
            Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
             Default: ``stop``
          type: string
        DisableApiStop:
          description: Indicates whether to enable the instance for stop protection. For more information, see [Stop protection](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html#Using_StopProtection) in the *Amazon Elastic Compute Cloud User Guide*.
          type: boolean
        CpuOptions:
          description: The CPU options for the instance. For more information, see [Optimizing CPU Options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) in the *Amazon Elastic Compute Cloud User Guide*.
          $ref: '#/components/schemas/CpuOptions'
        PrivateDnsNameOptions:
          description: The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
          $ref: '#/components/schemas/PrivateDnsNameOptions'
        SecurityGroupIds:
          uniqueItems: false
          description: The IDs of the security groups. You can specify the IDs of existing security groups and references to resources created by the stack template.
          type: array
          items:
            type: string
        KeyName:
          description: |-
            The name of the key pair. You can create a key pair using [CreateKeyPair](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html) or [ImportKeyPair](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html).
              If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.
          type: string
        DisableApiTermination:
          description: If you set this parameter to ``true``, you can't terminate the instance using the Amazon EC2 console, CLI, or API; otherwise, you can. To change this attribute after launch, use [ModifyInstanceAttribute](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html). Alternatively, if you set ``InstanceInitiatedShutdownBehavior`` to ``terminate``, you can terminate the instance by running the shutdown command from the instance.
          type: boolean
        InstanceMarketOptions:
          description: The market (purchasing) option for the instances.
          $ref: '#/components/schemas/InstanceMarketOptions'
        InstanceRequirements:
          description: |-
            The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with these attributes.
             You must specify ``VCpuCount`` and ``MemoryMiB``. All other attributes are optional. Any unspecified optional attribute is set to its default.
             When you specify multiple attributes, you get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get instance types that satisfy any of the specified values.
             To limit the list of instance types from which Amazon EC2 can identify matching instance types, you can use one of the following parameters, but not both in the same request:
              +   ``AllowedInstanceTypes`` - The instance types to include in the list. All other instance types are ignored, even if they match your specified attributes.
              +   ``ExcludedInstanceTypes`` - The instance types to exclude from the list, even if they match your specified attributes.
              
              If you specify ``InstanceReq
          $ref: '#/components/schemas/InstanceRequirements'
        RamDiskId:
          description: |-
            The ID of the RAM disk.
              We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see [User provided kernels](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html) in the *Amazon Elastic Compute Cloud User Guide*.
          type: string
        CapacityReservationSpecification:
          description: The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to ``open``, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
          $ref: '#/components/schemas/CapacityReservationSpecification'
        CreditSpecification:
          description: The credit option for CPU usage of the instance. Valid only for T instances.
          $ref: '#/components/schemas/CreditSpecification'
    Ipv6Add:
      description: |-
        Specifies an IPv6 address in an Amazon EC2 launch template.
         ``Ipv6Add`` is a property of [AWS::EC2::LaunchTemplate NetworkInterface](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-networkinterface.html).
      additionalProperties: false
      type: object
      properties:
        Ipv6Address:
          description: One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
          type: string
    LicenseSpecification:
      description: |-
        Specifies a license configuration for an instance.
         ``LicenseSpecification`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        LicenseConfigurationArn:
          description: The Amazon Resource Name (ARN) of the license configuration.
          type: string
    MaintenanceOptions:
      description: The maintenance options of your instance.
      additionalProperties: false
      type: object
      properties:
        AutoRecovery:
          description: Disables the automatic recovery behavior of your instance or sets it to default.
          type: string
        RebootMigration:
          description: ''
          type: string
    ElasticGpuSpecification:
      description: |-
        Specifies a specification for an Elastic GPU for an Amazon EC2 launch template.
          ``ElasticGpuSpecification`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        Type:
          description: The type of Elastic Graphics accelerator. For more information about the values to specify for ``Type``, see [Elastic Graphics Basics](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html#elastic-graphics-basics), specifically the Elastic Graphics accelerator column, in the *Amazon Elastic Compute Cloud User Guide for Windows Instances*.
          type: string
    IamInstanceProfile:
      description: |-
        Specifies an IAM instance profile, which is a container for an IAM role for your instance. You can use an IAM role to distribute your AWS credentials to your instances.
         If you are creating the launch template for use with an Amazon EC2 Auto Scaling group, you can specify either the name or the ARN of the instance profile, but not both.
          ``IamInstanceProfile`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) of the instance profile.
          type: string
        Name:
          description: The name of the instance profile.
          type: string
    MemoryGiBPerVCpu:
      description: The minimum and maximum amount of memory per vCPU, in GiB.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum amount of memory per vCPU, in GiB. To specify no minimum limit, omit this parameter.
          type: number
        Max:
          description: The maximum amount of memory per vCPU, in GiB. To specify no maximum limit, omit this parameter.
          type: number
    VCpuCount:
      description: The minimum and maximum number of vCPUs.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum number of vCPUs. To specify no minimum limit, specify ``0``.
          type: integer
        Max:
          description: The maximum number of vCPUs. To specify no maximum limit, omit this parameter.
          type: integer
    Ipv4PrefixSpecification:
      type: object
      additionalProperties: false
      properties:
        Ipv4Prefix:
          type: string
      required:
        - Ipv4Prefix
    EnaSrdSpecification:
      type: object
      additionalProperties: false
      properties:
        EnaSrdEnabled:
          type: boolean
        EnaSrdUdpSpecification:
          type: object
          additionalProperties: false
          properties:
            EnaSrdUdpEnabled:
              type: boolean
    EnclaveOptions:
      description: Indicates whether the instance is enabled for AWS Nitro Enclaves.
      additionalProperties: false
      type: object
      properties:
        Enabled:
          description: If this parameter is set to ``true``, the instance is enabled for AWS Nitro Enclaves; otherwise, it is not enabled for AWS Nitro Enclaves.
          type: boolean
    Ebs:
      description: |-
        Parameters for a block device for an EBS volume in an Amazon EC2 launch template.
          ``Ebs`` is a property of [AWS::EC2::LaunchTemplate BlockDeviceMapping](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-blockdevicemapping.html).
      additionalProperties: false
      type: object
      properties:
        SnapshotId:
          description: The ID of the snapshot.
          type: string
        VolumeType:
          description: The volume type. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the *Amazon Elastic Compute Cloud User Guide*.
          type: string
        KmsKeyId:
          description: The ARN of the symmetric KMSlong (KMS) CMK used for encryption.
          type: string
        Encrypted:
          description: Indicates whether the EBS volume is encrypted. Encrypted volumes can only be attached to instances that support Amazon EBS encryption. If you are creating a volume from a snapshot, you can't specify an encryption value.
          type: boolean
        Throughput:
          description: |-
            The throughput to provision for a ``gp3`` volume, with a maximum of 1,000 MiB/s.
             Valid Range: Minimum value of 125. Maximum value of 1000.
          type: integer
        Iops:
          description: |-
            The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
             The following are the supported values for each volume type:
              +   ``gp3``: 3,000 - 16,000 IOPS
              +   ``io1``: 100 - 64,000 IOPS
              +   ``io2``: 100 - 256,000 IOPS
              
             For ``io2`` volumes, you can achieve up to 256,000 IOPS on [instances built on the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). On other instances, you can achieve performance up to 32,000 IOPS.
             This parameter is supported for ``io1``, ``io2``, and ``gp3`` volumes only.
          type: integer
        VolumeSize:
          description: |-
            The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. The following are the supported volumes sizes for each volume type:
              +   ``gp2`` and ``gp3``: 1 - 16,384 GiB
              +   ``io1``: 4 - 16,384 GiB
              +   ``io2``: 4 - 65,536 GiB
              +   ``st1`` and ``sc1``: 125 - 16,384 GiB
              +   ``standard``: 1 - 1024 GiB
          type: integer
        DeleteOnTermination:
          description: Indicates whether the EBS volume is deleted on instance termination.
          type: boolean
    BlockDeviceMapping:
      type: object
      additionalProperties: false
      properties:
        DeviceName:
          type: string
        Ebs:
          $ref: '#/components/schemas/EbsBlockDevice'
        NoDevice:
          type: string
        VirtualName:
          type: string
      required:
        - DeviceName
    Monitoring:
      description: |-
        Specifies whether detailed monitoring is enabled for an instance. For more information about detailed monitoring, see [Enable or turn off detailed monitoring for your instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch-new.html) in the *User Guide*.
         ``Monitoring`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        Enabled:
          description: Specify ``true`` to enable detailed monitoring. Otherwise, basic monitoring is enabled.
          type: boolean
    MemoryMiB:
      description: The minimum and maximum amount of memory, in MiB.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum amount of memory, in MiB. To specify no minimum limit, specify ``0``.
          type: integer
        Max:
          description: The maximum amount of memory, in MiB. To specify no maximum limit, omit this parameter.
          type: integer
    HibernationOptions:
      description: |-
        Specifies whether your instance is configured for hibernation. This parameter is valid only if the instance meets the [hibernation prerequisites](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites). For more information, see [Hibernate Your Instance](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html) in the *Amazon EC2 User Guide*.
          ``HibernationOptions`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        Configured:
          description: |-
            If you set this parameter to ``true``, the instance is enabled for hibernation.
             Default: ``false``
          type: boolean
    MetadataOptions:
      description: |-
        The metadata options for the instance. For more information, see [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) in the *Amazon EC2 User Guide*.
         ``MetadataOptions`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        HttpPutResponseHopLimit:
          description: |-
            The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.
             Default: ``1`` 
             Possible values: Integers from 1 to 64
          type: integer
        HttpTokens:
          description: |-
            Indicates whether IMDSv2 is required.
              +   ``optional`` - IMDSv2 is optional. You can choose whether to send a session token in your instance metadata retrieval requests. If you retrieve IAM role credentials without a session token, you receive the IMDSv1 role credentials. If you retrieve IAM role credentials using a valid session token, you receive the IMDSv2 role credentials.
              +   ``required`` - IMDSv2 is required. You must send a session token in your instance metadata retrieval requests. With this option, retrieving the IAM role credentials always returns IMDSv2 credentials; IMDSv1 credentials are not available.
              
             Default: If the value of ``ImdsSupport`` for the Amazon Machine Image (AMI) for your instance is ``v2.0``, the default is ``required``.
          type: string
        HttpProtocolIpv6:
          description: |-
            Enables or disables the IPv6 endpoint for the instance metadata service.
             Default: ``disabled``
          type: string
        InstanceMetadataTags:
          description: |-
            Set to ``enabled`` to allow access to instance tags from the instance metadata. Set to ``disabled`` to turn off access to instance tags from the instance metadata. For more information, see [Work with instance tags using the instance metadata](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#work-with-tags-in-IMDS).
             Default: ``disabled``
          type: string
        HttpEndpoint:
          description: |-
            Enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is ``enabled``.
              If you specify a value of ``disabled``, you will not be able to access your instance metadata.
          type: string
    NetworkInterfaceCount:
      description: The minimum and maximum number of network interfaces.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum number of network interfaces. To specify no minimum limit, omit this parameter.
          type: integer
        Max:
          description: The maximum number of network interfaces. To specify no maximum limit, omit this parameter.
          type: integer
    CpuOptions:
      description: |-
        Specifies the CPU options for an instance. For more information, see [Optimize CPU options](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html) in the *User Guide*.
          ``CpuOptions`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        ThreadsPerCore:
          description: The number of threads per CPU core. To disable multithreading for the instance, specify a value of ``1``. Otherwise, specify the default value of ``2``.
          type: integer
        AmdSevSnp:
          description: Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is supported with M6a, R6a, and C6a instance types only. For more information, see [AMD SEV-SNP](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/sev-snp.html).
          type: string
          enum:
            - enabled
            - disabled
        CoreCount:
          description: The number of CPU cores for the instance.
          type: integer
    SpotOptions:
      description: |-
        Specifies options for Spot Instances.
         ``SpotOptions`` is a property of [AWS::EC2::LaunchTemplate InstanceMarketOptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata-instancemarketoptions.html).
      additionalProperties: false
      type: object
      properties:
        SpotInstanceType:
          description: |-
            The Spot Instance request type.
             If you are using Spot Instances with an Auto Scaling group, use ``one-time`` requests, as the Amazon EC2 Auto Scaling service handles requesting new Spot Instances whenever the group is below its desired capacity.
          type: string
        InstanceInterruptionBehavior:
          description: The behavior when a Spot Instance is interrupted. The default is ``terminate``.
          type: string
        MaxPrice:
          description: |-
            The maximum hourly price you're willing to pay for the Spot Instances. We do not recommend using this parameter because it can lead to increased interruptions. If you do not specify this parameter, you will pay the current Spot price.
              If you specify a maximum price, your Spot Instances will be interrupted more frequently than if you do not specify this parameter.
          type: string
        BlockDurationMinutes:
          description: Deprecated.
          type: integer
        ValidUntil:
          description: |-
            The end date of the request, in UTC format (*YYYY-MM-DD*T*HH:MM:SS*Z). Supported only for persistent requests.
              +  For a persistent request, the request remains active until the ``ValidUntil`` date and time is reached. Otherwise, the request remains active until you cancel it.
              +  For a one-time request, ``ValidUntil`` is not supported. The request remains active until all instances launch or you cancel the request.
              
             Default: 7 days from the current date
          type: string
    NetworkInterface:
      type: object
      properties:
        Description:
          description: A description for the network interface.
          type: string
        PrivateIpAddress:
          description: 'Assigns a single private IP address to the network interface, which is used as the primary private IP address. If you want to specify multiple private IP address, use the PrivateIpAddresses property. '
          type: string
        PrivateIpAddresses:
          description: Assigns a list of private IP addresses to the network interface. You can specify a primary private IP address by setting the value of the Primary property to true in the PrivateIpAddressSpecification property. If you want EC2 to automatically assign private IP addresses, use the SecondaryPrivateIpAddressCount property and do not specify this property.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/PrivateIpAddressSpecification'
        SecondaryPrivateIpAddressCount:
          description: The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using privateIpAddresses
          type: integer
        PrimaryPrivateIpAddress:
          description: Returns the primary private IP address of the network interface.
          type: string
        Ipv4Prefixes:
          description: 'Assigns a list of IPv4 prefixes to the network interface. If you want EC2 to automatically assign IPv4 prefixes, use the Ipv4PrefixCount property and do not specify this property. Presently, only /28 prefixes are supported. You can''t specify IPv4 prefixes if you''ve specified one of the following: a count of IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.'
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Ipv4PrefixSpecification'
        Ipv4PrefixCount:
          description: 'The number of IPv4 prefixes to assign to a network interface. When you specify a number of IPv4 prefixes, Amazon EC2 selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default, these will be /28 prefixes. You can''t specify a count of IPv4 prefixes if you''ve specified one of the following: specific IPv4 prefixes, specific private IPv4 addresses, or a count of private IPv4 addresses.'
          type: integer
        GroupSet:
          description: A list of security group IDs associated with this network interface.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Ipv6Addresses:
          description: One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet to associate with the network interface. If you're specifying a number of IPv6 addresses, use the Ipv6AddressCount property and don't specify this property.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/InstanceIpv6Address'
        Ipv6Prefixes:
          description: 'Assigns a list of IPv6 prefixes to the network interface. If you want EC2 to automatically assign IPv6 prefixes, use the Ipv6PrefixCount property and do not specify this property. Presently, only /80 prefixes are supported. You can''t specify IPv6 prefixes if you''ve specified one of the following: a count of IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.'
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Ipv6PrefixSpecification'
        Ipv6PrefixCount:
          description: 'The number of IPv6 prefixes to assign to a network interface. When you specify a number of IPv6 prefixes, Amazon EC2 selects these prefixes from your existing subnet CIDR reservations, if available, or from free spaces in the subnet. By default, these will be /80 prefixes. You can''t specify a count of IPv6 prefixes if you''ve specified one of the following: specific IPv6 prefixes, specific IPv6 addresses, or a count of IPv6 addresses.'
          type: integer
        SubnetId:
          description: The ID of the subnet to associate with the network interface.
          type: string
        SourceDestCheck:
          description: Indicates whether traffic to or from the instance is validated.
          type: boolean
        InterfaceType:
          description: Indicates the type of network interface.
          type: string
        SecondaryPrivateIpAddresses:
          description: Returns the secondary private IP addresses of the network interface.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Ipv6AddressCount:
          description: The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. To specify specific IPv6 addresses, use the Ipv6Addresses property and don't specify this property.
          type: integer
        EnablePrimaryIpv6:
          description: >-
            If you have instances or ENIs that rely on the IPv6 address not changing, to avoid disrupting traffic to instances or ENIs, you can enable a primary IPv6 address. Enable this option to automatically assign an IPv6 associated with the ENI attached to your instance to be the primary IPv6 address. When you enable an IPv6 address to be a primary IPv6, you cannot disable it. Traffic will be routed to the primary IPv6 address until the instance is terminated or the ENI is detached. If you
            have multiple IPv6 addresses associated with an ENI and you enable a primary IPv6 address, the first IPv6 address associated with the ENI becomes the primary IPv6 address.
          type: boolean
        PrimaryIpv6Address:
          description: The primary IPv6 address
          type: string
        ConnectionTrackingSpecification:
          $ref: '#/components/schemas/ConnectionTrackingSpecification'
        Id:
          description: Network interface id.
          type: string
        Tags:
          description: An arbitrary set of tags (key-value pairs) for this network interface.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - SubnetId
      x-stackql-resource-name: network_interface
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - PrivateIpAddress
        - InterfaceType
        - SubnetId
      x-read-only-properties:
        - Id
        - SecondaryPrivateIpAddresses
        - PrimaryPrivateIpAddress
        - PrimaryIpv6Address
      x-required-permissions:
        create:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:CreateTags
          - ec2:ModifyNetworkInterfaceAttribute
        delete:
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
        list:
          - ec2:DescribeNetworkInterfaces
        read:
          - ec2:DescribeNetworkInterfaces
        update:
          - ec2:DescribeNetworkInterfaces
          - ec2:ModifyNetworkInterfaceAttribute
          - ec2:UnassignIpv6Addresses
          - ec2:AssignIpv6Addresses
          - ec2:DeleteTags
          - ec2:CreateTags
          - ec2:UnassignPrivateIpAddresses
          - ec2:AssignPrivateIpAddresses
    PrivateDnsNameOptions:
      description: The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
      additionalProperties: false
      type: object
      properties:
        EnableResourceNameDnsARecord:
          description: Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
          type: boolean
        HostnameType:
          description: The type of hostname for EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 only subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
          type: string
        EnableResourceNameDnsAAAARecord:
          description: Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
          type: boolean
    PrivateIpAdd:
      description: |-
        Specifies a secondary private IPv4 address for a network interface.
         ``PrivateIpAdd`` is a property of [AWS::EC2::LaunchTemplate NetworkInterface](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-networkinterface.html).
      additionalProperties: false
      type: object
      properties:
        PrivateIpAddress:
          description: The private IPv4 address.
          type: string
        Primary:
          description: Indicates whether the private IPv4 address is the primary private IPv4 address. Only one IPv4 address can be designated as primary.
          type: boolean
    Ipv6PrefixSpecification:
      type: object
      additionalProperties: false
      properties:
        Ipv6Prefix:
          type: string
      required:
        - Ipv6Prefix
    LaunchTemplateTagSpecification:
      description: |-
        Specifies the tags to apply to the launch template during creation.
         ``LaunchTemplateTagSpecification`` is a property of [AWS::EC2::LaunchTemplate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html).
      additionalProperties: false
      type: object
      properties:
        ResourceType:
          description: The type of resource. To tag the launch template, ``ResourceType`` must be ``launch-template``.
          type: string
        Tags:
          uniqueItems: false
          description: The tags for the resource.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    EnaSrdUdpSpecification:
      description: ENA Express is compatible with both TCP and UDP transport protocols. When it's enabled, TCP traffic automatically uses it. However, some UDP-based applications are designed to handle network packets that are out of order, without a need for retransmission, such as live video broadcasting or other near-real-time applications. For UDP traffic, you can specify whether to use ENA Express, based on your application environment needs.
      additionalProperties: false
      type: object
      properties:
        EnaSrdUdpEnabled:
          description: Indicates whether UDP traffic to and from the instance uses ENA Express. To specify this setting, you must first enable ENA Express.
          type: boolean
    NetworkBandwidthGbps:
      description: |-
        The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps).
          Setting the minimum bandwidth does not guarantee that your instance will achieve the minimum bandwidth. Amazon EC2 will identify instance types that support the specified minimum bandwidth, but the actual bandwidth of your instance might go below the specified minimum at times. For more information, see [Available instance bandwidth](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html#available-instance-bandwidth) in the *Amazon EC2 User Guide*.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum amount of network bandwidth, in Gbps. If this parameter is not specified, there is no minimum limit.
          type: number
        Max:
          description: The maximum amount of network bandwidth, in Gbps. To specify no maximum limit, omit this parameter.
          type: number
    AcceleratorCount:
      description: The minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips) on an instance.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum number of accelerators. To specify no minimum limit, omit this parameter.
          type: integer
        Max:
          description: The maximum number of accelerators. To specify no maximum limit, omit this parameter. To exclude accelerator-enabled instance types, set ``Max`` to ``0``.
          type: integer
    InstanceMarketOptions:
      description: |-
        Specifies the market (purchasing) option for an instance.
         ``InstanceMarketOptions`` is a property of the [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        SpotOptions:
          description: The options for Spot Instances.
          $ref: '#/components/schemas/SpotOptions'
        MarketType:
          description: The market type.
          type: string
    LaunchTemplateElasticInferenceAccelerator:
      description: |-
        Specifies an elastic inference accelerator.
         ``LaunchTemplateElasticInferenceAccelerator`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        Type:
          description: The type of elastic inference accelerator. The possible values are eia1.medium, eia1.large, and eia1.xlarge.
          type: string
        Count:
          description: |-
            The number of elastic inference accelerators to attach to the instance. 
             Default: 1
          type: integer
    BaselineEbsBandwidthMbps:
      description: The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see [Amazon EBS–optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html) in the *Amazon EC2 User Guide*.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum baseline bandwidth, in Mbps. To specify no minimum limit, omit this parameter.
          type: integer
        Max:
          description: The maximum baseline bandwidth, in Mbps. To specify no maximum limit, omit this parameter.
          type: integer
    InstanceRequirements:
      description: |-
        The attributes for the instance types. When you specify instance attributes, Amazon EC2 will identify instance types with these attributes.
         You must specify ``VCpuCount`` and ``MemoryMiB``. All other attributes are optional. Any unspecified optional attribute is set to its default.
         When you specify multiple attributes, you get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get instance types that satisfy any of the specified values.
         To limit the list of instance types from which Amazon EC2 can identify matching instance types, you can use one of the following parameters, but not both in the same request:
          +   ``AllowedInstanceTypes`` - The instance types to include in the list. All other instance types are ignored, even if they match your specified attributes.
          +   ``ExcludedInstanceTypes`` - The instance types to exclude from the list, even if they match your specified attributes.
          
          If you specify ``InstanceReq
      additionalProperties: false
      type: object
      properties:
        LocalStorageTypes:
          uniqueItems: false
          description: |-
            The type of local storage that is required.
              +  For instance types with hard disk drive (HDD) storage, specify ``hdd``.
              +  For instance types with solid state drive (SSD) storage, specify ``ssd``.
              
             Default: ``hdd`` and ``ssd``
          type: array
          items:
            type: string
        InstanceGenerations:
          uniqueItems: false
          description: |-
            Indicates whether current or previous generation instance types are included. The current generation instance types are recommended for use. Current generation instance types are typically the latest two to three generations in each instance family. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the *Amazon EC2 User Guide*.
             For current generation instance types, specify ``current``.
             For previous generation instance types, specify ``previous``.
             Default: Current and previous generation instance types
          type: array
          items:
            type: string
        NetworkInterfaceCount:
          description: |-
            The minimum and maximum number of network interfaces.
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/NetworkInterfaceCount'
        MemoryGiBPerVCpu:
          description: |-
            The minimum and maximum amount of memory per vCPU, in GiB.
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/MemoryGiBPerVCpu'
        AcceleratorTypes:
          uniqueItems: false
          description: |-
            The accelerator types that must be on the instance type.
              +  For instance types with GPU accelerators, specify ``gpu``.
              +  For instance types with FPGA accelerators, specify ``fpga``.
              +  For instance types with inference accelerators, specify ``inference``.
              
             Default: Any accelerator type
          type: array
          items:
            type: string
        VCpuCount:
          description: The minimum and maximum number of vCPUs.
          $ref: '#/components/schemas/VCpuCount'
        ExcludedInstanceTypes:
          uniqueItems: false
          description: |-
            The instance types to exclude.
             You can use strings with one or more wild cards, represented by an asterisk (``*``), to exclude an instance type, size, or generation. The following are examples: ``m5.8xlarge``, ``c5*.*``, ``m5a.*``, ``r*``, ``*3*``.
             For example, if you specify ``c5*``,Amazon EC2 will exclude the entire C5 instance family, which includes all C5a and C5n instance types. If you specify ``m5a.*``, Amazon EC2 will exclude all the M5a instance types, but not the M5n instance types.
              If you specify ``ExcludedInstanceTypes``, you can't specify ``AllowedInstanceTypes``.
              Default: No excluded instance types
          type: array
          items:
            description: The user data to make available to the instance.
            type: string
        AcceleratorManufacturers:
          uniqueItems: false
          description: |-
            Indicates whether instance types must have accelerators by specific manufacturers.
              +  For instance types with AWS devices, specify ``amazon-web-services``.
              +  For instance types with AMD devices, specify ``amd``.
              +  For instance types with Habana devices, specify ``habana``.
              +  For instance types with NVIDIA devices, specify ``nvidia``.
              +  For instance types with Xilinx devices, specify ``xilinx``.
              
             Default: Any manufacturer
          type: array
          items:
            type: string
        AllowedInstanceTypes:
          uniqueItems: false
          description: |-
            The instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes.
             You can use strings with one or more wild cards, represented by an asterisk (``*``), to allow an instance type, size, or generation. The following are examples: ``m5.8xlarge``, ``c5*.*``, ``m5a.*``, ``r*``, ``*3*``.
             For example, if you specify ``c5*``,Amazon EC2 will allow the entire C5 instance family, which includes all C5a and C5n instance types. If you specify ``m5a.*``, Amazon EC2 will allow all the M5a instance types, but not the M5n instance types.
              If you specify ``AllowedInstanceTypes``, you can't specify ``ExcludedInstanceTypes``.
              Default: All instance types
          type: array
          items:
            type: string
        LocalStorage:
          description: |-
            Indicates whether instance types with instance store volumes are included, excluded, or required. For more information, [Amazon EC2 instance store](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html) in the *Amazon EC2 User Guide*.
              +  To include instance types with instance store volumes, specify ``included``.
              +  To require only instance types with instance store volumes, specify ``required``.
              +  To exclude instance types with instance store volumes, specify ``excluded``.
              
             Default: ``included``
          type: string
        CpuManufacturers:
          uniqueItems: false
          description: |-
            The CPU manufacturers to include.
              +  For instance types with Intel CPUs, specify ``intel``.
              +  For instance types with AMD CPUs, specify ``amd``.
              +  For instance types with AWS CPUs, specify ``amazon-web-services``.
              
              Don't confuse the CPU manufacturer with the CPU architecture. Instances will be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you specify in your launch template.
              Default: Any manufacturer
          type: array
          items:
            type: string
        AcceleratorCount:
          description: |-
            The minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips) on an instance.
             To exclude accelerator-enabled instance types, set ``Max`` to ``0``.
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/AcceleratorCount'
        NetworkBandwidthGbps:
          description: |-
            The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps).
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/NetworkBandwidthGbps'
        BareMetal:
          description: |-
            Indicates whether bare metal instance types must be included, excluded, or required.
              +  To include bare metal instance types, specify ``included``.
              +  To require only bare metal instance types, specify ``required``.
              +  To exclude bare metal instance types, specify ``excluded``.
              
             Default: ``excluded``
          type: string
        RequireHibernateSupport:
          description: |-
            Indicates whether instance types must support hibernation for On-Demand Instances.
             This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html).
             Default: ``false``
          type: boolean
        MaxSpotPriceAsPercentageOfOptimalOnDemandPrice:
          description: >-
            [Price protection] The price protection threshold for Spot Instances, as a percentage of an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous generation
            instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold.
             The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
             To indicate no price protection threshold, specify a high value, such as ``999999``.
             If you set ``DesiredCapacityType`` to ``vcpu`` or ``memory-mib``, the price protection threshold is based on the per vCPU or per memory price instead of the per instanc
          type: integer
        SpotMaxPricePercentageOverLowestPrice:
          description: >-
            [Price protection] The price protection threshold for Spot Instances, as a percentage higher than an identified Spot price. The identified Spot price is the Spot price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified Spot price is from the lowest priced current generation instance types, and failing that, from the lowest priced previous
            generation instance types that match your attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose Spot price exceeds your specified threshold.
             The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
             To indicate no price protection threshold, specify a high value, such as ``999999``.
             If you set ``TargetCapacityUnitType`` to ``vcpu`` or ``memory-mib``, the price protection threshold is applied based on the per-vCPU or per-memory price i
          type: integer
        BaselineEbsBandwidthMbps:
          description: |-
            The minimum and maximum baseline bandwidth to Amazon EBS, in Mbps. For more information, see [Amazon EBS–optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html) in the *Amazon EC2 User Guide*.
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/BaselineEbsBandwidthMbps'
        OnDemandMaxPricePercentageOverLowestPrice:
          description: |-
            [Price protection] The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. When Amazon EC2 selects instance types with your attributes, it will exclude instance types whose price exceeds your specified threshold.
             The parameter accepts an integer, which Amazon EC2 interprets as a percentage.
             To turn off price protection, specify a high value, such as ``999999``.
             This parameter is not supported for [GetSpotPlacementScores](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetSpotPlacementScores.html) and [GetInstanceTypesFromInstanceRequirements](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetInstanceTypesFromInstanceRequirements.html).
              If you set ``TargetCapacityUnitType`` to ``vcpu`` or ``memory-mib``, the price protection threshold is applied based on the per-
          type: integer
        AcceleratorNames:
          uniqueItems: false
          description: |-
            The accelerators that must be on the instance type.
              +  For instance types with NVIDIA A10G GPUs, specify ``a10g``.
              +  For instance types with NVIDIA A100 GPUs, specify ``a100``.
              +  For instance types with NVIDIA H100 GPUs, specify ``h100``.
              +  For instance types with AWS Inferentia chips, specify ``inferentia``.
              +  For instance types with NVIDIA GRID K520 GPUs, specify ``k520``.
              +  For instance types with NVIDIA K80 GPUs, specify ``k80``.
              +  For instance types with NVIDIA M60 GPUs, specify ``m60``.
              +  For instance types with AMD Radeon Pro V520 GPUs, specify ``radeon-pro-v520``.
              +  For instance types with NVIDIA T4 GPUs, specify ``t4``.
              +  For instance types with NVIDIA T4G GPUs, specify ``t4g``.
              +  For instance types with Xilinx VU9P FPGAs, specify ``vu9p``.
              +  For instance types with NVIDIA V100 GPUs, specify ``v100``.
              
             Default: Any accelerator
          type: array
          items:
            type: string
        AcceleratorTotalMemoryMiB:
          description: |-
            The minimum and maximum amount of total accelerator memory, in MiB.
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/AcceleratorTotalMemoryMiB'
        BurstablePerformance:
          description: |-
            Indicates whether burstable performance T instance types are included, excluded, or required. For more information, see [Burstable performance instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html).
              +  To include burstable performance instance types, specify ``included``.
              +  To require only burstable performance instance types, specify ``required``.
              +  To exclude burstable performance instance types, specify ``excluded``.
              
             Default: ``excluded``
          type: string
        MemoryMiB:
          description: The minimum and maximum amount of memory, in MiB.
          $ref: '#/components/schemas/MemoryMiB'
        TotalLocalStorageGB:
          description: |-
            The minimum and maximum amount of total local storage, in GB.
             Default: No minimum or maximum limits
          $ref: '#/components/schemas/TotalLocalStorageGB'
    AcceleratorTotalMemoryMiB:
      description: The minimum and maximum amount of total accelerator memory, in MiB.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum amount of accelerator memory, in MiB. To specify no minimum limit, omit this parameter.
          type: integer
        Max:
          description: The maximum amount of accelerator memory, in MiB. To specify no maximum limit, omit this parameter.
          type: integer
    CapacityReservationTarget:
      description: |-
        Specifies a target Capacity Reservation.
          ``CapacityReservationTarget`` is a property of the [Amazon EC2 LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html) property type.
      additionalProperties: false
      type: object
      properties:
        CapacityReservationResourceGroupArn:
          description: The ARN of the Capacity Reservation resource group in which to run the instance.
          type: string
        CapacityReservationId:
          description: The ID of the Capacity Reservation in which to run the instance.
          type: string
    CapacityReservationSpecification:
      description: |-
        Specifies an instance's Capacity Reservation targeting option. You can specify only one option at a time.
          ``CapacityReservationSpecification`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        CapacityReservationPreference:
          description: |-
            Indicates the instance's Capacity Reservation preferences. Possible preferences include:
              +   ``open`` - The instance can run in any ``open`` Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
              +   ``none`` - The instance avoids running in a Capacity Reservation even if one is available. The instance runs in On-Demand capacity.
          type: string
        CapacityReservationTarget:
          description: Information about the target Capacity Reservation or Capacity Reservation group.
          $ref: '#/components/schemas/CapacityReservationTarget'
    CreditSpecification:
      description: |-
        Specifies the credit option for CPU usage of a T2, T3, or T3a instance.
          ``CreditSpecification`` is a property of [AWS::EC2::LaunchTemplate LaunchTemplateData](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-launchtemplate-launchtemplatedata.html).
      additionalProperties: false
      type: object
      properties:
        CpuCredits:
          description: |-
            The credit option for CPU usage of a T instance.
             Valid values: ``standard`` | ``unlimited``
          type: string
    TotalLocalStorageGB:
      description: The minimum and maximum amount of total local storage, in GB.
      additionalProperties: false
      type: object
      properties:
        Min:
          description: The minimum amount of total local storage, in GB. To specify no minimum limit, omit this parameter.
          type: number
        Max:
          description: The maximum amount of total local storage, in GB. To specify no maximum limit, omit this parameter.
          type: number
    ConnectionTrackingSpecification:
      type: object
      additionalProperties: false
      properties:
        TcpEstablishedTimeout:
          type: integer
        UdpStreamTimeout:
          type: integer
        UdpTimeout:
          type: integer
    LaunchTemplate:
      type: object
      properties:
        LaunchTemplateName:
          description: A name for the launch template.
          type: string
        LaunchTemplateData:
          description: The information for the launch template.
          $ref: '#/components/schemas/LaunchTemplateData'
        VersionDescription:
          description: A description for the first version of the launch template.
          type: string
        TagSpecifications:
          uniqueItems: false
          description: |-
            The tags to apply to the launch template on creation. To tag the launch template, the resource type must be ``launch-template``.
             To specify the tags for the resources that are created when an instance is launched, you must use [TagSpecifications](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html#cfn-ec2-launchtemplate-tagspecifications).
          type: array
          items:
            $ref: '#/components/schemas/LaunchTemplateTagSpecification'
        LatestVersionNumber:
          description: ''
          type: string
        LaunchTemplateId:
          description: ''
          type: string
        DefaultVersionNumber:
          description: ''
          type: string
      required:
        - LaunchTemplateData
      x-stackql-resource-name: launch_template
      x-stackql-primaryIdentifier:
        - LaunchTemplateId
      x-create-only-properties:
        - LaunchTemplateName
      x-read-only-properties:
        - DefaultVersionNumber
        - LaunchTemplateId
        - LatestVersionNumber
      x-required-permissions:
        read:
          - ec2:DescribeLaunchTemplates
        create:
          - ec2:CreateLaunchTemplate
          - ec2:CreateTags
        update:
          - ec2:CreateLaunchTemplateVersion
        list:
          - ec2:DescribeLaunchTemplates
        delete:
          - ec2:DeleteLaunchTemplate
          - ec2:DeleteTags
          - ec2:DescribeLaunchTemplates
    LocalGatewayRoute:
      type: object
      properties:
        DestinationCidrBlock:
          description: The CIDR block used for destination matches.
          type: string
        LocalGatewayRouteTableId:
          description: The ID of the local gateway route table.
          type: string
        LocalGatewayVirtualInterfaceGroupId:
          description: The ID of the virtual interface group.
          type: string
        NetworkInterfaceId:
          description: The ID of the network interface.
          type: string
        State:
          description: The state of the route.
          type: string
        Type:
          description: The route type.
          type: string
      x-stackql-resource-name: local_gateway_route
      x-stackql-primaryIdentifier:
        - DestinationCidrBlock
        - LocalGatewayRouteTableId
      x-create-only-properties:
        - DestinationCidrBlock
        - LocalGatewayRouteTableId
      x-read-only-properties:
        - State
        - Type
      x-required-permissions:
        create:
          - ec2:CreateLocalGatewayRoute
          - ec2:SearchLocalGatewayRoutes
        read:
          - ec2:SearchLocalGatewayRoutes
        delete:
          - ec2:DeleteLocalGatewayRoute
          - ec2:SearchLocalGatewayRoutes
        list:
          - ec2:DescribeLocalGatewayRouteTables
          - ec2:SearchLocalGatewayRoutes
        update:
          - ec2:ModifyLocalGatewayRoute
          - ec2:SearchLocalGatewayRoutes
    LocalGatewayRouteTable:
      type: object
      properties:
        LocalGatewayRouteTableId:
          description: The ID of the local gateway route table.
          type: string
        LocalGatewayRouteTableArn:
          description: The ARN of the local gateway route table.
          type: string
        LocalGatewayId:
          description: The ID of the local gateway.
          type: string
        OutpostArn:
          description: The ARN of the outpost.
          type: string
        OwnerId:
          description: The owner of the local gateway route table.
          type: string
        State:
          description: The state of the local gateway route table.
          type: string
        Mode:
          description: The mode of the local gateway route table.
          type: string
        Tags:
          description: The tags for the local gateway route table.
          $ref: '#/components/schemas/Tags'
      required:
        - LocalGatewayId
      x-stackql-resource-name: local_gateway_route_table
      x-stackql-primaryIdentifier:
        - LocalGatewayRouteTableId
      x-create-only-properties:
        - LocalGatewayId
        - Mode
      x-read-only-properties:
        - LocalGatewayRouteTableId
        - LocalGatewayRouteTableArn
        - OutpostArn
        - OwnerId
        - State
      x-required-permissions:
        create:
          - ec2:CreateLocalGatewayRouteTable
          - ec2:DescribeLocalGatewayRouteTables
          - ec2:CreateTags
        read:
          - ec2:DescribeLocalGatewayRouteTables
        update:
          - ec2:DescribeLocalGatewayRouteTables
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteLocalGatewayRouteTable
          - ec2:DescribeLocalGatewayRouteTables
          - ec2:DeleteTags
        list:
          - ec2:DescribeLocalGatewayRouteTables
    LocalGatewayRouteTableVirtualInterfaceGroupAssociation:
      type: object
      properties:
        LocalGatewayRouteTableVirtualInterfaceGroupAssociationId:
          description: The ID of the local gateway route table virtual interface group association.
          type: string
        LocalGatewayId:
          description: The ID of the local gateway.
          type: string
        LocalGatewayRouteTableId:
          description: The ID of the local gateway route table.
          type: string
        LocalGatewayRouteTableArn:
          description: The ARN of the local gateway route table.
          type: string
        LocalGatewayVirtualInterfaceGroupId:
          description: The ID of the local gateway route table virtual interface group.
          type: string
        OwnerId:
          description: The owner of the local gateway route table virtual interface group association.
          type: string
        State:
          description: The state of the local gateway route table virtual interface group association.
          type: string
        Tags:
          description: The tags for the local gateway route table virtual interface group association.
          $ref: '#/components/schemas/Tags'
      required:
        - LocalGatewayRouteTableId
        - LocalGatewayVirtualInterfaceGroupId
      x-stackql-resource-name: local_gateway_route_table_virtual_interface_group_association
      x-stackql-primaryIdentifier:
        - LocalGatewayRouteTableVirtualInterfaceGroupAssociationId
      x-create-only-properties:
        - LocalGatewayRouteTableId
        - LocalGatewayVirtualInterfaceGroupId
      x-read-only-properties:
        - LocalGatewayRouteTableVirtualInterfaceGroupAssociationId
        - LocalGatewayId
        - LocalGatewayRouteTableArn
        - OwnerId
        - State
      x-required-permissions:
        create:
          - ec2:CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation
          - ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
          - ec2:CreateTags
        read:
          - ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
        update:
          - ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation
          - ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
          - ec2:DeleteTags
        list:
          - ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations
    LocalGatewayRouteTableVPCAssociation:
      type: object
      properties:
        LocalGatewayId:
          description: The ID of the local gateway.
          type: string
        LocalGatewayRouteTableId:
          description: The ID of the local gateway route table.
          type: string
        LocalGatewayRouteTableVpcAssociationId:
          description: The ID of the association.
          type: string
        State:
          description: The state of the association.
          type: string
        VpcId:
          description: The ID of the VPC.
          type: string
        Tags:
          description: The tags for the association.
          $ref: '#/components/schemas/Tags'
      required:
        - LocalGatewayRouteTableId
        - VpcId
      x-stackql-resource-name: local_gateway_route_tablevpc_association
      x-stackql-primaryIdentifier:
        - LocalGatewayRouteTableVpcAssociationId
      x-create-only-properties:
        - LocalGatewayRouteTableId
        - VpcId
      x-read-only-properties:
        - LocalGatewayId
        - LocalGatewayRouteTableVpcAssociationId
        - State
      x-required-permissions:
        create:
          - ec2:CreateLocalGatewayRouteTableVpcAssociation
          - ec2:DescribeLocalGatewayRouteTableVpcAssociations
          - ec2:CreateTags
        read:
          - ec2:DescribeLocalGatewayRouteTableVpcAssociations
        update:
          - ec2:DescribeLocalGatewayRouteTableVpcAssociations
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteLocalGatewayRouteTableVpcAssociation
          - ec2:DescribeLocalGatewayRouteTableVpcAssociations
          - ec2:DeleteTags
        list:
          - ec2:DescribeLocalGatewayRouteTableVpcAssociations
    NatGateway:
      type: object
      properties:
        SubnetId:
          type: string
          description: The ID of the subnet in which the NAT gateway is located.
        NatGatewayId:
          type: string
          description: ''
        ConnectivityType:
          type: string
          description: Indicates whether the NAT gateway supports public or private connectivity. The default is public connectivity.
        PrivateIpAddress:
          type: string
          description: The private IPv4 address to assign to the NAT gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
          description: The tags for the NAT gateway.
        AllocationId:
          type: string
          description: '[Public NAT gateway only] The allocation ID of the Elastic IP address that''s associated with the NAT gateway. This property is required for a public NAT gateway and cannot be specified with a private NAT gateway.'
        SecondaryAllocationIds:
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
          description: Secondary EIP allocation IDs. For more information, see [Create a NAT gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon VPC User Guide*.
        SecondaryPrivateIpAddresses:
          type: array
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
          description: |-
            Secondary private IPv4 addresses. For more information about secondary addresses, see [Create a NAT gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon Virtual Private Cloud User Guide*.
             ``SecondaryPrivateIpAddressCount`` and ``SecondaryPrivateIpAddresses`` cannot be set at the same time.
        SecondaryPrivateIpAddressCount:
          type: integer
          minimum: 1
          description: |-
            [Private NAT gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT gateway. For more information about secondary addresses, see [Create a NAT gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-creating) in the *Amazon Virtual Private Cloud User Guide*.
             ``SecondaryPrivateIpAddressCount`` and ``SecondaryPrivateIpAddresses`` cannot be set at the same time.
        MaxDrainDurationSeconds:
          type: integer
          description: The maximum amount of time to wait (in seconds) before forcibly releasing the IP addresses if connections are still in progress. Default value is 350 seconds.
      required:
        - SubnetId
      x-stackql-resource-name: nat_gateway
      x-stackql-primaryIdentifier:
        - NatGatewayId
      x-create-only-properties:
        - SubnetId
        - ConnectivityType
        - AllocationId
        - PrivateIpAddress
      x-read-only-properties:
        - NatGatewayId
      x-required-permissions:
        create:
          - ec2:CreateNatGateway
          - ec2:DescribeNatGateways
          - ec2:CreateTags
        delete:
          - ec2:DeleteNatGateway
          - ec2:DescribeNatGateways
        list:
          - ec2:DescribeNatGateways
        read:
          - ec2:DescribeNatGateways
        update:
          - ec2:DescribeNatGateways
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:AssociateNatGatewayAddress
          - ec2:DisassociateNatGatewayAddress
          - ec2:AssignPrivateNatGatewayAddress
          - ec2:UnassignPrivateNatGatewayAddress
    NetworkAcl:
      type: object
      properties:
        Id:
          type: string
        Tags:
          description: The tags to assign to the network ACL.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        VpcId:
          description: The ID of the VPC.
          type: string
      required:
        - VpcId
      x-stackql-resource-name: network_acl
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - VpcId
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - ec2:CreateNetworkAcl
          - ec2:DescribeNetworkAcls
          - ec2:CreateTags
        read:
          - ec2:DescribeNetworkAcls
          - ec2:DescribeTags
        update:
          - ec2:DescribeNetworkAcls
          - ec2:DeleteTags
          - ec2:CreateTags
        delete:
          - ec2:DeleteTags
          - ec2:DeleteNetworkAcl
          - ec2:DescribeNetworkAcls
        list:
          - ec2:DescribeNetworkAcls
    PortRange:
      additionalProperties: false
      type: object
      properties:
        From:
          type: integer
        To:
          type: integer
    Icmp:
      type: object
      additionalProperties: false
      properties:
        Code:
          type: integer
        Type:
          type: integer
    NetworkAclEntry:
      type: object
      properties:
        Id:
          type: string
        PortRange:
          description: The IPv4 network range to allow or deny, in CIDR notation (for example 172.16.0.0/24). We modify the specified CIDR block to its canonical form; for example, if you specify 100.68.0.18/18, we modify it to 100.68.0.0/18
          $ref: '#/components/schemas/PortRange'
        NetworkAclId:
          description: The ID of the network ACL
          type: string
        RuleAction:
          description: Indicates whether to allow or deny the traffic that matches the rule
          type: string
        CidrBlock:
          description: 'The IPv4 CIDR range to allow or deny, in CIDR notation (for example, 172.16.0.0/24). Requirement is conditional: You must specify the CidrBlock or Ipv6CidrBlock property'
          type: string
        Egress:
          description: Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet)
          type: boolean
        RuleNumber:
          description: Rule number to assign to the entry, such as 100. ACL entries are processed in ascending order by rule number. Entries can't use the same rule number unless one is an egress rule and the other is an ingress rule
          type: integer
        Ipv6CidrBlock:
          description: The IPv6 network range to allow or deny, in CIDR notation (for example 2001:db8:1234:1a00::/64)
          type: string
        Protocol:
          description: >-
            The protocol number. A value of "-1" means all protocols. If you specify "-1" or a protocol number other than "6" (TCP), "17" (UDP), or "1" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol "58" (ICMPv6) and specify an IPv6 CIDR block, you must specify an
            ICMP type and code
          type: integer
        Icmp:
          description: 'The Internet Control Message Protocol (ICMP) code and type. Requirement is conditional: Required if specifying 1 (ICMP) for the protocol parameter'
          $ref: '#/components/schemas/Icmp'
      required:
        - NetworkAclId
        - RuleAction
        - RuleNumber
        - Protocol
      x-stackql-resource-name: network_acl_entry
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Egress
        - RuleNumber
        - NetworkAclId
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - ec2:CreateNetworkAclEntry
          - ec2:DescribeNetworkAcls
        update:
          - ec2:ReplaceNetworkAclEntry
          - ec2:DescribeNetworkAcls
        delete:
          - ec2:DeleteNetworkAclEntry
          - ec2:DescribeNetworkAcls
    AccessScopePathRequest:
      type: object
      additionalProperties: false
      properties:
        Source:
          $ref: '#/components/schemas/PathStatementRequest'
        Destination:
          $ref: '#/components/schemas/PathStatementRequest'
        ThroughResources:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/ThroughResourcesStatementRequest'
    PathStatementRequest:
      type: object
      additionalProperties: false
      properties:
        PacketHeaderStatement:
          $ref: '#/components/schemas/PacketHeaderStatementRequest'
        ResourceStatement:
          $ref: '#/components/schemas/ResourceStatementRequest'
    PacketHeaderStatementRequest:
      type: object
      additionalProperties: false
      properties:
        SourceAddresses:
          type: array
          x-insertionOrder: true
          items:
            type: string
        DestinationAddresses:
          type: array
          x-insertionOrder: true
          items:
            type: string
        SourcePorts:
          type: array
          x-insertionOrder: true
          items:
            type: string
        DestinationPorts:
          type: array
          x-insertionOrder: true
          items:
            type: string
        SourcePrefixLists:
          type: array
          x-insertionOrder: true
          items:
            type: string
        DestinationPrefixLists:
          type: array
          x-insertionOrder: true
          items:
            type: string
        Protocols:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Protocol'
    Protocol:
      type: string
      enum:
        - tcp
        - udp
    ResourceStatementRequest:
      type: object
      additionalProperties: false
      properties:
        Resources:
          type: array
          x-insertionOrder: true
          items:
            type: string
        ResourceTypes:
          type: array
          x-insertionOrder: true
          items:
            type: string
    ThroughResourcesStatementRequest:
      type: object
      additionalProperties: false
      properties:
        ResourceStatement:
          $ref: '#/components/schemas/ResourceStatementRequest'
    NetworkInsightsAccessScope:
      type: object
      properties:
        NetworkInsightsAccessScopeId:
          type: string
        NetworkInsightsAccessScopeArn:
          type: string
        CreatedDate:
          type: string
        UpdatedDate:
          type: string
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        MatchPaths:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/AccessScopePathRequest'
        ExcludePaths:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/AccessScopePathRequest'
      x-stackql-resource-name: network_insights_access_scope
      x-stackql-primaryIdentifier:
        - NetworkInsightsAccessScopeId
      x-create-only-properties:
        - MatchPaths
        - ExcludePaths
      x-read-only-properties:
        - NetworkInsightsAccessScopeId
        - NetworkInsightsAccessScopeArn
        - CreatedDate
        - UpdatedDate
      x-required-permissions:
        create:
          - ec2:CreateNetworkInsightsAccessScope
          - ec2:CreateTags
          - tiros:CreateQuery
        read:
          - ec2:DescribeNetworkInsightsAccessScopes
          - ec2:GetNetworkInsightsAccessScopeContent
        update:
          - ec2:DescribeNetworkInsightsAccessScopes
          - ec2:GetNetworkInsightsAccessScopeContent
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteNetworkInsightsAccessScope
          - ec2:DeleteTags
        list:
          - ec2:DescribeNetworkInsightsAccessScopes
    NetworkInsightsAccessScopeAnalysis:
      type: object
      properties:
        NetworkInsightsAccessScopeAnalysisId:
          type: string
        NetworkInsightsAccessScopeAnalysisArn:
          type: string
        NetworkInsightsAccessScopeId:
          type: string
        Status:
          type: string
          enum:
            - running
            - failed
            - succeeded
        StatusMessage:
          type: string
        StartDate:
          type: string
        EndDate:
          type: string
        FindingsFound:
          type: string
          enum:
            - 'true'
            - 'false'
            - unknown
        AnalyzedEniCount:
          type: integer
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - NetworkInsightsAccessScopeId
      x-stackql-resource-name: network_insights_access_scope_analysis
      x-stackql-primaryIdentifier:
        - NetworkInsightsAccessScopeAnalysisId
      x-create-only-properties:
        - NetworkInsightsAccessScopeId
      x-read-only-properties:
        - NetworkInsightsAccessScopeAnalysisId
        - NetworkInsightsAccessScopeAnalysisArn
        - Status
        - StatusMessage
        - StartDate
        - EndDate
        - FindingsFound
        - AnalyzedEniCount
      x-required-permissions:
        create:
          - ec2:CreateTags
          - ec2:StartNetworkInsightsAccessScopeAnalysis
          - ec2:GetTransitGatewayRouteTablePropagations
          - ec2:Describe*
          - elasticloadbalancing:Describe*
          - directconnect:Describe*
          - tiros:CreateQuery
          - tiros:GetQueryAnswer
          - tiros:GetQueryExplanation
        read:
          - ec2:DescribeNetworkInsightsAccessScopeAnalyses
        update:
          - ec2:DescribeNetworkInsightsAccessScopeAnalyses
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteNetworkInsightsAccessScopeAnalysis
          - ec2:DeleteTags
        list:
          - ec2:DescribeNetworkInsightsAccessScopeAnalyses
    PathComponent:
      additionalProperties: false
      type: object
      properties:
        AdditionalDetails:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/AdditionalDetail'
        InboundHeader:
          $ref: '#/components/schemas/AnalysisPacketHeader'
        Vpc:
          $ref: '#/components/schemas/AnalysisComponent'
        DestinationVpc:
          $ref: '#/components/schemas/AnalysisComponent'
        SecurityGroupRule:
          $ref: '#/components/schemas/AnalysisSecurityGroupRule'
        TransitGateway:
          $ref: '#/components/schemas/AnalysisComponent'
        ElasticLoadBalancerListener:
          $ref: '#/components/schemas/AnalysisComponent'
        Explanations:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/Explanation'
        ServiceName:
          type: string
        SequenceNumber:
          type: integer
        SourceVpc:
          $ref: '#/components/schemas/AnalysisComponent'
        OutboundHeader:
          $ref: '#/components/schemas/AnalysisPacketHeader'
        AclRule:
          $ref: '#/components/schemas/AnalysisAclRule'
        TransitGatewayRouteTableRoute:
          $ref: '#/components/schemas/TransitGatewayRouteTableRoute'
        Component:
          $ref: '#/components/schemas/AnalysisComponent'
        Subnet:
          $ref: '#/components/schemas/AnalysisComponent'
        RouteTableRoute:
          $ref: '#/components/schemas/AnalysisRouteTableRoute'
    AnalysisLoadBalancerListener:
      additionalProperties: false
      type: object
      properties:
        InstancePort:
          $ref: '#/components/schemas/Port'
        LoadBalancerPort:
          $ref: '#/components/schemas/Port'
    AnalysisLoadBalancerTarget:
      additionalProperties: false
      type: object
      properties:
        Address:
          $ref: '#/components/schemas/IpAddress'
        Instance:
          $ref: '#/components/schemas/AnalysisComponent'
        Port:
          $ref: '#/components/schemas/Port'
        AvailabilityZone:
          type: string
    Explanation:
      additionalProperties: false
      type: object
      properties:
        VpnGateway:
          $ref: '#/components/schemas/AnalysisComponent'
        PacketField:
          type: string
        TransitGatewayAttachment:
          $ref: '#/components/schemas/AnalysisComponent'
        Protocols:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/Protocol'
        IngressRouteTable:
          $ref: '#/components/schemas/AnalysisComponent'
        ClassicLoadBalancerListener:
          $ref: '#/components/schemas/AnalysisLoadBalancerListener'
        VpcPeeringConnection:
          $ref: '#/components/schemas/AnalysisComponent'
        Address:
          $ref: '#/components/schemas/IpAddress'
        Port:
          $ref: '#/components/schemas/Port'
        Addresses:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/IpAddress'
        ElasticLoadBalancerListener:
          $ref: '#/components/schemas/AnalysisComponent'
        TransitGatewayRouteTable:
          $ref: '#/components/schemas/AnalysisComponent'
        ExplanationCode:
          type: string
        InternetGateway:
          $ref: '#/components/schemas/AnalysisComponent'
        SourceVpc:
          $ref: '#/components/schemas/AnalysisComponent'
        AttachedTo:
          $ref: '#/components/schemas/AnalysisComponent'
        PrefixList:
          $ref: '#/components/schemas/AnalysisComponent'
        TransitGatewayRouteTableRoute:
          $ref: '#/components/schemas/TransitGatewayRouteTableRoute'
        ComponentRegion:
          type: string
        LoadBalancerTargetGroup:
          $ref: '#/components/schemas/AnalysisComponent'
        NetworkInterface:
          $ref: '#/components/schemas/AnalysisComponent'
        CustomerGateway:
          $ref: '#/components/schemas/AnalysisComponent'
        DestinationVpc:
          $ref: '#/components/schemas/AnalysisComponent'
        SecurityGroup:
          $ref: '#/components/schemas/AnalysisComponent'
        TransitGateway:
          $ref: '#/components/schemas/AnalysisComponent'
        RouteTable:
          $ref: '#/components/schemas/AnalysisComponent'
        State:
          type: string
        LoadBalancerListenerPort:
          $ref: '#/components/schemas/Port'
        vpcEndpoint:
          $ref: '#/components/schemas/AnalysisComponent'
        Subnet:
          $ref: '#/components/schemas/AnalysisComponent'
        Cidrs:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            type: string
        Destination:
          $ref: '#/components/schemas/AnalysisComponent'
        SecurityGroups:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/AnalysisComponent'
        ComponentAccount:
          type: string
        VpnConnection:
          $ref: '#/components/schemas/AnalysisComponent'
        Vpc:
          $ref: '#/components/schemas/AnalysisComponent'
        NatGateway:
          $ref: '#/components/schemas/AnalysisComponent'
        Direction:
          type: string
        LoadBalancerTargetPort:
          $ref: '#/components/schemas/Port'
        LoadBalancerTarget:
          $ref: '#/components/schemas/AnalysisLoadBalancerTarget'
        LoadBalancerTargetGroups:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/AnalysisComponent'
        Component:
          $ref: '#/components/schemas/AnalysisComponent'
        MissingComponent:
          type: string
        RouteTableRoute:
          $ref: '#/components/schemas/AnalysisRouteTableRoute'
        AvailabilityZones:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            type: string
        PortRanges:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/PortRange'
        Acl:
          $ref: '#/components/schemas/AnalysisComponent'
        SecurityGroupRule:
          $ref: '#/components/schemas/AnalysisSecurityGroupRule'
        SubnetRouteTable:
          $ref: '#/components/schemas/AnalysisComponent'
        LoadBalancerArn:
          $ref: '#/components/schemas/ResourceArn'
        AclRule:
          $ref: '#/components/schemas/AnalysisAclRule'
    Port:
      type: integer
    AnalysisPacketHeader:
      additionalProperties: false
      type: object
      properties:
        DestinationPortRanges:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/PortRange'
        SourcePortRanges:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/PortRange'
        DestinationAddresses:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/IpAddress'
        Protocol:
          $ref: '#/components/schemas/Protocol'
        SourceAddresses:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/IpAddress'
    AdditionalDetail:
      additionalProperties: false
      type: object
      properties:
        ServiceName:
          type: string
        AdditionalDetailType:
          type: string
        LoadBalancers:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/AnalysisComponent'
        Component:
          $ref: '#/components/schemas/AnalysisComponent'
    AlternatePathHint:
      additionalProperties: false
      type: object
      properties:
        ComponentArn:
          type: string
        ComponentId:
          type: string
    TransitGatewayRouteTableRoute:
      additionalProperties: false
      type: object
      properties:
        PrefixListId:
          type: string
        ResourceId:
          type: string
        State:
          type: string
        ResourceType:
          type: string
        RouteOrigin:
          type: string
        DestinationCidr:
          type: string
        AttachmentId:
          type: string
    AnalysisSecurityGroupRule:
      additionalProperties: false
      type: object
      properties:
        PortRange:
          $ref: '#/components/schemas/PortRange'
        Cidr:
          type: string
        PrefixListId:
          type: string
        SecurityGroupId:
          type: string
        Protocol:
          $ref: '#/components/schemas/Protocol'
        Direction:
          type: string
    AnalysisComponent:
      additionalProperties: false
      type: object
      properties:
        Id:
          type: string
        Arn:
          type: string
    AnalysisAclRule:
      additionalProperties: false
      type: object
      properties:
        PortRange:
          $ref: '#/components/schemas/PortRange'
        Cidr:
          type: string
        RuleAction:
          type: string
        Egress:
          type: boolean
        RuleNumber:
          type: integer
        Protocol:
          $ref: '#/components/schemas/Protocol'
    AnalysisRouteTableRoute:
      additionalProperties: false
      type: object
      properties:
        Origin:
          type: string
        destinationPrefixListId:
          type: string
        destinationCidr:
          type: string
        NetworkInterfaceId:
          type: string
        TransitGatewayId:
          type: string
        VpcPeeringConnectionId:
          type: string
        instanceId:
          type: string
        State:
          type: string
        egressOnlyInternetGatewayId:
          type: string
        NatGatewayId:
          type: string
        gatewayId:
          type: string
    ResourceArn:
      type: string
    IpAddress:
      type: string
    NetworkInsightsAnalysis:
      type: object
      properties:
        Status:
          type: string
          enum:
            - running
            - failed
            - succeeded
        ReturnPathComponents:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/PathComponent'
        NetworkInsightsAnalysisId:
          type: string
        NetworkInsightsPathId:
          type: string
        NetworkPathFound:
          type: boolean
        SuggestedAccounts:
          uniqueItems: true
          x-insertionOrder: true
          type: array
          items:
            type: string
        FilterInArns:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/ResourceArn'
        NetworkInsightsAnalysisArn:
          type: string
        StatusMessage:
          type: string
        StartDate:
          type: string
        AlternatePathHints:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/AlternatePathHint'
        Explanations:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/Explanation'
        ForwardPathComponents:
          uniqueItems: false
          x-insertionOrder: true
          type: array
          items:
            $ref: '#/components/schemas/PathComponent'
        AdditionalAccounts:
          uniqueItems: true
          x-insertionOrder: true
          type: array
          items:
            type: string
        Tags:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - NetworkInsightsPathId
      x-stackql-resource-name: network_insights_analysis
      x-stackql-primaryIdentifier:
        - NetworkInsightsAnalysisId
      x-create-only-properties:
        - NetworkInsightsPathId
        - FilterInArns
      x-read-only-properties:
        - NetworkInsightsAnalysisId
        - NetworkInsightsAnalysisArn
        - StartDate
        - Status
        - StatusMessage
        - ErrorCode
        - ErrorMessage
        - NetworkPathFound
        - ForwardPathComponents
        - ReturnPathComponents
        - Explanations
        - AlternatePathHints
        - SuggestedAccounts
      x-required-permissions:
        read:
          - ec2:Describe*
        create:
          - ec2:CreateTags
          - ec2:StartNetworkInsightsAnalysis
          - ec2:GetTransitGatewayRouteTablePropagations
          - ec2:SearchTransitGatewayRoutes
          - ec2:Describe*
          - ec2:GetManagedPrefixListEntries
          - elasticloadbalancing:Describe*
          - directconnect:Describe*
          - tiros:CreateQuery
          - tiros:GetQueryAnswer
          - tiros:GetQueryExplanation
        update:
          - ec2:CreateTags
          - ec2:Describe*
          - ec2:DeleteTags
        list:
          - ec2:Describe*
        delete:
          - ec2:DeleteNetworkInsightsAnalysis
          - ec2:DeleteTags
    FilterPortRange:
      type: object
      additionalProperties: false
      properties:
        FromPort:
          type: integer
        ToPort:
          type: integer
    PathFilter:
      type: object
      additionalProperties: false
      properties:
        SourceAddress:
          $ref: '#/components/schemas/IpAddress'
        SourcePortRange:
          $ref: '#/components/schemas/FilterPortRange'
        DestinationAddress:
          $ref: '#/components/schemas/IpAddress'
        DestinationPortRange:
          $ref: '#/components/schemas/FilterPortRange'
    NetworkInsightsPath:
      type: object
      properties:
        NetworkInsightsPathId:
          type: string
        NetworkInsightsPathArn:
          type: string
        CreatedDate:
          type: string
        SourceIp:
          $ref: '#/components/schemas/IpAddress'
        FilterAtSource:
          $ref: '#/components/schemas/PathFilter'
        FilterAtDestination:
          $ref: '#/components/schemas/PathFilter'
        DestinationIp:
          $ref: '#/components/schemas/IpAddress'
        Source:
          type: string
        Destination:
          type: string
        SourceArn:
          type: string
        DestinationArn:
          type: string
        Protocol:
          $ref: '#/components/schemas/Protocol'
        DestinationPort:
          $ref: '#/components/schemas/Port'
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Protocol
        - Source
      x-stackql-resource-name: network_insights_path
      x-stackql-primaryIdentifier:
        - NetworkInsightsPathId
      x-create-only-properties:
        - SourceIp
        - DestinationIp
        - Source
        - Destination
        - Protocol
        - DestinationPort
        - FilterAtSource
        - FilterAtDestination
      x-read-only-properties:
        - NetworkInsightsPathId
        - NetworkInsightsPathArn
        - CreatedDate
        - SourceArn
        - DestinationArn
      x-required-permissions:
        create:
          - ec2:CreateNetworkInsightsPath
          - ec2:CreateTags
        delete:
          - ec2:DeleteNetworkInsightsPath
          - ec2:DeleteTags
        read:
          - ec2:DescribeNetworkInsightsPaths
        list:
          - ec2:DescribeNetworkInsightsPaths
        update:
          - ec2:DescribeNetworkInsightsPaths
          - ec2:CreateTags
          - ec2:DeleteTags
    PrivateIpAddressSpecification:
      type: object
      additionalProperties: false
      properties:
        Primary:
          type: boolean
        PrivateIpAddress:
          type: string
      required:
        - PrivateIpAddress
    InstanceIpv6Address:
      type: object
      additionalProperties: false
      properties:
        Ipv6Address:
          type: string
      required:
        - Ipv6Address
    NetworkInterfaceAttachment:
      type: object
      properties:
        AttachmentId:
          description: The ID of the network interface attachment.
          type: string
        DeleteOnTermination:
          description: Whether to delete the network interface when the instance terminates. By default, this value is set to true.
          type: boolean
          default: true
        DeviceIndex:
          description: The network interface's position in the attachment order. For example, the first attached network interface has a DeviceIndex of 0.
          type: string
        InstanceId:
          description: The ID of the instance to which you will attach the ENI.
          type: string
        NetworkInterfaceId:
          description: The ID of the ENI that you want to attach.
          type: string
        EnaSrdSpecification:
          $ref: '#/components/schemas/EnaSrdSpecification'
      required:
        - DeviceIndex
        - InstanceId
        - NetworkInterfaceId
      x-stackql-resource-name: network_interface_attachment
      x-stackql-primaryIdentifier:
        - AttachmentId
      x-create-only-properties:
        - DeviceIndex
        - InstanceId
        - NetworkInterfaceId
      x-read-only-properties:
        - AttachmentId
      x-required-permissions:
        create:
          - ec2:AttachNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:ModifyNetworkInterfaceAttribute
        read:
          - ec2:DescribeNetworkInterfaces
        list:
          - ec2:DescribeNetworkInterfaces
        update:
          - ec2:ModifyNetworkInterfaceAttribute
          - ec2:DescribeNetworkInterfaces
          - ec2:AttachNetworkInterface
          - ec2:DetachNetworkInterface
        delete:
          - ec2:DetachNetworkInterface
          - ec2:DescribeNetworkInterfaces
    NetworkPerformanceMetricSubscription:
      type: object
      properties:
        Source:
          description: The starting Region or Availability Zone for metric to subscribe to.
          type: string
        Destination:
          description: The target Region or Availability Zone for the metric to subscribe to.
          type: string
        Metric:
          description: The metric type to subscribe to.
          type: string
        Statistic:
          description: The statistic to subscribe to.
          type: string
      required:
        - Source
        - Destination
        - Metric
        - Statistic
      x-stackql-resource-name: network_performance_metric_subscription
      x-stackql-primaryIdentifier:
        - Source
        - Destination
        - Metric
        - Statistic
      x-create-only-properties:
        - Source
        - Destination
        - Metric
        - Statistic
      x-required-permissions:
        create:
          - ec2:DescribeAwsNetworkPerformanceMetricSubscriptions
          - ec2:EnableAwsNetworkPerformanceMetricSubscription
        read:
          - ec2:DescribeAwsNetworkPerformanceMetricSubscriptions
        delete:
          - ec2:DescribeAwsNetworkPerformanceMetricSubscriptions
          - ec2:DisableAwsNetworkPerformanceMetricSubscription
        list:
          - ec2:DescribeAwsNetworkPerformanceMetricSubscriptions
    PlacementGroup:
      type: object
      properties:
        Strategy:
          description: The placement strategy.
          type: string
        GroupName:
          description: The Group Name of Placement Group.
          type: string
        SpreadLevel:
          description: The Spread Level of Placement Group is an enum where it accepts either host or rack when strategy is spread
          type: string
        PartitionCount:
          description: The number of partitions. Valid only when **Strategy** is set to `partition`
          type: integer
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: placement_group
      x-stackql-primaryIdentifier:
        - GroupName
      x-create-only-properties:
        - Tags
        - Strategy
        - SpreadLevel
        - PartitionCount
      x-read-only-properties:
        - GroupName
      x-required-permissions:
        create:
          - ec2:CreatePlacementGroup
          - ec2:DescribePlacementGroups
          - ec2:CreateTags
        read:
          - ec2:DescribePlacementGroups
        delete:
          - ec2:DeletePlacementGroup
          - ec2:DescribePlacementGroups
        list:
          - ec2:DescribePlacementGroups
    Entry:
      type: object
      properties:
        Cidr:
          type: string
          minLength: 1
          maxLength: 46
        Description:
          type: string
          minLength: 0
          maxLength: 255
      required:
        - Cidr
      additionalProperties: false
    PrefixList:
      type: object
      properties:
        PrefixListName:
          description: Name of Prefix List.
          type: string
          minLength: 1
          maxLength: 255
        PrefixListId:
          description: Id of Prefix List.
          type: string
        OwnerId:
          description: Owner Id of Prefix List.
          type: string
        AddressFamily:
          description: Ip Version of Prefix List.
          type: string
          enum:
            - IPv4
            - IPv6
        MaxEntries:
          description: Max Entries of Prefix List.
          type: integer
          minimum: 1
        Version:
          description: Version of Prefix List.
          type: integer
        Tags:
          description: Tags for Prefix List
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        Entries:
          description: Entries of Prefix List.
          type: array
          items:
            $ref: '#/components/schemas/Entry'
        Arn:
          description: The Amazon Resource Name (ARN) of the Prefix List.
          type: string
      required:
        - PrefixListName
        - AddressFamily
      x-stackql-resource-name: prefix_list
      x-stackql-primaryIdentifier:
        - PrefixListId
      x-read-only-properties:
        - PrefixListId
        - OwnerId
        - Version
        - Arn
      x-required-permissions:
        create:
          - EC2:CreateManagedPrefixList
          - EC2:DescribeManagedPrefixLists
          - EC2:CreateTags
        read:
          - EC2:GetManagedPrefixListEntries
          - EC2:DescribeManagedPrefixLists
        update:
          - EC2:DescribeManagedPrefixLists
          - EC2:GetManagedPrefixListEntries
          - EC2:ModifyManagedPrefixList
          - EC2:CreateTags
          - EC2:DeleteTags
        delete:
          - EC2:DeleteManagedPrefixList
          - EC2:DescribeManagedPrefixLists
        list:
          - EC2:DescribeManagedPrefixLists
          - EC2:GetManagedPrefixListEntries
    Route:
      type: object
      properties:
        CarrierGatewayId:
          type: string
          description: The ID of the carrier gateway.
        CidrBlock:
          type: string
          description: The primary identifier of the resource generated by the service.
        CoreNetworkArn:
          type: string
          description: The Amazon Resource Name (ARN) of the core network.
        DestinationCidrBlock:
          type: string
          description: The IPv4 CIDR block used for the destination match.
        DestinationIpv6CidrBlock:
          type: string
          description: The IPv6 CIDR block used for the destination match.
        DestinationPrefixListId:
          type: string
          description: The ID of managed prefix list, it's a set of one or more CIDR blocks.
        EgressOnlyInternetGatewayId:
          type: string
          description: The ID of the egress-only internet gateway.
        GatewayId:
          type: string
          description: The ID of an internet gateway or virtual private gateway attached to your VPC.
        InstanceId:
          type: string
          description: The ID of a NAT instance in your VPC.
        LocalGatewayId:
          type: string
          description: The ID of the local gateway.
        NatGatewayId:
          type: string
          description: The ID of a NAT gateway.
        NetworkInterfaceId:
          type: string
          description: The ID of the network interface.
        RouteTableId:
          type: string
          description: The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to.
        TransitGatewayId:
          type: string
          description: The ID of a transit gateway.
        VpcEndpointId:
          type: string
          description: The ID of a VPC endpoint. Supported for Gateway Load Balancer endpoints only.
        VpcPeeringConnectionId:
          type: string
          description: The ID of a VPC peering connection.
      required:
        - RouteTableId
      x-stackql-resource-name: route
      x-stackql-primaryIdentifier:
        - RouteTableId
        - CidrBlock
      x-create-only-properties:
        - RouteTableId
        - DestinationCidrBlock
        - DestinationIpv6CidrBlock
        - DestinationPrefixListId
      x-read-only-properties:
        - CidrBlock
      x-required-permissions:
        create:
          - ec2:CreateRoute
          - ec2:DescribeRouteTables
          - ec2:DescribeNetworkInterfaces
        read:
          - ec2:DescribeRouteTables
        update:
          - ec2:ReplaceRoute
          - ec2:DescribeRouteTables
          - ec2:DescribeNetworkInterfaces
        delete:
          - ec2:DeleteRoute
          - ec2:DescribeRouteTables
        list:
          - ec2:DescribeRouteTables
    RouteTable:
      type: object
      properties:
        RouteTableId:
          description: ''
          type: string
        Tags:
          description: Any tags assigned to the route table.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        VpcId:
          description: The ID of the VPC.
          type: string
      required:
        - VpcId
      x-stackql-resource-name: route_table
      x-stackql-primaryIdentifier:
        - RouteTableId
      x-create-only-properties:
        - VpcId
      x-read-only-properties:
        - RouteTableId
      x-required-permissions:
        create:
          - ec2:CreateRouteTable
          - ec2:CreateTags
          - ec2:DescribeRouteTables
        read:
          - ec2:DescribeRouteTables
        update:
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeRouteTables
        delete:
          - ec2:DescribeRouteTables
          - ec2:DeleteRouteTable
        list:
          - ec2:DescribeRouteTables
    SecurityGroupEgress:
      type: object
      properties:
        CidrIp:
          description: |-
            The IPv4 address range, in CIDR format.
             You must specify a destination security group (``DestinationPrefixListId`` or ``DestinationSecurityGroupId``) or a CIDR range (``CidrIp`` or ``CidrIpv6``).
             For examples of rules that you can add to security groups for specific access scenarios, see [Security group rules for different use cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *User Guide*.
          type: string
        CidrIpv6:
          description: |-
            The IPv6 address range, in CIDR format.
             You must specify a destination security group (``DestinationPrefixListId`` or ``DestinationSecurityGroupId``) or a CIDR range (``CidrIp`` or ``CidrIpv6``).
             For examples of rules that you can add to security groups for specific access scenarios, see [Security group rules for different use cases](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/security-group-rules-reference.html) in the *User Guide*.
          type: string
        Description:
          description: |-
            The description of an egress (outbound) security group rule.
             Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
          type: string
        FromPort:
          description: If the protocol is TCP or UDP, this is the start of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP type or -1 (all ICMP types).
          type: integer
        ToPort:
          description: If the protocol is TCP or UDP, this is the end of the port range. If the protocol is ICMP or ICMPv6, this is the ICMP code or -1 (all ICMP codes). If the start port is -1 (all ICMP types), then the end port must be -1 (all ICMP codes).
          type: integer
        IpProtocol:
          description: |-
            The IP protocol name (``tcp``, ``udp``, ``icmp``, ``icmpv6``) or number (see [Protocol Numbers](https://docs.aws.amazon.com/http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)).
             Use ``-1`` to specify all protocols. When authorizing security group rules, specifying ``-1`` or a protocol number other than ``tcp``, ``udp``, ``icmp``, or ``icmpv6`` allows traffic on all ports, regardless of any port range you specify. For ``tcp``, ``udp``, and ``icmp``, you must specify a port range. For ``icmpv6``, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
          type: string
        DestinationSecurityGroupId:
          description: |-
            The ID of the security group.
             You must specify a destination security group (``DestinationPrefixListId`` or ``DestinationSecurityGroupId``) or a CIDR range (``CidrIp`` or ``CidrIpv6``).
          type: string
        Id:
          description: ''
          type: string
        DestinationPrefixListId:
          description: |-
            The prefix list IDs for an AWS service. This is the AWS service that you want to access through a VPC endpoint from instances associated with the security group.
             You must specify a destination security group (``DestinationPrefixListId`` or ``DestinationSecurityGroupId``) or a CIDR range (``CidrIp`` or ``CidrIpv6``).
          type: string
        GroupId:
          description: The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
          type: string
      required:
        - IpProtocol
        - GroupId
      x-stackql-resource-name: security_group_egress
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - IpProtocol
        - DestinationSecurityGroupId
        - ToPort
        - CidrIp
        - FromPort
        - GroupId
        - CidrIpv6
        - DestinationPrefixListId
      x-read-only-properties:
        - Id
      x-required-permissions:
        read:
          - ec2:DescribeSecurityGroupRules
        create:
          - ec2:AuthorizeSecurityGroupEgress
          - ec2:RevokeSecurityGroupEgress
          - ec2:DescribeSecurityGroupRules
        update:
          - ec2:UpdateSecurityGroupRuleDescriptionsEgress
        list:
          - ec2:DescribeSecurityGroupRules
        delete:
          - ec2:RevokeSecurityGroupEgress
          - ec2:DescribeSecurityGroupRules
    SecurityGroupIngress:
      type: object
      properties:
        Id:
          description: The Security Group Rule Id
          type: string
        CidrIp:
          description: The IPv4 ranges
          type: string
        CidrIpv6:
          description: '[VPC only] The IPv6 ranges'
          type: string
        Description:
          description: Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously
          type: string
        FromPort:
          description: |-
            The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.

            Use this for ICMP and any protocol that uses ports.
          type: integer
        GroupId:
          description: |-
            The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.

            You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
          type: string
        GroupName:
          description: The name of the security group.
          type: string
        IpProtocol:
          description: |-
            The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers).

            [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
          type: string
        SourcePrefixListId:
          description: |+
            [EC2-VPC only] The ID of a prefix list.

          type: string
        SourceSecurityGroupId:
          description: The ID of the security group. You must specify either the security group ID or the security group name. For security groups in a nondefault VPC, you must specify the security group ID.
          type: string
        SourceSecurityGroupName:
          description: |-
            [EC2-Classic, default VPC] The name of the source security group.

            You must specify the GroupName property or the GroupId property. For security groups that are in a VPC, you must use the GroupId property.
          type: string
        SourceSecurityGroupOwnerId:
          description: |-
            [nondefault VPC] The AWS account ID that owns the source security group. You can't specify this property with an IP address range.

            If you specify SourceSecurityGroupName or SourceSecurityGroupId and that security group is owned by a different account than the account creating the stack, you must specify the SourceSecurityGroupOwnerId; otherwise, this property is optional.
          type: string
        ToPort:
          description: |-
            The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes for the specified ICMP type. If you specify all ICMP/ICMPv6 types, you must specify all codes.

            Use this for ICMP and any protocol that uses ports.
          type: integer
      required:
        - IpProtocol
      x-stackql-resource-name: security_group_ingress
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - GroupName
        - IpProtocol
        - SourceSecurityGroupId
        - SourcePrefixListId
        - ToPort
        - CidrIp
        - SourceSecurityGroupName
        - SourceSecurityGroupOwnerId
        - FromPort
        - GroupId
        - CidrIpv6
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - ec2:DescribeSecurityGroupRules
          - ec2:AuthorizeSecurityGroupIngress
        update:
          - ec2:UpdateSecurityGroupRuleDescriptionsIngress
        delete:
          - ec2:DescribeSecurityGroupRules
          - ec2:RevokeSecurityGroupIngress
        read:
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSecurityGroupRules
        list:
          - ec2:DescribeSecurityGroupRules
    SnapshotBlockPublicAccess:
      type: object
      properties:
        State:
          type: string
          description: The state of EBS Snapshot Block Public Access.
          enum:
            - block-all-sharing
            - block-new-sharing
        AccountId:
          type: string
          description: The identifier for the specified AWS account.
      required:
        - State
      x-stackql-resource-name: snapshot_block_public_access
      x-stackql-primaryIdentifier:
        - AccountId
      x-read-only-properties:
        - AccountId
      x-required-permissions:
        create:
          - ec2:EnableSnapshotBlockPublicAccess
          - ec2:GetSnapshotBlockPublicAccessState
        read:
          - ec2:GetSnapshotBlockPublicAccessState
        update:
          - ec2:EnableSnapshotBlockPublicAccess
          - ec2:GetSnapshotBlockPublicAccessState
        delete:
          - ec2:DisableSnapshotBlockPublicAccess
          - ec2:GetSnapshotBlockPublicAccessState
        list:
          - ec2:GetSnapshotBlockPublicAccessState
    SpotFleetRequestConfigData:
      type: object
      additionalProperties: false
      properties:
        AllocationStrategy:
          type: string
          enum:
            - capacityOptimized
            - capacityOptimizedPrioritized
            - diversified
            - lowestPrice
            - priceCapacityOptimized
        Context:
          type: string
        ExcessCapacityTerminationPolicy:
          type: string
          enum:
            - Default
            - NoTermination
            - default
            - noTermination
        IamFleetRole:
          type: string
        InstanceInterruptionBehavior:
          type: string
          enum:
            - hibernate
            - stop
            - terminate
        InstancePoolsToUseCount:
          type: integer
        LaunchSpecifications:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SpotFleetLaunchSpecification'
        LaunchTemplateConfigs:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/LaunchTemplateConfig'
        LoadBalancersConfig:
          $ref: '#/components/schemas/LoadBalancersConfig'
        OnDemandAllocationStrategy:
          type: string
        OnDemandMaxTotalPrice:
          type: string
        OnDemandTargetCapacity:
          type: integer
        ReplaceUnhealthyInstances:
          type: boolean
        SpotMaintenanceStrategies:
          $ref: '#/components/schemas/SpotMaintenanceStrategies'
        SpotMaxTotalPrice:
          type: string
        SpotPrice:
          type: string
        TargetCapacity:
          type: integer
        TerminateInstancesWithExpiration:
          type: boolean
        Type:
          type: string
          enum:
            - maintain
            - request
        ValidFrom:
          type: string
        ValidUntil:
          type: string
        TagSpecifications:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SpotFleetTagSpecification'
        TargetCapacityUnitType:
          type: string
          enum:
            - vcpu
            - memory-mib
            - units
      required:
        - IamFleetRole
        - TargetCapacity
    SpotFleetLaunchSpecification:
      type: object
      additionalProperties: false
      properties:
        BlockDeviceMappings:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/BlockDeviceMapping'
        EbsOptimized:
          type: boolean
          default: false
        IamInstanceProfile:
          $ref: '#/components/schemas/IamInstanceProfileSpecification'
        ImageId:
          type: string
        InstanceType:
          type: string
        KernelId:
          type: string
        KeyName:
          type: string
        Monitoring:
          $ref: '#/components/schemas/SpotFleetMonitoring'
        NetworkInterfaces:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/InstanceNetworkInterfaceSpecification'
        Placement:
          $ref: '#/components/schemas/SpotPlacement'
        RamdiskId:
          type: string
        SecurityGroups:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/GroupIdentifier'
        SpotPrice:
          type: string
        SubnetId:
          type: string
        TagSpecifications:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SpotFleetTagSpecification'
        UserData:
          type: string
        WeightedCapacity:
          type: number
        InstanceRequirements:
          $ref: '#/components/schemas/InstanceRequirementsRequest'
      required:
        - ImageId
    LoadBalancersConfig:
      type: object
      additionalProperties: false
      properties:
        ClassicLoadBalancersConfig:
          $ref: '#/components/schemas/ClassicLoadBalancersConfig'
        TargetGroupsConfig:
          $ref: '#/components/schemas/TargetGroupsConfig'
    SpotMaintenanceStrategies:
      type: object
      additionalProperties: false
      properties:
        CapacityRebalance:
          $ref: '#/components/schemas/SpotCapacityRebalance'
    SpotCapacityRebalance:
      type: object
      additionalProperties: false
      properties:
        ReplacementStrategy:
          type: string
          enum:
            - launch
            - launch-before-terminate
        TerminationDelay:
          type: integer
    LaunchTemplateConfig:
      type: object
      additionalProperties: false
      properties:
        LaunchTemplateSpecification:
          $ref: '#/components/schemas/FleetLaunchTemplateSpecification'
        Overrides:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/LaunchTemplateOverrides'
    SpotFleetTagSpecification:
      type: object
      additionalProperties: false
      properties:
        ResourceType:
          type: string
          enum:
            - client-vpn-endpoint
            - customer-gateway
            - dedicated-host
            - dhcp-options
            - egress-only-internet-gateway
            - elastic-gpu
            - elastic-ip
            - export-image-task
            - export-instance-task
            - fleet
            - fpga-image
            - host-reservation
            - image
            - import-image-task
            - import-snapshot-task
            - instance
            - internet-gateway
            - key-pair
            - launch-template
            - local-gateway-route-table-vpc-association
            - natgateway
            - network-acl
            - network-insights-analysis
            - network-insights-path
            - network-interface
            - placement-group
            - reserved-instances
            - route-table
            - security-group
            - snapshot
            - spot-fleet-request
            - spot-instances-request
            - subnet
            - traffic-mirror-filter
            - traffic-mirror-session
            - traffic-mirror-target
            - transit-gateway
            - transit-gateway-attachment
            - transit-gateway-connect-peer
            - transit-gateway-multicast-domain
            - transit-gateway-route-table
            - volume
            - vpc
            - vpc-flow-log
            - vpc-peering-connection
            - vpn-connection
            - vpn-gateway
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
    FleetLaunchTemplateSpecification:
      type: object
      additionalProperties: false
      properties:
        LaunchTemplateId:
          type: string
        LaunchTemplateName:
          type: string
          minLength: 3
          maxLength: 128
          pattern: '[a-zA-Z0-9\(\)\.\-/_]+'
        Version:
          type: string
      required:
        - Version
    GroupIdentifier:
      type: object
      additionalProperties: false
      properties:
        GroupId:
          type: string
      required:
        - GroupId
    IamInstanceProfileSpecification:
      type: object
      additionalProperties: false
      properties:
        Arn:
          type: string
    ClassicLoadBalancersConfig:
      type: object
      additionalProperties: false
      properties:
        ClassicLoadBalancers:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ClassicLoadBalancer'
      required:
        - ClassicLoadBalancers
    LaunchTemplateOverrides:
      type: object
      additionalProperties: false
      properties:
        AvailabilityZone:
          type: string
        InstanceType:
          type: string
        SpotPrice:
          type: string
        SubnetId:
          type: string
        WeightedCapacity:
          type: number
        InstanceRequirements:
          $ref: '#/components/schemas/InstanceRequirementsRequest'
        Priority:
          type: number
    SpotFleetMonitoring:
      type: object
      additionalProperties: false
      properties:
        Enabled:
          type: boolean
          default: false
    SpotPlacement:
      type: object
      additionalProperties: false
      properties:
        AvailabilityZone:
          type: string
        GroupName:
          type: string
        Tenancy:
          type: string
          enum:
            - dedicated
            - default
            - host
    InstanceNetworkInterfaceSpecification:
      type: object
      additionalProperties: false
      properties:
        AssociatePublicIpAddress:
          type: boolean
        DeleteOnTermination:
          type: boolean
        Description:
          type: string
        DeviceIndex:
          type: integer
        Groups:
          type: array
          uniqueItems: true
          items:
            type: string
        Ipv6AddressCount:
          type: integer
        Ipv6Addresses:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/InstanceIpv6Address'
        NetworkInterfaceId:
          type: string
        PrivateIpAddresses:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PrivateIpAddressSpecification'
        SecondaryPrivateIpAddressCount:
          type: integer
        SubnetId:
          type: string
    TargetGroupsConfig:
      type: object
      additionalProperties: false
      properties:
        TargetGroups:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/TargetGroup'
      required:
        - TargetGroups
    EbsBlockDevice:
      type: object
      additionalProperties: false
      properties:
        DeleteOnTermination:
          type: boolean
        Encrypted:
          type: boolean
        Iops:
          type: integer
        SnapshotId:
          type: string
        VolumeSize:
          type: integer
        VolumeType:
          type: string
          enum:
            - gp2
            - gp3
            - io1
            - io2
            - sc1
            - st1
            - standard
    TargetGroup:
      type: object
      additionalProperties: false
      properties:
        Arn:
          type: string
      required:
        - Arn
    ClassicLoadBalancer:
      type: object
      additionalProperties: false
      properties:
        Name:
          type: string
      required:
        - Name
    SpotFleet:
      type: object
      properties:
        Id:
          type: string
        SpotFleetRequestConfigData:
          $ref: '#/components/schemas/SpotFleetRequestConfigData'
      required:
        - SpotFleetRequestConfigData
      x-stackql-resource-name: spot_fleet
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - SpotFleetRequestConfigData/AllocationStrategy
        - SpotFleetRequestConfigData/IamFleetRole
        - SpotFleetRequestConfigData/InstanceInterruptionBehavior
        - SpotFleetRequestConfigData/InstancePoolsToUseCount
        - SpotFleetRequestConfigData/LaunchSpecifications
        - SpotFleetRequestConfigData/LaunchTemplateConfigs
        - SpotFleetRequestConfigData/LoadBalancersConfig
        - SpotFleetRequestConfigData/OnDemandAllocationStrategy
        - SpotFleetRequestConfigData/OnDemandMaxTotalPrice
        - SpotFleetRequestConfigData/OnDemandTargetCapacity
        - SpotFleetRequestConfigData/ReplaceUnhealthyInstances
        - SpotFleetRequestConfigData/SpotMaintenanceStrategies
        - SpotFleetRequestConfigData/SpotMaxTotalPrice
        - SpotFleetRequestConfigData/SpotPrice
        - SpotFleetRequestConfigData/TagSpecifications
        - SpotFleetRequestConfigData/TerminateInstancesWithExpiration
        - SpotFleetRequestConfigData/Type
        - SpotFleetRequestConfigData/ValidFrom
        - SpotFleetRequestConfigData/ValidUntil
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - iam:PassRole
          - ec2:CreateTags
          - ec2:RequestSpotFleet
          - ec2:DescribeSpotFleetRequests
          - ec2:RunInstances
        delete:
          - ec2:DescribeSpotFleetRequests
          - ec2:CancelSpotFleetRequests
        list:
          - ec2:DescribeSpotFleetRequests
        read:
          - ec2:DescribeSpotFleetRequests
        update:
          - ec2:ModifySpotFleetRequest
          - ec2:DescribeSpotFleetRequests
    Subnet:
      type: object
      properties:
        AssignIpv6AddressOnCreation:
          type: boolean
          description: |-
            Indicates whether a network interface created in this subnet receives an IPv6 address. The default value is ``false``.
             If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        VpcId:
          type: string
          description: |-
            The ID of the VPC the subnet is in.
             If you update this property, you must also update the ``CidrBlock`` property.
        MapPublicIpOnLaunch:
          type: boolean
          description: |-
            Indicates whether instances launched in this subnet receive a public IPv4 address. The default value is ``false``.
             AWS charges for all public IPv4 addresses, including public IPv4 addresses associated with running instances and Elastic IP addresses. For more information, see the *Public IPv4 Address* tab on the [VPC pricing page](https://docs.aws.amazon.com/vpc/pricing/).
        NetworkAclAssociationId:
          type: string
          description: ''
        AvailabilityZone:
          type: string
          description: |-
            The Availability Zone of the subnet.
             If you update this property, you must also update the ``CidrBlock`` property.
        AvailabilityZoneId:
          type: string
          description: The AZ ID of the subnet.
        CidrBlock:
          type: string
          description: |-
            The IPv4 CIDR block assigned to the subnet.
             If you update this property, we create a new subnet, and then delete the existing one.
        SubnetId:
          type: string
          description: ''
        Ipv6CidrBlocks:
          type: array
          uniqueItems: false
          items:
            type: string
          description: The IPv6 network ranges for the subnet, in CIDR notation.
        Ipv6CidrBlock:
          type: string
          description: |-
            The IPv6 CIDR block.
             If you specify ``AssignIpv6AddressOnCreation``, you must also specify an IPv6 CIDR block.
        OutpostArn:
          type: string
          description: The Amazon Resource Name (ARN) of the Outpost.
        Ipv6Native:
          type: boolean
          description: Indicates whether this is an IPv6 only subnet. For more information, see [Subnet basics](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#subnet-basics) in the *User Guide*.
        EnableDns64:
          type: boolean
          description: Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. For more information, see [DNS64 and NAT64](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html#nat-gateway-nat64-dns64) in the *User Guide*.
        PrivateDnsNameOptionsOnLaunch:
          type: object
          additionalProperties: false
          properties:
            HostnameType:
              type: string
            EnableResourceNameDnsARecord:
              type: boolean
            EnableResourceNameDnsAAAARecord:
              type: boolean
          description: |-
            The hostname type for EC2 instances launched into this subnet and how DNS A and AAAA record queries to the instances should be handled. For more information, see [Amazon EC2 instance hostname types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-naming.html) in the *User Guide*.
             Available options:
              + EnableResourceNameDnsAAAARecord (true | false)
             + EnableResourceNameDnsARecord (true | false)
             + HostnameType (ip-name | resource-name)
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
          description: Any tags assigned to the subnet.
        Ipv4IpamPoolId:
          type: string
          description: An IPv4 IPAM pool ID for the subnet.
        Ipv4NetmaskLength:
          type: integer
          description: An IPv4 netmask length for the subnet.
        Ipv6IpamPoolId:
          type: string
          description: An IPv6 IPAM pool ID for the subnet.
        Ipv6NetmaskLength:
          type: integer
          description: An IPv6 netmask length for the subnet.
      required:
        - VpcId
      x-stackql-resource-name: subnet
      x-stackql-primaryIdentifier:
        - SubnetId
      x-create-only-properties:
        - VpcId
        - AvailabilityZone
        - AvailabilityZoneId
        - CidrBlock
        - OutpostArn
        - Ipv6Native
        - Ipv4IpamPoolId
        - Ipv4NetmaskLength
        - Ipv6IpamPoolId
        - Ipv6NetmaskLength
      x-read-only-properties:
        - NetworkAclAssociationId
        - SubnetId
      x-required-permissions:
        create:
          - ec2:DescribeSubnets
          - ec2:CreateSubnet
          - ec2:CreateTags
          - ec2:ModifySubnetAttribute
        read:
          - ec2:DescribeSubnets
          - ec2:DescribeNetworkAcls
        update:
          - ec2:DescribeSubnets
          - ec2:ModifySubnetAttribute
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:AssociateSubnetCidrBlock
          - ec2:DisassociateSubnetCidrBlock
        delete:
          - ec2:DescribeSubnets
          - ec2:DeleteSubnet
        list:
          - ec2:DescribeSubnets
          - ec2:DescribeNetworkAcls
    SubnetCidrBlock:
      type: object
      properties:
        Id:
          description: Information about the IPv6 association.
          type: string
        Ipv6CidrBlock:
          description: The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length
          type: string
          maxLength: 42
        Ipv6IpamPoolId:
          description: The ID of an IPv6 Amazon VPC IP Address Manager (IPAM) pool from which to allocate, to get the subnet's CIDR
          type: string
        Ipv6NetmaskLength:
          description: The netmask length of the IPv6 CIDR to allocate to the subnet from an IPAM pool
          type: integer
          minimum: 0
          maximum: 128
        SubnetId:
          description: The ID of the subnet
          type: string
      required:
        - SubnetId
      x-stackql-resource-name: subnet_cidr_block
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - Ipv6CidrBlock
        - SubnetId
        - Ipv6IpamPoolId
        - Ipv6NetmaskLength
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - ec2:AssociateSubnetCidrBlock
          - ec2:DescribeSubnets
        delete:
          - ec2:DisassociateSubnetCidrBlock
          - ec2:DescribeSubnets
        list:
          - ec2:DescribeSubnets
        read:
          - ec2:DescribeSubnets
    SubnetNetworkAclAssociation:
      type: object
      properties:
        SubnetId:
          type: string
          description: The ID of the subnet
        NetworkAclId:
          type: string
          description: The ID of the network ACL
        AssociationId:
          type: string
      required:
        - NetworkAclId
        - SubnetId
      x-stackql-resource-name: subnet_network_acl_association
      x-stackql-primaryIdentifier:
        - AssociationId
      x-create-only-properties:
        - SubnetId
        - NetworkAclId
      x-read-only-properties:
        - AssociationId
      x-required-permissions:
        create:
          - ec2:DescribeNetworkAcls
          - ec2:ReplaceNetworkAclAssociation
        read:
          - ec2:DescribeNetworkAcls
        delete:
          - ec2:DescribeNetworkAcls
          - ec2:ReplaceNetworkAclAssociation
        list:
          - ec2:DescribeNetworkAcls
    SubnetRouteTableAssociation:
      type: object
      properties:
        Id:
          type: string
          description: ''
        RouteTableId:
          type: string
          description: |-
            The ID of the route table.
             The physical ID changes when the route table ID is changed.
        SubnetId:
          type: string
          description: The ID of the subnet.
      required:
        - RouteTableId
        - SubnetId
      x-stackql-resource-name: subnet_route_table_association
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - SubnetId
        - RouteTableId
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - ec2:AssociateRouteTable
          - ec2:ReplaceRouteTableAssociation
          - ec2:DescribeSubnets
          - ec2:DescribeRouteTables
        read:
          - ec2:DescribeRouteTables
        delete:
          - ec2:DisassociateRouteTable
          - ec2:DescribeSubnets
          - ec2:DescribeRouteTables
        list:
          - ec2:DescribeRouteTables
    TransitGateway:
      type: object
      properties:
        Description:
          type: string
        AssociationDefaultRouteTableId:
          type: string
        AutoAcceptSharedAttachments:
          type: string
        TransitGatewayArn:
          type: string
        DefaultRouteTablePropagation:
          type: string
        TransitGatewayCidrBlocks:
          type: array
          items:
            type: string
        PropagationDefaultRouteTableId:
          type: string
        DefaultRouteTableAssociation:
          type: string
        Id:
          type: string
        VpnEcmpSupport:
          type: string
        DnsSupport:
          type: string
        MulticastSupport:
          type: string
        AmazonSideAsn:
          format: int64
          type: integer
        Tags:
          uniqueItems: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: transit_gateway
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - AmazonSideAsn
        - MulticastSupport
      x-read-only-properties:
        - Id
        - TransitGatewayArn
      x-required-permissions:
        read:
          - ec2:CreateTransitGateway
          - ec2:CreateTags
          - ec2:DescribeTransitGateways
          - ec2:DescribeTags
          - ec2:DeleteTransitGateway
          - ec2:DeleteTags
          - ec2:ModifyTransitGateway
          - ec2:ModifyTransitGatewayOptions
        create:
          - ec2:CreateTransitGateway
          - ec2:CreateTags
          - ec2:DescribeTransitGateways
          - ec2:DescribeTags
          - ec2:DeleteTransitGateway
          - ec2:DeleteTags
          - ec2:ModifyTransitGateway
          - ec2:ModifyTransitGatewayOptions
        update:
          - ec2:CreateTransitGateway
          - ec2:CreateTags
          - ec2:DescribeTransitGateways
          - ec2:DescribeTags
          - ec2:DeleteTransitGateway
          - ec2:DeleteTags
          - ec2:ModifyTransitGateway
          - ec2:ModifyTransitGatewayOptions
        list:
          - ec2:CreateTransitGateway
          - ec2:CreateTags
          - ec2:DescribeTransitGateways
          - ec2:DescribeTags
          - ec2:DeleteTransitGateway
          - ec2:DeleteTags
          - ec2:ModifyTransitGateway
          - ec2:ModifyTransitGatewayOptions
        delete:
          - ec2:CreateTransitGateway
          - ec2:CreateTags
          - ec2:DescribeTransitGateways
          - ec2:DescribeTags
          - ec2:DeleteTransitGateway
          - ec2:DeleteTags
          - ec2:ModifyTransitGateway
          - ec2:ModifyTransitGatewayOptions
    TransitGatewayAttachment:
      type: object
      properties:
        Id:
          type: string
        TransitGatewayId:
          type: string
        VpcId:
          type: string
        SubnetIds:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            type: string
        Tags:
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Options:
          description: The options for the transit gateway vpc attachment.
          type: object
          properties:
            DnsSupport:
              description: 'Indicates whether to enable DNS Support for Vpc Attachment. Valid Values: enable | disable'
              type: string
            Ipv6Support:
              description: 'Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable'
              type: string
            ApplianceModeSupport:
              description: 'Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable'
              type: string
            SecurityGroupReferencingSupport:
              description: 'Indicates whether to enable Security Group referencing support for Vpc Attachment. Valid Values: enable | disable'
              type: string
          additionalProperties: false
      required:
        - VpcId
        - SubnetIds
        - TransitGatewayId
      x-stackql-resource-name: transit_gateway_attachment
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - TransitGatewayId
        - VpcId
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
          - ec2:DescribeTransitGatewayAttachments
          - ec2:ModifyTransitGatewayVpcAttachment
        read:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
          - ec2:DescribeTransitGatewayAttachments
          - ec2:ModifyTransitGatewayVpcAttachment
        delete:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
          - ec2:DescribeTransitGatewayAttachments
          - ec2:ModifyTransitGatewayVpcAttachment
        list:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:DescribeTags
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:DeleteTags
          - ec2:ModifyTransitGatewayVpcAttachment
        update:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:DescribeTags
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:DeleteTags
          - ec2:ModifyTransitGatewayVpcAttachment
    TransitGatewayConnectOptions:
      type: object
      properties:
        Protocol:
          description: The tunnel protocol.
          type: string
      additionalProperties: false
    TransitGatewayConnect:
      type: object
      properties:
        TransitGatewayAttachmentId:
          description: The ID of the Connect attachment.
          type: string
        TransportTransitGatewayAttachmentId:
          description: The ID of the attachment from which the Connect attachment was created.
          type: string
        TransitGatewayId:
          description: The ID of the transit gateway.
          type: string
        State:
          description: The state of the attachment.
          type: string
        CreationTime:
          description: The creation time.
          type: string
        Tags:
          description: The tags for the attachment.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        Options:
          $ref: '#/components/schemas/TransitGatewayConnectOptions'
          description: The Connect attachment options.
      required:
        - TransportTransitGatewayAttachmentId
        - Options
      x-stackql-resource-name: transit_gateway_connect
      x-stackql-primaryIdentifier:
        - TransitGatewayAttachmentId
      x-create-only-properties:
        - TransportTransitGatewayAttachmentId
        - Options
      x-read-only-properties:
        - TransitGatewayAttachmentId
        - State
        - CreationTime
        - TransitGatewayId
      x-required-permissions:
        create:
          - ec2:CreateTransitGatewayConnect
          - ec2:DescribeTransitGatewayConnects
          - ec2:CreateTags
        read:
          - ec2:DescribeTransitGatewayConnects
        update:
          - ec2:DescribeTransitGatewayConnects
          - ec2:DeleteTags
          - ec2:CreateTags
        delete:
          - ec2:DeleteTransitGatewayConnect
          - ec2:DescribeTransitGatewayConnects
          - ec2:DeleteTags
        list:
          - ec2:DescribeTransitGatewayConnects
    TransitGatewayMulticastDomain:
      type: object
      properties:
        TransitGatewayMulticastDomainId:
          description: The ID of the transit gateway multicast domain.
          type: string
        TransitGatewayMulticastDomainArn:
          description: The Amazon Resource Name (ARN) of the transit gateway multicast domain.
          type: string
        TransitGatewayId:
          description: The ID of the transit gateway.
          type: string
        State:
          description: The state of the transit gateway multicast domain.
          type: string
        CreationTime:
          description: The time the transit gateway multicast domain was created.
          type: string
          format: date-time
        Tags:
          description: The tags for the transit gateway multicast domain.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        Options:
          description: The options for the transit gateway multicast domain.
          type: object
          properties:
            AutoAcceptSharedAssociations:
              description: 'Indicates whether to automatically cross-account subnet associations that are associated with the transit gateway multicast domain. Valid Values: enable | disable'
              type: string
            Igmpv2Support:
              description: 'Indicates whether Internet Group Management Protocol (IGMP) version 2 is turned on for the transit gateway multicast domain. Valid Values: enable | disable'
              type: string
            StaticSourcesSupport:
              description: 'Indicates whether support for statically configuring transit gateway multicast group sources is turned on. Valid Values: enable | disable'
              type: string
          additionalProperties: false
      required:
        - TransitGatewayId
      x-stackql-resource-name: transit_gateway_multicast_domain
      x-stackql-primaryIdentifier:
        - TransitGatewayMulticastDomainId
      x-create-only-properties:
        - TransitGatewayId
      x-read-only-properties:
        - TransitGatewayMulticastDomainId
        - State
        - CreationTime
        - TransitGatewayMulticastDomainArn
      x-required-permissions:
        create:
          - ec2:DescribeTransitGatewayMulticastDomains
          - ec2:CreateTransitGatewayMulticastDomain
          - ec2:CreateTags
        read:
          - ec2:DescribeTransitGatewayMulticastDomains
        update:
          - ec2:DescribeTransitGatewayMulticastDomains
          - ec2:DeleteTags
          - ec2:CreateTags
        delete:
          - ec2:DescribeTransitGatewayMulticastDomains
          - ec2:DeleteTransitGatewayMulticastDomain
          - ec2:DeleteTags
        list:
          - ec2:DescribeTransitGatewayMulticastDomains
    TransitGatewayMulticastDomainAssociation:
      type: object
      properties:
        TransitGatewayMulticastDomainId:
          description: The ID of the transit gateway multicast domain.
          type: string
        TransitGatewayAttachmentId:
          description: The ID of the transit gateway attachment.
          type: string
        ResourceId:
          description: The ID of the resource.
          type: string
        ResourceType:
          description: The type of resource, for example a VPC attachment.
          type: string
        State:
          description: The state of the subnet association.
          type: string
        SubnetId:
          description: The IDs of the subnets to associate with the transit gateway multicast domain.
          type: string
      required:
        - TransitGatewayMulticastDomainId
        - TransitGatewayAttachmentId
        - SubnetId
      x-stackql-resource-name: transit_gateway_multicast_domain_association
      x-stackql-primaryIdentifier:
        - TransitGatewayMulticastDomainId
        - TransitGatewayAttachmentId
        - SubnetId
      x-create-only-properties:
        - TransitGatewayMulticastDomainId
        - TransitGatewayAttachmentId
        - SubnetId
      x-read-only-properties:
        - ResourceId
        - ResourceType
        - State
      x-required-permissions:
        create:
          - ec2:AssociateTransitGatewayMulticastDomain
          - ec2:GetTransitGatewayMulticastDomainAssociations
        read:
          - ec2:GetTransitGatewayMulticastDomainAssociations
        delete:
          - ec2:DisassociateTransitGatewayMulticastDomain
          - ec2:GetTransitGatewayMulticastDomainAssociations
        list:
          - ec2:GetTransitGatewayMulticastDomainAssociations
    TransitGatewayMulticastGroupMember:
      type: object
      properties:
        GroupIpAddress:
          description: The IP address assigned to the transit gateway multicast group.
          type: string
        TransitGatewayAttachmentId:
          description: The ID of the transit gateway attachment.
          type: string
        TransitGatewayMulticastDomainId:
          description: The ID of the transit gateway multicast domain.
          type: string
        SubnetId:
          description: The ID of the subnet.
          type: string
        ResourceId:
          description: The ID of the resource.
          type: string
        ResourceType:
          description: The type of resource, for example a VPC attachment.
          type: string
        NetworkInterfaceId:
          description: The ID of the transit gateway attachment.
          type: string
        GroupMember:
          description: Indicates that the resource is a transit gateway multicast group member.
          type: boolean
        GroupSource:
          description: Indicates that the resource is a transit gateway multicast group member.
          type: boolean
        MemberType:
          description: The member type (for example, static).
          type: string
        SourceType:
          description: The source type.
          type: string
      required:
        - GroupIpAddress
        - NetworkInterfaceId
        - TransitGatewayMulticastDomainId
      x-stackql-resource-name: transit_gateway_multicast_group_member
      x-stackql-primaryIdentifier:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      x-create-only-properties:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      x-read-only-properties:
        - SubnetId
        - ResourceId
        - ResourceType
        - GroupSource
        - GroupMember
        - MemberType
        - SourceType
        - TransitGatewayAttachmentId
      x-required-permissions:
        create:
          - ec2:RegisterTransitGatewayMulticastGroupMembers
          - ec2:SearchTransitGatewayMulticastGroups
        read:
          - ec2:SearchTransitGatewayMulticastGroups
        delete:
          - ec2:DeregisterTransitGatewayMulticastGroupMembers
          - ec2:SearchTransitGatewayMulticastGroups
        list:
          - ec2:SearchTransitGatewayMulticastGroups
    TransitGatewayMulticastGroupSource:
      type: object
      properties:
        GroupIpAddress:
          description: The IP address assigned to the transit gateway multicast group.
          type: string
        TransitGatewayAttachmentId:
          description: The ID of the transit gateway attachment.
          type: string
        TransitGatewayMulticastDomainId:
          description: The ID of the transit gateway multicast domain.
          type: string
        SubnetId:
          description: The ID of the subnet.
          type: string
        ResourceId:
          description: The ID of the resource.
          type: string
        ResourceType:
          description: The type of resource, for example a VPC attachment.
          type: string
        NetworkInterfaceId:
          description: The ID of the transit gateway attachment.
          type: string
        GroupMember:
          description: Indicates that the resource is a transit gateway multicast group member.
          type: boolean
        GroupSource:
          description: Indicates that the resource is a transit gateway multicast group member.
          type: boolean
        MemberType:
          description: The member type (for example, static).
          type: string
        SourceType:
          description: The source type.
          type: string
      required:
        - TransitGatewayMulticastDomainId
        - NetworkInterfaceId
        - GroupIpAddress
      x-stackql-resource-name: transit_gateway_multicast_group_source
      x-stackql-primaryIdentifier:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      x-create-only-properties:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      x-read-only-properties:
        - SubnetId
        - ResourceId
        - ResourceType
        - GroupSource
        - GroupMember
        - MemberType
        - SourceType
        - TransitGatewayAttachmentId
      x-required-permissions:
        create:
          - ec2:RegisterTransitGatewayMulticastGroupSources
          - ec2:SearchTransitGatewayMulticastGroups
        read:
          - ec2:SearchTransitGatewayMulticastGroups
        delete:
          - ec2:DeregisterTransitGatewayMulticastGroupSources
          - ec2:SearchTransitGatewayMulticastGroups
        list:
          - ec2:SearchTransitGatewayMulticastGroups
    PeeringAttachmentStatus:
      additionalProperties: false
      type: object
      properties:
        Message:
          description: The status message, if applicable.
          type: string
        Code:
          description: The status code.
          type: string
    TransitGatewayPeeringAttachment:
      type: object
      properties:
        Status:
          description: The status of the transit gateway peering attachment.
          $ref: '#/components/schemas/PeeringAttachmentStatus'
        TransitGatewayId:
          description: The ID of the transit gateway.
          type: string
        PeerTransitGatewayId:
          description: The ID of the peer transit gateway.
          type: string
        PeerAccountId:
          description: The ID of the peer account
          type: string
        State:
          description: The state of the transit gateway peering attachment. Note that the initiating state has been deprecated.
          type: string
        CreationTime:
          format: date-time
          description: The time the transit gateway peering attachment was created.
          type: string
        PeerRegion:
          description: Peer Region
          type: string
        Tags:
          description: The tags for the transit gateway peering attachment.
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        TransitGatewayAttachmentId:
          description: The ID of the transit gateway peering attachment.
          type: string
      required:
        - TransitGatewayId
        - PeerTransitGatewayId
        - PeerAccountId
        - PeerRegion
      x-stackql-resource-name: transit_gateway_peering_attachment
      x-stackql-primaryIdentifier:
        - TransitGatewayAttachmentId
      x-create-only-properties:
        - TransitGatewayId
        - PeerTransitGatewayId
        - PeerRegion
        - PeerAccountId
      x-read-only-properties:
        - TransitGatewayAttachmentId
        - Status
        - State
        - CreationTime
      x-required-permissions:
        read:
          - ec2:DescribeTransitGatewayPeeringAttachments
        create:
          - ec2:CreateTransitGatewayPeeringAttachment
          - ec2:DescribeTransitGatewayPeeringAttachments
        update:
          - ec2:DescribeTransitGatewayPeeringAttachments
        list:
          - ec2:DescribeTransitGatewayPeeringAttachments
        delete:
          - ec2:DeleteTransitGatewayPeeringAttachment
          - ec2:DescribeTransitGatewayPeeringAttachments
    TransitGatewayRouteTable:
      type: object
      properties:
        TransitGatewayRouteTableId:
          description: Transit Gateway Route Table primary identifier
          type: string
        TransitGatewayId:
          description: The ID of the transit gateway.
          type: string
        Tags:
          type: array
          description: Tags are composed of a Key/Value pair. You can use tags to categorize and track each parameter group. The tag value null is permitted.
          items:
            $ref: '#/components/schemas/Tag'
          x-insertionOrder: false
          uniqueItems: false
      required:
        - TransitGatewayId
      x-stackql-resource-name: transit_gateway_route_table
      x-stackql-primaryIdentifier:
        - TransitGatewayRouteTableId
      x-create-only-properties:
        - TransitGatewayId
        - Tags
      x-read-only-properties:
        - TransitGatewayRouteTableId
      x-required-permissions:
        create:
          - ec2:CreateTransitGatewayRouteTable
          - ec2:CreateTags
          - ec2:DescribeTransitGatewayRouteTables
        read:
          - ec2:DescribeTransitGatewayRouteTables
        delete:
          - ec2:DeleteTransitGatewayRouteTable
          - ec2:DescribeTransitGatewayRouteTables
          - ec2:GetTransitGatewayRouteTableAssociations
          - ec2:DisassociateTransitGatewayRouteTable
        list:
          - ec2:DescribeTransitGatewayRouteTables
    TransitGatewayVpcAttachment:
      type: object
      properties:
        Options:
          description: The options for the transit gateway vpc attachment.
          additionalProperties: false
          type: object
          properties:
            Ipv6Support:
              description: 'Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable'
              type: string
            ApplianceModeSupport:
              description: 'Indicates whether to enable Ipv6 Support for Vpc Attachment. Valid Values: enable | disable'
              type: string
            DnsSupport:
              description: 'Indicates whether to enable DNS Support for Vpc Attachment. Valid Values: enable | disable'
              type: string
        TransitGatewayId:
          type: string
        VpcId:
          type: string
        RemoveSubnetIds:
          uniqueItems: false
          x-insertionOrder: false
          type: array
          items:
            type: string
        Id:
          type: string
        SubnetIds:
          uniqueItems: false
          x-insertionOrder: false
          type: array
          items:
            type: string
        AddSubnetIds:
          uniqueItems: false
          x-insertionOrder: false
          type: array
          items:
            type: string
        Tags:
          uniqueItems: false
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - SubnetIds
        - VpcId
        - TransitGatewayId
      x-stackql-resource-name: transit_gateway_vpc_attachment
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - TransitGatewayId
        - SubnetIds
        - VpcId
      x-read-only-properties:
        - Id
      x-required-permissions:
        read:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
          - ec2:DescribeTransitGatewayAttachments
          - ec2:ModifyTransitGatewayVpcAttachment
        create:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
          - ec2:DescribeTransitGatewayAttachments
          - ec2:ModifyTransitGatewayVpcAttachment
        update:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:DescribeTags
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:DeleteTags
          - ec2:ModifyTransitGatewayVpcAttachment
        list:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:DescribeTags
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:DeleteTags
          - ec2:ModifyTransitGatewayVpcAttachment
        delete:
          - ec2:DescribeTransitGatewayAttachments
          - ec2:DescribeTransitGatewayVpcAttachments
          - ec2:CreateTransitGatewayVpcAttachment
          - ec2:DeleteTransitGatewayVpcAttachment
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeTags
          - ec2:DescribeTransitGatewayAttachments
          - ec2:ModifyTransitGatewayVpcAttachment
    NetworkInterfaceOptions:
      description: The options for network-interface type endpoint.
      type: object
      properties:
        NetworkInterfaceId:
          description: The ID of the network interface.
          type: string
        Port:
          description: The IP port number.
          type: integer
          minimum: 1
          maximum: 65535
        Protocol:
          description: The IP protocol.
          type: string
      additionalProperties: false
    LoadBalancerOptions:
      description: The load balancer details if creating the AWS Verified Access endpoint as load-balancertype.
      type: object
      properties:
        LoadBalancerArn:
          description: The ARN of the load balancer.
          type: string
        Port:
          description: The IP port number.
          type: integer
          minimum: 1
          maximum: 65535
        Protocol:
          description: The IP protocol.
          type: string
        SubnetIds:
          description: The IDs of the subnets.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SubnetId'
      additionalProperties: false
    SubnetId:
      description: The IDs of the subnet.
      type: string
    SseSpecification:
      description: The configuration options for customer provided KMS encryption.
      type: object
      properties:
        KmsKeyArn:
          description: KMS Key Arn used to encrypt the group policy
          type: string
        CustomerManagedKeyEnabled:
          description: Whether to encrypt the policy with the provided key or disable encryption
          type: boolean
      additionalProperties: false
    VerifiedAccessEndpoint:
      type: object
      properties:
        VerifiedAccessEndpointId:
          description: The ID of the AWS Verified Access endpoint.
          type: string
        VerifiedAccessGroupId:
          description: The ID of the AWS Verified Access group.
          type: string
        VerifiedAccessInstanceId:
          description: The ID of the AWS Verified Access instance.
          type: string
        Status:
          description: The endpoint status.
          type: string
        SecurityGroupIds:
          description: The IDs of the security groups for the endpoint.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SecurityGroupId'
        NetworkInterfaceOptions:
          description: The options for network-interface type endpoint.
          $ref: '#/components/schemas/NetworkInterfaceOptions'
        LoadBalancerOptions:
          description: The load balancer details if creating the AWS Verified Access endpoint as load-balancer type.
          $ref: '#/components/schemas/LoadBalancerOptions'
        EndpointType:
          description: The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.The type of AWS Verified Access endpoint. Incoming application requests will be sent to an IP address, load balancer or a network interface depending on the endpoint type specified.
          type: string
        EndpointDomain:
          description: A DNS name that is generated for the endpoint.
          type: string
        EndpointDomainPrefix:
          description: A custom identifier that gets prepended to a DNS name that is generated for the endpoint.
          type: string
        DeviceValidationDomain:
          description: Returned if endpoint has a device trust provider attached.
          type: string
        DomainCertificateArn:
          description: The ARN of a public TLS/SSL certificate imported into or created with ACM.
          type: string
        AttachmentType:
          description: The type of attachment used to provide connectivity between the AWS Verified Access endpoint and the application.
          type: string
        ApplicationDomain:
          description: The DNS name for users to reach your application.
          type: string
        CreationTime:
          description: The creation time.
          type: string
        LastUpdatedTime:
          description: The last updated time.
          type: string
        Description:
          description: A description for the AWS Verified Access endpoint.
          type: string
        PolicyDocument:
          description: The AWS Verified Access policy document.
          type: string
        PolicyEnabled:
          description: The status of the Verified Access policy.
          type: boolean
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        SseSpecification:
          description: The configuration options for customer provided KMS encryption.
          $ref: '#/components/schemas/SseSpecification'
      required:
        - ApplicationDomain
        - AttachmentType
        - DomainCertificateArn
        - EndpointType
        - VerifiedAccessGroupId
        - EndpointDomainPrefix
      x-stackql-resource-name: verified_access_endpoint
      x-stackql-primaryIdentifier:
        - VerifiedAccessEndpointId
      x-create-only-properties:
        - ApplicationDomain
        - AttachmentType
        - DomainCertificateArn
        - EndpointDomainPrefix
        - EndpointType
        - SecurityGroupIds
        - NetworkInterfaceOptions/NetworkInterfaceId
        - LoadBalancerOptions/LoadBalancerArn
      x-read-only-properties:
        - VerifiedAccessEndpointId
        - EndpointDomain
        - CreationTime
        - LastUpdatedTime
        - Status
        - DeviceValidationDomain
        - VerifiedAccessInstanceId
      x-required-permissions:
        create:
          - ec2:CreateVerifiedAccessEndpoint
          - ec2:DescribeVerifiedAccessEndpoints
          - ec2:CreateTags
          - ec2:DescribeTags
          - iam:CreateServiceLinkedRole
          - iam:ListRoles
          - acm:GetCertificateWithPK
          - acm:DescribeCertificate
          - acm:CreateCertificateRelation
          - sso:GetManagedApplicationInstance
          - sso:GetPeregrineStatus
          - sso:GetSharedSsoConfiguration
          - sso:CreateManagedApplicationInstance
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeAccountAttributes
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeListenerCertificates
          - acm:DeleteCertificateRelation
          - ec2:DeleteTags
          - ec2:DeleteVerifiedAccessEndpoint
          - ec2:GetVerifiedAccessEndpointPolicy
          - ec2:ModifyVerifiedAccessEndpoint
          - ec2:ModifyVerifiedAccessEndpointPolicy
          - sso:DeleteManagedApplicationInstance
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        read:
          - ec2:DescribeVerifiedAccessEndpoints
          - ec2:GetVerifiedAccessEndpointPolicy
          - ec2:DescribeTags
          - acm:CreateCertificateRelation
          - acm:DeleteCertificateRelation
          - acm:DescribeCertificate
          - acm:GetCertificateWithPK
          - ec2:CreateTags
          - ec2:CreateVerifiedAccessEndpoint
          - ec2:DeleteTags
          - ec2:DeleteVerifiedAccessEndpoint
          - ec2:DescribeAccountAttributes
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:ModifyVerifiedAccessEndpoint
          - ec2:ModifyVerifiedAccessEndpointPolicy
          - elasticloadbalancing:DescribeListenerCertificates
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeLoadBalancers
          - iam:CreateServiceLinkedRole
          - iam:ListRoles
          - sso:CreateManagedApplicationInstance
          - sso:DeleteManagedApplicationInstance
          - sso:GetManagedApplicationInstance
          - sso:GetPeregrineStatus
          - sso:GetSharedSsoConfiguration
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        update:
          - ec2:ModifyVerifiedAccessEndpoint
          - ec2:ModifyVerifiedAccessEndpointPolicy
          - ec2:DescribeVerifiedAccessEndpoints
          - ec2:GetVerifiedAccessEndpointPolicy
          - ec2:DescribeTags
          - ec2:DeleteTags
          - ec2:CreateTags
          - acm:GetCertificateWithPK
          - acm:DescribeCertificate
          - acm:CreateCertificateRelation
          - acm:DeleteCertificateRelation
          - sso:GetManagedApplicationInstance
          - sso:GetPeregrineStatus
          - sso:GetSharedSsoConfiguration
          - sso:CreateManagedApplicationInstance
          - sso:DeleteManagedApplicationInstance
          - ec2:DescribeSubnets
          - ec2:DescribeSecurityGroups
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeAccountAttributes
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeListenerCertificates
          - ec2:CreateVerifiedAccessEndpoint
          - ec2:DeleteVerifiedAccessEndpoint
          - iam:CreateServiceLinkedRole
          - iam:ListRoles
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        delete:
          - ec2:DescribeVerifiedAccessEndpoints
          - ec2:DescribeTags
          - ec2:DeleteVerifiedAccessEndpoint
          - ec2:DeleteTags
          - sso:DeleteManagedApplicationInstance
          - acm:DeleteCertificateRelation
          - acm:DescribeCertificate
          - acm:CreateCertificateRelation
          - acm:GetCertificateWithPK
          - ec2:CreateTags
          - ec2:CreateVerifiedAccessEndpoint
          - ec2:DescribeAccountAttributes
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:GetVerifiedAccessEndpointPolicy
          - ec2:ModifyVerifiedAccessEndpoint
          - ec2:ModifyVerifiedAccessEndpointPolicy
          - elasticloadbalancing:DescribeListenerCertificates
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeLoadBalancers
          - iam:CreateServiceLinkedRole
          - iam:ListRoles
          - sso:CreateManagedApplicationInstance
          - sso:GetManagedApplicationInstance
          - sso:GetPeregrineStatus
          - sso:GetSharedSsoConfiguration
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        list:
          - ec2:DescribeVerifiedAccessEndpoints
          - ec2:DescribeTags
          - acm:CreateCertificateRelation
          - acm:DeleteCertificateRelation
          - acm:DescribeCertificate
          - acm:GetCertificateWithPK
          - ec2:CreateTags
          - ec2:CreateVerifiedAccessEndpoint
          - ec2:DeleteTags
          - ec2:DeleteVerifiedAccessEndpoint
          - ec2:DescribeAccountAttributes
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:GetVerifiedAccessEndpointPolicy
          - ec2:ModifyVerifiedAccessEndpoint
          - ec2:ModifyVerifiedAccessEndpointPolicy
          - elasticloadbalancing:DescribeListenerCertificates
          - elasticloadbalancing:DescribeListeners
          - elasticloadbalancing:DescribeLoadBalancers
          - iam:CreateServiceLinkedRole
          - iam:ListRoles
          - sso:CreateManagedApplicationInstance
          - sso:DeleteManagedApplicationInstance
          - sso:GetManagedApplicationInstance
          - sso:GetPeregrineStatus
          - sso:GetSharedSsoConfiguration
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
    VerifiedAccessGroup:
      type: object
      properties:
        VerifiedAccessGroupId:
          description: The ID of the AWS Verified Access group.
          type: string
        VerifiedAccessInstanceId:
          description: The ID of the AWS Verified Access instance.
          type: string
        VerifiedAccessGroupArn:
          description: The ARN of the Verified Access group.
          type: string
        Owner:
          description: The AWS account number that owns the group.
          type: string
        CreationTime:
          description: Time this Verified Access Group was created.
          type: string
        LastUpdatedTime:
          description: Time this Verified Access Group was last updated.
          type: string
        Description:
          description: A description for the AWS Verified Access group.
          type: string
        PolicyDocument:
          description: The AWS Verified Access policy document.
          type: string
        PolicyEnabled:
          description: The status of the Verified Access policy.
          type: boolean
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        SseSpecification:
          description: The configuration options for customer provided KMS encryption.
          $ref: '#/components/schemas/SseSpecification'
      required:
        - VerifiedAccessInstanceId
      x-stackql-resource-name: verified_access_group
      x-stackql-primaryIdentifier:
        - VerifiedAccessGroupId
      x-read-only-properties:
        - VerifiedAccessGroupId
        - CreationTime
        - LastUpdatedTime
        - Owner
        - VerifiedAccessGroupArn
      x-required-permissions:
        create:
          - ec2:CreateVerifiedAccessGroup
          - ec2:DescribeVerifiedAccessGroups
          - ec2:GetVerifiedAccessGroupPolicy
          - ec2:CreateTags
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        read:
          - ec2:DescribeVerifiedAccessGroups
          - ec2:GetVerifiedAccessGroupPolicy
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        update:
          - ec2:ModifyVerifiedAccessGroup
          - ec2:ModifyVerifiedAccessGroupPolicy
          - ec2:DescribeVerifiedAccessGroups
          - ec2:GetVerifiedAccessGroupPolicy
          - ec2:DescribeTags
          - ec2:DeleteTags
          - ec2:CreateTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        delete:
          - ec2:DeleteVerifiedAccessGroup
          - ec2:DeleteTags
          - ec2:DescribeVerifiedAccessGroups
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        list:
          - ec2:DescribeVerifiedAccessGroups
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
    VerifiedAccessTrustProvider:
      type: object
      properties:
        TrustProviderType:
          description: 'Type of trust provider. Possible values: user|device'
          type: string
        DeviceTrustProviderType:
          description: 'The type of device-based trust provider. Possible values: jamf|crowdstrike'
          type: string
        UserTrustProviderType:
          description: 'The type of device-based trust provider. Possible values: oidc|iam-identity-center'
          type: string
        OidcOptions:
          $ref: '#/components/schemas/OidcOptions'
        DeviceOptions:
          $ref: '#/components/schemas/DeviceOptions'
        PolicyReferenceName:
          description: The identifier to be used when working with policy rules.
          type: string
        CreationTime:
          description: The creation time.
          type: string
        LastUpdatedTime:
          description: The last updated time.
          type: string
        VerifiedAccessTrustProviderId:
          description: The ID of the Amazon Web Services Verified Access trust provider.
          type: string
        Description:
          description: A description for the Amazon Web Services Verified Access trust provider.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        SseSpecification:
          description: The configuration options for customer provided KMS encryption.
          type: object
          properties:
            KmsKeyArn:
              description: KMS Key Arn used to encrypt the group policy
              type: string
            CustomerManagedKeyEnabled:
              description: Whether to encrypt the policy with the provided key or disable encryption
              type: boolean
          additionalProperties: false
      required:
        - TrustProviderType
        - PolicyReferenceName
      x-stackql-resource-name: verified_access_trust_provider
      x-stackql-primaryIdentifier:
        - VerifiedAccessTrustProviderId
      x-create-only-properties:
        - PolicyReferenceName
        - DeviceOptions
        - DeviceTrustProviderType
        - TrustProviderType
        - UserTrustProviderType
      x-read-only-properties:
        - VerifiedAccessTrustProviderId
        - CreationTime
        - LastUpdatedTime
      x-required-permissions:
        create:
          - ec2:CreateVerifiedAccessTrustProvider
          - ec2:DescribeVerifiedAccessTrustProviders
          - ec2:CreateTags
          - ec2:DescribeTags
          - sso:GetSharedSsoConfiguration
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        read:
          - ec2:DescribeVerifiedAccessTrustProviders
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:GenerateDataKey
          - kms:Decrypt
        update:
          - ec2:ModifyVerifiedAccessTrustProvider
          - ec2:DescribeVerifiedAccessTrustProviders
          - ec2:DescribeTags
          - ec2:DeleteTags
          - ec2:CreateTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        delete:
          - ec2:DeleteVerifiedAccessTrustProvider
          - ec2:DeleteTags
          - ec2:DescribeVerifiedAccessTrustProviders
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:RetireGrant
          - kms:CreateGrant
          - kms:GenerateDataKey
          - kms:Decrypt
        list:
          - ec2:DescribeVerifiedAccessTrustProviders
          - ec2:DescribeTags
          - kms:DescribeKey
          - kms:GenerateDataKey
          - kms:Decrypt
    VerifiedAccessTrustProviderId:
      description: The ID of the AWS Verified Access trust provider.
      type: string
    VerifiedAccessLogs:
      description: The configuration options for AWS Verified Access instances.
      type: object
      properties:
        LogVersion:
          description: Select log version for Verified Access logs.
          type: string
        IncludeTrustContext:
          description: Include claims from trust providers in Verified Access logs.
          type: boolean
        CloudWatchLogs:
          description: Sends Verified Access logs to CloudWatch Logs.
          type: object
          properties:
            Enabled:
              description: Indicates whether logging is enabled.
              type: boolean
            LogGroup:
              description: The ID of the CloudWatch Logs log group.
              type: string
          additionalProperties: false
        KinesisDataFirehose:
          description: Sends Verified Access logs to Kinesis.
          type: object
          properties:
            Enabled:
              description: Indicates whether logging is enabled.
              type: boolean
            DeliveryStream:
              description: The ID of the delivery stream.
              type: string
          additionalProperties: false
        S3:
          description: Sends Verified Access logs to Amazon S3.
          type: object
          properties:
            Enabled:
              description: Indicates whether logging is enabled.
              type: boolean
            BucketName:
              description: The bucket name.
              type: string
            BucketOwner:
              description: The ID of the AWS account that owns the Amazon S3 bucket.
              type: string
            Prefix:
              description: The bucket prefix.
              type: string
          additionalProperties: false
      additionalProperties: false
    VerifiedAccessInstance:
      type: object
      properties:
        VerifiedAccessInstanceId:
          description: The ID of the AWS Verified Access instance.
          type: string
        VerifiedAccessTrustProviders:
          description: AWS Verified Access trust providers.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/VerifiedAccessTrustProvider'
        VerifiedAccessTrustProviderIds:
          description: The IDs of the AWS Verified Access trust providers.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/VerifiedAccessTrustProviderId'
        CreationTime:
          description: Time this Verified Access Instance was created.
          type: string
        LastUpdatedTime:
          description: Time this Verified Access Instance was last updated.
          type: string
        Description:
          description: A description for the AWS Verified Access instance.
          type: string
        LoggingConfigurations:
          description: The configuration options for AWS Verified Access instances.
          $ref: '#/components/schemas/VerifiedAccessLogs'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        FipsEnabled:
          description: Indicates whether FIPS is enabled
          type: boolean
      x-stackql-resource-name: verified_access_instance
      x-stackql-primaryIdentifier:
        - VerifiedAccessInstanceId
      x-read-only-properties:
        - VerifiedAccessInstanceId
        - CreationTime
        - LastUpdatedTime
      x-required-permissions:
        create:
          - ec2:CreateVerifiedAccessInstance
          - ec2:AttachVerifiedAccessTrustProvider
          - ec2:ModifyVerifiedAccessInstanceLoggingConfiguration
          - ec2:DescribeVerifiedAccessInstances
          - ec2:DescribeVerifiedAccessInstanceLoggingConfigurations
          - ec2:CreateTags
          - ec2:DescribeTags
          - logs:CreateLogDelivery
          - logs:GetLogDelivery
          - logs:UpdateLogDelivery
          - logs:PutDestination
          - logs:DeleteLogDelivery
          - logs:ListLogDeliveries
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          - s3:listBuckets
          - s3:PutObject
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
          - logs:DescribeLogGroups
          - logs:PutResourcePolicy
          - firehose:TagDeliveryStream
          - logs:DescribeResourcePolicies
          - iam:CreateServiceLinkedRole
          - verified-access:AllowVerifiedAccess
        read:
          - ec2:DescribeVerifiedAccessInstances
          - ec2:DescribeVerifiedAccessInstanceLoggingConfigurations
          - ec2:DescribeTags
          - logs:GetLogDelivery
          - logs:ListLogDeliveries
        update:
          - ec2:ModifyVerifiedAccessInstance
          - ec2:ModifyVerifiedAccessInstanceLoggingConfiguration
          - ec2:DescribeVerifiedAccessInstances
          - ec2:DescribeVerifiedAccessInstanceLoggingConfigurations
          - ec2:DescribeTags
          - ec2:AttachVerifiedAccessTrustProvider
          - ec2:DetachVerifiedAccessTrustProvider
          - ec2:DeleteTags
          - ec2:CreateTags
          - ec2:DescribeTags
          - logs:CreateLogDelivery
          - logs:GetLogDelivery
          - logs:ListLogDeliveries
          - logs:UpdateLogDelivery
          - logs:DeleteLogDelivery
          - logs:PutDestination
          - logs:PutLogEvents
          - logs:DescribeLogStreams
          - s3:listBuckets
          - s3:PutObject
          - s3:GetBucketPolicy
          - s3:PutBucketPolicy
          - logs:DescribeLogGroups
          - logs:PutResourcePolicy
          - firehose:TagDeliveryStream
          - iam:CreateServiceLinkedRole
          - logs:DescribeResourcePolicies
        delete:
          - ec2:DeleteVerifiedAccessInstance
          - ec2:DeleteTags
          - ec2:DescribeVerifiedAccessInstances
          - ec2:DescribeVerifiedAccessInstanceLoggingConfigurations
          - ec2:DetachVerifiedAccessTrustProvider
          - ec2:GetVerifiedAccessGroupPolicy
          - ec2:DescribeTags
          - logs:ListLogDeliveries
          - logs:GetLogDelivery
          - logs:DeleteLogDelivery
        list:
          - ec2:DescribeVerifiedAccessInstances
          - ec2:DescribeTags
          - logs:ListLogDeliveries
          - logs:GetLogDelivery
    OidcOptions:
      description: The OpenID Connect details for an oidc -type, user-identity based trust provider.
      type: object
      properties:
        Issuer:
          type: string
          description: The OIDC issuer.
        AuthorizationEndpoint:
          type: string
          description: The OIDC authorization endpoint.
        TokenEndpoint:
          type: string
          description: The OIDC token endpoint.
        UserInfoEndpoint:
          type: string
          description: The OIDC user info endpoint.
        ClientId:
          type: string
          description: The client identifier.
        ClientSecret:
          type: string
          description: The client secret.
        Scope:
          type: string
          description: OpenID Connect (OIDC) scopes are used by an application during authentication to authorize access to details of a user. Each scope returns a specific set of user attributes.
      additionalProperties: false
    DeviceOptions:
      description: The options for device identity based trust providers.
      type: object
      properties:
        TenantId:
          type: string
          description: The ID of the tenant application with the device-identity provider.
        PublicSigningKeyUrl:
          type: string
          description: URL Verified Access will use to verify authenticity of the device tokens.
      additionalProperties: false
    Volume:
      type: object
      properties:
        MultiAttachEnabled:
          type: boolean
          description: |-
            Indicates whether Amazon EBS Multi-Attach is enabled.
             CFNlong does not currently support updating a single-attach volume to be multi-attach enabled, updating a multi-attach enabled volume to be single-attach, or updating the size or number of I/O operations per second (IOPS) of a multi-attach enabled volume.
        KmsKeyId:
          type: string
          description: |-
            The identifier of the kms-key-long to use for Amazon EBS encryption. If ``KmsKeyId`` is specified, the encrypted state must be ``true``.
             If you omit this property and your account is enabled for encryption by default, or *Encrypted* is set to ``true``, then the volume is encrypted using the default key specified for your account. If your account does not have a default key, then the volume is encrypted using the aws-managed-key.
             Alternatively, if you want to specify a different key, you can specify one of the following:
              +  Key ID. For example, 1234abcd-12ab-34cd-56ef-1234567890ab.
              +  Key alias. Specify the alias for the key, prefixed with ``alias/``. For example, for a key with the alias ``my_cmk``, use ``alias/my_cmk``. Or to specify the aws-managed-key, use ``alias/aws/ebs``.
              +  Key ARN. For example, arn:aws:kms:us-east-1:012345678910:key/1234abcd-12ab-34cd-56ef-1234567890ab.
              +  Alias ARN. For example, arn:aws:kms:us-east-1:012345678910:alias/ExampleAlias.
        Encrypted:
          type: boolean
          description: |-
            Indicates whether the volume should be encrypted. The effect of setting the encryption state to ``true`` depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see [Encryption by default](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default) in the *Amazon Elastic Compute Cloud User Guide*.
             Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see [Supported instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances).
        Size:
          type: integer
          description: |-
            The size of the volume, in GiBs. You must specify either a snapshot ID or a volume size. If you specify a snapshot, the default is the snapshot size. You can specify a volume size that is equal to or larger than the snapshot size.
             The following are the supported volumes sizes for each volume type:
              +   ``gp2`` and ``gp3``: 1 - 16,384 GiB
              +   ``io1``: 4 - 16,384 GiB
              +   ``io2``: 4 - 65,536 GiB
              +   ``st1`` and ``sc1``: 125 - 16,384 GiB
              +   ``standard``: 1 - 1024 GiB
        AutoEnableIO:
          type: boolean
          description: Indicates whether the volume is auto-enabled for I/O operations. By default, Amazon EBS disables I/O to the volume from attached EC2 instances when it determines that a volume's data is potentially inconsistent. If the consistency of the volume is not a concern, and you prefer that the volume be made available immediately if it's impaired, you can configure the volume to automatically enable I/O.
        OutpostArn:
          type: string
          description: The Amazon Resource Name (ARN) of the Outpost.
        AvailabilityZone:
          type: string
          description: The ID of the Availability Zone in which to create the volume. For example, ``us-east-1a``.
        Throughput:
          type: integer
          description: |-
            The throughput to provision for a volume, with a maximum of 1,000 MiB/s.
             This parameter is valid only for ``gp3`` volumes. The default value is 125.
             Valid Range: Minimum value of 125. Maximum value of 1000.
        Iops:
          type: integer
          description: |-
            The number of I/O operations per second (IOPS). For ``gp3``, ``io1``, and ``io2`` volumes, this represents the number of IOPS that are provisioned for the volume. For ``gp2`` volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting.
             The following are the supported values for each volume type:
              +   ``gp3``: 3,000 - 16,000 IOPS
              +   ``io1``: 100 - 64,000 IOPS
              +   ``io2``: 100 - 256,000 IOPS
              
             For ``io2`` volumes, you can achieve up to 256,000 IOPS on [instances built on the Nitro System](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances). On other instances, you can achieve performance up to 32,000 IOPS.
             This parameter is required for ``io1`` and ``io2`` volumes. The default for ``gp3`` volumes is 3,000 IOPS. This parameter is not supported for ``gp2``, ``st1``, ``sc1``, or ``standard`` volumes.
        SnapshotId:
          type: string
          description: The snapshot from which to create the volume. You must specify either a snapshot ID or a volume size.
        VolumeType:
          type: string
          description: |-
            The volume type. This parameter can be one of the following values:
              +  General Purpose SSD: ``gp2`` | ``gp3`` 
              +  Provisioned IOPS SSD: ``io1`` | ``io2`` 
              +  Throughput Optimized HDD: ``st1`` 
              +  Cold HDD: ``sc1`` 
              +  Magnetic: ``standard`` 
              
             For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html) in the *Amazon Elastic Compute Cloud User Guide*.
             Default: ``gp2``
        VolumeId:
          type: string
          description: ''
        Tags:
          type: array
          uniqueItems: false
          description: The tags to apply to the volume during creation.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AvailabilityZone
      x-stackql-resource-name: volume
      x-stackql-primaryIdentifier:
        - VolumeId
      x-read-only-properties:
        - VolumeId
      x-required-permissions:
        create:
          - ec2:CreateVolume
          - ec2:DescribeVolumes
          - ec2:DescribeVolumeAttribute
          - ec2:ModifyVolumeAttribute
          - ec2:CreateTags
          - kms:GenerateDataKeyWithoutPlaintext
          - kms:CreateGrant
        read:
          - ec2:DescribeVolumes
          - ec2:DescribeVolumeAttribute
          - ec2:DescribeTags
        update:
          - ec2:ModifyVolume
          - ec2:ModifyVolumeAttribute
          - ec2:DescribeVolumeAttribute
          - ec2:DescribeVolumesModifications
          - ec2:DescribeVolumes
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteVolume
          - ec2:CreateSnapshot
          - ec2:DescribeSnapshots
          - ec2:DeleteTags
          - ec2:DescribeVolumes
        list:
          - ec2:DescribeVolumes
          - ec2:DescribeTags
          - ec2:DescribeVolumeAttribute
    VolumeId:
      description: The ID of the Amazon EBS volume
      type: string
    Id:
      description: ''
      type: string
    InstanceId:
      description: The ID of the instance to which the volume attaches
      type: string
    Device:
      description: The device name
      type: string
    VolumeAttachment:
      type: object
      properties:
        VolumeId:
          $ref: '#/components/schemas/VolumeId'
          description: The ID of the Amazon EBS volume. The volume and instance must be within the same Availability Zone. This value can be a reference to an [AWS::EC2::Volume](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-ebs-volume.html) resource, or it can be the volume ID of an existing Amazon EBS volume.
        InstanceId:
          $ref: '#/components/schemas/InstanceId'
          description: The ID of the instance to which the volume attaches. This value can be a reference to an [AWS::EC2::Instance](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-instance.html) resource, or it can be the physical ID of an existing EC2 instance.
        Device:
          $ref: '#/components/schemas/Device'
          description: The device name (for example, ``/dev/sdh`` or ``xvdh``).
      required:
        - VolumeId
        - InstanceId
      x-stackql-resource-name: volume_attachment
      x-stackql-primaryIdentifier:
        - VolumeId
        - InstanceId
      x-create-only-properties:
        - Device
        - InstanceId
        - VolumeId
      x-required-permissions:
        create:
          - ec2:AttachVolume
          - ec2:DescribeVolumes
        read:
          - ec2:DescribeVolumes
        delete:
          - ec2:DetachVolume
          - ec2:DescribeVolumes
        list:
          - ec2:DescribeVolumes
    VPC:
      type: object
      properties:
        VpcId:
          type: string
          description: ''
        CidrBlock:
          type: string
          description: |-
            The IPv4 network range for the VPC, in CIDR notation. For example, ``10.0.0.0/16``. We modify the specified CIDR block to its canonical form; for example, if you specify ``100.68.0.18/18``, we modify it to ``100.68.0.0/18``.
             You must specify either``CidrBlock`` or ``Ipv4IpamPoolId``.
        CidrBlockAssociations:
          type: array
          description: ''
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        DefaultNetworkAcl:
          type: string
          x-insertionOrder: false
          description: ''
        DefaultSecurityGroup:
          type: string
          x-insertionOrder: false
          description: ''
        Ipv6CidrBlocks:
          type: array
          description: ''
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        EnableDnsHostnames:
          type: boolean
          description: |-
            Indicates whether the instances launched in the VPC get DNS hostnames. If enabled, instances in the VPC get DNS hostnames; otherwise, they do not. Disabled by default for nondefault VPCs. For more information, see [DNS attributes in your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-support).
             You can only enable DNS hostnames if you've enabled DNS support.
        EnableDnsSupport:
          type: boolean
          description: >-
            Indicates whether the DNS resolution is supported for the VPC. If enabled, queries to the Amazon provided DNS server at the 169.254.169.253 IP address, or the reserved IP address at the base of the VPC network range "plus two" succeed. If disabled, the Amazon provided DNS service in the VPC that resolves public DNS hostnames to IP addresses is not enabled. Enabled by default. For more information, see [DNS attributes in your
            VPC](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-dns.html#vpc-dns-support).
        InstanceTenancy:
          type: string
          description: |-
            The allowed tenancy of instances launched into the VPC.
              +  ``default``: An instance launched into the VPC runs on shared hardware by default, unless you explicitly specify a different tenancy during instance launch.
              +  ``dedicated``: An instance launched into the VPC runs on dedicated hardware by default, unless you explicitly specify a tenancy of ``host`` during instance launch. You cannot specify a tenancy of ``default`` during instance launch.
              
             Updating ``InstanceTenancy`` requires no replacement only if you are updating its value from ``dedicated`` to ``default``. Updating ``InstanceTenancy`` from ``default`` to ``dedicated`` requires replacement.
        Ipv4IpamPoolId:
          type: string
          description: |-
            The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. For more information, see [What is IPAM?](https://docs.aws.amazon.com//vpc/latest/ipam/what-is-it-ipam.html) in the *Amazon VPC IPAM User Guide*.
             You must specify either``CidrBlock`` or ``Ipv4IpamPoolId``.
        Ipv4NetmaskLength:
          type: integer
          description: The netmask length of the IPv4 CIDR you want to allocate to this VPC from an Amazon VPC IP Address Manager (IPAM) pool. For more information about IPAM, see [What is IPAM?](https://docs.aws.amazon.com//vpc/latest/ipam/what-is-it-ipam.html) in the *Amazon VPC IPAM User Guide*.
        Tags:
          type: array
          description: The tags for the VPC.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: vpc
      x-stackql-primaryIdentifier:
        - VpcId
      x-create-only-properties:
        - CidrBlock
        - Ipv4IpamPoolId
        - Ipv4NetmaskLength
      x-read-only-properties:
        - CidrBlockAssociations
        - DefaultNetworkAcl
        - DefaultSecurityGroup
        - Ipv6CidrBlocks
        - VpcId
      x-required-permissions:
        create:
          - ec2:CreateVpc
          - ec2:DescribeVpcs
          - ec2:ModifyVpcAttribute
          - ec2:CreateTags
        read:
          - ec2:DescribeVpcs
          - ec2:DescribeSecurityGroups
          - ec2:DescribeNetworkAcls
          - ec2:DescribeVpcAttribute
        update:
          - ec2:CreateTags
          - ec2:ModifyVpcAttribute
          - ec2:DeleteTags
          - ec2:ModifyVpcTenancy
        delete:
          - ec2:DeleteVpc
          - ec2:DescribeVpcs
        list:
          - ec2:DescribeVpcs
    VPCDHCPOptionsAssociation:
      type: object
      properties:
        DhcpOptionsId:
          type: string
          description: The ID of the DHCP options set, or default to associate no DHCP options with the VPC.
        VpcId:
          type: string
          description: The ID of the VPC.
      required:
        - VpcId
        - DhcpOptionsId
      x-stackql-resource-name: vpcdhcp_options_association
      x-stackql-primaryIdentifier:
        - DhcpOptionsId
        - VpcId
      x-create-only-properties:
        - DhcpOptionsId
        - VpcId
      x-required-permissions:
        create:
          - ec2:AssociateDhcpOptions
        update:
          - ec2:AssociateDhcpOptions
        delete:
          - ec2:AssociateDhcpOptions
        read:
          - ec2:DescribeVpcs
        list:
          - ec2:DescribeVpcs
    VPCEndpoint:
      type: object
      properties:
        Id:
          type: string
          description: ''
        CreationTimestamp:
          type: string
          description: ''
        DnsEntries:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
          description: ''
        NetworkInterfaceIds:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
          description: ''
        PolicyDocument:
          type: object
          description: |-
            An endpoint policy, which controls access to the service from the VPC. The default endpoint policy allows full access to the service. Endpoint policies are supported only for gateway and interface endpoints.
             For CloudFormation templates in YAML, you can provide the policy in JSON or YAML format. CFNlong converts YAML policies to JSON format before calling the API to create or modify the VPC endpoint.
        PrivateDnsEnabled:
          type: boolean
          description: >-
            Indicate whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, ``kinesis.us-east-1.amazonaws.com``), which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC
            endpoint service.
             To use a private hosted zone, you must set the following VPC attributes to ``true``: ``enableDnsHostnames`` and ``enableDnsSupport``.
             This property is supported only for interface endpoints.
             Default: ``false``
        RouteTableIds:
          type: array
          description: The IDs of the route tables. Routing is supported only for gateway endpoints.
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        SecurityGroupIds:
          type: array
          description: The IDs of the security groups to associate with the endpoint network interfaces. If this parameter is not specified, we use the default security group for the VPC. Security groups are supported only for interface endpoints.
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        ServiceName:
          type: string
          description: The name of the endpoint service.
        SubnetIds:
          type: array
          description: The IDs of the subnets in which to create endpoint network interfaces. You must specify this property for an interface endpoint or a Gateway Load Balancer endpoint. You can't specify this property for a gateway endpoint. For a Gateway Load Balancer endpoint, you can specify only one subnet.
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        VpcEndpointType:
          type: string
          enum:
            - Interface
            - Gateway
            - GatewayLoadBalancer
          description: |-
            The type of endpoint.
             Default: Gateway
        VpcId:
          type: string
          description: The ID of the VPC.
      required:
        - VpcId
        - ServiceName
      x-stackql-resource-name: vpc_endpoint
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - ServiceName
        - VpcEndpointType
        - VpcId
      x-read-only-properties:
        - NetworkInterfaceIds
        - CreationTimestamp
        - DnsEntries
        - Id
      x-required-permissions:
        create:
          - ec2:CreateVpcEndpoint
          - ec2:DescribeVpcEndpoints
        read:
          - ec2:DescribeVpcEndpoints
        update:
          - ec2:ModifyVpcEndpoint
          - ec2:DescribeVpcEndpoints
        delete:
          - ec2:DeleteVpcEndpoints
          - ec2:DescribeVpcEndpoints
        list:
          - ec2:DescribeVpcEndpoints
    VPCEndpointConnectionNotification:
      type: object
      properties:
        VPCEndpointConnectionNotificationId:
          description: VPC Endpoint Connection ID generated by service
          type: string
        ConnectionEvents:
          description: The endpoint events for which to receive notifications.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        ConnectionNotificationArn:
          description: The ARN of the SNS topic for the notifications.
          type: string
        ServiceId:
          description: The ID of the endpoint service.
          type: string
        VPCEndpointId:
          description: The ID of the endpoint.
          type: string
      required:
        - ConnectionEvents
        - ConnectionNotificationArn
      x-stackql-resource-name: vpc_endpoint_connection_notification
      x-stackql-primaryIdentifier:
        - VPCEndpointConnectionNotificationId
      x-create-only-properties:
        - ServiceId
        - VPCEndpointId
      x-read-only-properties:
        - VPCEndpointConnectionNotificationId
      x-required-permissions:
        create:
          - ec2:CreateVpcEndpointConnectionNotification
        read:
          - ec2:DescribeVpcEndpointConnectionNotifications
        update:
          - ec2:ModifyVpcEndpointConnectionNotification
          - ec2:DescribeVpcEndpointConnectionNotifications
        delete:
          - ec2:DeleteVpcEndpointConnectionNotifications
        list:
          - ec2:DescribeVpcEndpointConnectionNotifications
    VPCEndpointService:
      type: object
      properties:
        NetworkLoadBalancerArns:
          type: array
          uniqueItems: false
          items:
            type: string
        ContributorInsightsEnabled:
          type: boolean
        PayerResponsibility:
          type: string
        ServiceId:
          type: string
        AcceptanceRequired:
          type: boolean
        GatewayLoadBalancerArns:
          type: array
          uniqueItems: false
          items:
            type: string
      x-stackql-resource-name: vpc_endpoint_service
      x-stackql-primaryIdentifier:
        - ServiceId
      x-read-only-properties:
        - ServiceId
      x-required-permissions:
        create:
          - ec2:CreateVpcEndpointServiceConfiguration
          - ec2:ModifyVpcEndpointServiceConfiguration
          - ec2:ModifyVpcEndpointServicePayerResponsibility
          - cloudwatch:ListManagedInsightRules
          - cloudwatch:DeleteInsightRules
          - cloudwatch:PutManagedInsightRules
          - ec2:DescribeVpcEndpointServiceConfigurations
        update:
          - ec2:ModifyVpcEndpointServiceConfiguration
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServiceConfigurations
          - ec2:ModifyVpcEndpointServicePayerResponsibility
          - cloudwatch:ListManagedInsightRules
          - cloudwatch:DeleteInsightRules
          - cloudwatch:PutManagedInsightRules
        read:
          - ec2:DescribeVpcEndpointServiceConfigurations
          - cloudwatch:ListManagedInsightRules
        delete:
          - ec2:DeleteVpcEndpointServiceConfigurations
          - ec2:DescribeVpcEndpointServiceConfigurations
          - cloudwatch:ListManagedInsightRules
          - cloudwatch:DeleteInsightRules
        list:
          - ec2:DescribeVpcEndpointServiceConfigurations
          - cloudwatch:ListManagedInsightRules
    VPCEndpointServicePermissions:
      type: object
      properties:
        AllowedPrincipals:
          type: array
          uniqueItems: false
          items:
            type: string
        ServiceId:
          type: string
      required:
        - ServiceId
      x-stackql-resource-name: vpc_endpoint_service_permissions
      x-stackql-primaryIdentifier:
        - ServiceId
      x-create-only-properties:
        - ServiceId
      x-required-permissions:
        create:
          - ec2:CreateVpcEndpointServicePermissions
          - ec2:ModifyVpcEndpointServicePermissions
          - ec2:DeleteVpcEndpointServicePermissions
          - ec2:DescribeVpcEndpointServicePermissions
        update:
          - ec2:CreateVpcEndpointServicePermissions
          - ec2:ModifyVpcEndpointServicePermissions
          - ec2:DeleteVpcEndpointServicePermissions
          - ec2:DescribeVpcEndpointServicePermissions
        read:
          - ec2:CreateVpcEndpointServicePermissions
          - ec2:ModifyVpcEndpointServicePermissions
          - ec2:DeleteVpcEndpointServicePermissions
          - ec2:DescribeVpcEndpointServicePermissions
        delete:
          - ec2:CreateVpcEndpointServicePermissions
          - ec2:ModifyVpcEndpointServicePermissions
          - ec2:DeleteVpcEndpointServicePermissions
          - ec2:DescribeVpcEndpointServicePermissions
        list:
          - ec2:CreateVpcEndpointServicePermissions
          - ec2:ModifyVpcEndpointServicePermissions
          - ec2:DeleteVpcEndpointServicePermissions
          - ec2:DescribeVpcEndpointServicePermissions
    VPCGatewayAttachment:
      type: object
      properties:
        AttachmentType:
          type: string
          description: 'Used to identify if this resource is an Internet Gateway or Vpn Gateway Attachment '
        InternetGatewayId:
          type: string
          description: The ID of the internet gateway. You must specify either InternetGatewayId or VpnGatewayId, but not both.
        VpcId:
          type: string
          description: The ID of the VPC.
        VpnGatewayId:
          type: string
          description: The ID of the virtual private gateway. You must specify either InternetGatewayId or VpnGatewayId, but not both.
      required:
        - VpcId
      x-stackql-resource-name: vpc_gateway_attachment
      x-stackql-primaryIdentifier:
        - AttachmentType
        - VpcId
      x-create-only-properties:
        - VpcId
      x-read-only-properties:
        - AttachmentType
      x-required-permissions:
        create:
          - ec2:AttachInternetGateway
          - ec2:AttachVpnGateway
          - ec2:DescribeInternetGateways
          - ec2:DescribeVpnGateways
        read:
          - ec2:DescribeInternetGateways
          - ec2:DescribeVpnGateways
        update:
          - ec2:AttachInternetGateway
          - ec2:AttachVpnGateway
          - ec2:DetachInternetGateway
          - ec2:DetachVpnGateway
          - ec2:DescribeInternetGateways
          - ec2:DescribeVpnGateways
        delete:
          - ec2:DetachInternetGateway
          - ec2:DetachVpnGateway
          - ec2:DescribeInternetGateways
          - ec2:DescribeVpnGateways
        list:
          - ec2:DescribeInternetGateways
          - ec2:DescribeVpnGateways
    VPCPeeringConnection:
      type: object
      properties:
        Id:
          type: string
        PeerOwnerId:
          description: The AWS account ID of the owner of the accepter VPC.
          type: string
        PeerRegion:
          description: The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.
          type: string
        PeerRoleArn:
          description: The Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account.
          type: string
        PeerVpcId:
          description: The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
          type: string
        VpcId:
          description: The ID of the VPC.
          type: string
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - VpcId
        - PeerVpcId
      x-stackql-resource-name: vpc_peering_connection
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - PeerRegion
        - PeerOwnerId
        - PeerVpcId
        - PeerRoleArn
        - VpcId
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - ec2:CreateVpcPeeringConnection
          - ec2:DescribeVpcPeeringConnections
          - ec2:AcceptVpcPeeringConnection
          - ec2:CreateTags
          - sts:AssumeRole
        read:
          - ec2:DescribeVpcPeeringConnections
        update:
          - ec2:CreateTags
          - ec2:DeleteTags
          - ec2:DescribeVpcPeeringConnections
        delete:
          - ec2:DeleteVpcPeeringConnection
          - ec2:DescribeVpcPeeringConnections
        list:
          - ec2:DescribeVpcPeeringConnections
    VpnTunnelOptionsSpecification:
      type: object
      additionalProperties: false
      properties:
        PreSharedKey:
          type: string
        TunnelInsideCidr:
          type: string
    VPNConnection:
      type: object
      properties:
        VpnConnectionId:
          description: The provider-assigned unique ID for this managed resource
          type: string
        CustomerGatewayId:
          description: The ID of the customer gateway at your end of the VPN connection.
          type: string
        StaticRoutesOnly:
          description: Indicates whether the VPN connection uses static routes only.
          type: boolean
        Tags:
          description: Any tags assigned to the VPN connection.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        TransitGatewayId:
          description: The ID of the transit gateway associated with the VPN connection.
          type: string
        Type:
          description: The type of VPN connection.
          type: string
        VpnGatewayId:
          description: The ID of the virtual private gateway at the AWS side of the VPN connection.
          type: string
        VpnTunnelOptionsSpecifications:
          description: The tunnel options for the VPN connection.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/VpnTunnelOptionsSpecification'
      required:
        - Type
        - CustomerGatewayId
      x-stackql-resource-name: vpn_connection
      x-stackql-primaryIdentifier:
        - VpnConnectionId
      x-create-only-properties:
        - Type
        - CustomerGatewayId
        - VpnGatewayId
        - TransitGatewayId
        - VpnTunnelOptionsSpecifications
        - StaticRoutesOnly
      x-read-only-properties:
        - VpnConnectionId
      x-required-permissions:
        create:
          - ec2:DescribeVpnConnections
          - ec2:CreateVpnConnection
          - ec2:CreateTags
        delete:
          - ec2:DescribeVpnConnections
          - ec2:DeleteVpnConnection
          - ec2:DeleteTags
        update:
          - ec2:DescribeVpnConnections
          - ec2:CreateTags
          - ec2:DeleteTags
        read:
          - ec2:DescribeVpnConnections
        list:
          - ec2:DescribeVpnConnections
    VPNConnectionRoute:
      type: object
      properties:
        DestinationCidrBlock:
          description: The CIDR block associated with the local subnet of the customer network.
          type: string
        VpnConnectionId:
          description: The ID of the VPN connection.
          type: string
      required:
        - DestinationCidrBlock
        - VpnConnectionId
      x-stackql-resource-name: vpn_connection_route
      x-stackql-primaryIdentifier:
        - DestinationCidrBlock
        - VpnConnectionId
      x-create-only-properties:
        - DestinationCidrBlock
        - VpnConnectionId
      x-required-permissions:
        create:
          - ec2:CreateVpnConnectionRoute
          - ec2:DescribeVpnConnections
        read:
          - ec2:DescribeVpnConnections
        delete:
          - ec2:DeleteVpnConnectionRoute
          - ec2:DescribeVpnConnections
        list:
          - ec2:DescribeVpnConnections
    VPNGateway:
      type: object
      properties:
        VPNGatewayId:
          description: VPN Gateway ID generated by service
          type: string
        AmazonSideAsn:
          description: The private Autonomous System Number (ASN) for the Amazon side of a BGP session.
          type: integer
          format: int64
        Tags:
          description: Any tags assigned to the virtual private gateway.
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
        Type:
          description: The type of VPN connection the virtual private gateway supports.
          type: string
      required:
        - Type
      x-stackql-resource-name: vpn_gateway
      x-stackql-primaryIdentifier:
        - VPNGatewayId
      x-create-only-properties:
        - AmazonSideAsn
        - Type
      x-read-only-properties:
        - VPNGatewayId
      x-required-permissions:
        create:
          - ec2:CreateVpnGateway
          - ec2:DescribeVpnGateways
        read:
          - ec2:DescribeVpnGateways
        update:
          - ec2:CreateTags
          - ec2:DeleteTags
        delete:
          - ec2:DeleteVpnGateway
        list:
          - ec2:DescribeVpnGateways
    region:
      type: string
      description: The AWS region
    outpostArn:
      type: string
      description: The Amazon Resource Name (ARN) of the Outpost.
    ownerId:
      type: string
      description: The ID of the Amazon Web Services account that owns the resource.
    vpcId:
      type: string
      description: '[EC2-VPC] The ID of the VPC in which the resource is located.'
    subnetId:
      type: string
      description: '[EC2-VPC] The ID of the subnet in which the resource is located.'
    tagSet:
      type: array
      description: Any tags assigned to the resource.
    availabilityZone:
      type: string
      description: The Availability Zone where the resource was created, if applicable.
    instances:
      description: List of ec2 instances by region (requires `aws` provider to be installed)
      type: object
      additionalProperties: false
      properties:
        instanceId:
          type: string
          description: The ID of the instance.
        instanceState:
          type: object
          description: Describes the current state of an instance.
        instanceType:
          type: string
          description: The instance type.
        vpcId:
          $ref: '#/components/schemas/vpcId'
        subnetId:
          $ref: '#/components/schemas/subnetId'
        amiLaunchIndex:
          type: integer
          description: The AMI launch index, which can be used to find this instance in the launch group.
        architecture:
          type: string
          description: The architecture of the image.
        blockDeviceMapping:
          type: array
          description: Any block device mapping entries for the instance.
        bootMode:
          type: string
          description: The boot mode of the instance.
        capacityReservationId:
          type: string
          description: The ID of the Capacity Reservation.
        capacityReservationSpecification:
          type: object
          description: Describes the instances Capacity Reservation targeting preferences
        clientToken:
          type: string
          description: The idempotency token you provided when you launched the instance, if applicable.
        cpuOptions:
          type: object
          description: The CPU options for the instance.
        dnsName:
          type: string
          description: (IPv4 only) The public DNS name assigned to the instance.
        ebsOptimized:
          type: boolean
          description: Indicates whether the instance is optimized for Amazon EBS I/O.
        elasticGpuAssociationSet:
          type: array
          description: The Elastic GPU associated with the instance.
        elasticInferenceAcceleratorAssociationSet:
          type: array
          description: The elastic inference accelerator associated with the instance.
        enaSupport:
          type: boolean
          description: Specifies whether enhanced networking with ENA is enabled.
        enclaveOptions:
          type: object
          description: Indicates whether the instance is enabled for Amazon Web Services Nitro Enclaves.
        groupSet:
          type: array
          description: The security groups for the instance.
        hibernationOptions:
          type: object
          description: Indicates whether your instance is configured for hibernation.
        hypervisor:
          type: string
          description: The hypervisor type of the instance.
        iamInstanceProfile:
          type: object
          description: Describes an IAM instance profile.
        imageId:
          type: string
          description: The ID of the AMI used to launch the instance.
        instanceLifecycle:
          type: string
          description: Indicates whether this is a Spot Instance or a Scheduled Instance.
        ipAddress:
          type: string
          description: The public IPv4 address, or the Carrier IP address assigned to the instance, if applicable.
        ipv6Address:
          type: string
          description: The IPv6 address assigned to the instance.
        kernelId:
          type: string
          description: The kernel associated with this instance, if applicable.
        keyName:
          type: string
          description: The name of the key pair, if this instance was launched with an associated key pair.
        launchTime:
          type: string
          description: The time the instance was launched.
        licenseSet:
          type: array
          description: The license configurations for the instance.
        maintenanceOptions:
          type: object
          description: The maintenance options for the instance.
        metadataOptions:
          type: object
          description: The metadata options for the instance.
        monitoring:
          type: object
          description: Describes the monitoring of an instance.
        networkInterfaceSet:
          type: array
          description: '[EC2-VPC] The network interfaces for the instance.'
        outpostArn:
          $ref: '#/components/schemas/outpostArn'
        placement:
          type: object
          description: Describes the placement of an instance.
        platform:
          type: string
          description: The value is Windows instances; otherwise blank.
        platformDetails:
          type: string
          description: The platform details value for the instance.
        privateDnsName:
          type: string
          description: (IPv4 only) The private DNS hostname name assigned to the instance.
        privateDnsNameOptions:
          type: object
          description: Describes the options for instance hostnames.
        privateIpAddress:
          type: string
          description: The private IPv4 address assigned to the instance.
        productCodes:
          type: array
          description: The product codes attached to this instance, if applicable.
        ramdiskId:
          type: string
          description: The RAM disk associated with this instance, if applicable.
        reason:
          type: string
          description: The reason for the most recent state transition. This might be an empty string.
        rootDeviceName:
          type: string
          description: The device name of the root device volume.
        rootDeviceType:
          type: string
          description: The root device type used by the AMI. The AMI can use an EBS volume or an instance store volume.
        sourceDestCheck:
          type: boolean
          description: Indicates whether source/destination checking is enabled.
        spotInstanceRequestId:
          type: string
          description: If the request is a Spot Instance request, the ID of the request.
        sriovNetSupport:
          type: string
          description: Specifies whether enhanced networking with the Intel 82599 Virtual Function interface is enabled.
        stateReason:
          type: object
          description: Describes a state change.
        tagSet:
          $ref: '#/components/schemas/tagSet'
        tpmSupport:
          type: string
          description: If the instance is configured for NitroTPM support
        usageOperation:
          type: string
          description: The usage operation value for the instance.
        usageOperationUpdateTime:
          type: string
          description: The time that the usage operation was last updated.
        virtualizationType:
          type: string
          description: The virtualization type of the instance.
        region:
          $ref: '#/components/schemas/region'
      x-example-where-clause: WHERE region = '<region>'
    snapshots:
      description: List of snapshots by region (requires `aws` provider to be installed)
      type: object
      additionalProperties: false
      properties:
        description:
          type: string
          description: The description for the snapshot.
        dataEncryptionKeyId:
          type: string
          description: The data encryption key identifier for the snapshot.
        encrypted:
          type: boolean
          description: Indicates whether the snapshot is encrypted.
        kmsKeyId:
          type: string
          description: The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key that was used to protect the volume encryption key for the parent volume.
        outpostArn:
          $ref: '#/components/schemas/outpostArn'
        ownerAlias:
          type: string
          description: The Amazon Web Services owner alias.
        ownerId:
          $ref: '#/components/schemas/ownerId'
        progress:
          type: string
          description: The progress of the snapshot, as a percentage.
        restoreExpiryTime:
          type: string
          description: Only for archived snapshots that are temporarily restored. Indicates the date and time when a temporarily restored snapshot will be automatically re-archived.
        snapshotId:
          type: string
          description: The ID of the snapshot. Each snapshot receives a unique identifier when it is created.
        startTime:
          type: string
          description: The time stamp when the snapshot was initiated.
        status:
          type: string
          description: The snapshot state.
        statusMessage:
          type: string
          description: Encrypted Amazon EBS snapshots are copied asynchronously. If a snapshot copy operation fails (for example, if the proper Key Management Service (KMS) permissions are not obtained) this field displays error state details.
        storageTier:
          type: string
          description: The storage tier in which the snapshot is stored.
        tagSet:
          $ref: '#/components/schemas/tagSet'
        volumeId:
          type: string
          description: The ID of the volume that was used to create the snapshot.
        volumeSize:
          type: integer
          description: The size of the volume, in GiB.
        region:
          $ref: '#/components/schemas/region'
      x-example-where-clause: WHERE region = '<region>'
  x-stackQL-resources:
    capacity_reservations:
      name: capacity_reservations
      id: awscc.ec2.capacity_reservations
      x-cfn-schema-name: CapacityReservation
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CapacityReservation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CapacityReservation'
                AND region = 'us-east-1'
    capacity_reservation:
      name: capacity_reservation
      id: awscc.ec2.capacity_reservation
      x-cfn-schema-name: CapacityReservation
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Tenancy') as tenancy,
              JSON_EXTRACT(Properties, '$.EndDateType') as end_date_type,
              JSON_EXTRACT(Properties, '$.TagSpecifications') as tag_specifications,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.TotalInstanceCount') as total_instance_count,
              JSON_EXTRACT(Properties, '$.EndDate') as end_date,
              JSON_EXTRACT(Properties, '$.EbsOptimized') as ebs_optimized,
              JSON_EXTRACT(Properties, '$.OutPostArn') as out_post_arn,
              JSON_EXTRACT(Properties, '$.InstanceCount') as instance_count,
              JSON_EXTRACT(Properties, '$.PlacementGroupArn') as placement_group_arn,
              JSON_EXTRACT(Properties, '$.AvailableInstanceCount') as available_instance_count,
              JSON_EXTRACT(Properties, '$.InstancePlatform') as instance_platform,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.InstanceType') as instance_type,
              JSON_EXTRACT(Properties, '$.EphemeralStorage') as ephemeral_storage,
              JSON_EXTRACT(Properties, '$.InstanceMatchCriteria') as instance_match_criteria
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CapacityReservation'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Tenancy') as tenancy,
                json_extract_path_text(Properties, 'EndDateType') as end_date_type,
                json_extract_path_text(Properties, 'TagSpecifications') as tag_specifications,
                json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                json_extract_path_text(Properties, 'TotalInstanceCount') as total_instance_count,
                json_extract_path_text(Properties, 'EndDate') as end_date,
                json_extract_path_text(Properties, 'EbsOptimized') as ebs_optimized,
                json_extract_path_text(Properties, 'OutPostArn') as out_post_arn,
                json_extract_path_text(Properties, 'InstanceCount') as instance_count,
                json_extract_path_text(Properties, 'PlacementGroupArn') as placement_group_arn,
                json_extract_path_text(Properties, 'AvailableInstanceCount') as available_instance_count,
                json_extract_path_text(Properties, 'InstancePlatform') as instance_platform,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'InstanceType') as instance_type,
                json_extract_path_text(Properties, 'EphemeralStorage') as ephemeral_storage,
                json_extract_path_text(Properties, 'InstanceMatchCriteria') as instance_match_criteria
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CapacityReservation'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    capacity_reservation_fleets:
      name: capacity_reservation_fleets
      id: awscc.ec2.capacity_reservation_fleets
      x-cfn-schema-name: CapacityReservationFleet
      x-type: list
      x-identifiers:
        - CapacityReservationFleetId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CapacityReservationFleetId') as capacity_reservation_fleet_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CapacityReservationFleet'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CapacityReservationFleetId') as capacity_reservation_fleet_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CapacityReservationFleet'
                AND region = 'us-east-1'
    capacity_reservation_fleet:
      name: capacity_reservation_fleet
      id: awscc.ec2.capacity_reservation_fleet
      x-cfn-schema-name: CapacityReservationFleet
      x-type: get
      x-identifiers:
        - CapacityReservationFleetId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AllocationStrategy') as allocation_strategy,
              JSON_EXTRACT(Properties, '$.TagSpecifications') as tag_specifications,
              JSON_EXTRACT(Properties, '$.InstanceTypeSpecifications') as instance_type_specifications,
              JSON_EXTRACT(Properties, '$.TotalTargetCapacity') as total_target_capacity,
              JSON_EXTRACT(Properties, '$.EndDate') as end_date,
              JSON_EXTRACT(Properties, '$.InstanceMatchCriteria') as instance_match_criteria,
              JSON_EXTRACT(Properties, '$.CapacityReservationFleetId') as capacity_reservation_fleet_id,
              JSON_EXTRACT(Properties, '$.Tenancy') as tenancy,
              JSON_EXTRACT(Properties, '$.RemoveEndDate') as remove_end_date,
              JSON_EXTRACT(Properties, '$.NoRemoveEndDate') as no_remove_end_date
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CapacityReservationFleet'
              AND data__Identifier = '<CapacityReservationFleetId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AllocationStrategy') as allocation_strategy,
                json_extract_path_text(Properties, 'TagSpecifications') as tag_specifications,
                json_extract_path_text(Properties, 'InstanceTypeSpecifications') as instance_type_specifications,
                json_extract_path_text(Properties, 'TotalTargetCapacity') as total_target_capacity,
                json_extract_path_text(Properties, 'EndDate') as end_date,
                json_extract_path_text(Properties, 'InstanceMatchCriteria') as instance_match_criteria,
                json_extract_path_text(Properties, 'CapacityReservationFleetId') as capacity_reservation_fleet_id,
                json_extract_path_text(Properties, 'Tenancy') as tenancy,
                json_extract_path_text(Properties, 'RemoveEndDate') as remove_end_date,
                json_extract_path_text(Properties, 'NoRemoveEndDate') as no_remove_end_date
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CapacityReservationFleet'
                AND data__Identifier = '<CapacityReservationFleetId>'
                AND region = 'us-east-1'
    carrier_gateways:
      name: carrier_gateways
      id: awscc.ec2.carrier_gateways
      x-cfn-schema-name: CarrierGateway
      x-type: list
      x-identifiers:
        - CarrierGatewayId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CarrierGatewayId') as carrier_gateway_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CarrierGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CarrierGatewayId') as carrier_gateway_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CarrierGateway'
                AND region = 'us-east-1'
    carrier_gateway:
      name: carrier_gateway
      id: awscc.ec2.carrier_gateway
      x-cfn-schema-name: CarrierGateway
      x-type: get
      x-identifiers:
        - CarrierGatewayId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CarrierGatewayId') as carrier_gateway_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CarrierGateway'
              AND data__Identifier = '<CarrierGatewayId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'CarrierGatewayId') as carrier_gateway_id,
                json_extract_path_text(Properties, 'State') as state,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'OwnerId') as owner_id,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CarrierGateway'
                AND data__Identifier = '<CarrierGatewayId>'
                AND region = 'us-east-1'
    customer_gateways:
      name: customer_gateways
      id: awscc.ec2.customer_gateways
      x-cfn-schema-name: CustomerGateway
      x-type: list
      x-identifiers:
        - CustomerGatewayId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CustomerGatewayId') as customer_gateway_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CustomerGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CustomerGatewayId') as customer_gateway_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::CustomerGateway'
                AND region = 'us-east-1'
    customer_gateway:
      name: customer_gateway
      id: awscc.ec2.customer_gateway
      x-cfn-schema-name: CustomerGateway
      x-type: get
      x-identifiers:
        - CustomerGatewayId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CustomerGatewayId') as customer_gateway_id,
              JSON_EXTRACT(Properties, '$.BgpAsn') as bgp_asn,
              JSON_EXTRACT(Properties, '$.IpAddress') as ip_address,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.DeviceName') as device_name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CustomerGateway'
              AND data__Identifier = '<CustomerGatewayId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'CustomerGatewayId') as customer_gateway_id,
                json_extract_path_text(Properties, 'BgpAsn') as bgp_asn,
                json_extract_path_text(Properties, 'IpAddress') as ip_address,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'DeviceName') as device_name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::CustomerGateway'
                AND data__Identifier = '<CustomerGatewayId>'
                AND region = 'us-east-1'
    dhcp_options:
      name: dhcp_options
      id: awscc.ec2.dhcp_options
      x-cfn-schema-name: DHCPOptions
      x-type: get
      x-identifiers:
        - DhcpOptionsId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.NetbiosNameServers') as netbios_name_servers,
              JSON_EXTRACT(Properties, '$.NtpServers') as ntp_servers,
              JSON_EXTRACT(Properties, '$.DhcpOptionsId') as dhcp_options_id,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.NetbiosNodeType') as netbios_node_type,
              JSON_EXTRACT(Properties, '$.DomainNameServers') as domain_name_servers,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::DHCPOptions'
              AND data__Identifier = '<DhcpOptionsId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'NetbiosNameServers') as netbios_name_servers,
                json_extract_path_text(Properties, 'NtpServers') as ntp_servers,
                json_extract_path_text(Properties, 'DhcpOptionsId') as dhcp_options_id,
                json_extract_path_text(Properties, 'DomainName') as domain_name,
                json_extract_path_text(Properties, 'NetbiosNodeType') as netbios_node_type,
                json_extract_path_text(Properties, 'DomainNameServers') as domain_name_servers,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::DHCPOptions'
                AND data__Identifier = '<DhcpOptionsId>'
                AND region = 'us-east-1'
    ec2fleets:
      name: ec2fleets
      id: awscc.ec2.ec2fleets
      x-cfn-schema-name: EC2Fleet
      x-type: list
      x-identifiers:
        - FleetId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FleetId') as fleet_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EC2Fleet'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FleetId') as fleet_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EC2Fleet'
                AND region = 'us-east-1'
    ec2fleet:
      name: ec2fleet
      id: awscc.ec2.ec2fleet
      x-cfn-schema-name: EC2Fleet
      x-type: get
      x-identifiers:
        - FleetId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TargetCapacitySpecification') as target_capacity_specification,
              JSON_EXTRACT(Properties, '$.OnDemandOptions') as on_demand_options,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.ExcessCapacityTerminationPolicy') as excess_capacity_termination_policy,
              JSON_EXTRACT(Properties, '$.TagSpecifications') as tag_specifications,
              JSON_EXTRACT(Properties, '$.SpotOptions') as spot_options,
              JSON_EXTRACT(Properties, '$.ValidFrom') as valid_from,
              JSON_EXTRACT(Properties, '$.ReplaceUnhealthyInstances') as replace_unhealthy_instances,
              JSON_EXTRACT(Properties, '$.LaunchTemplateConfigs') as launch_template_configs,
              JSON_EXTRACT(Properties, '$.FleetId') as fleet_id,
              JSON_EXTRACT(Properties, '$.TerminateInstancesWithExpiration') as terminate_instances_with_expiration,
              JSON_EXTRACT(Properties, '$.ValidUntil') as valid_until,
              JSON_EXTRACT(Properties, '$.Context') as context
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EC2Fleet'
              AND data__Identifier = '<FleetId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'TargetCapacitySpecification') as target_capacity_specification,
                json_extract_path_text(Properties, 'OnDemandOptions') as on_demand_options,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'ExcessCapacityTerminationPolicy') as excess_capacity_termination_policy,
                json_extract_path_text(Properties, 'TagSpecifications') as tag_specifications,
                json_extract_path_text(Properties, 'SpotOptions') as spot_options,
                json_extract_path_text(Properties, 'ValidFrom') as valid_from,
                json_extract_path_text(Properties, 'ReplaceUnhealthyInstances') as replace_unhealthy_instances,
                json_extract_path_text(Properties, 'LaunchTemplateConfigs') as launch_template_configs,
                json_extract_path_text(Properties, 'FleetId') as fleet_id,
                json_extract_path_text(Properties, 'TerminateInstancesWithExpiration') as terminate_instances_with_expiration,
                json_extract_path_text(Properties, 'ValidUntil') as valid_until,
                json_extract_path_text(Properties, 'Context') as context
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EC2Fleet'
                AND data__Identifier = '<FleetId>'
                AND region = 'us-east-1'
    egress_only_internet_gateways:
      name: egress_only_internet_gateways
      id: awscc.ec2.egress_only_internet_gateways
      x-cfn-schema-name: EgressOnlyInternetGateway
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EgressOnlyInternetGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EgressOnlyInternetGateway'
                AND region = 'us-east-1'
    egress_only_internet_gateway:
      name: egress_only_internet_gateway
      id: awscc.ec2.egress_only_internet_gateway
      x-cfn-schema-name: EgressOnlyInternetGateway
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EgressOnlyInternetGateway'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'VpcId') as vpc_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EgressOnlyInternetGateway'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    eips:
      name: eips
      id: awscc.ec2.eips
      x-cfn-schema-name: EIP
      x-type: list
      x-identifiers:
        - PublicIp
        - AllocationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PublicIp') as public_ip,
              JSON_EXTRACT(Properties, '$.AllocationId') as allocation_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EIP'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PublicIp') as public_ip,
                json_extract_path_text(Properties, 'AllocationId') as allocation_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EIP'
                AND region = 'us-east-1'
    eip:
      name: eip
      id: awscc.ec2.eip
      x-cfn-schema-name: EIP
      x-type: get
      x-identifiers:
        - PublicIp
        - AllocationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PublicIp') as public_ip,
              JSON_EXTRACT(Properties, '$.AllocationId') as allocation_id,
              JSON_EXTRACT(Properties, '$.Domain') as domain,
              JSON_EXTRACT(Properties, '$.NetworkBorderGroup') as network_border_group,
              JSON_EXTRACT(Properties, '$.TransferAddress') as transfer_address,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(Properties, '$.PublicIpv4Pool') as public_ipv4_pool,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EIP'
              AND data__Identifier = '<PublicIp>|<AllocationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'PublicIp') as public_ip,
                json_extract_path_text(Properties, 'AllocationId') as allocation_id,
                json_extract_path_text(Properties, 'Domain') as domain,
                json_extract_path_text(Properties, 'NetworkBorderGroup') as network_border_group,
                json_extract_path_text(Properties, 'TransferAddress') as transfer_address,
                json_extract_path_text(Properties, 'InstanceId') as instance_id,
                json_extract_path_text(Properties, 'PublicIpv4Pool') as public_ipv4_pool,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EIP'
                AND data__Identifier = '<PublicIp>|<AllocationId>'
                AND region = 'us-east-1'
    eip_associations:
      name: eip_associations
      id: awscc.ec2.eip_associations
      x-cfn-schema-name: EIPAssociation
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EIPAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EIPAssociation'
                AND region = 'us-east-1'
    eip_association:
      name: eip_association
      id: awscc.ec2.eip_association
      x-cfn-schema-name: EIPAssociation
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.AllocationId') as allocation_id,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(Properties, '$.PrivateIpAddress') as private_ip_address,
              JSON_EXTRACT(Properties, '$.EIP') as e_ip
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EIPAssociation'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'AllocationId') as allocation_id,
                json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id,
                json_extract_path_text(Properties, 'InstanceId') as instance_id,
                json_extract_path_text(Properties, 'PrivateIpAddress') as private_ip_address,
                json_extract_path_text(Properties, 'EIP') as e_ip
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EIPAssociation'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    enclave_certificate_iam_role_associations:
      name: enclave_certificate_iam_role_associations
      id: awscc.ec2.enclave_certificate_iam_role_associations
      x-cfn-schema-name: EnclaveCertificateIamRoleAssociation
      x-type: list
      x-identifiers:
        - CertificateArn
        - RoleArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EnclaveCertificateIamRoleAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CertificateArn') as certificate_arn,
                json_extract_path_text(Properties, 'RoleArn') as role_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::EnclaveCertificateIamRoleAssociation'
                AND region = 'us-east-1'
    enclave_certificate_iam_role_association:
      name: enclave_certificate_iam_role_association
      id: awscc.ec2.enclave_certificate_iam_role_association
      x-cfn-schema-name: EnclaveCertificateIamRoleAssociation
      x-type: get
      x-identifiers:
        - CertificateArn
        - RoleArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.CertificateS3BucketName') as certificate_s3_bucket_name,
              JSON_EXTRACT(Properties, '$.CertificateS3ObjectKey') as certificate_s3_object_key,
              JSON_EXTRACT(Properties, '$.EncryptionKmsKeyId') as encryption_kms_key_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EnclaveCertificateIamRoleAssociation'
              AND data__Identifier = '<CertificateArn>|<RoleArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'CertificateArn') as certificate_arn,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'CertificateS3BucketName') as certificate_s3_bucket_name,
                json_extract_path_text(Properties, 'CertificateS3ObjectKey') as certificate_s3_object_key,
                json_extract_path_text(Properties, 'EncryptionKmsKeyId') as encryption_kms_key_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::EnclaveCertificateIamRoleAssociation'
                AND data__Identifier = '<CertificateArn>|<RoleArn>'
                AND region = 'us-east-1'
    flow_logs:
      name: flow_logs
      id: awscc.ec2.flow_logs
      x-cfn-schema-name: FlowLog
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::FlowLog'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::FlowLog'
                AND region = 'us-east-1'
    flow_log:
      name: flow_log
      id: awscc.ec2.flow_log
      x-cfn-schema-name: FlowLog
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.DeliverCrossAccountRole') as deliver_cross_account_role,
              JSON_EXTRACT(Properties, '$.DeliverLogsPermissionArn') as deliver_logs_permission_arn,
              JSON_EXTRACT(Properties, '$.LogDestination') as log_destination,
              JSON_EXTRACT(Properties, '$.LogDestinationType') as log_destination_type,
              JSON_EXTRACT(Properties, '$.LogFormat') as log_format,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.MaxAggregationInterval') as max_aggregation_interval,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TrafficType') as traffic_type,
              JSON_EXTRACT(Properties, '$.DestinationOptions') as destination_options
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::FlowLog'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'DeliverCrossAccountRole') as deliver_cross_account_role,
                json_extract_path_text(Properties, 'DeliverLogsPermissionArn') as deliver_logs_permission_arn,
                json_extract_path_text(Properties, 'LogDestination') as log_destination,
                json_extract_path_text(Properties, 'LogDestinationType') as log_destination_type,
                json_extract_path_text(Properties, 'LogFormat') as log_format,
                json_extract_path_text(Properties, 'LogGroupName') as log_group_name,
                json_extract_path_text(Properties, 'MaxAggregationInterval') as max_aggregation_interval,
                json_extract_path_text(Properties, 'ResourceId') as resource_id,
                json_extract_path_text(Properties, 'ResourceType') as resource_type,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TrafficType') as traffic_type,
                json_extract_path_text(Properties, 'DestinationOptions') as destination_options
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::FlowLog'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    gateway_route_table_association:
      name: gateway_route_table_association
      id: awscc.ec2.gateway_route_table_association
      x-cfn-schema-name: GatewayRouteTableAssociation
      x-type: get
      x-identifiers:
        - GatewayId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RouteTableId') as route_table_id,
              JSON_EXTRACT(Properties, '$.GatewayId') as gateway_id,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::GatewayRouteTableAssociation'
              AND data__Identifier = '<GatewayId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'RouteTableId') as route_table_id,
                json_extract_path_text(Properties, 'GatewayId') as gateway_id,
                json_extract_path_text(Properties, 'AssociationId') as association_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::GatewayRouteTableAssociation'
                AND data__Identifier = '<GatewayId>'
                AND region = 'us-east-1'
    hosts:
      name: hosts
      id: awscc.ec2.hosts
      x-cfn-schema-name: Host
      x-type: list
      x-identifiers:
        - HostId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.HostId') as host_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Host'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'HostId') as host_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Host'
                AND region = 'us-east-1'
    host:
      name: host
      id: awscc.ec2.host
      x-cfn-schema-name: Host
      x-type: get
      x-identifiers:
        - HostId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.HostId') as host_id,
              JSON_EXTRACT(Properties, '$.AutoPlacement') as auto_placement,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.HostRecovery') as host_recovery,
              JSON_EXTRACT(Properties, '$.InstanceType') as instance_type,
              JSON_EXTRACT(Properties, '$.InstanceFamily') as instance_family,
              JSON_EXTRACT(Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(Properties, '$.HostMaintenance') as host_maintenance,
              JSON_EXTRACT(Properties, '$.AssetId') as asset_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Host'
              AND data__Identifier = '<HostId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'HostId') as host_id,
                json_extract_path_text(Properties, 'AutoPlacement') as auto_placement,
                json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                json_extract_path_text(Properties, 'HostRecovery') as host_recovery,
                json_extract_path_text(Properties, 'InstanceType') as instance_type,
                json_extract_path_text(Properties, 'InstanceFamily') as instance_family,
                json_extract_path_text(Properties, 'OutpostArn') as outpost_arn,
                json_extract_path_text(Properties, 'HostMaintenance') as host_maintenance,
                json_extract_path_text(Properties, 'AssetId') as asset_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Host'
                AND data__Identifier = '<HostId>'
                AND region = 'us-east-1'
    instance_connect_endpoints:
      name: instance_connect_endpoints
      id: awscc.ec2.instance_connect_endpoints
      x-cfn-schema-name: InstanceConnectEndpoint
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
                AND region = 'us-east-1'
    instance_connect_endpoint:
      name: instance_connect_endpoint
      id: awscc.ec2.instance_connect_endpoint
      x-cfn-schema-name: InstanceConnectEndpoint
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.ClientToken') as client_token,
              JSON_EXTRACT(Properties, '$.PreserveClientIp') as preserve_client_ip,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(Properties, 'ClientToken') as client_token,
                json_extract_path_text(Properties, 'PreserveClientIp') as preserve_client_ip,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::InstanceConnectEndpoint'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    internet_gateways:
      name: internet_gateways
      id: awscc.ec2.internet_gateways
      x-cfn-schema-name: InternetGateway
      x-type: list
      x-identifiers:
        - InternetGatewayId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.InternetGatewayId') as internet_gateway_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::InternetGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'InternetGatewayId') as internet_gateway_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::InternetGateway'
                AND region = 'us-east-1'
    internet_gateway:
      name: internet_gateway
      id: awscc.ec2.internet_gateway
      x-cfn-schema-name: InternetGateway
      x-type: get
      x-identifiers:
        - InternetGatewayId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.InternetGatewayId') as internet_gateway_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::InternetGateway'
              AND data__Identifier = '<InternetGatewayId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'InternetGatewayId') as internet_gateway_id,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::InternetGateway'
                AND data__Identifier = '<InternetGatewayId>'
                AND region = 'us-east-1'
    ipams:
      name: ipams
      id: awscc.ec2.ipams
      x-cfn-schema-name: IPAM
      x-type: list
      x-identifiers:
        - IpamId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamId') as ipam_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAM'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamId') as ipam_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAM'
                AND region = 'us-east-1'
    ipam:
      name: ipam
      id: awscc.ec2.ipam
      x-cfn-schema-name: IPAM
      x-type: get
      x-identifiers:
        - IpamId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamId') as ipam_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DefaultResourceDiscoveryId') as default_resource_discovery_id,
              JSON_EXTRACT(Properties, '$.DefaultResourceDiscoveryAssociationId') as default_resource_discovery_association_id,
              JSON_EXTRACT(Properties, '$.ResourceDiscoveryAssociationCount') as resource_discovery_association_count,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PublicDefaultScopeId') as public_default_scope_id,
              JSON_EXTRACT(Properties, '$.PrivateDefaultScopeId') as private_default_scope_id,
              JSON_EXTRACT(Properties, '$.ScopeCount') as scope_count,
              JSON_EXTRACT(Properties, '$.OperatingRegions') as operating_regions,
              JSON_EXTRACT(Properties, '$.Tier') as tier,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAM'
              AND data__Identifier = '<IpamId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'IpamId') as ipam_id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'DefaultResourceDiscoveryId') as default_resource_discovery_id,
                json_extract_path_text(Properties, 'DefaultResourceDiscoveryAssociationId') as default_resource_discovery_association_id,
                json_extract_path_text(Properties, 'ResourceDiscoveryAssociationCount') as resource_discovery_association_count,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'PublicDefaultScopeId') as public_default_scope_id,
                json_extract_path_text(Properties, 'PrivateDefaultScopeId') as private_default_scope_id,
                json_extract_path_text(Properties, 'ScopeCount') as scope_count,
                json_extract_path_text(Properties, 'OperatingRegions') as operating_regions,
                json_extract_path_text(Properties, 'Tier') as tier,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAM'
                AND data__Identifier = '<IpamId>'
                AND region = 'us-east-1'
    ipam_allocations:
      name: ipam_allocations
      id: awscc.ec2.ipam_allocations
      x-cfn-schema-name: IPAMAllocation
      x-type: list
      x-identifiers:
        - IpamPoolId
        - IpamPoolAllocationId
        - Cidr
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamPoolId') as ipam_pool_id,
              JSON_EXTRACT(Properties, '$.IpamPoolAllocationId') as ipam_pool_allocation_id,
              JSON_EXTRACT(Properties, '$.Cidr') as cidr
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMAllocation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamPoolId') as ipam_pool_id,
                json_extract_path_text(Properties, 'IpamPoolAllocationId') as ipam_pool_allocation_id,
                json_extract_path_text(Properties, 'Cidr') as cidr
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMAllocation'
                AND region = 'us-east-1'
    ipam_allocation:
      name: ipam_allocation
      id: awscc.ec2.ipam_allocation
      x-cfn-schema-name: IPAMAllocation
      x-type: get
      x-identifiers:
        - IpamPoolId
        - IpamPoolAllocationId
        - Cidr
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamPoolAllocationId') as ipam_pool_allocation_id,
              JSON_EXTRACT(Properties, '$.IpamPoolId') as ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Cidr') as cidr,
              JSON_EXTRACT(Properties, '$.NetmaskLength') as netmask_length,
              JSON_EXTRACT(Properties, '$.Description') as description
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMAllocation'
              AND data__Identifier = '<IpamPoolId>|<IpamPoolAllocationId>|<Cidr>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'IpamPoolAllocationId') as ipam_pool_allocation_id,
                json_extract_path_text(Properties, 'IpamPoolId') as ipam_pool_id,
                json_extract_path_text(Properties, 'Cidr') as cidr,
                json_extract_path_text(Properties, 'NetmaskLength') as netmask_length,
                json_extract_path_text(Properties, 'Description') as description
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMAllocation'
                AND data__Identifier = '<IpamPoolId>|<IpamPoolAllocationId>|<Cidr>'
                AND region = 'us-east-1'
    ipam_pools:
      name: ipam_pools
      id: awscc.ec2.ipam_pools
      x-cfn-schema-name: IPAMPool
      x-type: list
      x-identifiers:
        - IpamPoolId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamPoolId') as ipam_pool_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMPool'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamPoolId') as ipam_pool_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMPool'
                AND region = 'us-east-1'
    ipam_pool:
      name: ipam_pool
      id: awscc.ec2.ipam_pool
      x-cfn-schema-name: IPAMPool
      x-type: get
      x-identifiers:
        - IpamPoolId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamPoolId') as ipam_pool_id,
              JSON_EXTRACT(Properties, '$.AddressFamily') as address_family,
              JSON_EXTRACT(Properties, '$.AllocationMinNetmaskLength') as allocation_min_netmask_length,
              JSON_EXTRACT(Properties, '$.AllocationDefaultNetmaskLength') as allocation_default_netmask_length,
              JSON_EXTRACT(Properties, '$.AllocationMaxNetmaskLength') as allocation_max_netmask_length,
              JSON_EXTRACT(Properties, '$.AllocationResourceTags') as allocation_resource_tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AutoImport') as auto_import,
              JSON_EXTRACT(Properties, '$.AwsService') as aws_service,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.IpamScopeId') as ipam_scope_id,
              JSON_EXTRACT(Properties, '$.IpamScopeArn') as ipam_scope_arn,
              JSON_EXTRACT(Properties, '$.IpamScopeType') as ipam_scope_type,
              JSON_EXTRACT(Properties, '$.IpamArn') as ipam_arn,
              JSON_EXTRACT(Properties, '$.Locale') as locale,
              JSON_EXTRACT(Properties, '$.PoolDepth') as pool_depth,
              JSON_EXTRACT(Properties, '$.ProvisionedCidrs') as provisioned_cidrs,
              JSON_EXTRACT(Properties, '$.PublicIpSource') as public_ip_source,
              JSON_EXTRACT(Properties, '$.PubliclyAdvertisable') as publicly_advertisable,
              JSON_EXTRACT(Properties, '$.SourceIpamPoolId') as source_ipam_pool_id,
              JSON_EXTRACT(Properties, '$.SourceResource') as source_resource,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.StateMessage') as state_message,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMPool'
              AND data__Identifier = '<IpamPoolId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'IpamPoolId') as ipam_pool_id,
                json_extract_path_text(Properties, 'AddressFamily') as address_family,
                json_extract_path_text(Properties, 'AllocationMinNetmaskLength') as allocation_min_netmask_length,
                json_extract_path_text(Properties, 'AllocationDefaultNetmaskLength') as allocation_default_netmask_length,
                json_extract_path_text(Properties, 'AllocationMaxNetmaskLength') as allocation_max_netmask_length,
                json_extract_path_text(Properties, 'AllocationResourceTags') as allocation_resource_tags,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'AutoImport') as auto_import,
                json_extract_path_text(Properties, 'AwsService') as aws_service,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'IpamScopeId') as ipam_scope_id,
                json_extract_path_text(Properties, 'IpamScopeArn') as ipam_scope_arn,
                json_extract_path_text(Properties, 'IpamScopeType') as ipam_scope_type,
                json_extract_path_text(Properties, 'IpamArn') as ipam_arn,
                json_extract_path_text(Properties, 'Locale') as locale,
                json_extract_path_text(Properties, 'PoolDepth') as pool_depth,
                json_extract_path_text(Properties, 'ProvisionedCidrs') as provisioned_cidrs,
                json_extract_path_text(Properties, 'PublicIpSource') as public_ip_source,
                json_extract_path_text(Properties, 'PubliclyAdvertisable') as publicly_advertisable,
                json_extract_path_text(Properties, 'SourceIpamPoolId') as source_ipam_pool_id,
                json_extract_path_text(Properties, 'SourceResource') as source_resource,
                json_extract_path_text(Properties, 'State') as state,
                json_extract_path_text(Properties, 'StateMessage') as state_message,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMPool'
                AND data__Identifier = '<IpamPoolId>'
                AND region = 'us-east-1'
    ipam_pool_cidrs:
      name: ipam_pool_cidrs
      id: awscc.ec2.ipam_pool_cidrs
      x-cfn-schema-name: IPAMPoolCidr
      x-type: list
      x-identifiers:
        - IpamPoolId
        - IpamPoolCidrId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamPoolId') as ipam_pool_id,
              JSON_EXTRACT(Properties, '$.IpamPoolCidrId') as ipam_pool_cidr_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMPoolCidr'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamPoolId') as ipam_pool_id,
                json_extract_path_text(Properties, 'IpamPoolCidrId') as ipam_pool_cidr_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMPoolCidr'
                AND region = 'us-east-1'
    ipam_pool_cidr:
      name: ipam_pool_cidr
      id: awscc.ec2.ipam_pool_cidr
      x-cfn-schema-name: IPAMPoolCidr
      x-type: get
      x-identifiers:
        - IpamPoolId
        - IpamPoolCidrId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamPoolCidrId') as ipam_pool_cidr_id,
              JSON_EXTRACT(Properties, '$.IpamPoolId') as ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Cidr') as cidr,
              JSON_EXTRACT(Properties, '$.NetmaskLength') as netmask_length,
              JSON_EXTRACT(Properties, '$.State') as state
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMPoolCidr'
              AND data__Identifier = '<IpamPoolId>|<IpamPoolCidrId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'IpamPoolCidrId') as ipam_pool_cidr_id,
                json_extract_path_text(Properties, 'IpamPoolId') as ipam_pool_id,
                json_extract_path_text(Properties, 'Cidr') as cidr,
                json_extract_path_text(Properties, 'NetmaskLength') as netmask_length,
                json_extract_path_text(Properties, 'State') as state
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMPoolCidr'
                AND data__Identifier = '<IpamPoolId>|<IpamPoolCidrId>'
                AND region = 'us-east-1'
    ipam_resource_discoveries:
      name: ipam_resource_discoveries
      id: awscc.ec2.ipam_resource_discoveries
      x-cfn-schema-name: IPAMResourceDiscovery
      x-type: list
      x-identifiers:
        - IpamResourceDiscoveryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryId') as ipam_resource_discovery_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamResourceDiscoveryId') as ipam_resource_discovery_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
                AND region = 'us-east-1'
    ipam_resource_discovery:
      name: ipam_resource_discovery
      id: awscc.ec2.ipam_resource_discovery
      x-cfn-schema-name: IPAMResourceDiscovery
      x-type: get
      x-identifiers:
        - IpamResourceDiscoveryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryId') as ipam_resource_discovery_id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.OperatingRegions') as operating_regions,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryRegion') as ipam_resource_discovery_region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.IsDefault') as is_default,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryArn') as ipam_resource_discovery_arn,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
              AND data__Identifier = '<IpamResourceDiscoveryId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'IpamResourceDiscoveryId') as ipam_resource_discovery_id,
                json_extract_path_text(Properties, 'OwnerId') as owner_id,
                json_extract_path_text(Properties, 'OperatingRegions') as operating_regions,
                json_extract_path_text(Properties, 'IpamResourceDiscoveryRegion') as ipam_resource_discovery_region,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'IsDefault') as is_default,
                json_extract_path_text(Properties, 'IpamResourceDiscoveryArn') as ipam_resource_discovery_arn,
                json_extract_path_text(Properties, 'State') as state,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscovery'
                AND data__Identifier = '<IpamResourceDiscoveryId>'
                AND region = 'us-east-1'
    ipam_resource_discovery_associations:
      name: ipam_resource_discovery_associations
      id: awscc.ec2.ipam_resource_discovery_associations
      x-cfn-schema-name: IPAMResourceDiscoveryAssociation
      x-type: list
      x-identifiers:
        - IpamResourceDiscoveryAssociationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryAssociationId') as ipam_resource_discovery_association_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamResourceDiscoveryAssociationId') as ipam_resource_discovery_association_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
                AND region = 'us-east-1'
    ipam_resource_discovery_association:
      name: ipam_resource_discovery_association
      id: awscc.ec2.ipam_resource_discovery_association
      x-cfn-schema-name: IPAMResourceDiscoveryAssociation
      x-type: get
      x-identifiers:
        - IpamResourceDiscoveryAssociationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamArn') as ipam_arn,
              JSON_EXTRACT(Properties, '$.IpamRegion') as ipam_region,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryAssociationId') as ipam_resource_discovery_association_id,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryId') as ipam_resource_discovery_id,
              JSON_EXTRACT(Properties, '$.IpamId') as ipam_id,
              JSON_EXTRACT(Properties, '$.IpamResourceDiscoveryAssociationArn') as ipam_resource_discovery_association_arn,
              JSON_EXTRACT(Properties, '$.IsDefault') as is_default,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.ResourceDiscoveryStatus') as resource_discovery_status,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
              AND data__Identifier = '<IpamResourceDiscoveryAssociationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'IpamArn') as ipam_arn,
                json_extract_path_text(Properties, 'IpamRegion') as ipam_region,
                json_extract_path_text(Properties, 'IpamResourceDiscoveryAssociationId') as ipam_resource_discovery_association_id,
                json_extract_path_text(Properties, 'IpamResourceDiscoveryId') as ipam_resource_discovery_id,
                json_extract_path_text(Properties, 'IpamId') as ipam_id,
                json_extract_path_text(Properties, 'IpamResourceDiscoveryAssociationArn') as ipam_resource_discovery_association_arn,
                json_extract_path_text(Properties, 'IsDefault') as is_default,
                json_extract_path_text(Properties, 'OwnerId') as owner_id,
                json_extract_path_text(Properties, 'State') as state,
                json_extract_path_text(Properties, 'ResourceDiscoveryStatus') as resource_discovery_status,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMResourceDiscoveryAssociation'
                AND data__Identifier = '<IpamResourceDiscoveryAssociationId>'
                AND region = 'us-east-1'
    ipam_scopes:
      name: ipam_scopes
      id: awscc.ec2.ipam_scopes
      x-cfn-schema-name: IPAMScope
      x-type: list
      x-identifiers:
        - IpamScopeId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IpamScopeId') as ipam_scope_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMScope'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IpamScopeId') as ipam_scope_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::IPAMScope'
                AND region = 'us-east-1'
    ipam_scope:
      name: ipam_scope
      id: awscc.ec2.ipam_scope
      x-cfn-schema-name: IPAMScope
      x-type: get
      x-identifiers:
        - IpamScopeId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpamScopeId') as ipam_scope_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.IpamId') as ipam_id,
              JSON_EXTRACT(Properties, '$.IpamArn') as ipam_arn,
              JSON_EXTRACT(Properties, '$.IpamScopeType') as ipam_scope_type,
              JSON_EXTRACT(Properties, '$.IsDefault') as is_default,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PoolCount') as pool_count,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMScope'
              AND data__Identifier = '<IpamScopeId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'IpamScopeId') as ipam_scope_id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'IpamId') as ipam_id,
                json_extract_path_text(Properties, 'IpamArn') as ipam_arn,
                json_extract_path_text(Properties, 'IpamScopeType') as ipam_scope_type,
                json_extract_path_text(Properties, 'IsDefault') as is_default,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'PoolCount') as pool_count,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::IPAMScope'
                AND data__Identifier = '<IpamScopeId>'
                AND region = 'us-east-1'
    key_pairs:
      name: key_pairs
      id: awscc.ec2.key_pairs
      x-cfn-schema-name: KeyPair
      x-type: list
      x-identifiers:
        - KeyName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.KeyName') as key_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::KeyPair'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'KeyName') as key_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::KeyPair'
                AND region = 'us-east-1'
    key_pair:
      name: key_pair
      id: awscc.ec2.key_pair
      x-cfn-schema-name: KeyPair
      x-type: get
      x-identifiers:
        - KeyName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.KeyName') as key_name,
              JSON_EXTRACT(Properties, '$.KeyType') as key_type,
              JSON_EXTRACT(Properties, '$.KeyFormat') as key_format,
              JSON_EXTRACT(Properties, '$.PublicKeyMaterial') as public_key_material,
              JSON_EXTRACT(Properties, '$.KeyFingerprint') as key_fingerprint,
              JSON_EXTRACT(Properties, '$.KeyPairId') as key_pair_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::KeyPair'
              AND data__Identifier = '<KeyName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'KeyName') as key_name,
                json_extract_path_text(Properties, 'KeyType') as key_type,
                json_extract_path_text(Properties, 'KeyFormat') as key_format,
                json_extract_path_text(Properties, 'PublicKeyMaterial') as public_key_material,
                json_extract_path_text(Properties, 'KeyFingerprint') as key_fingerprint,
                json_extract_path_text(Properties, 'KeyPairId') as key_pair_id,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::KeyPair'
                AND data__Identifier = '<KeyName>'
                AND region = 'us-east-1'
    network_interfaces:
      name: network_interfaces
      id: awscc.ec2.network_interfaces
      x-cfn-schema-name: NetworkInterface
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInterface'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInterface'
                AND region = 'us-east-1'
    network_interface:
      name: network_interface
      id: awscc.ec2.network_interface
      x-cfn-schema-name: NetworkInterface
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PrivateIpAddress') as private_ip_address,
              JSON_EXTRACT(Properties, '$.PrivateIpAddresses') as private_ip_addresses,
              JSON_EXTRACT(Properties, '$.SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
              JSON_EXTRACT(Properties, '$.PrimaryPrivateIpAddress') as primary_private_ip_address,
              JSON_EXTRACT(Properties, '$.Ipv4Prefixes') as ipv4_prefixes,
              JSON_EXTRACT(Properties, '$.Ipv4PrefixCount') as ipv4_prefix_count,
              JSON_EXTRACT(Properties, '$.GroupSet') as group_set,
              JSON_EXTRACT(Properties, '$.Ipv6Addresses') as ipv6_addresses,
              JSON_EXTRACT(Properties, '$.Ipv6Prefixes') as ipv6_prefixes,
              JSON_EXTRACT(Properties, '$.Ipv6PrefixCount') as ipv6_prefix_count,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.SourceDestCheck') as source_dest_check,
              JSON_EXTRACT(Properties, '$.InterfaceType') as interface_type,
              JSON_EXTRACT(Properties, '$.SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
              JSON_EXTRACT(Properties, '$.Ipv6AddressCount') as ipv6_address_count,
              JSON_EXTRACT(Properties, '$.EnablePrimaryIpv6') as enable_primary_ipv6,
              JSON_EXTRACT(Properties, '$.PrimaryIpv6Address') as primary_ipv6_address,
              JSON_EXTRACT(Properties, '$.ConnectionTrackingSpecification') as connection_tracking_specification,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInterface'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'PrivateIpAddress') as private_ip_address,
                json_extract_path_text(Properties, 'PrivateIpAddresses') as private_ip_addresses,
                json_extract_path_text(Properties, 'SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
                json_extract_path_text(Properties, 'PrimaryPrivateIpAddress') as primary_private_ip_address,
                json_extract_path_text(Properties, 'Ipv4Prefixes') as ipv4_prefixes,
                json_extract_path_text(Properties, 'Ipv4PrefixCount') as ipv4_prefix_count,
                json_extract_path_text(Properties, 'GroupSet') as group_set,
                json_extract_path_text(Properties, 'Ipv6Addresses') as ipv6_addresses,
                json_extract_path_text(Properties, 'Ipv6Prefixes') as ipv6_prefixes,
                json_extract_path_text(Properties, 'Ipv6PrefixCount') as ipv6_prefix_count,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(Properties, 'SourceDestCheck') as source_dest_check,
                json_extract_path_text(Properties, 'InterfaceType') as interface_type,
                json_extract_path_text(Properties, 'SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
                json_extract_path_text(Properties, 'Ipv6AddressCount') as ipv6_address_count,
                json_extract_path_text(Properties, 'EnablePrimaryIpv6') as enable_primary_ipv6,
                json_extract_path_text(Properties, 'PrimaryIpv6Address') as primary_ipv6_address,
                json_extract_path_text(Properties, 'ConnectionTrackingSpecification') as connection_tracking_specification,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInterface'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    launch_templates:
      name: launch_templates
      id: awscc.ec2.launch_templates
      x-cfn-schema-name: LaunchTemplate
      x-type: list
      x-identifiers:
        - LaunchTemplateId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LaunchTemplateId') as launch_template_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LaunchTemplate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LaunchTemplateId') as launch_template_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LaunchTemplate'
                AND region = 'us-east-1'
    launch_template:
      name: launch_template
      id: awscc.ec2.launch_template
      x-cfn-schema-name: LaunchTemplate
      x-type: get
      x-identifiers:
        - LaunchTemplateId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LaunchTemplateName') as launch_template_name,
              JSON_EXTRACT(Properties, '$.LaunchTemplateData') as launch_template_data,
              JSON_EXTRACT(Properties, '$.VersionDescription') as version_description,
              JSON_EXTRACT(Properties, '$.TagSpecifications') as tag_specifications,
              JSON_EXTRACT(Properties, '$.LatestVersionNumber') as latest_version_number,
              JSON_EXTRACT(Properties, '$.LaunchTemplateId') as launch_template_id,
              JSON_EXTRACT(Properties, '$.DefaultVersionNumber') as default_version_number
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LaunchTemplate'
              AND data__Identifier = '<LaunchTemplateId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'LaunchTemplateName') as launch_template_name,
                json_extract_path_text(Properties, 'LaunchTemplateData') as launch_template_data,
                json_extract_path_text(Properties, 'VersionDescription') as version_description,
                json_extract_path_text(Properties, 'TagSpecifications') as tag_specifications,
                json_extract_path_text(Properties, 'LatestVersionNumber') as latest_version_number,
                json_extract_path_text(Properties, 'LaunchTemplateId') as launch_template_id,
                json_extract_path_text(Properties, 'DefaultVersionNumber') as default_version_number
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LaunchTemplate'
                AND data__Identifier = '<LaunchTemplateId>'
                AND region = 'us-east-1'
    local_gateway_routes:
      name: local_gateway_routes
      id: awscc.ec2.local_gateway_routes
      x-cfn-schema-name: LocalGatewayRoute
      x-type: list
      x-identifiers:
        - DestinationCidrBlock
        - LocalGatewayRouteTableId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DestinationCidrBlock') as destination_cidr_block,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRoute'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DestinationCidrBlock') as destination_cidr_block,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRoute'
                AND region = 'us-east-1'
    local_gateway_route:
      name: local_gateway_route
      id: awscc.ec2.local_gateway_route
      x-cfn-schema-name: LocalGatewayRoute
      x-type: get
      x-identifiers:
        - DestinationCidrBlock
        - LocalGatewayRouteTableId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DestinationCidrBlock') as destination_cidr_block,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRoute'
              AND data__Identifier = '<DestinationCidrBlock>|<LocalGatewayRouteTableId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DestinationCidrBlock') as destination_cidr_block,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                json_extract_path_text(Properties, 'LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
                json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id,
                json_extract_path_text(Properties, 'State') as state,
                json_extract_path_text(Properties, 'Type') as type
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRoute'
                AND data__Identifier = '<DestinationCidrBlock>|<LocalGatewayRouteTableId>'
                AND region = 'us-east-1'
    local_gateway_route_tables:
      name: local_gateway_route_tables
      id: awscc.ec2.local_gateway_route_tables
      x-cfn-schema-name: LocalGatewayRouteTable
      x-type: list
      x-identifiers:
        - LocalGatewayRouteTableId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
                AND region = 'us-east-1'
    local_gateway_route_table:
      name: local_gateway_route_table
      id: awscc.ec2.local_gateway_route_table
      x-cfn-schema-name: LocalGatewayRouteTable
      x-type: get
      x-identifiers:
        - LocalGatewayRouteTableId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
              JSON_EXTRACT(Properties, '$.LocalGatewayId') as local_gateway_id,
              JSON_EXTRACT(Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Mode') as mode,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
              AND data__Identifier = '<LocalGatewayRouteTableId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
                json_extract_path_text(Properties, 'LocalGatewayId') as local_gateway_id,
                json_extract_path_text(Properties, 'OutpostArn') as outpost_arn,
                json_extract_path_text(Properties, 'OwnerId') as owner_id,
                json_extract_path_text(Properties, 'State') as state,
                json_extract_path_text(Properties, 'Mode') as mode,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTable'
                AND data__Identifier = '<LocalGatewayRouteTableId>'
                AND region = 'us-east-1'
    local_gateway_route_table_virtual_interface_group_associations:
      name: local_gateway_route_table_virtual_interface_group_associations
      id: awscc.ec2.local_gateway_route_table_virtual_interface_group_associations
      x-cfn-schema-name: LocalGatewayRouteTableVirtualInterfaceGroupAssociation
      x-type: list
      x-identifiers:
        - LocalGatewayRouteTableVirtualInterfaceGroupAssociationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId') as local_gateway_route_table_virtual_interface_group_association_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableVirtualInterfaceGroupAssociationId') as local_gateway_route_table_virtual_interface_group_association_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
                AND region = 'us-east-1'
    local_gateway_route_table_virtual_interface_group_association:
      name: local_gateway_route_table_virtual_interface_group_association
      id: awscc.ec2.local_gateway_route_table_virtual_interface_group_association
      x-cfn-schema-name: LocalGatewayRouteTableVirtualInterfaceGroupAssociation
      x-type: get
      x-identifiers:
        - LocalGatewayRouteTableVirtualInterfaceGroupAssociationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableVirtualInterfaceGroupAssociationId') as local_gateway_route_table_virtual_interface_group_association_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayId') as local_gateway_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
              JSON_EXTRACT(Properties, '$.LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
              AND data__Identifier = '<LocalGatewayRouteTableVirtualInterfaceGroupAssociationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableVirtualInterfaceGroupAssociationId') as local_gateway_route_table_virtual_interface_group_association_id,
                json_extract_path_text(Properties, 'LocalGatewayId') as local_gateway_id,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableArn') as local_gateway_route_table_arn,
                json_extract_path_text(Properties, 'LocalGatewayVirtualInterfaceGroupId') as local_gateway_virtual_interface_group_id,
                json_extract_path_text(Properties, 'OwnerId') as owner_id,
                json_extract_path_text(Properties, 'State') as state,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVirtualInterfaceGroupAssociation'
                AND data__Identifier = '<LocalGatewayRouteTableVirtualInterfaceGroupAssociationId>'
                AND region = 'us-east-1'
    local_gateway_route_tablevpc_associations:
      name: local_gateway_route_tablevpc_associations
      id: awscc.ec2.local_gateway_route_tablevpc_associations
      x-cfn-schema-name: LocalGatewayRouteTableVPCAssociation
      x-type: list
      x-identifiers:
        - LocalGatewayRouteTableVpcAssociationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableVpcAssociationId') as local_gateway_route_table_vpc_association_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableVpcAssociationId') as local_gateway_route_table_vpc_association_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
                AND region = 'us-east-1'
    local_gateway_route_tablevpc_association:
      name: local_gateway_route_tablevpc_association
      id: awscc.ec2.local_gateway_route_tablevpc_association
      x-cfn-schema-name: LocalGatewayRouteTableVPCAssociation
      x-type: get
      x-identifiers:
        - LocalGatewayRouteTableVpcAssociationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LocalGatewayId') as local_gateway_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableId') as local_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayRouteTableVpcAssociationId') as local_gateway_route_table_vpc_association_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
              AND data__Identifier = '<LocalGatewayRouteTableVpcAssociationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'LocalGatewayId') as local_gateway_id,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableId') as local_gateway_route_table_id,
                json_extract_path_text(Properties, 'LocalGatewayRouteTableVpcAssociationId') as local_gateway_route_table_vpc_association_id,
                json_extract_path_text(Properties, 'State') as state,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::LocalGatewayRouteTableVPCAssociation'
                AND data__Identifier = '<LocalGatewayRouteTableVpcAssociationId>'
                AND region = 'us-east-1'
    nat_gateways:
      name: nat_gateways
      id: awscc.ec2.nat_gateways
      x-cfn-schema-name: NatGateway
      x-type: list
      x-identifiers:
        - NatGatewayId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NatGatewayId') as nat_gateway_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NatGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'NatGatewayId') as nat_gateway_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NatGateway'
                AND region = 'us-east-1'
    nat_gateway:
      name: nat_gateway
      id: awscc.ec2.nat_gateway
      x-cfn-schema-name: NatGateway
      x-type: get
      x-identifiers:
        - NatGatewayId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.NatGatewayId') as nat_gateway_id,
              JSON_EXTRACT(Properties, '$.ConnectivityType') as connectivity_type,
              JSON_EXTRACT(Properties, '$.PrivateIpAddress') as private_ip_address,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.AllocationId') as allocation_id,
              JSON_EXTRACT(Properties, '$.SecondaryAllocationIds') as secondary_allocation_ids,
              JSON_EXTRACT(Properties, '$.SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
              JSON_EXTRACT(Properties, '$.SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
              JSON_EXTRACT(Properties, '$.MaxDrainDurationSeconds') as max_drain_duration_seconds
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NatGateway'
              AND data__Identifier = '<NatGatewayId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(Properties, 'NatGatewayId') as nat_gateway_id,
                json_extract_path_text(Properties, 'ConnectivityType') as connectivity_type,
                json_extract_path_text(Properties, 'PrivateIpAddress') as private_ip_address,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'AllocationId') as allocation_id,
                json_extract_path_text(Properties, 'SecondaryAllocationIds') as secondary_allocation_ids,
                json_extract_path_text(Properties, 'SecondaryPrivateIpAddresses') as secondary_private_ip_addresses,
                json_extract_path_text(Properties, 'SecondaryPrivateIpAddressCount') as secondary_private_ip_address_count,
                json_extract_path_text(Properties, 'MaxDrainDurationSeconds') as max_drain_duration_seconds
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NatGateway'
                AND data__Identifier = '<NatGatewayId>'
                AND region = 'us-east-1'
    network_acls:
      name: network_acls
      id: awscc.ec2.network_acls
      x-cfn-schema-name: NetworkAcl
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkAcl'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkAcl'
                AND region = 'us-east-1'
    network_acl:
      name: network_acl
      id: awscc.ec2.network_acl
      x-cfn-schema-name: NetworkAcl
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkAcl'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'VpcId') as vpc_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkAcl'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    network_insights_access_scopes:
      name: network_insights_access_scopes
      id: awscc.ec2.network_insights_access_scopes
      x-cfn-schema-name: NetworkInsightsAccessScope
      x-type: list
      x-identifiers:
        - NetworkInsightsAccessScopeId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeId') as network_insights_access_scope_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'NetworkInsightsAccessScopeId') as network_insights_access_scope_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
                AND region = 'us-east-1'
    network_insights_access_scope:
      name: network_insights_access_scope
      id: awscc.ec2.network_insights_access_scope
      x-cfn-schema-name: NetworkInsightsAccessScope
      x-type: get
      x-identifiers:
        - NetworkInsightsAccessScopeId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeArn') as network_insights_access_scope_arn,
              JSON_EXTRACT(Properties, '$.CreatedDate') as created_date,
              JSON_EXTRACT(Properties, '$.UpdatedDate') as updated_date,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.MatchPaths') as match_paths,
              JSON_EXTRACT(Properties, '$.ExcludePaths') as exclude_paths
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
              AND data__Identifier = '<NetworkInsightsAccessScopeId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
                json_extract_path_text(Properties, 'NetworkInsightsAccessScopeArn') as network_insights_access_scope_arn,
                json_extract_path_text(Properties, 'CreatedDate') as created_date,
                json_extract_path_text(Properties, 'UpdatedDate') as updated_date,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'MatchPaths') as match_paths,
                json_extract_path_text(Properties, 'ExcludePaths') as exclude_paths
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScope'
                AND data__Identifier = '<NetworkInsightsAccessScopeId>'
                AND region = 'us-east-1'
    network_insights_access_scope_analyses:
      name: network_insights_access_scope_analyses
      id: awscc.ec2.network_insights_access_scope_analyses
      x-cfn-schema-name: NetworkInsightsAccessScopeAnalysis
      x-type: list
      x-identifiers:
        - NetworkInsightsAccessScopeAnalysisId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeAnalysisId') as network_insights_access_scope_analysis_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'NetworkInsightsAccessScopeAnalysisId') as network_insights_access_scope_analysis_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
                AND region = 'us-east-1'
    network_insights_access_scope_analysis:
      name: network_insights_access_scope_analysis
      id: awscc.ec2.network_insights_access_scope_analysis
      x-cfn-schema-name: NetworkInsightsAccessScopeAnalysis
      x-type: get
      x-identifiers:
        - NetworkInsightsAccessScopeAnalysisId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeAnalysisId') as network_insights_access_scope_analysis_id,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeAnalysisArn') as network_insights_access_scope_analysis_arn,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.StartDate') as start_date,
              JSON_EXTRACT(Properties, '$.EndDate') as end_date,
              JSON_EXTRACT(Properties, '$.FindingsFound') as findings_found,
              JSON_EXTRACT(Properties, '$.AnalyzedEniCount') as analyzed_eni_count,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
              AND data__Identifier = '<NetworkInsightsAccessScopeAnalysisId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'NetworkInsightsAccessScopeAnalysisId') as network_insights_access_scope_analysis_id,
                json_extract_path_text(Properties, 'NetworkInsightsAccessScopeAnalysisArn') as network_insights_access_scope_analysis_arn,
                json_extract_path_text(Properties, 'NetworkInsightsAccessScopeId') as network_insights_access_scope_id,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'StatusMessage') as status_message,
                json_extract_path_text(Properties, 'StartDate') as start_date,
                json_extract_path_text(Properties, 'EndDate') as end_date,
                json_extract_path_text(Properties, 'FindingsFound') as findings_found,
                json_extract_path_text(Properties, 'AnalyzedEniCount') as analyzed_eni_count,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAccessScopeAnalysis'
                AND data__Identifier = '<NetworkInsightsAccessScopeAnalysisId>'
                AND region = 'us-east-1'
    network_insights_analyses:
      name: network_insights_analyses
      id: awscc.ec2.network_insights_analyses
      x-cfn-schema-name: NetworkInsightsAnalysis
      x-type: list
      x-identifiers:
        - NetworkInsightsAnalysisId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAnalysisId') as network_insights_analysis_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'NetworkInsightsAnalysisId') as network_insights_analysis_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
                AND region = 'us-east-1'
    network_insights_analysis:
      name: network_insights_analysis
      id: awscc.ec2.network_insights_analysis
      x-cfn-schema-name: NetworkInsightsAnalysis
      x-type: get
      x-identifiers:
        - NetworkInsightsAnalysisId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.ReturnPathComponents') as return_path_components,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAnalysisId') as network_insights_analysis_id,
              JSON_EXTRACT(Properties, '$.NetworkInsightsPathId') as network_insights_path_id,
              JSON_EXTRACT(Properties, '$.NetworkPathFound') as network_path_found,
              JSON_EXTRACT(Properties, '$.SuggestedAccounts') as suggested_accounts,
              JSON_EXTRACT(Properties, '$.FilterInArns') as filter_in_arns,
              JSON_EXTRACT(Properties, '$.NetworkInsightsAnalysisArn') as network_insights_analysis_arn,
              JSON_EXTRACT(Properties, '$.StatusMessage') as status_message,
              JSON_EXTRACT(Properties, '$.StartDate') as start_date,
              JSON_EXTRACT(Properties, '$.AlternatePathHints') as alternate_path_hints,
              JSON_EXTRACT(Properties, '$.Explanations') as explanations,
              JSON_EXTRACT(Properties, '$.ForwardPathComponents') as forward_path_components,
              JSON_EXTRACT(Properties, '$.AdditionalAccounts') as additional_accounts,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
              AND data__Identifier = '<NetworkInsightsAnalysisId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'ReturnPathComponents') as return_path_components,
                json_extract_path_text(Properties, 'NetworkInsightsAnalysisId') as network_insights_analysis_id,
                json_extract_path_text(Properties, 'NetworkInsightsPathId') as network_insights_path_id,
                json_extract_path_text(Properties, 'NetworkPathFound') as network_path_found,
                json_extract_path_text(Properties, 'SuggestedAccounts') as suggested_accounts,
                json_extract_path_text(Properties, 'FilterInArns') as filter_in_arns,
                json_extract_path_text(Properties, 'NetworkInsightsAnalysisArn') as network_insights_analysis_arn,
                json_extract_path_text(Properties, 'StatusMessage') as status_message,
                json_extract_path_text(Properties, 'StartDate') as start_date,
                json_extract_path_text(Properties, 'AlternatePathHints') as alternate_path_hints,
                json_extract_path_text(Properties, 'Explanations') as explanations,
                json_extract_path_text(Properties, 'ForwardPathComponents') as forward_path_components,
                json_extract_path_text(Properties, 'AdditionalAccounts') as additional_accounts,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsAnalysis'
                AND data__Identifier = '<NetworkInsightsAnalysisId>'
                AND region = 'us-east-1'
    network_insights_paths:
      name: network_insights_paths
      id: awscc.ec2.network_insights_paths
      x-cfn-schema-name: NetworkInsightsPath
      x-type: list
      x-identifiers:
        - NetworkInsightsPathId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.NetworkInsightsPathId') as network_insights_path_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsPath'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'NetworkInsightsPathId') as network_insights_path_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInsightsPath'
                AND region = 'us-east-1'
    network_insights_path:
      name: network_insights_path
      id: awscc.ec2.network_insights_path
      x-cfn-schema-name: NetworkInsightsPath
      x-type: get
      x-identifiers:
        - NetworkInsightsPathId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.NetworkInsightsPathId') as network_insights_path_id,
              JSON_EXTRACT(Properties, '$.NetworkInsightsPathArn') as network_insights_path_arn,
              JSON_EXTRACT(Properties, '$.CreatedDate') as created_date,
              JSON_EXTRACT(Properties, '$.SourceIp') as source_ip,
              JSON_EXTRACT(Properties, '$.FilterAtSource') as filter_at_source,
              JSON_EXTRACT(Properties, '$.FilterAtDestination') as filter_at_destination,
              JSON_EXTRACT(Properties, '$.DestinationIp') as destination_ip,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.Destination') as destination,
              JSON_EXTRACT(Properties, '$.SourceArn') as source_arn,
              JSON_EXTRACT(Properties, '$.DestinationArn') as destination_arn,
              JSON_EXTRACT(Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(Properties, '$.DestinationPort') as destination_port,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsPath'
              AND data__Identifier = '<NetworkInsightsPathId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'NetworkInsightsPathId') as network_insights_path_id,
                json_extract_path_text(Properties, 'NetworkInsightsPathArn') as network_insights_path_arn,
                json_extract_path_text(Properties, 'CreatedDate') as created_date,
                json_extract_path_text(Properties, 'SourceIp') as source_ip,
                json_extract_path_text(Properties, 'FilterAtSource') as filter_at_source,
                json_extract_path_text(Properties, 'FilterAtDestination') as filter_at_destination,
                json_extract_path_text(Properties, 'DestinationIp') as destination_ip,
                json_extract_path_text(Properties, 'Source') as source,
                json_extract_path_text(Properties, 'Destination') as destination,
                json_extract_path_text(Properties, 'SourceArn') as source_arn,
                json_extract_path_text(Properties, 'DestinationArn') as destination_arn,
                json_extract_path_text(Properties, 'Protocol') as protocol,
                json_extract_path_text(Properties, 'DestinationPort') as destination_port,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInsightsPath'
                AND data__Identifier = '<NetworkInsightsPathId>'
                AND region = 'us-east-1'
    network_interface_attachments:
      name: network_interface_attachments
      id: awscc.ec2.network_interface_attachments
      x-cfn-schema-name: NetworkInterfaceAttachment
      x-type: list
      x-identifiers:
        - AttachmentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInterfaceAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AttachmentId') as attachment_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkInterfaceAttachment'
                AND region = 'us-east-1'
    network_interface_attachment:
      name: network_interface_attachment
      id: awscc.ec2.network_interface_attachment
      x-cfn-schema-name: NetworkInterfaceAttachment
      x-type: get
      x-identifiers:
        - AttachmentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AttachmentId') as attachment_id,
              JSON_EXTRACT(Properties, '$.DeleteOnTermination') as delete_on_termination,
              JSON_EXTRACT(Properties, '$.DeviceIndex') as device_index,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id,
              JSON_EXTRACT(Properties, '$.EnaSrdSpecification') as ena_srd_specification
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInterfaceAttachment'
              AND data__Identifier = '<AttachmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AttachmentId') as attachment_id,
                json_extract_path_text(Properties, 'DeleteOnTermination') as delete_on_termination,
                json_extract_path_text(Properties, 'DeviceIndex') as device_index,
                json_extract_path_text(Properties, 'InstanceId') as instance_id,
                json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id,
                json_extract_path_text(Properties, 'EnaSrdSpecification') as ena_srd_specification
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkInterfaceAttachment'
                AND data__Identifier = '<AttachmentId>'
                AND region = 'us-east-1'
    network_performance_metric_subscriptions:
      name: network_performance_metric_subscriptions
      id: awscc.ec2.network_performance_metric_subscriptions
      x-cfn-schema-name: NetworkPerformanceMetricSubscription
      x-type: list
      x-identifiers:
        - Source
        - Destination
        - Metric
        - Statistic
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.Destination') as destination,
              JSON_EXTRACT(Properties, '$.Metric') as metric,
              JSON_EXTRACT(Properties, '$.Statistic') as statistic
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkPerformanceMetricSubscription'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Source') as source,
                json_extract_path_text(Properties, 'Destination') as destination,
                json_extract_path_text(Properties, 'Metric') as metric,
                json_extract_path_text(Properties, 'Statistic') as statistic
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::NetworkPerformanceMetricSubscription'
                AND region = 'us-east-1'
    network_performance_metric_subscription:
      name: network_performance_metric_subscription
      id: awscc.ec2.network_performance_metric_subscription
      x-cfn-schema-name: NetworkPerformanceMetricSubscription
      x-type: get
      x-identifiers:
        - Source
        - Destination
        - Metric
        - Statistic
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.Destination') as destination,
              JSON_EXTRACT(Properties, '$.Metric') as metric,
              JSON_EXTRACT(Properties, '$.Statistic') as statistic
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkPerformanceMetricSubscription'
              AND data__Identifier = '<Source>|<Destination>|<Metric>|<Statistic>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Source') as source,
                json_extract_path_text(Properties, 'Destination') as destination,
                json_extract_path_text(Properties, 'Metric') as metric,
                json_extract_path_text(Properties, 'Statistic') as statistic
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::NetworkPerformanceMetricSubscription'
                AND data__Identifier = '<Source>|<Destination>|<Metric>|<Statistic>'
                AND region = 'us-east-1'
    placement_groups:
      name: placement_groups
      id: awscc.ec2.placement_groups
      x-cfn-schema-name: PlacementGroup
      x-type: list
      x-identifiers:
        - GroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::PlacementGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GroupName') as group_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::PlacementGroup'
                AND region = 'us-east-1'
    placement_group:
      name: placement_group
      id: awscc.ec2.placement_group
      x-cfn-schema-name: PlacementGroup
      x-type: get
      x-identifiers:
        - GroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Strategy') as strategy,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name,
              JSON_EXTRACT(Properties, '$.SpreadLevel') as spread_level,
              JSON_EXTRACT(Properties, '$.PartitionCount') as partition_count,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::PlacementGroup'
              AND data__Identifier = '<GroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Strategy') as strategy,
                json_extract_path_text(Properties, 'GroupName') as group_name,
                json_extract_path_text(Properties, 'SpreadLevel') as spread_level,
                json_extract_path_text(Properties, 'PartitionCount') as partition_count,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::PlacementGroup'
                AND data__Identifier = '<GroupName>'
                AND region = 'us-east-1'
    prefix_lists:
      name: prefix_lists
      id: awscc.ec2.prefix_lists
      x-cfn-schema-name: PrefixList
      x-type: list
      x-identifiers:
        - PrefixListId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PrefixListId') as prefix_list_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::PrefixList'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PrefixListId') as prefix_list_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::PrefixList'
                AND region = 'us-east-1'
    prefix_list:
      name: prefix_list
      id: awscc.ec2.prefix_list
      x-cfn-schema-name: PrefixList
      x-type: get
      x-identifiers:
        - PrefixListId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PrefixListName') as prefix_list_name,
              JSON_EXTRACT(Properties, '$.PrefixListId') as prefix_list_id,
              JSON_EXTRACT(Properties, '$.OwnerId') as owner_id,
              JSON_EXTRACT(Properties, '$.AddressFamily') as address_family,
              JSON_EXTRACT(Properties, '$.MaxEntries') as max_entries,
              JSON_EXTRACT(Properties, '$.Version') as version,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Entries') as entries,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::PrefixList'
              AND data__Identifier = '<PrefixListId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'PrefixListName') as prefix_list_name,
                json_extract_path_text(Properties, 'PrefixListId') as prefix_list_id,
                json_extract_path_text(Properties, 'OwnerId') as owner_id,
                json_extract_path_text(Properties, 'AddressFamily') as address_family,
                json_extract_path_text(Properties, 'MaxEntries') as max_entries,
                json_extract_path_text(Properties, 'Version') as version,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Entries') as entries,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::PrefixList'
                AND data__Identifier = '<PrefixListId>'
                AND region = 'us-east-1'
    routes:
      name: routes
      id: awscc.ec2.routes
      x-cfn-schema-name: Route
      x-type: list
      x-identifiers:
        - RouteTableId
        - CidrBlock
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RouteTableId') as route_table_id,
              JSON_EXTRACT(Properties, '$.CidrBlock') as cidr_block
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Route'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RouteTableId') as route_table_id,
                json_extract_path_text(Properties, 'CidrBlock') as cidr_block
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Route'
                AND region = 'us-east-1'
    route:
      name: route
      id: awscc.ec2.route
      x-cfn-schema-name: Route
      x-type: get
      x-identifiers:
        - RouteTableId
        - CidrBlock
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CarrierGatewayId') as carrier_gateway_id,
              JSON_EXTRACT(Properties, '$.CidrBlock') as cidr_block,
              JSON_EXTRACT(Properties, '$.CoreNetworkArn') as core_network_arn,
              JSON_EXTRACT(Properties, '$.DestinationCidrBlock') as destination_cidr_block,
              JSON_EXTRACT(Properties, '$.DestinationIpv6CidrBlock') as destination_ipv6_cidr_block,
              JSON_EXTRACT(Properties, '$.DestinationPrefixListId') as destination_prefix_list_id,
              JSON_EXTRACT(Properties, '$.EgressOnlyInternetGatewayId') as egress_only_internet_gateway_id,
              JSON_EXTRACT(Properties, '$.GatewayId') as gateway_id,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(Properties, '$.LocalGatewayId') as local_gateway_id,
              JSON_EXTRACT(Properties, '$.NatGatewayId') as nat_gateway_id,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id,
              JSON_EXTRACT(Properties, '$.RouteTableId') as route_table_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.VpcEndpointId') as vpc_endpoint_id,
              JSON_EXTRACT(Properties, '$.VpcPeeringConnectionId') as vpc_peering_connection_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Route'
              AND data__Identifier = '<RouteTableId>|<CidrBlock>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'CarrierGatewayId') as carrier_gateway_id,
                json_extract_path_text(Properties, 'CidrBlock') as cidr_block,
                json_extract_path_text(Properties, 'CoreNetworkArn') as core_network_arn,
                json_extract_path_text(Properties, 'DestinationCidrBlock') as destination_cidr_block,
                json_extract_path_text(Properties, 'DestinationIpv6CidrBlock') as destination_ipv6_cidr_block,
                json_extract_path_text(Properties, 'DestinationPrefixListId') as destination_prefix_list_id,
                json_extract_path_text(Properties, 'EgressOnlyInternetGatewayId') as egress_only_internet_gateway_id,
                json_extract_path_text(Properties, 'GatewayId') as gateway_id,
                json_extract_path_text(Properties, 'InstanceId') as instance_id,
                json_extract_path_text(Properties, 'LocalGatewayId') as local_gateway_id,
                json_extract_path_text(Properties, 'NatGatewayId') as nat_gateway_id,
                json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id,
                json_extract_path_text(Properties, 'RouteTableId') as route_table_id,
                json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(Properties, 'VpcEndpointId') as vpc_endpoint_id,
                json_extract_path_text(Properties, 'VpcPeeringConnectionId') as vpc_peering_connection_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Route'
                AND data__Identifier = '<RouteTableId>|<CidrBlock>'
                AND region = 'us-east-1'
    route_tables:
      name: route_tables
      id: awscc.ec2.route_tables
      x-cfn-schema-name: RouteTable
      x-type: list
      x-identifiers:
        - RouteTableId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RouteTableId') as route_table_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::RouteTable'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RouteTableId') as route_table_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::RouteTable'
                AND region = 'us-east-1'
    route_table:
      name: route_table
      id: awscc.ec2.route_table
      x-cfn-schema-name: RouteTable
      x-type: get
      x-identifiers:
        - RouteTableId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RouteTableId') as route_table_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::RouteTable'
              AND data__Identifier = '<RouteTableId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'RouteTableId') as route_table_id,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'VpcId') as vpc_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::RouteTable'
                AND data__Identifier = '<RouteTableId>'
                AND region = 'us-east-1'
    security_group_egresses:
      name: security_group_egresses
      id: awscc.ec2.security_group_egresses
      x-cfn-schema-name: SecurityGroupEgress
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SecurityGroupEgress'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SecurityGroupEgress'
                AND region = 'us-east-1'
    security_group_egress:
      name: security_group_egress
      id: awscc.ec2.security_group_egress
      x-cfn-schema-name: SecurityGroupEgress
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CidrIp') as cidr_ip,
              JSON_EXTRACT(Properties, '$.CidrIpv6') as cidr_ipv6,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FromPort') as from_port,
              JSON_EXTRACT(Properties, '$.ToPort') as to_port,
              JSON_EXTRACT(Properties, '$.IpProtocol') as ip_protocol,
              JSON_EXTRACT(Properties, '$.DestinationSecurityGroupId') as destination_security_group_id,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.DestinationPrefixListId') as destination_prefix_list_id,
              JSON_EXTRACT(Properties, '$.GroupId') as group_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SecurityGroupEgress'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'CidrIp') as cidr_ip,
                json_extract_path_text(Properties, 'CidrIpv6') as cidr_ipv6,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'FromPort') as from_port,
                json_extract_path_text(Properties, 'ToPort') as to_port,
                json_extract_path_text(Properties, 'IpProtocol') as ip_protocol,
                json_extract_path_text(Properties, 'DestinationSecurityGroupId') as destination_security_group_id,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'DestinationPrefixListId') as destination_prefix_list_id,
                json_extract_path_text(Properties, 'GroupId') as group_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SecurityGroupEgress'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    security_group_ingresses:
      name: security_group_ingresses
      id: awscc.ec2.security_group_ingresses
      x-cfn-schema-name: SecurityGroupIngress
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SecurityGroupIngress'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SecurityGroupIngress'
                AND region = 'us-east-1'
    security_group_ingress:
      name: security_group_ingress
      id: awscc.ec2.security_group_ingress
      x-cfn-schema-name: SecurityGroupIngress
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CidrIp') as cidr_ip,
              JSON_EXTRACT(Properties, '$.CidrIpv6') as cidr_ipv6,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FromPort') as from_port,
              JSON_EXTRACT(Properties, '$.GroupId') as group_id,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name,
              JSON_EXTRACT(Properties, '$.IpProtocol') as ip_protocol,
              JSON_EXTRACT(Properties, '$.SourcePrefixListId') as source_prefix_list_id,
              JSON_EXTRACT(Properties, '$.SourceSecurityGroupId') as source_security_group_id,
              JSON_EXTRACT(Properties, '$.SourceSecurityGroupName') as source_security_group_name,
              JSON_EXTRACT(Properties, '$.SourceSecurityGroupOwnerId') as source_security_group_owner_id,
              JSON_EXTRACT(Properties, '$.ToPort') as to_port
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SecurityGroupIngress'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'CidrIp') as cidr_ip,
                json_extract_path_text(Properties, 'CidrIpv6') as cidr_ipv6,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'FromPort') as from_port,
                json_extract_path_text(Properties, 'GroupId') as group_id,
                json_extract_path_text(Properties, 'GroupName') as group_name,
                json_extract_path_text(Properties, 'IpProtocol') as ip_protocol,
                json_extract_path_text(Properties, 'SourcePrefixListId') as source_prefix_list_id,
                json_extract_path_text(Properties, 'SourceSecurityGroupId') as source_security_group_id,
                json_extract_path_text(Properties, 'SourceSecurityGroupName') as source_security_group_name,
                json_extract_path_text(Properties, 'SourceSecurityGroupOwnerId') as source_security_group_owner_id,
                json_extract_path_text(Properties, 'ToPort') as to_port
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SecurityGroupIngress'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    snapshot_block_public_accesses:
      name: snapshot_block_public_accesses
      id: awscc.ec2.snapshot_block_public_accesses
      x-cfn-schema-name: SnapshotBlockPublicAccess
      x-type: list
      x-identifiers:
        - AccountId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SnapshotBlockPublicAccess'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccountId') as account_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SnapshotBlockPublicAccess'
                AND region = 'us-east-1'
    snapshot_block_public_access:
      name: snapshot_block_public_access
      id: awscc.ec2.snapshot_block_public_access
      x-cfn-schema-name: SnapshotBlockPublicAccess
      x-type: get
      x-identifiers:
        - AccountId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SnapshotBlockPublicAccess'
              AND data__Identifier = '<AccountId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'State') as state,
                json_extract_path_text(Properties, 'AccountId') as account_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SnapshotBlockPublicAccess'
                AND data__Identifier = '<AccountId>'
                AND region = 'us-east-1'
    spot_fleets:
      name: spot_fleets
      id: awscc.ec2.spot_fleets
      x-cfn-schema-name: SpotFleet
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SpotFleet'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SpotFleet'
                AND region = 'us-east-1'
    spot_fleet:
      name: spot_fleet
      id: awscc.ec2.spot_fleet
      x-cfn-schema-name: SpotFleet
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.SpotFleetRequestConfigData') as spot_fleet_request_config_data
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SpotFleet'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'SpotFleetRequestConfigData') as spot_fleet_request_config_data
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SpotFleet'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    subnets:
      name: subnets
      id: awscc.ec2.subnets
      x-cfn-schema-name: Subnet
      x-type: list
      x-identifiers:
        - SubnetId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Subnet'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Subnet'
                AND region = 'us-east-1'
    subnet:
      name: subnet
      id: awscc.ec2.subnet
      x-cfn-schema-name: Subnet
      x-type: get
      x-identifiers:
        - SubnetId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AssignIpv6AddressOnCreation') as assign_ipv6_address_on_creation,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.MapPublicIpOnLaunch') as map_public_ip_on_launch,
              JSON_EXTRACT(Properties, '$.NetworkAclAssociationId') as network_acl_association_id,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.AvailabilityZoneId') as availability_zone_id,
              JSON_EXTRACT(Properties, '$.CidrBlock') as cidr_block,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.Ipv6CidrBlocks') as ipv6_cidr_blocks,
              JSON_EXTRACT(Properties, '$.Ipv6CidrBlock') as ipv6_cidr_block,
              JSON_EXTRACT(Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(Properties, '$.Ipv6Native') as ipv6_native,
              JSON_EXTRACT(Properties, '$.EnableDns64') as enable_dns64,
              JSON_EXTRACT(Properties, '$.PrivateDnsNameOptionsOnLaunch') as private_dns_name_options_on_launch,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Ipv4IpamPoolId') as ipv4_ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Ipv4NetmaskLength') as ipv4_netmask_length,
              JSON_EXTRACT(Properties, '$.Ipv6IpamPoolId') as ipv6_ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Ipv6NetmaskLength') as ipv6_netmask_length
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Subnet'
              AND data__Identifier = '<SubnetId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AssignIpv6AddressOnCreation') as assign_ipv6_address_on_creation,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'MapPublicIpOnLaunch') as map_public_ip_on_launch,
                json_extract_path_text(Properties, 'NetworkAclAssociationId') as network_acl_association_id,
                json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                json_extract_path_text(Properties, 'AvailabilityZoneId') as availability_zone_id,
                json_extract_path_text(Properties, 'CidrBlock') as cidr_block,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(Properties, 'Ipv6CidrBlocks') as ipv6_cidr_blocks,
                json_extract_path_text(Properties, 'Ipv6CidrBlock') as ipv6_cidr_block,
                json_extract_path_text(Properties, 'OutpostArn') as outpost_arn,
                json_extract_path_text(Properties, 'Ipv6Native') as ipv6_native,
                json_extract_path_text(Properties, 'EnableDns64') as enable_dns64,
                json_extract_path_text(Properties, 'PrivateDnsNameOptionsOnLaunch') as private_dns_name_options_on_launch,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Ipv4IpamPoolId') as ipv4_ipam_pool_id,
                json_extract_path_text(Properties, 'Ipv4NetmaskLength') as ipv4_netmask_length,
                json_extract_path_text(Properties, 'Ipv6IpamPoolId') as ipv6_ipam_pool_id,
                json_extract_path_text(Properties, 'Ipv6NetmaskLength') as ipv6_netmask_length
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Subnet'
                AND data__Identifier = '<SubnetId>'
                AND region = 'us-east-1'
    subnet_cidr_blocks:
      name: subnet_cidr_blocks
      id: awscc.ec2.subnet_cidr_blocks
      x-cfn-schema-name: SubnetCidrBlock
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SubnetCidrBlock'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SubnetCidrBlock'
                AND region = 'us-east-1'
    subnet_cidr_block:
      name: subnet_cidr_block
      id: awscc.ec2.subnet_cidr_block
      x-cfn-schema-name: SubnetCidrBlock
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Ipv6CidrBlock') as ipv6_cidr_block,
              JSON_EXTRACT(Properties, '$.Ipv6IpamPoolId') as ipv6_ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Ipv6NetmaskLength') as ipv6_netmask_length,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SubnetCidrBlock'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Ipv6CidrBlock') as ipv6_cidr_block,
                json_extract_path_text(Properties, 'Ipv6IpamPoolId') as ipv6_ipam_pool_id,
                json_extract_path_text(Properties, 'Ipv6NetmaskLength') as ipv6_netmask_length,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SubnetCidrBlock'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    subnet_network_acl_associations:
      name: subnet_network_acl_associations
      id: awscc.ec2.subnet_network_acl_associations
      x-cfn-schema-name: SubnetNetworkAclAssociation
      x-type: list
      x-identifiers:
        - AssociationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SubnetNetworkAclAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AssociationId') as association_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SubnetNetworkAclAssociation'
                AND region = 'us-east-1'
    subnet_network_acl_association:
      name: subnet_network_acl_association
      id: awscc.ec2.subnet_network_acl_association
      x-cfn-schema-name: SubnetNetworkAclAssociation
      x-type: get
      x-identifiers:
        - AssociationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.NetworkAclId') as network_acl_id,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SubnetNetworkAclAssociation'
              AND data__Identifier = '<AssociationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(Properties, 'NetworkAclId') as network_acl_id,
                json_extract_path_text(Properties, 'AssociationId') as association_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SubnetNetworkAclAssociation'
                AND data__Identifier = '<AssociationId>'
                AND region = 'us-east-1'
    subnet_route_table_associations:
      name: subnet_route_table_associations
      id: awscc.ec2.subnet_route_table_associations
      x-cfn-schema-name: SubnetRouteTableAssociation
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SubnetRouteTableAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::SubnetRouteTableAssociation'
                AND region = 'us-east-1'
    subnet_route_table_association:
      name: subnet_route_table_association
      id: awscc.ec2.subnet_route_table_association
      x-cfn-schema-name: SubnetRouteTableAssociation
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.RouteTableId') as route_table_id,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SubnetRouteTableAssociation'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'RouteTableId') as route_table_id,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::SubnetRouteTableAssociation'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    transit_gateways:
      name: transit_gateways
      id: awscc.ec2.transit_gateways
      x-cfn-schema-name: TransitGateway
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGateway'
                AND region = 'us-east-1'
    transit_gateway:
      name: transit_gateway
      id: awscc.ec2.transit_gateway
      x-cfn-schema-name: TransitGateway
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AssociationDefaultRouteTableId') as association_default_route_table_id,
              JSON_EXTRACT(Properties, '$.AutoAcceptSharedAttachments') as auto_accept_shared_attachments,
              JSON_EXTRACT(Properties, '$.TransitGatewayArn') as transit_gateway_arn,
              JSON_EXTRACT(Properties, '$.DefaultRouteTablePropagation') as default_route_table_propagation,
              JSON_EXTRACT(Properties, '$.TransitGatewayCidrBlocks') as transit_gateway_cidr_blocks,
              JSON_EXTRACT(Properties, '$.PropagationDefaultRouteTableId') as propagation_default_route_table_id,
              JSON_EXTRACT(Properties, '$.DefaultRouteTableAssociation') as default_route_table_association,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.VpnEcmpSupport') as vpn_ecmp_support,
              JSON_EXTRACT(Properties, '$.DnsSupport') as dns_support,
              JSON_EXTRACT(Properties, '$.MulticastSupport') as multicast_support,
              JSON_EXTRACT(Properties, '$.AmazonSideAsn') as amazon_side_asn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGateway'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'AssociationDefaultRouteTableId') as association_default_route_table_id,
                json_extract_path_text(Properties, 'AutoAcceptSharedAttachments') as auto_accept_shared_attachments,
                json_extract_path_text(Properties, 'TransitGatewayArn') as transit_gateway_arn,
                json_extract_path_text(Properties, 'DefaultRouteTablePropagation') as default_route_table_propagation,
                json_extract_path_text(Properties, 'TransitGatewayCidrBlocks') as transit_gateway_cidr_blocks,
                json_extract_path_text(Properties, 'PropagationDefaultRouteTableId') as propagation_default_route_table_id,
                json_extract_path_text(Properties, 'DefaultRouteTableAssociation') as default_route_table_association,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'VpnEcmpSupport') as vpn_ecmp_support,
                json_extract_path_text(Properties, 'DnsSupport') as dns_support,
                json_extract_path_text(Properties, 'MulticastSupport') as multicast_support,
                json_extract_path_text(Properties, 'AmazonSideAsn') as amazon_side_asn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGateway'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    transit_gateway_attachments:
      name: transit_gateway_attachments
      id: awscc.ec2.transit_gateway_attachments
      x-cfn-schema-name: TransitGatewayAttachment
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
                AND region = 'us-east-1'
    transit_gateway_attachment:
      name: transit_gateway_attachment
      id: awscc.ec2.transit_gateway_attachment
      x-cfn-schema-name: TransitGatewayAttachment
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Options') as options
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Options') as options
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayAttachment'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    transit_gateway_connects:
      name: transit_gateway_connects
      id: awscc.ec2.transit_gateway_connects
      x-cfn-schema-name: TransitGatewayConnect
      x-type: list
      x-identifiers:
        - TransitGatewayAttachmentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayConnect'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayConnect'
                AND region = 'us-east-1'
    transit_gateway_connect:
      name: transit_gateway_connect
      id: awscc.ec2.transit_gateway_connect
      x-cfn-schema-name: TransitGatewayConnect
      x-type: get
      x-identifiers:
        - TransitGatewayAttachmentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
              JSON_EXTRACT(Properties, '$.TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Options') as options
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayConnect'
              AND data__Identifier = '<TransitGatewayAttachmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                json_extract_path_text(Properties, 'TransportTransitGatewayAttachmentId') as transport_transit_gateway_attachment_id,
                json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(Properties, 'State') as state,
                json_extract_path_text(Properties, 'CreationTime') as creation_time,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Options') as options
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayConnect'
                AND data__Identifier = '<TransitGatewayAttachmentId>'
                AND region = 'us-east-1'
    transit_gateway_multicast_domains:
      name: transit_gateway_multicast_domains
      id: awscc.ec2.transit_gateway_multicast_domains
      x-cfn-schema-name: TransitGatewayMulticastDomain
      x-type: list
      x-identifiers:
        - TransitGatewayMulticastDomainId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
                AND region = 'us-east-1'
    transit_gateway_multicast_domain:
      name: transit_gateway_multicast_domain
      id: awscc.ec2.transit_gateway_multicast_domain
      x-cfn-schema-name: TransitGatewayMulticastDomain
      x-type: get
      x-identifiers:
        - TransitGatewayMulticastDomainId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainArn') as transit_gateway_multicast_domain_arn,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Options') as options
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
              AND data__Identifier = '<TransitGatewayMulticastDomainId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                json_extract_path_text(Properties, 'TransitGatewayMulticastDomainArn') as transit_gateway_multicast_domain_arn,
                json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(Properties, 'State') as state,
                json_extract_path_text(Properties, 'CreationTime') as creation_time,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Options') as options
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomain'
                AND data__Identifier = '<TransitGatewayMulticastDomainId>'
                AND region = 'us-east-1'
    transit_gateway_multicast_domain_associations:
      name: transit_gateway_multicast_domain_associations
      id: awscc.ec2.transit_gateway_multicast_domain_associations
      x-cfn-schema-name: TransitGatewayMulticastDomainAssociation
      x-type: list
      x-identifiers:
        - TransitGatewayMulticastDomainId
        - TransitGatewayAttachmentId
        - SubnetId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomainAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomainAssociation'
                AND region = 'us-east-1'
    transit_gateway_multicast_domain_association:
      name: transit_gateway_multicast_domain_association
      id: awscc.ec2.transit_gateway_multicast_domain_association
      x-cfn-schema-name: TransitGatewayMulticastDomainAssociation
      x-type: get
      x-identifiers:
        - TransitGatewayMulticastDomainId
        - TransitGatewayAttachmentId
        - SubnetId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomainAssociation'
              AND data__Identifier = '<TransitGatewayMulticastDomainId>|<TransitGatewayAttachmentId>|<SubnetId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                json_extract_path_text(Properties, 'ResourceId') as resource_id,
                json_extract_path_text(Properties, 'ResourceType') as resource_type,
                json_extract_path_text(Properties, 'State') as state,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastDomainAssociation'
                AND data__Identifier = '<TransitGatewayMulticastDomainId>|<TransitGatewayAttachmentId>|<SubnetId>'
                AND region = 'us-east-1'
    transit_gateway_multicast_group_members:
      name: transit_gateway_multicast_group_members
      id: awscc.ec2.transit_gateway_multicast_group_members
      x-cfn-schema-name: TransitGatewayMulticastGroupMember
      x-type: list
      x-identifiers:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.GroupIpAddress') as group_ip_address,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupMember'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                json_extract_path_text(Properties, 'GroupIpAddress') as group_ip_address,
                json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupMember'
                AND region = 'us-east-1'
    transit_gateway_multicast_group_member:
      name: transit_gateway_multicast_group_member
      id: awscc.ec2.transit_gateway_multicast_group_member
      x-cfn-schema-name: TransitGatewayMulticastGroupMember
      x-type: get
      x-identifiers:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GroupIpAddress') as group_ip_address,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id,
              JSON_EXTRACT(Properties, '$.GroupMember') as group_member,
              JSON_EXTRACT(Properties, '$.GroupSource') as group_source,
              JSON_EXTRACT(Properties, '$.MemberType') as member_type,
              JSON_EXTRACT(Properties, '$.SourceType') as source_type
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupMember'
              AND data__Identifier = '<TransitGatewayMulticastDomainId>|<GroupIpAddress>|<NetworkInterfaceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'GroupIpAddress') as group_ip_address,
                json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(Properties, 'ResourceId') as resource_id,
                json_extract_path_text(Properties, 'ResourceType') as resource_type,
                json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id,
                json_extract_path_text(Properties, 'GroupMember') as group_member,
                json_extract_path_text(Properties, 'GroupSource') as group_source,
                json_extract_path_text(Properties, 'MemberType') as member_type,
                json_extract_path_text(Properties, 'SourceType') as source_type
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupMember'
                AND data__Identifier = '<TransitGatewayMulticastDomainId>|<GroupIpAddress>|<NetworkInterfaceId>'
                AND region = 'us-east-1'
    transit_gateway_multicast_group_sources:
      name: transit_gateway_multicast_group_sources
      id: awscc.ec2.transit_gateway_multicast_group_sources
      x-cfn-schema-name: TransitGatewayMulticastGroupSource
      x-type: list
      x-identifiers:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.GroupIpAddress') as group_ip_address,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupSource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                json_extract_path_text(Properties, 'GroupIpAddress') as group_ip_address,
                json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupSource'
                AND region = 'us-east-1'
    transit_gateway_multicast_group_source:
      name: transit_gateway_multicast_group_source
      id: awscc.ec2.transit_gateway_multicast_group_source
      x-cfn-schema-name: TransitGatewayMulticastGroupSource
      x-type: get
      x-identifiers:
        - TransitGatewayMulticastDomainId
        - GroupIpAddress
        - NetworkInterfaceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GroupIpAddress') as group_ip_address,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
              JSON_EXTRACT(Properties, '$.SubnetId') as subnet_id,
              JSON_EXTRACT(Properties, '$.ResourceId') as resource_id,
              JSON_EXTRACT(Properties, '$.ResourceType') as resource_type,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceId') as network_interface_id,
              JSON_EXTRACT(Properties, '$.GroupMember') as group_member,
              JSON_EXTRACT(Properties, '$.GroupSource') as group_source,
              JSON_EXTRACT(Properties, '$.MemberType') as member_type,
              JSON_EXTRACT(Properties, '$.SourceType') as source_type
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupSource'
              AND data__Identifier = '<TransitGatewayMulticastDomainId>|<GroupIpAddress>|<NetworkInterfaceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'GroupIpAddress') as group_ip_address,
                json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id,
                json_extract_path_text(Properties, 'TransitGatewayMulticastDomainId') as transit_gateway_multicast_domain_id,
                json_extract_path_text(Properties, 'SubnetId') as subnet_id,
                json_extract_path_text(Properties, 'ResourceId') as resource_id,
                json_extract_path_text(Properties, 'ResourceType') as resource_type,
                json_extract_path_text(Properties, 'NetworkInterfaceId') as network_interface_id,
                json_extract_path_text(Properties, 'GroupMember') as group_member,
                json_extract_path_text(Properties, 'GroupSource') as group_source,
                json_extract_path_text(Properties, 'MemberType') as member_type,
                json_extract_path_text(Properties, 'SourceType') as source_type
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayMulticastGroupSource'
                AND data__Identifier = '<TransitGatewayMulticastDomainId>|<GroupIpAddress>|<NetworkInterfaceId>'
                AND region = 'us-east-1'
    transit_gateway_peering_attachments:
      name: transit_gateway_peering_attachments
      id: awscc.ec2.transit_gateway_peering_attachments
      x-cfn-schema-name: TransitGatewayPeeringAttachment
      x-type: list
      x-identifiers:
        - TransitGatewayAttachmentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
                AND region = 'us-east-1'
    transit_gateway_peering_attachment:
      name: transit_gateway_peering_attachment
      id: awscc.ec2.transit_gateway_peering_attachment
      x-cfn-schema-name: TransitGatewayPeeringAttachment
      x-type: get
      x-identifiers:
        - TransitGatewayAttachmentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.PeerTransitGatewayId') as peer_transit_gateway_id,
              JSON_EXTRACT(Properties, '$.PeerAccountId') as peer_account_id,
              JSON_EXTRACT(Properties, '$.State') as state,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.PeerRegion') as peer_region,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TransitGatewayAttachmentId') as transit_gateway_attachment_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
              AND data__Identifier = '<TransitGatewayAttachmentId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(Properties, 'PeerTransitGatewayId') as peer_transit_gateway_id,
                json_extract_path_text(Properties, 'PeerAccountId') as peer_account_id,
                json_extract_path_text(Properties, 'State') as state,
                json_extract_path_text(Properties, 'CreationTime') as creation_time,
                json_extract_path_text(Properties, 'PeerRegion') as peer_region,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TransitGatewayAttachmentId') as transit_gateway_attachment_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayPeeringAttachment'
                AND data__Identifier = '<TransitGatewayAttachmentId>'
                AND region = 'us-east-1'
    transit_gateway_route_tables:
      name: transit_gateway_route_tables
      id: awscc.ec2.transit_gateway_route_tables
      x-cfn-schema-name: TransitGatewayRouteTable
      x-type: list
      x-identifiers:
        - TransitGatewayRouteTableId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
                AND region = 'us-east-1'
    transit_gateway_route_table:
      name: transit_gateway_route_table
      id: awscc.ec2.transit_gateway_route_table
      x-cfn-schema-name: TransitGatewayRouteTable
      x-type: get
      x-identifiers:
        - TransitGatewayRouteTableId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TransitGatewayRouteTableId') as transit_gateway_route_table_id,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
              AND data__Identifier = '<TransitGatewayRouteTableId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'TransitGatewayRouteTableId') as transit_gateway_route_table_id,
                json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayRouteTable'
                AND data__Identifier = '<TransitGatewayRouteTableId>'
                AND region = 'us-east-1'
    transit_gateway_vpc_attachments:
      name: transit_gateway_vpc_attachments
      id: awscc.ec2.transit_gateway_vpc_attachments
      x-cfn-schema-name: TransitGatewayVpcAttachment
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
                AND region = 'us-east-1'
    transit_gateway_vpc_attachment:
      name: transit_gateway_vpc_attachment
      id: awscc.ec2.transit_gateway_vpc_attachment
      x-cfn-schema-name: TransitGatewayVpcAttachment
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Options') as options,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.RemoveSubnetIds') as remove_subnet_ids,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.AddSubnetIds') as add_subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Options') as options,
                json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'RemoveSubnetIds') as remove_subnet_ids,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'AddSubnetIds') as add_subnet_ids,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::TransitGatewayVpcAttachment'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    verified_access_endpoints:
      name: verified_access_endpoints
      id: awscc.ec2.verified_access_endpoints
      x-cfn-schema-name: VerifiedAccessEndpoint
      x-type: list
      x-identifiers:
        - VerifiedAccessEndpointId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VerifiedAccessEndpointId') as verified_access_endpoint_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VerifiedAccessEndpointId') as verified_access_endpoint_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
                AND region = 'us-east-1'
    verified_access_endpoint:
      name: verified_access_endpoint
      id: awscc.ec2.verified_access_endpoint
      x-cfn-schema-name: VerifiedAccessEndpoint
      x-type: get
      x-identifiers:
        - VerifiedAccessEndpointId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VerifiedAccessEndpointId') as verified_access_endpoint_id,
              JSON_EXTRACT(Properties, '$.VerifiedAccessGroupId') as verified_access_group_id,
              JSON_EXTRACT(Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceOptions') as network_interface_options,
              JSON_EXTRACT(Properties, '$.LoadBalancerOptions') as load_balancer_options,
              JSON_EXTRACT(Properties, '$.EndpointType') as endpoint_type,
              JSON_EXTRACT(Properties, '$.EndpointDomain') as endpoint_domain,
              JSON_EXTRACT(Properties, '$.EndpointDomainPrefix') as endpoint_domain_prefix,
              JSON_EXTRACT(Properties, '$.DeviceValidationDomain') as device_validation_domain,
              JSON_EXTRACT(Properties, '$.DomainCertificateArn') as domain_certificate_arn,
              JSON_EXTRACT(Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(Properties, '$.ApplicationDomain') as application_domain,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PolicyEnabled') as policy_enabled,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SseSpecification') as sse_specification
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
              AND data__Identifier = '<VerifiedAccessEndpointId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'VerifiedAccessEndpointId') as verified_access_endpoint_id,
                json_extract_path_text(Properties, 'VerifiedAccessGroupId') as verified_access_group_id,
                json_extract_path_text(Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(Properties, 'NetworkInterfaceOptions') as network_interface_options,
                json_extract_path_text(Properties, 'LoadBalancerOptions') as load_balancer_options,
                json_extract_path_text(Properties, 'EndpointType') as endpoint_type,
                json_extract_path_text(Properties, 'EndpointDomain') as endpoint_domain,
                json_extract_path_text(Properties, 'EndpointDomainPrefix') as endpoint_domain_prefix,
                json_extract_path_text(Properties, 'DeviceValidationDomain') as device_validation_domain,
                json_extract_path_text(Properties, 'DomainCertificateArn') as domain_certificate_arn,
                json_extract_path_text(Properties, 'AttachmentType') as attachment_type,
                json_extract_path_text(Properties, 'ApplicationDomain') as application_domain,
                json_extract_path_text(Properties, 'CreationTime') as creation_time,
                json_extract_path_text(Properties, 'LastUpdatedTime') as last_updated_time,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'PolicyEnabled') as policy_enabled,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'SseSpecification') as sse_specification
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessEndpoint'
                AND data__Identifier = '<VerifiedAccessEndpointId>'
                AND region = 'us-east-1'
    verified_access_groups:
      name: verified_access_groups
      id: awscc.ec2.verified_access_groups
      x-cfn-schema-name: VerifiedAccessGroup
      x-type: list
      x-identifiers:
        - VerifiedAccessGroupId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VerifiedAccessGroupId') as verified_access_group_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VerifiedAccessGroupId') as verified_access_group_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
                AND region = 'us-east-1'
    verified_access_group:
      name: verified_access_group
      id: awscc.ec2.verified_access_group
      x-cfn-schema-name: VerifiedAccessGroup
      x-type: get
      x-identifiers:
        - VerifiedAccessGroupId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VerifiedAccessGroupId') as verified_access_group_id,
              JSON_EXTRACT(Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id,
              JSON_EXTRACT(Properties, '$.VerifiedAccessGroupArn') as verified_access_group_arn,
              JSON_EXTRACT(Properties, '$.Owner') as owner,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PolicyEnabled') as policy_enabled,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SseSpecification') as sse_specification
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
              AND data__Identifier = '<VerifiedAccessGroupId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'VerifiedAccessGroupId') as verified_access_group_id,
                json_extract_path_text(Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id,
                json_extract_path_text(Properties, 'VerifiedAccessGroupArn') as verified_access_group_arn,
                json_extract_path_text(Properties, 'Owner') as owner,
                json_extract_path_text(Properties, 'CreationTime') as creation_time,
                json_extract_path_text(Properties, 'LastUpdatedTime') as last_updated_time,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'PolicyEnabled') as policy_enabled,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'SseSpecification') as sse_specification
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessGroup'
                AND data__Identifier = '<VerifiedAccessGroupId>'
                AND region = 'us-east-1'
    verified_access_trust_providers:
      name: verified_access_trust_providers
      id: awscc.ec2.verified_access_trust_providers
      x-cfn-schema-name: VerifiedAccessTrustProvider
      x-type: list
      x-identifiers:
        - VerifiedAccessTrustProviderId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VerifiedAccessTrustProviderId') as verified_access_trust_provider_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VerifiedAccessTrustProviderId') as verified_access_trust_provider_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
                AND region = 'us-east-1'
    verified_access_trust_provider:
      name: verified_access_trust_provider
      id: awscc.ec2.verified_access_trust_provider
      x-cfn-schema-name: VerifiedAccessTrustProvider
      x-type: get
      x-identifiers:
        - VerifiedAccessTrustProviderId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TrustProviderType') as trust_provider_type,
              JSON_EXTRACT(Properties, '$.DeviceTrustProviderType') as device_trust_provider_type,
              JSON_EXTRACT(Properties, '$.UserTrustProviderType') as user_trust_provider_type,
              JSON_EXTRACT(Properties, '$.OidcOptions') as oidc_options,
              JSON_EXTRACT(Properties, '$.DeviceOptions') as device_options,
              JSON_EXTRACT(Properties, '$.PolicyReferenceName') as policy_reference_name,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(Properties, '$.VerifiedAccessTrustProviderId') as verified_access_trust_provider_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SseSpecification') as sse_specification
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
              AND data__Identifier = '<VerifiedAccessTrustProviderId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'TrustProviderType') as trust_provider_type,
                json_extract_path_text(Properties, 'DeviceTrustProviderType') as device_trust_provider_type,
                json_extract_path_text(Properties, 'UserTrustProviderType') as user_trust_provider_type,
                json_extract_path_text(Properties, 'OidcOptions') as oidc_options,
                json_extract_path_text(Properties, 'DeviceOptions') as device_options,
                json_extract_path_text(Properties, 'PolicyReferenceName') as policy_reference_name,
                json_extract_path_text(Properties, 'CreationTime') as creation_time,
                json_extract_path_text(Properties, 'LastUpdatedTime') as last_updated_time,
                json_extract_path_text(Properties, 'VerifiedAccessTrustProviderId') as verified_access_trust_provider_id,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'SseSpecification') as sse_specification
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessTrustProvider'
                AND data__Identifier = '<VerifiedAccessTrustProviderId>'
                AND region = 'us-east-1'
    verified_access_instances:
      name: verified_access_instances
      id: awscc.ec2.verified_access_instances
      x-cfn-schema-name: VerifiedAccessInstance
      x-type: list
      x-identifiers:
        - VerifiedAccessInstanceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
                AND region = 'us-east-1'
    verified_access_instance:
      name: verified_access_instance
      id: awscc.ec2.verified_access_instance
      x-cfn-schema-name: VerifiedAccessInstance
      x-type: get
      x-identifiers:
        - VerifiedAccessInstanceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VerifiedAccessInstanceId') as verified_access_instance_id,
              JSON_EXTRACT(Properties, '$.VerifiedAccessTrustProviders') as verified_access_trust_providers,
              JSON_EXTRACT(Properties, '$.VerifiedAccessTrustProviderIds') as verified_access_trust_provider_ids,
              JSON_EXTRACT(Properties, '$.CreationTime') as creation_time,
              JSON_EXTRACT(Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.LoggingConfigurations') as logging_configurations,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.FipsEnabled') as fips_enabled
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
              AND data__Identifier = '<VerifiedAccessInstanceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'VerifiedAccessInstanceId') as verified_access_instance_id,
                json_extract_path_text(Properties, 'VerifiedAccessTrustProviders') as verified_access_trust_providers,
                json_extract_path_text(Properties, 'VerifiedAccessTrustProviderIds') as verified_access_trust_provider_ids,
                json_extract_path_text(Properties, 'CreationTime') as creation_time,
                json_extract_path_text(Properties, 'LastUpdatedTime') as last_updated_time,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'LoggingConfigurations') as logging_configurations,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'FipsEnabled') as fips_enabled
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VerifiedAccessInstance'
                AND data__Identifier = '<VerifiedAccessInstanceId>'
                AND region = 'us-east-1'
    volumes:
      name: volumes
      id: awscc.ec2.volumes
      x-cfn-schema-name: Volume
      x-type: list
      x-identifiers:
        - VolumeId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VolumeId') as volume_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Volume'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VolumeId') as volume_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::Volume'
                AND region = 'us-east-1'
    volume:
      name: volume
      id: awscc.ec2.volume
      x-cfn-schema-name: Volume
      x-type: get
      x-identifiers:
        - VolumeId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.MultiAttachEnabled') as multi_attach_enabled,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.Encrypted') as encrypted,
              JSON_EXTRACT(Properties, '$.Size') as size,
              JSON_EXTRACT(Properties, '$.AutoEnableIO') as auto_enable_io,
              JSON_EXTRACT(Properties, '$.OutpostArn') as outpost_arn,
              JSON_EXTRACT(Properties, '$.AvailabilityZone') as availability_zone,
              JSON_EXTRACT(Properties, '$.Throughput') as throughput,
              JSON_EXTRACT(Properties, '$.Iops') as iops,
              JSON_EXTRACT(Properties, '$.SnapshotId') as snapshot_id,
              JSON_EXTRACT(Properties, '$.VolumeType') as volume_type,
              JSON_EXTRACT(Properties, '$.VolumeId') as volume_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Volume'
              AND data__Identifier = '<VolumeId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'MultiAttachEnabled') as multi_attach_enabled,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'Encrypted') as encrypted,
                json_extract_path_text(Properties, 'Size') as size,
                json_extract_path_text(Properties, 'AutoEnableIO') as auto_enable_io,
                json_extract_path_text(Properties, 'OutpostArn') as outpost_arn,
                json_extract_path_text(Properties, 'AvailabilityZone') as availability_zone,
                json_extract_path_text(Properties, 'Throughput') as throughput,
                json_extract_path_text(Properties, 'Iops') as iops,
                json_extract_path_text(Properties, 'SnapshotId') as snapshot_id,
                json_extract_path_text(Properties, 'VolumeType') as volume_type,
                json_extract_path_text(Properties, 'VolumeId') as volume_id,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::Volume'
                AND data__Identifier = '<VolumeId>'
                AND region = 'us-east-1'
    volume_attachments:
      name: volume_attachments
      id: awscc.ec2.volume_attachments
      x-cfn-schema-name: VolumeAttachment
      x-type: list
      x-identifiers:
        - VolumeId
        - InstanceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VolumeId') as volume_id,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VolumeAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VolumeId') as volume_id,
                json_extract_path_text(Properties, 'InstanceId') as instance_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VolumeAttachment'
                AND region = 'us-east-1'
    volume_attachment:
      name: volume_attachment
      id: awscc.ec2.volume_attachment
      x-cfn-schema-name: VolumeAttachment
      x-type: get
      x-identifiers:
        - VolumeId
        - InstanceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VolumeId') as volume_id,
              JSON_EXTRACT(Properties, '$.InstanceId') as instance_id,
              JSON_EXTRACT(Properties, '$.Device') as device
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VolumeAttachment'
              AND data__Identifier = '<VolumeId>|<InstanceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'VolumeId') as volume_id,
                json_extract_path_text(Properties, 'InstanceId') as instance_id,
                json_extract_path_text(Properties, 'Device') as device
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VolumeAttachment'
                AND data__Identifier = '<VolumeId>|<InstanceId>'
                AND region = 'us-east-1'
    vpcs:
      name: vpcs
      id: awscc.ec2.vpcs
      x-cfn-schema-name: VPC
      x-type: list
      x-identifiers:
        - VpcId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPC'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VpcId') as vpc_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPC'
                AND region = 'us-east-1'
    vpc:
      name: vpc
      id: awscc.ec2.vpc
      x-cfn-schema-name: VPC
      x-type: get
      x-identifiers:
        - VpcId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.CidrBlock') as cidr_block,
              JSON_EXTRACT(Properties, '$.CidrBlockAssociations') as cidr_block_associations,
              JSON_EXTRACT(Properties, '$.DefaultNetworkAcl') as default_network_acl,
              JSON_EXTRACT(Properties, '$.DefaultSecurityGroup') as default_security_group,
              JSON_EXTRACT(Properties, '$.Ipv6CidrBlocks') as ipv6_cidr_blocks,
              JSON_EXTRACT(Properties, '$.EnableDnsHostnames') as enable_dns_hostnames,
              JSON_EXTRACT(Properties, '$.EnableDnsSupport') as enable_dns_support,
              JSON_EXTRACT(Properties, '$.InstanceTenancy') as instance_tenancy,
              JSON_EXTRACT(Properties, '$.Ipv4IpamPoolId') as ipv4_ipam_pool_id,
              JSON_EXTRACT(Properties, '$.Ipv4NetmaskLength') as ipv4_netmask_length,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPC'
              AND data__Identifier = '<VpcId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'CidrBlock') as cidr_block,
                json_extract_path_text(Properties, 'CidrBlockAssociations') as cidr_block_associations,
                json_extract_path_text(Properties, 'DefaultNetworkAcl') as default_network_acl,
                json_extract_path_text(Properties, 'DefaultSecurityGroup') as default_security_group,
                json_extract_path_text(Properties, 'Ipv6CidrBlocks') as ipv6_cidr_blocks,
                json_extract_path_text(Properties, 'EnableDnsHostnames') as enable_dns_hostnames,
                json_extract_path_text(Properties, 'EnableDnsSupport') as enable_dns_support,
                json_extract_path_text(Properties, 'InstanceTenancy') as instance_tenancy,
                json_extract_path_text(Properties, 'Ipv4IpamPoolId') as ipv4_ipam_pool_id,
                json_extract_path_text(Properties, 'Ipv4NetmaskLength') as ipv4_netmask_length,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPC'
                AND data__Identifier = '<VpcId>'
                AND region = 'us-east-1'
    vpcdhcp_options_associations:
      name: vpcdhcp_options_associations
      id: awscc.ec2.vpcdhcp_options_associations
      x-cfn-schema-name: VPCDHCPOptionsAssociation
      x-type: list
      x-identifiers:
        - DhcpOptionsId
        - VpcId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DhcpOptionsId') as dhcp_options_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCDHCPOptionsAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DhcpOptionsId') as dhcp_options_id,
                json_extract_path_text(Properties, 'VpcId') as vpc_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCDHCPOptionsAssociation'
                AND region = 'us-east-1'
    vpcdhcp_options_association:
      name: vpcdhcp_options_association
      id: awscc.ec2.vpcdhcp_options_association
      x-cfn-schema-name: VPCDHCPOptionsAssociation
      x-type: get
      x-identifiers:
        - DhcpOptionsId
        - VpcId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DhcpOptionsId') as dhcp_options_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCDHCPOptionsAssociation'
              AND data__Identifier = '<DhcpOptionsId>|<VpcId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DhcpOptionsId') as dhcp_options_id,
                json_extract_path_text(Properties, 'VpcId') as vpc_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCDHCPOptionsAssociation'
                AND data__Identifier = '<DhcpOptionsId>|<VpcId>'
                AND region = 'us-east-1'
    vpc_endpoints:
      name: vpc_endpoints
      id: awscc.ec2.vpc_endpoints
      x-cfn-schema-name: VPCEndpoint
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpoint'
                AND region = 'us-east-1'
    vpc_endpoint:
      name: vpc_endpoint
      id: awscc.ec2.vpc_endpoint
      x-cfn-schema-name: VPCEndpoint
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.CreationTimestamp') as creation_timestamp,
              JSON_EXTRACT(Properties, '$.DnsEntries') as dns_entries,
              JSON_EXTRACT(Properties, '$.NetworkInterfaceIds') as network_interface_ids,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PrivateDnsEnabled') as private_dns_enabled,
              JSON_EXTRACT(Properties, '$.RouteTableIds') as route_table_ids,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.ServiceName') as service_name,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.VpcEndpointType') as vpc_endpoint_type,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpoint'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'CreationTimestamp') as creation_timestamp,
                json_extract_path_text(Properties, 'DnsEntries') as dns_entries,
                json_extract_path_text(Properties, 'NetworkInterfaceIds') as network_interface_ids,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'PrivateDnsEnabled') as private_dns_enabled,
                json_extract_path_text(Properties, 'RouteTableIds') as route_table_ids,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(Properties, 'ServiceName') as service_name,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'VpcEndpointType') as vpc_endpoint_type,
                json_extract_path_text(Properties, 'VpcId') as vpc_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpoint'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    vpc_endpoint_connection_notifications:
      name: vpc_endpoint_connection_notifications
      id: awscc.ec2.vpc_endpoint_connection_notifications
      x-cfn-schema-name: VPCEndpointConnectionNotification
      x-type: list
      x-identifiers:
        - VPCEndpointConnectionNotificationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VPCEndpointConnectionNotificationId') as vpc_endpoint_connection_notification_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpointConnectionNotification'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VPCEndpointConnectionNotificationId') as vpc_endpoint_connection_notification_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpointConnectionNotification'
                AND region = 'us-east-1'
    vpc_endpoint_connection_notification:
      name: vpc_endpoint_connection_notification
      id: awscc.ec2.vpc_endpoint_connection_notification
      x-cfn-schema-name: VPCEndpointConnectionNotification
      x-type: get
      x-identifiers:
        - VPCEndpointConnectionNotificationId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VPCEndpointConnectionNotificationId') as vpc_endpoint_connection_notification_id,
              JSON_EXTRACT(Properties, '$.ConnectionEvents') as connection_events,
              JSON_EXTRACT(Properties, '$.ConnectionNotificationArn') as connection_notification_arn,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id,
              JSON_EXTRACT(Properties, '$.VPCEndpointId') as vpc_endpoint_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpointConnectionNotification'
              AND data__Identifier = '<VPCEndpointConnectionNotificationId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'VPCEndpointConnectionNotificationId') as vpc_endpoint_connection_notification_id,
                json_extract_path_text(Properties, 'ConnectionEvents') as connection_events,
                json_extract_path_text(Properties, 'ConnectionNotificationArn') as connection_notification_arn,
                json_extract_path_text(Properties, 'ServiceId') as service_id,
                json_extract_path_text(Properties, 'VPCEndpointId') as vpc_endpoint_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpointConnectionNotification'
                AND data__Identifier = '<VPCEndpointConnectionNotificationId>'
                AND region = 'us-east-1'
    vpc_endpoint_services:
      name: vpc_endpoint_services
      id: awscc.ec2.vpc_endpoint_services
      x-cfn-schema-name: VPCEndpointService
      x-type: list
      x-identifiers:
        - ServiceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpointService'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ServiceId') as service_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCEndpointService'
                AND region = 'us-east-1'
    vpc_endpoint_service:
      name: vpc_endpoint_service
      id: awscc.ec2.vpc_endpoint_service
      x-cfn-schema-name: VPCEndpointService
      x-type: get
      x-identifiers:
        - ServiceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.NetworkLoadBalancerArns') as network_load_balancer_arns,
              JSON_EXTRACT(Properties, '$.ContributorInsightsEnabled') as contributor_insights_enabled,
              JSON_EXTRACT(Properties, '$.PayerResponsibility') as payer_responsibility,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id,
              JSON_EXTRACT(Properties, '$.AcceptanceRequired') as acceptance_required,
              JSON_EXTRACT(Properties, '$.GatewayLoadBalancerArns') as gateway_load_balancer_arns
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpointService'
              AND data__Identifier = '<ServiceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'NetworkLoadBalancerArns') as network_load_balancer_arns,
                json_extract_path_text(Properties, 'ContributorInsightsEnabled') as contributor_insights_enabled,
                json_extract_path_text(Properties, 'PayerResponsibility') as payer_responsibility,
                json_extract_path_text(Properties, 'ServiceId') as service_id,
                json_extract_path_text(Properties, 'AcceptanceRequired') as acceptance_required,
                json_extract_path_text(Properties, 'GatewayLoadBalancerArns') as gateway_load_balancer_arns
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpointService'
                AND data__Identifier = '<ServiceId>'
                AND region = 'us-east-1'
    vpc_endpoint_service_permissions:
      name: vpc_endpoint_service_permissions
      id: awscc.ec2.vpc_endpoint_service_permissions
      x-cfn-schema-name: VPCEndpointServicePermissions
      x-type: get
      x-identifiers:
        - ServiceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AllowedPrincipals') as allowed_principals,
              JSON_EXTRACT(Properties, '$.ServiceId') as service_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpointServicePermissions'
              AND data__Identifier = '<ServiceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AllowedPrincipals') as allowed_principals,
                json_extract_path_text(Properties, 'ServiceId') as service_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCEndpointServicePermissions'
                AND data__Identifier = '<ServiceId>'
                AND region = 'us-east-1'
    vpc_gateway_attachments:
      name: vpc_gateway_attachments
      id: awscc.ec2.vpc_gateway_attachments
      x-cfn-schema-name: VPCGatewayAttachment
      x-type: list
      x-identifiers:
        - AttachmentType
        - VpcId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCGatewayAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AttachmentType') as attachment_type,
                json_extract_path_text(Properties, 'VpcId') as vpc_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCGatewayAttachment'
                AND region = 'us-east-1'
    vpc_gateway_attachment:
      name: vpc_gateway_attachment
      id: awscc.ec2.vpc_gateway_attachment
      x-cfn-schema-name: VPCGatewayAttachment
      x-type: get
      x-identifiers:
        - AttachmentType
        - VpcId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AttachmentType') as attachment_type,
              JSON_EXTRACT(Properties, '$.InternetGatewayId') as internet_gateway_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.VpnGatewayId') as vpn_gateway_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCGatewayAttachment'
              AND data__Identifier = '<AttachmentType>|<VpcId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AttachmentType') as attachment_type,
                json_extract_path_text(Properties, 'InternetGatewayId') as internet_gateway_id,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'VpnGatewayId') as vpn_gateway_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCGatewayAttachment'
                AND data__Identifier = '<AttachmentType>|<VpcId>'
                AND region = 'us-east-1'
    vpc_peering_connections:
      name: vpc_peering_connections
      id: awscc.ec2.vpc_peering_connections
      x-cfn-schema-name: VPCPeeringConnection
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCPeeringConnection'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPCPeeringConnection'
                AND region = 'us-east-1'
    vpc_peering_connection:
      name: vpc_peering_connection
      id: awscc.ec2.vpc_peering_connection
      x-cfn-schema-name: VPCPeeringConnection
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.PeerOwnerId') as peer_owner_id,
              JSON_EXTRACT(Properties, '$.PeerRegion') as peer_region,
              JSON_EXTRACT(Properties, '$.PeerRoleArn') as peer_role_arn,
              JSON_EXTRACT(Properties, '$.PeerVpcId') as peer_vpc_id,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCPeeringConnection'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'PeerOwnerId') as peer_owner_id,
                json_extract_path_text(Properties, 'PeerRegion') as peer_region,
                json_extract_path_text(Properties, 'PeerRoleArn') as peer_role_arn,
                json_extract_path_text(Properties, 'PeerVpcId') as peer_vpc_id,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPCPeeringConnection'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    vpn_connections:
      name: vpn_connections
      id: awscc.ec2.vpn_connections
      x-cfn-schema-name: VPNConnection
      x-type: list
      x-identifiers:
        - VpnConnectionId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VpnConnectionId') as vpn_connection_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPNConnection'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VpnConnectionId') as vpn_connection_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPNConnection'
                AND region = 'us-east-1'
    vpn_connection:
      name: vpn_connection
      id: awscc.ec2.vpn_connection
      x-cfn-schema-name: VPNConnection
      x-type: get
      x-identifiers:
        - VpnConnectionId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VpnConnectionId') as vpn_connection_id,
              JSON_EXTRACT(Properties, '$.CustomerGatewayId') as customer_gateway_id,
              JSON_EXTRACT(Properties, '$.StaticRoutesOnly') as static_routes_only,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TransitGatewayId') as transit_gateway_id,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.VpnGatewayId') as vpn_gateway_id,
              JSON_EXTRACT(Properties, '$.VpnTunnelOptionsSpecifications') as vpn_tunnel_options_specifications
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPNConnection'
              AND data__Identifier = '<VpnConnectionId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'VpnConnectionId') as vpn_connection_id,
                json_extract_path_text(Properties, 'CustomerGatewayId') as customer_gateway_id,
                json_extract_path_text(Properties, 'StaticRoutesOnly') as static_routes_only,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TransitGatewayId') as transit_gateway_id,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'VpnGatewayId') as vpn_gateway_id,
                json_extract_path_text(Properties, 'VpnTunnelOptionsSpecifications') as vpn_tunnel_options_specifications
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPNConnection'
                AND data__Identifier = '<VpnConnectionId>'
                AND region = 'us-east-1'
    vpn_connection_routes:
      name: vpn_connection_routes
      id: awscc.ec2.vpn_connection_routes
      x-cfn-schema-name: VPNConnectionRoute
      x-type: list
      x-identifiers:
        - DestinationCidrBlock
        - VpnConnectionId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DestinationCidrBlock') as destination_cidr_block,
              JSON_EXTRACT(Properties, '$.VpnConnectionId') as vpn_connection_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPNConnectionRoute'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DestinationCidrBlock') as destination_cidr_block,
                json_extract_path_text(Properties, 'VpnConnectionId') as vpn_connection_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPNConnectionRoute'
                AND region = 'us-east-1'
    vpn_connection_route:
      name: vpn_connection_route
      id: awscc.ec2.vpn_connection_route
      x-cfn-schema-name: VPNConnectionRoute
      x-type: get
      x-identifiers:
        - DestinationCidrBlock
        - VpnConnectionId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DestinationCidrBlock') as destination_cidr_block,
              JSON_EXTRACT(Properties, '$.VpnConnectionId') as vpn_connection_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPNConnectionRoute'
              AND data__Identifier = '<DestinationCidrBlock>|<VpnConnectionId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DestinationCidrBlock') as destination_cidr_block,
                json_extract_path_text(Properties, 'VpnConnectionId') as vpn_connection_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPNConnectionRoute'
                AND data__Identifier = '<DestinationCidrBlock>|<VpnConnectionId>'
                AND region = 'us-east-1'
    vpn_gateways:
      name: vpn_gateways
      id: awscc.ec2.vpn_gateways
      x-cfn-schema-name: VPNGateway
      x-type: list
      x-identifiers:
        - VPNGatewayId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VPNGatewayId') as v_pn_gateway_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPNGateway'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VPNGatewayId') as v_pn_gateway_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EC2::VPNGateway'
                AND region = 'us-east-1'
    vpn_gateway:
      name: vpn_gateway
      id: awscc.ec2.vpn_gateway
      x-cfn-schema-name: VPNGateway
      x-type: get
      x-identifiers:
        - VPNGatewayId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VPNGatewayId') as v_pn_gateway_id,
              JSON_EXTRACT(Properties, '$.AmazonSideAsn') as amazon_side_asn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Type') as type
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPNGateway'
              AND data__Identifier = '<VPNGatewayId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'VPNGatewayId') as v_pn_gateway_id,
                json_extract_path_text(Properties, 'AmazonSideAsn') as amazon_side_asn,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Type') as type
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EC2::VPNGateway'
                AND data__Identifier = '<VPNGatewayId>'
                AND region = 'us-east-1'
    instances:
      name: instances
      id: awscc.ec2.instances
      x-cfn-schema-name: instances
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              instanceId,
              instanceState,
              instanceType,
              vpcId,
              subnetId,
              amiLaunchIndex,
              architecture,
              blockDeviceMapping,
              bootMode,
              capacityReservationId,
              capacityReservationSpecification,
              clientToken,
              cpuOptions,
              dnsName,
              ebsOptimized,
              elasticGpuAssociationSet,
              elasticInferenceAcceleratorAssociationSet,
              enaSupport,
              enclaveOptions,
              groupSet,
              hibernationOptions,
              hypervisor,
              iamInstanceProfile,
              imageId,
              instanceLifecycle,
              ipAddress,
              ipv6Address,
              kernelId,
              keyName,
              launchTime,
              licenseSet,
              maintenanceOptions,
              metadataOptions,
              monitoring,
              networkInterfaceSet,
              outpostArn,
              placement,
              platform,
              platformDetails,
              privateDnsName,
              privateDnsNameOptions,
              privateIpAddress,
              productCodes,
              ramdiskId,
              reason,
              rootDeviceName,
              rootDeviceType,
              sourceDestCheck,
              spotInstanceRequestId,
              sriovNetSupport,
              stateReason,
              tagSet,
              tpmSupport,
              usageOperation,
              usageOperationUpdateTime,
              virtualizationType,
              region
              FROM aws.ec2.instances
              WHERE region = 'us-east-1'
    snapshots:
      name: snapshots
      id: awscc.ec2.snapshots
      x-cfn-schema-name: snapshots
      x-type: custom_list
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              description,
              dataEncryptionKeyId,
              encrypted,
              kmsKeyId,
              outpostArn,
              ownerAlias,
              ownerId,
              progress,
              restoreExpiryTime,
              snapshotId,
              startTime,
              status,
              statusMessage,
              storageTier,
              tagSet,
              volumeId,
              volumeSize,
              region
              FROM aws.ec2.snapshots
              WHERE region = 'us-east-1'
