openapi: 3.0.0
info:
  title: SNS
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, `_`, `.`, `/`, `=`, `+`, and `-`.'
        Value:
          type: string
          description: The value for the tag. You can specify a value that is 0 to 256 characters in length.
      required:
        - Value
        - Key
    Subscription:
      type: object
      additionalProperties: false
      properties:
        Endpoint:
          type: string
        Protocol:
          type: string
      required:
        - Endpoint
        - Protocol
    LoggingConfig:
      type: object
      additionalProperties: false
      properties:
        Protocol:
          type: string
          description: Indicates one of the supported protocols for the SNS topic
          enum:
            - http/s
            - sqs
            - lambda
            - firehose
            - application
        SuccessFeedbackRoleArn:
          type: string
          description: The IAM role ARN to be used when logging successful message deliveries in Amazon CloudWatch
        SuccessFeedbackSampleRate:
          type: string
          description: The percentage of successful message deliveries to be logged in Amazon CloudWatch. Valid percentage values range from 0 to 100
        FailureFeedbackRoleArn:
          type: string
          description: The IAM role ARN to be used when logging failed message deliveries in Amazon CloudWatch
      required:
        - Protocol
    Topic:
      type: object
      properties:
        DisplayName:
          description: The display name to use for an Amazon SNS topic with SMS subscriptions.
          type: string
        KmsMasterKeyId:
          description: |-
            The ID of an AWS-managed customer master key (CMK) for Amazon SNS or a custom CMK. For more information, see Key Terms. For more examples, see KeyId in the AWS Key Management Service API Reference.

            This property applies only to [server-side-encryption](https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html).
          type: string
        DataProtectionPolicy:
          description: |-
            The body of the policy document you want to use for this topic.

            You can only add one policy per topic.

            The policy must be in JSON string format.

            Length Constraints: Maximum length of 30720
          type: object
        Subscription:
          description: The SNS subscriptions (endpoints) for this topic.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Subscription'
        FifoTopic:
          description: Set to true to create a FIFO topic.
          type: boolean
        ContentBasedDeduplication:
          description: |+
            Enables content-based deduplication for FIFO topics. By default, ContentBasedDeduplication is set to false. If you create a FIFO topic and this attribute is false, you must specify a value for the MessageDeduplicationId parameter for the Publish action.

            When you set ContentBasedDeduplication to true, Amazon SNS uses a SHA-256 hash to generate the MessageDeduplicationId using the body of the message (but not the attributes of the message).

            (Optional) To override the generated value, you can specify a value for the the MessageDeduplicationId parameter for the Publish action.

          type: boolean
        ArchivePolicy:
          description: The archive policy determines the number of days Amazon SNS retains messages. You can set a retention period from 1 to 365 days.
          type: object
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        TopicName:
          description: |-
            The name of the topic you want to create. Topic names must include only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 256 characters long. FIFO topic names must end with .fifo.

            If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the topic name. For more information, see Name Type.
          type: string
        TopicArn:
          type: string
        SignatureVersion:
          description: Version of the Amazon SNS signature used. If the SignatureVersion is 1, Signature is a Base64-encoded SHA1withRSA signature of the Message, MessageId, Type, Timestamp, and TopicArn values. If the SignatureVersion is 2, Signature is a Base64-encoded SHA256withRSA signature of the Message, MessageId, Type, Timestamp, and TopicArn values.
          type: string
        TracingConfig:
          description: Tracing mode of an Amazon SNS topic. By default TracingConfig is set to PassThrough, and the topic passes through the tracing header it receives from an SNS publisher to its subscriptions. If set to Active, SNS will vend X-Ray segment data to topic owner account if the sampled flag in the tracing header is true. Only supported on standard topics.
          type: string
        DeliveryStatusLogging:
          description: Delivery status logging configuration for supported protocols for an Amazon SNS topic.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/LoggingConfig'
      x-stackql-resource-name: topic
      x-stackql-primaryIdentifier:
        - TopicArn
      x-create-only-properties:
        - TopicName
        - FifoTopic
      x-read-only-properties:
        - TopicArn
      x-required-permissions:
        create:
          - sns:CreateTopic
          - sns:TagResource
          - sns:Subscribe
          - sns:GetTopicAttributes
          - sns:PutDataProtectionPolicy
          - iam:GetRole
          - iam:PassRole
        read:
          - sns:GetTopicAttributes
          - sns:ListTagsForResource
          - sns:ListSubscriptionsByTopic
          - sns:GetDataProtectionPolicy
        update:
          - sns:SetTopicAttributes
          - sns:TagResource
          - sns:UntagResource
          - sns:Subscribe
          - sns:Unsubscribe
          - sns:GetTopicAttributes
          - sns:ListTagsForResource
          - sns:ListSubscriptionsByTopic
          - sns:GetDataProtectionPolicy
          - sns:PutDataProtectionPolicy
          - iam:GetRole
          - iam:PassRole
        delete:
          - sns:GetTopicAttributes
          - sns:DeleteTopic
        list:
          - sns:ListTopics
    TopicInlinePolicy:
      type: object
      properties:
        PolicyDocument:
          description: A policy document that contains permissions to add to the specified SNS topics.
          type: object
        TopicArn:
          description: The Amazon Resource Name (ARN) of the topic to which you want to add the policy.
          type: string
      required:
        - PolicyDocument
        - TopicArn
      x-stackql-resource-name: topic_inline_policy
      x-stackql-primaryIdentifier:
        - TopicArn
      x-create-only-properties:
        - TopicArn
      x-required-permissions:
        create:
          - sns:SetTopicAttributes
          - sns:GetTopicAttributes
        read:
          - sns:GetTopicAttributes
        delete:
          - sns:SetTopicAttributes
          - sns:GetTopicAttributes
        update:
          - sns:SetTopicAttributes
          - sns:GetTopicAttributes
    TopicPolicy:
      type: object
      properties:
        Id:
          description: The provider-assigned unique ID for this managed resource.
          type: string
        PolicyDocument:
          description: A policy document that contains permissions to add to the specified SNS topics.
          type: object
        Topics:
          description: The Amazon Resource Names (ARN) of the topics to which you want to add the policy. You can use the [Ref](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html)` function to specify an [AWS::SNS::Topic](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sns-topic.html) resource.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
      required:
        - PolicyDocument
        - Topics
      x-stackql-resource-name: topic_policy
      x-stackql-primaryIdentifier:
        - Id
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - sns:SetTopicAttributes
        update:
          - sns:SetTopicAttributes
        delete:
          - sns:SetTopicAttributes
  x-stackQL-resources:
    topics:
      name: topics
      id: awscc.sns.topics
      x-cfn-schema-name: Topic
      x-type: list
      x-identifiers:
        - TopicArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TopicArn') as topic_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::SNS::Topic'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TopicArn') as topic_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::SNS::Topic'
                AND region = 'us-east-1'
    topic:
      name: topic
      id: awscc.sns.topic
      x-cfn-schema-name: Topic
      x-type: get
      x-identifiers:
        - TopicArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.KmsMasterKeyId') as kms_master_key_id,
              JSON_EXTRACT(Properties, '$.DataProtectionPolicy') as data_protection_policy,
              JSON_EXTRACT(Properties, '$.Subscription') as subscription,
              JSON_EXTRACT(Properties, '$.FifoTopic') as fifo_topic,
              JSON_EXTRACT(Properties, '$.ContentBasedDeduplication') as content_based_deduplication,
              JSON_EXTRACT(Properties, '$.ArchivePolicy') as archive_policy,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TopicName') as topic_name,
              JSON_EXTRACT(Properties, '$.TopicArn') as topic_arn,
              JSON_EXTRACT(Properties, '$.SignatureVersion') as signature_version,
              JSON_EXTRACT(Properties, '$.TracingConfig') as tracing_config,
              JSON_EXTRACT(Properties, '$.DeliveryStatusLogging') as delivery_status_logging
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::SNS::Topic'
              AND data__Identifier = '<TopicArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DisplayName') as display_name,
                json_extract_path_text(Properties, 'KmsMasterKeyId') as kms_master_key_id,
                json_extract_path_text(Properties, 'DataProtectionPolicy') as data_protection_policy,
                json_extract_path_text(Properties, 'Subscription') as subscription,
                json_extract_path_text(Properties, 'FifoTopic') as fifo_topic,
                json_extract_path_text(Properties, 'ContentBasedDeduplication') as content_based_deduplication,
                json_extract_path_text(Properties, 'ArchivePolicy') as archive_policy,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TopicName') as topic_name,
                json_extract_path_text(Properties, 'TopicArn') as topic_arn,
                json_extract_path_text(Properties, 'SignatureVersion') as signature_version,
                json_extract_path_text(Properties, 'TracingConfig') as tracing_config,
                json_extract_path_text(Properties, 'DeliveryStatusLogging') as delivery_status_logging
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::SNS::Topic'
                AND data__Identifier = '<TopicArn>'
                AND region = 'us-east-1'
    topic_inline_policies:
      name: topic_inline_policies
      id: awscc.sns.topic_inline_policies
      x-cfn-schema-name: TopicInlinePolicy
      x-type: list
      x-identifiers:
        - TopicArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TopicArn') as topic_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::SNS::TopicInlinePolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TopicArn') as topic_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::SNS::TopicInlinePolicy'
                AND region = 'us-east-1'
    topic_inline_policy:
      name: topic_inline_policy
      id: awscc.sns.topic_inline_policy
      x-cfn-schema-name: TopicInlinePolicy
      x-type: get
      x-identifiers:
        - TopicArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.TopicArn') as topic_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::SNS::TopicInlinePolicy'
              AND data__Identifier = '<TopicArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'TopicArn') as topic_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::SNS::TopicInlinePolicy'
                AND data__Identifier = '<TopicArn>'
                AND region = 'us-east-1'
    topic_policies:
      name: topic_policies
      id: awscc.sns.topic_policies
      x-cfn-schema-name: TopicPolicy
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::SNS::TopicPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::SNS::TopicPolicy'
                AND region = 'us-east-1'
    topic_policy:
      name: topic_policy
      id: awscc.sns.topic_policy
      x-cfn-schema-name: TopicPolicy
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.Topics') as topics
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::SNS::TopicPolicy'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'Topics') as topics
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::SNS::TopicPolicy'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
