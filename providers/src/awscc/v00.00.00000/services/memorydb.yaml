openapi: 3.0.0
info:
  title: MemoryDB
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Key:
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with ''aws:''. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          pattern: ^(?!aws:)[a-zA-Z0-9 _\.\/=+:\-@]*$
          minLength: 1
          maxLength: 128
        Value:
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          pattern: ^[a-zA-Z0-9 _\.\/=+:\-@]*$
          minLength: 0
          maxLength: 256
      required:
        - Key
    ACL:
      type: object
      properties:
        Status:
          description: Indicates acl status. Can be "creating", "active", "modifying", "deleting".
          type: string
        ACLName:
          description: The name of the acl.
          pattern: '[a-z][a-z0-9\\-]*'
          type: string
        UserNames:
          type: array
          x-$comment: List of users.
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
          description: List of users associated to this acl.
        Arn:
          description: The Amazon Resource Name (ARN) of the acl.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this cluster.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ACLName
      x-stackql-resource-name: acl
      x-stackql-primaryIdentifier:
        - ACLName
      x-create-only-properties:
        - ACLName
      x-read-only-properties:
        - Status
        - Arn
      x-required-permissions:
        create:
          - memorydb:CreateACL
          - memorydb:DescribeACLs
          - memorydb:TagResource
          - memorydb:ListTags
        read:
          - memorydb:DescribeACLs
          - memorydb:ListTags
        update:
          - memorydb:UpdateACL
          - memorydb:DescribeACLs
          - memorydb:ListTags
          - memorydb:TagResource
          - memorydb:UntagResource
        delete:
          - memorydb:ModifyReplicationGroup
          - memorydb:DeleteACL
          - memorydb:DescribeACLs
        list:
          - memorydb:DescribeACLs
          - memorydb:ListTags
    Endpoint:
      type: object
      additionalProperties: false
      properties:
        Address:
          description: The DNS address of the primary read-write node.
          type: string
        Port:
          description: 'The port number that the engine is listening on. '
          type: integer
    DataTieringStatus:
      type: string
      enum:
        - 'true'
        - 'false'
    Cluster:
      type: object
      properties:
        ClusterName:
          description: The name of the cluster. This value must be unique as it also serves as the cluster identifier.
          pattern: '[a-z][a-z0-9\-]*'
          type: string
        Description:
          description: An optional description of the cluster.
          type: string
        Status:
          description: The status of the cluster. For example, Available, Updating, Creating.
          type: string
        NodeType:
          description: The compute and memory capacity of the nodes in the cluster.
          type: string
        NumShards:
          description: The number of shards the cluster will contain.
          type: integer
        NumReplicasPerShard:
          description: The number of replicas to apply to each shard. The limit is 5.
          type: integer
        SubnetGroupName:
          description: The name of the subnet group to be used for the cluster.
          type: string
        SecurityGroupIds:
          description: One or more Amazon VPC security groups associated with this cluster.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        MaintenanceWindow:
          description: Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period.
          type: string
        ParameterGroupName:
          description: The name of the parameter group associated with the cluster.
          type: string
        ParameterGroupStatus:
          description: The status of the parameter group used by the cluster.
          type: string
        Port:
          description: The port number on which each member of the cluster accepts connections.
          type: integer
        SnapshotRetentionLimit:
          description: The number of days for which MemoryDB retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.
          type: integer
        SnapshotWindow:
          description: The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of your cluster.
          type: string
        ACLName:
          description: The name of the Access Control List to associate with the cluster.
          type: string
          pattern: '[a-zA-Z][a-zA-Z0-9\-]*'
        SnsTopicArn:
          description: The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.
          type: string
        SnsTopicStatus:
          description: The status of the Amazon SNS notification topic. Notifications are sent only if the status is enabled.
          type: string
        TLSEnabled:
          description: |-
            A flag that enables in-transit encryption when set to true.

            You cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.
          type: boolean
        DataTiering:
          type: object
          description: Enables data tiering. Data tiering is only supported for clusters using the r6gd node type. This parameter must be set when using r6gd nodes.
          $ref: '#/components/schemas/DataTieringStatus'
        KmsKeyId:
          description: The ID of the KMS key used to encrypt the cluster.
          type: string
        SnapshotArns:
          description: A list of Amazon Resource Names (ARN) that uniquely identify the RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new cluster. The Amazon S3 object name in the ARN cannot contain any commas.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        SnapshotName:
          description: The name of a snapshot from which to restore data into the new cluster. The snapshot status changes to restoring while the new cluster is being created.
          type: string
        FinalSnapshotName:
          description: The user-supplied name of a final cluster snapshot. This is the unique name that identifies the snapshot. MemoryDB creates the snapshot, and then deletes the cluster immediately afterward.
          type: string
        ARN:
          description: The Amazon Resource Name (ARN) of the cluster.
          type: string
        EngineVersion:
          description: The Redis engine version used by the cluster.
          type: string
        ClusterEndpoint:
          description: The cluster endpoint.
          $ref: '#/components/schemas/Endpoint'
        AutoMinorVersionUpgrade:
          description: |-
            A flag that enables automatic minor version upgrade when set to true.

            You cannot modify the value of AutoMinorVersionUpgrade after the cluster is created. To enable AutoMinorVersionUpgrade on a cluster you must set AutoMinorVersionUpgrade to true when you create a cluster.
          type: boolean
        Tags:
          description: An array of key-value pairs to apply to this cluster.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ClusterName
        - NodeType
        - ACLName
      x-stackql-resource-name: cluster
      x-stackql-primaryIdentifier:
        - ClusterName
      x-create-only-properties:
        - ClusterName
        - TLSEnabled
        - DataTiering
        - KmsKeyId
        - Port
        - SubnetGroupName
        - SnapshotArns
        - SnapshotName
      x-read-only-properties:
        - Status
        - ClusterEndpoint/Address
        - ClusterEndpoint/Port
        - ARN
        - ParameterGroupStatus
      x-required-permissions:
        create:
          - memorydb:CreateCluster
          - memorydb:DescribeClusters
          - memorydb:ListTags
        read:
          - memorydb:DescribeClusters
          - memorydb:ListTags
        update:
          - memorydb:UpdateCluster
          - memorydb:DescribeClusters
          - memorydb:ListTags
          - memorydb:TagResource
          - memorydb:UntagResource
        delete:
          - memorydb:DeleteCluster
          - memorydb:DescribeClusters
        list:
          - memorydb:DescribeClusters
    ParameterGroup:
      type: object
      properties:
        ParameterGroupName:
          description: The name of the parameter group.
          type: string
        Family:
          description: The name of the parameter group family that this parameter group is compatible with.
          type: string
        Description:
          description: A description of the parameter group.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this parameter group.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Parameters:
          description: An map of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional.
          type: object
        ARN:
          description: The Amazon Resource Name (ARN) of the parameter group.
          type: string
      required:
        - ParameterGroupName
        - Family
      x-stackql-resource-name: parameter_group
      x-stackql-primaryIdentifier:
        - ParameterGroupName
      x-create-only-properties:
        - ParameterGroupName
        - Family
        - Description
      x-read-only-properties:
        - ARN
      x-required-permissions:
        create:
          - memorydb:CreateParameterGroup
          - memorydb:DescribeParameterGroups
          - memorydb:TagResource
          - memorydb:ListTags
        read:
          - memorydb:DescribeParameterGroups
          - memorydb:ListTags
        update:
          - memorydb:UpdateParameterGroup
          - memorydb:DescribeParameterGroups
          - memorydb:DescribeParameters
          - memorydb:DescribeClusters
          - memorydb:ListTags
          - memorydb:TagResource
          - memorydb:UntagResource
        delete:
          - memorydb:DeleteParameterGroup
        list:
          - memorydb:DescribeParameterGroups
    SubnetGroup:
      type: object
      properties:
        SubnetGroupName:
          description: The name of the subnet group. This value must be unique as it also serves as the subnet group identifier.
          pattern: '[a-z][a-z0-9\-]*'
          type: string
        Description:
          description: An optional description of the subnet group.
          type: string
        SubnetIds:
          description: A list of VPC subnet IDs for the subnet group.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Tags:
          description: An array of key-value pairs to apply to this subnet group.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        ARN:
          description: The Amazon Resource Name (ARN) of the subnet group.
          type: string
      required:
        - SubnetGroupName
        - SubnetIds
      x-stackql-resource-name: subnet_group
      x-stackql-primaryIdentifier:
        - SubnetGroupName
      x-create-only-properties:
        - SubnetGroupName
      x-read-only-properties:
        - ARN
      x-required-permissions:
        create:
          - memorydb:CreateSubnetGroup
          - memorydb:DescribeSubnetGroups
          - memorydb:TagResource
          - memorydb:ListTags
        read:
          - memorydb:DescribeSubnetGroups
          - memorydb:ListTags
        update:
          - memorydb:UpdateSubnetGroup
          - memorydb:DescribeSubnetGroups
          - memorydb:ListTags
          - memorydb:TagResource
          - memorydb:UntagResource
        delete:
          - memorydb:DeleteSubnetGroup
          - memorydb:DescribeSubnetGroups
        list:
          - memorydb:DescribeSubnetGroups
    User:
      type: object
      properties:
        Status:
          description: Indicates the user status. Can be "active", "modifying" or "deleting".
          type: string
        UserName:
          description: The name of the user.
          pattern: '[a-z][a-z0-9\\-]*'
          type: string
        AccessString:
          description: Access permissions string used for this user account.
          type: string
        AuthenticationMode:
          type: object
          properties:
            Type:
              type: string
              description: Type of authentication strategy for this user.
              enum:
                - password
                - iam
            Passwords:
              type: array
              x-$comment: List of passwords.
              uniqueItems: true
              x-insertionOrder: true
              maxItems: 2
              minItems: 1
              items:
                type: string
              description: Passwords used for this user account. You can create up to two passwords for each user.
          additionalProperties: false
        Arn:
          description: The Amazon Resource Name (ARN) of the user account.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this user.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - UserName
      x-stackql-resource-name: user
      x-stackql-primaryIdentifier:
        - UserName
      x-create-only-properties:
        - UserName
      x-read-only-properties:
        - Status
        - Arn
      x-required-permissions:
        create:
          - memorydb:CreateUser
          - memorydb:DescribeUsers
          - memorydb:TagResource
          - memorydb:ListTags
        read:
          - memorydb:DescribeUsers
          - memorydb:ListTags
        update:
          - memorydb:UpdateUser
          - memorydb:DescribeUsers
          - memorydb:ListTags
          - memorydb:TagResource
          - memorydb:UntagResource
        delete:
          - memorydb:DeleteUser
          - memorydb:DescribeUsers
        list:
          - memorydb:DescribeUsers
          - memorydb:ListTags
  x-stackQL-resources:
    acls:
      name: acls
      id: awscc.memorydb.acls
      x-cfn-schema-name: ACL
      x-type: list
      x-identifiers:
        - ACLName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ACLName') as acl_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::ACL'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ACLName') as acl_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::ACL'
                AND region = 'us-east-1'
    acl:
      name: acl
      id: awscc.memorydb.acl
      x-cfn-schema-name: ACL
      x-type: get
      x-identifiers:
        - ACLName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.ACLName') as acl_name,
              JSON_EXTRACT(Properties, '$.UserNames') as user_names,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::ACL'
              AND data__Identifier = '<ACLName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'ACLName') as acl_name,
                json_extract_path_text(Properties, 'UserNames') as user_names,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::ACL'
                AND data__Identifier = '<ACLName>'
                AND region = 'us-east-1'
    clusters:
      name: clusters
      id: awscc.memorydb.clusters
      x-cfn-schema-name: Cluster
      x-type: list
      x-identifiers:
        - ClusterName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::Cluster'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ClusterName') as cluster_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::Cluster'
                AND region = 'us-east-1'
    cluster:
      name: cluster
      id: awscc.memorydb.cluster
      x-cfn-schema-name: Cluster
      x-type: get
      x-identifiers:
        - ClusterName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ClusterName') as cluster_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.NodeType') as node_type,
              JSON_EXTRACT(Properties, '$.NumShards') as num_shards,
              JSON_EXTRACT(Properties, '$.NumReplicasPerShard') as num_replicas_per_shard,
              JSON_EXTRACT(Properties, '$.SubnetGroupName') as subnet_group_name,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.MaintenanceWindow') as maintenance_window,
              JSON_EXTRACT(Properties, '$.ParameterGroupName') as parameter_group_name,
              JSON_EXTRACT(Properties, '$.ParameterGroupStatus') as parameter_group_status,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.SnapshotRetentionLimit') as snapshot_retention_limit,
              JSON_EXTRACT(Properties, '$.SnapshotWindow') as snapshot_window,
              JSON_EXTRACT(Properties, '$.ACLName') as acl_name,
              JSON_EXTRACT(Properties, '$.SnsTopicArn') as sns_topic_arn,
              JSON_EXTRACT(Properties, '$.SnsTopicStatus') as sns_topic_status,
              JSON_EXTRACT(Properties, '$.TLSEnabled') as tls_enabled,
              JSON_EXTRACT(Properties, '$.DataTiering') as data_tiering,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.SnapshotArns') as snapshot_arns,
              JSON_EXTRACT(Properties, '$.SnapshotName') as snapshot_name,
              JSON_EXTRACT(Properties, '$.FinalSnapshotName') as final_snapshot_name,
              JSON_EXTRACT(Properties, '$.ARN') as arn,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.ClusterEndpoint') as cluster_endpoint,
              JSON_EXTRACT(Properties, '$.AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::Cluster'
              AND data__Identifier = '<ClusterName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ClusterName') as cluster_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'NodeType') as node_type,
                json_extract_path_text(Properties, 'NumShards') as num_shards,
                json_extract_path_text(Properties, 'NumReplicasPerShard') as num_replicas_per_shard,
                json_extract_path_text(Properties, 'SubnetGroupName') as subnet_group_name,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(Properties, 'MaintenanceWindow') as maintenance_window,
                json_extract_path_text(Properties, 'ParameterGroupName') as parameter_group_name,
                json_extract_path_text(Properties, 'ParameterGroupStatus') as parameter_group_status,
                json_extract_path_text(Properties, 'Port') as port,
                json_extract_path_text(Properties, 'SnapshotRetentionLimit') as snapshot_retention_limit,
                json_extract_path_text(Properties, 'SnapshotWindow') as snapshot_window,
                json_extract_path_text(Properties, 'ACLName') as acl_name,
                json_extract_path_text(Properties, 'SnsTopicArn') as sns_topic_arn,
                json_extract_path_text(Properties, 'SnsTopicStatus') as sns_topic_status,
                json_extract_path_text(Properties, 'TLSEnabled') as tls_enabled,
                json_extract_path_text(Properties, 'DataTiering') as data_tiering,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'SnapshotArns') as snapshot_arns,
                json_extract_path_text(Properties, 'SnapshotName') as snapshot_name,
                json_extract_path_text(Properties, 'FinalSnapshotName') as final_snapshot_name,
                json_extract_path_text(Properties, 'ARN') as arn,
                json_extract_path_text(Properties, 'EngineVersion') as engine_version,
                json_extract_path_text(Properties, 'ClusterEndpoint') as cluster_endpoint,
                json_extract_path_text(Properties, 'AutoMinorVersionUpgrade') as auto_minor_version_upgrade,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::Cluster'
                AND data__Identifier = '<ClusterName>'
                AND region = 'us-east-1'
    parameter_groups:
      name: parameter_groups
      id: awscc.memorydb.parameter_groups
      x-cfn-schema-name: ParameterGroup
      x-type: list
      x-identifiers:
        - ParameterGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ParameterGroupName') as parameter_group_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::ParameterGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ParameterGroupName') as parameter_group_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::ParameterGroup'
                AND region = 'us-east-1'
    parameter_group:
      name: parameter_group
      id: awscc.memorydb.parameter_group
      x-cfn-schema-name: ParameterGroup
      x-type: get
      x-identifiers:
        - ParameterGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ParameterGroupName') as parameter_group_name,
              JSON_EXTRACT(Properties, '$.Family') as family,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Parameters') as parameters,
              JSON_EXTRACT(Properties, '$.ARN') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::ParameterGroup'
              AND data__Identifier = '<ParameterGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ParameterGroupName') as parameter_group_name,
                json_extract_path_text(Properties, 'Family') as family,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Parameters') as parameters,
                json_extract_path_text(Properties, 'ARN') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::ParameterGroup'
                AND data__Identifier = '<ParameterGroupName>'
                AND region = 'us-east-1'
    subnet_groups:
      name: subnet_groups
      id: awscc.memorydb.subnet_groups
      x-cfn-schema-name: SubnetGroup
      x-type: list
      x-identifiers:
        - SubnetGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SubnetGroupName') as subnet_group_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::SubnetGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SubnetGroupName') as subnet_group_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::SubnetGroup'
                AND region = 'us-east-1'
    subnet_group:
      name: subnet_group
      id: awscc.memorydb.subnet_group
      x-cfn-schema-name: SubnetGroup
      x-type: get
      x-identifiers:
        - SubnetGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SubnetGroupName') as subnet_group_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ARN') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::SubnetGroup'
              AND data__Identifier = '<SubnetGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'SubnetGroupName') as subnet_group_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'ARN') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::SubnetGroup'
                AND data__Identifier = '<SubnetGroupName>'
                AND region = 'us-east-1'
    users:
      name: users
      id: awscc.memorydb.users
      x-cfn-schema-name: User
      x-type: list
      x-identifiers:
        - UserName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserName') as user_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::User'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserName') as user_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MemoryDB::User'
                AND region = 'us-east-1'
    user:
      name: user
      id: awscc.memorydb.user
      x-cfn-schema-name: User
      x-type: get
      x-identifiers:
        - UserName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.UserName') as user_name,
              JSON_EXTRACT(Properties, '$.AccessString') as access_string,
              JSON_EXTRACT(Properties, '$.AuthenticationMode') as authentication_mode,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::User'
              AND data__Identifier = '<UserName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'UserName') as user_name,
                json_extract_path_text(Properties, 'AccessString') as access_string,
                json_extract_path_text(Properties, 'AuthenticationMode') as authentication_mode,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MemoryDB::User'
                AND data__Identifier = '<UserName>'
                AND region = 'us-east-1'
