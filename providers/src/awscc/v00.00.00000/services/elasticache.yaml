openapi: 3.0.0
info:
  title: ElastiCache
  version: 1.0.0
paths: {}
components:
  schemas:
    GlobalReplicationGroupMember:
      type: object
      additionalProperties: false
      properties:
        ReplicationGroupId:
          description: Regionally unique identifier for the member i.e. ReplicationGroupId.
          type: string
        ReplicationGroupRegion:
          description: The AWS region of the Global Datastore member.
          type: string
        Role:
          description: Indicates the role of the member, primary or secondary.
          type: string
          enum:
            - PRIMARY
            - SECONDARY
    ReshardingConfiguration:
      type: object
      additionalProperties: false
      properties:
        NodeGroupId:
          description: Unique identifier for the Node Group. This is either auto-generated by ElastiCache (4-digit id) or a user supplied id.
          type: string
        PreferredAvailabilityZones:
          description: A list of preferred availability zones for the nodes of new node groups.
          type: array
          uniqueItems: false
          items:
            type: string
    RegionalConfiguration:
      type: object
      additionalProperties: false
      properties:
        ReplicationGroupId:
          description: The replication group id of the Global Datastore member.
          type: string
        ReplicationGroupRegion:
          description: The AWS region of the Global Datastore member.
          type: string
        ReshardingConfigurations:
          description: 'A list of PreferredAvailabilityZones objects that specifies the configuration of a node group in the resharded cluster. '
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/ReshardingConfiguration'
    GlobalReplicationGroup:
      type: object
      properties:
        GlobalReplicationGroupIdSuffix:
          description: 'The suffix name of a Global Datastore. Amazon ElastiCache automatically applies a prefix to the Global Datastore ID when it is created. Each AWS Region has its own prefix. '
          type: string
        AutomaticFailoverEnabled:
          description: AutomaticFailoverEnabled
          type: boolean
        CacheNodeType:
          description: The cache node type of the Global Datastore
          type: string
        EngineVersion:
          description: The engine version of the Global Datastore.
          type: string
        CacheParameterGroupName:
          description: Cache parameter group name to use for the new engine version. This parameter cannot be modified independently.
          type: string
        GlobalNodeGroupCount:
          description: Indicates the number of node groups in the Global Datastore.
          type: integer
        GlobalReplicationGroupDescription:
          description: The optional description of the Global Datastore
          type: string
        GlobalReplicationGroupId:
          description: The name of the Global Datastore, it is generated by ElastiCache adding a prefix to GlobalReplicationGroupIdSuffix.
          type: string
        Members:
          description: The replication groups that comprise the Global Datastore.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/GlobalReplicationGroupMember'
          minItems: 1
        Status:
          description: The status of the Global Datastore
          type: string
        RegionalConfigurations:
          description: 'Describes the replication group IDs, the AWS regions where they are stored and the shard configuration for each that comprise the Global Datastore '
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/RegionalConfiguration'
      required:
        - Members
      x-stackql-resource-name: global_replication_group
      x-stackql-primaryIdentifier:
        - GlobalReplicationGroupId
      x-read-only-properties:
        - GlobalReplicationGroupId
        - Status
      x-required-permissions:
        create:
          - elasticache:CreateGlobalReplicationGroup
          - elasticache:DescribeGlobalReplicationGroups
        read:
          - elasticache:DescribeGlobalReplicationGroups
        update:
          - elasticache:ModifyGlobalReplicationGroup
          - elasticache:FailoverGlobalReplicationGroup
          - elasticache:DescribeGlobalReplicationGroups
          - elasticache:IncreaseNodeGroupsInGlobalReplicationGroup
          - elasticache:DecreaseNodeGroupsInGlobalReplicationGroup
          - elasticache:DisassociateGlobalReplicationGroup
          - elasticache:RebalanceSlotsInGlobalReplicationGroup
        delete:
          - elasticache:DeleteGlobalReplicationGroup
          - elasticache:DisassociateGlobalReplicationGroup
          - elasticache:DescribeGlobalReplicationGroups
        list:
          - elasticache:DescribeGlobalReplicationGroups
    CacheUsageLimits:
      description: The cache capacity limit of the Serverless Cache.
      type: object
      properties:
        DataStorage:
          $ref: '#/components/schemas/DataStorage'
        ECPUPerSecond:
          $ref: '#/components/schemas/ECPUPerSecond'
      additionalProperties: false
    DataStorage:
      description: The cached data capacity of the Serverless Cache.
      type: object
      properties:
        Maximum:
          description: The maximum cached data capacity of the Serverless Cache.
          type: integer
        Unit:
          description: The unix of cached data capacity of the Serverless Cache.
          type: string
          enum:
            - GB
      additionalProperties: false
      required:
        - Maximum
        - Unit
    ECPUPerSecond:
      description: The ECPU per second of the Serverless Cache.
      type: object
      properties:
        Maximum:
          description: The maximum ECPU per second of the Serverless Cache.
          type: integer
      additionalProperties: false
      required:
        - Maximum
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Key:
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with ''aws:''. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          pattern: ^(?!aws:)[a-zA-Z0-9 _\.\/=+:\-@]*$
          minLength: 1
          maxLength: 128
        Value:
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          pattern: ^[a-zA-Z0-9 _\.\/=+:\-@]*$
          minLength: 0
          maxLength: 256
      required:
        - Key
    Endpoint:
      description: The address and the port.
      type: object
      properties:
        Address:
          description: Endpoint address.
          type: string
        Port:
          description: Endpoint port.
          type: string
      additionalProperties: false
    ServerlessCache:
      type: object
      properties:
        ServerlessCacheName:
          description: The name of the Serverless Cache. This value must be unique.
          type: string
        Description:
          description: The description of the Serverless Cache.
          type: string
        Engine:
          description: The engine name of the Serverless Cache.
          type: string
        MajorEngineVersion:
          description: The major engine version of the Serverless Cache.
          type: string
        FullEngineVersion:
          description: The full engine version of the Serverless Cache.
          type: string
        CacheUsageLimits:
          $ref: '#/components/schemas/CacheUsageLimits'
        KmsKeyId:
          description: The ID of the KMS key used to encrypt the cluster.
          type: string
        SecurityGroupIds:
          description: One or more Amazon VPC security groups associated with this Serverless Cache.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        SnapshotArnsToRestore:
          description: The ARN's of snapshot to restore Serverless Cache.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Tags:
          description: An array of key-value pairs to apply to this Serverless Cache.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        UserGroupId:
          description: The ID of the user group.
          type: string
        SubnetIds:
          description: The subnet id's of the Serverless Cache.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        SnapshotRetentionLimit:
          description: The snapshot retention limit of the Serverless Cache.
          type: integer
        DailySnapshotTime:
          description: The daily time range (in UTC) during which the service takes automatic snapshot of the Serverless Cache.
          type: string
        CreateTime:
          description: The creation time of the Serverless Cache.
          type: string
        Status:
          description: The status of the Serverless Cache.
          type: string
        Endpoint:
          $ref: '#/components/schemas/Endpoint'
        ReaderEndpoint:
          $ref: '#/components/schemas/Endpoint'
        ARN:
          description: The ARN of the Serverless Cache.
          type: string
        FinalSnapshotName:
          description: The final snapshot name which is taken before Serverless Cache is deleted.
          type: string
      required:
        - ServerlessCacheName
        - Engine
      x-stackql-resource-name: serverless_cache
      x-stackql-primaryIdentifier:
        - ServerlessCacheName
      x-create-only-properties:
        - ServerlessCacheName
        - Engine
        - MajorEngineVersion
        - KmsKeyId
        - SnapshotArnsToRestore
        - SubnetIds
      x-read-only-properties:
        - FullEngineVersion
        - CreateTime
        - Status
        - Endpoint/Address
        - Endpoint/Port
        - ReaderEndpoint/Address
        - ReaderEndpoint/Port
        - ARN
      x-required-permissions:
        create:
          - elasticache:CreateServerlessCache
          - elasticache:DescribeServerlessCaches
          - elasticache:AddTagsToResource
          - elasticache:ListTagsForResource
          - ec2:CreateTags
          - ec2:CreateVpcEndpoint
          - kms:CreateGrant
          - kms:DescribeKey
        read:
          - elasticache:DescribeServerlessCaches
          - elasticache:ListTagsForResource
        update:
          - elasticache:ModifyServerlessCache
          - elasticache:DescribeServerlessCaches
          - elasticache:AddTagsToResource
          - elasticache:ListTagsForResource
          - elasticache:RemoveTagsFromResource
        delete:
          - elasticache:DeleteServerlessCache
          - elasticache:DescribeServerlessCaches
          - elasticache:ListTagsForResource
        list:
          - elasticache:DescribeServerlessCaches
          - elasticache:ListTagsForResource
    SubnetGroup:
      type: object
      properties:
        Description:
          type: string
          description: The description for the cache subnet group.
        SubnetIds:
          description: The EC2 subnet IDs for the cache subnet group.
          type: array
          items:
            type: string
          x-insertionOrder: false
          uniqueItems: false
        CacheSubnetGroupName:
          type: string
          description: The name for the cache subnet group. This value is stored as a lowercase string.
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Description
        - SubnetIds
      x-stackql-resource-name: subnet_group
      x-stackql-primaryIdentifier:
        - CacheSubnetGroupName
      x-create-only-properties:
        - CacheSubnetGroupName
      x-required-permissions:
        create:
          - elasticache:CreateCacheSubnetGroup
          - elasticache:AddTagsToResource
          - elasticache:DescribeCacheSubnetGroups
          - elasticache:ListTagsForResource
        read:
          - elasticache:DescribeCacheSubnetGroups
          - elasticache:ListTagsForResource
        delete:
          - elasticache:DeleteCacheSubnetGroup
          - elasticache:DescribeCacheSubnetGroups
          - elasticache:ListTagsForResource
        list:
          - elasticache:DescribeCacheSubnetGroups
        update:
          - elasticache:ModifyCacheSubnetGroup
          - elasticache:DescribeCacheSubnetGroups
          - elasticache:AddTagsToResource
          - elasticache:RemoveTagsFromResource
    User:
      type: object
      properties:
        Status:
          description: Indicates the user status. Can be "active", "modifying" or "deleting".
          type: string
        UserId:
          description: The ID of the user.
          pattern: '[a-z][a-z0-9\\-]*'
          type: string
        UserName:
          description: The username of the user.
          type: string
        Engine:
          description: Must be redis.
          type: string
          enum:
            - redis
        AccessString:
          description: Access permissions string used for this user account.
          type: string
        NoPasswordRequired:
          description: Indicates a password is not required for this user account.
          type: boolean
        Passwords:
          type: array
          x-$comment: List of passwords.
          uniqueItems: true
          x-insertionOrder: true
          items:
            type: string
          description: Passwords used for this user account. You can create up to two passwords for each user.
        Arn:
          description: The Amazon Resource Name (ARN) of the user account.
          type: string
        AuthenticationMode:
          type: object
          additionalProperties: false
          properties:
            Type:
              description: Authentication Type
              type: string
              enum:
                - password
                - no-password-required
                - iam
            Passwords:
              type: array
              x-$comment: List of passwords.
              uniqueItems: true
              x-insertionOrder: true
              items:
                type: string
              description: Passwords used for this user account. You can create up to two passwords for each user.
          required:
            - Type
        Tags:
          description: An array of key-value pairs to apply to this user.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - UserId
        - UserName
        - Engine
      x-stackql-resource-name: user
      x-stackql-primaryIdentifier:
        - UserId
      x-create-only-properties:
        - UserId
        - UserName
        - Engine
      x-read-only-properties:
        - Status
        - Arn
      x-required-permissions:
        create:
          - elasticache:CreateUser
          - elasticache:DescribeUsers
          - elasticache:ListTagsForResource
        read:
          - elasticache:DescribeUsers
          - elasticache:ListTagsForResource
        update:
          - elasticache:ModifyUser
          - elasticache:DescribeUsers
          - elasticache:ListTagsForResource
          - elasticache:AddTagsToResource
          - elasticache:RemoveTagsFromResource
        delete:
          - elasticache:DeleteUser
          - elasticache:DescribeUsers
        list:
          - elasticache:DescribeUsers
          - elasticache:ListTagsForResource
    UserGroup:
      type: object
      properties:
        Status:
          description: Indicates user group status. Can be "creating", "active", "modifying", "deleting".
          type: string
        UserGroupId:
          description: The ID of the user group.
          pattern: '[a-z][a-z0-9\\-]*'
          type: string
        Engine:
          description: Must be redis.
          type: string
          enum:
            - redis
        UserIds:
          type: array
          x-$comment: List of users.
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
          description: List of users associated to this user group.
        Arn:
          description: The Amazon Resource Name (ARN) of the user account.
          type: string
        Tags:
          description: An array of key-value pairs to apply to this user.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - UserGroupId
        - Engine
        - UserIds
      x-stackql-resource-name: user_group
      x-stackql-primaryIdentifier:
        - UserGroupId
      x-create-only-properties:
        - UserGroupId
        - Engine
      x-read-only-properties:
        - Status
        - Arn
      x-required-permissions:
        create:
          - elasticache:CreateUserGroup
          - elasticache:DescribeUserGroups
          - elasticache:ListTagsForResource
        read:
          - elasticache:DescribeUserGroups
          - elasticache:ListTagsForResource
        update:
          - elasticache:ModifyUserGroup
          - elasticache:DescribeUserGroups
          - elasticache:ListTagsForResource
          - elasticache:AddTagsToResource
          - elasticache:RemoveTagsFromResource
        delete:
          - elasticache:ModifyReplicationGroup
          - elasticache:DeleteUserGroup
          - elasticache:DescribeUserGroups
          - elasticache:ListTagsForResource
        list:
          - elasticache:DescribeUserGroups
          - elasticache:ListTagsForResource
  x-stackQL-resources:
    global_replication_groups:
      name: global_replication_groups
      id: awscc.elasticache.global_replication_groups
      x-cfn-schema-name: GlobalReplicationGroup
      x-type: list
      x-identifiers:
        - GlobalReplicationGroupId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GlobalReplicationGroupId') as global_replication_group_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::GlobalReplicationGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GlobalReplicationGroupId') as global_replication_group_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::GlobalReplicationGroup'
                AND region = 'us-east-1'
    global_replication_group:
      name: global_replication_group
      id: awscc.elasticache.global_replication_group
      x-cfn-schema-name: GlobalReplicationGroup
      x-type: get
      x-identifiers:
        - GlobalReplicationGroupId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GlobalReplicationGroupIdSuffix') as global_replication_group_id_suffix,
              JSON_EXTRACT(Properties, '$.AutomaticFailoverEnabled') as automatic_failover_enabled,
              JSON_EXTRACT(Properties, '$.CacheNodeType') as cache_node_type,
              JSON_EXTRACT(Properties, '$.EngineVersion') as engine_version,
              JSON_EXTRACT(Properties, '$.CacheParameterGroupName') as cache_parameter_group_name,
              JSON_EXTRACT(Properties, '$.GlobalNodeGroupCount') as global_node_group_count,
              JSON_EXTRACT(Properties, '$.GlobalReplicationGroupDescription') as global_replication_group_description,
              JSON_EXTRACT(Properties, '$.GlobalReplicationGroupId') as global_replication_group_id,
              JSON_EXTRACT(Properties, '$.Members') as members,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.RegionalConfigurations') as regional_configurations
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::GlobalReplicationGroup'
              AND data__Identifier = '<GlobalReplicationGroupId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GlobalReplicationGroupIdSuffix') as global_replication_group_id_suffix,
                json_extract_path_text(Properties, 'AutomaticFailoverEnabled') as automatic_failover_enabled,
                json_extract_path_text(Properties, 'CacheNodeType') as cache_node_type,
                json_extract_path_text(Properties, 'EngineVersion') as engine_version,
                json_extract_path_text(Properties, 'CacheParameterGroupName') as cache_parameter_group_name,
                json_extract_path_text(Properties, 'GlobalNodeGroupCount') as global_node_group_count,
                json_extract_path_text(Properties, 'GlobalReplicationGroupDescription') as global_replication_group_description,
                json_extract_path_text(Properties, 'GlobalReplicationGroupId') as global_replication_group_id,
                json_extract_path_text(Properties, 'Members') as members,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'RegionalConfigurations') as regional_configurations
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::GlobalReplicationGroup'
                AND data__Identifier = '<GlobalReplicationGroupId>'
                AND region = 'us-east-1'
    serverless_caches:
      name: serverless_caches
      id: awscc.elasticache.serverless_caches
      x-cfn-schema-name: ServerlessCache
      x-type: list
      x-identifiers:
        - ServerlessCacheName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ServerlessCacheName') as serverless_cache_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::ServerlessCache'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ServerlessCacheName') as serverless_cache_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::ServerlessCache'
                AND region = 'us-east-1'
    serverless_cache:
      name: serverless_cache
      id: awscc.elasticache.serverless_cache
      x-cfn-schema-name: ServerlessCache
      x-type: get
      x-identifiers:
        - ServerlessCacheName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ServerlessCacheName') as serverless_cache_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.MajorEngineVersion') as major_engine_version,
              JSON_EXTRACT(Properties, '$.FullEngineVersion') as full_engine_version,
              JSON_EXTRACT(Properties, '$.CacheUsageLimits') as cache_usage_limits,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.SnapshotArnsToRestore') as snapshot_arns_to_restore,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UserGroupId') as user_group_id,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.SnapshotRetentionLimit') as snapshot_retention_limit,
              JSON_EXTRACT(Properties, '$.DailySnapshotTime') as daily_snapshot_time,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Endpoint') as endpoint,
              JSON_EXTRACT(Properties, '$.ReaderEndpoint') as reader_endpoint,
              JSON_EXTRACT(Properties, '$.ARN') as a_rn,
              JSON_EXTRACT(Properties, '$.FinalSnapshotName') as final_snapshot_name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::ServerlessCache'
              AND data__Identifier = '<ServerlessCacheName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ServerlessCacheName') as serverless_cache_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Engine') as engine,
                json_extract_path_text(Properties, 'MajorEngineVersion') as major_engine_version,
                json_extract_path_text(Properties, 'FullEngineVersion') as full_engine_version,
                json_extract_path_text(Properties, 'CacheUsageLimits') as cache_usage_limits,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(Properties, 'SnapshotArnsToRestore') as snapshot_arns_to_restore,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'UserGroupId') as user_group_id,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'SnapshotRetentionLimit') as snapshot_retention_limit,
                json_extract_path_text(Properties, 'DailySnapshotTime') as daily_snapshot_time,
                json_extract_path_text(Properties, 'CreateTime') as create_time,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Endpoint') as endpoint,
                json_extract_path_text(Properties, 'ReaderEndpoint') as reader_endpoint,
                json_extract_path_text(Properties, 'ARN') as a_rn,
                json_extract_path_text(Properties, 'FinalSnapshotName') as final_snapshot_name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::ServerlessCache'
                AND data__Identifier = '<ServerlessCacheName>'
                AND region = 'us-east-1'
    subnet_groups:
      name: subnet_groups
      id: awscc.elasticache.subnet_groups
      x-cfn-schema-name: SubnetGroup
      x-type: list
      x-identifiers:
        - CacheSubnetGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CacheSubnetGroupName') as cache_subnet_group_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::SubnetGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CacheSubnetGroupName') as cache_subnet_group_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::SubnetGroup'
                AND region = 'us-east-1'
    subnet_group:
      name: subnet_group
      id: awscc.elasticache.subnet_group
      x-cfn-schema-name: SubnetGroup
      x-type: get
      x-identifiers:
        - CacheSubnetGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.CacheSubnetGroupName') as cache_subnet_group_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::SubnetGroup'
              AND data__Identifier = '<CacheSubnetGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'CacheSubnetGroupName') as cache_subnet_group_name,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::SubnetGroup'
                AND data__Identifier = '<CacheSubnetGroupName>'
                AND region = 'us-east-1'
    users:
      name: users
      id: awscc.elasticache.users
      x-cfn-schema-name: User
      x-type: list
      x-identifiers:
        - UserId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserId') as user_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::User'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserId') as user_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::User'
                AND region = 'us-east-1'
    user:
      name: user
      id: awscc.elasticache.user
      x-cfn-schema-name: User
      x-type: get
      x-identifiers:
        - UserId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.UserId') as user_id,
              JSON_EXTRACT(Properties, '$.UserName') as user_name,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.AccessString') as access_string,
              JSON_EXTRACT(Properties, '$.NoPasswordRequired') as no_password_required,
              JSON_EXTRACT(Properties, '$.Passwords') as passwords,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AuthenticationMode') as authentication_mode,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::User'
              AND data__Identifier = '<UserId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'UserId') as user_id,
                json_extract_path_text(Properties, 'UserName') as user_name,
                json_extract_path_text(Properties, 'Engine') as engine,
                json_extract_path_text(Properties, 'AccessString') as access_string,
                json_extract_path_text(Properties, 'NoPasswordRequired') as no_password_required,
                json_extract_path_text(Properties, 'Passwords') as passwords,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'AuthenticationMode') as authentication_mode,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::User'
                AND data__Identifier = '<UserId>'
                AND region = 'us-east-1'
    user_groups:
      name: user_groups
      id: awscc.elasticache.user_groups
      x-cfn-schema-name: UserGroup
      x-type: list
      x-identifiers:
        - UserGroupId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserGroupId') as user_group_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::UserGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserGroupId') as user_group_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElastiCache::UserGroup'
                AND region = 'us-east-1'
    user_group:
      name: user_group
      id: awscc.elasticache.user_group
      x-cfn-schema-name: UserGroup
      x-type: get
      x-identifiers:
        - UserGroupId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.UserGroupId') as user_group_id,
              JSON_EXTRACT(Properties, '$.Engine') as engine,
              JSON_EXTRACT(Properties, '$.UserIds') as user_ids,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::UserGroup'
              AND data__Identifier = '<UserGroupId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'UserGroupId') as user_group_id,
                json_extract_path_text(Properties, 'Engine') as engine,
                json_extract_path_text(Properties, 'UserIds') as user_ids,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElastiCache::UserGroup'
                AND data__Identifier = '<UserGroupId>'
                AND region = 'us-east-1'
