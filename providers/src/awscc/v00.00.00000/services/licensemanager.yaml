openapi: 3.0.0
info:
  title: LicenseManager
  version: 1.0.0
paths: {}
components:
  schemas:
    Arn:
      type: string
      maxLength: 2048
    Grant:
      type: object
      properties:
        GrantArn:
          description: Arn of the grant.
          $ref: '#/components/schemas/Arn'
        GrantName:
          description: Name for the created Grant.
          type: string
        LicenseArn:
          description: License Arn for the grant.
          $ref: '#/components/schemas/Arn'
        HomeRegion:
          description: Home region for the created grant.
          type: string
        Version:
          description: The version of the grant.
          type: string
        AllowedOperations:
          type: array
          uniqueItems: true
          items:
            type: string
        Principals:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Arn'
        Status:
          type: string
      required: []
      x-stackql-resource-name: grant
      x-stackql-primaryIdentifier:
        - GrantArn
      x-read-only-properties:
        - GrantArn
        - Version
      x-required-permissions:
        create:
          - license-manager:CreateGrant
        read:
          - license-manager:GetGrant
        update:
          - license-manager:CreateGrantVersion
        delete:
          - license-manager:DeleteGrant
        list:
          - license-manager:ListDistributedGrants
    ValidityDateFormat:
      type: object
      additionalProperties: false
      properties:
        Begin:
          description: Validity begin date for the license.
          type: string
          format: date-time
        End:
          description: Validity begin date for the license.
          type: string
          format: date-time
      required:
        - Begin
        - End
    IssuerData:
      type: object
      properties:
        Name:
          type: string
        SignKey:
          type: string
      required:
        - Name
      additionalProperties: false
    Entitlement:
      type: object
      properties:
        Name:
          type: string
        Value:
          type: string
        MaxCount:
          type: integer
        Overage:
          type: boolean
        Unit:
          type: string
        AllowCheckIn:
          type: boolean
      required:
        - Name
        - Unit
      additionalProperties: false
    ConsumptionConfiguration:
      type: object
      properties:
        RenewType:
          type: string
        ProvisionalConfiguration:
          $ref: '#/components/schemas/ProvisionalConfiguration'
        BorrowConfiguration:
          $ref: '#/components/schemas/BorrowConfiguration'
      additionalProperties: false
    ProvisionalConfiguration:
      type: object
      properties:
        MaxTimeToLiveInMinutes:
          type: integer
      required:
        - MaxTimeToLiveInMinutes
      additionalProperties: false
    BorrowConfiguration:
      type: object
      properties:
        MaxTimeToLiveInMinutes:
          type: integer
        AllowEarlyCheckIn:
          type: boolean
      required:
        - MaxTimeToLiveInMinutes
        - AllowEarlyCheckIn
      additionalProperties: false
    Metadata:
      type: object
      properties:
        Name:
          type: string
        Value:
          type: string
      required:
        - Name
        - Value
      additionalProperties: false
    LicenseStatus:
      type: string
    License:
      type: object
      properties:
        ProductSKU:
          description: ProductSKU of the license.
          type: string
          minLength: 1
          maxLength: 1024
        Issuer:
          $ref: '#/components/schemas/IssuerData'
        LicenseName:
          description: Name for the created license.
          type: string
        ProductName:
          description: Product name for the created license.
          type: string
        HomeRegion:
          description: Home region for the created license.
          type: string
        Validity:
          $ref: '#/components/schemas/ValidityDateFormat'
        Entitlements:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Entitlement'
        Beneficiary:
          description: Beneficiary of the license.
          type: string
        ConsumptionConfiguration:
          $ref: '#/components/schemas/ConsumptionConfiguration'
        LicenseMetadata:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Metadata'
        LicenseArn:
          description: Amazon Resource Name is a unique name for each resource.
          $ref: '#/components/schemas/Arn'
        Status:
          $ref: '#/components/schemas/LicenseStatus'
        Version:
          description: The version of the license.
          type: string
      required:
        - LicenseName
        - ProductName
        - Issuer
        - HomeRegion
        - Validity
        - ConsumptionConfiguration
        - Entitlements
      x-stackql-resource-name: license
      x-stackql-primaryIdentifier:
        - LicenseArn
      x-read-only-properties:
        - LicenseArn
        - Version
      x-required-permissions:
        create:
          - license-manager:CreateLicense
        read:
          - license-manager:GetLicense
        update:
          - license-manager:CreateLicenseVersion
        delete:
          - license-manager:DeleteLicense
        list:
          - license-manager:ListLicenses
  x-stackQL-resources:
    grants:
      name: grants
      id: awscc.licensemanager.grants
      x-cfn-schema-name: Grant
      x-type: list
      x-identifiers:
        - GrantArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GrantArn') as grant_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::LicenseManager::Grant'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GrantArn') as grant_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::LicenseManager::Grant'
                AND region = 'us-east-1'
    grant:
      name: grant
      id: awscc.licensemanager.grant
      x-cfn-schema-name: Grant
      x-type: get
      x-identifiers:
        - GrantArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.GrantArn') as grant_arn,
              JSON_EXTRACT(Properties, '$.GrantName') as grant_name,
              JSON_EXTRACT(Properties, '$.LicenseArn') as license_arn,
              JSON_EXTRACT(Properties, '$.HomeRegion') as home_region,
              JSON_EXTRACT(Properties, '$.Version') as version,
              JSON_EXTRACT(Properties, '$.AllowedOperations') as allowed_operations,
              JSON_EXTRACT(Properties, '$.Principals') as principals,
              JSON_EXTRACT(Properties, '$.Status') as status
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::LicenseManager::Grant'
              AND data__Identifier = '<GrantArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'GrantArn') as grant_arn,
                json_extract_path_text(Properties, 'GrantName') as grant_name,
                json_extract_path_text(Properties, 'LicenseArn') as license_arn,
                json_extract_path_text(Properties, 'HomeRegion') as home_region,
                json_extract_path_text(Properties, 'Version') as version,
                json_extract_path_text(Properties, 'AllowedOperations') as allowed_operations,
                json_extract_path_text(Properties, 'Principals') as principals,
                json_extract_path_text(Properties, 'Status') as status
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::LicenseManager::Grant'
                AND data__Identifier = '<GrantArn>'
                AND region = 'us-east-1'
    licenses:
      name: licenses
      id: awscc.licensemanager.licenses
      x-cfn-schema-name: License
      x-type: list
      x-identifiers:
        - LicenseArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LicenseArn') as license_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::LicenseManager::License'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LicenseArn') as license_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::LicenseManager::License'
                AND region = 'us-east-1'
    license:
      name: license
      id: awscc.licensemanager.license
      x-cfn-schema-name: License
      x-type: get
      x-identifiers:
        - LicenseArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ProductSKU') as product_sku,
              JSON_EXTRACT(Properties, '$.Issuer') as issuer,
              JSON_EXTRACT(Properties, '$.LicenseName') as license_name,
              JSON_EXTRACT(Properties, '$.ProductName') as product_name,
              JSON_EXTRACT(Properties, '$.HomeRegion') as home_region,
              JSON_EXTRACT(Properties, '$.Validity') as validity,
              JSON_EXTRACT(Properties, '$.Entitlements') as entitlements,
              JSON_EXTRACT(Properties, '$.Beneficiary') as beneficiary,
              JSON_EXTRACT(Properties, '$.ConsumptionConfiguration') as consumption_configuration,
              JSON_EXTRACT(Properties, '$.LicenseMetadata') as license_metadata,
              JSON_EXTRACT(Properties, '$.LicenseArn') as license_arn,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Version') as version
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::LicenseManager::License'
              AND data__Identifier = '<LicenseArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ProductSKU') as product_sku,
                json_extract_path_text(Properties, 'Issuer') as issuer,
                json_extract_path_text(Properties, 'LicenseName') as license_name,
                json_extract_path_text(Properties, 'ProductName') as product_name,
                json_extract_path_text(Properties, 'HomeRegion') as home_region,
                json_extract_path_text(Properties, 'Validity') as validity,
                json_extract_path_text(Properties, 'Entitlements') as entitlements,
                json_extract_path_text(Properties, 'Beneficiary') as beneficiary,
                json_extract_path_text(Properties, 'ConsumptionConfiguration') as consumption_configuration,
                json_extract_path_text(Properties, 'LicenseMetadata') as license_metadata,
                json_extract_path_text(Properties, 'LicenseArn') as license_arn,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Version') as version
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::LicenseManager::License'
                AND data__Identifier = '<LicenseArn>'
                AND region = 'us-east-1'
