openapi: 3.0.0
info:
  title: PCAConnectorAD
  version: 1.0.0
paths: {}
components:
  schemas:
    Tags:
      type: object
      x-patternProperties:
        .+:
          type: string
      additionalProperties: false
    VpcInformation:
      type: object
      properties:
        SecurityGroupIds:
          type: array
          items:
            type: string
            maxLength: 20
            minLength: 11
            pattern: ^(?:sg-[0-9a-f]{8}|sg-[0-9a-f]{17})$
          maxItems: 5
          minItems: 1
          uniqueItems: true
      required:
        - SecurityGroupIds
      additionalProperties: false
    Connector:
      type: object
      properties:
        CertificateAuthorityArn:
          type: string
          maxLength: 200
          minLength: 5
          pattern: ^arn:[\w-]+:acm-pca:[\w-]+:[0-9]+:certificate-authority(\/[\w-]+)$
        ConnectorArn:
          type: string
          maxLength: 200
          minLength: 5
          pattern: ^arn:[\w-]+:pca-connector-ad:[\w-]+:[0-9]+:connector(\/[\w-]+)$
        DirectoryId:
          type: string
          pattern: ^d-[0-9a-f]{10}$
        Tags:
          $ref: '#/components/schemas/Tags'
        VpcInformation:
          $ref: '#/components/schemas/VpcInformation'
      required:
        - CertificateAuthorityArn
        - DirectoryId
        - VpcInformation
      x-stackql-resource-name: connector
      x-stackql-primaryIdentifier:
        - ConnectorArn
      x-create-only-properties:
        - CertificateAuthorityArn
        - DirectoryId
        - VpcInformation
      x-read-only-properties:
        - ConnectorArn
      x-required-permissions:
        create:
          - acm-pca:DescribeCertificateAuthority
          - acm-pca:GetCertificateAuthorityCertificate
          - acm-pca:GetCertificate
          - acm-pca:IssueCertificate
          - ds:DescribeDirectories
          - ec2:CreateTags
          - ec2:CreateVpcEndpoint
          - ec2:DescribeVpcEndpoints
          - pca-connector-ad:CreateConnector
          - pca-connector-ad:GetConnector
        read:
          - pca-connector-ad:ListTagsForResource
          - pca-connector-ad:GetConnector
        delete:
          - pca-connector-ad:GetConnector
          - pca-connector-ad:DeleteConnector
          - ec2:DeleteVpcEndpoints
          - ec2:DescribeVpcEndpoints
        list:
          - pca-connector-ad:ListConnectors
        update:
          - pca-connector-ad:ListTagsForResource
          - pca-connector-ad:TagResource
          - pca-connector-ad:UntagResource
    DirectoryRegistration:
      type: object
      properties:
        DirectoryId:
          type: string
          pattern: ^d-[0-9a-f]{10}$
        DirectoryRegistrationArn:
          type: string
          maxLength: 200
          minLength: 5
          pattern: ^arn:[\w-]+:pca-connector-ad:[\w-]+:[0-9]+:directory-registration(\/[\w-]+)$
        Tags:
          $ref: '#/components/schemas/Tags'
      required:
        - DirectoryId
      x-stackql-resource-name: directory_registration
      x-stackql-primaryIdentifier:
        - DirectoryRegistrationArn
      x-create-only-properties:
        - DirectoryId
      x-read-only-properties:
        - DirectoryRegistrationArn
      x-required-permissions:
        create:
          - pca-connector-ad:GetDirectoryRegistration
          - pca-connector-ad:CreateDirectoryRegistration
          - ds:AuthorizeApplication
          - ds:DescribeDirectories
        read:
          - pca-connector-ad:ListTagsForResource
          - pca-connector-ad:GetDirectoryRegistration
        delete:
          - pca-connector-ad:GetDirectoryRegistration
          - pca-connector-ad:DeleteDirectoryRegistration
          - ds:DescribeDirectories
          - ds:UnauthorizeApplication
          - ds:UpdateAuthorizedApplication
        list:
          - pca-connector-ad:ListDirectoryRegistrations
        update:
          - pca-connector-ad:ListTagsForResource
          - pca-connector-ad:TagResource
          - pca-connector-ad:UntagResource
    ServicePrincipalName:
      type: object
      properties:
        ConnectorArn:
          type: string
          maxLength: 200
          minLength: 5
          pattern: ^arn:[\w-]+:pca-connector-ad:[\w-]+:[0-9]+:connector(\/[\w-]+)$
        DirectoryRegistrationArn:
          type: string
          maxLength: 200
          minLength: 5
          pattern: ^arn:[\w-]+:pca-connector-ad:[\w-]+:[0-9]+:directory-registration(\/[\w-]+)$
      x-stackql-resource-name: service_principal_name
      x-stackql-primaryIdentifier:
        - ConnectorArn
        - DirectoryRegistrationArn
      x-create-only-properties:
        - ConnectorArn
        - DirectoryRegistrationArn
      x-required-permissions:
        create:
          - ds:UpdateAuthorizedApplication
          - pca-connector-ad:GetServicePrincipalName
          - pca-connector-ad:CreateServicePrincipalName
        read:
          - pca-connector-ad:GetServicePrincipalName
        delete:
          - ds:UpdateAuthorizedApplication
          - pca-connector-ad:GetServicePrincipalName
          - pca-connector-ad:DeleteServicePrincipalName
        list:
          - pca-connector-ad:ListServicePrincipalNames
    ApplicationPolicies:
      type: object
      properties:
        Critical:
          type: boolean
        Policies:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationPolicy'
          maxItems: 100
          minItems: 1
          uniqueItems: true
      required:
        - Policies
      additionalProperties: false
    ApplicationPolicy:
      oneOf:
        - type: object
          title: PolicyType
          properties:
            PolicyType:
              $ref: '#/components/schemas/ApplicationPolicyType'
          required:
            - PolicyType
          additionalProperties: false
        - type: object
          title: PolicyObjectIdentifier
          properties:
            PolicyObjectIdentifier:
              type: string
              maxLength: 64
              minLength: 1
              pattern: ^([0-2])\.([0-9]|([0-3][0-9]))(\.([0-9]+)){0,126}$
          required:
            - PolicyObjectIdentifier
          additionalProperties: false
    ApplicationPolicyType:
      type: string
      enum:
        - ALL_APPLICATION_POLICIES
        - ANY_PURPOSE
        - ATTESTATION_IDENTITY_KEY_CERTIFICATE
        - CERTIFICATE_REQUEST_AGENT
        - CLIENT_AUTHENTICATION
        - CODE_SIGNING
        - CTL_USAGE
        - DIGITAL_RIGHTS
        - DIRECTORY_SERVICE_EMAIL_REPLICATION
        - DISALLOWED_LIST
        - DNS_SERVER_TRUST
        - DOCUMENT_ENCRYPTION
        - DOCUMENT_SIGNING
        - DYNAMIC_CODE_GENERATOR
        - EARLY_LAUNCH_ANTIMALWARE_DRIVER
        - EMBEDDED_WINDOWS_SYSTEM_COMPONENT_VERIFICATION
        - ENCLAVE
        - ENCRYPTING_FILE_SYSTEM
        - ENDORSEMENT_KEY_CERTIFICATE
        - FILE_RECOVERY
        - HAL_EXTENSION
        - IP_SECURITY_END_SYSTEM
        - IP_SECURITY_IKE_INTERMEDIATE
        - IP_SECURITY_TUNNEL_TERMINATION
        - IP_SECURITY_USER
        - ISOLATED_USER_MODE
        - KDC_AUTHENTICATION
        - KERNEL_MODE_CODE_SIGNING
        - KEY_PACK_LICENSES
        - KEY_RECOVERY
        - KEY_RECOVERY_AGENT
        - LICENSE_SERVER_VERIFICATION
        - LIFETIME_SIGNING
        - MICROSOFT_PUBLISHER
        - MICROSOFT_TIME_STAMPING
        - MICROSOFT_TRUST_LIST_SIGNING
        - OCSP_SIGNING
        - OEM_WINDOWS_SYSTEM_COMPONENT_VERIFICATION
        - PLATFORM_CERTIFICATE
        - PREVIEW_BUILD_SIGNING
        - PRIVATE_KEY_ARCHIVAL
        - PROTECTED_PROCESS_LIGHT_VERIFICATION
        - PROTECTED_PROCESS_VERIFICATION
        - QUALIFIED_SUBORDINATION
        - REVOKED_LIST_SIGNER
        - ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION
        - ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION
        - ROOT_PROGRAM_NO_OSCP_FAILOVER_TO_CRL
        - ROOT_LIST_SIGNER
        - SECURE_EMAIL
        - SERVER_AUTHENTICATION
        - SMART_CARD_LOGIN
        - SPC_ENCRYPTED_DIGEST_RETRY_COUNT
        - SPC_RELAXED_PE_MARKER_CHECK
        - TIME_STAMPING
        - WINDOWS_HARDWARE_DRIVER_ATTESTED_VERIFICATION
        - WINDOWS_HARDWARE_DRIVER_EXTENDED_VERIFICATION
        - WINDOWS_HARDWARE_DRIVER_VERIFICATION
        - WINDOWS_HELLO_RECOVERY_KEY_ENCRYPTION
        - WINDOWS_KITS_COMPONENT
        - WINDOWS_RT_VERIFICATION
        - WINDOWS_SOFTWARE_EXTENSION_VERIFICATION
        - WINDOWS_STORE
        - WINDOWS_SYSTEM_COMPONENT_VERIFICATION
        - WINDOWS_TCB_COMPONENT
        - WINDOWS_THIRD_PARTY_APPLICATION_COMPONENT
        - WINDOWS_UPDATE
    CertificateValidity:
      type: object
      properties:
        ValidityPeriod:
          $ref: '#/components/schemas/ValidityPeriod'
        RenewalPeriod:
          $ref: '#/components/schemas/ValidityPeriod'
      required:
        - RenewalPeriod
        - ValidityPeriod
      additionalProperties: false
    ClientCompatibilityV2:
      type: string
      enum:
        - WINDOWS_SERVER_2003
        - WINDOWS_SERVER_2008
        - WINDOWS_SERVER_2008_R2
        - WINDOWS_SERVER_2012
        - WINDOWS_SERVER_2012_R2
        - WINDOWS_SERVER_2016
    ClientCompatibilityV3:
      type: string
      enum:
        - WINDOWS_SERVER_2008
        - WINDOWS_SERVER_2008_R2
        - WINDOWS_SERVER_2012
        - WINDOWS_SERVER_2012_R2
        - WINDOWS_SERVER_2016
    ClientCompatibilityV4:
      type: string
      enum:
        - WINDOWS_SERVER_2012
        - WINDOWS_SERVER_2012_R2
        - WINDOWS_SERVER_2016
    EnrollmentFlagsV2:
      type: object
      properties:
        IncludeSymmetricAlgorithms:
          type: boolean
        UserInteractionRequired:
          type: boolean
        RemoveInvalidCertificateFromPersonalStore:
          type: boolean
        NoSecurityExtension:
          type: boolean
        EnableKeyReuseOnNtTokenKeysetStorageFull:
          type: boolean
      additionalProperties: false
    EnrollmentFlagsV3:
      type: object
      properties:
        IncludeSymmetricAlgorithms:
          type: boolean
        UserInteractionRequired:
          type: boolean
        RemoveInvalidCertificateFromPersonalStore:
          type: boolean
        NoSecurityExtension:
          type: boolean
        EnableKeyReuseOnNtTokenKeysetStorageFull:
          type: boolean
      additionalProperties: false
    EnrollmentFlagsV4:
      type: object
      properties:
        IncludeSymmetricAlgorithms:
          type: boolean
        UserInteractionRequired:
          type: boolean
        RemoveInvalidCertificateFromPersonalStore:
          type: boolean
        NoSecurityExtension:
          type: boolean
        EnableKeyReuseOnNtTokenKeysetStorageFull:
          type: boolean
      additionalProperties: false
    ExtensionsV2:
      type: object
      properties:
        KeyUsage:
          $ref: '#/components/schemas/KeyUsage'
        ApplicationPolicies:
          $ref: '#/components/schemas/ApplicationPolicies'
      required:
        - KeyUsage
      additionalProperties: false
    ExtensionsV3:
      type: object
      properties:
        KeyUsage:
          $ref: '#/components/schemas/KeyUsage'
        ApplicationPolicies:
          $ref: '#/components/schemas/ApplicationPolicies'
      required:
        - KeyUsage
      additionalProperties: false
    ExtensionsV4:
      type: object
      properties:
        KeyUsage:
          $ref: '#/components/schemas/KeyUsage'
        ApplicationPolicies:
          $ref: '#/components/schemas/ApplicationPolicies'
      required:
        - KeyUsage
      additionalProperties: false
    GeneralFlagsV2:
      type: object
      properties:
        AutoEnrollment:
          type: boolean
        MachineType:
          type: boolean
      additionalProperties: false
    GeneralFlagsV3:
      type: object
      properties:
        AutoEnrollment:
          type: boolean
        MachineType:
          type: boolean
      additionalProperties: false
    GeneralFlagsV4:
      type: object
      properties:
        AutoEnrollment:
          type: boolean
        MachineType:
          type: boolean
      additionalProperties: false
    HashAlgorithm:
      type: string
      enum:
        - SHA256
        - SHA384
        - SHA512
    KeySpec:
      type: string
      enum:
        - KEY_EXCHANGE
        - SIGNATURE
    KeyUsage:
      type: object
      properties:
        Critical:
          type: boolean
        UsageFlags:
          $ref: '#/components/schemas/KeyUsageFlags'
      required:
        - UsageFlags
      additionalProperties: false
    KeyUsageFlags:
      type: object
      properties:
        DigitalSignature:
          type: boolean
        NonRepudiation:
          type: boolean
        KeyEncipherment:
          type: boolean
        DataEncipherment:
          type: boolean
        KeyAgreement:
          type: boolean
      additionalProperties: false
    KeyUsageProperty:
      oneOf:
        - type: object
          title: PropertyType
          properties:
            PropertyType:
              $ref: '#/components/schemas/KeyUsagePropertyType'
          required:
            - PropertyType
          additionalProperties: false
        - type: object
          title: PropertyFlags
          properties:
            PropertyFlags:
              $ref: '#/components/schemas/KeyUsagePropertyFlags'
          required:
            - PropertyFlags
          additionalProperties: false
    KeyUsagePropertyFlags:
      type: object
      properties:
        Decrypt:
          type: boolean
        KeyAgreement:
          type: boolean
        Sign:
          type: boolean
      additionalProperties: false
    KeyUsagePropertyType:
      type: string
      enum:
        - ALL
    PrivateKeyAlgorithm:
      type: string
      enum:
        - RSA
        - ECDH_P256
        - ECDH_P384
        - ECDH_P521
    PrivateKeyAttributesV2:
      type: object
      properties:
        MinimalKeyLength:
          type: number
          minimum: 1
        KeySpec:
          $ref: '#/components/schemas/KeySpec'
        CryptoProviders:
          type: array
          items:
            type: string
            maxLength: 100
            minLength: 1
          maxItems: 100
          minItems: 1
          uniqueItems: true
      required:
        - KeySpec
        - MinimalKeyLength
      additionalProperties: false
    PrivateKeyAttributesV3:
      type: object
      properties:
        MinimalKeyLength:
          type: number
          minimum: 1
        KeySpec:
          $ref: '#/components/schemas/KeySpec'
        CryptoProviders:
          type: array
          items:
            type: string
            maxLength: 100
            minLength: 1
          maxItems: 100
          minItems: 1
          uniqueItems: true
        KeyUsageProperty:
          $ref: '#/components/schemas/KeyUsageProperty'
        Algorithm:
          $ref: '#/components/schemas/PrivateKeyAlgorithm'
      required:
        - Algorithm
        - KeySpec
        - KeyUsageProperty
        - MinimalKeyLength
      additionalProperties: false
    PrivateKeyAttributesV4:
      type: object
      properties:
        MinimalKeyLength:
          type: number
          minimum: 1
        KeySpec:
          $ref: '#/components/schemas/KeySpec'
        CryptoProviders:
          type: array
          items:
            type: string
            maxLength: 100
            minLength: 1
          maxItems: 100
          minItems: 1
          uniqueItems: true
        KeyUsageProperty:
          $ref: '#/components/schemas/KeyUsageProperty'
        Algorithm:
          $ref: '#/components/schemas/PrivateKeyAlgorithm'
      required:
        - KeySpec
        - MinimalKeyLength
      additionalProperties: false
    PrivateKeyFlagsV2:
      type: object
      properties:
        ExportableKey:
          type: boolean
        StrongKeyProtectionRequired:
          type: boolean
        ClientVersion:
          $ref: '#/components/schemas/ClientCompatibilityV2'
      required:
        - ClientVersion
      additionalProperties: false
    PrivateKeyFlagsV3:
      type: object
      properties:
        ExportableKey:
          type: boolean
        StrongKeyProtectionRequired:
          type: boolean
        RequireAlternateSignatureAlgorithm:
          type: boolean
        ClientVersion:
          $ref: '#/components/schemas/ClientCompatibilityV3'
      required:
        - ClientVersion
      additionalProperties: false
    PrivateKeyFlagsV4:
      type: object
      properties:
        ExportableKey:
          type: boolean
        StrongKeyProtectionRequired:
          type: boolean
        RequireAlternateSignatureAlgorithm:
          type: boolean
        RequireSameKeyRenewal:
          type: boolean
        UseLegacyProvider:
          type: boolean
        ClientVersion:
          $ref: '#/components/schemas/ClientCompatibilityV4'
      required:
        - ClientVersion
      additionalProperties: false
    SubjectNameFlagsV2:
      type: object
      properties:
        SanRequireDomainDns:
          type: boolean
        SanRequireSpn:
          type: boolean
        SanRequireDirectoryGuid:
          type: boolean
        SanRequireUpn:
          type: boolean
        SanRequireEmail:
          type: boolean
        SanRequireDns:
          type: boolean
        RequireDnsAsCn:
          type: boolean
        RequireEmail:
          type: boolean
        RequireCommonName:
          type: boolean
        RequireDirectoryPath:
          type: boolean
      additionalProperties: false
    SubjectNameFlagsV3:
      type: object
      properties:
        SanRequireDomainDns:
          type: boolean
        SanRequireSpn:
          type: boolean
        SanRequireDirectoryGuid:
          type: boolean
        SanRequireUpn:
          type: boolean
        SanRequireEmail:
          type: boolean
        SanRequireDns:
          type: boolean
        RequireDnsAsCn:
          type: boolean
        RequireEmail:
          type: boolean
        RequireCommonName:
          type: boolean
        RequireDirectoryPath:
          type: boolean
      additionalProperties: false
    SubjectNameFlagsV4:
      type: object
      properties:
        SanRequireDomainDns:
          type: boolean
        SanRequireSpn:
          type: boolean
        SanRequireDirectoryGuid:
          type: boolean
        SanRequireUpn:
          type: boolean
        SanRequireEmail:
          type: boolean
        SanRequireDns:
          type: boolean
        RequireDnsAsCn:
          type: boolean
        RequireEmail:
          type: boolean
        RequireCommonName:
          type: boolean
        RequireDirectoryPath:
          type: boolean
      additionalProperties: false
    TemplateDefinition:
      oneOf:
        - type: object
          title: TemplateV2
          properties:
            TemplateV2:
              $ref: '#/components/schemas/TemplateV2'
          required:
            - TemplateV2
          additionalProperties: false
        - type: object
          title: TemplateV3
          properties:
            TemplateV3:
              $ref: '#/components/schemas/TemplateV3'
          required:
            - TemplateV3
          additionalProperties: false
        - type: object
          title: TemplateV4
          properties:
            TemplateV4:
              $ref: '#/components/schemas/TemplateV4'
          required:
            - TemplateV4
          additionalProperties: false
    TemplateV2:
      type: object
      properties:
        CertificateValidity:
          $ref: '#/components/schemas/CertificateValidity'
        SupersededTemplates:
          type: array
          items:
            type: string
            maxLength: 64
            minLength: 1
            pattern: ^(?!^\s+$)((?![\x5c'\x2b,;<=>#\x22])([\x20-\x7E]))+$
          maxItems: 100
          minItems: 1
          uniqueItems: true
        PrivateKeyAttributes:
          $ref: '#/components/schemas/PrivateKeyAttributesV2'
        PrivateKeyFlags:
          $ref: '#/components/schemas/PrivateKeyFlagsV2'
        EnrollmentFlags:
          $ref: '#/components/schemas/EnrollmentFlagsV2'
        SubjectNameFlags:
          $ref: '#/components/schemas/SubjectNameFlagsV2'
        GeneralFlags:
          $ref: '#/components/schemas/GeneralFlagsV2'
        Extensions:
          $ref: '#/components/schemas/ExtensionsV2'
      required:
        - CertificateValidity
        - EnrollmentFlags
        - Extensions
        - GeneralFlags
        - PrivateKeyAttributes
        - PrivateKeyFlags
        - SubjectNameFlags
      additionalProperties: false
    TemplateV3:
      type: object
      properties:
        CertificateValidity:
          $ref: '#/components/schemas/CertificateValidity'
        SupersededTemplates:
          type: array
          items:
            type: string
            maxLength: 64
            minLength: 1
            pattern: ^(?!^\s+$)((?![\x5c'\x2b,;<=>#\x22])([\x20-\x7E]))+$
          maxItems: 100
          minItems: 1
          uniqueItems: true
        PrivateKeyAttributes:
          $ref: '#/components/schemas/PrivateKeyAttributesV3'
        PrivateKeyFlags:
          $ref: '#/components/schemas/PrivateKeyFlagsV3'
        EnrollmentFlags:
          $ref: '#/components/schemas/EnrollmentFlagsV3'
        SubjectNameFlags:
          $ref: '#/components/schemas/SubjectNameFlagsV3'
        GeneralFlags:
          $ref: '#/components/schemas/GeneralFlagsV3'
        HashAlgorithm:
          $ref: '#/components/schemas/HashAlgorithm'
        Extensions:
          $ref: '#/components/schemas/ExtensionsV3'
      required:
        - CertificateValidity
        - EnrollmentFlags
        - Extensions
        - GeneralFlags
        - HashAlgorithm
        - PrivateKeyAttributes
        - PrivateKeyFlags
        - SubjectNameFlags
      additionalProperties: false
    TemplateV4:
      type: object
      properties:
        CertificateValidity:
          $ref: '#/components/schemas/CertificateValidity'
        SupersededTemplates:
          type: array
          items:
            type: string
            maxLength: 64
            minLength: 1
            pattern: ^(?!^\s+$)((?![\x5c'\x2b,;<=>#\x22])([\x20-\x7E]))+$
          maxItems: 100
          minItems: 1
          uniqueItems: true
        PrivateKeyAttributes:
          $ref: '#/components/schemas/PrivateKeyAttributesV4'
        PrivateKeyFlags:
          $ref: '#/components/schemas/PrivateKeyFlagsV4'
        EnrollmentFlags:
          $ref: '#/components/schemas/EnrollmentFlagsV4'
        SubjectNameFlags:
          $ref: '#/components/schemas/SubjectNameFlagsV4'
        GeneralFlags:
          $ref: '#/components/schemas/GeneralFlagsV4'
        HashAlgorithm:
          $ref: '#/components/schemas/HashAlgorithm'
        Extensions:
          $ref: '#/components/schemas/ExtensionsV4'
      required:
        - CertificateValidity
        - EnrollmentFlags
        - Extensions
        - GeneralFlags
        - PrivateKeyAttributes
        - PrivateKeyFlags
        - SubjectNameFlags
      additionalProperties: false
    ValidityPeriod:
      type: object
      properties:
        PeriodType:
          $ref: '#/components/schemas/ValidityPeriodType'
        Period:
          type: number
          maximum: 8766000
          minimum: 1
      required:
        - Period
        - PeriodType
      additionalProperties: false
    ValidityPeriodType:
      type: string
      enum:
        - HOURS
        - DAYS
        - WEEKS
        - MONTHS
        - YEARS
    Template:
      type: object
      properties:
        ConnectorArn:
          type: string
          maxLength: 200
          minLength: 5
          pattern: ^arn:[\w-]+:pca-connector-ad:[\w-]+:[0-9]+:connector\/[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$
        Definition:
          $ref: '#/components/schemas/TemplateDefinition'
        Name:
          type: string
          maxLength: 64
          minLength: 1
          pattern: ^(?!^\s+$)((?![\x5c'\x2b,;<=>#\x22])([\x20-\x7E]))+$
        ReenrollAllCertificateHolders:
          type: boolean
        Tags:
          $ref: '#/components/schemas/Tags'
        TemplateArn:
          type: string
          maxLength: 200
          minLength: 5
          pattern: ^arn:[\w-]+:pca-connector-ad:[\w-]+:[0-9]+:connector\/[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}\/template\/[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}$
      required:
        - ConnectorArn
        - Definition
        - Name
      x-stackql-resource-name: template
      x-stackql-primaryIdentifier:
        - TemplateArn
      x-create-only-properties:
        - ConnectorArn
        - Name
      x-read-only-properties:
        - TemplateArn
      x-required-permissions:
        create:
          - pca-connector-ad:CreateTemplate
        read:
          - pca-connector-ad:GetTemplate
          - pca-connector-ad:ListTagsForResource
        update:
          - pca-connector-ad:ListTagsForResource
          - pca-connector-ad:TagResource
          - pca-connector-ad:UntagResource
          - pca-connector-ad:UpdateTemplate
        delete:
          - pca-connector-ad:GetTemplate
          - pca-connector-ad:DeleteTemplate
        list:
          - pca-connector-ad:ListTemplates
    AccessRight:
      type: string
      enum:
        - ALLOW
        - DENY
    AccessRights:
      type: object
      properties:
        Enroll:
          $ref: '#/components/schemas/AccessRight'
        AutoEnroll:
          $ref: '#/components/schemas/AccessRight'
      additionalProperties: false
    TemplateGroupAccessControlEntry:
      type: object
      properties:
        AccessRights:
          $ref: '#/components/schemas/AccessRights'
        GroupDisplayName:
          type: string
          maxLength: 256
          minLength: 0
          pattern: ^[\x20-\x7E]+$
        GroupSecurityIdentifier:
          type: string
          maxLength: 256
          minLength: 7
          pattern: ^S-[0-9]-([0-9]+-){1,14}[0-9]+$
        TemplateArn:
          type: string
          maxLength: 200
          minLength: 5
          pattern: ^arn:[\w-]+:pca-connector-ad:[\w-]+:[0-9]+:connector(\/[\w-]+)\/template(\/[\w-]+)$
      required:
        - AccessRights
        - GroupDisplayName
      x-stackql-resource-name: template_group_access_control_entry
      x-stackql-primaryIdentifier:
        - GroupSecurityIdentifier
        - TemplateArn
      x-create-only-properties:
        - GroupSecurityIdentifier
        - TemplateArn
      x-required-permissions:
        create:
          - pca-connector-ad:CreateTemplateGroupAccessControlEntry
        read:
          - pca-connector-ad:GetTemplateGroupAccessControlEntry
        update:
          - pca-connector-ad:UpdateTemplateGroupAccessControlEntry
        delete:
          - pca-connector-ad:DeleteTemplateGroupAccessControlEntry
          - pca-connector-ad:GetTemplateGroupAccessControlEntry
        list:
          - pca-connector-ad:ListTemplateGroupAccessControlEntries
  x-stackQL-resources:
    connectors:
      name: connectors
      id: awscc.pcaconnectorad.connectors
      x-cfn-schema-name: Connector
      x-type: list
      x-identifiers:
        - ConnectorArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConnectorArn') as connector_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::PCAConnectorAD::Connector'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ConnectorArn') as connector_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::PCAConnectorAD::Connector'
                AND region = 'us-east-1'
    connector:
      name: connector
      id: awscc.pcaconnectorad.connector
      x-cfn-schema-name: Connector
      x-type: get
      x-identifiers:
        - ConnectorArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CertificateAuthorityArn') as certificate_authority_arn,
              JSON_EXTRACT(Properties, '$.ConnectorArn') as connector_arn,
              JSON_EXTRACT(Properties, '$.DirectoryId') as directory_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.VpcInformation') as vpc_information
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::PCAConnectorAD::Connector'
              AND data__Identifier = '<ConnectorArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'CertificateAuthorityArn') as certificate_authority_arn,
                json_extract_path_text(Properties, 'ConnectorArn') as connector_arn,
                json_extract_path_text(Properties, 'DirectoryId') as directory_id,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'VpcInformation') as vpc_information
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::PCAConnectorAD::Connector'
                AND data__Identifier = '<ConnectorArn>'
                AND region = 'us-east-1'
    directory_registrations:
      name: directory_registrations
      id: awscc.pcaconnectorad.directory_registrations
      x-cfn-schema-name: DirectoryRegistration
      x-type: list
      x-identifiers:
        - DirectoryRegistrationArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DirectoryRegistrationArn') as directory_registration_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::PCAConnectorAD::DirectoryRegistration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DirectoryRegistrationArn') as directory_registration_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::PCAConnectorAD::DirectoryRegistration'
                AND region = 'us-east-1'
    directory_registration:
      name: directory_registration
      id: awscc.pcaconnectorad.directory_registration
      x-cfn-schema-name: DirectoryRegistration
      x-type: get
      x-identifiers:
        - DirectoryRegistrationArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DirectoryId') as directory_id,
              JSON_EXTRACT(Properties, '$.DirectoryRegistrationArn') as directory_registration_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::PCAConnectorAD::DirectoryRegistration'
              AND data__Identifier = '<DirectoryRegistrationArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DirectoryId') as directory_id,
                json_extract_path_text(Properties, 'DirectoryRegistrationArn') as directory_registration_arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::PCAConnectorAD::DirectoryRegistration'
                AND data__Identifier = '<DirectoryRegistrationArn>'
                AND region = 'us-east-1'
    service_principal_names:
      name: service_principal_names
      id: awscc.pcaconnectorad.service_principal_names
      x-cfn-schema-name: ServicePrincipalName
      x-type: list
      x-identifiers:
        - ConnectorArn
        - DirectoryRegistrationArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConnectorArn') as connector_arn,
              JSON_EXTRACT(Properties, '$.DirectoryRegistrationArn') as directory_registration_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::PCAConnectorAD::ServicePrincipalName'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ConnectorArn') as connector_arn,
                json_extract_path_text(Properties, 'DirectoryRegistrationArn') as directory_registration_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::PCAConnectorAD::ServicePrincipalName'
                AND region = 'us-east-1'
    service_principal_name:
      name: service_principal_name
      id: awscc.pcaconnectorad.service_principal_name
      x-cfn-schema-name: ServicePrincipalName
      x-type: get
      x-identifiers:
        - ConnectorArn
        - DirectoryRegistrationArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ConnectorArn') as connector_arn,
              JSON_EXTRACT(Properties, '$.DirectoryRegistrationArn') as directory_registration_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::PCAConnectorAD::ServicePrincipalName'
              AND data__Identifier = '<ConnectorArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ConnectorArn') as connector_arn,
                json_extract_path_text(Properties, 'DirectoryRegistrationArn') as directory_registration_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::PCAConnectorAD::ServicePrincipalName'
                AND data__Identifier = '<ConnectorArn>'
                AND region = 'us-east-1'
    templates:
      name: templates
      id: awscc.pcaconnectorad.templates
      x-cfn-schema-name: Template
      x-type: list
      x-identifiers:
        - TemplateArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TemplateArn') as template_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::PCAConnectorAD::Template'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TemplateArn') as template_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::PCAConnectorAD::Template'
                AND region = 'us-east-1'
    template:
      name: template
      id: awscc.pcaconnectorad.template
      x-cfn-schema-name: Template
      x-type: get
      x-identifiers:
        - TemplateArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ConnectorArn') as connector_arn,
              JSON_EXTRACT(Properties, '$.Definition') as definition,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ReenrollAllCertificateHolders') as reenroll_all_certificate_holders,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TemplateArn') as template_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::PCAConnectorAD::Template'
              AND data__Identifier = '<TemplateArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ConnectorArn') as connector_arn,
                json_extract_path_text(Properties, 'Definition') as definition,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'ReenrollAllCertificateHolders') as reenroll_all_certificate_holders,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TemplateArn') as template_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::PCAConnectorAD::Template'
                AND data__Identifier = '<TemplateArn>'
                AND region = 'us-east-1'
    template_group_access_control_entries:
      name: template_group_access_control_entries
      id: awscc.pcaconnectorad.template_group_access_control_entries
      x-cfn-schema-name: TemplateGroupAccessControlEntry
      x-type: list
      x-identifiers:
        - GroupSecurityIdentifier
        - TemplateArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GroupSecurityIdentifier') as group_security_identifier,
              JSON_EXTRACT(Properties, '$.TemplateArn') as template_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::PCAConnectorAD::TemplateGroupAccessControlEntry'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GroupSecurityIdentifier') as group_security_identifier,
                json_extract_path_text(Properties, 'TemplateArn') as template_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::PCAConnectorAD::TemplateGroupAccessControlEntry'
                AND region = 'us-east-1'
    template_group_access_control_entry:
      name: template_group_access_control_entry
      id: awscc.pcaconnectorad.template_group_access_control_entry
      x-cfn-schema-name: TemplateGroupAccessControlEntry
      x-type: get
      x-identifiers:
        - GroupSecurityIdentifier
        - TemplateArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccessRights') as access_rights,
              JSON_EXTRACT(Properties, '$.GroupDisplayName') as group_display_name,
              JSON_EXTRACT(Properties, '$.GroupSecurityIdentifier') as group_security_identifier,
              JSON_EXTRACT(Properties, '$.TemplateArn') as template_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::PCAConnectorAD::TemplateGroupAccessControlEntry'
              AND data__Identifier = '<GroupSecurityIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AccessRights') as access_rights,
                json_extract_path_text(Properties, 'GroupDisplayName') as group_display_name,
                json_extract_path_text(Properties, 'GroupSecurityIdentifier') as group_security_identifier,
                json_extract_path_text(Properties, 'TemplateArn') as template_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::PCAConnectorAD::TemplateGroupAccessControlEntry'
                AND data__Identifier = '<GroupSecurityIdentifier>'
                AND region = 'us-east-1'
