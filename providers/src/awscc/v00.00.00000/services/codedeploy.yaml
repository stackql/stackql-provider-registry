openapi: 3.0.0
info:
  title: CodeDeploy
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    Application:
      type: object
      properties:
        ApplicationName:
          description: A name for the application. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the application name.
          type: string
        ComputePlatform:
          description: The compute platform that CodeDeploy deploys the application to.
          type: string
        Tags:
          description: 'The metadata that you apply to CodeDeploy applications to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define. '
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          x-insertionOrder: false
          uniqueItems: false
      x-stackql-resource-name: application
      x-stackql-primaryIdentifier:
        - ApplicationName
      x-create-only-properties:
        - ApplicationName
        - ComputePlatform
      x-required-permissions:
        create:
          - codedeploy:CreateApplication
          - codedeploy:TagResource
        read:
          - codedeploy:GetApplication
          - codedeploy:ListTagsForResource
        delete:
          - codedeploy:GetApplication
          - codedeploy:DeleteApplication
        update:
          - codedeploy:TagResource
          - codedeploy:UntagResource
        list:
          - codedeploy:ListApplications
    TimeBasedLinear:
      type: object
      additionalProperties: false
      properties:
        LinearInterval:
          type: integer
        LinearPercentage:
          type: integer
      required:
        - LinearInterval
        - LinearPercentage
    TimeBasedCanary:
      type: object
      additionalProperties: false
      properties:
        CanaryPercentage:
          type: integer
        CanaryInterval:
          type: integer
      required:
        - CanaryPercentage
        - CanaryInterval
    TrafficRoutingConfig:
      type: object
      additionalProperties: false
      properties:
        Type:
          type: string
        TimeBasedLinear:
          $ref: '#/components/schemas/TimeBasedLinear'
        TimeBasedCanary:
          $ref: '#/components/schemas/TimeBasedCanary'
      required:
        - Type
    MinimumHealthyHostsPerZone:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: integer
        Type:
          type: string
      required:
        - Type
        - Value
    ZonalConfig:
      type: object
      additionalProperties: false
      properties:
        FirstZoneMonitorDurationInSeconds:
          type: integer
          format: int64
        MonitorDurationInSeconds:
          type: integer
          format: int64
        MinimumHealthyHostsPerZone:
          $ref: '#/components/schemas/MinimumHealthyHostsPerZone'
      required: []
    MinimumHealthyHosts:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: integer
        Type:
          type: string
      required:
        - Type
        - Value
    DeploymentConfig:
      type: object
      properties:
        ComputePlatform:
          description: The destination platform type for the deployment (Lambda, Server, or ECS).
          type: string
        DeploymentConfigName:
          description: A name for the deployment configuration. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the deployment configuration name. For more information, see Name Type.
          type: string
        MinimumHealthyHosts:
          description: 'The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value.'
          $ref: '#/components/schemas/MinimumHealthyHosts'
        ZonalConfig:
          description: The zonal deployment config that specifies how the zonal deployment behaves
          $ref: '#/components/schemas/ZonalConfig'
        TrafficRoutingConfig:
          description: The configuration that specifies how the deployment traffic is routed.
          $ref: '#/components/schemas/TrafficRoutingConfig'
      x-stackql-resource-name: deployment_config
      x-stackql-primaryIdentifier:
        - DeploymentConfigName
      x-create-only-properties:
        - DeploymentConfigName
        - MinimumHealthyHosts
        - ComputePlatform
        - ZonalConfig
        - TrafficRoutingConfig
      x-required-permissions:
        create:
          - codedeploy:CreateDeploymentConfig
        read:
          - codedeploy:GetDeploymentConfig
        delete:
          - codedeploy:GetDeploymentConfig
          - codedeploy:DeleteDeploymentConfig
        list:
          - codedeploy:ListDeploymentConfigs
  x-stackQL-resources:
    applications:
      name: applications
      id: awscc.codedeploy.applications
      x-cfn-schema-name: Application
      x-type: list
      x-identifiers:
        - ApplicationName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::CodeDeploy::Application'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationName') as application_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::CodeDeploy::Application'
                AND region = 'us-east-1'
    application:
      name: application
      id: awscc.codedeploy.application
      x-cfn-schema-name: Application
      x-type: get
      x-identifiers:
        - ApplicationName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationName') as application_name,
              JSON_EXTRACT(Properties, '$.ComputePlatform') as compute_platform,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::CodeDeploy::Application'
              AND data__Identifier = '<ApplicationName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationName') as application_name,
                json_extract_path_text(Properties, 'ComputePlatform') as compute_platform,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::CodeDeploy::Application'
                AND data__Identifier = '<ApplicationName>'
                AND region = 'us-east-1'
    deployment_configs:
      name: deployment_configs
      id: awscc.codedeploy.deployment_configs
      x-cfn-schema-name: DeploymentConfig
      x-type: list
      x-identifiers:
        - DeploymentConfigName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DeploymentConfigName') as deployment_config_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::CodeDeploy::DeploymentConfig'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DeploymentConfigName') as deployment_config_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::CodeDeploy::DeploymentConfig'
                AND region = 'us-east-1'
    deployment_config:
      name: deployment_config
      id: awscc.codedeploy.deployment_config
      x-cfn-schema-name: DeploymentConfig
      x-type: get
      x-identifiers:
        - DeploymentConfigName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ComputePlatform') as compute_platform,
              JSON_EXTRACT(Properties, '$.DeploymentConfigName') as deployment_config_name,
              JSON_EXTRACT(Properties, '$.MinimumHealthyHosts') as minimum_healthy_hosts,
              JSON_EXTRACT(Properties, '$.ZonalConfig') as zonal_config,
              JSON_EXTRACT(Properties, '$.TrafficRoutingConfig') as traffic_routing_config
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::CodeDeploy::DeploymentConfig'
              AND data__Identifier = '<DeploymentConfigName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ComputePlatform') as compute_platform,
                json_extract_path_text(Properties, 'DeploymentConfigName') as deployment_config_name,
                json_extract_path_text(Properties, 'MinimumHealthyHosts') as minimum_healthy_hosts,
                json_extract_path_text(Properties, 'ZonalConfig') as zonal_config,
                json_extract_path_text(Properties, 'TrafficRoutingConfig') as traffic_routing_config
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::CodeDeploy::DeploymentConfig'
                AND data__Identifier = '<DeploymentConfigName>'
                AND region = 'us-east-1'
