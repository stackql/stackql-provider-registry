openapi: 3.0.0
info:
  title: Lambda
  version: 1.0.0
paths: {}
components:
  schemas:
    AllowedPublishers:
      type: object
      description: When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
      additionalProperties: false
      properties:
        SigningProfileVersionArns:
          type: array
          description: List of Signing profile version Arns
          minItems: 1
          maxItems: 20
          items:
            type: string
            pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
            minLength: 12
            maxLength: 1024
      required:
        - SigningProfileVersionArns
    CodeSigningPolicies:
      type: object
      description: Policies to control how to act if a signature is invalid
      additionalProperties: false
      properties:
        UntrustedArtifactOnDeployment:
          type: string
          description: Indicates how Lambda operations involve updating the code artifact will operate. Default to Warn if not provided
          default: Warn
          enum:
            - Warn
            - Enforce
      required:
        - UntrustedArtifactOnDeployment
    CodeSigningConfig:
      type: object
      properties:
        Description:
          description: A description of the CodeSigningConfig
          type: string
          minLength: 0
          maxLength: 256
        AllowedPublishers:
          description: When the CodeSigningConfig is later on attached to a function, the function code will be expected to be signed by profiles from this list
          $ref: '#/components/schemas/AllowedPublishers'
        CodeSigningPolicies:
          description: Policies to control how to act if a signature is invalid
          $ref: '#/components/schemas/CodeSigningPolicies'
        CodeSigningConfigId:
          description: A unique identifier for CodeSigningConfig resource
          type: string
          pattern: csc-[a-zA-Z0-9-_\.]{17}
        CodeSigningConfigArn:
          description: A unique Arn for CodeSigningConfig resource
          type: string
          pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:code-signing-config:csc-[a-z0-9]{17}
      required:
        - AllowedPublishers
      x-stackql-resource-name: code_signing_config
      x-stackql-primaryIdentifier:
        - CodeSigningConfigArn
      x-read-only-properties:
        - CodeSigningConfigId
        - CodeSigningConfigArn
      x-required-permissions:
        create:
          - lambda:CreateCodeSigningConfig
        read:
          - lambda:GetCodeSigningConfig
        update:
          - lambda:UpdateCodeSigningConfig
        delete:
          - lambda:DeleteCodeSigningConfig
        list:
          - lambda:ListCodeSigningConfigs
    DestinationConfig:
      type: object
      additionalProperties: false
      description: (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
      properties:
        OnFailure:
          description: The destination configuration for failed invocations.
          $ref: '#/components/schemas/OnFailure'
    OnFailure:
      type: object
      description: A destination for events that failed processing.
      additionalProperties: false
      properties:
        Destination:
          description: The Amazon Resource Name (ARN) of the destination resource.
          type: string
          pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
          minLength: 12
          maxLength: 1024
    OnSuccess:
      description: The destination configuration for successful invocations.
      type: object
      properties:
        Destination:
          description: The Amazon Resource Name (ARN) of the destination resource.
          type: string
          pattern: ^$|arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
          minLength: 0
          maxLength: 350
      required:
        - Destination
      additionalProperties: false
    EventInvokeConfig:
      type: object
      properties:
        DestinationConfig:
          $ref: '#/components/schemas/DestinationConfig'
        FunctionName:
          description: The name of the Lambda function.
          type: string
          pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?$
        MaximumEventAgeInSeconds:
          description: The maximum age of a request that Lambda sends to a function for processing.
          type: integer
          minimum: 60
          maximum: 21600
        MaximumRetryAttempts:
          description: The maximum number of times to retry when the function returns an error.
          type: integer
          minimum: 0
          maximum: 2
        Qualifier:
          description: The identifier of a version or alias.
          type: string
          pattern: ^(|[a-zA-Z0-9$_-]{1,129})$
      required:
        - FunctionName
        - Qualifier
      x-stackql-resource-name: event_invoke_config
      x-stackql-primaryIdentifier:
        - FunctionName
        - Qualifier
      x-create-only-properties:
        - FunctionName
        - Qualifier
      x-required-permissions:
        create:
          - lambda:PutFunctionEventInvokeConfig
        read:
          - lambda:GetFunctionEventInvokeConfig
        update:
          - lambda:UpdateFunctionEventInvokeConfig
        delete:
          - lambda:DeleteFunctionEventInvokeConfig
        list:
          - lambda:ListFunctionEventInvokeConfigs
    FilterCriteria:
      type: object
      description: The filter criteria to control event filtering.
      additionalProperties: false
      properties:
        Filters:
          description: List of filters of this FilterCriteria
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Filter'
          minItems: 1
          maxItems: 20
    Filter:
      type: object
      description: The filter object that defines parameters for ESM filtering.
      additionalProperties: false
      properties:
        Pattern:
          type: string
          description: The filter pattern that defines which events should be passed for invocations.
          pattern: .*
          minLength: 0
          maxLength: 4096
    SourceAccessConfiguration:
      type: object
      additionalProperties: false
      description: The configuration used by AWS Lambda to access event source
      properties:
        Type:
          description: The type of source access configuration.
          enum:
            - BASIC_AUTH
            - VPC_SUBNET
            - VPC_SECURITY_GROUP
            - SASL_SCRAM_512_AUTH
            - SASL_SCRAM_256_AUTH
            - VIRTUAL_HOST
            - CLIENT_CERTIFICATE_TLS_AUTH
            - SERVER_ROOT_CA_CERTIFICATE
          type: string
        URI:
          description: The URI for the source access configuration resource.
          type: string
          pattern: '[a-zA-Z0-9-\/*:_+=.@-]*'
          minLength: 1
          maxLength: 200
    SelfManagedEventSource:
      type: object
      additionalProperties: false
      description: The configuration used by AWS Lambda to access a self-managed event source.
      properties:
        Endpoints:
          description: The endpoints for a self-managed event source.
          $ref: '#/components/schemas/Endpoints'
    Endpoints:
      type: object
      additionalProperties: false
      description: The endpoints used by AWS Lambda to access a self-managed event source.
      properties:
        KafkaBootstrapServers:
          type: array
          description: A list of Kafka server endpoints.
          uniqueItems: true
          items:
            type: string
            description: The URL of a Kafka server.
            pattern: ^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9]):[0-9]{1,5}
            minLength: 1
            maxLength: 300
          minItems: 1
          maxItems: 10
    ConsumerGroupId:
      description: The identifier for the Kafka Consumer Group to join.
      type: string
      pattern: '[a-zA-Z0-9-\/*:_+=.@-]*'
      minLength: 1
      maxLength: 200
    AmazonManagedKafkaEventSourceConfig:
      description: Specific configuration settings for an MSK event source.
      type: object
      additionalProperties: false
      properties:
        ConsumerGroupId:
          description: The identifier for the Kafka Consumer Group to join.
          $ref: '#/components/schemas/ConsumerGroupId'
    SelfManagedKafkaEventSourceConfig:
      description: Specific configuration settings for a Self-Managed Apache Kafka event source.
      type: object
      additionalProperties: false
      properties:
        ConsumerGroupId:
          description: The identifier for the Kafka Consumer Group to join.
          $ref: '#/components/schemas/ConsumerGroupId'
    MaximumConcurrency:
      description: The maximum number of concurrent functions that an event source can invoke.
      type: integer
      minimum: 2
      maximum: 1000
    ScalingConfig:
      description: The scaling configuration for the event source.
      type: object
      additionalProperties: false
      properties:
        MaximumConcurrency:
          description: The maximum number of concurrent functions that the event source can invoke.
          $ref: '#/components/schemas/MaximumConcurrency'
    DocumentDBEventSourceConfig:
      description: Document db event source config.
      type: object
      additionalProperties: false
      properties:
        DatabaseName:
          description: The database name to connect to.
          type: string
          minLength: 1
          maxLength: 63
        CollectionName:
          description: The collection name to connect to.
          type: string
          minLength: 1
          maxLength: 57
        FullDocument:
          description: Include full document in change stream response. The default option will only send the changes made to documents to Lambda. If you want the complete document sent to Lambda, set this to UpdateLookup.
          type: string
          enum:
            - UpdateLookup
            - Default
    EventSourceMapping:
      type: object
      properties:
        Id:
          description: Event Source Mapping Identifier UUID.
          type: string
          pattern: '[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}'
          minLength: 36
          maxLength: 36
        BatchSize:
          description: The maximum number of items to retrieve in a single batch.
          type: integer
          minimum: 1
          maximum: 10000
        BisectBatchOnFunctionError:
          description: (Streams) If the function returns an error, split the batch in two and retry.
          type: boolean
        DestinationConfig:
          description: (Streams) An Amazon SQS queue or Amazon SNS topic destination for discarded records.
          $ref: '#/components/schemas/DestinationConfig'
        Enabled:
          description: Disables the event source mapping to pause polling and invocation.
          type: boolean
        EventSourceArn:
          description: The Amazon Resource Name (ARN) of the event source.
          type: string
          pattern: arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}(-gov)?-[a-z]+-\d{1})?:(\d{12})?:(.*)
          minLength: 12
          maxLength: 1024
        FilterCriteria:
          description: The filter criteria to control event filtering.
          $ref: '#/components/schemas/FilterCriteria'
        FunctionName:
          description: The name of the Lambda function.
          type: string
          pattern: (arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?
          minLength: 1
          maxLength: 140
        MaximumBatchingWindowInSeconds:
          description: (Streams) The maximum amount of time to gather records before invoking the function, in seconds.
          type: integer
          minimum: 0
          maximum: 300
        MaximumRecordAgeInSeconds:
          description: (Streams) The maximum age of a record that Lambda sends to a function for processing.
          type: integer
          minimum: -1
          maximum: 604800
        MaximumRetryAttempts:
          description: (Streams) The maximum number of times to retry when the function returns an error.
          type: integer
          minimum: -1
          maximum: 10000
        ParallelizationFactor:
          description: (Streams) The number of batches to process from each shard concurrently.
          type: integer
          minimum: 1
          maximum: 10
        StartingPosition:
          description: The position in a stream from which to start reading. Required for Amazon Kinesis and Amazon DynamoDB Streams sources.
          type: string
          pattern: (LATEST|TRIM_HORIZON|AT_TIMESTAMP)+
          minLength: 6
          maxLength: 12
        StartingPositionTimestamp:
          description: With StartingPosition set to AT_TIMESTAMP, the time from which to start reading, in Unix time seconds.
          type: number
        Topics:
          description: (Kafka) A list of Kafka topics.
          type: array
          uniqueItems: true
          items:
            type: string
            pattern: ^[^.]([a-zA-Z0-9\-_.]+)
            minLength: 1
            maxLength: 249
          minItems: 1
          maxItems: 1
        Queues:
          description: (ActiveMQ) A list of ActiveMQ queues.
          type: array
          uniqueItems: true
          items:
            type: string
            pattern: '[\s\S]*'
            minLength: 1
            maxLength: 1000
          minItems: 1
          maxItems: 1
        SourceAccessConfigurations:
          description: A list of SourceAccessConfiguration.
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/SourceAccessConfiguration'
          minItems: 1
          maxItems: 22
        TumblingWindowInSeconds:
          description: (Streams) Tumbling window (non-overlapping time window) duration to perform aggregations.
          type: integer
          minimum: 0
          maximum: 900
        FunctionResponseTypes:
          description: (Streams) A list of response types supported by the function.
          type: array
          uniqueItems: true
          items:
            type: string
            enum:
              - ReportBatchItemFailures
          minLength: 0
          maxLength: 1
        SelfManagedEventSource:
          description: Self-managed event source endpoints.
          $ref: '#/components/schemas/SelfManagedEventSource'
        AmazonManagedKafkaEventSourceConfig:
          description: Specific configuration settings for an MSK event source.
          $ref: '#/components/schemas/AmazonManagedKafkaEventSourceConfig'
        SelfManagedKafkaEventSourceConfig:
          description: Specific configuration settings for a Self-Managed Apache Kafka event source.
          $ref: '#/components/schemas/SelfManagedKafkaEventSourceConfig'
        ScalingConfig:
          description: The scaling configuration for the event source.
          $ref: '#/components/schemas/ScalingConfig'
        DocumentDBEventSourceConfig:
          description: Document db event source config.
          $ref: '#/components/schemas/DocumentDBEventSourceConfig'
      required:
        - FunctionName
      x-stackql-resource-name: event_source_mapping
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - EventSourceArn
        - StartingPosition
        - StartingPositionTimestamp
        - SelfManagedEventSource
        - AmazonManagedKafkaEventSourceConfig
        - SelfManagedKafkaEventSourceConfig
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - lambda:CreateEventSourceMapping
          - lambda:GetEventSourceMapping
        delete:
          - lambda:DeleteEventSourceMapping
          - lambda:GetEventSourceMapping
        list:
          - lambda:ListEventSourceMappings
        read:
          - lambda:GetEventSourceMapping
        update:
          - lambda:UpdateEventSourceMapping
          - lambda:GetEventSourceMapping
    ImageConfig:
      description: Configuration values that override the container image Dockerfile settings. For more information, see [Container image settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
      additionalProperties: false
      type: object
      properties:
        WorkingDirectory:
          description: Specifies the working directory. The length of the directory string cannot exceed 1,000 characters.
          type: string
        Command:
          maxItems: 1500
          uniqueItems: true
          description: Specifies parameters that you want to pass in with ENTRYPOINT. You can specify a maximum of 1,500 parameters in the list.
          type: array
          items:
            type: string
        EntryPoint:
          maxItems: 1500
          uniqueItems: true
          description: Specifies the entry point to their application, which is typically the location of the runtime executable. You can specify a maximum of 1,500 string entries in the list.
          type: array
          items:
            type: string
    TracingConfig:
      description: The function's [](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html) tracing configuration. To sample and record incoming requests, set ``Mode`` to ``Active``.
      additionalProperties: false
      type: object
      properties:
        Mode:
          description: The tracing mode.
          type: string
          enum:
            - Active
            - PassThrough
    VpcConfig:
      description: |-
        The VPC security groups and subnets that are attached to a Lambda function. When you connect a function to a VPC, Lambda creates an elastic network interface for each combination of security group and subnet in the function's VPC configuration. The function can only access resources and the internet through that VPC. For more information, see [VPC Settings](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
          When you delete a function, CFN monitors the state of its network interfaces and waits for Lambda to delete them before proceeding. If the VPC is defined in the same stack, the network interfaces need to be deleted by Lambda before CFN can delete the VPC's resources.
         To monitor network interfaces, CFN needs the ``ec2:DescribeNetworkInterfaces`` permission. It obtains this from the user or role that modifies the stack. If you don't provide this permission, CFN does not wait for network interfaces to be deleted.
      additionalProperties: false
      type: object
      properties:
        Ipv6AllowedForDualStack:
          description: Allows outbound IPv6 traffic on VPC functions that are connected to dual-stack subnets.
          type: boolean
        SecurityGroupIds:
          maxItems: 5
          uniqueItems: false
          description: A list of VPC security group IDs.
          type: array
          items:
            type: string
        SubnetIds:
          maxItems: 16
          uniqueItems: false
          description: A list of VPC subnet IDs.
          type: array
          items:
            type: string
    DeadLetterConfig:
      description: The [dead-letter queue](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#dlq) for failed asynchronous invocations.
      additionalProperties: false
      type: object
      properties:
        TargetArn:
          pattern: ^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$
          description: The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.
          type: string
    RuntimeManagementConfig:
      description: Sets the runtime management configuration for a function's version. For more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
      additionalProperties: false
      type: object
      properties:
        UpdateRuntimeOn:
          description: |-
            Specify the runtime update mode.
              + *Auto (default)* - Automatically update to the most recent and secure runtime version using a [Two-phase runtime version rollout](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html#runtime-management-two-phase). This is the best choice for most customers to ensure they always benefit from runtime updates.
             + *FunctionUpdate* - LAM updates the runtime of you function to the most recent and secure runtime version when you update your function. This approach synchronizes runtime updates with function deployments, giving you control over when runtime updates are applied and allowing you to detect and mitigate rare runtime update incompatibilities early. When using this setting, you need to regularly update your functions to keep their runtime up-to-date.
             + *Manual* - You specify a runtime version in your function configuration. The function will use this runtime version indefinitely. In the rare case where a new runtime version is incomp
          type: string
          enum:
            - Auto
            - FunctionUpdate
            - Manual
        RuntimeVersionArn:
          description: |-
            The ARN of the runtime version you want the function to use.
              This is only required if you're using the *Manual* runtime update mode.
          type: string
      required:
        - UpdateRuntimeOn
    SnapStart:
      description: The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
      additionalProperties: false
      type: object
      properties:
        ApplyOn:
          description: Set ``ApplyOn`` to ``PublishedVersions`` to create a snapshot of the initialized execution environment when you publish a function version.
          type: string
          enum:
            - PublishedVersions
            - None
      required:
        - ApplyOn
    SnapStartResponse:
      description: The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
      additionalProperties: false
      type: object
      properties:
        OptimizationStatus:
          description: When you provide a [qualified Amazon Resource Name (ARN)](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using), this response element indicates whether SnapStart is activated for the specified function version.
          type: string
          enum:
            - 'On'
            - 'Off'
        ApplyOn:
          description: When set to ``PublishedVersions``, Lambda creates a snapshot of the execution environment when you publish a function version.
          type: string
          enum:
            - PublishedVersions
            - None
    Code:
      description: |-
        The [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html) for a Lambda function. To deploy a function defined as a container image, you specify the location of a container image in the Amazon ECR registry. For a .zip file deployment package, you can specify the location of an object in Amazon S3. For Node.js and Python functions, you can specify the function code inline in the template.
         Changes to a deployment package in Amazon S3 or a container image in ECR are not detected automatically during stack updates. To update the function code, change the object key or version in the template.
      additionalProperties: false
      type: object
      properties:
        S3ObjectVersion:
          minLength: 1
          description: For versioned objects, the version of the deployment package object to use.
          type: string
          maxLength: 1024
        S3Bucket:
          minLength: 3
          pattern: ^[0-9A-Za-z\.\-_]*(?<!\.)$
          description: An Amazon S3 bucket in the same AWS-Region as your function. The bucket can be in a different AWS-account.
          type: string
          maxLength: 63
        ZipFile:
          description: |-
            (Node.js and Python) The source code of your Lambda function. If you include your function source inline with this parameter, CFN places it in a file named ``index`` and zips it to create a [deployment package](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-package.html). This zip file cannot exceed 4MB. For the ``Handler`` property, the first part of the handler identifier must be ``index``. For example, ``index.handler``.
              For JSON, you must escape quotes and special characters such as newline (``\n``) with a backslash.
             If you specify a function that interacts with an AWS CloudFormation custom resource, you don't have to write your own functions to send responses to the custom resource that invoked the function. AWS CloudFormation provides a response module ([cfn-response](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html)) that simplifies sending responses. See [Using Lambda with CloudFormation](https://docs
          type: string
        S3Key:
          minLength: 1
          description: The Amazon S3 key of the deployment package.
          type: string
          maxLength: 1024
        ImageUri:
          description: URI of a [container image](https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html) in the Amazon ECR registry.
          type: string
    LoggingConfig:
      description: The function's Amazon CloudWatch Logs configuration settings.
      additionalProperties: false
      type: object
      properties:
        LogFormat:
          description: The format in which Lambda sends your function's application and system logs to CloudWatch. Select between plain text and structured JSON.
          type: string
          enum:
            - Text
            - JSON
        ApplicationLogLevel:
          description: Set this property to filter the application logs for your function that Lambda sends to CloudWatch. Lambda only sends application logs at the selected level of detail and lower, where ``TRACE`` is the highest level and ``FATAL`` is the lowest.
          type: string
          enum:
            - TRACE
            - DEBUG
            - INFO
            - WARN
            - ERROR
            - FATAL
        LogGroup:
          minLength: 1
          pattern: '[\.\-_/#A-Za-z0-9]+'
          description: The name of the Amazon CloudWatch log group the function sends logs to. By default, Lambda functions send logs to a default log group named ``/aws/lambda/<function name>``. To use a different log group, enter an existing log group or enter a new log group name.
          type: string
          maxLength: 512
        SystemLogLevel:
          description: Set this property to filter the system logs for your function that Lambda sends to CloudWatch. Lambda only sends system logs at the selected level of detail and lower, where ``DEBUG`` is the highest level and ``WARN`` is the lowest.
          type: string
          enum:
            - DEBUG
            - INFO
            - WARN
    Environment:
      description: A function's environment variable settings. You can use environment variables to adjust your function's behavior without updating code. An environment variable is a pair of strings that are stored in a function's version-specific configuration.
      additionalProperties: false
      type: object
      properties:
        Variables:
          x-patternProperties:
            '[a-zA-Z][a-zA-Z0-9_]+':
              type: string
          description: Environment variable key-value pairs. For more information, see [Using Lambda environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html).
          additionalProperties: false
          type: object
    FileSystemConfig:
      description: Details about the connection between a Lambda function and an [Amazon EFS file system](https://docs.aws.amazon.com/lambda/latest/dg/configuration-filesystem.html).
      additionalProperties: false
      type: object
      properties:
        Arn:
          pattern: ^arn:aws[a-zA-Z-]*:elasticfilesystem:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:access-point/fsap-[a-f0-9]{17}$
          description: The Amazon Resource Name (ARN) of the Amazon EFS access point that provides access to the file system.
          type: string
          maxLength: 200
        LocalMountPath:
          pattern: ^/mnt/[a-zA-Z0-9-_.]+$
          description: The path where the function can access the file system, starting with ``/mnt/``.
          type: string
          maxLength: 160
      required:
        - Arn
        - LocalMountPath
    Tag:
      description: ''
      additionalProperties: false
      type: object
      properties:
        Value:
          minLength: 0
          description: ''
          type: string
          maxLength: 256
        Key:
          minLength: 1
          description: ''
          type: string
          maxLength: 128
      required:
        - Key
    EphemeralStorage:
      description: The size of the function's ``/tmp`` directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.
      additionalProperties: false
      type: object
      properties:
        Size:
          description: The size of the function's ``/tmp`` directory.
          maximum: 10240
          type: integer
          minimum: 512
      required:
        - Size
    Function:
      type: object
      properties:
        Description:
          description: A description of the function.
          type: string
          maxLength: 256
        TracingConfig:
          description: Set ``Mode`` to ``Active`` to sample and trace a subset of incoming requests with [X-Ray](https://docs.aws.amazon.com/lambda/latest/dg/services-xray.html).
          $ref: '#/components/schemas/TracingConfig'
        VpcConfig:
          description: For network connectivity to AWS resources in a VPC, specify a list of security groups and subnets in the VPC. When you connect a function to a VPC, it can access resources and the internet only through that VPC. For more information, see [Configuring a Lambda function to access resources in a VPC](https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html).
          $ref: '#/components/schemas/VpcConfig'
        RuntimeManagementConfig:
          description: Sets the runtime management configuration for a function's version. For more information, see [Runtime updates](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-update.html).
          $ref: '#/components/schemas/RuntimeManagementConfig'
        ReservedConcurrentExecutions:
          description: The number of simultaneous executions to reserve for the function.
          type: integer
          minimum: 0
        SnapStart:
          description: The function's [SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart.html) setting.
          $ref: '#/components/schemas/SnapStart'
        FileSystemConfigs:
          maxItems: 1
          description: |-
            Connection settings for an Amazon EFS file system. To connect a function to a file system, a mount target must be available in every Availability Zone that your function connects to. If your template contains an [AWS::EFS::MountTarget](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-mounttarget.html) resource, you must also specify a ``DependsOn`` attribute to ensure that the mount target is created or updated before the function.
             For more information about using the ``DependsOn`` attribute, see [DependsOn Attribute](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-dependson.html).
          type: array
          items:
            $ref: '#/components/schemas/FileSystemConfig'
        FunctionName:
          minLength: 1
          description: |-
            The name of the Lambda function, up to 64 characters in length. If you don't specify a name, CFN generates one.
             If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
          type: string
        Runtime:
          description: |-
            The identifier of the function's [runtime](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html). Runtime is required if the deployment package is a .zip file archive.
             The following list includes deprecated runtimes. For more information, see [Runtime deprecation policy](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html#runtime-support-policy).
          type: string
        KmsKeyArn:
          pattern: ^(arn:(aws[a-zA-Z-]*)?:[a-z0-9-.]+:.*)|()$
          description: >-
            The ARN of the KMSlong (KMS) customer managed key that's used to encrypt your function's [environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-encryption). When [Lambda SnapStart](https://docs.aws.amazon.com/lambda/latest/dg/snapstart-security.html) is activated, Lambda also uses this key is to encrypt your function's snapshot. If you deploy your function using a container image, Lambda also uses this key to encrypt your
            function when it's deployed. Note that this is not the same key that's used to protect your container image in the Amazon Elastic Container Registry (Amazon ECR). If you don't provide a customer managed key, Lambda uses a default service key.
          type: string
        PackageType:
          description: The type of deployment package. Set to ``Image`` for container image and set ``Zip`` for .zip file archive.
          type: string
          enum:
            - Image
            - Zip
        CodeSigningConfigArn:
          pattern: arn:(aws[a-zA-Z-]*)?:lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:code-signing-config:csc-[a-z0-9]{17}
          description: To enable code signing for this function, specify the ARN of a code-signing configuration. A code-signing configuration includes a set of signing profiles, which define the trusted publishers for this function.
          type: string
        Layers:
          uniqueItems: false
          description: A list of [function layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html) to add to the function's execution environment. Specify each layer by its ARN, including the version.
          type: array
          items:
            type: string
        Tags:
          uniqueItems: true
          description: A list of [tags](https://docs.aws.amazon.com/lambda/latest/dg/tagging.html) to apply to the function.
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        ImageConfig:
          description: Configuration values that override the container image Dockerfile settings. For more information, see [Container image settings](https://docs.aws.amazon.com/lambda/latest/dg/images-create.html#images-parms).
          $ref: '#/components/schemas/ImageConfig'
        MemorySize:
          description: The amount of [memory available to the function](https://docs.aws.amazon.com/lambda/latest/dg/configuration-function-common.html#configuration-memory-console) at runtime. Increasing the function memory also increases its CPU allocation. The default value is 128 MB. The value can be any multiple of 1 MB. Note that new AWS accounts have reduced concurrency and memory quotas. AWS raises these quotas automatically based on your usage. You can also request a quota increase.
          type: integer
        DeadLetterConfig:
          description: A dead-letter queue configuration that specifies the queue or topic where Lambda sends asynchronous events when they fail processing. For more information, see [Dead-letter queues](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-dlq).
          $ref: '#/components/schemas/DeadLetterConfig'
        Timeout:
          description: The amount of time (in seconds) that Lambda allows a function to run before stopping it. The default is 3 seconds. The maximum allowed value is 900 seconds. For more information, see [Lambda execution environment](https://docs.aws.amazon.com/lambda/latest/dg/runtimes-context.html).
          type: integer
          minimum: 1
        Handler:
          pattern: ^[^\s]+$
          description: The name of the method within your code that Lambda calls to run your function. Handler is required if the deployment package is a .zip file archive. The format includes the file name. It can also include namespaces and other qualifiers, depending on the runtime. For more information, see [Lambda programming model](https://docs.aws.amazon.com/lambda/latest/dg/foundation-progmodel.html).
          type: string
          maxLength: 128
        SnapStartResponse:
          description: ''
          $ref: '#/components/schemas/SnapStartResponse'
        Code:
          description: The code for the function.
          $ref: '#/components/schemas/Code'
        Role:
          pattern: ^arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
          description: The Amazon Resource Name (ARN) of the function's execution role.
          type: string
        LoggingConfig:
          description: The function's Amazon CloudWatch Logs configuration settings.
          $ref: '#/components/schemas/LoggingConfig'
        Environment:
          description: Environment variables that are accessible from function code during execution.
          $ref: '#/components/schemas/Environment'
        Arn:
          description: ''
          type: string
        EphemeralStorage:
          description: The size of the function's ``/tmp`` directory in MB. The default value is 512, but it can be any whole number between 512 and 10,240 MB.
          $ref: '#/components/schemas/EphemeralStorage'
        Architectures:
          minItems: 1
          maxItems: 1
          uniqueItems: true
          description: The instruction set architecture that the function supports. Enter a string array with one of the valid values (arm64 or x86_64). The default value is ``x86_64``.
          type: array
          items:
            type: string
            enum:
              - x86_64
              - arm64
      required:
        - Code
        - Role
      x-stackql-resource-name: function
      x-stackql-primaryIdentifier:
        - FunctionName
      x-create-only-properties:
        - FunctionName
      x-read-only-properties:
        - SnapStartResponse
        - SnapStartResponse/ApplyOn
        - SnapStartResponse/OptimizationStatus
        - Arn
      x-required-permissions:
        read:
          - lambda:GetFunction
          - lambda:GetFunctionCodeSigningConfig
        create:
          - lambda:CreateFunction
          - lambda:GetFunction
          - lambda:PutFunctionConcurrency
          - iam:PassRole
          - s3:GetObject
          - s3:GetObjectVersion
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
          - elasticfilesystem:DescribeMountTargets
          - kms:CreateGrant
          - kms:Decrypt
          - kms:Encrypt
          - kms:GenerateDataKey
          - lambda:GetCodeSigningConfig
          - lambda:GetFunctionCodeSigningConfig
          - lambda:GetLayerVersion
          - lambda:GetRuntimeManagementConfig
          - lambda:PutRuntimeManagementConfig
          - lambda:TagResource
          - lambda:GetPolicy
          - lambda:AddPermission
          - lambda:RemovePermission
          - lambda:GetResourcePolicy
          - lambda:PutResourcePolicy
        update:
          - lambda:DeleteFunctionConcurrency
          - lambda:GetFunction
          - lambda:PutFunctionConcurrency
          - lambda:ListTags
          - lambda:TagResource
          - lambda:UntagResource
          - lambda:UpdateFunctionConfiguration
          - lambda:UpdateFunctionCode
          - iam:PassRole
          - s3:GetObject
          - s3:GetObjectVersion
          - ec2:DescribeSecurityGroups
          - ec2:DescribeSubnets
          - ec2:DescribeVpcs
          - elasticfilesystem:DescribeMountTargets
          - kms:CreateGrant
          - kms:Decrypt
          - kms:GenerateDataKey
          - lambda:GetRuntimeManagementConfig
          - lambda:PutRuntimeManagementConfig
          - lambda:PutFunctionCodeSigningConfig
          - lambda:DeleteFunctionCodeSigningConfig
          - lambda:GetCodeSigningConfig
          - lambda:GetFunctionCodeSigningConfig
          - lambda:GetPolicy
          - lambda:AddPermission
          - lambda:RemovePermission
          - lambda:GetResourcePolicy
          - lambda:PutResourcePolicy
          - lambda:DeleteResourcePolicy
        list:
          - lambda:ListFunctions
        delete:
          - lambda:DeleteFunction
          - lambda:GetFunction
          - ec2:DescribeNetworkInterfaces
    Content:
      type: object
      additionalProperties: false
      properties:
        S3ObjectVersion:
          description: For versioned objects, the version of the layer archive object to use.
          type: string
        S3Bucket:
          description: The Amazon S3 bucket of the layer archive.
          type: string
        S3Key:
          description: The Amazon S3 key of the layer archive.
          type: string
      required:
        - S3Bucket
        - S3Key
    LayerVersion:
      type: object
      properties:
        CompatibleRuntimes:
          description: A list of compatible function runtimes. Used for filtering with ListLayers and ListLayerVersions.
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            type: string
        LicenseInfo:
          description: The layer's software license.
          type: string
        Description:
          description: The description of the version.
          type: string
        LayerName:
          description: The name or Amazon Resource Name (ARN) of the layer.
          type: string
        Content:
          description: The function layer archive.
          $ref: '#/components/schemas/Content'
        LayerVersionArn:
          type: string
        CompatibleArchitectures:
          description: A list of compatible instruction set architectures.
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            type: string
      required:
        - Content
      x-stackql-resource-name: layer_version
      x-stackql-primaryIdentifier:
        - LayerVersionArn
      x-create-only-properties:
        - CompatibleRuntimes
        - LicenseInfo
        - CompatibleArchitectures
        - LayerName
        - Description
        - Content
      x-read-only-properties:
        - LayerVersionArn
      x-required-permissions:
        create:
          - lambda:PublishLayerVersion
          - s3:GetObject
          - s3:GetObjectVersion
        read:
          - lambda:GetLayerVersion
        delete:
          - lambda:GetLayerVersion
          - lambda:DeleteLayerVersion
        list:
          - lambda:ListLayerVersions
    LayerVersionPermission:
      type: object
      properties:
        Id:
          description: ID generated by service
          type: string
        Action:
          description: The API action that grants access to the layer.
          type: string
        LayerVersionArn:
          description: The name or Amazon Resource Name (ARN) of the layer.
          type: string
        OrganizationId:
          description: With the principal set to *, grant permission to all accounts in the specified organization.
          type: string
        Principal:
          description: An account ID, or * to grant layer usage permission to all accounts in an organization, or all AWS accounts (if organizationId is not specified).
          type: string
      required:
        - LayerVersionArn
        - Action
        - Principal
      x-stackql-resource-name: layer_version_permission
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - OrganizationId
        - Principal
        - Action
        - LayerVersionArn
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - lambda:AddLayerVersionPermission
        read:
          - lambda:GetLayerVersionPolicy
        delete:
          - lambda:GetLayerVersionPolicy
          - lambda:RemoveLayerVersionPermission
        list:
          - lambda:GetLayerVersionPolicy
    Permission:
      type: object
      properties:
        Id:
          description: ''
          type: string
          pattern: ^.*$
          minLength: 1
          maxLength: 256
        Action:
          description: The action that the principal can use on the function. For example, ``lambda:InvokeFunction`` or ``lambda:GetFunction``.
          type: string
          pattern: ^(lambda:[*]|lambda:[a-zA-Z]+|[*])$
          minLength: 1
          maxLength: 256
        EventSourceToken:
          description: For Alexa Smart Home functions, a token that the invoker must supply.
          type: string
          pattern: ^[a-zA-Z0-9._\-]+$
          minLength: 1
          maxLength: 256
        FunctionName:
          description: |-
            The name of the Lambda function, version, or alias.
              **Name formats**
             +   *Function name* – ``my-function`` (name-only), ``my-function:v1`` (with alias).
              +   *Function ARN* – ``arn:aws:lambda:us-west-2:123456789012:function:my-function``.
              +   *Partial ARN* – ``123456789012:function:my-function``.
              
             You can append a version number or alias to any of the formats. The length constraint applies only to the full ARN. If you specify only the function name, it is limited to 64 characters in length.
          type: string
          pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?$
          minLength: 1
          maxLength: 140
        FunctionUrlAuthType:
          description: The type of authentication that your function URL uses. Set to ``AWS_IAM`` if you want to restrict access to authenticated users only. Set to ``NONE`` if you want to bypass IAM authentication to create a public endpoint. For more information, see [Security and auth model for Lambda function URLs](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).
          type: string
          enum:
            - AWS_IAM
            - NONE
        Principal:
          description: The AWS-service or AWS-account that invokes the function. If you specify a service, use ``SourceArn`` or ``SourceAccount`` to limit who can invoke the function through that service.
          type: string
          pattern: ^.*$
          minLength: 1
          maxLength: 256
        PrincipalOrgID:
          description: The identifier for your organization in AOlong. Use this to grant permissions to all the AWS-accounts under this organization.
          type: string
          pattern: ^o-[a-z0-9]{10,32}$
          minLength: 12
          maxLength: 34
        SourceAccount:
          description: For AWS-service, the ID of the AWS-account that owns the resource. Use this together with ``SourceArn`` to ensure that the specified account owns the resource. It is possible for an Amazon S3 bucket to be deleted by its owner and recreated by another account.
          type: string
          pattern: ^\d{12}$
          minLength: 12
          maxLength: 12
        SourceArn:
          description: |-
            For AWS-services, the ARN of the AWS resource that invokes the function. For example, an Amazon S3 bucket or Amazon SNS topic.
             Note that Lambda configures the comparison using the ``StringLike`` operator.
          type: string
          pattern: ^arn:(aws[a-zA-Z0-9-]*):([a-zA-Z0-9\-])+:([a-z]{2}((-gov)|(-iso([a-z]?)))?-[a-z]+-\d{1})?:(\d{12})?:(.*)$
          minLength: 12
          maxLength: 1024
      required:
        - FunctionName
        - Action
        - Principal
      x-stackql-resource-name: permission
      x-stackql-primaryIdentifier:
        - FunctionName
        - Id
      x-create-only-properties:
        - FunctionName
        - FunctionUrlAuthType
        - SourceAccount
        - SourceArn
        - Principal
        - PrincipalOrgID
        - Action
        - EventSourceToken
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - lambda:AddPermission
        read:
          - lambda:GetPolicy
        delete:
          - lambda:RemovePermission
        list:
          - lambda:GetPolicy
    AllowHeaders:
      items:
        type: string
        minLength: 1
        maxLength: 1024
      type: array
      minItems: 1
      maxItems: 100
      x-insertionOrder: true
    AllowMethods:
      items:
        type: string
        enum:
          - GET
          - PUT
          - HEAD
          - POST
          - PATCH
          - DELETE
          - '*'
      type: array
      minItems: 1
      maxItems: 6
      x-insertionOrder: true
    AllowOrigins:
      items:
        type: string
        minLength: 1
        maxLength: 253
      type: array
      minItems: 1
      maxItems: 100
      x-insertionOrder: true
    ExposeHeaders:
      items:
        type: string
        minLength: 1
        maxLength: 1024
      type: array
      minItems: 1
      maxItems: 100
      x-insertionOrder: true
    Cors:
      additionalProperties: false
      properties:
        AllowCredentials:
          description: Specifies whether credentials are included in the CORS request.
          type: boolean
        AllowHeaders:
          description: Represents a collection of allowed headers.
          $ref: '#/components/schemas/AllowHeaders'
        AllowMethods:
          description: Represents a collection of allowed HTTP methods.
          $ref: '#/components/schemas/AllowMethods'
        AllowOrigins:
          description: Represents a collection of allowed origins.
          $ref: '#/components/schemas/AllowOrigins'
        ExposeHeaders:
          description: Represents a collection of exposed headers.
          $ref: '#/components/schemas/ExposeHeaders'
        MaxAge:
          type: integer
          minimum: 0
          maximum: 86400
      type: object
    Url:
      type: object
      properties:
        TargetFunctionArn:
          description: The Amazon Resource Name (ARN) of the function associated with the Function URL.
          type: string
          pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:((?!\d+)[0-9a-zA-Z-_]+))?$
        Qualifier:
          description: The alias qualifier for the target function. If TargetFunctionArn is unqualified then Qualifier must be passed.
          type: string
          minLength: 1
          maxLength: 128
          pattern: ((?!^[0-9]+$)([a-zA-Z0-9-_]+))
        AuthType:
          description: Can be either AWS_IAM if the requests are authorized via IAM, or NONE if no authorization is configured on the Function URL.
          type: string
          enum:
            - AWS_IAM
            - NONE
        InvokeMode:
          description: The invocation mode for the function’s URL. Set to BUFFERED if you want to buffer responses before returning them to the client. Set to RESPONSE_STREAM if you want to stream responses, allowing faster time to first byte and larger response payload sizes. If not set, defaults to BUFFERED.
          type: string
          enum:
            - BUFFERED
            - RESPONSE_STREAM
        FunctionArn:
          description: The full Amazon Resource Name (ARN) of the function associated with the Function URL.
          type: string
          pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:((?!\d+)[0-9a-zA-Z-_]+))?$
        FunctionUrl:
          description: The generated url for this resource.
          type: string
        Cors:
          $ref: '#/components/schemas/Cors'
      required:
        - TargetFunctionArn
        - AuthType
      x-stackql-resource-name: url
      x-stackql-primaryIdentifier:
        - FunctionArn
      x-create-only-properties:
        - TargetFunctionArn
        - Qualifier
      x-read-only-properties:
        - FunctionUrl
        - FunctionArn
      x-required-permissions:
        create:
          - lambda:CreateFunctionUrlConfig
        read:
          - lambda:GetFunctionUrlConfig
        update:
          - lambda:UpdateFunctionUrlConfig
        list:
          - lambda:ListFunctionUrlConfigs
        delete:
          - lambda:DeleteFunctionUrlConfig
    ProvisionedConcurrencyConfiguration:
      type: object
      description: A provisioned concurrency configuration for a function's version.
      additionalProperties: false
      properties:
        ProvisionedConcurrentExecutions:
          type: integer
          description: The amount of provisioned concurrency to allocate for the version.
      required:
        - ProvisionedConcurrentExecutions
    RuntimePolicy:
      type: object
      description: Runtime Management Config of a function.
      additionalProperties: false
      properties:
        RuntimeVersionArn:
          type: string
          description: The ARN of the runtime the function is configured to use. If the runtime update mode is manual, the ARN is returned, otherwise null is returned.
          minLength: 26
          maxLength: 2048
          pattern: ^arn:(aws[a-zA-Z-]*):lambda:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}::runtime:.+$
        UpdateRuntimeOn:
          type: string
          description: The runtime update mode.
      required:
        - UpdateRuntimeOn
    Version:
      type: object
      properties:
        FunctionArn:
          type: string
          description: The ARN of the version.
        Version:
          type: string
          description: The version number.
        CodeSha256:
          type: string
          description: Only publish a version if the hash value matches the value that's specified. Use this option to avoid publishing a version if the function code has changed since you last updated it. Updates are not supported for this property.
        Description:
          type: string
          description: A description for the version to override the description in the function configuration. Updates are not supported for this property.
          minLength: 0
          maxLength: 256
        FunctionName:
          type: string
          description: The name of the Lambda function.
          minLength: 1
          maxLength: 140
          pattern: ^(arn:(aws[a-zA-Z-]*)?:lambda:)?([a-z]{2}(-gov)?-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?$
        ProvisionedConcurrencyConfig:
          description: Specifies a provisioned concurrency configuration for a function's version. Updates are not supported for this property.
          $ref: '#/components/schemas/ProvisionedConcurrencyConfiguration'
        RuntimePolicy:
          description: Specifies the runtime management configuration of a function. Displays runtimeVersionArn only for Manual.
          $ref: '#/components/schemas/RuntimePolicy'
      required:
        - FunctionName
      x-stackql-resource-name: version
      x-stackql-primaryIdentifier:
        - FunctionArn
      x-create-only-properties:
        - FunctionName
        - Description
        - CodeSha256
        - ProvisionedConcurrencyConfig
        - RuntimePolicy
      x-read-only-properties:
        - Version
        - FunctionArn
      x-required-permissions:
        create:
          - lambda:PublishVersion
          - lambda:GetFunctionConfiguration
          - lambda:PutProvisionedConcurrencyConfig
          - lambda:GetProvisionedConcurrencyConfig
          - lambda:PutRuntimeManagementConfig
          - lambda:GetRuntimeManagementConfig
        read:
          - lambda:GetFunctionConfiguration
          - lambda:GetProvisionedConcurrencyConfig
          - lambda:GetRuntimeManagementConfig
        delete:
          - lambda:GetFunctionConfiguration
          - lambda:DeleteFunction
        list:
          - lambda:ListVersionsByFunction
        update: []
  x-stackQL-resources:
    code_signing_configs:
      name: code_signing_configs
      id: awscc.lambda.code_signing_configs
      x-cfn-schema-name: CodeSigningConfig
      x-type: list
      x-identifiers:
        - CodeSigningConfigArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CodeSigningConfigArn') as code_signing_config_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::CodeSigningConfig'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CodeSigningConfigArn') as code_signing_config_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::CodeSigningConfig'
                AND region = 'us-east-1'
    code_signing_config:
      name: code_signing_config
      id: awscc.lambda.code_signing_config
      x-cfn-schema-name: CodeSigningConfig
      x-type: get
      x-identifiers:
        - CodeSigningConfigArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AllowedPublishers') as allowed_publishers,
              JSON_EXTRACT(Properties, '$.CodeSigningPolicies') as code_signing_policies,
              JSON_EXTRACT(Properties, '$.CodeSigningConfigId') as code_signing_config_id,
              JSON_EXTRACT(Properties, '$.CodeSigningConfigArn') as code_signing_config_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::CodeSigningConfig'
              AND data__Identifier = '<CodeSigningConfigArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'AllowedPublishers') as allowed_publishers,
                json_extract_path_text(Properties, 'CodeSigningPolicies') as code_signing_policies,
                json_extract_path_text(Properties, 'CodeSigningConfigId') as code_signing_config_id,
                json_extract_path_text(Properties, 'CodeSigningConfigArn') as code_signing_config_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::CodeSigningConfig'
                AND data__Identifier = '<CodeSigningConfigArn>'
                AND region = 'us-east-1'
    event_invoke_configs:
      name: event_invoke_configs
      id: awscc.lambda.event_invoke_configs
      x-cfn-schema-name: EventInvokeConfig
      x-type: list
      x-identifiers:
        - FunctionName
        - Qualifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.Qualifier') as qualifier
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::EventInvokeConfig'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionName') as function_name,
                json_extract_path_text(Properties, 'Qualifier') as qualifier
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::EventInvokeConfig'
                AND region = 'us-east-1'
    event_invoke_config:
      name: event_invoke_config
      id: awscc.lambda.event_invoke_config
      x-cfn-schema-name: EventInvokeConfig
      x-type: get
      x-identifiers:
        - FunctionName
        - Qualifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DestinationConfig') as destination_config,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.MaximumEventAgeInSeconds') as maximum_event_age_in_seconds,
              JSON_EXTRACT(Properties, '$.MaximumRetryAttempts') as maximum_retry_attempts,
              JSON_EXTRACT(Properties, '$.Qualifier') as qualifier
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::EventInvokeConfig'
              AND data__Identifier = '<FunctionName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DestinationConfig') as destination_config,
                json_extract_path_text(Properties, 'FunctionName') as function_name,
                json_extract_path_text(Properties, 'MaximumEventAgeInSeconds') as maximum_event_age_in_seconds,
                json_extract_path_text(Properties, 'MaximumRetryAttempts') as maximum_retry_attempts,
                json_extract_path_text(Properties, 'Qualifier') as qualifier
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::EventInvokeConfig'
                AND data__Identifier = '<FunctionName>'
                AND region = 'us-east-1'
    event_source_mappings:
      name: event_source_mappings
      id: awscc.lambda.event_source_mappings
      x-cfn-schema-name: EventSourceMapping
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::EventSourceMapping'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::EventSourceMapping'
                AND region = 'us-east-1'
    event_source_mapping:
      name: event_source_mapping
      id: awscc.lambda.event_source_mapping
      x-cfn-schema-name: EventSourceMapping
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.BatchSize') as batch_size,
              JSON_EXTRACT(Properties, '$.BisectBatchOnFunctionError') as bisect_batch_on_function_error,
              JSON_EXTRACT(Properties, '$.DestinationConfig') as destination_config,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.EventSourceArn') as event_source_arn,
              JSON_EXTRACT(Properties, '$.FilterCriteria') as filter_criteria,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.MaximumBatchingWindowInSeconds') as maximum_batching_window_in_seconds,
              JSON_EXTRACT(Properties, '$.MaximumRecordAgeInSeconds') as maximum_record_age_in_seconds,
              JSON_EXTRACT(Properties, '$.MaximumRetryAttempts') as maximum_retry_attempts,
              JSON_EXTRACT(Properties, '$.ParallelizationFactor') as parallelization_factor,
              JSON_EXTRACT(Properties, '$.StartingPosition') as starting_position,
              JSON_EXTRACT(Properties, '$.StartingPositionTimestamp') as starting_position_timestamp,
              JSON_EXTRACT(Properties, '$.Topics') as topics,
              JSON_EXTRACT(Properties, '$.Queues') as queues,
              JSON_EXTRACT(Properties, '$.SourceAccessConfigurations') as source_access_configurations,
              JSON_EXTRACT(Properties, '$.TumblingWindowInSeconds') as tumbling_window_in_seconds,
              JSON_EXTRACT(Properties, '$.FunctionResponseTypes') as function_response_types,
              JSON_EXTRACT(Properties, '$.SelfManagedEventSource') as self_managed_event_source,
              JSON_EXTRACT(Properties, '$.AmazonManagedKafkaEventSourceConfig') as amazon_managed_kafka_event_source_config,
              JSON_EXTRACT(Properties, '$.SelfManagedKafkaEventSourceConfig') as self_managed_kafka_event_source_config,
              JSON_EXTRACT(Properties, '$.ScalingConfig') as scaling_config,
              JSON_EXTRACT(Properties, '$.DocumentDBEventSourceConfig') as document_db_event_source_config
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::EventSourceMapping'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'BatchSize') as batch_size,
                json_extract_path_text(Properties, 'BisectBatchOnFunctionError') as bisect_batch_on_function_error,
                json_extract_path_text(Properties, 'DestinationConfig') as destination_config,
                json_extract_path_text(Properties, 'Enabled') as enabled,
                json_extract_path_text(Properties, 'EventSourceArn') as event_source_arn,
                json_extract_path_text(Properties, 'FilterCriteria') as filter_criteria,
                json_extract_path_text(Properties, 'FunctionName') as function_name,
                json_extract_path_text(Properties, 'MaximumBatchingWindowInSeconds') as maximum_batching_window_in_seconds,
                json_extract_path_text(Properties, 'MaximumRecordAgeInSeconds') as maximum_record_age_in_seconds,
                json_extract_path_text(Properties, 'MaximumRetryAttempts') as maximum_retry_attempts,
                json_extract_path_text(Properties, 'ParallelizationFactor') as parallelization_factor,
                json_extract_path_text(Properties, 'StartingPosition') as starting_position,
                json_extract_path_text(Properties, 'StartingPositionTimestamp') as starting_position_timestamp,
                json_extract_path_text(Properties, 'Topics') as topics,
                json_extract_path_text(Properties, 'Queues') as queues,
                json_extract_path_text(Properties, 'SourceAccessConfigurations') as source_access_configurations,
                json_extract_path_text(Properties, 'TumblingWindowInSeconds') as tumbling_window_in_seconds,
                json_extract_path_text(Properties, 'FunctionResponseTypes') as function_response_types,
                json_extract_path_text(Properties, 'SelfManagedEventSource') as self_managed_event_source,
                json_extract_path_text(Properties, 'AmazonManagedKafkaEventSourceConfig') as amazon_managed_kafka_event_source_config,
                json_extract_path_text(Properties, 'SelfManagedKafkaEventSourceConfig') as self_managed_kafka_event_source_config,
                json_extract_path_text(Properties, 'ScalingConfig') as scaling_config,
                json_extract_path_text(Properties, 'DocumentDBEventSourceConfig') as document_db_event_source_config
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::EventSourceMapping'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    functions:
      name: functions
      id: awscc.lambda.functions
      x-cfn-schema-name: Function
      x-type: list
      x-identifiers:
        - FunctionName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Function'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionName') as function_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Function'
                AND region = 'us-east-1'
    function:
      name: function
      id: awscc.lambda.function
      x-cfn-schema-name: Function
      x-type: get
      x-identifiers:
        - FunctionName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.TracingConfig') as tracing_config,
              JSON_EXTRACT(Properties, '$.VpcConfig') as vpc_config,
              JSON_EXTRACT(Properties, '$.RuntimeManagementConfig') as runtime_management_config,
              JSON_EXTRACT(Properties, '$.ReservedConcurrentExecutions') as reserved_concurrent_executions,
              JSON_EXTRACT(Properties, '$.SnapStart') as snap_start,
              JSON_EXTRACT(Properties, '$.FileSystemConfigs') as file_system_configs,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.Runtime') as runtime,
              JSON_EXTRACT(Properties, '$.KmsKeyArn') as kms_key_arn,
              JSON_EXTRACT(Properties, '$.PackageType') as package_type,
              JSON_EXTRACT(Properties, '$.CodeSigningConfigArn') as code_signing_config_arn,
              JSON_EXTRACT(Properties, '$.Layers') as layers,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ImageConfig') as image_config,
              JSON_EXTRACT(Properties, '$.MemorySize') as memory_size,
              JSON_EXTRACT(Properties, '$.DeadLetterConfig') as dead_letter_config,
              JSON_EXTRACT(Properties, '$.Timeout') as timeout,
              JSON_EXTRACT(Properties, '$.Handler') as handler,
              JSON_EXTRACT(Properties, '$.SnapStartResponse') as snap_start_response,
              JSON_EXTRACT(Properties, '$.Code') as code,
              JSON_EXTRACT(Properties, '$.Role') as role,
              JSON_EXTRACT(Properties, '$.LoggingConfig') as logging_config,
              JSON_EXTRACT(Properties, '$.Environment') as environment,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.EphemeralStorage') as ephemeral_storage,
              JSON_EXTRACT(Properties, '$.Architectures') as architectures
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Function'
              AND data__Identifier = '<FunctionName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'TracingConfig') as tracing_config,
                json_extract_path_text(Properties, 'VpcConfig') as vpc_config,
                json_extract_path_text(Properties, 'RuntimeManagementConfig') as runtime_management_config,
                json_extract_path_text(Properties, 'ReservedConcurrentExecutions') as reserved_concurrent_executions,
                json_extract_path_text(Properties, 'SnapStart') as snap_start,
                json_extract_path_text(Properties, 'FileSystemConfigs') as file_system_configs,
                json_extract_path_text(Properties, 'FunctionName') as function_name,
                json_extract_path_text(Properties, 'Runtime') as runtime,
                json_extract_path_text(Properties, 'KmsKeyArn') as kms_key_arn,
                json_extract_path_text(Properties, 'PackageType') as package_type,
                json_extract_path_text(Properties, 'CodeSigningConfigArn') as code_signing_config_arn,
                json_extract_path_text(Properties, 'Layers') as layers,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'ImageConfig') as image_config,
                json_extract_path_text(Properties, 'MemorySize') as memory_size,
                json_extract_path_text(Properties, 'DeadLetterConfig') as dead_letter_config,
                json_extract_path_text(Properties, 'Timeout') as timeout,
                json_extract_path_text(Properties, 'Handler') as handler,
                json_extract_path_text(Properties, 'SnapStartResponse') as snap_start_response,
                json_extract_path_text(Properties, 'Code') as code,
                json_extract_path_text(Properties, 'Role') as role,
                json_extract_path_text(Properties, 'LoggingConfig') as logging_config,
                json_extract_path_text(Properties, 'Environment') as environment,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'EphemeralStorage') as ephemeral_storage,
                json_extract_path_text(Properties, 'Architectures') as architectures
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Function'
                AND data__Identifier = '<FunctionName>'
                AND region = 'us-east-1'
    layer_versions:
      name: layer_versions
      id: awscc.lambda.layer_versions
      x-cfn-schema-name: LayerVersion
      x-type: list
      x-identifiers:
        - LayerVersionArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LayerVersionArn') as layer_version_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::LayerVersion'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LayerVersionArn') as layer_version_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::LayerVersion'
                AND region = 'us-east-1'
    layer_version:
      name: layer_version
      id: awscc.lambda.layer_version
      x-cfn-schema-name: LayerVersion
      x-type: get
      x-identifiers:
        - LayerVersionArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CompatibleRuntimes') as compatible_runtimes,
              JSON_EXTRACT(Properties, '$.LicenseInfo') as license_info,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.LayerName') as layer_name,
              JSON_EXTRACT(Properties, '$.Content') as content,
              JSON_EXTRACT(Properties, '$.LayerVersionArn') as layer_version_arn,
              JSON_EXTRACT(Properties, '$.CompatibleArchitectures') as compatible_architectures
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::LayerVersion'
              AND data__Identifier = '<LayerVersionArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'CompatibleRuntimes') as compatible_runtimes,
                json_extract_path_text(Properties, 'LicenseInfo') as license_info,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'LayerName') as layer_name,
                json_extract_path_text(Properties, 'Content') as content,
                json_extract_path_text(Properties, 'LayerVersionArn') as layer_version_arn,
                json_extract_path_text(Properties, 'CompatibleArchitectures') as compatible_architectures
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::LayerVersion'
                AND data__Identifier = '<LayerVersionArn>'
                AND region = 'us-east-1'
    layer_version_permissions:
      name: layer_version_permissions
      id: awscc.lambda.layer_version_permissions
      x-cfn-schema-name: LayerVersionPermission
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::LayerVersionPermission'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::LayerVersionPermission'
                AND region = 'us-east-1'
    layer_version_permission:
      name: layer_version_permission
      id: awscc.lambda.layer_version_permission
      x-cfn-schema-name: LayerVersionPermission
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Action') as action,
              JSON_EXTRACT(Properties, '$.LayerVersionArn') as layer_version_arn,
              JSON_EXTRACT(Properties, '$.OrganizationId') as organization_id,
              JSON_EXTRACT(Properties, '$.Principal') as principal
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::LayerVersionPermission'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Action') as action,
                json_extract_path_text(Properties, 'LayerVersionArn') as layer_version_arn,
                json_extract_path_text(Properties, 'OrganizationId') as organization_id,
                json_extract_path_text(Properties, 'Principal') as principal
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::LayerVersionPermission'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    permissions:
      name: permissions
      id: awscc.lambda.permissions
      x-cfn-schema-name: Permission
      x-type: list
      x-identifiers:
        - FunctionName
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Permission'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionName') as function_name,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Permission'
                AND region = 'us-east-1'
    permission:
      name: permission
      id: awscc.lambda.permission
      x-cfn-schema-name: Permission
      x-type: get
      x-identifiers:
        - FunctionName
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Action') as action,
              JSON_EXTRACT(Properties, '$.EventSourceToken') as event_source_token,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.FunctionUrlAuthType') as function_url_auth_type,
              JSON_EXTRACT(Properties, '$.Principal') as principal,
              JSON_EXTRACT(Properties, '$.PrincipalOrgID') as principal_org_id,
              JSON_EXTRACT(Properties, '$.SourceAccount') as source_account,
              JSON_EXTRACT(Properties, '$.SourceArn') as source_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Permission'
              AND data__Identifier = '<FunctionName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Action') as action,
                json_extract_path_text(Properties, 'EventSourceToken') as event_source_token,
                json_extract_path_text(Properties, 'FunctionName') as function_name,
                json_extract_path_text(Properties, 'FunctionUrlAuthType') as function_url_auth_type,
                json_extract_path_text(Properties, 'Principal') as principal,
                json_extract_path_text(Properties, 'PrincipalOrgID') as principal_org_id,
                json_extract_path_text(Properties, 'SourceAccount') as source_account,
                json_extract_path_text(Properties, 'SourceArn') as source_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Permission'
                AND data__Identifier = '<FunctionName>'
                AND region = 'us-east-1'
    urls:
      name: urls
      id: awscc.lambda.urls
      x-cfn-schema-name: Url
      x-type: list
      x-identifiers:
        - FunctionArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Url'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionArn') as function_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Url'
                AND region = 'us-east-1'
    url:
      name: url
      id: awscc.lambda.url
      x-cfn-schema-name: Url
      x-type: get
      x-identifiers:
        - FunctionArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TargetFunctionArn') as target_function_arn,
              JSON_EXTRACT(Properties, '$.Qualifier') as qualifier,
              JSON_EXTRACT(Properties, '$.AuthType') as auth_type,
              JSON_EXTRACT(Properties, '$.InvokeMode') as invoke_mode,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn,
              JSON_EXTRACT(Properties, '$.FunctionUrl') as function_url,
              JSON_EXTRACT(Properties, '$.Cors') as cors
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Url'
              AND data__Identifier = '<FunctionArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'TargetFunctionArn') as target_function_arn,
                json_extract_path_text(Properties, 'Qualifier') as qualifier,
                json_extract_path_text(Properties, 'AuthType') as auth_type,
                json_extract_path_text(Properties, 'InvokeMode') as invoke_mode,
                json_extract_path_text(Properties, 'FunctionArn') as function_arn,
                json_extract_path_text(Properties, 'FunctionUrl') as function_url,
                json_extract_path_text(Properties, 'Cors') as cors
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Url'
                AND data__Identifier = '<FunctionArn>'
                AND region = 'us-east-1'
    versions:
      name: versions
      id: awscc.lambda.versions
      x-cfn-schema-name: Version
      x-type: list
      x-identifiers:
        - FunctionArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Version'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionArn') as function_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Lambda::Version'
                AND region = 'us-east-1'
    version:
      name: version
      id: awscc.lambda.version
      x-cfn-schema-name: Version
      x-type: get
      x-identifiers:
        - FunctionArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn,
              JSON_EXTRACT(Properties, '$.Version') as version,
              JSON_EXTRACT(Properties, '$.CodeSha256') as code_sha256,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FunctionName') as function_name,
              JSON_EXTRACT(Properties, '$.ProvisionedConcurrencyConfig') as provisioned_concurrency_config,
              JSON_EXTRACT(Properties, '$.RuntimePolicy') as runtime_policy
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Version'
              AND data__Identifier = '<FunctionArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FunctionArn') as function_arn,
                json_extract_path_text(Properties, 'Version') as version,
                json_extract_path_text(Properties, 'CodeSha256') as code_sha256,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'FunctionName') as function_name,
                json_extract_path_text(Properties, 'ProvisionedConcurrencyConfig') as provisioned_concurrency_config,
                json_extract_path_text(Properties, 'RuntimePolicy') as runtime_policy
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Lambda::Version'
                AND data__Identifier = '<FunctionArn>'
                AND region = 'us-east-1'
