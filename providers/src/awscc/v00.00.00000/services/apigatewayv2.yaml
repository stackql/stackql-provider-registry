openapi: 3.0.0
info:
  title: ApiGatewayV2
  version: 1.0.0
paths: {}
components:
  schemas:
    BodyS3Location:
      type: object
      additionalProperties: false
      properties:
        Etag:
          type: string
          description: The Etag of the S3 object.
        Bucket:
          type: string
          description: The S3 bucket that contains the OpenAPI definition to import. Required if you specify a ``BodyS3Location`` for an API.
        Version:
          type: string
          description: The version of the S3 object.
        Key:
          type: string
          description: The key of the S3 object. Required if you specify a ``BodyS3Location`` for an API.
      description: The ``BodyS3Location`` property specifies an S3 location from which to import an OpenAPI definition. Supported only for HTTP APIs.
    Cors:
      type: object
      additionalProperties: false
      properties:
        AllowOrigins:
          type: array
          uniqueItems: false
          items:
            type: string
          description: Represents a collection of allowed origins. Supported only for HTTP APIs.
        AllowCredentials:
          type: boolean
          description: Specifies whether credentials are included in the CORS request. Supported only for HTTP APIs.
        ExposeHeaders:
          type: array
          uniqueItems: false
          items:
            type: string
          description: Represents a collection of exposed headers. Supported only for HTTP APIs.
        AllowHeaders:
          type: array
          uniqueItems: false
          items:
            type: string
          description: Represents a collection of allowed headers. Supported only for HTTP APIs.
        MaxAge:
          type: integer
          description: The number of seconds that the browser should cache preflight request results. Supported only for HTTP APIs.
        AllowMethods:
          type: array
          uniqueItems: false
          items:
            type: string
          description: Represents a collection of allowed HTTP methods. Supported only for HTTP APIs.
      description: The ``Cors`` property specifies a CORS configuration for an API. Supported only for HTTP APIs. See [Configuring CORS](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html) for more information.
    Api:
      type: object
      properties:
        RouteSelectionExpression:
          type: string
          description: The route selection expression for the API. For HTTP APIs, the ``routeSelectionExpression`` must be ``${request.method} ${request.path}``. If not provided, this will be the default for HTTP APIs. This property is required for WebSocket APIs.
        BodyS3Location:
          $ref: '#/components/schemas/BodyS3Location'
          description: The S3 location of an OpenAPI definition. Supported only for HTTP APIs. To import an HTTP API, you must specify a ``Body`` or ``BodyS3Location``. If you specify a ``Body`` or ``BodyS3Location``, don't specify CloudFormation resources such as ``AWS::ApiGatewayV2::Authorizer`` or ``AWS::ApiGatewayV2::Route``. API Gateway doesn't support the combination of OpenAPI and CloudFormation resources.
        Description:
          type: string
          description: The description of the API.
        ApiEndpoint:
          type: string
          description: ''
        BasePath:
          type: string
          description: Specifies how to interpret the base path of the API during import. Valid values are ``ignore``, ``prepend``, and ``split``. The default value is ``ignore``. To learn more, see [Set the OpenAPI basePath Property](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html). Supported only for HTTP APIs.
        FailOnWarnings:
          type: boolean
          description: Specifies whether to rollback the API creation when a warning is encountered. By default, API creation continues if a warning is encountered.
        DisableExecuteApiEndpoint:
          type: boolean
          description: Specifies whether clients can invoke your API by using the default ``execute-api`` endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.
        DisableSchemaValidation:
          type: boolean
          description: Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
        Name:
          type: string
          description: The name of the API. Required unless you specify an OpenAPI definition for ``Body`` or ``S3BodyLocation``.
        Target:
          type: string
          description: This property is part of quick create. Quick create produces an API with an integration, a default catch-all route, and a default stage which is configured to automatically deploy changes. For HTTP integrations, specify a fully qualified URL. For Lambda integrations, specify a function ARN. The type of the integration will be HTTP_PROXY or AWS_PROXY, respectively. Supported only for HTTP APIs.
        CredentialsArn:
          type: string
          description: >-
            This property is part of quick create. It specifies the credentials required for the integration, if any. For a Lambda integration, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify ``arn:aws:iam::*:user/*``. To use resource-based permissions on supported AWS services, specify ``null``. Currently, this property is not used for HTTP
            integrations. Supported only for HTTP APIs.
        CorsConfiguration:
          $ref: '#/components/schemas/Cors'
          description: A CORS configuration. Supported only for HTTP APIs. See [Configuring CORS](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-cors.html) for more information.
        Version:
          type: string
          description: A version identifier for the API.
        ProtocolType:
          type: string
          description: The API protocol. Valid values are ``WEBSOCKET`` or ``HTTP``. Required unless you specify an OpenAPI definition for ``Body`` or ``S3BodyLocation``.
        RouteKey:
          type: string
          description: This property is part of quick create. If you don't specify a ``routeKey``, a default route of ``$default`` is created. The ``$default`` route acts as a catch-all for any request made to your API, for a particular stage. The ``$default`` route key can't be modified. You can add routes after creating the API, and you can update the route keys of additional routes. Supported only for HTTP APIs.
        ApiId:
          type: string
          description: ''
        Body:
          type: object
          description: The OpenAPI definition. Supported only for HTTP APIs. To import an HTTP API, you must specify a ``Body`` or ``BodyS3Location``. If you specify a ``Body`` or ``BodyS3Location``, don't specify CloudFormation resources such as ``AWS::ApiGatewayV2::Authorizer`` or ``AWS::ApiGatewayV2::Route``. API Gateway doesn't support the combination of OpenAPI and CloudFormation resources.
        Tags:
          type: object
          description: The collection of tags. Each tag element is associated with a given resource.
          additionalProperties: false
          x-patternProperties:
            .*:
              type: string
        ApiKeySelectionExpression:
          type: string
          description: An API key selection expression. Supported only for WebSocket APIs. See [API Key Selection Expressions](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions).
      x-stackql-resource-name: api
      x-stackql-primaryIdentifier:
        - ApiId
      x-create-only-properties:
        - ProtocolType
      x-read-only-properties:
        - ApiId
        - ApiEndpoint
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:PUT
          - s3:getObject
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
          - apigateway:POST
          - s3:getObject
        read:
          - apigateway:GET
          - s3:getObject
        delete:
          - apigateway:GET
          - apigateway:DELETE
          - s3:getObject
        list:
          - apigateway:GET
          - s3:getObject
    ApiMapping:
      type: object
      properties:
        ApiMappingId:
          description: ''
          type: string
        DomainName:
          description: The domain name.
          type: string
        Stage:
          description: The API stage.
          type: string
        ApiMappingKey:
          description: The API mapping key.
          type: string
        ApiId:
          description: The identifier of the API.
          type: string
      required:
        - DomainName
        - Stage
        - ApiId
      x-stackql-resource-name: api_mapping
      x-stackql-primaryIdentifier:
        - ApiMappingId
        - DomainName
      x-create-only-properties:
        - DomainName
      x-read-only-properties:
        - ApiMappingId
      x-required-permissions:
        create:
          - apigateway:POST
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        delete:
          - apigateway:DELETE
        list:
          - apigateway:GET
    JWTConfiguration:
      type: object
      additionalProperties: false
      properties:
        Issuer:
          type: string
          description: 'The base domain of the identity provider that issues JSON Web Tokens. For example, an Amazon Cognito user pool has the following format: ``https://cognito-idp.{region}.amazonaws.com/{userPoolId}``. Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.'
        Audience:
          type: array
          uniqueItems: false
          items:
            type: string
          description: A list of the intended recipients of the JWT. A valid JWT must provide an ``aud`` that matches at least one entry in this list. See [RFC 7519](https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc7519#section-4.1.3). Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
      description: The ``JWTConfiguration`` property specifies the configuration of a JWT authorizer. Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
    Authorizer:
      type: object
      properties:
        IdentityValidationExpression:
          type: string
          description: This parameter is not used.
        AuthorizerUri:
          type: string
          description: >-
            The authorizer's Uniform Resource Identifier (URI). For ``REQUEST`` authorizers, this must be a well-formed Lambda function URI, for example, ``arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:{account_id}:function:{lambda_function_name}/invocations``. In general, the URI has this form: ``arn:aws:apigateway:{region}:lambda:path/{service_api}``, where *{region}* is the same as the region hosting the Lambda function, path indicates that the
            remaining substring in the URI should be treated as the path to the resource, including the initial ``/``. For Lambda functions, this is usually of the form ``/2015-03-31/functions/[FunctionARN]/invocations``.
        AuthorizerCredentialsArn:
          type: string
          description: Specifies the required credentials as an IAM role for API Gateway to invoke the authorizer. To specify an IAM role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To use resource-based permissions on the Lambda function, specify null. Supported only for ``REQUEST`` authorizers.
        AuthorizerType:
          type: string
          description: The authorizer type. Specify ``REQUEST`` for a Lambda function using incoming request parameters. Specify ``JWT`` to use JSON Web Tokens (supported only for HTTP APIs).
        JwtConfiguration:
          $ref: '#/components/schemas/JWTConfiguration'
          description: The ``JWTConfiguration`` property specifies the configuration of a JWT authorizer. Required for the ``JWT`` authorizer type. Supported only for HTTP APIs.
        AuthorizerResultTtlInSeconds:
          type: integer
          description: The time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled. If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Supported only for HTTP API Lambda authorizers.
        IdentitySource:
          type: array
          uniqueItems: false
          items:
            type: string
          description: |-
            The identity source for which authorization is requested.
             For a ``REQUEST`` authorizer, this is optional. The value is a set of one or more mapping expressions of the specified request parameters. The identity source can be headers, query string parameters, stage variables, and context parameters. For example, if an Auth header and a Name query string parameter are defined as identity sources, this value is route.request.header.Auth, route.request.querystring.Name for WebSocket APIs. For HTTP APIs, use selection expressions prefixed with ``$``, for example, ``$request.header.Auth``, ``$request.querystring.Name``. These parameters are used to perform runtime validation for Lambda-based authorizers by verifying all of the identity-related request parameters are present in the request, not null, and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function. Otherwise, it returns a 401 Unauthorized response without calling the Lambda function. For HTTP APIs, identity sources are also used as the cache key when caching is enabled. To learn more, see [Working with Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
             For ``JWT``, a single entry that specifies where to extract the JSON Web Token (JWT) from inbound requests. Currently only header-based and query parameter-based selections are supported, for example ``$request.header.Authorization``.
        AuthorizerPayloadFormatVersion:
          type: string
          description: Specifies the format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers. Supported values are ``1.0`` and ``2.0``. To learn more, see [Working with Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
        ApiId:
          type: string
          description: The API identifier.
        EnableSimpleResponses:
          type: boolean
          description: Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see [Working with Lambda authorizers for HTTP APIs](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html).
        AuthorizerId:
          type: string
          description: ''
        Name:
          type: string
          description: The name of the authorizer.
      required:
        - AuthorizerType
        - ApiId
        - Name
      x-stackql-resource-name: authorizer
      x-stackql-primaryIdentifier:
        - AuthorizerId
        - ApiId
      x-create-only-properties:
        - ApiId
      x-read-only-properties:
        - AuthorizerId
      x-required-permissions:
        create:
          - apigateway:POST
          - iam:PassRole
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
          - iam:PassRole
        read:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    Deployment:
      type: object
      properties:
        DeploymentId:
          type: string
          description: ''
        Description:
          type: string
          description: The description for the deployment resource.
        StageName:
          type: string
          description: The name of an existing stage to associate with the deployment.
        ApiId:
          type: string
          description: The API identifier.
      required:
        - ApiId
      x-stackql-resource-name: deployment
      x-stackql-primaryIdentifier:
        - ApiId
        - DeploymentId
      x-create-only-properties:
        - ApiId
      x-read-only-properties:
        - DeploymentId
      x-required-permissions:
        create:
          - apigateway:POST
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    MutualTlsAuthentication:
      type: object
      additionalProperties: false
      properties:
        TruststoreVersion:
          type: string
          description: The version of the S3 object that contains your truststore. To specify a version, you must have versioning enabled for the S3 bucket.
        TruststoreUri:
          type: string
          description: An Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, ``s3://bucket-name/key-name``. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version. To update the truststore, you must have permissions to access the S3 object.
      description: If specified, API Gateway performs two-way authentication between the client and the server. Clients must present a trusted certificate to access your API.
    DomainNameConfiguration:
      type: object
      additionalProperties: false
      properties:
        OwnershipVerificationCertificateArn:
          type: string
          description: The Amazon resource name (ARN) for the public certificate issued by ACMlong. This ARN is used to validate custom domain ownership. It's required only if you configure mutual TLS and use either an ACM-imported or a private CA certificate ARN as the regionalCertificateArn.
        EndpointType:
          type: string
          description: The endpoint type.
        CertificateName:
          type: string
          description: The user-friendly name of the certificate that will be used by the edge-optimized endpoint for this domain name.
        SecurityPolicy:
          type: string
          description: The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are ``TLS_1_0`` and ``TLS_1_2``.
        CertificateArn:
          type: string
          description: An AWS-managed certificate that will be used by the edge-optimized endpoint for this domain name. AWS Certificate Manager is the only supported source.
      description: |-
        The ``DomainNameConfiguration`` property type specifies the configuration for an API's domain name.
         ``DomainNameConfiguration`` is a property of the [AWS::ApiGatewayV2::DomainName](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigatewayv2-domainname.html) resource.
    DomainName:
      type: object
      properties:
        MutualTlsAuthentication:
          description: The mutual TLS authentication configuration for a custom domain name.
          $ref: '#/components/schemas/MutualTlsAuthentication'
        RegionalHostedZoneId:
          description: ''
          type: string
        RegionalDomainName:
          description: ''
          type: string
        DomainName:
          description: The custom domain name for your API in Amazon API Gateway. Uppercase letters are not supported.
          type: string
        DomainNameConfigurations:
          description: The domain name configurations.
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/DomainNameConfiguration'
        Tags:
          type: object
          description: The collection of tags associated with a domain name.
          additionalProperties: false
          x-patternProperties:
            .*:
              type: string
      required:
        - DomainName
      x-stackql-resource-name: domain_name
      x-stackql-primaryIdentifier:
        - DomainName
      x-create-only-properties:
        - DomainName
      x-read-only-properties:
        - RegionalDomainName
        - RegionalHostedZoneId
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
          - apigateway:PUT
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    IntegrationResponse:
      type: object
      properties:
        IntegrationResponseId:
          description: ''
          type: string
        ResponseTemplates:
          description: The collection of response templates for the integration response as a string-to-string map of key-value pairs. Response templates are represented as a key/value map, with a content-type as the key and a template as the value.
          type: object
        TemplateSelectionExpression:
          description: The template selection expression for the integration response. Supported only for WebSocket APIs.
          type: string
        ResponseParameters:
          description: >-
            A key-value map specifying response parameters that are passed to the method response from the backend. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of ``method.response.header.{name}``, where name is a valid and unique header name. The mapped non-static value must
            match the pattern of ``integration.response.header.{name}`` or ``integration.response.body.{JSON-expression}``, where ``{name}`` is a valid and unique response header name and ``{JSON-expression}`` is a valid JSON expression without the ``$`` prefix.
          type: object
        ContentHandlingStrategy:
          description: |-
            Supported only for WebSocket APIs. Specifies how to handle response payload content type conversions. Supported values are ``CONVERT_TO_BINARY`` and ``CONVERT_TO_TEXT``, with the following behaviors:
              ``CONVERT_TO_BINARY``: Converts a response payload from a Base64-encoded string to the corresponding binary blob.
              ``CONVERT_TO_TEXT``: Converts a response payload from a binary blob to a Base64-encoded string.
             If this property is not defined, the response payload will be passed through from the integration response to the route response or method response without modification.
          type: string
        IntegrationId:
          description: The integration ID.
          type: string
        IntegrationResponseKey:
          description: The integration response key.
          type: string
        ApiId:
          description: The API identifier.
          type: string
      required:
        - ApiId
        - IntegrationId
        - IntegrationResponseKey
      x-stackql-resource-name: integration_response
      x-stackql-primaryIdentifier:
        - ApiId
        - IntegrationId
        - IntegrationResponseId
      x-create-only-properties:
        - ApiId
        - IntegrationId
      x-read-only-properties:
        - IntegrationResponseId
      x-required-permissions:
        create:
          - apigateway:POST
        read:
          - apigateway:GET
        update:
          - apigateway:PATCH
          - apigateway:PUT
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    Model:
      type: object
      properties:
        ModelId:
          type: string
          description: ''
        Description:
          type: string
          description: The description of the model.
        ContentType:
          type: string
          description: The content-type for the model, for example, "application/json".
        Schema:
          type: object
          description: The schema for the model. For application/json models, this should be JSON schema draft 4 model.
        ApiId:
          type: string
          description: The API identifier.
        Name:
          type: string
          description: The name of the model.
      required:
        - ApiId
        - Schema
        - Name
      x-stackql-resource-name: model
      x-stackql-primaryIdentifier:
        - ApiId
        - ModelId
      x-create-only-properties:
        - ApiId
      x-read-only-properties:
        - ModelId
      x-required-permissions:
        create:
          - apigateway:POST
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    ParameterConstraints:
      type: object
      properties:
        Required:
          type: boolean
          description: Specifies whether the parameter is required.
      required:
        - Required
      additionalProperties: false
      description: Specifies whether the parameter is required.
    Route:
      type: object
      properties:
        RouteId:
          type: string
          description: ''
        RouteResponseSelectionExpression:
          type: string
          description: The route response selection expression for the route. Supported only for WebSocket APIs.
        RequestModels:
          type: object
          description: The request models for the route. Supported only for WebSocket APIs.
        OperationName:
          type: string
          description: The operation name for the route.
        AuthorizationScopes:
          type: array
          uniqueItems: false
          items:
            type: string
          description: The authorization scopes supported by this route.
        ApiKeyRequired:
          type: boolean
          description: Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
        RouteKey:
          type: string
          description: The route key for the route. For HTTP APIs, the route key can be either ``$default``, or a combination of an HTTP method and resource path, for example, ``GET /pets``.
        AuthorizationType:
          type: string
          description: The authorization type for the route. For WebSocket APIs, valid values are ``NONE`` for open access, ``AWS_IAM`` for using AWS IAM permissions, and ``CUSTOM`` for using a Lambda authorizer. For HTTP APIs, valid values are ``NONE`` for open access, ``JWT`` for using JSON Web Tokens, ``AWS_IAM`` for using AWS IAM permissions, and ``CUSTOM`` for using a Lambda authorizer.
        ModelSelectionExpression:
          type: string
          description: The model selection expression for the route. Supported only for WebSocket APIs.
        ApiId:
          type: string
          description: The API identifier.
        RequestParameters:
          type: object
          items:
            $ref: '#/components/schemas/ParameterConstraints'
          description: The request parameters for the route. Supported only for WebSocket APIs.
        Target:
          type: string
          description: The target for the route.
        AuthorizerId:
          type: string
          description: The identifier of the ``Authorizer`` resource to be associated with this route. The authorizer identifier is generated by API Gateway when you created the authorizer.
      required:
        - RouteKey
        - ApiId
      x-stackql-resource-name: route
      x-stackql-primaryIdentifier:
        - ApiId
        - RouteId
      x-create-only-properties:
        - ApiId
      x-read-only-properties:
        - RouteId
      x-required-permissions:
        create:
          - apigateway:POST
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    RouteParameters:
      x-patternProperties:
        ^.+$:
          $ref: '#/components/schemas/ParameterConstraints'
      additionalProperties: false
    RouteResponse:
      type: object
      properties:
        RouteResponseKey:
          type: string
          description: The route response key.
        ResponseParameters:
          $ref: '#/components/schemas/RouteParameters'
          description: The route response parameters.
        RouteId:
          type: string
          description: The route ID.
        ModelSelectionExpression:
          type: string
          description: The model selection expression for the route response. Supported only for WebSocket APIs.
        ApiId:
          type: string
          description: The API identifier.
        ResponseModels:
          type: object
          description: The response models for the route response.
        RouteResponseId:
          type: string
          description: ''
      required:
        - RouteResponseKey
        - RouteId
        - ApiId
      x-stackql-resource-name: route_response
      x-stackql-primaryIdentifier:
        - ApiId
        - RouteId
        - RouteResponseId
      x-create-only-properties:
        - ApiId
        - RouteId
      x-read-only-properties:
        - RouteResponseId
      x-required-permissions:
        create:
          - apigateway:POST
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:PUT
        read:
          - apigateway:GET
        delete:
          - apigateway:GET
          - apigateway:DELETE
        list:
          - apigateway:GET
    VpcLink:
      type: object
      properties:
        VpcLinkId:
          type: string
          description: ''
        SubnetIds:
          type: array
          uniqueItems: false
          items:
            type: string
          description: A list of subnet IDs to include in the VPC link.
        SecurityGroupIds:
          type: array
          uniqueItems: false
          items:
            type: string
          description: A list of security group IDs for the VPC link.
        Tags:
          type: object
          description: The collection of tags. Each tag element is associated with a given resource.
          additionalProperties: false
          x-patternProperties:
            .*:
              type: string
        Name:
          type: string
          description: The name of the VPC link.
      required:
        - SubnetIds
        - Name
      x-stackql-resource-name: vpc_link
      x-stackql-primaryIdentifier:
        - VpcLinkId
      x-create-only-properties:
        - SecurityGroupIds
        - SubnetIds
      x-read-only-properties:
        - VpcLinkId
      x-required-permissions:
        create:
          - apigateway:POST
          - apigateway:GET
          - apigateway:TagResource
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        update:
          - apigateway:PATCH
          - apigateway:GET
          - apigateway:TagResource
          - apigateway:unTagResource
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        read:
          - apigateway:GET
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        delete:
          - apigateway:GET
          - apigateway:DELETE
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
        list:
          - apigateway:GET
          - iam:CreateServiceLinkedRole
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
  x-stackQL-resources:
    apis:
      name: apis
      id: awscc.apigatewayv2.apis
      x-cfn-schema-name: Api
      x-type: list
      x-identifiers:
        - ApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Api'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Api'
                AND region = 'us-east-1'
    api:
      name: api
      id: awscc.apigatewayv2.api
      x-cfn-schema-name: Api
      x-type: get
      x-identifiers:
        - ApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RouteSelectionExpression') as route_selection_expression,
              JSON_EXTRACT(Properties, '$.BodyS3Location') as body_s3_location,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ApiEndpoint') as api_endpoint,
              JSON_EXTRACT(Properties, '$.BasePath') as base_path,
              JSON_EXTRACT(Properties, '$.FailOnWarnings') as fail_on_warnings,
              JSON_EXTRACT(Properties, '$.DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
              JSON_EXTRACT(Properties, '$.DisableSchemaValidation') as disable_schema_validation,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Target') as target,
              JSON_EXTRACT(Properties, '$.CredentialsArn') as credentials_arn,
              JSON_EXTRACT(Properties, '$.CorsConfiguration') as cors_configuration,
              JSON_EXTRACT(Properties, '$.Version') as version,
              JSON_EXTRACT(Properties, '$.ProtocolType') as protocol_type,
              JSON_EXTRACT(Properties, '$.RouteKey') as route_key,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Body') as body,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ApiKeySelectionExpression') as api_key_selection_expression
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Api'
              AND data__Identifier = '<ApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'RouteSelectionExpression') as route_selection_expression,
                json_extract_path_text(Properties, 'BodyS3Location') as body_s3_location,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'ApiEndpoint') as api_endpoint,
                json_extract_path_text(Properties, 'BasePath') as base_path,
                json_extract_path_text(Properties, 'FailOnWarnings') as fail_on_warnings,
                json_extract_path_text(Properties, 'DisableExecuteApiEndpoint') as disable_execute_api_endpoint,
                json_extract_path_text(Properties, 'DisableSchemaValidation') as disable_schema_validation,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Target') as target,
                json_extract_path_text(Properties, 'CredentialsArn') as credentials_arn,
                json_extract_path_text(Properties, 'CorsConfiguration') as cors_configuration,
                json_extract_path_text(Properties, 'Version') as version,
                json_extract_path_text(Properties, 'ProtocolType') as protocol_type,
                json_extract_path_text(Properties, 'RouteKey') as route_key,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'Body') as body,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'ApiKeySelectionExpression') as api_key_selection_expression
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Api'
                AND data__Identifier = '<ApiId>'
                AND region = 'us-east-1'
    api_mappings:
      name: api_mappings
      id: awscc.apigatewayv2.api_mappings
      x-cfn-schema-name: ApiMapping
      x-type: list
      x-identifiers:
        - ApiMappingId
        - DomainName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiMappingId') as api_mapping_id,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiMappingId') as api_mapping_id,
                json_extract_path_text(Properties, 'DomainName') as domain_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
                AND region = 'us-east-1'
    api_mapping:
      name: api_mapping
      id: awscc.apigatewayv2.api_mapping
      x-cfn-schema-name: ApiMapping
      x-type: get
      x-identifiers:
        - ApiMappingId
        - DomainName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ApiMappingId') as api_mapping_id,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.Stage') as stage,
              JSON_EXTRACT(Properties, '$.ApiMappingKey') as api_mapping_key,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
              AND data__Identifier = '<ApiMappingId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ApiMappingId') as api_mapping_id,
                json_extract_path_text(Properties, 'DomainName') as domain_name,
                json_extract_path_text(Properties, 'Stage') as stage,
                json_extract_path_text(Properties, 'ApiMappingKey') as api_mapping_key,
                json_extract_path_text(Properties, 'ApiId') as api_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::ApiMapping'
                AND data__Identifier = '<ApiMappingId>'
                AND region = 'us-east-1'
    authorizers:
      name: authorizers
      id: awscc.apigatewayv2.authorizers
      x-cfn-schema-name: Authorizer
      x-type: list
      x-identifiers:
        - AuthorizerId
        - ApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AuthorizerId') as authorizer_id,
                json_extract_path_text(Properties, 'ApiId') as api_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
                AND region = 'us-east-1'
    authorizer:
      name: authorizer
      id: awscc.apigatewayv2.authorizer
      x-cfn-schema-name: Authorizer
      x-type: get
      x-identifiers:
        - AuthorizerId
        - ApiId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IdentityValidationExpression') as identity_validation_expression,
              JSON_EXTRACT(Properties, '$.AuthorizerUri') as authorizer_uri,
              JSON_EXTRACT(Properties, '$.AuthorizerCredentialsArn') as authorizer_credentials_arn,
              JSON_EXTRACT(Properties, '$.AuthorizerType') as authorizer_type,
              JSON_EXTRACT(Properties, '$.JwtConfiguration') as jwt_configuration,
              JSON_EXTRACT(Properties, '$.AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
              JSON_EXTRACT(Properties, '$.IdentitySource') as identity_source,
              JSON_EXTRACT(Properties, '$.AuthorizerPayloadFormatVersion') as authorizer_payload_format_version,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.EnableSimpleResponses') as enable_simple_responses,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
              AND data__Identifier = '<AuthorizerId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'IdentityValidationExpression') as identity_validation_expression,
                json_extract_path_text(Properties, 'AuthorizerUri') as authorizer_uri,
                json_extract_path_text(Properties, 'AuthorizerCredentialsArn') as authorizer_credentials_arn,
                json_extract_path_text(Properties, 'AuthorizerType') as authorizer_type,
                json_extract_path_text(Properties, 'JwtConfiguration') as jwt_configuration,
                json_extract_path_text(Properties, 'AuthorizerResultTtlInSeconds') as authorizer_result_ttl_in_seconds,
                json_extract_path_text(Properties, 'IdentitySource') as identity_source,
                json_extract_path_text(Properties, 'AuthorizerPayloadFormatVersion') as authorizer_payload_format_version,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'EnableSimpleResponses') as enable_simple_responses,
                json_extract_path_text(Properties, 'AuthorizerId') as authorizer_id,
                json_extract_path_text(Properties, 'Name') as name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Authorizer'
                AND data__Identifier = '<AuthorizerId>'
                AND region = 'us-east-1'
    deployments:
      name: deployments
      id: awscc.apigatewayv2.deployments
      x-cfn-schema-name: Deployment
      x-type: list
      x-identifiers:
        - ApiId
        - DeploymentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Deployment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'DeploymentId') as deployment_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Deployment'
                AND region = 'us-east-1'
    deployment:
      name: deployment
      id: awscc.apigatewayv2.deployment
      x-cfn-schema-name: Deployment
      x-type: get
      x-identifiers:
        - ApiId
        - DeploymentId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DeploymentId') as deployment_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.StageName') as stage_name,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Deployment'
              AND data__Identifier = '<ApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DeploymentId') as deployment_id,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'StageName') as stage_name,
                json_extract_path_text(Properties, 'ApiId') as api_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Deployment'
                AND data__Identifier = '<ApiId>'
                AND region = 'us-east-1'
    domain_names:
      name: domain_names
      id: awscc.apigatewayv2.domain_names
      x-cfn-schema-name: DomainName
      x-type: list
      x-identifiers:
        - DomainName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::DomainName'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainName') as domain_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::DomainName'
                AND region = 'us-east-1'
    domain_name:
      name: domain_name
      id: awscc.apigatewayv2.domain_name
      x-cfn-schema-name: DomainName
      x-type: get
      x-identifiers:
        - DomainName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.MutualTlsAuthentication') as mutual_tls_authentication,
              JSON_EXTRACT(Properties, '$.RegionalHostedZoneId') as regional_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.RegionalDomainName') as regional_domain_name,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.DomainNameConfigurations') as domain_name_configurations,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::DomainName'
              AND data__Identifier = '<DomainName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'MutualTlsAuthentication') as mutual_tls_authentication,
                json_extract_path_text(Properties, 'RegionalHostedZoneId') as regional_hosted_zone_id,
                json_extract_path_text(Properties, 'RegionalDomainName') as regional_domain_name,
                json_extract_path_text(Properties, 'DomainName') as domain_name,
                json_extract_path_text(Properties, 'DomainNameConfigurations') as domain_name_configurations,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::DomainName'
                AND data__Identifier = '<DomainName>'
                AND region = 'us-east-1'
    integration_responses:
      name: integration_responses
      id: awscc.apigatewayv2.integration_responses
      x-cfn-schema-name: IntegrationResponse
      x-type: list
      x-identifiers:
        - ApiId
        - IntegrationId
        - IntegrationResponseId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.IntegrationId') as integration_id,
              JSON_EXTRACT(Properties, '$.IntegrationResponseId') as integration_response_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'IntegrationId') as integration_id,
                json_extract_path_text(Properties, 'IntegrationResponseId') as integration_response_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
                AND region = 'us-east-1'
    integration_response:
      name: integration_response
      id: awscc.apigatewayv2.integration_response
      x-cfn-schema-name: IntegrationResponse
      x-type: get
      x-identifiers:
        - ApiId
        - IntegrationId
        - IntegrationResponseId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IntegrationResponseId') as integration_response_id,
              JSON_EXTRACT(Properties, '$.ResponseTemplates') as response_templates,
              JSON_EXTRACT(Properties, '$.TemplateSelectionExpression') as template_selection_expression,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.ContentHandlingStrategy') as content_handling_strategy,
              JSON_EXTRACT(Properties, '$.IntegrationId') as integration_id,
              JSON_EXTRACT(Properties, '$.IntegrationResponseKey') as integration_response_key,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
              AND data__Identifier = '<ApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'IntegrationResponseId') as integration_response_id,
                json_extract_path_text(Properties, 'ResponseTemplates') as response_templates,
                json_extract_path_text(Properties, 'TemplateSelectionExpression') as template_selection_expression,
                json_extract_path_text(Properties, 'ResponseParameters') as response_parameters,
                json_extract_path_text(Properties, 'ContentHandlingStrategy') as content_handling_strategy,
                json_extract_path_text(Properties, 'IntegrationId') as integration_id,
                json_extract_path_text(Properties, 'IntegrationResponseKey') as integration_response_key,
                json_extract_path_text(Properties, 'ApiId') as api_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::IntegrationResponse'
                AND data__Identifier = '<ApiId>'
                AND region = 'us-east-1'
    models:
      name: models
      id: awscc.apigatewayv2.models
      x-cfn-schema-name: Model
      x-type: list
      x-identifiers:
        - ApiId
        - ModelId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ModelId') as model_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Model'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'ModelId') as model_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Model'
                AND region = 'us-east-1'
    model:
      name: model
      id: awscc.apigatewayv2.model
      x-cfn-schema-name: Model
      x-type: get
      x-identifiers:
        - ApiId
        - ModelId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ModelId') as model_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ContentType') as content_type,
              JSON_EXTRACT(Properties, '$.Schema') as _schema,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Model'
              AND data__Identifier = '<ApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ModelId') as model_id,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'ContentType') as content_type,
                json_extract_path_text(Properties, 'Schema') as _schema,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'Name') as name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Model'
                AND data__Identifier = '<ApiId>'
                AND region = 'us-east-1'
    routes:
      name: routes
      id: awscc.apigatewayv2.routes
      x-cfn-schema-name: Route
      x-type: list
      x-identifiers:
        - ApiId
        - RouteId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.RouteId') as route_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Route'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'RouteId') as route_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::Route'
                AND region = 'us-east-1'
    route:
      name: route
      id: awscc.apigatewayv2.route
      x-cfn-schema-name: Route
      x-type: get
      x-identifiers:
        - ApiId
        - RouteId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RouteId') as route_id,
              JSON_EXTRACT(Properties, '$.RouteResponseSelectionExpression') as route_response_selection_expression,
              JSON_EXTRACT(Properties, '$.RequestModels') as request_models,
              JSON_EXTRACT(Properties, '$.OperationName') as operation_name,
              JSON_EXTRACT(Properties, '$.AuthorizationScopes') as authorization_scopes,
              JSON_EXTRACT(Properties, '$.ApiKeyRequired') as api_key_required,
              JSON_EXTRACT(Properties, '$.RouteKey') as route_key,
              JSON_EXTRACT(Properties, '$.AuthorizationType') as authorization_type,
              JSON_EXTRACT(Properties, '$.ModelSelectionExpression') as model_selection_expression,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.RequestParameters') as request_parameters,
              JSON_EXTRACT(Properties, '$.Target') as target,
              JSON_EXTRACT(Properties, '$.AuthorizerId') as authorizer_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Route'
              AND data__Identifier = '<ApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'RouteId') as route_id,
                json_extract_path_text(Properties, 'RouteResponseSelectionExpression') as route_response_selection_expression,
                json_extract_path_text(Properties, 'RequestModels') as request_models,
                json_extract_path_text(Properties, 'OperationName') as operation_name,
                json_extract_path_text(Properties, 'AuthorizationScopes') as authorization_scopes,
                json_extract_path_text(Properties, 'ApiKeyRequired') as api_key_required,
                json_extract_path_text(Properties, 'RouteKey') as route_key,
                json_extract_path_text(Properties, 'AuthorizationType') as authorization_type,
                json_extract_path_text(Properties, 'ModelSelectionExpression') as model_selection_expression,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'RequestParameters') as request_parameters,
                json_extract_path_text(Properties, 'Target') as target,
                json_extract_path_text(Properties, 'AuthorizerId') as authorizer_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::Route'
                AND data__Identifier = '<ApiId>'
                AND region = 'us-east-1'
    route_responses:
      name: route_responses
      id: awscc.apigatewayv2.route_responses
      x-cfn-schema-name: RouteResponse
      x-type: list
      x-identifiers:
        - ApiId
        - RouteId
        - RouteResponseId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.RouteId') as route_id,
              JSON_EXTRACT(Properties, '$.RouteResponseId') as route_response_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'RouteId') as route_id,
                json_extract_path_text(Properties, 'RouteResponseId') as route_response_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
                AND region = 'us-east-1'
    route_response:
      name: route_response
      id: awscc.apigatewayv2.route_response
      x-cfn-schema-name: RouteResponse
      x-type: get
      x-identifiers:
        - ApiId
        - RouteId
        - RouteResponseId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RouteResponseKey') as route_response_key,
              JSON_EXTRACT(Properties, '$.ResponseParameters') as response_parameters,
              JSON_EXTRACT(Properties, '$.RouteId') as route_id,
              JSON_EXTRACT(Properties, '$.ModelSelectionExpression') as model_selection_expression,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ResponseModels') as response_models,
              JSON_EXTRACT(Properties, '$.RouteResponseId') as route_response_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
              AND data__Identifier = '<ApiId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'RouteResponseKey') as route_response_key,
                json_extract_path_text(Properties, 'ResponseParameters') as response_parameters,
                json_extract_path_text(Properties, 'RouteId') as route_id,
                json_extract_path_text(Properties, 'ModelSelectionExpression') as model_selection_expression,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'ResponseModels') as response_models,
                json_extract_path_text(Properties, 'RouteResponseId') as route_response_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::RouteResponse'
                AND data__Identifier = '<ApiId>'
                AND region = 'us-east-1'
    vpc_links:
      name: vpc_links
      id: awscc.apigatewayv2.vpc_links
      x-cfn-schema-name: VpcLink
      x-type: list
      x-identifiers:
        - VpcLinkId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VpcLinkId') as vpc_link_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
                AND region = 'us-east-1'
    vpc_link:
      name: vpc_link
      id: awscc.apigatewayv2.vpc_link
      x-cfn-schema-name: VpcLink
      x-type: get
      x-identifiers:
        - VpcLinkId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.VpcLinkId') as vpc_link_id,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.SecurityGroupIds') as security_group_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
              AND data__Identifier = '<VpcLinkId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'VpcLinkId') as vpc_link_id,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'SecurityGroupIds') as security_group_ids,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Name') as name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ApiGatewayV2::VpcLink'
                AND data__Identifier = '<VpcLinkId>'
                AND region = 'us-east-1'
