openapi: 3.0.0
info:
  title: Personalize
  version: 1.0.0
paths: {}
components:
  schemas:
    DatasetImportJob:
      description: Initial DatasetImportJob for the created dataset
      type: object
      properties:
        JobName:
          description: The name for the dataset import job.
          type: string
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9\-_]*
          minLength: 1
          maxLength: 63
        DatasetImportJobArn:
          description: The ARN of the dataset import job
          type: string
          pattern: arn:([a-z\d-]+):personalize:.*:.*:.+
          maxLength: 256
        DatasetArn:
          description: The ARN of the dataset that receives the imported data
          type: string
          pattern: arn:([a-z\d-]+):personalize:.*:.*:.+
          maxLength: 256
        DataSource:
          type: object
          description: The Amazon S3 bucket that contains the training data to import.
          properties:
            DataLocation:
              description: The path to the Amazon S3 bucket where the data that you want to upload to your dataset is stored.
              type: string
              maxLength: 256
              pattern: (s3|http|https)://.+
          additionalProperties: false
        RoleArn:
          description: The ARN of the IAM role that has permissions to read from the Amazon S3 data source.
          type: string
          maxLength: 256
          pattern: arn:([a-z\d-]+):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
      additionalProperties: false
    Dataset:
      type: object
      properties:
        Name:
          description: The name for the dataset
          type: string
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9\-_]*
          minLength: 1
          maxLength: 63
        DatasetArn:
          description: The ARN of the dataset
          type: string
          pattern: arn:([a-z\d-]+):personalize:.*:.*:.+
          maxLength: 256
        DatasetType:
          description: The type of dataset
          type: string
          enum:
            - Interactions
            - Items
            - Users
          maxLength: 256
        DatasetGroupArn:
          description: The Amazon Resource Name (ARN) of the dataset group to add the dataset to
          type: string
          maxLength: 256
          pattern: arn:([a-z\d-]+):personalize:.*:.*:.+
        SchemaArn:
          description: The ARN of the schema to associate with the dataset. The schema defines the dataset fields.
          type: string
          maxLength: 256
          pattern: arn:([a-z\d-]+):personalize:.*:.*:.+
        DatasetImportJob:
          $ref: '#/components/schemas/DatasetImportJob'
      required:
        - Name
        - DatasetType
        - DatasetGroupArn
        - SchemaArn
      x-stackql-resource-name: dataset
      x-stackql-primaryIdentifier:
        - DatasetArn
      x-create-only-properties:
        - Name
        - DatasetType
        - DatasetGroupArn
        - SchemaArn
      x-read-only-properties:
        - DatasetArn
      x-required-permissions:
        create:
          - personalize:CreateDataset
          - personalize:DescribeDataset
          - personalize:CreateDatasetImportJob
          - personalize:DescribeDatasetImportJob
          - iam:PassRole
        read:
          - personalize:DescribeDataset
        update:
          - personalize:DescribeDataset
          - personalize:CreateDatasetImportJob
          - personalize:DescribeDatasetImportJob
          - iam:PassRole
        delete:
          - personalize:DeleteDataset
          - personalize:DescribeDataset
        list:
          - personalize:ListDatasets
    DatasetGroup:
      type: object
      properties:
        DatasetGroupArn:
          description: The Amazon Resource Name (ARN) of the dataset group.
          type: string
          pattern: arn:([a-z\d-]+):personalize:.*:.*:.+
          maxLength: 256
        Name:
          description: The name for the new dataset group.
          type: string
          minLength: 1
          maxLength: 63
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9\-_]*
        KmsKeyArn:
          description: The Amazon Resource Name(ARN) of a AWS Key Management Service (KMS) key used to encrypt the datasets.
          type: string
          maxLength: 2048
          pattern: arn:aws.*:kms:.*:[0-9]{12}:key/.*
        RoleArn:
          description: The ARN of the AWS Identity and Access Management (IAM) role that has permissions to access the AWS Key Management Service (KMS) key. Supplying an IAM role is only valid when also specifying a KMS key.
          type: string
          pattern: arn:([a-z\d-]+):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
          minLength: 0
          maxLength: 256
        Domain:
          description: The domain of a Domain dataset group.
          type: string
          enum:
            - ECOMMERCE
            - VIDEO_ON_DEMAND
      required:
        - Name
      x-stackql-resource-name: dataset_group
      x-stackql-primaryIdentifier:
        - DatasetGroupArn
      x-create-only-properties:
        - Name
        - RoleArn
        - KmsKeyArn
        - Domain
      x-read-only-properties:
        - DatasetGroupArn
      x-required-permissions:
        create:
          - personalize:CreateDatasetGroup
          - personalize:DescribeDatasetGroup
          - iam:PassRole
        read:
          - personalize:DescribeDatasetGroup
        delete:
          - personalize:DescribeDatasetGroup
          - personalize:DeleteDatasetGroup
        list:
          - personalize:ListDatasetGroups
    Schema:
      type: object
      properties:
        Name:
          description: Name for the schema.
          type: string
          minLength: 1
          maxLength: 63
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9\-_]*
        SchemaArn:
          description: Arn for the schema.
          type: string
          maxLength: 256
          pattern: arn:([a-z\d-]+):personalize:.*:.*:.+
        Schema:
          description: A schema in Avro JSON format.
          type: string
          maxLength: 10000
        Domain:
          description: The domain of a Domain dataset group.
          type: string
          enum:
            - ECOMMERCE
            - VIDEO_ON_DEMAND
      required:
        - Name
        - Schema
      x-stackql-resource-name: schema
      x-stackql-primaryIdentifier:
        - SchemaArn
      x-create-only-properties:
        - Name
        - Schema
        - Domain
      x-read-only-properties:
        - SchemaArn
      x-required-permissions:
        create:
          - personalize:CreateSchema
          - personalize:DescribeSchema
        read:
          - personalize:DescribeSchema
        delete:
          - personalize:DeleteSchema
          - personalize:DescribeSchema
        list:
          - personalize:ListSchemas
    SolutionArn:
      description: The ARN of the solution
      type: string
      maxLength: 256
      pattern: arn:([a-z\d-]+):personalize:.*:.*:.+
    CategoricalHyperParameterRange:
      description: Provides the name and values of a Categorical hyperparameter.
      type: object
      properties:
        Name:
          description: The name of the hyperparameter.
          type: string
          maxLength: 256
        Values:
          description: A list of the categories for the hyperparameter.
          type: array
          items:
            type: string
            maxLength: 1000
          maxItems: 100
          x-insertionOrder: true
      additionalProperties: false
    ContinuousHyperParameterRange:
      description: Provides the name and range of a continuous hyperparameter.
      type: object
      properties:
        Name:
          description: The name of the hyperparameter.
          type: string
          maxLength: 256
        MinValue:
          description: The minimum allowable value for the hyperparameter.
          type: number
          minimum: -1000000
        MaxValue:
          description: The maximum allowable value for the hyperparameter.
          type: number
          minimum: -1000000
      additionalProperties: false
    IntegerHyperParameterRange:
      description: Provides the name and range of an integer-valued hyperparameter.
      type: object
      properties:
        Name:
          description: The name of the hyperparameter.
          type: string
          maxLength: 256
        MinValue:
          description: The minimum allowable value for the hyperparameter.
          type: integer
          minimum: -1000000
        MaxValue:
          description: The maximum allowable value for the hyperparameter.
          type: integer
          maximum: 1000000
      additionalProperties: false
    SolutionConfig:
      type: object
      description: The configuration to use with the solution. When performAutoML is set to true, Amazon Personalize only evaluates the autoMLConfig section of the solution configuration.
      properties:
        AlgorithmHyperParameters:
          description: Lists the hyperparameter names and ranges.
          type: object
          x-patternProperties:
            .{1,}:
              type: string
          maxProperties: 100
          additionalProperties: false
        AutoMLConfig:
          description: The AutoMLConfig object containing a list of recipes to search when AutoML is performed.
          type: object
          properties:
            MetricName:
              description: The metric to optimize.
              type: string
              maxLength: 256
            RecipeList:
              description: The list of candidate recipes.
              type: array
              items:
                type: string
                maxLength: 256
                pattern: arn:([a-z\d-]+):personalize:.*:.*:.+
              x-insertionOrder: true
              maxItems: 100
          additionalProperties: false
        EventValueThreshold:
          description: Only events with a value greater than or equal to this threshold are used for training a model.
          type: string
          maxLength: 256
        FeatureTransformationParameters:
          description: Lists the feature transformation parameters.
          type: object
          x-patternProperties:
            .{1,}:
              type: string
          maxProperties: 100
          additionalProperties: false
        HpoConfig:
          description: Describes the properties for hyperparameter optimization (HPO)
          type: object
          properties:
            AlgorithmHyperParameterRanges:
              description: The hyperparameters and their allowable ranges
              type: object
              properties:
                CategoricalHyperParameterRanges:
                  description: The categorical hyperparameters and their ranges.
                  type: array
                  maxItems: 100
                  items:
                    $ref: '#/components/schemas/CategoricalHyperParameterRange'
                  x-insertionOrder: true
                ContinuousHyperParameterRanges:
                  description: The continuous hyperparameters and their ranges.
                  type: array
                  maxItems: 100
                  items:
                    $ref: '#/components/schemas/ContinuousHyperParameterRange'
                  x-insertionOrder: true
                IntegerHyperParameterRanges:
                  description: The integer hyperparameters and their ranges.
                  type: array
                  maxItems: 100
                  items:
                    $ref: '#/components/schemas/IntegerHyperParameterRange'
                  x-insertionOrder: true
              additionalProperties: false
            HpoObjective:
              description: The metric to optimize during HPO.
              type: object
              properties:
                MetricName:
                  description: The name of the metric
                  type: string
                  maxLength: 256
                Type:
                  description: The type of the metric. Valid values are Maximize and Minimize.
                  type: string
                  enum:
                    - Maximize
                    - Minimize
                MetricRegex:
                  description: A regular expression for finding the metric in the training job logs.
                  type: string
                  maxLength: 256
              additionalProperties: false
            HpoResourceConfig:
              description: Describes the resource configuration for hyperparameter optimization (HPO).
              type: object
              properties:
                MaxNumberOfTrainingJobs:
                  description: The maximum number of training jobs when you create a solution version. The maximum value for maxNumberOfTrainingJobs is 40.
                  type: string
                  maxLength: 256
                MaxParallelTrainingJobs:
                  description: The maximum number of parallel training jobs when you create a solution version. The maximum value for maxParallelTrainingJobs is 10.
                  type: string
                  maxLength: 256
              additionalProperties: false
          additionalProperties: false
      additionalProperties: false
    Solution:
      type: object
      properties:
        Name:
          description: The name for the solution
          type: string
          minLength: 1
          maxLength: 63
          pattern: ^[a-zA-Z0-9][a-zA-Z0-9\-_]*
        SolutionArn:
          $ref: '#/components/schemas/SolutionArn'
        EventType:
          description: When your have multiple event types (using an EVENT_TYPE schema field), this parameter specifies which event type (for example, 'click' or 'like') is used for training the model. If you do not provide an eventType, Amazon Personalize will use all interactions for training with equal weight regardless of type.
          type: string
          maxLength: 256
        DatasetGroupArn:
          description: The ARN of the dataset group that provides the training data.
          type: string
          maxLength: 256
          pattern: arn:([a-z\d-]+):personalize:.*:.*:.+
        PerformAutoML:
          description: Whether to perform automated machine learning (AutoML). The default is false. For this case, you must specify recipeArn.
          type: boolean
        PerformHPO:
          description: Whether to perform hyperparameter optimization (HPO) on the specified or selected recipe. The default is false. When performing AutoML, this parameter is always true and you should not set it to false.
          type: boolean
        RecipeArn:
          description: The ARN of the recipe to use for model training. Only specified when performAutoML is false.
          type: string
          maxLength: 256
          pattern: arn:([a-z\d-]+):personalize:.*:.*:.+
        SolutionConfig:
          $ref: '#/components/schemas/SolutionConfig'
      required:
        - Name
        - DatasetGroupArn
      x-stackql-resource-name: solution
      x-stackql-primaryIdentifier:
        - SolutionArn
      x-create-only-properties:
        - Name
        - EventType
        - DatasetGroupArn
        - PerformAutoML
        - PerformHPO
        - RecipeArn
        - SolutionConfig
      x-read-only-properties:
        - SolutionArn
      x-required-permissions:
        create:
          - personalize:CreateSolution
          - personalize:DescribeSolution
        read:
          - personalize:DescribeSolution
        delete:
          - personalize:DeleteSolution
          - personalize:DescribeSolution
        list:
          - personalize:ListSolutions
  x-stackQL-resources:
    datasets:
      name: datasets
      id: awscc.personalize.datasets
      x-cfn-schema-name: Dataset
      x-type: list
      x-identifiers:
        - DatasetArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DatasetArn') as dataset_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Personalize::Dataset'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DatasetArn') as dataset_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Personalize::Dataset'
                AND region = 'us-east-1'
    dataset:
      name: dataset
      id: awscc.personalize.dataset
      x-cfn-schema-name: Dataset
      x-type: get
      x-identifiers:
        - DatasetArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.DatasetArn') as dataset_arn,
              JSON_EXTRACT(Properties, '$.DatasetType') as dataset_type,
              JSON_EXTRACT(Properties, '$.DatasetGroupArn') as dataset_group_arn,
              JSON_EXTRACT(Properties, '$.SchemaArn') as schema_arn,
              JSON_EXTRACT(Properties, '$.DatasetImportJob') as dataset_import_job
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Personalize::Dataset'
              AND data__Identifier = '<DatasetArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'DatasetArn') as dataset_arn,
                json_extract_path_text(Properties, 'DatasetType') as dataset_type,
                json_extract_path_text(Properties, 'DatasetGroupArn') as dataset_group_arn,
                json_extract_path_text(Properties, 'SchemaArn') as schema_arn,
                json_extract_path_text(Properties, 'DatasetImportJob') as dataset_import_job
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Personalize::Dataset'
                AND data__Identifier = '<DatasetArn>'
                AND region = 'us-east-1'
    dataset_groups:
      name: dataset_groups
      id: awscc.personalize.dataset_groups
      x-cfn-schema-name: DatasetGroup
      x-type: list
      x-identifiers:
        - DatasetGroupArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DatasetGroupArn') as dataset_group_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Personalize::DatasetGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DatasetGroupArn') as dataset_group_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Personalize::DatasetGroup'
                AND region = 'us-east-1'
    dataset_group:
      name: dataset_group
      id: awscc.personalize.dataset_group
      x-cfn-schema-name: DatasetGroup
      x-type: get
      x-identifiers:
        - DatasetGroupArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DatasetGroupArn') as dataset_group_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.KmsKeyArn') as kms_key_arn,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Domain') as domain
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Personalize::DatasetGroup'
              AND data__Identifier = '<DatasetGroupArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DatasetGroupArn') as dataset_group_arn,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'KmsKeyArn') as kms_key_arn,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'Domain') as domain
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Personalize::DatasetGroup'
                AND data__Identifier = '<DatasetGroupArn>'
                AND region = 'us-east-1'
    schemata:
      name: schemata
      id: awscc.personalize.schemata
      x-cfn-schema-name: Schema
      x-type: list
      x-identifiers:
        - SchemaArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SchemaArn') as schema_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Personalize::Schema'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SchemaArn') as schema_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Personalize::Schema'
                AND region = 'us-east-1'
    schema:
      name: schema
      id: awscc.personalize.schema
      x-cfn-schema-name: Schema
      x-type: get
      x-identifiers:
        - SchemaArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.SchemaArn') as schema_arn,
              JSON_EXTRACT(Properties, '$.Schema') as _schema,
              JSON_EXTRACT(Properties, '$.Domain') as domain
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Personalize::Schema'
              AND data__Identifier = '<SchemaArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'SchemaArn') as schema_arn,
                json_extract_path_text(Properties, 'Schema') as _schema,
                json_extract_path_text(Properties, 'Domain') as domain
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Personalize::Schema'
                AND data__Identifier = '<SchemaArn>'
                AND region = 'us-east-1'
    solutions:
      name: solutions
      id: awscc.personalize.solutions
      x-cfn-schema-name: Solution
      x-type: list
      x-identifiers:
        - SolutionArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SolutionArn') as solution_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Personalize::Solution'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SolutionArn') as solution_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Personalize::Solution'
                AND region = 'us-east-1'
    solution:
      name: solution
      id: awscc.personalize.solution
      x-cfn-schema-name: Solution
      x-type: get
      x-identifiers:
        - SolutionArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.SolutionArn') as solution_arn,
              JSON_EXTRACT(Properties, '$.EventType') as event_type,
              JSON_EXTRACT(Properties, '$.DatasetGroupArn') as dataset_group_arn,
              JSON_EXTRACT(Properties, '$.PerformAutoML') as perform_auto_ml,
              JSON_EXTRACT(Properties, '$.PerformHPO') as perform_hpo,
              JSON_EXTRACT(Properties, '$.RecipeArn') as recipe_arn,
              JSON_EXTRACT(Properties, '$.SolutionConfig') as solution_config
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Personalize::Solution'
              AND data__Identifier = '<SolutionArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'SolutionArn') as solution_arn,
                json_extract_path_text(Properties, 'EventType') as event_type,
                json_extract_path_text(Properties, 'DatasetGroupArn') as dataset_group_arn,
                json_extract_path_text(Properties, 'PerformAutoML') as perform_auto_ml,
                json_extract_path_text(Properties, 'PerformHPO') as perform_hpo,
                json_extract_path_text(Properties, 'RecipeArn') as recipe_arn,
                json_extract_path_text(Properties, 'SolutionConfig') as solution_config
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Personalize::Solution'
                AND data__Identifier = '<SolutionArn>'
                AND region = 'us-east-1'
