openapi: 3.0.0
info:
  title: Location
  version: 1.0.0
paths: {}
components:
  schemas:
    ApiKeyRestrictions:
      type: object
      properties:
        AllowActions:
          type: array
          items:
            type: string
            maxLength: 200
            minLength: 5
            pattern: ^geo:\w*\*?$
          maxItems: 7
          minItems: 1
          x-insertionOrder: false
        AllowResources:
          type: array
          items:
            type: string
            maxLength: 1600
            pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*):geo(:([a-z0-9]+([.-][a-z0-9]+)*))(:[0-9]+):((\*)|([-a-z]+[/][*-._\w]+))$
          maxItems: 5
          minItems: 1
          x-insertionOrder: false
        AllowReferers:
          type: array
          items:
            type: string
            maxLength: 253
            pattern: ^([$\-._+!*\x{60}(),;/?:@=&\w]|%([0-9a-fA-F?]{2}|[0-9a-fA-F?]?[*]))+$
          maxItems: 5
          minItems: 1
          x-insertionOrder: false
      required:
        - AllowActions
        - AllowResources
      additionalProperties: false
    TagMap:
      type: object
      maxProperties: 50
      x-patternProperties:
        ^[a-zA-Z+-=._:/]+$:
          type: string
          maxLength: 256
          minLength: 0
          pattern: ^[A-Za-z0-9 _=@:.+-/]*$
      additionalProperties: false
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
          pattern: ^[a-zA-Z+-=._:/]+$
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
          pattern: ^[A-Za-z0-9 _=@:.+-/]*$
      required:
        - Key
        - Value
      additionalProperties: false
    iso8601UTC:
      description: The datetime value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ss.sssZ)
      type: string
      pattern: ^([0-2]\d{3})-(0[0-9]|1[0-2])-([0-2]\d|3[01])T([01]\d|2[0-4]):([0-5]\d):([0-6]\d)((\.\d{3})?)Z$
    APIKey:
      type: object
      properties:
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        ExpireTime:
          $ref: '#/components/schemas/iso8601UTC'
        ForceUpdate:
          type: boolean
        KeyArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        KeyName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        NoExpiry:
          type: boolean
        Restrictions:
          $ref: '#/components/schemas/ApiKeyRestrictions'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
        ForceDelete:
          type: boolean
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
      required:
        - KeyName
        - Restrictions
      x-stackql-resource-name: api_key
      x-stackql-primaryIdentifier:
        - KeyName
      x-create-only-properties:
        - KeyName
      x-read-only-properties:
        - CreateTime
        - Arn
        - KeyArn
        - UpdateTime
      x-required-permissions:
        create:
          - geo:CreateKey
          - geo:DescribeKey
          - geo:TagResource
          - geo:UntagResource
          - geo:GetMapTile
          - geo:GetMapStyleDescriptor
          - geo:GetMapSprites
          - geo:GetMapGlyphs
          - geo:SearchPlaceIndexForText
          - geo:SearchPlaceIndexForPosition
          - geo:SearchPlaceIndexForSuggestions
          - geo:GetPlace
          - geo:CalculateRoute
          - geo:CalculateRouteMatrix
        read:
          - geo:DescribeKey
        update:
          - geo:CreateKey
          - geo:DescribeKey
          - geo:TagResource
          - geo:UntagResource
          - geo:GetMapTile
          - geo:GetMapStyleDescriptor
          - geo:GetMapSprites
          - geo:GetMapGlyphs
          - geo:SearchPlaceIndexForText
          - geo:SearchPlaceIndexForPosition
          - geo:SearchPlaceIndexForSuggestions
          - geo:GetPlace
          - geo:CalculateRoute
          - geo:CalculateRouteMatrix
          - geo:UpdateKey
        delete:
          - geo:DeleteKey
          - geo:DescribeKey
        list:
          - geo:ListKeys
    PricingPlan:
      type: string
      enum:
        - RequestBasedUsage
    GeofenceCollection:
      type: object
      properties:
        CollectionArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        CollectionName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        KmsKeyId:
          type: string
          maxLength: 2048
          minLength: 1
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        PricingPlanDataSource:
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
      required:
        - CollectionName
      x-stackql-resource-name: geofence_collection
      x-stackql-primaryIdentifier:
        - CollectionName
      x-create-only-properties:
        - CollectionName
        - KmsKeyId
      x-read-only-properties:
        - CollectionArn
        - Arn
        - CreateTime
        - UpdateTime
      x-required-permissions:
        create:
          - geo:CreateGeofenceCollection
          - geo:DescribeGeofenceCollection
          - geo:TagResource
          - geo:UntagResource
          - kms:DescribeKey
          - kms:CreateGrant
        read:
          - geo:DescribeGeofenceCollection
          - kms:DescribeKey
        update:
          - geo:CreateGeofenceCollection
          - geo:DescribeGeofenceCollection
          - geo:TagResource
          - geo:UntagResource
          - kms:DescribeKey
          - kms:CreateGrant
          - geo:UpdateGeofenceCollection
        delete:
          - geo:DeleteGeofenceCollection
          - geo:DescribeGeofenceCollection
        list:
          - geo:ListGeofenceCollections
    MapConfiguration:
      type: object
      properties:
        Style:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        PoliticalView:
          type: string
          maxLength: 3
          minLength: 3
          pattern: ^[A-Z]{3}$
        CustomLayers:
          type: array
          items:
            type: string
            maxLength: 100
            minLength: 1
            pattern: ^[-._\w]+$
          maxItems: 10
      required:
        - Style
      additionalProperties: false
    Map:
      type: object
      properties:
        Configuration:
          $ref: '#/components/schemas/MapConfiguration'
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        MapArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*):geo(:([a-z0-9]+([.-][a-z0-9]+)*))(:[0-9]+):((\*)|([-a-z]+[/][*-._\w]+))$
        MapName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
      required:
        - Configuration
        - MapName
      x-stackql-resource-name: map
      x-stackql-primaryIdentifier:
        - MapName
      x-create-only-properties:
        - Configuration
        - MapName
      x-read-only-properties:
        - CreateTime
        - Arn
        - MapArn
        - UpdateTime
      x-required-permissions:
        create:
          - geo:CreateMap
          - geo:DescribeMap
          - geo:TagResource
          - geo:UntagResource
        read:
          - geo:DescribeMap
        update:
          - geo:CreateMap
          - geo:DescribeMap
          - geo:TagResource
          - geo:UntagResource
          - geo:UpdateMap
        delete:
          - geo:DeleteMap
          - geo:DescribeMap
        list:
          - geo:ListMaps
    DataSourceConfiguration:
      type: object
      properties:
        IntendedUse:
          $ref: '#/components/schemas/IntendedUse'
      additionalProperties: false
    IntendedUse:
      type: string
      enum:
        - SingleUse
        - Storage
    PlaceIndex:
      type: object
      properties:
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        DataSource:
          type: string
        DataSourceConfiguration:
          $ref: '#/components/schemas/DataSourceConfiguration'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        IndexArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*):geo(:([a-z0-9]+([.-][a-z0-9]+)*))(:[0-9]+):((\*)|([-a-z]+[/][*-._\w]+))$
        IndexName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
      required:
        - DataSource
        - IndexName
      x-stackql-resource-name: place_index
      x-stackql-primaryIdentifier:
        - IndexName
      x-create-only-properties:
        - DataSource
        - IndexName
      x-read-only-properties:
        - CreateTime
        - Arn
        - IndexArn
        - UpdateTime
      x-required-permissions:
        create:
          - geo:CreatePlaceIndex
          - geo:DescribePlaceIndex
          - geo:TagResource
          - geo:UntagResource
        read:
          - geo:DescribePlaceIndex
        update:
          - geo:CreatePlaceIndex
          - geo:DescribePlaceIndex
          - geo:TagResource
          - geo:UntagResource
          - geo:UpdatePlaceIndex
        delete:
          - geo:DeletePlaceIndex
          - geo:DescribePlaceIndex
        list:
          - geo:ListPlaceIndexes
    RouteCalculator:
      type: object
      properties:
        CalculatorArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*):geo(:([a-z0-9]+([.-][a-z0-9]+)*))(:[0-9]+):((\*)|([-a-z]+[/][*-._\w]+))$
        CalculatorName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        DataSource:
          type: string
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
      required:
        - DataSource
        - CalculatorName
      x-stackql-resource-name: route_calculator
      x-stackql-primaryIdentifier:
        - CalculatorName
      x-create-only-properties:
        - CalculatorName
        - DataSource
      x-read-only-properties:
        - CalculatorArn
        - Arn
        - CreateTime
        - UpdateTime
      x-required-permissions:
        create:
          - geo:CreateRouteCalculator
          - geo:DescribeRouteCalculator
          - geo:TagResource
          - geo:UntagResource
        read:
          - geo:DescribeRouteCalculator
        update:
          - geo:CreateRouteCalculator
          - geo:DescribeRouteCalculator
          - geo:TagResource
          - geo:UntagResource
          - geo:UpdateRouteCalculator
        delete:
          - geo:DeleteRouteCalculator
          - geo:DescribeRouteCalculator
        list:
          - geo:ListRouteCalculators
    PositionFiltering:
      type: string
      enum:
        - TimeBased
        - DistanceBased
        - AccuracyBased
    Tracker:
      type: object
      properties:
        CreateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Description:
          type: string
          maxLength: 1000
          minLength: 0
        EventBridgeEnabled:
          type: boolean
        KmsKeyEnableGeospatialQueries:
          type: boolean
        KmsKeyId:
          type: string
          maxLength: 2048
          minLength: 1
        PositionFiltering:
          $ref: '#/components/schemas/PositionFiltering'
        PricingPlan:
          $ref: '#/components/schemas/PricingPlan'
        PricingPlanDataSource:
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        TrackerArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        TrackerName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
        UpdateTime:
          $ref: '#/components/schemas/iso8601UTC'
        Arn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
      required:
        - TrackerName
      x-stackql-resource-name: tracker
      x-stackql-primaryIdentifier:
        - TrackerName
      x-create-only-properties:
        - KmsKeyId
        - TrackerName
      x-read-only-properties:
        - CreateTime
        - Arn
        - TrackerArn
        - UpdateTime
      x-required-permissions:
        create:
          - geo:CreateTracker
          - geo:DescribeTracker
          - geo:TagResource
          - geo:UntagResource
          - kms:DescribeKey
          - kms:CreateGrant
        read:
          - geo:DescribeTracker
          - kms:DescribeKey
        update:
          - geo:CreateTracker
          - geo:DescribeTracker
          - geo:TagResource
          - geo:UntagResource
          - kms:DescribeKey
          - kms:CreateGrant
          - geo:UpdateTracker
        delete:
          - geo:DeleteTracker
          - geo:DescribeTracker
        list:
          - geo:ListTrackers
    TrackerConsumer:
      type: object
      properties:
        ConsumerArn:
          type: string
          maxLength: 1600
          pattern: ^arn(:[a-z0-9]+([.-][a-z0-9]+)*){2}(:([a-z0-9]+([.-][a-z0-9]+)*)?){2}:([^/].*)?$
        TrackerName:
          type: string
          maxLength: 100
          minLength: 1
          pattern: ^[-._\w]+$
      required:
        - ConsumerArn
        - TrackerName
      x-stackql-resource-name: tracker_consumer
      x-stackql-primaryIdentifier:
        - TrackerName
        - ConsumerArn
      x-create-only-properties:
        - TrackerName
        - ConsumerArn
      x-required-permissions:
        create:
          - geo:AssociateTrackerConsumer
          - geo:ListTrackerConsumers
        delete:
          - geo:DisassociateTrackerConsumer
          - geo:ListTrackerConsumers
        list:
          - geo:ListTrackerConsumers
        read:
          - geo:ListTrackerConsumers
  x-stackQL-resources:
    api_keys:
      name: api_keys
      id: awscc.location.api_keys
      x-cfn-schema-name: APIKey
      x-type: list
      x-identifiers:
        - KeyName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.KeyName') as key_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::APIKey'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'KeyName') as key_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::APIKey'
                AND region = 'us-east-1'
    api_key:
      name: api_key
      id: awscc.location.api_key
      x-cfn-schema-name: APIKey
      x-type: get
      x-identifiers:
        - KeyName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ExpireTime') as expire_time,
              JSON_EXTRACT(Properties, '$.ForceUpdate') as force_update,
              JSON_EXTRACT(Properties, '$.KeyArn') as key_arn,
              JSON_EXTRACT(Properties, '$.KeyName') as key_name,
              JSON_EXTRACT(Properties, '$.NoExpiry') as no_expiry,
              JSON_EXTRACT(Properties, '$.Restrictions') as restrictions,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(Properties, '$.ForceDelete') as force_delete,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::APIKey'
              AND data__Identifier = '<KeyName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CreateTime') as create_time,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'ExpireTime') as expire_time,
                json_extract_path_text(Properties, 'ForceUpdate') as force_update,
                json_extract_path_text(Properties, 'KeyArn') as key_arn,
                json_extract_path_text(Properties, 'KeyName') as key_name,
                json_extract_path_text(Properties, 'NoExpiry') as no_expiry,
                json_extract_path_text(Properties, 'Restrictions') as restrictions,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'UpdateTime') as update_time,
                json_extract_path_text(Properties, 'ForceDelete') as force_delete,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::APIKey'
                AND data__Identifier = '<KeyName>'
                AND region = 'us-east-1'
    geofence_collections:
      name: geofence_collections
      id: awscc.location.geofence_collections
      x-cfn-schema-name: GeofenceCollection
      x-type: list
      x-identifiers:
        - CollectionName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CollectionName') as collection_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::GeofenceCollection'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CollectionName') as collection_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::GeofenceCollection'
                AND region = 'us-east-1'
    geofence_collection:
      name: geofence_collection
      id: awscc.location.geofence_collection
      x-cfn-schema-name: GeofenceCollection
      x-type: get
      x-identifiers:
        - CollectionName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CollectionArn') as collection_arn,
              JSON_EXTRACT(Properties, '$.CollectionName') as collection_name,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(Properties, '$.PricingPlanDataSource') as pricing_plan_data_source,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::GeofenceCollection'
              AND data__Identifier = '<CollectionName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CollectionArn') as collection_arn,
                json_extract_path_text(Properties, 'CollectionName') as collection_name,
                json_extract_path_text(Properties, 'CreateTime') as create_time,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'PricingPlan') as pricing_plan,
                json_extract_path_text(Properties, 'PricingPlanDataSource') as pricing_plan_data_source,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'UpdateTime') as update_time,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::GeofenceCollection'
                AND data__Identifier = '<CollectionName>'
                AND region = 'us-east-1'
    maps:
      name: maps
      id: awscc.location.maps
      x-cfn-schema-name: Map
      x-type: list
      x-identifiers:
        - MapName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.MapName') as map_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::Map'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'MapName') as map_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::Map'
                AND region = 'us-east-1'
    map:
      name: map
      id: awscc.location.map
      x-cfn-schema-name: Map
      x-type: get
      x-identifiers:
        - MapName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.MapArn') as map_arn,
              JSON_EXTRACT(Properties, '$.MapName') as map_name,
              JSON_EXTRACT(Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::Map'
              AND data__Identifier = '<MapName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Configuration') as configuration,
                json_extract_path_text(Properties, 'CreateTime') as create_time,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'MapArn') as map_arn,
                json_extract_path_text(Properties, 'MapName') as map_name,
                json_extract_path_text(Properties, 'PricingPlan') as pricing_plan,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'UpdateTime') as update_time,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::Map'
                AND data__Identifier = '<MapName>'
                AND region = 'us-east-1'
    place_indices:
      name: place_indices
      id: awscc.location.place_indices
      x-cfn-schema-name: PlaceIndex
      x-type: list
      x-identifiers:
        - IndexName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IndexName') as index_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::PlaceIndex'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IndexName') as index_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::PlaceIndex'
                AND region = 'us-east-1'
    place_index:
      name: place_index
      id: awscc.location.place_index
      x-cfn-schema-name: PlaceIndex
      x-type: get
      x-identifiers:
        - IndexName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.DataSource') as data_source,
              JSON_EXTRACT(Properties, '$.DataSourceConfiguration') as data_source_configuration,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.IndexArn') as index_arn,
              JSON_EXTRACT(Properties, '$.IndexName') as index_name,
              JSON_EXTRACT(Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::PlaceIndex'
              AND data__Identifier = '<IndexName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CreateTime') as create_time,
                json_extract_path_text(Properties, 'DataSource') as data_source,
                json_extract_path_text(Properties, 'DataSourceConfiguration') as data_source_configuration,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'IndexArn') as index_arn,
                json_extract_path_text(Properties, 'IndexName') as index_name,
                json_extract_path_text(Properties, 'PricingPlan') as pricing_plan,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'UpdateTime') as update_time,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::PlaceIndex'
                AND data__Identifier = '<IndexName>'
                AND region = 'us-east-1'
    route_calculators:
      name: route_calculators
      id: awscc.location.route_calculators
      x-cfn-schema-name: RouteCalculator
      x-type: list
      x-identifiers:
        - CalculatorName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CalculatorName') as calculator_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::RouteCalculator'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CalculatorName') as calculator_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::RouteCalculator'
                AND region = 'us-east-1'
    route_calculator:
      name: route_calculator
      id: awscc.location.route_calculator
      x-cfn-schema-name: RouteCalculator
      x-type: get
      x-identifiers:
        - CalculatorName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CalculatorArn') as calculator_arn,
              JSON_EXTRACT(Properties, '$.CalculatorName') as calculator_name,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.DataSource') as data_source,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::RouteCalculator'
              AND data__Identifier = '<CalculatorName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CalculatorArn') as calculator_arn,
                json_extract_path_text(Properties, 'CalculatorName') as calculator_name,
                json_extract_path_text(Properties, 'CreateTime') as create_time,
                json_extract_path_text(Properties, 'DataSource') as data_source,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'PricingPlan') as pricing_plan,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'UpdateTime') as update_time,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::RouteCalculator'
                AND data__Identifier = '<CalculatorName>'
                AND region = 'us-east-1'
    trackers:
      name: trackers
      id: awscc.location.trackers
      x-cfn-schema-name: Tracker
      x-type: list
      x-identifiers:
        - TrackerName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::Tracker'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TrackerName') as tracker_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::Tracker'
                AND region = 'us-east-1'
    tracker:
      name: tracker
      id: awscc.location.tracker
      x-cfn-schema-name: Tracker
      x-type: get
      x-identifiers:
        - TrackerName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CreateTime') as create_time,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EventBridgeEnabled') as event_bridge_enabled,
              JSON_EXTRACT(Properties, '$.KmsKeyEnableGeospatialQueries') as kms_key_enable_geospatial_queries,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.PositionFiltering') as position_filtering,
              JSON_EXTRACT(Properties, '$.PricingPlan') as pricing_plan,
              JSON_EXTRACT(Properties, '$.PricingPlanDataSource') as pricing_plan_data_source,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TrackerArn') as tracker_arn,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name,
              JSON_EXTRACT(Properties, '$.UpdateTime') as update_time,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::Tracker'
              AND data__Identifier = '<TrackerName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CreateTime') as create_time,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'EventBridgeEnabled') as event_bridge_enabled,
                json_extract_path_text(Properties, 'KmsKeyEnableGeospatialQueries') as kms_key_enable_geospatial_queries,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'PositionFiltering') as position_filtering,
                json_extract_path_text(Properties, 'PricingPlan') as pricing_plan,
                json_extract_path_text(Properties, 'PricingPlanDataSource') as pricing_plan_data_source,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TrackerArn') as tracker_arn,
                json_extract_path_text(Properties, 'TrackerName') as tracker_name,
                json_extract_path_text(Properties, 'UpdateTime') as update_time,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::Tracker'
                AND data__Identifier = '<TrackerName>'
                AND region = 'us-east-1'
    tracker_consumers:
      name: tracker_consumers
      id: awscc.location.tracker_consumers
      x-cfn-schema-name: TrackerConsumer
      x-type: list
      x-identifiers:
        - TrackerName
        - ConsumerArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name,
              JSON_EXTRACT(Properties, '$.ConsumerArn') as consumer_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::TrackerConsumer'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TrackerName') as tracker_name,
                json_extract_path_text(Properties, 'ConsumerArn') as consumer_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Location::TrackerConsumer'
                AND region = 'us-east-1'
    tracker_consumer:
      name: tracker_consumer
      id: awscc.location.tracker_consumer
      x-cfn-schema-name: TrackerConsumer
      x-type: get
      x-identifiers:
        - TrackerName
        - ConsumerArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ConsumerArn') as consumer_arn,
              JSON_EXTRACT(Properties, '$.TrackerName') as tracker_name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::TrackerConsumer'
              AND data__Identifier = '<TrackerName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ConsumerArn') as consumer_arn,
                json_extract_path_text(Properties, 'TrackerName') as tracker_name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Location::TrackerConsumer'
                AND data__Identifier = '<TrackerName>'
                AND region = 'us-east-1'
