openapi: 3.0.0
info:
  title: EntityResolution
  version: 1.0.0
paths: {}
components:
  schemas:
    EntityName:
      type: string
      pattern: ^[a-zA-Z_0-9-]*$
      minLength: 0
      maxLength: 255
    Description:
      type: string
      minLength: 0
      maxLength: 255
    AttributeName:
      type: string
      pattern: ^[a-zA-Z_0-9- \t]*$
      minLength: 0
      maxLength: 255
    SchemaMappingArn:
      description: The SchemaMapping arn associated with the Schema
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:.*:[0-9]+:(schemamapping/.*)$
    KMSArn:
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):kms:.*:[0-9]+:.*$
    IdMappingWorkflowArn:
      description: The default IdMappingWorkflow arn
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:.*:[0-9]+:(idmappingworkflow/.*)$
    CreatedAt:
      description: The time of this SchemaMapping got created
      type: string
    UpdatedAt:
      description: The time of this SchemaMapping got last updated at
      type: string
    IdMappingWorkflowInputSource:
      type: object
      properties:
        InputSourceARN:
          description: An Glue table ARN for the input source table
          type: string
          pattern: arn:(aws|aws-us-gov|aws-cn):.*:.*:[0-9]+:.*$
        SchemaArn:
          type: string
          $ref: '#/components/schemas/SchemaMappingArn'
      required:
        - InputSourceARN
        - SchemaArn
      additionalProperties: false
    IdMappingWorkflowOutputSource:
      type: object
      properties:
        OutputS3Path:
          description: The S3 path to which Entity Resolution will write the output table
          type: string
          pattern: ^s3://([^/]+)/?(.*?([^/]+)/?)$
        KMSArn:
          $ref: '#/components/schemas/KMSArn'
      required:
        - OutputS3Path
      additionalProperties: false
    IdMappingTechniques:
      type: object
      properties:
        IdMappingType:
          type: string
          enum:
            - PROVIDER
        ProviderProperties:
          $ref: '#/components/schemas/ProviderProperties'
      additionalProperties: false
    ProviderProperties:
      type: object
      properties:
        ProviderServiceArn:
          type: string
          description: Arn of the Provider service being used.
        ProviderConfiguration:
          type: object
          additionalProperties: false
          x-patternProperties:
            ^.+$:
              type: string
          description: Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
        IntermediateSourceConfiguration:
          $ref: '#/components/schemas/IntermediateSourceConfiguration'
      required:
        - ProviderServiceArn
      additionalProperties: false
    IntermediateSourceConfiguration:
      type: object
      properties:
        IntermediateS3Path:
          type: string
          description: The s3 path that would be used to stage the intermediate data being generated during workflow execution.
      required:
        - IntermediateS3Path
      additionalProperties: false
    Tag:
      description: A key-value pair to associate with a resource
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    IdMappingWorkflow:
      type: object
      properties:
        WorkflowName:
          description: The name of the IdMappingWorkflow
          $ref: '#/components/schemas/EntityName'
        Description:
          description: The description of the IdMappingWorkflow
          $ref: '#/components/schemas/Description'
        InputSourceConfig:
          type: array
          x-insertionOrder: false
          minItems: 1
          maxItems: 20
          items:
            $ref: '#/components/schemas/IdMappingWorkflowInputSource'
        OutputSourceConfig:
          type: array
          x-insertionOrder: false
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/IdMappingWorkflowOutputSource'
        IdMappingTechniques:
          $ref: '#/components/schemas/IdMappingTechniques'
        RoleArn:
          type: string
          pattern: ^arn:(aws|aws-us-gov|aws-cn):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
        Tags:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        WorkflowArn:
          $ref: '#/components/schemas/IdMappingWorkflowArn'
        CreatedAt:
          $ref: '#/components/schemas/CreatedAt'
        UpdatedAt:
          $ref: '#/components/schemas/UpdatedAt'
      required:
        - WorkflowName
        - InputSourceConfig
        - OutputSourceConfig
        - IdMappingTechniques
        - RoleArn
      x-stackql-resource-name: id_mapping_workflow
      x-stackql-primaryIdentifier:
        - WorkflowName
      x-create-only-properties:
        - WorkflowName
      x-read-only-properties:
        - WorkflowArn
        - UpdatedAt
        - CreatedAt
      x-required-permissions:
        create:
          - entityresolution:CreateIdMappingWorkflow
          - entityresolution:GetIdMappingWorkflow
          - entityresolution:TagResource
          - kms:CreateGrant
          - kms:DescribeKey
          - iam:PassRole
        update:
          - entityresolution:GetIdMappingWorkflow
          - entityresolution:UpdateIdMappingWorkflow
          - entityresolution:ListTagsForResource
          - entityresolution:TagResource
          - entityresolution:UntagResource
          - iam:PassRole
          - kms:CreateGrant
          - kms:DescribeKey
        read:
          - entityresolution:GetIdMappingWorkflow
          - entityresolution:ListTagsForResource
        delete:
          - entityresolution:DeleteIdMappingWorkflow
          - entityresolution:GetIdMappingWorkflow
          - entityresolution:UntagResource
        list:
          - entityresolution:ListIdMappingWorkflows
    MatchingWorkflowArn:
      description: The default MatchingWorkflow arn
      type: string
      pattern: ^arn:(aws|aws-us-gov|aws-cn):entityresolution:.*:[0-9]+:(matchingworkflow/.*)$
    InputSource:
      type: object
      properties:
        InputSourceARN:
          description: An Glue table ARN for the input source table
          type: string
          pattern: arn:(aws|aws-us-gov|aws-cn):.*:.*:[0-9]+:.*$
        SchemaArn:
          type: string
          $ref: '#/components/schemas/SchemaMappingArn'
        ApplyNormalization:
          type: boolean
      required:
        - InputSourceARN
        - SchemaArn
      additionalProperties: false
    OutputSource:
      type: object
      properties:
        OutputS3Path:
          description: The S3 path to which Entity Resolution will write the output table
          type: string
          pattern: ^s3://([^/]+)/?(.*?([^/]+)/?)$
        Output:
          type: array
          x-insertionOrder: false
          minItems: 0
          maxItems: 750
          items:
            $ref: '#/components/schemas/OutputAttribute'
        KMSArn:
          $ref: '#/components/schemas/KMSArn'
        ApplyNormalization:
          type: boolean
      required:
        - Output
        - OutputS3Path
      additionalProperties: false
    OutputAttribute:
      type: object
      properties:
        Name:
          $ref: '#/components/schemas/AttributeName'
        Hashed:
          type: boolean
      required:
        - Name
      additionalProperties: false
    ResolutionTechniques:
      type: object
      properties:
        ResolutionType:
          type: string
          enum:
            - RULE_MATCHING
            - ML_MATCHING
            - PROVIDER
        RuleBasedProperties:
          $ref: '#/components/schemas/RuleBasedProperties'
        ProviderProperties:
          $ref: '#/components/schemas/ProviderProperties'
      additionalProperties: false
    RuleBasedProperties:
      type: object
      properties:
        Rules:
          type: array
          x-insertionOrder: false
          minItems: 1
          maxItems: 15
          items:
            $ref: '#/components/schemas/Rule'
        AttributeMatchingModel:
          type: string
          enum:
            - ONE_TO_ONE
            - MANY_TO_MANY
      required:
        - AttributeMatchingModel
        - Rules
      additionalProperties: false
    Rule:
      type: object
      properties:
        RuleName:
          type: string
          pattern: ^[a-zA-Z_0-9- \t]*$
          minLength: 0
          maxLength: 255
        MatchingKeys:
          type: array
          x-insertionOrder: false
          minItems: 1
          maxItems: 15
          items:
            $ref: '#/components/schemas/AttributeName'
      required:
        - RuleName
        - MatchingKeys
      additionalProperties: false
    MatchingWorkflow:
      type: object
      properties:
        WorkflowName:
          description: The name of the MatchingWorkflow
          $ref: '#/components/schemas/EntityName'
        Description:
          description: The description of the MatchingWorkflow
          $ref: '#/components/schemas/Description'
        InputSourceConfig:
          type: array
          x-insertionOrder: false
          minItems: 1
          maxItems: 20
          items:
            $ref: '#/components/schemas/InputSource'
        OutputSourceConfig:
          type: array
          x-insertionOrder: false
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/components/schemas/OutputSource'
        ResolutionTechniques:
          $ref: '#/components/schemas/ResolutionTechniques'
        RoleArn:
          type: string
          pattern: ^arn:(aws|aws-us-gov|aws-cn):iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+$
        Tags:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        WorkflowArn:
          $ref: '#/components/schemas/MatchingWorkflowArn'
        CreatedAt:
          $ref: '#/components/schemas/CreatedAt'
        UpdatedAt:
          $ref: '#/components/schemas/UpdatedAt'
      required:
        - WorkflowName
        - InputSourceConfig
        - OutputSourceConfig
        - ResolutionTechniques
        - RoleArn
      x-stackql-resource-name: matching_workflow
      x-stackql-primaryIdentifier:
        - WorkflowName
      x-create-only-properties:
        - WorkflowName
      x-read-only-properties:
        - WorkflowArn
        - UpdatedAt
        - CreatedAt
      x-required-permissions:
        create:
          - entityresolution:CreateMatchingWorkflow
          - entityresolution:GetMatchingWorkflow
          - entityresolution:TagResource
          - kms:CreateGrant
          - kms:DescribeKey
          - iam:PassRole
        read:
          - entityresolution:GetMatchingWorkflow
          - entityresolution:ListTagsForResource
        delete:
          - entityresolution:DeleteMatchingWorkflow
          - entityresolution:GetMatchingWorkflow
          - entityresolution:UntagResource
        list:
          - entityresolution:ListMatchingWorkflows
        update:
          - entityresolution:GetMatchingWorkflow
          - entityresolution:UpdateMatchingWorkflow
          - entityresolution:ListTagsForResource
          - entityresolution:TagResource
          - entityresolution:UntagResource
          - iam:PassRole
          - kms:CreateGrant
          - kms:DescribeKey
    SchemaAttributeType:
      type: string
      enum:
        - NAME
        - NAME_FIRST
        - NAME_MIDDLE
        - NAME_LAST
        - ADDRESS
        - ADDRESS_STREET1
        - ADDRESS_STREET2
        - ADDRESS_STREET3
        - ADDRESS_CITY
        - ADDRESS_STATE
        - ADDRESS_COUNTRY
        - ADDRESS_POSTALCODE
        - PHONE
        - PHONE_NUMBER
        - PHONE_COUNTRYCODE
        - EMAIL_ADDRESS
        - UNIQUE_ID
        - DATE
        - STRING
        - PROVIDER_ID
    MappedInputFields:
      type: array
      items:
        $ref: '#/components/schemas/SchemaInputAttribute'
      minItems: 2
      maxItems: 25
      x-insertionOrder: false
    SchemaInputAttribute:
      type: object
      properties:
        FieldName:
          $ref: '#/components/schemas/AttributeName'
        Type:
          $ref: '#/components/schemas/SchemaAttributeType'
        SubType:
          type: string
          description: The subtype of the Attribute. Would be required only when type is PROVIDER_ID
        GroupName:
          $ref: '#/components/schemas/AttributeName'
        MatchKey:
          $ref: '#/components/schemas/AttributeName'
      required:
        - FieldName
        - Type
      additionalProperties: false
    HasWorkflows:
      description: The boolean value that indicates whether or not a SchemaMapping has MatchingWorkflows that are associated with
      type: boolean
    SchemaMapping:
      type: object
      properties:
        SchemaName:
          description: The name of the SchemaMapping
          $ref: '#/components/schemas/EntityName'
        Description:
          description: The description of the SchemaMapping
          $ref: '#/components/schemas/Description'
        MappedInputFields:
          description: The SchemaMapping attributes input
          $ref: '#/components/schemas/MappedInputFields'
        Tags:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 0
          maxItems: 200
          items:
            $ref: '#/components/schemas/Tag'
        SchemaArn:
          $ref: '#/components/schemas/SchemaMappingArn'
        CreatedAt:
          $ref: '#/components/schemas/CreatedAt'
        UpdatedAt:
          $ref: '#/components/schemas/UpdatedAt'
        HasWorkflows:
          $ref: '#/components/schemas/HasWorkflows'
      required:
        - SchemaName
        - MappedInputFields
      x-stackql-resource-name: schema_mapping
      x-stackql-primaryIdentifier:
        - SchemaName
      x-create-only-properties:
        - SchemaName
      x-read-only-properties:
        - SchemaArn
        - CreatedAt
        - UpdatedAt
        - HasWorkflows
      x-required-permissions:
        create:
          - entityresolution:CreateSchemaMapping
          - entityresolution:GetSchemaMapping
          - entityresolution:TagResource
        read:
          - entityresolution:GetSchemaMapping
          - entityresolution:ListTagsForResource
        delete:
          - entityresolution:DeleteSchemaMapping
          - entityresolution:GetSchemaMapping
        update:
          - entityresolution:GetSchemaMapping
          - entityresolution:UpdateSchemaMapping
          - entityresolution:ListTagsForResource
          - entityresolution:TagResource
          - entityresolution:UntagResource
        list:
          - entityresolution:ListSchemaMappings
  x-stackQL-resources:
    id_mapping_workflows:
      name: id_mapping_workflows
      id: awscc.entityresolution.id_mapping_workflows
      x-cfn-schema-name: IdMappingWorkflow
      x-type: list
      x-identifiers:
        - WorkflowName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.WorkflowName') as workflow_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'WorkflowName') as workflow_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
                AND region = 'us-east-1'
    id_mapping_workflow:
      name: id_mapping_workflow
      id: awscc.entityresolution.id_mapping_workflow
      x-cfn-schema-name: IdMappingWorkflow
      x-type: get
      x-identifiers:
        - WorkflowName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.WorkflowName') as workflow_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.InputSourceConfig') as input_source_config,
              JSON_EXTRACT(Properties, '$.OutputSourceConfig') as output_source_config,
              JSON_EXTRACT(Properties, '$.IdMappingTechniques') as id_mapping_techniques,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.WorkflowArn') as workflow_arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
              AND data__Identifier = '<WorkflowName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'WorkflowName') as workflow_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'InputSourceConfig') as input_source_config,
                json_extract_path_text(Properties, 'OutputSourceConfig') as output_source_config,
                json_extract_path_text(Properties, 'IdMappingTechniques') as id_mapping_techniques,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'WorkflowArn') as workflow_arn,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'UpdatedAt') as updated_at
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::IdMappingWorkflow'
                AND data__Identifier = '<WorkflowName>'
                AND region = 'us-east-1'
    matching_workflows:
      name: matching_workflows
      id: awscc.entityresolution.matching_workflows
      x-cfn-schema-name: MatchingWorkflow
      x-type: list
      x-identifiers:
        - WorkflowName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.WorkflowName') as workflow_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'WorkflowName') as workflow_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
                AND region = 'us-east-1'
    matching_workflow:
      name: matching_workflow
      id: awscc.entityresolution.matching_workflow
      x-cfn-schema-name: MatchingWorkflow
      x-type: get
      x-identifiers:
        - WorkflowName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.WorkflowName') as workflow_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.InputSourceConfig') as input_source_config,
              JSON_EXTRACT(Properties, '$.OutputSourceConfig') as output_source_config,
              JSON_EXTRACT(Properties, '$.ResolutionTechniques') as resolution_techniques,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.WorkflowArn') as workflow_arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
              AND data__Identifier = '<WorkflowName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'WorkflowName') as workflow_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'InputSourceConfig') as input_source_config,
                json_extract_path_text(Properties, 'OutputSourceConfig') as output_source_config,
                json_extract_path_text(Properties, 'ResolutionTechniques') as resolution_techniques,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'WorkflowArn') as workflow_arn,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'UpdatedAt') as updated_at
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::MatchingWorkflow'
                AND data__Identifier = '<WorkflowName>'
                AND region = 'us-east-1'
    schema_mappings:
      name: schema_mappings
      id: awscc.entityresolution.schema_mappings
      x-cfn-schema-name: SchemaMapping
      x-type: list
      x-identifiers:
        - SchemaName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SchemaName') as schema_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::SchemaMapping'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SchemaName') as schema_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EntityResolution::SchemaMapping'
                AND region = 'us-east-1'
    schema_mapping:
      name: schema_mapping
      id: awscc.entityresolution.schema_mapping
      x-cfn-schema-name: SchemaMapping
      x-type: get
      x-identifiers:
        - SchemaName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SchemaName') as schema_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.MappedInputFields') as mapped_input_fields,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.SchemaArn') as schema_arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.HasWorkflows') as has_workflows
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::SchemaMapping'
              AND data__Identifier = '<SchemaName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'SchemaName') as schema_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'MappedInputFields') as mapped_input_fields,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'SchemaArn') as schema_arn,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                json_extract_path_text(Properties, 'HasWorkflows') as has_workflows
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EntityResolution::SchemaMapping'
                AND data__Identifier = '<SchemaName>'
                AND region = 'us-east-1'
