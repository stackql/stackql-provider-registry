openapi: 3.0.0
info:
  title: Panorama
  version: 1.0.0
paths: {}
components:
  schemas:
    DefaultRuntimeContextDevice:
      minLength: 1
      pattern: ^[a-zA-Z0-9\-\_]+$
      type: string
      maxLength: 255
    Description:
      minLength: 0
      pattern: ^.*$
      type: string
      maxLength: 255
    DeviceId:
      minLength: 1
      pattern: ^[a-zA-Z0-9\-\_]+$
      type: string
      maxLength: 255
    ApplicationInstanceStatus:
      type: string
      enum:
        - DEPLOYMENT_PENDING
        - DEPLOYMENT_REQUESTED
        - DEPLOYMENT_IN_PROGRESS
        - DEPLOYMENT_ERROR
        - DEPLOYMENT_SUCCEEDED
        - REMOVAL_PENDING
        - REMOVAL_REQUESTED
        - REMOVAL_IN_PROGRESS
        - REMOVAL_FAILED
        - REMOVAL_SUCCEEDED
    ManifestOverridesPayload:
      additionalProperties: false
      type: object
      properties:
        PayloadData:
          $ref: '#/components/schemas/ManifestOverridesPayloadData'
    RuntimeRoleArn:
      minLength: 1
      pattern: ^arn:[a-z0-9][-.a-z0-9]{0,62}:iam::[0-9]{12}:role/.+$
      type: string
      maxLength: 255
    Timestamp:
      type: integer
    Name:
      minLength: 1
      pattern: ^[a-zA-Z0-9\-\_]+$
      type: string
      maxLength: 255
    ApplicationInstanceId:
      minLength: 1
      pattern: ^[a-zA-Z0-9\-\_]+$
      type: string
      maxLength: 255
    ManifestPayloadData:
      minLength: 1
      pattern: ^.+$
      type: string
      maxLength: 51200
    ApplicationInstanceHealthStatus:
      type: string
      enum:
        - RUNNING
        - ERROR
        - NOT_AVAILABLE
    StatusFilter:
      type: string
      enum:
        - DEPLOYMENT_SUCCEEDED
        - DEPLOYMENT_ERROR
        - REMOVAL_SUCCEEDED
        - REMOVAL_FAILED
        - PROCESSING_DEPLOYMENT
        - PROCESSING_REMOVAL
    TagList:
      type: array
      uniqueItems: true
      x-insertionOrder: false
      items:
        $ref: '#/components/schemas/Tag'
    ManifestPayload:
      additionalProperties: false
      type: object
      properties:
        PayloadData:
          $ref: '#/components/schemas/ManifestPayloadData'
    ApplicationInstanceArn:
      minLength: 1
      type: string
      maxLength: 255
    ManifestOverridesPayloadData:
      minLength: 0
      pattern: ^.+$
      type: string
      maxLength: 51200
    ApplicationInstanceStatusDescription:
      minLength: 1
      type: string
      maxLength: 255
    Tag:
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
          pattern: ^.+$
        Value:
          type: string
          minLength: 0
          maxLength: 256
          pattern: ^.+$
      required:
        - Key
        - Value
      additionalProperties: false
    DeviceName:
      minLength: 1
      pattern: ^[a-zA-Z0-9\-\_]+$
      type: string
      maxLength: 255
    ApplicationInstance:
      type: object
      properties:
        DefaultRuntimeContextDeviceName:
          $ref: '#/components/schemas/DeviceName'
        Status:
          $ref: '#/components/schemas/ApplicationInstanceStatus'
        DefaultRuntimeContextDevice:
          $ref: '#/components/schemas/DefaultRuntimeContextDevice'
        Description:
          $ref: '#/components/schemas/Description'
        ApplicationInstanceIdToReplace:
          $ref: '#/components/schemas/ApplicationInstanceId'
        CreatedTime:
          $ref: '#/components/schemas/Timestamp'
        HealthStatus:
          $ref: '#/components/schemas/ApplicationInstanceHealthStatus'
        ManifestOverridesPayload:
          $ref: '#/components/schemas/ManifestOverridesPayload'
        LastUpdatedTime:
          $ref: '#/components/schemas/Timestamp'
        RuntimeRoleArn:
          $ref: '#/components/schemas/RuntimeRoleArn'
        Name:
          $ref: '#/components/schemas/Name'
        ApplicationInstanceId:
          $ref: '#/components/schemas/ApplicationInstanceId'
        StatusDescription:
          $ref: '#/components/schemas/ApplicationInstanceStatusDescription'
        ManifestPayload:
          $ref: '#/components/schemas/ManifestPayload'
        Arn:
          $ref: '#/components/schemas/ApplicationInstanceArn'
        Tags:
          $ref: '#/components/schemas/TagList'
      required:
        - ManifestPayload
        - DefaultRuntimeContextDevice
      x-stackql-resource-name: application_instance
      x-stackql-primaryIdentifier:
        - ApplicationInstanceId
      x-create-only-properties:
        - Name
        - Description
        - ManifestPayload
        - ManifestOverridesPayload
        - RuntimeRoleArn
        - DefaultRuntimeContextDevice
        - ApplicationInstanceIdToReplace
      x-read-only-properties:
        - ApplicationInstanceId
        - Arn
        - Status
        - HealthStatus
        - StatusDescription
        - DefaultRuntimeContextDeviceName
        - CreatedTime
        - LastUpdatedTime
      x-required-permissions:
        read:
          - panorama:DescribeApplicationInstance
          - panorama:DescribeApplicationInstanceDetails
          - panorama:ListTagsForResource
          - s3:ListObjects
          - s3:GetObject
          - s3:GetObjectVersion
        create:
          - panorama:CreateApplicationInstance
          - panorama:ListTagsForResource
          - panorama:TagResource
          - panorama:DescribeApplicationInstance
          - panorama:DescribeApplicationInstanceDetails
          - iam:PassRole
          - s3:ListBucket
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
        update:
          - panorama:ListTagsForResource
          - panorama:TagResource
          - panorama:UntagResource
          - panorama:DescribeApplicationInstance
          - panorama:DescribeApplicationInstanceDetails
          - s3:ListObjects
          - s3:GetObject
          - s3:GetObjectVersion
        list:
          - panorama:ListApplicationInstances
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
        delete:
          - panorama:RemoveApplicationInstance
          - panorama:DescribeApplicationInstance
          - panorama:DescribeApplicationInstanceDetails
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:DeleteObjectVersionTagging
          - s3:ListObjects
          - s3:GetObject
          - s3:GetObjectVersion
    NodePackageName:
      type: string
      minLength: 1
      maxLength: 128
      pattern: ^[a-zA-Z0-9\-\_]+$
    NodePackageId:
      type: string
      minLength: 1
      maxLength: 255
      pattern: ^[a-zA-Z0-9\-\_\/]+$
    NodePackageArn:
      type: string
      minLength: 1
      maxLength: 255
    StorageLocation:
      type: object
      properties:
        Bucket:
          type: string
        RepoPrefixLocation:
          type: string
        GeneratedPrefixLocation:
          type: string
        BinaryPrefixLocation:
          type: string
        ManifestPrefixLocation:
          type: string
      additionalProperties: false
    Package:
      type: object
      properties:
        PackageName:
          $ref: '#/components/schemas/NodePackageName'
        PackageId:
          $ref: '#/components/schemas/NodePackageId'
        Arn:
          $ref: '#/components/schemas/NodePackageArn'
        StorageLocation:
          $ref: '#/components/schemas/StorageLocation'
        CreatedTime:
          $ref: '#/components/schemas/Timestamp'
        Tags:
          $ref: '#/components/schemas/TagList'
      required:
        - PackageName
      x-stackql-resource-name: package
      x-stackql-primaryIdentifier:
        - PackageId
      x-create-only-properties:
        - PackageName
      x-read-only-properties:
        - PackageId
        - Arn
        - CreatedTime
        - StorageLocation/Bucket
        - StorageLocation/RepoPrefixLocation
        - StorageLocation/GeneratedPrefixLocation
        - StorageLocation/BinaryPrefixLocation
        - StorageLocation/ManifestPrefixLocation
      x-required-permissions:
        create:
          - panorama:CreatePackage
          - panorama:ListTagsForResource
          - panorama:TagResource
          - panorama:DescribePackage
          - s3:ListBucket
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
        read:
          - panorama:DescribePackage
          - panorama:ListTagsForResource
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
        update:
          - panorama:DescribePackage
          - panorama:ListTagsForResource
          - panorama:TagResource
          - panorama:UntagResource
          - s3:PutObject
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
        list:
          - panorama:ListPackages
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
        delete:
          - panorama:DeletePackage
          - panorama:DescribePackage
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:DeleteObjectVersionTagging
          - s3:ListObjects
          - s3:ListObjectsV2
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
    PackageOwnerAccount:
      type: string
      minLength: 1
      maxLength: 12
      pattern: ^[0-9a-z\_]+$
    NodePackageVersion:
      type: string
      minLength: 1
      maxLength: 255
      pattern: ^([0-9]+)\.([0-9]+)$
    NodePackagePatchVersion:
      type: string
      minLength: 1
      maxLength: 255
      pattern: ^[a-z0-9]+$
    PackageVersionStatus:
      type: string
      enum:
        - REGISTER_PENDING
        - REGISTER_COMPLETED
        - FAILED
        - DELETING
    PackageVersionStatusDescription:
      type: string
      minLength: 1
      maxLength: 255
    TimeStamp:
      type: integer
    PackageVersion:
      type: object
      properties:
        OwnerAccount:
          $ref: '#/components/schemas/PackageOwnerAccount'
        PackageId:
          $ref: '#/components/schemas/NodePackageId'
        PackageArn:
          $ref: '#/components/schemas/NodePackageArn'
        PackageVersion:
          $ref: '#/components/schemas/NodePackageVersion'
        PatchVersion:
          $ref: '#/components/schemas/NodePackagePatchVersion'
        MarkLatest:
          type: boolean
        IsLatestPatch:
          type: boolean
        PackageName:
          $ref: '#/components/schemas/NodePackageName'
        Status:
          $ref: '#/components/schemas/PackageVersionStatus'
        StatusDescription:
          $ref: '#/components/schemas/PackageVersionStatusDescription'
        RegisteredTime:
          $ref: '#/components/schemas/TimeStamp'
        UpdatedLatestPatchVersion:
          $ref: '#/components/schemas/NodePackagePatchVersion'
      required:
        - PackageId
        - PackageVersion
        - PatchVersion
      x-stackql-resource-name: package_version
      x-stackql-primaryIdentifier:
        - PackageId
        - PackageVersion
        - PatchVersion
      x-create-only-properties:
        - OwnerAccount
        - PackageId
        - PackageVersion
        - PatchVersion
      x-read-only-properties:
        - PackageName
        - PackageArn
        - Status
        - StatusDescription
        - IsLatestPatch
        - RegisteredTime
      x-required-permissions:
        create:
          - panorama:RegisterPackageVersion
          - panorama:DescribePackageVersion
          - s3:ListBucket
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
        read:
          - panorama:DescribePackageVersion
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
        update:
          - panorama:DescribePackageVersion
          - panorama:RegisterPackageVersion
          - s3:ListBucket
          - s3:PutObject
          - s3:GetObject
          - s3:GetObjectVersion
        delete:
          - panorama:DeregisterPackageVersion
          - panorama:DescribePackageVersion
          - s3:DeleteObject
          - s3:DeleteObjectVersion
          - s3:DeleteObjectVersionTagging
          - s3:ListBucket
          - s3:GetObject
          - s3:GetObjectVersion
  x-stackQL-resources:
    application_instances:
      name: application_instances
      id: awscc.panorama.application_instances
      x-cfn-schema-name: ApplicationInstance
      x-type: list
      x-identifiers:
        - ApplicationInstanceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicationInstanceId') as application_instance_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Panorama::ApplicationInstance'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicationInstanceId') as application_instance_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Panorama::ApplicationInstance'
                AND region = 'us-east-1'
    application_instance:
      name: application_instance
      id: awscc.panorama.application_instance
      x-cfn-schema-name: ApplicationInstance
      x-type: get
      x-identifiers:
        - ApplicationInstanceId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DefaultRuntimeContextDeviceName') as default_runtime_context_device_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.DefaultRuntimeContextDevice') as default_runtime_context_device,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ApplicationInstanceIdToReplace') as application_instance_id_to_replace,
              JSON_EXTRACT(Properties, '$.CreatedTime') as created_time,
              JSON_EXTRACT(Properties, '$.HealthStatus') as health_status,
              JSON_EXTRACT(Properties, '$.ManifestOverridesPayload') as manifest_overrides_payload,
              JSON_EXTRACT(Properties, '$.LastUpdatedTime') as last_updated_time,
              JSON_EXTRACT(Properties, '$.RuntimeRoleArn') as runtime_role_arn,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ApplicationInstanceId') as application_instance_id,
              JSON_EXTRACT(Properties, '$.StatusDescription') as status_description,
              JSON_EXTRACT(Properties, '$.ManifestPayload') as manifest_payload,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Panorama::ApplicationInstance'
              AND data__Identifier = '<ApplicationInstanceId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DefaultRuntimeContextDeviceName') as default_runtime_context_device_name,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'DefaultRuntimeContextDevice') as default_runtime_context_device,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'ApplicationInstanceIdToReplace') as application_instance_id_to_replace,
                json_extract_path_text(Properties, 'CreatedTime') as created_time,
                json_extract_path_text(Properties, 'HealthStatus') as health_status,
                json_extract_path_text(Properties, 'ManifestOverridesPayload') as manifest_overrides_payload,
                json_extract_path_text(Properties, 'LastUpdatedTime') as last_updated_time,
                json_extract_path_text(Properties, 'RuntimeRoleArn') as runtime_role_arn,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'ApplicationInstanceId') as application_instance_id,
                json_extract_path_text(Properties, 'StatusDescription') as status_description,
                json_extract_path_text(Properties, 'ManifestPayload') as manifest_payload,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Panorama::ApplicationInstance'
                AND data__Identifier = '<ApplicationInstanceId>'
                AND region = 'us-east-1'
    packages:
      name: packages
      id: awscc.panorama.packages
      x-cfn-schema-name: Package
      x-type: list
      x-identifiers:
        - PackageId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PackageId') as package_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Panorama::Package'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PackageId') as package_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Panorama::Package'
                AND region = 'us-east-1'
    package:
      name: package
      id: awscc.panorama.package
      x-cfn-schema-name: Package
      x-type: get
      x-identifiers:
        - PackageId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PackageName') as package_name,
              JSON_EXTRACT(Properties, '$.PackageId') as package_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.StorageLocation') as storage_location,
              JSON_EXTRACT(Properties, '$.CreatedTime') as created_time,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Panorama::Package'
              AND data__Identifier = '<PackageId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'PackageName') as package_name,
                json_extract_path_text(Properties, 'PackageId') as package_id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'StorageLocation') as storage_location,
                json_extract_path_text(Properties, 'CreatedTime') as created_time,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Panorama::Package'
                AND data__Identifier = '<PackageId>'
                AND region = 'us-east-1'
    package_version:
      name: package_version
      id: awscc.panorama.package_version
      x-cfn-schema-name: PackageVersion
      x-type: get
      x-identifiers:
        - PackageId
        - PackageVersion
        - PatchVersion
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.OwnerAccount') as owner_account,
              JSON_EXTRACT(Properties, '$.PackageId') as package_id,
              JSON_EXTRACT(Properties, '$.PackageArn') as package_arn,
              JSON_EXTRACT(Properties, '$.PackageVersion') as package_version,
              JSON_EXTRACT(Properties, '$.PatchVersion') as patch_version,
              JSON_EXTRACT(Properties, '$.MarkLatest') as mark_latest,
              JSON_EXTRACT(Properties, '$.IsLatestPatch') as is_latest_patch,
              JSON_EXTRACT(Properties, '$.PackageName') as package_name,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.StatusDescription') as status_description,
              JSON_EXTRACT(Properties, '$.RegisteredTime') as registered_time,
              JSON_EXTRACT(Properties, '$.UpdatedLatestPatchVersion') as updated_latest_patch_version
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Panorama::PackageVersion'
              AND data__Identifier = '<PackageId>|<PackageVersion>|<PatchVersion>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'OwnerAccount') as owner_account,
                json_extract_path_text(Properties, 'PackageId') as package_id,
                json_extract_path_text(Properties, 'PackageArn') as package_arn,
                json_extract_path_text(Properties, 'PackageVersion') as package_version,
                json_extract_path_text(Properties, 'PatchVersion') as patch_version,
                json_extract_path_text(Properties, 'MarkLatest') as mark_latest,
                json_extract_path_text(Properties, 'IsLatestPatch') as is_latest_patch,
                json_extract_path_text(Properties, 'PackageName') as package_name,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'StatusDescription') as status_description,
                json_extract_path_text(Properties, 'RegisteredTime') as registered_time,
                json_extract_path_text(Properties, 'UpdatedLatestPatchVersion') as updated_latest_patch_version
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Panorama::PackageVersion'
                AND data__Identifier = '<PackageId>|<PackageVersion>|<PatchVersion>'
                AND region = 'us-east-1'
