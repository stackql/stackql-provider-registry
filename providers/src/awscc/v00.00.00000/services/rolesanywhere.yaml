openapi: 3.0.0
info:
  title: RolesAnywhere
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      type: object
      properties:
        Key:
          type: string
          maxLength: 128
          minLength: 1
        Value:
          type: string
          maxLength: 256
          minLength: 0
      required:
        - Key
        - Value
      additionalProperties: false
    CRL:
      type: object
      properties:
        CrlData:
          type: string
        CrlId:
          type: string
          pattern: '[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}'
        Enabled:
          type: boolean
        Name:
          type: string
        TrustAnchorArn:
          type: string
          pattern: ^arn:aws(-[^:]+)?:rolesanywhere(:.*){2}(:trust-anchor.*)$
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
      required:
        - Name
        - CrlData
      x-stackql-resource-name: crl
      x-stackql-primaryIdentifier:
        - CrlId
      x-read-only-properties:
        - CrlId
      x-required-permissions:
        create:
          - rolesanywhere:ImportCrl
          - rolesanywhere:TagResource
          - rolesanywhere:ListTagsForResource
        read:
          - rolesanywhere:GetCrl
          - rolesanywhere:ListTagsForResource
        update:
          - rolesanywhere:EnableCrl
          - rolesanywhere:DisableCrl
          - rolesanywhere:UpdateCrl
          - rolesanywhere:TagResource
          - rolesanywhere:UntagResource
          - rolesanywhere:ListTagsForResource
        delete:
          - rolesanywhere:DeleteCrl
        list:
          - rolesanywhere:ListCrls
          - rolesanywhere:ListTagsForResource
    Profile:
      type: object
      properties:
        DurationSeconds:
          type: number
          maximum: 43200
          minimum: 900
        Enabled:
          type: boolean
        ManagedPolicyArns:
          type: array
          items:
            type: string
        Name:
          type: string
        ProfileArn:
          type: string
        ProfileId:
          type: string
          pattern: '[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}'
        RequireInstanceProperties:
          type: boolean
        RoleArns:
          type: array
          items:
            type: string
            maxLength: 1011
            minLength: 1
        SessionPolicy:
          type: string
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
      required:
        - Name
        - RoleArns
      x-stackql-resource-name: profile
      x-stackql-primaryIdentifier:
        - ProfileId
      x-read-only-properties:
        - ProfileId
        - ProfileArn
      x-required-permissions:
        create:
          - iam:GetRole
          - iam:GetPolicy
          - iam:PassRole
          - rolesanywhere:CreateProfile
          - rolesanywhere:TagResource
          - rolesanywhere:ListTagsForResource
        read:
          - rolesanywhere:GetProfile
          - rolesanywhere:ListTagsForResource
        update:
          - iam:GetRole
          - iam:GetPolicy
          - iam:PassRole
          - rolesanywhere:UpdateProfile
          - rolesanywhere:EnableProfile
          - rolesanywhere:DisableProfile
          - rolesanywhere:TagResource
          - rolesanywhere:UntagResource
          - rolesanywhere:ListTagsForResource
        delete:
          - rolesanywhere:DeleteProfile
        list:
          - rolesanywhere:ListProfiles
          - rolesanywhere:ListTagsForResource
    NotificationChannel:
      type: string
      enum:
        - ALL
    NotificationEvent:
      type: string
      enum:
        - CA_CERTIFICATE_EXPIRY
        - END_ENTITY_CERTIFICATE_EXPIRY
    NotificationSetting:
      type: object
      properties:
        Enabled:
          type: boolean
        Event:
          $ref: '#/components/schemas/NotificationEvent'
        Threshold:
          type: number
          maximum: 360
          minimum: 1
        Channel:
          $ref: '#/components/schemas/NotificationChannel'
      required:
        - Enabled
        - Event
      additionalProperties: false
    Source:
      type: object
      properties:
        SourceType:
          $ref: '#/components/schemas/TrustAnchorType'
        SourceData:
          $ref: '#/components/schemas/SourceData'
      additionalProperties: false
    SourceData:
      oneOf:
        - type: object
          title: X509CertificateData
          properties:
            X509CertificateData:
              type: string
          required:
            - X509CertificateData
          additionalProperties: false
        - type: object
          title: AcmPcaArn
          properties:
            AcmPcaArn:
              type: string
          required:
            - AcmPcaArn
          additionalProperties: false
    TrustAnchorType:
      type: string
      enum:
        - AWS_ACM_PCA
        - CERTIFICATE_BUNDLE
        - SELF_SIGNED_REPOSITORY
    TrustAnchor:
      type: object
      properties:
        Enabled:
          type: boolean
        Name:
          type: string
        NotificationSettings:
          type: array
          items:
            $ref: '#/components/schemas/NotificationSetting'
          maxItems: 50
          minItems: 0
        Source:
          $ref: '#/components/schemas/Source'
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          maxItems: 200
          minItems: 0
        TrustAnchorId:
          type: string
          pattern: '[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}'
        TrustAnchorArn:
          type: string
          pattern: '[a-f0-9]{8}-([a-z0-9]{4}-){3}[a-z0-9]{12}'
      required:
        - Name
        - Source
      x-stackql-resource-name: trust_anchor
      x-stackql-primaryIdentifier:
        - TrustAnchorId
      x-read-only-properties:
        - TrustAnchorId
        - TrustAnchorArn
      x-required-permissions:
        create:
          - iam:CreateServiceLinkedRole
          - rolesanywhere:CreateTrustAnchor
          - rolesanywhere:TagResource
          - rolesanywhere:ListTagsForResource
        read:
          - rolesanywhere:GetTrustAnchor
          - rolesanywhere:ListTagsForResource
        update:
          - acm-pca:GetCertificateAuthorityCertificate
          - rolesanywhere:ListTagsForResource
          - rolesanywhere:TagResource
          - rolesanywhere:UntagResource
          - rolesanywhere:EnableTrustAnchor
          - rolesanywhere:DisableTrustAnchor
          - rolesanywhere:UpdateTrustAnchor
          - rolesanywhere:GetTrustAnchor
          - rolesanywhere:PutNotificationSettings
          - rolesanywhere:ResetNotificationSettings
        delete:
          - rolesanywhere:DeleteTrustAnchor
        list:
          - rolesanywhere:ListTrustAnchors
          - rolesanywhere:ListTagsForResource
  x-stackQL-resources:
    crls:
      name: crls
      id: awscc.rolesanywhere.crls
      x-cfn-schema-name: CRL
      x-type: list
      x-identifiers:
        - CrlId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CrlId') as crl_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::RolesAnywhere::CRL'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CrlId') as crl_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::RolesAnywhere::CRL'
                AND region = 'us-east-1'
    crl:
      name: crl
      id: awscc.rolesanywhere.crl
      x-cfn-schema-name: CRL
      x-type: get
      x-identifiers:
        - CrlId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CrlData') as crl_data,
              JSON_EXTRACT(Properties, '$.CrlId') as crl_id,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.TrustAnchorArn') as trust_anchor_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::RolesAnywhere::CRL'
              AND data__Identifier = '<CrlId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CrlData') as crl_data,
                json_extract_path_text(Properties, 'CrlId') as crl_id,
                json_extract_path_text(Properties, 'Enabled') as enabled,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'TrustAnchorArn') as trust_anchor_arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::RolesAnywhere::CRL'
                AND data__Identifier = '<CrlId>'
                AND region = 'us-east-1'
    profiles:
      name: profiles
      id: awscc.rolesanywhere.profiles
      x-cfn-schema-name: Profile
      x-type: list
      x-identifiers:
        - ProfileId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ProfileId') as profile_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::RolesAnywhere::Profile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ProfileId') as profile_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::RolesAnywhere::Profile'
                AND region = 'us-east-1'
    profile:
      name: profile
      id: awscc.rolesanywhere.profile
      x-cfn-schema-name: Profile
      x-type: get
      x-identifiers:
        - ProfileId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DurationSeconds') as duration_seconds,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.ManagedPolicyArns') as managed_policy_arns,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ProfileArn') as profile_arn,
              JSON_EXTRACT(Properties, '$.ProfileId') as profile_id,
              JSON_EXTRACT(Properties, '$.RequireInstanceProperties') as require_instance_properties,
              JSON_EXTRACT(Properties, '$.RoleArns') as role_arns,
              JSON_EXTRACT(Properties, '$.SessionPolicy') as session_policy,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::RolesAnywhere::Profile'
              AND data__Identifier = '<ProfileId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DurationSeconds') as duration_seconds,
                json_extract_path_text(Properties, 'Enabled') as enabled,
                json_extract_path_text(Properties, 'ManagedPolicyArns') as managed_policy_arns,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'ProfileArn') as profile_arn,
                json_extract_path_text(Properties, 'ProfileId') as profile_id,
                json_extract_path_text(Properties, 'RequireInstanceProperties') as require_instance_properties,
                json_extract_path_text(Properties, 'RoleArns') as role_arns,
                json_extract_path_text(Properties, 'SessionPolicy') as session_policy,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::RolesAnywhere::Profile'
                AND data__Identifier = '<ProfileId>'
                AND region = 'us-east-1'
    trust_anchors:
      name: trust_anchors
      id: awscc.rolesanywhere.trust_anchors
      x-cfn-schema-name: TrustAnchor
      x-type: list
      x-identifiers:
        - TrustAnchorId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TrustAnchorId') as trust_anchor_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TrustAnchorId') as trust_anchor_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
                AND region = 'us-east-1'
    trust_anchor:
      name: trust_anchor
      id: awscc.rolesanywhere.trust_anchor
      x-cfn-schema-name: TrustAnchor
      x-type: get
      x-identifiers:
        - TrustAnchorId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.NotificationSettings') as notification_settings,
              JSON_EXTRACT(Properties, '$.Source') as source,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TrustAnchorId') as trust_anchor_id,
              JSON_EXTRACT(Properties, '$.TrustAnchorArn') as trust_anchor_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
              AND data__Identifier = '<TrustAnchorId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Enabled') as enabled,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'NotificationSettings') as notification_settings,
                json_extract_path_text(Properties, 'Source') as source,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TrustAnchorId') as trust_anchor_id,
                json_extract_path_text(Properties, 'TrustAnchorArn') as trust_anchor_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::RolesAnywhere::TrustAnchor'
                AND data__Identifier = '<TrustAnchorId>'
                AND region = 'us-east-1'
