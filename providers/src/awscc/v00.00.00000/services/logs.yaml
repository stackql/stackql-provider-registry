openapi: 3.0.0
info:
  title: Logs
  version: 1.0.0
paths: {}
components:
  schemas:
    AccountPolicy:
      type: object
      properties:
        AccountId:
          description: User account id
          type: string
          pattern: ^\d{12}$
        PolicyName:
          description: The name of the account policy
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^[^:*]{1,256}$
        PolicyDocument:
          description: |-
            The body of the policy document you want to use for this topic.

            You can only add one policy per PolicyType.

            The policy must be in JSON string format.

            Length Constraints: Maximum length of 30720
          type: string
          minLength: 1
          maxLength: 30720
        PolicyType:
          description: Type of the policy.
          type: string
          enum:
            - DATA_PROTECTION_POLICY
            - SUBSCRIPTION_FILTER_POLICY
        Scope:
          description: Scope for policy application
          type: string
          enum:
            - ALL
        SelectionCriteria:
          description: Log group  selection criteria to apply policy only to a subset of log groups. SelectionCriteria string can be up to 25KB and cloudwatchlogs determines the length of selectionCriteria by using its UTF-8 bytes
          type: string
      required:
        - PolicyName
        - PolicyType
        - PolicyDocument
      x-stackql-resource-name: account_policy
      x-stackql-primaryIdentifier:
        - AccountId
        - PolicyType
        - PolicyName
      x-create-only-properties:
        - PolicyName
        - PolicyType
      x-read-only-properties:
        - AccountId
      x-required-permissions:
        create:
          - logs:PutAccountPolicy
          - logs:PutDataProtectionPolicy
          - logs:DescribeAccountPolicies
          - logs:CreateLogDelivery
          - s3:REST.PUT.OBJECT
          - firehose:TagDeliveryStream
          - logs:PutSubscriptionFilter
          - logs:DeleteSubscriptionFilter
          - iam:PassRole
        read:
          - logs:DescribeAccountPolicies
        update:
          - logs:PutAccountPolicy
          - logs:PutDataProtectionPolicy
          - logs:DescribeAccountPolicies
          - logs:DeleteAccountPolicy
          - logs:DeleteDataProtectionPolicy
          - logs:CreateLogDelivery
          - logs:PutSubscriptionFilter
          - logs:DeleteSubscriptionFilter
          - s3:REST.PUT.OBJECT
          - firehose:TagDeliveryStream
          - iam:PassRole
        delete:
          - logs:DeleteAccountPolicy
          - logs:DeleteDataProtectionPolicy
          - logs:DescribeAccountPolicies
          - logs:DeleteSubscriptionFilter
          - iam:PassRole
        list:
          - logs:DescribeAccountPolicies
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, - and @.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., :, /, =, +, - and @.'
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
    Arn:
      description: The Amazon Resource Name (ARN) that uniquely identifies this delivery source.
      type: string
      minLength: 16
      maxLength: 2048
      pattern: ^arn:(aws[a-zA-Z-]*)?:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}$
    Delivery:
      type: object
      properties:
        DeliveryId:
          description: The unique ID that identifies this delivery in your account.
          type: string
          minLength: 1
          maxLength: 64
          pattern: ^[0-9A-Za-z]+$
        Arn:
          description: The Amazon Resource Name (ARN) that uniquely identifies this delivery.
          $ref: '#/components/schemas/Arn'
        DeliverySourceName:
          description: The name of the delivery source that is associated with this delivery.
          type: string
          pattern: '[\w-]*$'
          minLength: 1
          maxLength: 60
        DeliveryDestinationArn:
          description: The ARN of the delivery destination that is associated with this delivery.
          $ref: '#/components/schemas/Arn'
        DeliveryDestinationType:
          description: Displays whether the delivery destination associated with this delivery is CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.
          type: string
          minLength: 1
          maxLength: 12
          pattern: ^[0-9A-Za-z]+$
        Tags:
          description: The tags that have been assigned to this delivery.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DeliverySourceName
        - DeliveryDestinationArn
      x-stackql-resource-name: delivery
      x-stackql-primaryIdentifier:
        - DeliveryId
      x-create-only-properties:
        - DeliverySourceName
        - DeliveryDestinationArn
      x-read-only-properties:
        - DeliveryId
        - Arn
        - DeliveryDestinationType
      x-required-permissions:
        create:
          - logs:CreateDelivery
          - logs:GetDelivery
          - logs:DescribeDeliveries
          - logs:ListTagsForResource
          - logs:TagResource
          - logs:GetDeliverySource
          - logs:GetDeliveryDestination
        read:
          - logs:GetDelivery
          - logs:ListTagsForResource
        update:
          - logs:GetDelivery
          - logs:ListTagsForResource
          - logs:TagResource
          - logs:UntagResource
        delete:
          - logs:DeleteDelivery
          - logs:ListTagsForResource
          - logs:UntagResource
        list:
          - logs:DescribeDeliveries
          - logs:ListTagsForResource
    DestinationPolicy:
      type: object
      properties:
        DeliveryDestinationName:
          type: string
          description: The name of the delivery destination to assign this policy to
          minLength: 1
          maxLength: 60
        DeliveryDestinationPolicy:
          type: string
          description: The contents of the policy attached to the delivery destination
          minLength: 1
          maxLength: 51200
      required:
        - DeliveryDestinationName
        - DeliveryDestinationPolicy
      additionalProperties: false
    DeliveryDestination:
      type: object
      properties:
        Name:
          description: The name of this delivery destination.
          type: string
          pattern: '[\w-]*$'
          minLength: 1
          maxLength: 60
        Arn:
          description: The Amazon Resource Name (ARN) that uniquely identifies this delivery destination.
          $ref: '#/components/schemas/Arn'
        DestinationResourceArn:
          description: The ARN of the AWS resource that will receive the logs.
          $ref: '#/components/schemas/Arn'
        Tags:
          description: The tags that have been assigned to this delivery destination.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        DeliveryDestinationType:
          description: Displays whether this delivery destination is CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.
          type: string
          minLength: 1
          maxLength: 12
          pattern: ^[0-9A-Za-z]+$
        DeliveryDestinationPolicy:
          description: |-
            IAM policy that grants permissions to CloudWatch Logs to deliver logs cross-account to a specified destination in this account.

            The policy must be in JSON string format.

            Length Constraints: Maximum length of 51200
          type: object
          items:
            $ref: '#/components/schemas/DestinationPolicy'
      required:
        - Name
      x-stackql-resource-name: delivery_destination
      x-stackql-primaryIdentifier:
        - Name
      x-create-only-properties:
        - Name
        - DestinationResourceArn
      x-read-only-properties:
        - Arn
        - DeliveryDestinationType
      x-required-permissions:
        create:
          - logs:PutDeliveryDestination
          - logs:GetDeliveryDestination
          - logs:ListTagsForResource
          - logs:TagResource
          - logs:UntagResource
          - logs:PutDeliveryDestinationPolicy
          - logs:GetDeliveryDestinationPolicy
        read:
          - logs:GetDeliveryDestination
          - logs:ListTagsForResource
          - logs:GetDeliveryDestinationPolicy
        update:
          - logs:PutDeliveryDestination
          - logs:GetDeliveryDestination
          - logs:ListTagsForResource
          - logs:TagResource
          - logs:UntagResource
          - logs:DeleteDeliveryDestinationPolicy
          - logs:PutDeliveryDestinationPolicy
          - logs:GetDeliveryDestinationPolicy
        delete:
          - logs:DeleteDeliveryDestination
          - logs:DeleteDeliveryDestinationPolicy
        list:
          - logs:DescribeDeliveryDestinations
          - logs:GetDeliveryDestinationPolicy
    DeliverySource:
      type: object
      properties:
        Name:
          description: The unique name of the Log source.
          type: string
          pattern: '[\w-]*$'
          minLength: 1
          maxLength: 60
        Arn:
          description: The Amazon Resource Name (ARN) that uniquely identifies this delivery source.
          $ref: '#/components/schemas/Arn'
        ResourceArns:
          description: This array contains the ARN of the AWS resource that sends logs and is represented by this delivery source. Currently, only one ARN can be in the array.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Arn'
        ResourceArn:
          description: The ARN of the resource that will be sending the logs.
          $ref: '#/components/schemas/Arn'
        Service:
          description: The AWS service that is sending logs.
          type: string
          pattern: '[\w-]*$'
          minLength: 1
          maxLength: 255
        LogType:
          description: The type of logs being delivered. Only mandatory when the resourceArn could match more than one. In such a case, the error message will contain all the possible options.
          type: string
          pattern: '[\w-]*$'
          minLength: 1
          maxLength: 255
        Tags:
          description: The tags that have been assigned to this delivery source.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Name
      x-stackql-resource-name: delivery_source
      x-stackql-primaryIdentifier:
        - Name
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Service
        - ResourceArns
        - Arn
      x-required-permissions:
        create:
          - logs:PutDeliverySource
          - logs:GetDeliverySource
          - logs:ListTagsForResource
          - logs:TagResource
          - logs:AllowVendedLogDeliveryForResource
          - codewhisperer:AllowVendedLogDeliveryForResource
          - autoloop:AllowVendedLogDeliveryForResource
          - workmail:AllowVendedLogDeliveryForResource
        read:
          - logs:GetDeliverySource
          - logs:ListTagsForResource
        update:
          - logs:PutDeliverySource
          - logs:GetDeliverySource
          - logs:ListTagsForResource
          - logs:TagResource
          - logs:UntagResource
        delete:
          - logs:DeleteDeliverySource
        list:
          - logs:DescribeDeliverySources
    Destination:
      type: object
      properties:
        Arn:
          type: string
        DestinationName:
          description: The name of the destination resource
          type: string
          minLength: 1
          maxLength: 512
          pattern: ^[^:*]{1,512}$
        DestinationPolicy:
          description: An IAM policy document that governs which AWS accounts can create subscription filters against this destination.
          type: string
          minLength: 1
        RoleArn:
          description: The ARN of an IAM role that permits CloudWatch Logs to send data to the specified AWS resource
          type: string
          minLength: 1
        TargetArn:
          description: The ARN of the physical target where the log events are delivered (for example, a Kinesis stream)
          type: string
          minLength: 1
      required:
        - DestinationName
        - TargetArn
        - RoleArn
      x-stackql-resource-name: destination
      x-stackql-primaryIdentifier:
        - DestinationName
      x-create-only-properties:
        - DestinationName
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - logs:PutDestination
          - logs:PutDestinationPolicy
          - logs:DescribeDestinations
          - iam:PassRole
        read:
          - logs:DescribeDestinations
        update:
          - logs:PutDestination
          - logs:PutDestinationPolicy
          - logs:DescribeDestinations
          - iam:PassRole
        delete:
          - logs:DeleteDestination
        list:
          - logs:DescribeDestinations
    LogAnomalyDetector:
      type: object
      properties:
        AccountId:
          description: Account ID for owner of detector
          type: string
        KmsKeyId:
          description: The Amazon Resource Name (ARN) of the CMK to use when encrypting log data.
          type: string
          maxLength: 256
        DetectorName:
          description: Name of detector
          type: string
        LogGroupArnList:
          description: List of Arns for the given log group
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
            minLength: 20
            maxLength: 2048
        EvaluationFrequency:
          description: How often log group is evaluated
          type: string
          enum:
            - FIVE_MIN
            - TEN_MIN
            - FIFTEEN_MIN
            - THIRTY_MIN
            - ONE_HOUR
        FilterPattern:
          description: ''
          type: string
          pattern: ''
        AnomalyDetectorStatus:
          description: Current status of detector.
          type: string
        AnomalyVisibilityTime:
          description: ''
          type: number
        CreationTimeStamp:
          description: When detector was created.
          type: number
        LastModifiedTimeStamp:
          description: When detector was lsat modified.
          type: number
        AnomalyDetectorArn:
          description: ARN of LogAnomalyDetector
          type: string
      required: []
      x-stackql-resource-name: log_anomaly_detector
      x-stackql-primaryIdentifier:
        - AnomalyDetectorArn
      x-read-only-properties:
        - AnomalyDetectorArn
        - CreationTimeStamp
        - LastModifiedTimeStamp
        - AnomalyDetectorStatus
      x-required-permissions:
        create:
          - logs:CreateLogAnomalyDetector
        read:
          - logs:GetLogAnomalyDetector
        update:
          - logs:UpdateLogAnomalyDetector
        delete:
          - logs:DeleteLogAnomalyDetector
        list:
          - logs:ListLogAnomalyDetectors
    LogGroup:
      type: string
      pattern: '[\.\-_/#A-Za-z0-9]+'
      minLength: 1
      maxLength: 512
    LogStream:
      type: object
      properties:
        LogGroupName:
          type: string
          description: The name of the log group where the log stream is created.
        LogStreamName:
          type: string
          description: The name of the log stream. The name must be unique wihtin the log group.
      required:
        - LogGroupName
      x-stackql-resource-name: log_stream
      x-stackql-primaryIdentifier:
        - LogGroupName
        - LogStreamName
      x-create-only-properties:
        - LogGroupName
        - LogStreamName
      x-required-permissions:
        create:
          - logs:CreateLogStream
        read:
          - logs:DescribeLogStreams
        delete:
          - logs:DeleteLogStream
        list:
          - logs:DescribeLogStreams
    Dimension:
      description: the key-value pairs that further define a metric.
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
          description: The key of the dimension. Maximum length of 255.
          minLength: 1
          maxLength: 255
        Value:
          type: string
          description: The value of the dimension. Maximum length of 255.
          minLength: 1
          maxLength: 255
      required:
        - Key
        - Value
    MetricTransformation:
      type: object
      properties:
        DefaultValue:
          description: The value to emit when a filter pattern does not match a log event. This value can be null.
          type: number
        MetricName:
          description: The name of the CloudWatch metric. Metric name must be in ASCII format.
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^((?![:*$])[\x00-\x7F]){1,255}
        MetricNamespace:
          x-$comment: Namespaces can be up to 256 characters long; valid characters include 0-9A-Za-z.-_/#
          description: The namespace of the CloudWatch metric.
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^[0-9a-zA-Z\.\-_\/#]{1,256}
        MetricValue:
          description: The value to publish to the CloudWatch metric when a filter pattern matches a log event.
          type: string
          pattern: .{1,100}
          minLength: 1
          maxLength: 100
        Unit:
          description: The unit to assign to the metric. If you omit this, the unit is set as None.
          type: string
          enum:
            - Seconds
            - Microseconds
            - Milliseconds
            - Bytes
            - Kilobytes
            - Megabytes
            - Gigabytes
            - Terabytes
            - Bits
            - Kilobits
            - Megabits
            - Gigabits
            - Terabits
            - Percent
            - Count
            - Bytes/Second
            - Kilobytes/Second
            - Megabytes/Second
            - Gigabytes/Second
            - Terabytes/Second
            - Bits/Second
            - Kilobits/Second
            - Megabits/Second
            - Gigabits/Second
            - Terabits/Second
            - Count/Second
            - None
        Dimensions:
          description: Dimensions are the key-value pairs that further define a metric
          type: array
          uniqueItems: true
          x-insertionOrder: false
          minItems: 1
          maxItems: 3
          items:
            $ref: '#/components/schemas/Dimension'
      required:
        - MetricName
        - MetricNamespace
        - MetricValue
      additionalProperties: false
    MetricFilter:
      type: object
      properties:
        FilterName:
          description: A name for the metric filter.
          type: string
          minLength: 1
          maxLength: 512
          pattern: ^[^:*]{1,512}
        FilterPattern:
          description: Pattern that Logs follows to interpret each entry in a log.
          type: string
          maxLength: 1024
        LogGroupName:
          description: Existing log group that you want to associate with this filter.
          type: string
          minLength: 1
          maxLength: 512
          pattern: ^[.\-_/#A-Za-z0-9]{1,512}
        MetricTransformations:
          description: A collection of information that defines how metric data gets emitted.
          type: array
          minItems: 1
          maxItems: 1
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/MetricTransformation'
      required:
        - FilterPattern
        - LogGroupName
        - MetricTransformations
      x-stackql-resource-name: metric_filter
      x-stackql-primaryIdentifier:
        - LogGroupName
        - FilterName
      x-create-only-properties:
        - FilterName
        - LogGroupName
      x-required-permissions:
        create:
          - logs:PutMetricFilter
          - logs:DescribeMetricFilters
        read:
          - logs:DescribeMetricFilters
        update:
          - logs:PutMetricFilter
          - logs:DescribeMetricFilters
        delete:
          - logs:DeleteMetricFilter
        list:
          - logs:DescribeMetricFilters
    QueryDefinition:
      type: object
      properties:
        Name:
          description: A name for the saved query definition
          type: string
          minLength: 1
          maxLength: 255
        QueryString:
          description: The query string to use for this definition
          type: string
          minLength: 1
          maxLength: 10000
        LogGroupNames:
          description: Optionally define specific log groups as part of your query definition
          type: array
          x-insertionOrder: false
          items:
            description: LogGroup name
            $ref: '#/components/schemas/LogGroup'
        QueryDefinitionId:
          description: Unique identifier of a query definition
          type: string
          minLength: 0
          maxLength: 256
      required:
        - Name
        - QueryString
      x-stackql-resource-name: query_definition
      x-stackql-primaryIdentifier:
        - QueryDefinitionId
      x-read-only-properties:
        - QueryDefinitionId
      x-required-permissions:
        create:
          - logs:PutQueryDefinition
        read:
          - logs:DescribeQueryDefinitions
        update:
          - logs:PutQueryDefinition
        delete:
          - logs:DeleteQueryDefinition
        list:
          - logs:DescribeQueryDefinitions
    ResourcePolicy:
      type: object
      properties:
        PolicyName:
          description: A name for resource policy
          type: string
          pattern: ^([^:*\/]+\/?)*[^:*\/]+$
          minLength: 1
          maxLength: 255
        PolicyDocument:
          description: The policy document
          type: string
          pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
          minLength: 1
          maxLength: 5120
      required:
        - PolicyName
        - PolicyDocument
      x-stackql-resource-name: resource_policy
      x-stackql-primaryIdentifier:
        - PolicyName
      x-create-only-properties:
        - PolicyName
      x-required-permissions:
        create:
          - logs:PutResourcePolicy
          - logs:DescribeResourcePolicies
        read:
          - logs:DescribeResourcePolicies
        update:
          - logs:PutResourcePolicy
          - logs:DescribeResourcePolicies
          - logs:DeleteResourcePolicy
        delete:
          - logs:DeleteResourcePolicy
        list:
          - logs:DescribeResourcePolicies
    SubscriptionFilter:
      type: object
      properties:
        FilterName:
          description: The name of the filter generated by resource.
          type: string
        DestinationArn:
          description: The Amazon Resource Name (ARN) of the destination.
          type: string
        FilterPattern:
          description: The filtering expressions that restrict what gets delivered to the destination AWS resource.
          type: string
        LogGroupName:
          description: Existing log group that you want to associate with this filter.
          type: string
        RoleArn:
          description: The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
          type: string
        Distribution:
          description: The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream.
          type: string
          enum:
            - Random
            - ByLogStream
      required:
        - DestinationArn
        - FilterPattern
        - LogGroupName
      x-stackql-resource-name: subscription_filter
      x-stackql-primaryIdentifier:
        - FilterName
        - LogGroupName
      x-create-only-properties:
        - FilterName
        - LogGroupName
      x-required-permissions:
        create:
          - iam:PassRole
          - logs:PutSubscriptionFilter
          - logs:DescribeSubscriptionFilters
        read:
          - logs:DescribeSubscriptionFilters
        update:
          - iam:PassRole
          - logs:PutSubscriptionFilter
          - logs:DescribeSubscriptionFilters
        delete:
          - logs:DeleteSubscriptionFilter
        list:
          - logs:DescribeSubscriptionFilters
  x-stackQL-resources:
    account_policies:
      name: account_policies
      id: awscc.logs.account_policies
      x-cfn-schema-name: AccountPolicy
      x-type: list
      x-identifiers:
        - AccountId
        - PolicyType
        - PolicyName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id,
              JSON_EXTRACT(Properties, '$.PolicyType') as policy_type,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::AccountPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccountId') as account_id,
                json_extract_path_text(Properties, 'PolicyType') as policy_type,
                json_extract_path_text(Properties, 'PolicyName') as policy_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::AccountPolicy'
                AND region = 'us-east-1'
    account_policy:
      name: account_policy
      id: awscc.logs.account_policy
      x-cfn-schema-name: AccountPolicy
      x-type: get
      x-identifiers:
        - AccountId
        - PolicyType
        - PolicyName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PolicyType') as policy_type,
              JSON_EXTRACT(Properties, '$.Scope') as scope,
              JSON_EXTRACT(Properties, '$.SelectionCriteria') as selection_criteria
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::AccountPolicy'
              AND data__Identifier = '<AccountId>|<PolicyType>|<PolicyName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AccountId') as account_id,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'PolicyType') as policy_type,
                json_extract_path_text(Properties, 'Scope') as scope,
                json_extract_path_text(Properties, 'SelectionCriteria') as selection_criteria
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::AccountPolicy'
                AND data__Identifier = '<AccountId>|<PolicyType>|<PolicyName>'
                AND region = 'us-east-1'
    deliveries:
      name: deliveries
      id: awscc.logs.deliveries
      x-cfn-schema-name: Delivery
      x-type: list
      x-identifiers:
        - DeliveryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DeliveryId') as delivery_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::Delivery'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DeliveryId') as delivery_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::Delivery'
                AND region = 'us-east-1'
    delivery:
      name: delivery
      id: awscc.logs.delivery
      x-cfn-schema-name: Delivery
      x-type: get
      x-identifiers:
        - DeliveryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DeliveryId') as delivery_id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DeliverySourceName') as delivery_source_name,
              JSON_EXTRACT(Properties, '$.DeliveryDestinationArn') as delivery_destination_arn,
              JSON_EXTRACT(Properties, '$.DeliveryDestinationType') as delivery_destination_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::Delivery'
              AND data__Identifier = '<DeliveryId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DeliveryId') as delivery_id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'DeliverySourceName') as delivery_source_name,
                json_extract_path_text(Properties, 'DeliveryDestinationArn') as delivery_destination_arn,
                json_extract_path_text(Properties, 'DeliveryDestinationType') as delivery_destination_type,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::Delivery'
                AND data__Identifier = '<DeliveryId>'
                AND region = 'us-east-1'
    delivery_destinations:
      name: delivery_destinations
      id: awscc.logs.delivery_destinations
      x-cfn-schema-name: DeliveryDestination
      x-type: list
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::DeliveryDestination'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::DeliveryDestination'
                AND region = 'us-east-1'
    delivery_destination:
      name: delivery_destination
      id: awscc.logs.delivery_destination
      x-cfn-schema-name: DeliveryDestination
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DestinationResourceArn') as destination_resource_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.DeliveryDestinationType') as delivery_destination_type,
              JSON_EXTRACT(Properties, '$.DeliveryDestinationPolicy') as delivery_destination_policy
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::DeliveryDestination'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'DestinationResourceArn') as destination_resource_arn,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'DeliveryDestinationType') as delivery_destination_type,
                json_extract_path_text(Properties, 'DeliveryDestinationPolicy') as delivery_destination_policy
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::DeliveryDestination'
                AND data__Identifier = '<Name>'
                AND region = 'us-east-1'
    delivery_sources:
      name: delivery_sources
      id: awscc.logs.delivery_sources
      x-cfn-schema-name: DeliverySource
      x-type: list
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::DeliverySource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::DeliverySource'
                AND region = 'us-east-1'
    delivery_source:
      name: delivery_source
      id: awscc.logs.delivery_source
      x-cfn-schema-name: DeliverySource
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ResourceArns') as resource_arns,
              JSON_EXTRACT(Properties, '$.ResourceArn') as resource_arn,
              JSON_EXTRACT(Properties, '$.Service') as service,
              JSON_EXTRACT(Properties, '$.LogType') as log_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::DeliverySource'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ResourceArns') as resource_arns,
                json_extract_path_text(Properties, 'ResourceArn') as resource_arn,
                json_extract_path_text(Properties, 'Service') as service,
                json_extract_path_text(Properties, 'LogType') as log_type,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::DeliverySource'
                AND data__Identifier = '<Name>'
                AND region = 'us-east-1'
    destinations:
      name: destinations
      id: awscc.logs.destinations
      x-cfn-schema-name: Destination
      x-type: list
      x-identifiers:
        - DestinationName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DestinationName') as destination_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::Destination'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DestinationName') as destination_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::Destination'
                AND region = 'us-east-1'
    destination:
      name: destination
      id: awscc.logs.destination
      x-cfn-schema-name: Destination
      x-type: get
      x-identifiers:
        - DestinationName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DestinationName') as destination_name,
              JSON_EXTRACT(Properties, '$.DestinationPolicy') as destination_policy,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.TargetArn') as target_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::Destination'
              AND data__Identifier = '<DestinationName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'DestinationName') as destination_name,
                json_extract_path_text(Properties, 'DestinationPolicy') as destination_policy,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'TargetArn') as target_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::Destination'
                AND data__Identifier = '<DestinationName>'
                AND region = 'us-east-1'
    log_anomaly_detectors:
      name: log_anomaly_detectors
      id: awscc.logs.log_anomaly_detectors
      x-cfn-schema-name: LogAnomalyDetector
      x-type: list
      x-identifiers:
        - AnomalyDetectorArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AnomalyDetectorArn') as anomaly_detector_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::LogAnomalyDetector'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AnomalyDetectorArn') as anomaly_detector_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::LogAnomalyDetector'
                AND region = 'us-east-1'
    log_anomaly_detector:
      name: log_anomaly_detector
      id: awscc.logs.log_anomaly_detector
      x-cfn-schema-name: LogAnomalyDetector
      x-type: get
      x-identifiers:
        - AnomalyDetectorArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id,
              JSON_EXTRACT(Properties, '$.KmsKeyId') as kms_key_id,
              JSON_EXTRACT(Properties, '$.DetectorName') as detector_name,
              JSON_EXTRACT(Properties, '$.LogGroupArnList') as log_group_arn_list,
              JSON_EXTRACT(Properties, '$.EvaluationFrequency') as evaluation_frequency,
              JSON_EXTRACT(Properties, '$.FilterPattern') as filter_pattern,
              JSON_EXTRACT(Properties, '$.AnomalyDetectorStatus') as anomaly_detector_status,
              JSON_EXTRACT(Properties, '$.AnomalyVisibilityTime') as anomaly_visibility_time,
              JSON_EXTRACT(Properties, '$.CreationTimeStamp') as creation_time_stamp,
              JSON_EXTRACT(Properties, '$.LastModifiedTimeStamp') as last_modified_time_stamp,
              JSON_EXTRACT(Properties, '$.AnomalyDetectorArn') as anomaly_detector_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::LogAnomalyDetector'
              AND data__Identifier = '<AnomalyDetectorArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AccountId') as account_id,
                json_extract_path_text(Properties, 'KmsKeyId') as kms_key_id,
                json_extract_path_text(Properties, 'DetectorName') as detector_name,
                json_extract_path_text(Properties, 'LogGroupArnList') as log_group_arn_list,
                json_extract_path_text(Properties, 'EvaluationFrequency') as evaluation_frequency,
                json_extract_path_text(Properties, 'FilterPattern') as filter_pattern,
                json_extract_path_text(Properties, 'AnomalyDetectorStatus') as anomaly_detector_status,
                json_extract_path_text(Properties, 'AnomalyVisibilityTime') as anomaly_visibility_time,
                json_extract_path_text(Properties, 'CreationTimeStamp') as creation_time_stamp,
                json_extract_path_text(Properties, 'LastModifiedTimeStamp') as last_modified_time_stamp,
                json_extract_path_text(Properties, 'AnomalyDetectorArn') as anomaly_detector_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::LogAnomalyDetector'
                AND data__Identifier = '<AnomalyDetectorArn>'
                AND region = 'us-east-1'
    log_streams:
      name: log_streams
      id: awscc.logs.log_streams
      x-cfn-schema-name: LogStream
      x-type: list
      x-identifiers:
        - LogGroupName
        - LogStreamName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.LogStreamName') as log_stream_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::LogStream'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LogGroupName') as log_group_name,
                json_extract_path_text(Properties, 'LogStreamName') as log_stream_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::LogStream'
                AND region = 'us-east-1'
    log_stream:
      name: log_stream
      id: awscc.logs.log_stream
      x-cfn-schema-name: LogStream
      x-type: get
      x-identifiers:
        - LogGroupName
        - LogStreamName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.LogStreamName') as log_stream_name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::LogStream'
              AND data__Identifier = '<LogGroupName>|<LogStreamName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'LogGroupName') as log_group_name,
                json_extract_path_text(Properties, 'LogStreamName') as log_stream_name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::LogStream'
                AND data__Identifier = '<LogGroupName>|<LogStreamName>'
                AND region = 'us-east-1'
    metric_filters:
      name: metric_filters
      id: awscc.logs.metric_filters
      x-cfn-schema-name: MetricFilter
      x-type: list
      x-identifiers:
        - LogGroupName
        - FilterName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.FilterName') as filter_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::MetricFilter'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LogGroupName') as log_group_name,
                json_extract_path_text(Properties, 'FilterName') as filter_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::MetricFilter'
                AND region = 'us-east-1'
    metric_filter:
      name: metric_filter
      id: awscc.logs.metric_filter
      x-cfn-schema-name: MetricFilter
      x-type: get
      x-identifiers:
        - LogGroupName
        - FilterName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FilterName') as filter_name,
              JSON_EXTRACT(Properties, '$.FilterPattern') as filter_pattern,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.MetricTransformations') as metric_transformations
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::MetricFilter'
              AND data__Identifier = '<LogGroupName>|<FilterName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FilterName') as filter_name,
                json_extract_path_text(Properties, 'FilterPattern') as filter_pattern,
                json_extract_path_text(Properties, 'LogGroupName') as log_group_name,
                json_extract_path_text(Properties, 'MetricTransformations') as metric_transformations
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::MetricFilter'
                AND data__Identifier = '<LogGroupName>|<FilterName>'
                AND region = 'us-east-1'
    query_definitions:
      name: query_definitions
      id: awscc.logs.query_definitions
      x-cfn-schema-name: QueryDefinition
      x-type: list
      x-identifiers:
        - QueryDefinitionId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.QueryDefinitionId') as query_definition_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::QueryDefinition'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'QueryDefinitionId') as query_definition_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::QueryDefinition'
                AND region = 'us-east-1'
    query_definition:
      name: query_definition
      id: awscc.logs.query_definition
      x-cfn-schema-name: QueryDefinition
      x-type: get
      x-identifiers:
        - QueryDefinitionId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.QueryString') as query_string,
              JSON_EXTRACT(Properties, '$.LogGroupNames') as log_group_names,
              JSON_EXTRACT(Properties, '$.QueryDefinitionId') as query_definition_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::QueryDefinition'
              AND data__Identifier = '<QueryDefinitionId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'QueryString') as query_string,
                json_extract_path_text(Properties, 'LogGroupNames') as log_group_names,
                json_extract_path_text(Properties, 'QueryDefinitionId') as query_definition_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::QueryDefinition'
                AND data__Identifier = '<QueryDefinitionId>'
                AND region = 'us-east-1'
    resource_policies:
      name: resource_policies
      id: awscc.logs.resource_policies
      x-cfn-schema-name: ResourcePolicy
      x-type: list
      x-identifiers:
        - PolicyName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::ResourcePolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyName') as policy_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::ResourcePolicy'
                AND region = 'us-east-1'
    resource_policy:
      name: resource_policy
      id: awscc.logs.resource_policy
      x-cfn-schema-name: ResourcePolicy
      x-type: get
      x-identifiers:
        - PolicyName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::ResourcePolicy'
              AND data__Identifier = '<PolicyName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::ResourcePolicy'
                AND data__Identifier = '<PolicyName>'
                AND region = 'us-east-1'
    subscription_filters:
      name: subscription_filters
      id: awscc.logs.subscription_filters
      x-cfn-schema-name: SubscriptionFilter
      x-type: list
      x-identifiers:
        - FilterName
        - LogGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FilterName') as filter_name,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::SubscriptionFilter'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FilterName') as filter_name,
                json_extract_path_text(Properties, 'LogGroupName') as log_group_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Logs::SubscriptionFilter'
                AND region = 'us-east-1'
    subscription_filter:
      name: subscription_filter
      id: awscc.logs.subscription_filter
      x-cfn-schema-name: SubscriptionFilter
      x-type: get
      x-identifiers:
        - FilterName
        - LogGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FilterName') as filter_name,
              JSON_EXTRACT(Properties, '$.DestinationArn') as destination_arn,
              JSON_EXTRACT(Properties, '$.FilterPattern') as filter_pattern,
              JSON_EXTRACT(Properties, '$.LogGroupName') as log_group_name,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Distribution') as distribution
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::SubscriptionFilter'
              AND data__Identifier = '<FilterName>|<LogGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FilterName') as filter_name,
                json_extract_path_text(Properties, 'DestinationArn') as destination_arn,
                json_extract_path_text(Properties, 'FilterPattern') as filter_pattern,
                json_extract_path_text(Properties, 'LogGroupName') as log_group_name,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'Distribution') as distribution
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Logs::SubscriptionFilter'
                AND data__Identifier = '<FilterName>|<LogGroupName>'
                AND region = 'us-east-1'
