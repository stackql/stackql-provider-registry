openapi: 3.0.0
info:
  title: ElasticLoadBalancingV2
  version: 1.0.0
paths: {}
components:
  schemas:
    MutualAuthentication:
      type: object
      additionalProperties: false
      properties:
        Mode:
          type: string
          description: The client certificate handling method. Options are ``off``, ``passthrough`` or ``verify``. The default value is ``off``.
        TrustStoreArn:
          type: string
          description: The Amazon Resource Name (ARN) of the trust store.
        IgnoreClientCertificateExpiry:
          type: boolean
          description: Indicates whether expired client certificates are ignored.
      description: Specifies the configuration information for mutual authentication.
    FixedResponseConfig:
      type: object
      additionalProperties: false
      properties:
        ContentType:
          type: string
        StatusCode:
          type: string
        MessageBody:
          type: string
      required:
        - StatusCode
    TargetGroupTuple:
      type: object
      additionalProperties: false
      properties:
        TargetGroupArn:
          type: string
        Weight:
          type: integer
    Action:
      type: object
      additionalProperties: false
      properties:
        Order:
          type: integer
        TargetGroupArn:
          type: string
        FixedResponseConfig:
          $ref: '#/components/schemas/FixedResponseConfig'
        AuthenticateCognitoConfig:
          $ref: '#/components/schemas/AuthenticateCognitoConfig'
        Type:
          type: string
        RedirectConfig:
          $ref: '#/components/schemas/RedirectConfig'
        ForwardConfig:
          $ref: '#/components/schemas/ForwardConfig'
        AuthenticateOidcConfig:
          $ref: '#/components/schemas/AuthenticateOidcConfig'
      required:
        - Type
    AuthenticateCognitoConfig:
      type: object
      additionalProperties: false
      properties:
        OnUnauthenticatedRequest:
          type: string
        UserPoolClientId:
          type: string
        UserPoolDomain:
          type: string
        SessionTimeout:
          type: integer
        Scope:
          type: string
        SessionCookieName:
          type: string
        UserPoolArn:
          type: string
        AuthenticationRequestExtraParams:
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
      required:
        - UserPoolClientId
        - UserPoolDomain
        - UserPoolArn
    RedirectConfig:
      type: object
      additionalProperties: false
      properties:
        Path:
          type: string
        Query:
          type: string
        Port:
          type: string
        Host:
          type: string
        Protocol:
          type: string
        StatusCode:
          type: string
      required:
        - StatusCode
    TargetGroupStickinessConfig:
      type: object
      additionalProperties: false
      properties:
        Enabled:
          type: boolean
        DurationSeconds:
          type: integer
    ForwardConfig:
      type: object
      additionalProperties: false
      properties:
        TargetGroupStickinessConfig:
          $ref: '#/components/schemas/TargetGroupStickinessConfig'
        TargetGroups:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TargetGroupTuple'
    AuthenticateOidcConfig:
      type: object
      additionalProperties: false
      properties:
        OnUnauthenticatedRequest:
          type: string
        TokenEndpoint:
          type: string
        SessionTimeout:
          type: integer
        Scope:
          type: string
        Issuer:
          type: string
        ClientSecret:
          type: string
        UserInfoEndpoint:
          type: string
        ClientId:
          type: string
        AuthorizationEndpoint:
          type: string
        SessionCookieName:
          type: string
        UseExistingClientSecret:
          type: boolean
        AuthenticationRequestExtraParams:
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9]+':
              type: string
      required:
        - TokenEndpoint
        - Issuer
        - UserInfoEndpoint
        - ClientId
        - AuthorizationEndpoint
    Certificate:
      type: object
      additionalProperties: false
      properties:
        CertificateArn:
          type: string
          description: The Amazon Resource Name (ARN) of the certificate.
      description: Specifies an SSL server certificate to use as the default certificate for a secure listener.
    Listener:
      type: object
      properties:
        SslPolicy:
          type: string
          description: |-
            [HTTPS and TLS listeners] The security policy that defines which protocols and ciphers are supported.
             For more information, see [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies) in the *Application Load Balancers Guide* and [Security policies](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies) in the *Network Load Balancers Guide*.
        LoadBalancerArn:
          type: string
          description: The Amazon Resource Name (ARN) of the load balancer.
        DefaultActions:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Action'
          description: |-
            The actions for the default rule. You cannot define a condition for a default rule.
             To create additional rules for an Application Load Balancer, use [AWS::ElasticLoadBalancingV2::ListenerRule](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html).
        Port:
          type: integer
          description: The port on which the load balancer is listening. You cannot specify a port for a Gateway Load Balancer.
        Certificates:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Certificate'
          description: |-
            The default SSL server certificate for a secure listener. You must provide exactly one certificate if the listener protocol is HTTPS or TLS.
             To create a certificate list for a secure listener, use [AWS::ElasticLoadBalancingV2::ListenerCertificate](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenercertificate.html).
        Protocol:
          type: string
          description: The protocol for connections from clients to the load balancer. For Application Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You canâ€™t specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot specify a protocol for a Gateway Load Balancer.
        ListenerArn:
          type: string
          description: ''
        AlpnPolicy:
          type: array
          items:
            type: string
          description: '[TLS listener] The name of the Application-Layer Protocol Negotiation (ALPN) policy.'
        MutualAuthentication:
          $ref: '#/components/schemas/MutualAuthentication'
          description: The mutual authentication configuration information.
      required:
        - LoadBalancerArn
        - DefaultActions
      x-stackql-resource-name: listener
      x-stackql-primaryIdentifier:
        - ListenerArn
      x-create-only-properties:
        - LoadBalancerArn
      x-read-only-properties:
        - ListenerArn
      x-required-permissions:
        create:
          - elasticloadbalancing:CreateListener
          - elasticloadbalancing:DescribeListeners
          - cognito-idp:DescribeUserPoolClient
        delete:
          - elasticloadbalancing:DeleteListener
          - elasticloadbalancing:DescribeListeners
        list:
          - elasticloadbalancing:DescribeListeners
        read:
          - elasticloadbalancing:DescribeListeners
        update:
          - elasticloadbalancing:ModifyListener
          - elasticloadbalancing:DescribeListeners
          - cognito-idp:DescribeUserPoolClient
    RuleCondition:
      type: object
      additionalProperties: false
      properties:
        Field:
          type: string
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        HttpRequestMethodConfig:
          $ref: '#/components/schemas/HttpRequestMethodConfig'
        PathPatternConfig:
          $ref: '#/components/schemas/PathPatternConfig'
        HttpHeaderConfig:
          $ref: '#/components/schemas/HttpHeaderConfig'
        SourceIpConfig:
          $ref: '#/components/schemas/SourceIpConfig'
        HostHeaderConfig:
          $ref: '#/components/schemas/HostHeaderConfig'
        QueryStringConfig:
          $ref: '#/components/schemas/QueryStringConfig'
    QueryStringConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/QueryStringKeyValue'
    PathPatternConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
    HttpHeaderConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        HttpHeaderName:
          type: string
    QueryStringKeyValue:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
    HostHeaderConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
    HttpRequestMethodConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
    SourceIpConfig:
      type: object
      additionalProperties: false
      properties:
        Values:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
    ListenerRule:
      type: object
      properties:
        ListenerArn:
          type: string
        RuleArn:
          type: string
        Actions:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Action'
        Priority:
          type: integer
        Conditions:
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/RuleCondition'
        IsDefault:
          type: boolean
      required:
        - Actions
        - Priority
        - Conditions
      x-stackql-resource-name: listener_rule
      x-stackql-primaryIdentifier:
        - RuleArn
      x-create-only-properties:
        - ListenerArn
      x-read-only-properties:
        - RuleArn
        - IsDefault
      x-required-permissions:
        create:
          - elasticloadbalancing:CreateRule
          - elasticloadbalancing:DescribeRules
          - cognito-idp:DescribeUserPoolClient
        delete:
          - elasticloadbalancing:DeleteRule
          - elasticloadbalancing:DescribeRules
        list:
          - elasticloadbalancing:DescribeRules
        read:
          - elasticloadbalancing:DescribeRules
        update:
          - elasticloadbalancing:ModifyRule
          - elasticloadbalancing:SetRulePriorities
          - elasticloadbalancing:DescribeRules
    SubnetMapping:
      type: object
      additionalProperties: false
      properties:
        SubnetId:
          type: string
          description: The ID of the subnet.
        AllocationId:
          type: string
          description: '[Network Load Balancers] The allocation ID of the Elastic IP address for an internet-facing load balancer.'
        PrivateIPv4Address:
          type: string
          description: '[Network Load Balancers] The private IPv4 address for an internal load balancer.'
        IPv6Address:
          type: string
          description: '[Network Load Balancers] The IPv6 address.'
      required:
        - SubnetId
      description: Specifies a subnet for a load balancer.
    LoadBalancerAttribute:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
          description: The value of the attribute.
        Key:
          type: string
          description: |-
            The name of the attribute.
             The following attributes are supported by all load balancers:
              +   ``deletion_protection.enabled`` - Indicates whether deletion protection is enabled. The value is ``true`` or ``false``. The default is ``false``.
              +   ``load_balancing.cross_zone.enabled`` - Indicates whether cross-zone load balancing is enabled. The possible values are ``true`` and ``false``. The default for Network Load Balancers and Gateway Load Balancers is ``false``. The default for Application Load Balancers is ``true``, and cannot be changed.
              
             The following attributes are supported by both Application Load Balancers and Network Load Balancers:
              +   ``access_logs.s3.enabled`` - Indicates whether access logs are enabled. The value is ``true`` or ``false``. The default is ``false``.
              +   ``access_logs.s3.bucket`` - The name of the S3 bucket for the access logs. This attribute is required if access logs are enabled. The bucket must exist in the same region as the load balancer and h
      description: Specifies an attribute for an Application Load Balancer, a Network Load Balancer, or a Gateway Load Balancer.
    Tag:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    LoadBalancer:
      type: object
      properties:
        IpAddressType:
          type: string
          description: The IP address type. The possible values are ``ipv4`` (for IPv4 addresses) and ``dualstack`` (for IPv4 and IPv6 addresses). You canâ€™t specify ``dualstack`` for a load balancer with a UDP or TCP_UDP listener.
        SecurityGroups:
          type: array
          description: '[Application Load Balancers and Network Load Balancers] The IDs of the security groups for the load balancer.'
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        LoadBalancerAttributes:
          type: array
          description: The load balancer attributes.
          uniqueItems: true
          x-insertionOrder: false
          x-arrayType: AttributeList
          items:
            $ref: '#/components/schemas/LoadBalancerAttribute'
        Scheme:
          type: string
          description: |-
            The nodes of an Internet-facing load balancer have public IP addresses. The DNS name of an Internet-facing load balancer is publicly resolvable to the public IP addresses of the nodes. Therefore, Internet-facing load balancers can route requests from clients over the internet.
             The nodes of an internal load balancer have only private IP addresses. The DNS name of an internal load balancer is publicly resolvable to the private IP addresses of the nodes. Therefore, internal load balancers can route requests only from clients with access to the VPC for the load balancer.
             The default is an Internet-facing load balancer.
             You cannot specify a scheme for a Gateway Load Balancer.
        DNSName:
          type: string
          description: ''
        Name:
          type: string
          description: |-
            The name of the load balancer. This name must be unique per region per account, can have a maximum of 32 characters, must contain only alphanumeric characters or hyphens, must not begin or end with a hyphen, and must not begin with "internal-".
             If you don't specify a name, AWS CloudFormation generates a unique physical ID for the load balancer. If you specify a name, you cannot perform updates that require replacement of this resource, but you can perform other updates. To replace the resource, specify a new name.
        LoadBalancerName:
          type: string
          description: ''
        LoadBalancerFullName:
          type: string
          description: ''
        Subnets:
          type: array
          description: |-
            The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both. To specify an Elastic IP address, specify subnet mappings instead of subnets.
             [Application Load Balancers] You must specify subnets from at least two Availability Zones.
             [Application Load Balancers on Outposts] You must specify one Outpost subnet.
             [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.
             [Network Load Balancers] You can specify subnets from one or more Availability Zones.
             [Gateway Load Balancers] You can specify subnets from one or more Availability Zones.
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Type:
          type: string
          description: The type of load balancer. The default is ``application``.
        CanonicalHostedZoneID:
          type: string
          description: ''
        Tags:
          type: array
          description: The tags to assign to the load balancer.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        LoadBalancerArn:
          type: string
          description: ''
        SubnetMappings:
          type: array
          description: |-
            The IDs of the public subnets. You can specify only one subnet per Availability Zone. You must specify either subnets or subnet mappings, but not both.
             [Application Load Balancers] You must specify subnets from at least two Availability Zones. You cannot specify Elastic IP addresses for your subnets.
             [Application Load Balancers on Outposts] You must specify one Outpost subnet.
             [Application Load Balancers on Local Zones] You can specify subnets from one or more Local Zones.
             [Network Load Balancers] You can specify subnets from one or more Availability Zones. You can specify one Elastic IP address per subnet if you need static IP addresses for your internet-facing load balancer. For internal load balancers, you can specify one private IP address per subnet from the IPv4 range of the subnet. For internet-facing load balancer, you can specify one IPv6 address per subnet.
             [Gateway Load Balancers] You can specify subnets from one or more Availability Zones. You cannot specify Elastic IP
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SubnetMapping'
        EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic:
          type: string
          description: Indicates whether to evaluate inbound security group rules for traffic sent to a Network Load Balancer through privatelink.
      x-stackql-resource-name: load_balancer
      x-stackql-primaryIdentifier:
        - LoadBalancerArn
      x-create-only-properties:
        - Name
        - Type
        - Scheme
      x-read-only-properties:
        - LoadBalancerName
        - LoadBalancerFullName
        - CanonicalHostedZoneID
        - LoadBalancerArn
        - DNSName
      x-required-permissions:
        create:
          - elasticloadbalancing:CreateLoadBalancer
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:ModifyLoadBalancerAttributes
          - elasticloadbalancing:AddTags
        delete:
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DeleteLoadBalancer
        list:
          - elasticloadbalancing:DescribeLoadBalancers
        read:
          - elasticloadbalancing:DescribeLoadBalancers
          - elasticloadbalancing:DescribeLoadBalancerAttributes
          - elasticloadbalancing:DescribeTags
        update:
          - elasticloadbalancing:ModifyLoadBalancerAttributes
          - elasticloadbalancing:SetSubnets
          - elasticloadbalancing:SetIpAddressType
          - elasticloadbalancing:SetSecurityGroups
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:RemoveTags
    Matcher:
      type: object
      additionalProperties: false
      properties:
        GrpcCode:
          type: string
          description: You can specify values between 0 and 99. You can specify multiple values, or a range of values. The default value is 12.
        HttpCode:
          type: string
          description: 'For Application Load Balancers, you can specify values between 200 and 499, and the default value is 200. You can specify multiple values or a range of values. '
    TargetDescription:
      type: object
      additionalProperties: false
      properties:
        AvailabilityZone:
          type: string
          description: An Availability Zone or all. This determines whether the target receives traffic from the load balancer nodes in the specified Availability Zone or from all enabled Availability Zones for the load balancer.
        Id:
          type: string
          description: 'The ID of the target. If the target type of the target group is instance, specify an instance ID. If the target type is ip, specify an IP address. If the target type is lambda, specify the ARN of the Lambda function. If the target type is alb, specify the ARN of the Application Load Balancer target. '
        Port:
          type: integer
          description: The port on which the target is listening. If the target group protocol is GENEVE, the supported port is 6081. If the target type is alb, the targeted Application Load Balancer must have at least one listener whose port matches the target group port. Not used if the target is a Lambda function.
      required:
        - Id
    TargetGroupAttribute:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
          description: The name of the attribute.
        Key:
          type: string
          description: The value of the attribute.
    TargetGroup:
      type: object
      properties:
        IpAddressType:
          type: string
          description: 'The type of IP address used for this target group. The possible values are ipv4 and ipv6. '
        HealthCheckIntervalSeconds:
          type: integer
          description: The approximate amount of time, in seconds, between health checks of an individual target.
        LoadBalancerArns:
          type: array
          x-insertionOrder: false
          description: The Amazon Resource Names (ARNs) of the load balancers that route traffic to this target group.
          uniqueItems: false
          items:
            type: string
        Matcher:
          $ref: '#/components/schemas/Matcher'
          description: '[HTTP/HTTPS health checks] The HTTP or gRPC codes to use when checking for a successful response from a target.'
        HealthCheckPath:
          type: string
          description: '[HTTP/HTTPS health checks] The destination for health checks on the targets. [HTTP1 or HTTP2 protocol version] The ping path. The default is /. [GRPC protocol version] The path of a custom health check method with the format /package.service/method. The default is /AWS.ALB/healthcheck.'
        Port:
          type: integer
          description: The port on which the targets receive traffic. This port is used unless you specify a port override when registering the target. If the target is a Lambda function, this parameter does not apply. If the protocol is GENEVE, the supported port is 6081.
        Targets:
          type: array
          description: The targets.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TargetDescription'
        HealthCheckEnabled:
          type: boolean
          description: Indicates whether health checks are enabled. If the target type is lambda, health checks are disabled by default but can be enabled. If the target type is instance, ip, or alb, health checks are always enabled and cannot be disabled.
        ProtocolVersion:
          type: string
          description: '[HTTP/HTTPS protocol] The protocol version. The possible values are GRPC, HTTP1, and HTTP2.'
        UnhealthyThresholdCount:
          type: integer
          description: The number of consecutive health check failures required before considering a target unhealthy.
        HealthCheckTimeoutSeconds:
          type: integer
          description: The amount of time, in seconds, during which no response from a target means a failed health check.
        Name:
          type: string
          description: The name of the target group.
        VpcId:
          type: string
          description: The identifier of the virtual private cloud (VPC). If the target is a Lambda function, this parameter does not apply.
        TargetGroupFullName:
          type: string
          description: The full name of the target group.
        HealthyThresholdCount:
          type: integer
          description: 'The number of consecutive health checks successes required before considering an unhealthy target healthy. '
        HealthCheckProtocol:
          type: string
          description: 'The protocol the load balancer uses when performing health checks on targets. '
        TargetGroupAttributes:
          type: array
          x-arrayType: AttributeList
          description: The attributes.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TargetGroupAttribute'
        TargetType:
          type: string
          description: The type of target that you must specify when registering targets with this target group. You can't specify targets for a target group using more than one target type.
        HealthCheckPort:
          type: string
          description: 'The port the load balancer uses when performing health checks on targets. '
        TargetGroupArn:
          type: string
          description: The ARN of the Target Group
        Protocol:
          type: string
          description: The protocol to use for routing traffic to the targets.
        TargetGroupName:
          type: string
          description: The name of the target group.
        Tags:
          type: array
          description: The tags.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: target_group
      x-stackql-primaryIdentifier:
        - TargetGroupArn
      x-create-only-properties:
        - TargetType
        - ProtocolVersion
        - Port
        - Name
        - VpcId
        - Protocol
        - IpAddressType
      x-read-only-properties:
        - LoadBalancerArns
        - TargetGroupArn
        - TargetGroupName
        - TargetGroupFullName
      x-required-permissions:
        create:
          - elasticloadbalancing:CreateTargetGroup
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:RegisterTargets
          - elasticloadbalancing:ModifyTargetGroupAttributes
          - elasticloadbalancing:DescribeTargetHealth
          - elasticloadbalancing:AddTags
        delete:
          - elasticloadbalancing:DeleteTargetGroup
          - elasticloadbalancing:DescribeTargetGroups
        list:
          - elasticloadbalancing:DescribeTargetGroups
        read:
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:DescribeTargetGroupAttributes
          - elasticloadbalancing:DescribeTargetHealth
          - elasticloadbalancing:DescribeTags
        update:
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:ModifyTargetGroup
          - elasticloadbalancing:ModifyTargetGroupAttributes
          - elasticloadbalancing:RegisterTargets
          - elasticloadbalancing:DescribeTargetHealth
          - elasticloadbalancing:DeregisterTargets
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:RemoveTags
    TrustStore:
      type: object
      properties:
        Name:
          type: string
          description: The name of the trust store.
        CaCertificatesBundleS3Bucket:
          type: string
          description: The name of the S3 bucket to fetch the CA certificate bundle from.
        CaCertificatesBundleS3Key:
          type: string
          description: The name of the S3 object to fetch the CA certificate bundle from.
        CaCertificatesBundleS3ObjectVersion:
          type: string
          description: The version of the S3 bucket that contains the CA certificate bundle.
        Status:
          type: string
          description: The status of the trust store, could be either of ACTIVE or CREATING.
        NumberOfCaCertificates:
          type: integer
          description: The number of certificates associated with the trust store.
        Tags:
          type: array
          description: The tags to assign to the trust store.
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        TrustStoreArn:
          type: string
          description: The Amazon Resource Name (ARN) of the trust store.
      x-stackql-resource-name: trust_store
      x-stackql-primaryIdentifier:
        - TrustStoreArn
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - TrustStoreArn
        - Status
        - NumberOfCaCertificates
      x-required-permissions:
        create:
          - elasticloadbalancing:CreateTrustStore
          - elasticloadbalancing:DescribeTrustStores
          - elasticloadbalancing:AddTags
          - s3:GetObject
          - s3:GetObjectVersion
        delete:
          - elasticloadbalancing:DescribeTrustStores
          - elasticloadbalancing:DeleteTrustStore
        list:
          - elasticloadbalancing:DescribeTrustStores
          - s3:GetObject
          - s3:GetObjectVersion
        read:
          - elasticloadbalancing:DescribeTrustStores
          - elasticloadbalancing:DescribeTags
        update:
          - elasticloadbalancing:ModifyTrustStore
          - elasticloadbalancing:AddTags
          - elasticloadbalancing:RemoveTags
          - s3:GetObject
          - s3:GetObjectVersion
    RevocationId:
      type: string
    RevocationContent:
      type: object
      additionalProperties: false
      properties:
        S3Bucket:
          type: string
        S3Key:
          type: string
        S3ObjectVersion:
          type: string
        RevocationType:
          type: string
    TrustStoreRevocation:
      type: object
      properties:
        RevocationContents:
          type: array
          description: The attributes required to create a trust store revocation.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/RevocationContent'
        TrustStoreArn:
          type: string
          description: The Amazon Resource Name (ARN) of the trust store.
        RevocationId:
          type: integer
          format: int64
          description: The ID associated with the revocation.
        TrustStoreRevocations:
          type: array
          description: The data associated with a trust store revocation
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/TrustStoreRevocation'
      x-stackql-resource-name: trust_store_revocation
      x-stackql-primaryIdentifier:
        - RevocationId
        - TrustStoreArn
      x-create-only-properties:
        - TrustStoreArn
        - RevocationContents
      x-read-only-properties:
        - RevocationId
        - TrustStoreRevocations
      x-required-permissions:
        create:
          - elasticloadbalancing:AddTrustStoreRevocations
          - elasticloadbalancing:DescribeTrustStoreRevocations
          - s3:GetObject
          - s3:GetObjectVersion
        delete:
          - elasticloadbalancing:DescribeTrustStoreRevocations
          - elasticloadbalancing:RemoveTrustStoreRevocations
        list:
          - elasticloadbalancing:DescribeTrustStoreRevocations
        read:
          - elasticloadbalancing:DescribeTrustStoreRevocations
  x-stackQL-resources:
    listeners:
      name: listeners
      id: awscc.elasticloadbalancingv2.listeners
      x-cfn-schema-name: Listener
      x-type: list
      x-identifiers:
        - ListenerArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ListenerArn') as listener_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ListenerArn') as listener_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
                AND region = 'us-east-1'
    listener:
      name: listener
      id: awscc.elasticloadbalancingv2.listener
      x-cfn-schema-name: Listener
      x-type: get
      x-identifiers:
        - ListenerArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SslPolicy') as ssl_policy,
              JSON_EXTRACT(Properties, '$.LoadBalancerArn') as load_balancer_arn,
              JSON_EXTRACT(Properties, '$.DefaultActions') as default_actions,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Certificates') as certificates,
              JSON_EXTRACT(Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(Properties, '$.ListenerArn') as listener_arn,
              JSON_EXTRACT(Properties, '$.AlpnPolicy') as alpn_policy,
              JSON_EXTRACT(Properties, '$.MutualAuthentication') as mutual_authentication
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
              AND data__Identifier = '<ListenerArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'SslPolicy') as ssl_policy,
                json_extract_path_text(Properties, 'LoadBalancerArn') as load_balancer_arn,
                json_extract_path_text(Properties, 'DefaultActions') as default_actions,
                json_extract_path_text(Properties, 'Port') as port,
                json_extract_path_text(Properties, 'Certificates') as certificates,
                json_extract_path_text(Properties, 'Protocol') as protocol,
                json_extract_path_text(Properties, 'ListenerArn') as listener_arn,
                json_extract_path_text(Properties, 'AlpnPolicy') as alpn_policy,
                json_extract_path_text(Properties, 'MutualAuthentication') as mutual_authentication
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::Listener'
                AND data__Identifier = '<ListenerArn>'
                AND region = 'us-east-1'
    listener_rules:
      name: listener_rules
      id: awscc.elasticloadbalancingv2.listener_rules
      x-cfn-schema-name: ListenerRule
      x-type: list
      x-identifiers:
        - RuleArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RuleArn') as rule_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RuleArn') as rule_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
                AND region = 'us-east-1'
    listener_rule:
      name: listener_rule
      id: awscc.elasticloadbalancingv2.listener_rule
      x-cfn-schema-name: ListenerRule
      x-type: get
      x-identifiers:
        - RuleArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ListenerArn') as listener_arn,
              JSON_EXTRACT(Properties, '$.RuleArn') as rule_arn,
              JSON_EXTRACT(Properties, '$.Actions') as actions,
              JSON_EXTRACT(Properties, '$.Priority') as priority,
              JSON_EXTRACT(Properties, '$.Conditions') as conditions,
              JSON_EXTRACT(Properties, '$.IsDefault') as is_default
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
              AND data__Identifier = '<RuleArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ListenerArn') as listener_arn,
                json_extract_path_text(Properties, 'RuleArn') as rule_arn,
                json_extract_path_text(Properties, 'Actions') as actions,
                json_extract_path_text(Properties, 'Priority') as priority,
                json_extract_path_text(Properties, 'Conditions') as conditions,
                json_extract_path_text(Properties, 'IsDefault') as is_default
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::ListenerRule'
                AND data__Identifier = '<RuleArn>'
                AND region = 'us-east-1'
    load_balancers:
      name: load_balancers
      id: awscc.elasticloadbalancingv2.load_balancers
      x-cfn-schema-name: LoadBalancer
      x-type: list
      x-identifiers:
        - LoadBalancerArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.LoadBalancerArn') as load_balancer_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'LoadBalancerArn') as load_balancer_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
                AND region = 'us-east-1'
    load_balancer:
      name: load_balancer
      id: awscc.elasticloadbalancingv2.load_balancer
      x-cfn-schema-name: LoadBalancer
      x-type: get
      x-identifiers:
        - LoadBalancerArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(Properties, '$.SecurityGroups') as security_groups,
              JSON_EXTRACT(Properties, '$.LoadBalancerAttributes') as load_balancer_attributes,
              JSON_EXTRACT(Properties, '$.Scheme') as scheme,
              JSON_EXTRACT(Properties, '$.DNSName') as dns_name,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.LoadBalancerName') as load_balancer_name,
              JSON_EXTRACT(Properties, '$.LoadBalancerFullName') as load_balancer_full_name,
              JSON_EXTRACT(Properties, '$.Subnets') as subnets,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.CanonicalHostedZoneID') as canonical_hosted_zone_id,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.LoadBalancerArn') as load_balancer_arn,
              JSON_EXTRACT(Properties, '$.SubnetMappings') as subnet_mappings,
              JSON_EXTRACT(Properties, '$.EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic') as enforce_security_group_inbound_rules_on_private_link_traffic
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
              AND data__Identifier = '<LoadBalancerArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'IpAddressType') as ip_address_type,
                json_extract_path_text(Properties, 'SecurityGroups') as security_groups,
                json_extract_path_text(Properties, 'LoadBalancerAttributes') as load_balancer_attributes,
                json_extract_path_text(Properties, 'Scheme') as scheme,
                json_extract_path_text(Properties, 'DNSName') as dns_name,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'LoadBalancerName') as load_balancer_name,
                json_extract_path_text(Properties, 'LoadBalancerFullName') as load_balancer_full_name,
                json_extract_path_text(Properties, 'Subnets') as subnets,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'CanonicalHostedZoneID') as canonical_hosted_zone_id,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'LoadBalancerArn') as load_balancer_arn,
                json_extract_path_text(Properties, 'SubnetMappings') as subnet_mappings,
                json_extract_path_text(Properties, 'EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic') as enforce_security_group_inbound_rules_on_private_link_traffic
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::LoadBalancer'
                AND data__Identifier = '<LoadBalancerArn>'
                AND region = 'us-east-1'
    target_groups:
      name: target_groups
      id: awscc.elasticloadbalancingv2.target_groups
      x-cfn-schema-name: TargetGroup
      x-type: list
      x-identifiers:
        - TargetGroupArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TargetGroupArn') as target_group_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TargetGroupArn') as target_group_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
                AND region = 'us-east-1'
    target_group:
      name: target_group
      id: awscc.elasticloadbalancingv2.target_group
      x-cfn-schema-name: TargetGroup
      x-type: get
      x-identifiers:
        - TargetGroupArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IpAddressType') as ip_address_type,
              JSON_EXTRACT(Properties, '$.HealthCheckIntervalSeconds') as health_check_interval_seconds,
              JSON_EXTRACT(Properties, '$.LoadBalancerArns') as load_balancer_arns,
              JSON_EXTRACT(Properties, '$.Matcher') as matcher,
              JSON_EXTRACT(Properties, '$.HealthCheckPath') as health_check_path,
              JSON_EXTRACT(Properties, '$.Port') as port,
              JSON_EXTRACT(Properties, '$.Targets') as targets,
              JSON_EXTRACT(Properties, '$.HealthCheckEnabled') as health_check_enabled,
              JSON_EXTRACT(Properties, '$.ProtocolVersion') as protocol_version,
              JSON_EXTRACT(Properties, '$.UnhealthyThresholdCount') as unhealthy_threshold_count,
              JSON_EXTRACT(Properties, '$.HealthCheckTimeoutSeconds') as health_check_timeout_seconds,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.TargetGroupFullName') as target_group_full_name,
              JSON_EXTRACT(Properties, '$.HealthyThresholdCount') as healthy_threshold_count,
              JSON_EXTRACT(Properties, '$.HealthCheckProtocol') as health_check_protocol,
              JSON_EXTRACT(Properties, '$.TargetGroupAttributes') as target_group_attributes,
              JSON_EXTRACT(Properties, '$.TargetType') as target_type,
              JSON_EXTRACT(Properties, '$.HealthCheckPort') as health_check_port,
              JSON_EXTRACT(Properties, '$.TargetGroupArn') as target_group_arn,
              JSON_EXTRACT(Properties, '$.Protocol') as protocol,
              JSON_EXTRACT(Properties, '$.TargetGroupName') as target_group_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
              AND data__Identifier = '<TargetGroupArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'IpAddressType') as ip_address_type,
                json_extract_path_text(Properties, 'HealthCheckIntervalSeconds') as health_check_interval_seconds,
                json_extract_path_text(Properties, 'LoadBalancerArns') as load_balancer_arns,
                json_extract_path_text(Properties, 'Matcher') as matcher,
                json_extract_path_text(Properties, 'HealthCheckPath') as health_check_path,
                json_extract_path_text(Properties, 'Port') as port,
                json_extract_path_text(Properties, 'Targets') as targets,
                json_extract_path_text(Properties, 'HealthCheckEnabled') as health_check_enabled,
                json_extract_path_text(Properties, 'ProtocolVersion') as protocol_version,
                json_extract_path_text(Properties, 'UnhealthyThresholdCount') as unhealthy_threshold_count,
                json_extract_path_text(Properties, 'HealthCheckTimeoutSeconds') as health_check_timeout_seconds,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'TargetGroupFullName') as target_group_full_name,
                json_extract_path_text(Properties, 'HealthyThresholdCount') as healthy_threshold_count,
                json_extract_path_text(Properties, 'HealthCheckProtocol') as health_check_protocol,
                json_extract_path_text(Properties, 'TargetGroupAttributes') as target_group_attributes,
                json_extract_path_text(Properties, 'TargetType') as target_type,
                json_extract_path_text(Properties, 'HealthCheckPort') as health_check_port,
                json_extract_path_text(Properties, 'TargetGroupArn') as target_group_arn,
                json_extract_path_text(Properties, 'Protocol') as protocol,
                json_extract_path_text(Properties, 'TargetGroupName') as target_group_name,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TargetGroup'
                AND data__Identifier = '<TargetGroupArn>'
                AND region = 'us-east-1'
    trust_stores:
      name: trust_stores
      id: awscc.elasticloadbalancingv2.trust_stores
      x-cfn-schema-name: TrustStore
      x-type: list
      x-identifiers:
        - TrustStoreArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TrustStoreArn') as trust_store_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TrustStoreArn') as trust_store_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
                AND region = 'us-east-1'
    trust_store:
      name: trust_store
      id: awscc.elasticloadbalancingv2.trust_store
      x-cfn-schema-name: TrustStore
      x-type: get
      x-identifiers:
        - TrustStoreArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.CaCertificatesBundleS3Bucket') as ca_certificates_bundle_s3_bucket,
              JSON_EXTRACT(Properties, '$.CaCertificatesBundleS3Key') as ca_certificates_bundle_s3_key,
              JSON_EXTRACT(Properties, '$.CaCertificatesBundleS3ObjectVersion') as ca_certificates_bundle_s3_object_version,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.NumberOfCaCertificates') as number_of_ca_certificates,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TrustStoreArn') as trust_store_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
              AND data__Identifier = '<TrustStoreArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'CaCertificatesBundleS3Bucket') as ca_certificates_bundle_s3_bucket,
                json_extract_path_text(Properties, 'CaCertificatesBundleS3Key') as ca_certificates_bundle_s3_key,
                json_extract_path_text(Properties, 'CaCertificatesBundleS3ObjectVersion') as ca_certificates_bundle_s3_object_version,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'NumberOfCaCertificates') as number_of_ca_certificates,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TrustStoreArn') as trust_store_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStore'
                AND data__Identifier = '<TrustStoreArn>'
                AND region = 'us-east-1'
    trust_store_revocations:
      name: trust_store_revocations
      id: awscc.elasticloadbalancingv2.trust_store_revocations
      x-cfn-schema-name: TrustStoreRevocation
      x-type: list
      x-identifiers:
        - RevocationId
        - TrustStoreArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RevocationId') as revocation_id,
              JSON_EXTRACT(Properties, '$.TrustStoreArn') as trust_store_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStoreRevocation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RevocationId') as revocation_id,
                json_extract_path_text(Properties, 'TrustStoreArn') as trust_store_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStoreRevocation'
                AND region = 'us-east-1'
    trust_store_revocation:
      name: trust_store_revocation
      id: awscc.elasticloadbalancingv2.trust_store_revocation
      x-cfn-schema-name: TrustStoreRevocation
      x-type: get
      x-identifiers:
        - RevocationId
        - TrustStoreArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RevocationContents') as revocation_contents,
              JSON_EXTRACT(Properties, '$.TrustStoreArn') as trust_store_arn,
              JSON_EXTRACT(Properties, '$.RevocationId') as revocation_id,
              JSON_EXTRACT(Properties, '$.TrustStoreRevocations') as trust_store_revocations
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStoreRevocation'
              AND data__Identifier = '<RevocationId>|<TrustStoreArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'RevocationContents') as revocation_contents,
                json_extract_path_text(Properties, 'TrustStoreArn') as trust_store_arn,
                json_extract_path_text(Properties, 'RevocationId') as revocation_id,
                json_extract_path_text(Properties, 'TrustStoreRevocations') as trust_store_revocations
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ElasticLoadBalancingV2::TrustStoreRevocation'
                AND data__Identifier = '<RevocationId>|<TrustStoreArn>'
                AND region = 'us-east-1'
