openapi: 3.0.0
info:
  title: Cognito
  version: 1.0.0
paths: {}
components:
  schemas:
    PushSync:
      type: object
      additionalProperties: false
      properties:
        ApplicationArns:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        RoleArn:
          type: string
    CognitoIdentityProvider:
      type: object
      additionalProperties: false
      properties:
        ServerSideTokenCheck:
          type: boolean
        ProviderName:
          type: string
        ClientId:
          type: string
      required:
        - ProviderName
        - ClientId
    CognitoStreams:
      type: object
      additionalProperties: false
      properties:
        StreamingStatus:
          type: string
        StreamName:
          type: string
        RoleArn:
          type: string
    IdentityPool:
      type: object
      properties:
        PushSync:
          $ref: '#/components/schemas/PushSync'
        CognitoIdentityProviders:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/CognitoIdentityProvider'
        DeveloperProviderName:
          type: string
        CognitoStreams:
          $ref: '#/components/schemas/CognitoStreams'
        SupportedLoginProviders:
          type: object
        Name:
          type: string
        CognitoEvents:
          type: object
        Id:
          type: string
        IdentityPoolName:
          type: string
        AllowUnauthenticatedIdentities:
          type: boolean
        SamlProviderARNs:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        OpenIdConnectProviderARNs:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        AllowClassicFlow:
          type: boolean
      required:
        - AllowUnauthenticatedIdentities
      x-stackql-resource-name: identity_pool
      x-stackql-primaryIdentifier:
        - Id
      x-read-only-properties:
        - Id
        - Name
      x-required-permissions:
        create:
          - cognito-identity:CreateIdentityPool
          - cognito-sync:SetIdentityPoolConfiguration
          - cognito-sync:SetCognitoEvents
          - iam:PassRole
        read:
          - cognito-identity:DescribeIdentityPool
        update:
          - cognito-identity:UpdateIdentityPool
          - cognito-identity:DescribeIdentityPool
          - cognito-sync:SetIdentityPoolConfiguration
          - cognito-sync:SetCognitoEvents
          - iam:PassRole
        delete:
          - cognito-identity:DeleteIdentityPool
        list:
          - cognito-identity:ListIdentityPools
    IdentityPoolPrincipalTag:
      type: object
      properties:
        IdentityPoolId:
          type: string
        IdentityProviderName:
          type: string
        UseDefaults:
          type: boolean
        PrincipalTags:
          type: object
      required:
        - IdentityPoolId
        - IdentityProviderName
      x-stackql-resource-name: identity_pool_principal_tag
      x-stackql-primaryIdentifier:
        - IdentityPoolId
        - IdentityProviderName
      x-create-only-properties:
        - IdentityPoolId
        - IdentityProviderName
      x-required-permissions:
        create:
          - cognito-identity:GetPrincipalTagAttributeMap
          - cognito-identity:SetPrincipalTagAttributeMap
        read:
          - cognito-identity:GetPrincipalTagAttributeMap
        update:
          - cognito-identity:GetPrincipalTagAttributeMap
          - cognito-identity:SetPrincipalTagAttributeMap
        delete:
          - cognito-identity:GetPrincipalTagAttributeMap
          - cognito-identity:SetPrincipalTagAttributeMap
        list:
          - cognito-identity:GetPrincipalTagAttributeMap
    MappingRule:
      type: object
      additionalProperties: false
      properties:
        Claim:
          type: string
        MatchType:
          type: string
        RoleARN:
          type: string
        Value:
          type: string
      required:
        - Claim
        - MatchType
        - RoleARN
        - Value
    RulesConfigurationType:
      type: object
      additionalProperties: false
      properties:
        Rules:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/MappingRule'
      required:
        - Rules
    RoleMapping:
      type: object
      additionalProperties: false
      properties:
        Type:
          type: string
        AmbiguousRoleResolution:
          type: string
        RulesConfiguration:
          $ref: '#/components/schemas/RulesConfigurationType'
        IdentityProvider:
          type: string
      required:
        - Type
    IdentityPoolRoleAttachment:
      type: object
      properties:
        IdentityPoolId:
          type: string
        Roles:
          x-patternProperties:
            ^.+$:
              type: string
          additionalProperties: false
        Id:
          type: string
        RoleMappings:
          x-patternProperties:
            ^.+$:
              $ref: '#/components/schemas/RoleMapping'
          additionalProperties: false
      required:
        - IdentityPoolId
      x-stackql-resource-name: identity_pool_role_attachment
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - IdentityPoolId
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - cognito-identity:GetIdentityPoolRoles
          - cognito-identity:SetIdentityPoolRoles
          - iam:PassRole
        read:
          - cognito-identity:GetIdentityPoolRoles
        update:
          - cognito-identity:GetIdentityPoolRoles
          - cognito-identity:SetIdentityPoolRoles
          - iam:PassRole
        delete:
          - cognito-identity:GetIdentityPoolRoles
          - cognito-identity:SetIdentityPoolRoles
        list:
          - cognito-identity:GetIdentityPoolRoles
    CloudWatchLogsConfiguration:
      type: object
      properties:
        LogGroupArn:
          type: string
      additionalProperties: false
    LogConfiguration:
      type: object
      properties:
        LogLevel:
          type: string
        EventSource:
          type: string
        CloudWatchLogsConfiguration:
          $ref: '#/components/schemas/CloudWatchLogsConfiguration'
      additionalProperties: false
    LogConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/LogConfiguration'
    LogDeliveryConfiguration:
      type: object
      properties:
        Id:
          type: string
        UserPoolId:
          type: string
        LogConfigurations:
          $ref: '#/components/schemas/LogConfigurations'
      required:
        - UserPoolId
      x-stackql-resource-name: log_delivery_configuration
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - UserPoolId
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - cognito-idp:GetLogDeliveryConfiguration
          - cognito-idp:SetLogDeliveryConfiguration
          - logs:CreateLogDelivery
          - logs:GetLogDelivery
          - logs:UpdateLogDelivery
          - logs:DeleteLogDelivery
          - logs:ListLogDeliveries
          - logs:PutResourcePolicy
          - logs:DescribeResourcePolicies
          - logs:DescribeLogGroups
        read:
          - cognito-idp:GetLogDeliveryConfiguration
        update:
          - cognito-idp:GetLogDeliveryConfiguration
          - cognito-idp:SetLogDeliveryConfiguration
          - logs:CreateLogDelivery
          - logs:GetLogDelivery
          - logs:UpdateLogDelivery
          - logs:DeleteLogDelivery
          - logs:ListLogDeliveries
          - logs:PutResourcePolicy
          - logs:DescribeResourcePolicies
          - logs:DescribeLogGroups
        delete:
          - cognito-idp:GetLogDeliveryConfiguration
          - cognito-idp:SetLogDeliveryConfiguration
          - logs:CreateLogDelivery
          - logs:GetLogDelivery
          - logs:UpdateLogDelivery
          - logs:DeleteLogDelivery
          - logs:ListLogDeliveries
          - logs:PutResourcePolicy
          - logs:DescribeResourcePolicies
          - logs:DescribeLogGroups
    PasswordPolicy:
      type: object
      properties:
        MinimumLength:
          type: integer
        RequireLowercase:
          type: boolean
        RequireNumbers:
          type: boolean
        RequireSymbols:
          type: boolean
        RequireUppercase:
          type: boolean
        TemporaryPasswordValidityDays:
          type: integer
      additionalProperties: false
    Policies:
      type: object
      properties:
        PasswordPolicy:
          $ref: '#/components/schemas/PasswordPolicy'
      additionalProperties: false
    InviteMessageTemplate:
      type: object
      properties:
        EmailMessage:
          type: string
        EmailSubject:
          type: string
        SMSMessage:
          type: string
      additionalProperties: false
    RecoveryOption:
      type: object
      properties:
        Name:
          type: string
        Priority:
          type: integer
      additionalProperties: false
    AccountRecoverySetting:
      type: object
      properties:
        RecoveryMechanisms:
          type: array
          items:
            $ref: '#/components/schemas/RecoveryOption'
      additionalProperties: false
    AdminCreateUserConfig:
      type: object
      properties:
        AllowAdminCreateUserOnly:
          type: boolean
        InviteMessageTemplate:
          $ref: '#/components/schemas/InviteMessageTemplate'
        UnusedAccountValidityDays:
          type: integer
      additionalProperties: false
    DeviceConfiguration:
      type: object
      properties:
        ChallengeRequiredOnNewDevice:
          type: boolean
        DeviceOnlyRememberedOnUserPrompt:
          type: boolean
      additionalProperties: false
    EmailConfiguration:
      type: object
      properties:
        ReplyToEmailAddress:
          type: string
        SourceArn:
          type: string
        From:
          type: string
        ConfigurationSet:
          type: string
        EmailSendingAccount:
          type: string
      additionalProperties: false
    CustomEmailSender:
      type: object
      properties:
        LambdaVersion:
          type: string
        LambdaArn:
          type: string
      additionalProperties: false
    CustomSMSSender:
      type: object
      properties:
        LambdaVersion:
          type: string
        LambdaArn:
          type: string
      additionalProperties: false
    PreTokenGenerationConfig:
      type: object
      properties:
        LambdaVersion:
          type: string
        LambdaArn:
          type: string
      additionalProperties: false
    LambdaConfig:
      type: object
      properties:
        CreateAuthChallenge:
          type: string
        CustomMessage:
          type: string
        DefineAuthChallenge:
          type: string
        PostAuthentication:
          type: string
        PostConfirmation:
          type: string
        PreAuthentication:
          type: string
        PreSignUp:
          type: string
        VerifyAuthChallengeResponse:
          type: string
        UserMigration:
          type: string
        PreTokenGeneration:
          type: string
        CustomEmailSender:
          $ref: '#/components/schemas/CustomEmailSender'
        CustomSMSSender:
          $ref: '#/components/schemas/CustomSMSSender'
        KMSKeyID:
          type: string
        PreTokenGenerationConfig:
          $ref: '#/components/schemas/PreTokenGenerationConfig'
      additionalProperties: false
    SmsConfiguration:
      type: object
      properties:
        ExternalId:
          type: string
        SnsCallerArn:
          type: string
        SnsRegion:
          type: string
      additionalProperties: false
    StringAttributeConstraints:
      type: object
      properties:
        MaxLength:
          type: string
        MinLength:
          type: string
      additionalProperties: false
    NumberAttributeConstraints:
      type: object
      properties:
        MaxValue:
          type: string
        MinValue:
          type: string
      additionalProperties: false
    SchemaAttribute:
      type: object
      properties:
        AttributeDataType:
          type: string
        DeveloperOnlyAttribute:
          type: boolean
        Mutable:
          type: boolean
        Name:
          type: string
        NumberAttributeConstraints:
          $ref: '#/components/schemas/NumberAttributeConstraints'
        StringAttributeConstraints:
          $ref: '#/components/schemas/StringAttributeConstraints'
        Required:
          type: boolean
      additionalProperties: false
    UsernameConfiguration:
      type: object
      properties:
        CaseSensitive:
          type: boolean
      additionalProperties: false
    UserAttributeUpdateSettings:
      type: object
      properties:
        AttributesRequireVerificationBeforeUpdate:
          type: array
          items:
            type: string
      required:
        - AttributesRequireVerificationBeforeUpdate
      additionalProperties: false
    VerificationMessageTemplate:
      type: object
      properties:
        DefaultEmailOption:
          type: string
        EmailMessage:
          type: string
        EmailMessageByLink:
          type: string
        EmailSubject:
          type: string
        EmailSubjectByLink:
          type: string
        SmsMessage:
          type: string
      additionalProperties: false
    UserPoolAddOns:
      type: object
      properties:
        AdvancedSecurityMode:
          type: string
      additionalProperties: false
    UserPool:
      type: object
      properties:
        UserPoolName:
          type: string
          minLength: 1
          maxLength: 128
        Policies:
          $ref: '#/components/schemas/Policies'
        AccountRecoverySetting:
          $ref: '#/components/schemas/AccountRecoverySetting'
        AdminCreateUserConfig:
          $ref: '#/components/schemas/AdminCreateUserConfig'
        AliasAttributes:
          type: array
          items:
            type: string
        UsernameAttributes:
          type: array
          items:
            type: string
        AutoVerifiedAttributes:
          type: array
          items:
            type: string
        DeviceConfiguration:
          $ref: '#/components/schemas/DeviceConfiguration'
        EmailConfiguration:
          $ref: '#/components/schemas/EmailConfiguration'
        EmailVerificationMessage:
          type: string
          minLength: 6
          maxLength: 20000
        EmailVerificationSubject:
          type: string
          minLength: 1
          maxLength: 140
        DeletionProtection:
          type: string
        LambdaConfig:
          $ref: '#/components/schemas/LambdaConfig'
        MfaConfiguration:
          type: string
        EnabledMfas:
          type: array
          items:
            type: string
        SmsAuthenticationMessage:
          type: string
          minLength: 6
          maxLength: 140
        SmsConfiguration:
          $ref: '#/components/schemas/SmsConfiguration'
        SmsVerificationMessage:
          type: string
          minLength: 6
          maxLength: 140
        Schema:
          type: array
          items:
            $ref: '#/components/schemas/SchemaAttribute'
        UsernameConfiguration:
          $ref: '#/components/schemas/UsernameConfiguration'
        UserAttributeUpdateSettings:
          $ref: '#/components/schemas/UserAttributeUpdateSettings'
        UserPoolTags:
          type: object
          x-patternProperties:
            ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$:
              type: string
          additionalProperties: false
        VerificationMessageTemplate:
          $ref: '#/components/schemas/VerificationMessageTemplate'
        UserPoolAddOns:
          $ref: '#/components/schemas/UserPoolAddOns'
        ProviderName:
          type: string
        ProviderURL:
          type: string
        Arn:
          type: string
        UserPoolId:
          type: string
      x-stackql-resource-name: user_pool
      x-stackql-primaryIdentifier:
        - UserPoolId
      x-read-only-properties:
        - ProviderName
        - UserPoolId
        - ProviderURL
        - Arn
      x-required-permissions:
        create:
          - cognito-idp:CreateUserPool
          - iam:PassRole
          - cognito-idp:SetUserPoolMfaConfig
          - cognito-idp:DescribeUserPool
          - kms:CreateGrant
          - iam:CreateServiceLinkedRole
        read:
          - cognito-idp:DescribeUserPool
        update:
          - cognito-idp:UpdateUserPool
          - cognito-idp:ListTagsForResource
          - cognito-idp:UntagResource
          - cognito-idp:TagResource
          - cognito-idp:SetUserPoolMfaConfig
          - cognito-idp:AddCustomAttributes
          - cognito-idp:DescribeUserPool
          - iam:PassRole
        delete:
          - cognito-idp:DeleteUserPool
        list:
          - cognito-idp:ListUserPools
    AnalyticsConfiguration:
      type: object
      properties:
        ApplicationArn:
          type: string
        ApplicationId:
          type: string
        ExternalId:
          type: string
        RoleArn:
          type: string
        UserDataShared:
          type: boolean
      additionalProperties: false
    TokenValidityUnits:
      type: object
      properties:
        AccessToken:
          type: string
        IdToken:
          type: string
        RefreshToken:
          type: string
      additionalProperties: false
    UserPoolClient:
      type: object
      properties:
        ClientName:
          type: string
          minLength: 1
          maxLength: 128
        ExplicitAuthFlows:
          type: array
          items:
            type: string
        GenerateSecret:
          type: boolean
        ReadAttributes:
          type: array
          items:
            type: string
        AuthSessionValidity:
          type: integer
          minimum: 3
          maximum: 15
        RefreshTokenValidity:
          type: integer
          minimum: 1
          maximum: 315360000
        AccessTokenValidity:
          type: integer
          minimum: 1
          maximum: 86400
        IdTokenValidity:
          type: integer
          minimum: 1
          maximum: 86400
        TokenValidityUnits:
          $ref: '#/components/schemas/TokenValidityUnits'
        UserPoolId:
          type: string
        WriteAttributes:
          type: array
          items:
            type: string
        AllowedOAuthFlows:
          type: array
          items:
            type: string
        AllowedOAuthFlowsUserPoolClient:
          type: boolean
        AllowedOAuthScopes:
          type: array
          items:
            type: string
        CallbackURLs:
          type: array
          items:
            type: string
        DefaultRedirectURI:
          type: string
        LogoutURLs:
          type: array
          items:
            type: string
        SupportedIdentityProviders:
          type: array
          items:
            type: string
        AnalyticsConfiguration:
          $ref: '#/components/schemas/AnalyticsConfiguration'
        PreventUserExistenceErrors:
          type: string
        EnableTokenRevocation:
          type: boolean
        EnablePropagateAdditionalUserContextData:
          type: boolean
        Name:
          type: string
        ClientSecret:
          type: string
        ClientId:
          type: string
      required:
        - UserPoolId
      x-stackql-resource-name: user_pool_client
      x-stackql-primaryIdentifier:
        - UserPoolId
        - ClientId
      x-create-only-properties:
        - GenerateSecret
        - UserPoolId
      x-read-only-properties:
        - ClientSecret
        - Name
        - ClientId
      x-required-permissions:
        create:
          - cognito-idp:CreateUserPoolClient
          - iam:PassRole
          - iam:PutRolePolicy
          - iam:CreateServiceLinkedRole
        read:
          - cognito-idp:DescribeUserPoolClient
        update:
          - cognito-idp:UpdateUserPoolClient
          - iam:PassRole
          - iam:PutRolePolicy
        delete:
          - cognito-idp:DeleteUserPoolClient
          - iam:PutRolePolicy
          - iam:DeleteRolePolicy
        list:
          - cognito-idp:ListUserPoolClients
    UserPoolGroup:
      type: object
      properties:
        Description:
          type: string
          maxLength: 2048
        GroupName:
          type: string
        Precedence:
          type: integer
          minimum: 0
        RoleArn:
          type: string
        UserPoolId:
          type: string
      required:
        - UserPoolId
      x-stackql-resource-name: user_pool_group
      x-stackql-primaryIdentifier:
        - UserPoolId
        - GroupName
      x-create-only-properties:
        - UserPoolId
        - GroupName
      x-required-permissions:
        create:
          - cognito-idp:CreateGroup
          - iam:PassRole
          - iam:PutRolePolicy
          - cognito-idp:GetGroup
        read:
          - cognito-idp:GetGroup
        update:
          - cognito-idp:UpdateGroup
          - iam:PassRole
          - iam:PutRolePolicy
        delete:
          - cognito-idp:DeleteGroup
          - cognito-idp:GetGroup
          - iam:PutRolePolicy
        list:
          - cognito-idp:ListGroups
    RiskExceptionConfigurationType:
      type: object
      properties:
        BlockedIPRangeList:
          type: array
          uniqueItems: true
          items:
            type: string
        SkippedIPRangeList:
          type: array
          uniqueItems: true
          items:
            type: string
      additionalProperties: false
    CompromisedCredentialsActionsType:
      type: object
      properties:
        EventAction:
          type: string
      required:
        - EventAction
      additionalProperties: false
    CompromisedCredentialsRiskConfigurationType:
      type: object
      properties:
        Actions:
          $ref: '#/components/schemas/CompromisedCredentialsActionsType'
        EventFilter:
          type: array
          uniqueItems: true
          items:
            type: string
      required:
        - Actions
      additionalProperties: false
    AccountTakeoverActionType:
      type: object
      properties:
        EventAction:
          type: string
        Notify:
          type: boolean
      required:
        - EventAction
        - Notify
      additionalProperties: false
    AccountTakeoverActionsType:
      type: object
      properties:
        HighAction:
          $ref: '#/components/schemas/AccountTakeoverActionType'
        LowAction:
          $ref: '#/components/schemas/AccountTakeoverActionType'
        MediumAction:
          $ref: '#/components/schemas/AccountTakeoverActionType'
      additionalProperties: false
    NotifyEmailType:
      type: object
      properties:
        HtmlBody:
          type: string
        Subject:
          type: string
        TextBody:
          type: string
      required:
        - Subject
      additionalProperties: false
    NotifyConfigurationType:
      type: object
      properties:
        BlockEmail:
          $ref: '#/components/schemas/NotifyEmailType'
        MfaEmail:
          $ref: '#/components/schemas/NotifyEmailType'
        NoActionEmail:
          $ref: '#/components/schemas/NotifyEmailType'
        From:
          type: string
        ReplyTo:
          type: string
        SourceArn:
          type: string
      required:
        - SourceArn
      additionalProperties: false
    AccountTakeoverRiskConfigurationType:
      type: object
      properties:
        Actions:
          $ref: '#/components/schemas/AccountTakeoverActionsType'
        NotifyConfiguration:
          $ref: '#/components/schemas/NotifyConfigurationType'
      required:
        - Actions
      additionalProperties: false
    UserPoolRiskConfigurationAttachment:
      type: object
      properties:
        UserPoolId:
          type: string
        ClientId:
          type: string
        RiskExceptionConfiguration:
          $ref: '#/components/schemas/RiskExceptionConfigurationType'
        CompromisedCredentialsRiskConfiguration:
          $ref: '#/components/schemas/CompromisedCredentialsRiskConfigurationType'
        AccountTakeoverRiskConfiguration:
          $ref: '#/components/schemas/AccountTakeoverRiskConfigurationType'
      required:
        - UserPoolId
        - ClientId
      x-stackql-resource-name: user_pool_risk_configuration_attachment
      x-stackql-primaryIdentifier:
        - UserPoolId
        - ClientId
      x-create-only-properties:
        - UserPoolId
        - ClientId
      x-required-permissions:
        create:
          - cognito-idp:SetRiskConfiguration
          - cognito-idp:DescribeRiskConfiguration
          - iam:PassRole
        read:
          - cognito-idp:DescribeRiskConfiguration
        update:
          - cognito-idp:SetRiskConfiguration
          - cognito-idp:DescribeRiskConfiguration
          - iam:PassRole
        delete:
          - cognito-idp:SetRiskConfiguration
          - cognito-idp:DescribeRiskConfiguration
    AttributeType:
      type: object
      properties:
        Name:
          type: string
        Value:
          type: string
      additionalProperties: false
    UserPoolUser:
      type: object
      properties:
        DesiredDeliveryMediums:
          type: array
          items:
            type: string
        ForceAliasCreation:
          type: boolean
        UserAttributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeType'
        MessageAction:
          type: string
        Username:
          type: string
        UserPoolId:
          type: string
        ValidationData:
          type: array
          items:
            $ref: '#/components/schemas/AttributeType'
        ClientMetadata:
          type: object
          x-patternProperties:
            ^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$:
              type: string
          additionalProperties: false
      required:
        - UserPoolId
      x-stackql-resource-name: user_pool_user
      x-stackql-primaryIdentifier:
        - UserPoolId
        - Username
      x-create-only-properties:
        - DesiredDeliveryMediums
        - ForceAliasCreation
        - UserAttributes
        - Username
        - UserPoolId
        - ValidationData
        - ClientMetadata
        - MessageAction
      x-required-permissions:
        create:
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminGetUser
          - iam:PassRole
        read:
          - cognito-idp:AdminGetUser
        delete:
          - cognito-idp:AdminDeleteUser
        list:
          - cognito-idp:ListUsers
    UserPoolUserToGroupAttachment:
      type: object
      properties:
        UserPoolId:
          type: string
        Username:
          type: string
        GroupName:
          type: string
      required:
        - UserPoolId
        - Username
        - GroupName
      x-stackql-resource-name: user_pool_user_to_group_attachment
      x-stackql-primaryIdentifier:
        - UserPoolId
        - GroupName
        - Username
      x-create-only-properties:
        - UserPoolId
        - GroupName
        - Username
      x-required-permissions:
        create:
          - cognito-idp:AdminAddUserToGroup
          - cognito-idp:AdminListGroupsForUser
        delete:
          - cognito-idp:AdminRemoveUserFromGroup
          - cognito-idp:AdminListGroupsForUser
        read:
          - cognito-idp:AdminListGroupsForUser
  x-stackQL-resources:
    identity_pools:
      name: identity_pools
      id: awscc.cognito.identity_pools
      x-cfn-schema-name: IdentityPool
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::IdentityPool'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::IdentityPool'
                AND region = 'us-east-1'
    identity_pool:
      name: identity_pool
      id: awscc.cognito.identity_pool
      x-cfn-schema-name: IdentityPool
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PushSync') as push_sync,
              JSON_EXTRACT(Properties, '$.CognitoIdentityProviders') as cognito_identity_providers,
              JSON_EXTRACT(Properties, '$.DeveloperProviderName') as developer_provider_name,
              JSON_EXTRACT(Properties, '$.CognitoStreams') as cognito_streams,
              JSON_EXTRACT(Properties, '$.SupportedLoginProviders') as supported_login_providers,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.CognitoEvents') as cognito_events,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.IdentityPoolName') as identity_pool_name,
              JSON_EXTRACT(Properties, '$.AllowUnauthenticatedIdentities') as allow_unauthenticated_identities,
              JSON_EXTRACT(Properties, '$.SamlProviderARNs') as saml_provider_arns,
              JSON_EXTRACT(Properties, '$.OpenIdConnectProviderARNs') as open_id_connect_provider_arns,
              JSON_EXTRACT(Properties, '$.AllowClassicFlow') as allow_classic_flow
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::IdentityPool'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PushSync') as push_sync,
                json_extract_path_text(Properties, 'CognitoIdentityProviders') as cognito_identity_providers,
                json_extract_path_text(Properties, 'DeveloperProviderName') as developer_provider_name,
                json_extract_path_text(Properties, 'CognitoStreams') as cognito_streams,
                json_extract_path_text(Properties, 'SupportedLoginProviders') as supported_login_providers,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'CognitoEvents') as cognito_events,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'IdentityPoolName') as identity_pool_name,
                json_extract_path_text(Properties, 'AllowUnauthenticatedIdentities') as allow_unauthenticated_identities,
                json_extract_path_text(Properties, 'SamlProviderARNs') as saml_provider_arns,
                json_extract_path_text(Properties, 'OpenIdConnectProviderARNs') as open_id_connect_provider_arns,
                json_extract_path_text(Properties, 'AllowClassicFlow') as allow_classic_flow
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::IdentityPool'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    identity_pool_principal_tags:
      name: identity_pool_principal_tags
      id: awscc.cognito.identity_pool_principal_tags
      x-cfn-schema-name: IdentityPoolPrincipalTag
      x-type: list
      x-identifiers:
        - IdentityPoolId
        - IdentityProviderName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IdentityPoolId') as identity_pool_id,
              JSON_EXTRACT(Properties, '$.IdentityProviderName') as identity_provider_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::IdentityPoolPrincipalTag'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IdentityPoolId') as identity_pool_id,
                json_extract_path_text(Properties, 'IdentityProviderName') as identity_provider_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::IdentityPoolPrincipalTag'
                AND region = 'us-east-1'
    identity_pool_principal_tag:
      name: identity_pool_principal_tag
      id: awscc.cognito.identity_pool_principal_tag
      x-cfn-schema-name: IdentityPoolPrincipalTag
      x-type: get
      x-identifiers:
        - IdentityPoolId
        - IdentityProviderName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IdentityPoolId') as identity_pool_id,
              JSON_EXTRACT(Properties, '$.IdentityProviderName') as identity_provider_name,
              JSON_EXTRACT(Properties, '$.UseDefaults') as use_defaults,
              JSON_EXTRACT(Properties, '$.PrincipalTags') as principal_tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::IdentityPoolPrincipalTag'
              AND data__Identifier = '<IdentityPoolId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IdentityPoolId') as identity_pool_id,
                json_extract_path_text(Properties, 'IdentityProviderName') as identity_provider_name,
                json_extract_path_text(Properties, 'UseDefaults') as use_defaults,
                json_extract_path_text(Properties, 'PrincipalTags') as principal_tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::IdentityPoolPrincipalTag'
                AND data__Identifier = '<IdentityPoolId>'
                AND region = 'us-east-1'
    identity_pool_role_attachments:
      name: identity_pool_role_attachments
      id: awscc.cognito.identity_pool_role_attachments
      x-cfn-schema-name: IdentityPoolRoleAttachment
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::IdentityPoolRoleAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::IdentityPoolRoleAttachment'
                AND region = 'us-east-1'
    identity_pool_role_attachment:
      name: identity_pool_role_attachment
      id: awscc.cognito.identity_pool_role_attachment
      x-cfn-schema-name: IdentityPoolRoleAttachment
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.IdentityPoolId') as identity_pool_id,
              JSON_EXTRACT(Properties, '$.Roles') as roles,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.RoleMappings') as role_mappings
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::IdentityPoolRoleAttachment'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'IdentityPoolId') as identity_pool_id,
                json_extract_path_text(Properties, 'Roles') as roles,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'RoleMappings') as role_mappings
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::IdentityPoolRoleAttachment'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    log_delivery_configurations:
      name: log_delivery_configurations
      id: awscc.cognito.log_delivery_configurations
      x-cfn-schema-name: LogDeliveryConfiguration
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::LogDeliveryConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::LogDeliveryConfiguration'
                AND region = 'us-east-1'
    log_delivery_configuration:
      name: log_delivery_configuration
      id: awscc.cognito.log_delivery_configuration
      x-cfn-schema-name: LogDeliveryConfiguration
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.UserPoolId') as user_pool_id,
              JSON_EXTRACT(Properties, '$.LogConfigurations') as log_configurations
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::LogDeliveryConfiguration'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'UserPoolId') as user_pool_id,
                json_extract_path_text(Properties, 'LogConfigurations') as log_configurations
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::LogDeliveryConfiguration'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    user_pools:
      name: user_pools
      id: awscc.cognito.user_pools
      x-cfn-schema-name: UserPool
      x-type: list
      x-identifiers:
        - UserPoolId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserPoolId') as user_pool_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::UserPool'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserPoolId') as user_pool_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::UserPool'
                AND region = 'us-east-1'
    user_pool:
      name: user_pool
      id: awscc.cognito.user_pool
      x-cfn-schema-name: UserPool
      x-type: get
      x-identifiers:
        - UserPoolId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserPoolName') as user_pool_name,
              JSON_EXTRACT(Properties, '$.Policies') as policies,
              JSON_EXTRACT(Properties, '$.AccountRecoverySetting') as account_recovery_setting,
              JSON_EXTRACT(Properties, '$.AdminCreateUserConfig') as admin_create_user_config,
              JSON_EXTRACT(Properties, '$.AliasAttributes') as alias_attributes,
              JSON_EXTRACT(Properties, '$.UsernameAttributes') as username_attributes,
              JSON_EXTRACT(Properties, '$.AutoVerifiedAttributes') as auto_verified_attributes,
              JSON_EXTRACT(Properties, '$.DeviceConfiguration') as device_configuration,
              JSON_EXTRACT(Properties, '$.EmailConfiguration') as email_configuration,
              JSON_EXTRACT(Properties, '$.EmailVerificationMessage') as email_verification_message,
              JSON_EXTRACT(Properties, '$.EmailVerificationSubject') as email_verification_subject,
              JSON_EXTRACT(Properties, '$.DeletionProtection') as deletion_protection,
              JSON_EXTRACT(Properties, '$.LambdaConfig') as lambda_config,
              JSON_EXTRACT(Properties, '$.MfaConfiguration') as mfa_configuration,
              JSON_EXTRACT(Properties, '$.EnabledMfas') as enabled_mfas,
              JSON_EXTRACT(Properties, '$.SmsAuthenticationMessage') as sms_authentication_message,
              JSON_EXTRACT(Properties, '$.SmsConfiguration') as sms_configuration,
              JSON_EXTRACT(Properties, '$.SmsVerificationMessage') as sms_verification_message,
              JSON_EXTRACT(Properties, '$.Schema') as _schema,
              JSON_EXTRACT(Properties, '$.UsernameConfiguration') as username_configuration,
              JSON_EXTRACT(Properties, '$.UserAttributeUpdateSettings') as user_attribute_update_settings,
              JSON_EXTRACT(Properties, '$.UserPoolTags') as user_pool_tags,
              JSON_EXTRACT(Properties, '$.VerificationMessageTemplate') as verification_message_template,
              JSON_EXTRACT(Properties, '$.UserPoolAddOns') as user_pool_add_ons,
              JSON_EXTRACT(Properties, '$.ProviderName') as provider_name,
              JSON_EXTRACT(Properties, '$.ProviderURL') as provider_ur_l,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.UserPoolId') as user_pool_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::UserPool'
              AND data__Identifier = '<UserPoolId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserPoolName') as user_pool_name,
                json_extract_path_text(Properties, 'Policies') as policies,
                json_extract_path_text(Properties, 'AccountRecoverySetting') as account_recovery_setting,
                json_extract_path_text(Properties, 'AdminCreateUserConfig') as admin_create_user_config,
                json_extract_path_text(Properties, 'AliasAttributes') as alias_attributes,
                json_extract_path_text(Properties, 'UsernameAttributes') as username_attributes,
                json_extract_path_text(Properties, 'AutoVerifiedAttributes') as auto_verified_attributes,
                json_extract_path_text(Properties, 'DeviceConfiguration') as device_configuration,
                json_extract_path_text(Properties, 'EmailConfiguration') as email_configuration,
                json_extract_path_text(Properties, 'EmailVerificationMessage') as email_verification_message,
                json_extract_path_text(Properties, 'EmailVerificationSubject') as email_verification_subject,
                json_extract_path_text(Properties, 'DeletionProtection') as deletion_protection,
                json_extract_path_text(Properties, 'LambdaConfig') as lambda_config,
                json_extract_path_text(Properties, 'MfaConfiguration') as mfa_configuration,
                json_extract_path_text(Properties, 'EnabledMfas') as enabled_mfas,
                json_extract_path_text(Properties, 'SmsAuthenticationMessage') as sms_authentication_message,
                json_extract_path_text(Properties, 'SmsConfiguration') as sms_configuration,
                json_extract_path_text(Properties, 'SmsVerificationMessage') as sms_verification_message,
                json_extract_path_text(Properties, 'Schema') as _schema,
                json_extract_path_text(Properties, 'UsernameConfiguration') as username_configuration,
                json_extract_path_text(Properties, 'UserAttributeUpdateSettings') as user_attribute_update_settings,
                json_extract_path_text(Properties, 'UserPoolTags') as user_pool_tags,
                json_extract_path_text(Properties, 'VerificationMessageTemplate') as verification_message_template,
                json_extract_path_text(Properties, 'UserPoolAddOns') as user_pool_add_ons,
                json_extract_path_text(Properties, 'ProviderName') as provider_name,
                json_extract_path_text(Properties, 'ProviderURL') as provider_ur_l,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'UserPoolId') as user_pool_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::UserPool'
                AND data__Identifier = '<UserPoolId>'
                AND region = 'us-east-1'
    user_pool_clients:
      name: user_pool_clients
      id: awscc.cognito.user_pool_clients
      x-cfn-schema-name: UserPoolClient
      x-type: list
      x-identifiers:
        - UserPoolId
        - ClientId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserPoolId') as user_pool_id,
              JSON_EXTRACT(Properties, '$.ClientId') as client_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::UserPoolClient'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserPoolId') as user_pool_id,
                json_extract_path_text(Properties, 'ClientId') as client_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::UserPoolClient'
                AND region = 'us-east-1'
    user_pool_client:
      name: user_pool_client
      id: awscc.cognito.user_pool_client
      x-cfn-schema-name: UserPoolClient
      x-type: get
      x-identifiers:
        - UserPoolId
        - ClientId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClientName') as client_name,
              JSON_EXTRACT(Properties, '$.ExplicitAuthFlows') as explicit_auth_flows,
              JSON_EXTRACT(Properties, '$.GenerateSecret') as generate_secret,
              JSON_EXTRACT(Properties, '$.ReadAttributes') as read_attributes,
              JSON_EXTRACT(Properties, '$.AuthSessionValidity') as auth_session_validity,
              JSON_EXTRACT(Properties, '$.RefreshTokenValidity') as refresh_token_validity,
              JSON_EXTRACT(Properties, '$.AccessTokenValidity') as access_token_validity,
              JSON_EXTRACT(Properties, '$.IdTokenValidity') as id_token_validity,
              JSON_EXTRACT(Properties, '$.TokenValidityUnits') as token_validity_units,
              JSON_EXTRACT(Properties, '$.UserPoolId') as user_pool_id,
              JSON_EXTRACT(Properties, '$.WriteAttributes') as write_attributes,
              JSON_EXTRACT(Properties, '$.AllowedOAuthFlows') as allowed_oauth_flows,
              JSON_EXTRACT(Properties, '$.AllowedOAuthFlowsUserPoolClient') as allowed_oauth_flows_user_pool_client,
              JSON_EXTRACT(Properties, '$.AllowedOAuthScopes') as allowed_oauth_scopes,
              JSON_EXTRACT(Properties, '$.CallbackURLs') as callback_ur_ls,
              JSON_EXTRACT(Properties, '$.DefaultRedirectURI') as default_redirect_ur_i,
              JSON_EXTRACT(Properties, '$.LogoutURLs') as logout_ur_ls,
              JSON_EXTRACT(Properties, '$.SupportedIdentityProviders') as supported_identity_providers,
              JSON_EXTRACT(Properties, '$.AnalyticsConfiguration') as analytics_configuration,
              JSON_EXTRACT(Properties, '$.PreventUserExistenceErrors') as prevent_user_existence_errors,
              JSON_EXTRACT(Properties, '$.EnableTokenRevocation') as enable_token_revocation,
              JSON_EXTRACT(Properties, '$.EnablePropagateAdditionalUserContextData') as enable_propagate_additional_user_context_data,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ClientSecret') as client_secret,
              JSON_EXTRACT(Properties, '$.ClientId') as client_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::UserPoolClient'
              AND data__Identifier = '<UserPoolId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ClientName') as client_name,
                json_extract_path_text(Properties, 'ExplicitAuthFlows') as explicit_auth_flows,
                json_extract_path_text(Properties, 'GenerateSecret') as generate_secret,
                json_extract_path_text(Properties, 'ReadAttributes') as read_attributes,
                json_extract_path_text(Properties, 'AuthSessionValidity') as auth_session_validity,
                json_extract_path_text(Properties, 'RefreshTokenValidity') as refresh_token_validity,
                json_extract_path_text(Properties, 'AccessTokenValidity') as access_token_validity,
                json_extract_path_text(Properties, 'IdTokenValidity') as id_token_validity,
                json_extract_path_text(Properties, 'TokenValidityUnits') as token_validity_units,
                json_extract_path_text(Properties, 'UserPoolId') as user_pool_id,
                json_extract_path_text(Properties, 'WriteAttributes') as write_attributes,
                json_extract_path_text(Properties, 'AllowedOAuthFlows') as allowed_oauth_flows,
                json_extract_path_text(Properties, 'AllowedOAuthFlowsUserPoolClient') as allowed_oauth_flows_user_pool_client,
                json_extract_path_text(Properties, 'AllowedOAuthScopes') as allowed_oauth_scopes,
                json_extract_path_text(Properties, 'CallbackURLs') as callback_ur_ls,
                json_extract_path_text(Properties, 'DefaultRedirectURI') as default_redirect_ur_i,
                json_extract_path_text(Properties, 'LogoutURLs') as logout_ur_ls,
                json_extract_path_text(Properties, 'SupportedIdentityProviders') as supported_identity_providers,
                json_extract_path_text(Properties, 'AnalyticsConfiguration') as analytics_configuration,
                json_extract_path_text(Properties, 'PreventUserExistenceErrors') as prevent_user_existence_errors,
                json_extract_path_text(Properties, 'EnableTokenRevocation') as enable_token_revocation,
                json_extract_path_text(Properties, 'EnablePropagateAdditionalUserContextData') as enable_propagate_additional_user_context_data,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'ClientSecret') as client_secret,
                json_extract_path_text(Properties, 'ClientId') as client_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::UserPoolClient'
                AND data__Identifier = '<UserPoolId>'
                AND region = 'us-east-1'
    user_pool_groups:
      name: user_pool_groups
      id: awscc.cognito.user_pool_groups
      x-cfn-schema-name: UserPoolGroup
      x-type: list
      x-identifiers:
        - UserPoolId
        - GroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserPoolId') as user_pool_id,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::UserPoolGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserPoolId') as user_pool_id,
                json_extract_path_text(Properties, 'GroupName') as group_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::UserPoolGroup'
                AND region = 'us-east-1'
    user_pool_group:
      name: user_pool_group
      id: awscc.cognito.user_pool_group
      x-cfn-schema-name: UserPoolGroup
      x-type: get
      x-identifiers:
        - UserPoolId
        - GroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name,
              JSON_EXTRACT(Properties, '$.Precedence') as precedence,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.UserPoolId') as user_pool_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::UserPoolGroup'
              AND data__Identifier = '<UserPoolId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'GroupName') as group_name,
                json_extract_path_text(Properties, 'Precedence') as precedence,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'UserPoolId') as user_pool_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::UserPoolGroup'
                AND data__Identifier = '<UserPoolId>'
                AND region = 'us-east-1'
    user_pool_risk_configuration_attachments:
      name: user_pool_risk_configuration_attachments
      id: awscc.cognito.user_pool_risk_configuration_attachments
      x-cfn-schema-name: UserPoolRiskConfigurationAttachment
      x-type: list
      x-identifiers:
        - UserPoolId
        - ClientId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserPoolId') as user_pool_id,
              JSON_EXTRACT(Properties, '$.ClientId') as client_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::UserPoolRiskConfigurationAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserPoolId') as user_pool_id,
                json_extract_path_text(Properties, 'ClientId') as client_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::UserPoolRiskConfigurationAttachment'
                AND region = 'us-east-1'
    user_pool_risk_configuration_attachment:
      name: user_pool_risk_configuration_attachment
      id: awscc.cognito.user_pool_risk_configuration_attachment
      x-cfn-schema-name: UserPoolRiskConfigurationAttachment
      x-type: get
      x-identifiers:
        - UserPoolId
        - ClientId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserPoolId') as user_pool_id,
              JSON_EXTRACT(Properties, '$.ClientId') as client_id,
              JSON_EXTRACT(Properties, '$.RiskExceptionConfiguration') as risk_exception_configuration,
              JSON_EXTRACT(Properties, '$.CompromisedCredentialsRiskConfiguration') as compromised_credentials_risk_configuration,
              JSON_EXTRACT(Properties, '$.AccountTakeoverRiskConfiguration') as account_takeover_risk_configuration
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::UserPoolRiskConfigurationAttachment'
              AND data__Identifier = '<UserPoolId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserPoolId') as user_pool_id,
                json_extract_path_text(Properties, 'ClientId') as client_id,
                json_extract_path_text(Properties, 'RiskExceptionConfiguration') as risk_exception_configuration,
                json_extract_path_text(Properties, 'CompromisedCredentialsRiskConfiguration') as compromised_credentials_risk_configuration,
                json_extract_path_text(Properties, 'AccountTakeoverRiskConfiguration') as account_takeover_risk_configuration
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::UserPoolRiskConfigurationAttachment'
                AND data__Identifier = '<UserPoolId>'
                AND region = 'us-east-1'
    user_pool_users:
      name: user_pool_users
      id: awscc.cognito.user_pool_users
      x-cfn-schema-name: UserPoolUser
      x-type: list
      x-identifiers:
        - UserPoolId
        - Username
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserPoolId') as user_pool_id,
              JSON_EXTRACT(Properties, '$.Username') as username
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::UserPoolUser'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserPoolId') as user_pool_id,
                json_extract_path_text(Properties, 'Username') as username
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::UserPoolUser'
                AND region = 'us-east-1'
    user_pool_user:
      name: user_pool_user
      id: awscc.cognito.user_pool_user
      x-cfn-schema-name: UserPoolUser
      x-type: get
      x-identifiers:
        - UserPoolId
        - Username
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DesiredDeliveryMediums') as desired_delivery_mediums,
              JSON_EXTRACT(Properties, '$.ForceAliasCreation') as force_alias_creation,
              JSON_EXTRACT(Properties, '$.UserAttributes') as user_attributes,
              JSON_EXTRACT(Properties, '$.MessageAction') as message_action,
              JSON_EXTRACT(Properties, '$.Username') as username,
              JSON_EXTRACT(Properties, '$.UserPoolId') as user_pool_id,
              JSON_EXTRACT(Properties, '$.ValidationData') as validation_data,
              JSON_EXTRACT(Properties, '$.ClientMetadata') as client_metadata
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::UserPoolUser'
              AND data__Identifier = '<UserPoolId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DesiredDeliveryMediums') as desired_delivery_mediums,
                json_extract_path_text(Properties, 'ForceAliasCreation') as force_alias_creation,
                json_extract_path_text(Properties, 'UserAttributes') as user_attributes,
                json_extract_path_text(Properties, 'MessageAction') as message_action,
                json_extract_path_text(Properties, 'Username') as username,
                json_extract_path_text(Properties, 'UserPoolId') as user_pool_id,
                json_extract_path_text(Properties, 'ValidationData') as validation_data,
                json_extract_path_text(Properties, 'ClientMetadata') as client_metadata
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::UserPoolUser'
                AND data__Identifier = '<UserPoolId>'
                AND region = 'us-east-1'
    user_pool_user_to_group_attachments:
      name: user_pool_user_to_group_attachments
      id: awscc.cognito.user_pool_user_to_group_attachments
      x-cfn-schema-name: UserPoolUserToGroupAttachment
      x-type: list
      x-identifiers:
        - UserPoolId
        - GroupName
        - Username
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserPoolId') as user_pool_id,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name,
              JSON_EXTRACT(Properties, '$.Username') as username
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::UserPoolUserToGroupAttachment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserPoolId') as user_pool_id,
                json_extract_path_text(Properties, 'GroupName') as group_name,
                json_extract_path_text(Properties, 'Username') as username
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Cognito::UserPoolUserToGroupAttachment'
                AND region = 'us-east-1'
    user_pool_user_to_group_attachment:
      name: user_pool_user_to_group_attachment
      id: awscc.cognito.user_pool_user_to_group_attachment
      x-cfn-schema-name: UserPoolUserToGroupAttachment
      x-type: get
      x-identifiers:
        - UserPoolId
        - GroupName
        - Username
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserPoolId') as user_pool_id,
              JSON_EXTRACT(Properties, '$.Username') as username,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::UserPoolUserToGroupAttachment'
              AND data__Identifier = '<UserPoolId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserPoolId') as user_pool_id,
                json_extract_path_text(Properties, 'Username') as username,
                json_extract_path_text(Properties, 'GroupName') as group_name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Cognito::UserPoolUserToGroupAttachment'
                AND data__Identifier = '<UserPoolId>'
                AND region = 'us-east-1'
