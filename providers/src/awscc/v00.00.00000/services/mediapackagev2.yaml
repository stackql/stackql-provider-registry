openapi: 3.0.0
info:
  title: MediaPackageV2
  version: 1.0.0
paths: {}
components:
  schemas:
    IngestEndpoint:
      type: object
      description: <p>The ingest domain URL where the source stream should be sent.</p>
      properties:
        Id:
          type: string
          description: <p>The system-generated unique identifier for the IngestEndpoint.</p>
        Url:
          type: string
          description: <p>The ingest domain URL where the source stream should be sent.</p>
      additionalProperties: false
    Tag:
      type: object
      properties:
        Key:
          type: string
        Value:
          type: string
      additionalProperties: false
    Channel:
      type: object
      properties:
        Arn:
          type: string
          description: <p>The Amazon Resource Name (ARN) associated with the resource.</p>
        ChannelGroupName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        ChannelName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        CreatedAt:
          type: string
          description: <p>The date and time the channel was created.</p>
          format: date-time
        Description:
          type: string
          maxLength: 1024
          minLength: 0
          description: <p>Enter any descriptive text that helps you to identify the channel.</p>
        IngestEndpoints:
          type: array
          items:
            $ref: '#/components/schemas/IngestEndpoint'
          description: <p>The list of ingest endpoints.</p>
        ModifiedAt:
          type: string
          description: <p>The date and time the channel was modified.</p>
          format: date-time
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ChannelGroupName
        - ChannelName
      x-stackql-resource-name: channel
      x-stackql-primaryIdentifier:
        - Arn
      x-create-only-properties:
        - ChannelGroupName
        - ChannelName
      x-read-only-properties:
        - Arn
        - CreatedAt
        - IngestEndpoints
        - ModifiedAt
      x-required-permissions:
        create:
          - mediapackagev2:TagResource
          - mediapackagev2:CreateChannel
        read:
          - mediapackagev2:GetChannel
        update:
          - mediapackagev2:TagResource
          - mediapackagev2:UntagResource
          - mediapackagev2:ListTagsForResource
          - mediapackagev2:UpdateChannel
        delete:
          - mediapackagev2:GetChannel
          - mediapackagev2:DeleteChannel
        list:
          - mediapackagev2:ListChannels
    ChannelGroup:
      type: object
      properties:
        Arn:
          type: string
          description: <p>The Amazon Resource Name (ARN) associated with the resource.</p>
        ChannelGroupName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        CreatedAt:
          type: string
          description: <p>The date and time the channel group was created.</p>
          format: date-time
        Description:
          type: string
          maxLength: 1024
          minLength: 0
          description: <p>Enter any descriptive text that helps you to identify the channel group.</p>
        EgressDomain:
          type: string
          description: <p>The output domain where the source stream should be sent. Integrate the domain with a downstream CDN (such as Amazon CloudFront) or playback device.</p>
        ModifiedAt:
          type: string
          description: <p>The date and time the channel group was modified.</p>
          format: date-time
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ChannelGroupName
      x-stackql-resource-name: channel_group
      x-stackql-primaryIdentifier:
        - Arn
      x-create-only-properties:
        - ChannelGroupName
      x-read-only-properties:
        - Arn
        - CreatedAt
        - EgressDomain
        - ModifiedAt
      x-required-permissions:
        create:
          - mediapackagev2:TagResource
          - mediapackagev2:CreateChannelGroup
        read:
          - mediapackagev2:GetChannelGroup
        update:
          - mediapackagev2:TagResource
          - mediapackagev2:UntagResource
          - mediapackagev2:ListTagsForResource
          - mediapackagev2:UpdateChannelGroup
        delete:
          - mediapackagev2:GetChannelGroup
          - mediapackagev2:DeleteChannelGroup
        list:
          - mediapackagev2:ListChannelGroups
    ChannelPolicy:
      type: object
      properties:
        ChannelGroupName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        ChannelName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        Policy:
          type: object
      required:
        - ChannelGroupName
        - ChannelName
        - Policy
      x-stackql-resource-name: channel_policy
      x-stackql-primaryIdentifier:
        - ChannelGroupName
        - ChannelName
      x-create-only-properties:
        - ChannelGroupName
        - ChannelName
      x-required-permissions:
        create:
          - mediapackagev2:GetChannelPolicy
          - mediapackagev2:PutChannelPolicy
        read:
          - mediapackagev2:GetChannelPolicy
        update:
          - mediapackagev2:GetChannelPolicy
          - mediapackagev2:PutChannelPolicy
        delete:
          - mediapackagev2:GetChannelPolicy
          - mediapackagev2:DeleteChannelPolicy
    AdMarkerHls:
      type: string
      enum:
        - DATERANGE
    CmafEncryptionMethod:
      type: string
      enum:
        - CENC
        - CBCS
    ContainerType:
      type: string
      enum:
        - TS
        - CMAF
    DrmSystem:
      type: string
      enum:
        - CLEAR_KEY_AES_128
        - FAIRPLAY
        - PLAYREADY
        - WIDEVINE
    Encryption:
      type: object
      description: <p>The parameters for encrypting content.</p>
      properties:
        ConstantInitializationVector:
          type: string
          maxLength: 32
          minLength: 32
          pattern: ^[0-9a-fA-F]+$
          description: <p>A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).</p>
        EncryptionMethod:
          $ref: '#/components/schemas/EncryptionMethod'
        KeyRotationIntervalSeconds:
          type: integer
          maximum: 31536000
          minimum: 300
          description: |-
            <p>The frequency (in seconds) of key changes for live workflows, in which content is streamed real time. The service retrieves content keys before the live content begins streaming, and then retrieves them as needed over the lifetime of the workflow. By default, key rotation is set to 300 seconds (5 minutes), the minimum rotation interval, which is equivalent to setting it to 300. If you don't enter an interval, content keys aren't rotated.</p>
                     <p>The following example setting causes the service to rotate keys every thirty minutes: <code>1800</code>
                     </p>
        SpekeKeyProvider:
          $ref: '#/components/schemas/SpekeKeyProvider'
      required:
        - EncryptionMethod
        - SpekeKeyProvider
      additionalProperties: false
    EncryptionContractConfiguration:
      type: object
      description: <p>Configure one or more content encryption keys for your endpoints that use SPEKE Version 2.0. The encryption contract defines which content keys are used to encrypt the audio and video tracks in your stream. To configure the encryption contract, specify which audio and video encryption presets to use.</p>
      properties:
        PresetSpeke20Audio:
          $ref: '#/components/schemas/PresetSpeke20Audio'
        PresetSpeke20Video:
          $ref: '#/components/schemas/PresetSpeke20Video'
      required:
        - PresetSpeke20Audio
        - PresetSpeke20Video
      additionalProperties: false
    EncryptionMethod:
      type: object
      description: <p>The encryption type.</p>
      properties:
        TsEncryptionMethod:
          $ref: '#/components/schemas/TsEncryptionMethod'
        CmafEncryptionMethod:
          $ref: '#/components/schemas/CmafEncryptionMethod'
      additionalProperties: false
    FilterConfiguration:
      type: object
      description: <p>Filter configuration includes settings for manifest filtering, start and end times, and time delay that apply to all of your egress requests for this manifest. </p>
      properties:
        ManifestFilter:
          type: string
          maxLength: 1024
          minLength: 1
          description: <p>Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.</p>
        Start:
          type: string
          description: <p>Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.</p>
          format: date-time
        End:
          type: string
          description: <p>Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.</p>
          format: date-time
        TimeDelaySeconds:
          type: integer
          maximum: 1209600
          minimum: 0
          description: <p>Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint's startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest's endpoint URL.</p>
      additionalProperties: false
    HlsManifestConfiguration:
      type: object
      description: <p>Retrieve the HTTP live streaming (HLS) manifest configuration.</p>
      properties:
        ManifestName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
          description: <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
        Url:
          type: string
          description: <p>The egress domain URL for stream delivery from MediaPackage.</p>
        ChildManifestName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
          description: <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
        ManifestWindowSeconds:
          type: integer
          description: <p>The total duration (in seconds) of the manifest's content.</p>
        ProgramDateTimeIntervalSeconds:
          type: integer
          description: |-
            <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, 
                     EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. 
                     The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. 
                     ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
                     <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
        ScteHls:
          $ref: '#/components/schemas/ScteHls'
        FilterConfiguration:
          $ref: '#/components/schemas/FilterConfiguration'
      required:
        - ManifestName
      additionalProperties: false
    LowLatencyHlsManifestConfiguration:
      type: object
      description: <p>Retrieve the low-latency HTTP live streaming (HLS) manifest configuration.</p>
      properties:
        ManifestName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
          description: <p>A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index. MediaPackage automatically inserts the format extension, such as .m3u8. You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
        Url:
          type: string
          description: <p>The egress domain URL for stream delivery from MediaPackage.</p>
        ChildManifestName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
          description: <p>A short string that's appended to the endpoint URL. The child manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default child manifest name, index_1. The manifestName on the HLSManifest object overrides the manifestName you provided on the originEndpoint object.</p>
        ManifestWindowSeconds:
          type: integer
          description: <p>The total duration (in seconds) of the manifest's content.</p>
        ProgramDateTimeIntervalSeconds:
          type: integer
          description: |-
            <p>Inserts EXT-X-PROGRAM-DATE-TIME tags in the output manifest at the interval that you specify. If you don't enter an interval, 
                     EXT-X-PROGRAM-DATE-TIME tags aren't included in the manifest. 
                     The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. 
                     ID3Timed metadata messages generate every 5 seconds whenever the content is ingested.</p>
                     <p>Irrespective of this parameter, if any ID3Timed metadata is in the HLS input, it is passed through to the HLS output.</p>
        ScteHls:
          $ref: '#/components/schemas/ScteHls'
        FilterConfiguration:
          $ref: '#/components/schemas/FilterConfiguration'
      required:
        - ManifestName
      additionalProperties: false
    PresetSpeke20Audio:
      type: string
      enum:
        - PRESET_AUDIO_1
        - PRESET_AUDIO_2
        - PRESET_AUDIO_3
        - SHARED
        - UNENCRYPTED
    PresetSpeke20Video:
      type: string
      enum:
        - PRESET_VIDEO_1
        - PRESET_VIDEO_2
        - PRESET_VIDEO_3
        - PRESET_VIDEO_4
        - PRESET_VIDEO_5
        - PRESET_VIDEO_6
        - PRESET_VIDEO_7
        - PRESET_VIDEO_8
        - SHARED
        - UNENCRYPTED
    Scte:
      type: object
      description: <p>The SCTE configuration.</p>
      properties:
        ScteFilter:
          type: array
          items:
            $ref: '#/components/schemas/ScteFilter'
          maxItems: 100
          minItems: 0
          description: <p>The SCTE-35 message types that you want to be treated as ad markers in the output.</p>
      additionalProperties: false
    ScteFilter:
      type: string
      enum:
        - SPLICE_INSERT
        - BREAK
        - PROVIDER_ADVERTISEMENT
        - DISTRIBUTOR_ADVERTISEMENT
        - PROVIDER_PLACEMENT_OPPORTUNITY
        - DISTRIBUTOR_PLACEMENT_OPPORTUNITY
        - PROVIDER_OVERLAY_PLACEMENT_OPPORTUNITY
        - DISTRIBUTOR_OVERLAY_PLACEMENT_OPPORTUNITY
        - PROGRAM
    ScteHls:
      type: object
      description: <p>The SCTE configuration.</p>
      properties:
        AdMarkerHls:
          $ref: '#/components/schemas/AdMarkerHls'
      additionalProperties: false
    Segment:
      type: object
      description: <p>The segment configuration, including the segment name, duration, and other configuration values.</p>
      properties:
        SegmentDurationSeconds:
          type: integer
          maximum: 30
          minimum: 1
          description: <p>The duration (in seconds) of each segment. Enter a value equal to, or a multiple of, the input segment duration. If the value that you enter is different from the input segment duration, MediaPackage rounds segments to the nearest multiple of the input segment duration.</p>
        SegmentName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
          description: <p>The name that describes the segment. The name is the base name of the segment used in all content manifests inside of the endpoint. You can't use spaces in the name.</p>
        TsUseAudioRenditionGroup:
          type: boolean
          description: <p>When selected, MediaPackage bundles all audio tracks in a rendition group. All other tracks in the stream can be used with any audio rendition from the group.</p>
        IncludeIframeOnlyStreams:
          type: boolean
          description: <p>When selected, the stream set includes an additional I-frame only stream, along with the other tracks. If false, this extra stream is not included. MediaPackage generates an I-frame only stream from the first rendition in the manifest. The service inserts EXT-I-FRAMES-ONLY tags in the output manifest, and then generates and includes an I-frames only playlist in the stream. This playlist permits player functionality like fast forward and rewind.</p>
        TsIncludeDvbSubtitles:
          type: boolean
          description: <p>By default, MediaPackage excludes all digital video broadcasting (DVB) subtitles from the output. When selected, MediaPackage passes through DVB subtitles into the output.</p>
        Scte:
          $ref: '#/components/schemas/Scte'
        Encryption:
          $ref: '#/components/schemas/Encryption'
      additionalProperties: false
    SpekeKeyProvider:
      type: object
      description: <p>The parameters for the SPEKE key provider.</p>
      properties:
        EncryptionContractConfiguration:
          $ref: '#/components/schemas/EncryptionContractConfiguration'
        ResourceId:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[0-9a-zA-Z_-]+$
          description: |-
            <p>The unique identifier for the content. The service sends this to the key server to identify the current endpoint. How unique you make this depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID.</p>
                     <p>The following example shows a resource ID: <code>MovieNight20171126093045</code>
                     </p>
        DrmSystems:
          type: array
          items:
            $ref: '#/components/schemas/DrmSystem'
          maxItems: 4
          minItems: 1
          description: <p>The DRM solution provider you're using to protect your content during distribution.</p>
        RoleArn:
          type: string
          maxLength: 2048
          minLength: 1
          description: |-
            <p>The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider.</p>
                     <p>Valid format: <code>arn:aws:iam::{accountID}:role/{name}</code>. The following example shows a role ARN: <code>arn:aws:iam::444455556666:role/SpekeAccess</code>
                     </p>
        Url:
          type: string
          maxLength: 1024
          minLength: 1
          description: |-
            <p>The URL of the API Gateway proxy that you set up to talk to your key server. The API Gateway proxy must reside in the same AWS Region as MediaPackage and must start with https://.</p>
                     <p>The following example shows a URL: <code>https://1wm2dx1f33.execute-api.us-west-2.amazonaws.com/SpekeSample/copyProtection</code>
                     </p>
      required:
        - DrmSystems
        - EncryptionContractConfiguration
        - ResourceId
        - RoleArn
        - Url
      additionalProperties: false
    TsEncryptionMethod:
      type: string
      enum:
        - AES_128
        - SAMPLE_AES
    OriginEndpoint:
      type: object
      properties:
        Arn:
          type: string
          description: <p>The Amazon Resource Name (ARN) associated with the resource.</p>
        ChannelGroupName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        ChannelName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        ContainerType:
          $ref: '#/components/schemas/ContainerType'
        CreatedAt:
          type: string
          description: <p>The date and time the origin endpoint was created.</p>
          format: date-time
        Description:
          type: string
          maxLength: 1024
          minLength: 0
          description: <p>Enter any descriptive text that helps you to identify the origin endpoint.</p>
        HlsManifests:
          type: array
          items:
            $ref: '#/components/schemas/HlsManifestConfiguration'
          description: <p>An HTTP live streaming (HLS) manifest configuration.</p>
        LowLatencyHlsManifests:
          type: array
          items:
            $ref: '#/components/schemas/LowLatencyHlsManifestConfiguration'
          description: <p>A low-latency HLS manifest configuration.</p>
        ModifiedAt:
          type: string
          description: <p>The date and time the origin endpoint was modified.</p>
          format: date-time
        OriginEndpointName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        Segment:
          $ref: '#/components/schemas/Segment'
        StartoverWindowSeconds:
          type: integer
          maximum: 1209600
          minimum: 60
          description: <p>The size of the window (in seconds) to create a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window. The maximum startover window is 1,209,600 seconds (14 days).</p>
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
      x-stackql-resource-name: origin_endpoint
      x-stackql-primaryIdentifier:
        - Arn
      x-create-only-properties:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
      x-read-only-properties:
        - Arn
        - CreatedAt
        - ModifiedAt
        - LowLatencyHlsManifests/*/Url
        - HlsManifests/*/Url
      x-required-permissions:
        create:
          - mediapackagev2:TagResource
          - mediapackagev2:CreateOriginEndpoint
          - iam:PassRole
        read:
          - mediapackagev2:GetOriginEndpoint
        update:
          - mediapackagev2:TagResource
          - mediapackagev2:UntagResource
          - mediapackagev2:ListTagsForResource
          - mediapackagev2:UpdateOriginEndpoint
          - iam:PassRole
        delete:
          - mediapackagev2:GetOriginEndpoint
          - mediapackagev2:DeleteOriginEndpoint
        list:
          - mediapackagev2:ListOriginEndpoints
    OriginEndpointPolicy:
      type: object
      properties:
        ChannelGroupName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        ChannelName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        OriginEndpointName:
          type: string
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9_-]+$
        Policy:
          type: object
      required:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
        - Policy
      x-stackql-resource-name: origin_endpoint_policy
      x-stackql-primaryIdentifier:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
      x-create-only-properties:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
      x-required-permissions:
        create:
          - mediapackagev2:GetOriginEndpointPolicy
          - mediapackagev2:PutOriginEndpointPolicy
        read:
          - mediapackagev2:GetOriginEndpointPolicy
        update:
          - mediapackagev2:GetOriginEndpointPolicy
          - mediapackagev2:PutOriginEndpointPolicy
        delete:
          - mediapackagev2:GetOriginEndpointPolicy
          - mediapackagev2:DeleteOriginEndpointPolicy
  x-stackQL-resources:
    channels:
      name: channels
      id: awscc.mediapackagev2.channels
      x-cfn-schema-name: Channel
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::Channel'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::Channel'
                AND region = 'us-east-1'
    channel:
      name: channel
      id: awscc.mediapackagev2.channel
      x-cfn-schema-name: Channel
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.IngestEndpoints') as ingest_endpoints,
              JSON_EXTRACT(Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::Channel'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ChannelGroupName') as channel_group_name,
                json_extract_path_text(Properties, 'ChannelName') as channel_name,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'IngestEndpoints') as ingest_endpoints,
                json_extract_path_text(Properties, 'ModifiedAt') as modified_at,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::Channel'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    channel_groups:
      name: channel_groups
      id: awscc.mediapackagev2.channel_groups
      x-cfn-schema-name: ChannelGroup
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
                AND region = 'us-east-1'
    channel_group:
      name: channel_group
      id: awscc.mediapackagev2.channel_group
      x-cfn-schema-name: ChannelGroup
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EgressDomain') as egress_domain,
              JSON_EXTRACT(Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ChannelGroupName') as channel_group_name,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'EgressDomain') as egress_domain,
                json_extract_path_text(Properties, 'ModifiedAt') as modified_at,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelGroup'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    channel_policies:
      name: channel_policies
      id: awscc.mediapackagev2.channel_policies
      x-cfn-schema-name: ChannelPolicy
      x-type: list
      x-identifiers:
        - ChannelGroupName
        - ChannelName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(Properties, '$.ChannelName') as channel_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ChannelGroupName') as channel_group_name,
                json_extract_path_text(Properties, 'ChannelName') as channel_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelPolicy'
                AND region = 'us-east-1'
    channel_policy:
      name: channel_policy
      id: awscc.mediapackagev2.channel_policy
      x-cfn-schema-name: ChannelPolicy
      x-type: get
      x-identifiers:
        - ChannelGroupName
        - ChannelName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(Properties, '$.Policy') as policy
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelPolicy'
              AND data__Identifier = '<ChannelGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ChannelGroupName') as channel_group_name,
                json_extract_path_text(Properties, 'ChannelName') as channel_name,
                json_extract_path_text(Properties, 'Policy') as policy
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::ChannelPolicy'
                AND data__Identifier = '<ChannelGroupName>'
                AND region = 'us-east-1'
    origin_endpoints:
      name: origin_endpoints
      id: awscc.mediapackagev2.origin_endpoints
      x-cfn-schema-name: OriginEndpoint
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
                AND region = 'us-east-1'
    origin_endpoint:
      name: origin_endpoint
      id: awscc.mediapackagev2.origin_endpoint
      x-cfn-schema-name: OriginEndpoint
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(Properties, '$.ContainerType') as container_type,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.HlsManifests') as hls_manifests,
              JSON_EXTRACT(Properties, '$.LowLatencyHlsManifests') as low_latency_hls_manifests,
              JSON_EXTRACT(Properties, '$.ModifiedAt') as modified_at,
              JSON_EXTRACT(Properties, '$.OriginEndpointName') as origin_endpoint_name,
              JSON_EXTRACT(Properties, '$.Segment') as segment,
              JSON_EXTRACT(Properties, '$.StartoverWindowSeconds') as startover_window_seconds,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ChannelGroupName') as channel_group_name,
                json_extract_path_text(Properties, 'ChannelName') as channel_name,
                json_extract_path_text(Properties, 'ContainerType') as container_type,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'HlsManifests') as hls_manifests,
                json_extract_path_text(Properties, 'LowLatencyHlsManifests') as low_latency_hls_manifests,
                json_extract_path_text(Properties, 'ModifiedAt') as modified_at,
                json_extract_path_text(Properties, 'OriginEndpointName') as origin_endpoint_name,
                json_extract_path_text(Properties, 'Segment') as segment,
                json_extract_path_text(Properties, 'StartoverWindowSeconds') as startover_window_seconds,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpoint'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    origin_endpoint_policies:
      name: origin_endpoint_policies
      id: awscc.mediapackagev2.origin_endpoint_policies
      x-cfn-schema-name: OriginEndpointPolicy
      x-type: list
      x-identifiers:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(Properties, '$.OriginEndpointName') as origin_endpoint_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpointPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ChannelGroupName') as channel_group_name,
                json_extract_path_text(Properties, 'ChannelName') as channel_name,
                json_extract_path_text(Properties, 'OriginEndpointName') as origin_endpoint_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpointPolicy'
                AND region = 'us-east-1'
    origin_endpoint_policy:
      name: origin_endpoint_policy
      id: awscc.mediapackagev2.origin_endpoint_policy
      x-cfn-schema-name: OriginEndpointPolicy
      x-type: get
      x-identifiers:
        - ChannelGroupName
        - ChannelName
        - OriginEndpointName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ChannelGroupName') as channel_group_name,
              JSON_EXTRACT(Properties, '$.ChannelName') as channel_name,
              JSON_EXTRACT(Properties, '$.OriginEndpointName') as origin_endpoint_name,
              JSON_EXTRACT(Properties, '$.Policy') as policy
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpointPolicy'
              AND data__Identifier = '<ChannelGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ChannelGroupName') as channel_group_name,
                json_extract_path_text(Properties, 'ChannelName') as channel_name,
                json_extract_path_text(Properties, 'OriginEndpointName') as origin_endpoint_name,
                json_extract_path_text(Properties, 'Policy') as policy
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::MediaPackageV2::OriginEndpointPolicy'
                AND data__Identifier = '<ChannelGroupName>'
                AND region = 'us-east-1'
