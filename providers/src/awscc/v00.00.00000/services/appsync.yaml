openapi: 3.0.0
info:
  title: AppSync
  version: 1.0.0
paths: {}
components:
  schemas:
    DomainName:
      type: object
      properties:
        DomainName:
          type: string
          minLength: 1
          maxLength: 253
          pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
        Description:
          type: string
          minLength: 0
          maxLength: 255
        CertificateArn:
          type: string
          minLength: 3
          maxLength: 2048
          pattern: ^arn:[a-z-]*:acm:[a-z0-9-]*:\d{12}:certificate/[0-9A-Za-z_/-]*$
        AppSyncDomainName:
          type: string
        HostedZoneId:
          type: string
      required:
        - DomainName
        - CertificateArn
      x-stackql-resource-name: domain_name
      x-stackql-primaryIdentifier:
        - DomainName
      x-create-only-properties:
        - DomainName
        - CertificateArn
      x-read-only-properties:
        - AppSyncDomainName
        - HostedZoneId
      x-required-permissions:
        create:
          - appsync:CreateDomainName
          - appsync:GetDomainName
          - acm:DescribeCertificate
          - cloudfront:UpdateDistribution
        delete:
          - appsync:GetDomainName
          - appsync:DeleteDomainName
        update:
          - appsync:UpdateDomainName
        read:
          - appsync:GetDomainName
        list:
          - appsync:ListDomainNames
    DomainNameApiAssociation:
      type: object
      properties:
        DomainName:
          type: string
          minLength: 1
          maxLength: 253
          pattern: ^(\*[a-z\d-]*\.)?([a-z\d-]+\.)+[a-z\d-]+$
        ApiId:
          type: string
        ApiAssociationIdentifier:
          type: string
      required:
        - DomainName
        - ApiId
      x-stackql-resource-name: domain_name_api_association
      x-stackql-primaryIdentifier:
        - ApiAssociationIdentifier
      x-create-only-properties:
        - DomainName
      x-read-only-properties:
        - ApiAssociationIdentifier
      x-required-permissions:
        create:
          - appsync:AssociateApi
          - appsync:GetApiAssociation
        delete:
          - appsync:DisassociateApi
          - appsync:GetApiAssociation
        update:
          - appsync:AssociateApi
          - appsync:GetApiAssociation
        read:
          - appsync:GetApiAssociation
    AppSyncRuntime:
      type: object
      additionalProperties: false
      properties:
        RuntimeVersion:
          type: string
          description: The ``version`` of the runtime to use. Currently, the only allowed version is ``1.0.0``.
        Name:
          type: string
          description: The ``name`` of the runtime to use. Currently, the only allowed value is ``APPSYNC_JS``.
      required:
        - RuntimeVersion
        - Name
      description: Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
    SyncConfig:
      type: object
      additionalProperties: false
      properties:
        ConflictHandler:
          type: string
          description: |-
            The Conflict Resolution strategy to perform in the event of a conflict.
              +   *OPTIMISTIC_CONCURRENCY*: Resolve conflicts by rejecting mutations when versions don't match the latest version at the server.
              +   *AUTOMERGE*: Resolve conflicts with the Automerge conflict resolution strategy.
              +   *LAMBDA*: Resolve conflicts with an LAMlong function supplied in the ``LambdaConflictHandlerConfig``.
        ConflictDetection:
          type: string
          description: |-
            The Conflict Detection strategy to use.
              +   *VERSION*: Detect conflicts based on object versions for this resolver.
              +   *NONE*: Do not detect conflicts when invoking this resolver.
        LambdaConflictHandlerConfig:
          $ref: '#/components/schemas/LambdaConflictHandlerConfig'
          description: The ``LambdaConflictHandlerConfig`` when configuring ``LAMBDA`` as the Conflict Handler.
      required:
        - ConflictDetection
      description: |-
        Describes a Sync configuration for a resolver.
         Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
    LambdaConflictHandlerConfig:
      type: object
      description: The ``LambdaConflictHandlerConfig`` when configuring LAMBDA as the Conflict Handler.
      additionalProperties: false
      properties:
        LambdaConflictHandlerArn:
          type: string
          description: The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
    FunctionConfiguration:
      type: object
      properties:
        FunctionId:
          description: The unique identifier for the function generated by the service
          type: string
        FunctionArn:
          description: The ARN for the function generated by the service
          type: string
        ApiId:
          description: The AWS AppSync GraphQL API that you want to attach using this function.
          type: string
        Code:
          description: The resolver code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
          type: string
        CodeS3Location:
          description: The Amazon S3 endpoint (where the code is located??).
          type: string
        DataSourceName:
          description: The name of data source this function will attach.
          type: string
        Description:
          description: The function description.
          type: string
        FunctionVersion:
          description: The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
          type: string
        MaxBatchSize:
          description: The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
          type: integer
        Name:
          description: The name of the function.
          type: string
        RequestMappingTemplate:
          description: The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
          type: string
        RequestMappingTemplateS3Location:
          description: Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.
          type: string
        ResponseMappingTemplate:
          description: The Function response mapping template.
          type: string
        ResponseMappingTemplateS3Location:
          description: The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
          type: string
        Runtime:
          description: Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
          $ref: '#/components/schemas/AppSyncRuntime'
        SyncConfig:
          description: Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
          $ref: '#/components/schemas/SyncConfig'
      required:
        - ApiId
        - DataSourceName
        - Name
      x-stackql-resource-name: function_configuration
      x-stackql-primaryIdentifier:
        - FunctionArn
      x-create-only-properties:
        - ApiId
      x-read-only-properties:
        - FunctionArn
        - FunctionId
      x-required-permissions:
        create:
          - s3:GetObject
          - appsync:CreateFunction
        read:
          - appsync:GetFunction
        update:
          - s3:GetObject
          - appsync:UpdateFunction
        delete:
          - appsync:DeleteFunction
        list:
          - appsync:ListFunctions
    PipelineConfig:
      type: object
      additionalProperties: false
      properties:
        Functions:
          type: array
          description: A list of ``Function`` objects.
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
      description: |-
        Use the ``PipelineConfig`` property type to specify ``PipelineConfig`` for an APSYlong resolver.
          ``PipelineConfig`` is a property of the [AWS::AppSync::Resolver](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-resolver.html) resource.
    CachingConfig:
      type: object
      additionalProperties: false
      properties:
        CachingKeys:
          type: array
          description: |-
            The caching keys for a resolver that has caching activated.
             Valid values are entries from the ``$context.arguments``, ``$context.source``, and ``$context.identity`` maps.
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Ttl:
          type: number
          description: |-
            The TTL in seconds for a resolver that has caching activated.
             Valid values are 1â€“3,600 seconds.
      required:
        - Ttl
      description: The caching configuration for a resolver that has caching activated.
    Resolver:
      type: object
      properties:
        ApiId:
          type: string
          description: The APSYlong GraphQL API to which you want to attach this resolver.
        CachingConfig:
          $ref: '#/components/schemas/CachingConfig'
          description: The caching configuration for the resolver.
        Code:
          type: string
          description: The ``resolver`` code that contains the request and response functions. When code is used, the ``runtime`` is required. The runtime value must be ``APPSYNC_JS``.
        CodeS3Location:
          type: string
          description: The Amazon S3 endpoint.
        DataSourceName:
          type: string
          description: The resolver data source name.
        FieldName:
          type: string
          description: The GraphQL field on a type that invokes the resolver.
        Kind:
          type: string
          description: |-
            The resolver type.
              +   *UNIT*: A UNIT resolver type. A UNIT resolver is the default resolver type. You can use a UNIT resolver to run a GraphQL query against a single data source.
              +   *PIPELINE*: A PIPELINE resolver type. You can use a PIPELINE resolver to invoke a series of ``Function`` objects in a serial manner. You can use a pipeline resolver to run a GraphQL query against multiple data sources.
        MaxBatchSize:
          type: integer
          description: The maximum number of resolver request inputs that will be sent to a single LAMlong function in a ``BatchInvoke`` operation.
        PipelineConfig:
          $ref: '#/components/schemas/PipelineConfig'
          description: Functions linked with the pipeline resolver.
        RequestMappingTemplate:
          type: string
          description: |-
            The request mapping template.
             Request mapping templates are optional when using a Lambda data source. For all other data sources, a request mapping template is required.
        RequestMappingTemplateS3Location:
          type: string
          description: The location of a request mapping template in an S3 bucket. Use this if you want to provision with a template file in S3 rather than embedding it in your CFNshort template.
        ResolverArn:
          type: string
          description: ''
        ResponseMappingTemplate:
          type: string
          description: The response mapping template.
        ResponseMappingTemplateS3Location:
          type: string
          description: The location of a response mapping template in an S3 bucket. Use this if you want to provision with a template file in S3 rather than embedding it in your CFNshort template.
        Runtime:
          $ref: '#/components/schemas/AppSyncRuntime'
          description: Describes a runtime used by an APSYlong resolver or APSYlong function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
        SyncConfig:
          $ref: '#/components/schemas/SyncConfig'
          description: The ``SyncConfig`` for a resolver attached to a versioned data source.
        TypeName:
          type: string
          description: The GraphQL type that invokes this resolver.
        MetricsConfig:
          type: string
          description: ''
          enum:
            - ENABLED
            - DISABLED
      required:
        - TypeName
        - ApiId
        - FieldName
      x-stackql-resource-name: resolver
      x-stackql-primaryIdentifier:
        - ResolverArn
      x-create-only-properties:
        - ApiId
        - FieldName
        - TypeName
      x-read-only-properties:
        - ResolverArn
      x-required-permissions:
        create:
          - s3:GetObject
          - appsync:CreateResolver
          - appsync:GetResolver
        read:
          - appsync:GetResolver
        update:
          - s3:GetObject
          - appsync:UpdateResolver
        delete:
          - appsync:DeleteResolver
        list:
          - appsync:ListResolvers
    SourceApiAssociationConfig:
      properties:
        MergeType:
          description: Configuration of the merged behavior for the association. For example when it could be auto or has to be manual.
          type: string
          enum:
            - AUTO_MERGE
            - MANUAL_MERGE
      additionalProperties: false
    SourceApiAssociation:
      type: object
      properties:
        SourceApiIdentifier:
          description: Identifier of the Source GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN
          type: string
        MergedApiIdentifier:
          description: Identifier of the Merged GraphQLApi to associate. It could be either GraphQLApi ApiId or ARN
          type: string
        Description:
          description: Description of the SourceApiAssociation.
          type: string
        SourceApiAssociationConfig:
          description: Customized configuration for SourceApiAssociation.
          $ref: '#/components/schemas/SourceApiAssociationConfig'
        AssociationId:
          description: Id of the SourceApiAssociation.
          type: string
        AssociationArn:
          description: ARN of the SourceApiAssociation.
          type: string
        SourceApiId:
          description: GraphQLApiId of the source API in the association.
          type: string
        SourceApiArn:
          description: ARN of the source API in the association.
          type: string
          pattern: ^arn:aws(-(cn|us-gov))?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$
        MergedApiId:
          description: GraphQLApiId of the Merged API in the association.
          type: string
        MergedApiArn:
          description: ARN of the Merged API in the association.
          type: string
          pattern: ^arn:aws(-(cn|us-gov))?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$
        SourceApiAssociationStatus:
          description: Current status of SourceApiAssociation.
          type: string
          enum:
            - MERGE_SCHEDULED
            - MERGE_FAILED
            - MERGE_SUCCESS
            - MERGE_IN_PROGRESS
            - AUTO_MERGE_SCHEDULE_FAILED
            - DELETION_SCHEDULED
            - DELETION_IN_PROGRESS
            - DELETION_FAILED
        SourceApiAssociationStatusDetail:
          description: Current SourceApiAssociation status details.
          type: string
        LastSuccessfulMergeDate:
          description: Date of last schema successful merge.
          type: string
          format: date-time
      x-stackql-resource-name: source_api_association
      x-stackql-primaryIdentifier:
        - AssociationArn
      x-create-only-properties:
        - SourceApiIdentifier
        - MergedApiIdentifier
      x-read-only-properties:
        - AssociationId
        - AssociationArn
        - SourceApiId
        - SourceApiArn
        - MergedApiId
        - MergedApiArn
        - SourceApiAssociationStatus
        - SourceApiAssociationStatusDetail
        - LastSuccessfulMergeDate
      x-required-permissions:
        create:
          - appsync:AssociateSourceGraphqlApi
          - appsync:AssociateMergedGraphqlApi
          - appsync:GetSourceApiAssociation
        read:
          - appsync:GetSourceApiAssociation
          - appsync:ListSourceApiAssociations
        update:
          - appsync:GetSourceApiAssociation
          - appsync:UpdateSourceApiAssociation
          - appsync:GetSourceApiAssociation
        delete:
          - appsync:GetSourceApiAssociation
          - appsync:DisassociateSourceGraphqlApi
          - appsync:DisassociateMergedGraphqlApi
          - appsync:ListSourceApiAssociations
        list:
          - appsync:ListSourceApiAssociations
  x-stackQL-resources:
    domain_names:
      name: domain_names
      id: awscc.appsync.domain_names
      x-cfn-schema-name: DomainName
      x-type: list
      x-identifiers:
        - DomainName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::DomainName'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainName') as domain_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::DomainName'
                AND region = 'us-east-1'
    domain_name:
      name: domain_name
      id: awscc.appsync.domain_name
      x-cfn-schema-name: DomainName
      x-type: get
      x-identifiers:
        - DomainName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.CertificateArn') as certificate_arn,
              JSON_EXTRACT(Properties, '$.AppSyncDomainName') as app_sync_domain_name,
              JSON_EXTRACT(Properties, '$.HostedZoneId') as hosted_zone_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainName'
              AND data__Identifier = '<DomainName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DomainName') as domain_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'CertificateArn') as certificate_arn,
                json_extract_path_text(Properties, 'AppSyncDomainName') as app_sync_domain_name,
                json_extract_path_text(Properties, 'HostedZoneId') as hosted_zone_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainName'
                AND data__Identifier = '<DomainName>'
                AND region = 'us-east-1'
    domain_name_api_association:
      name: domain_name_api_association
      id: awscc.appsync.domain_name_api_association
      x-cfn-schema-name: DomainNameApiAssociation
      x-type: get
      x-identifiers:
        - ApiAssociationIdentifier
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.ApiAssociationIdentifier') as api_association_identifier
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainNameApiAssociation'
              AND data__Identifier = '<ApiAssociationIdentifier>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DomainName') as domain_name,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'ApiAssociationIdentifier') as api_association_identifier
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::DomainNameApiAssociation'
                AND data__Identifier = '<ApiAssociationIdentifier>'
                AND region = 'us-east-1'
    function_configurations:
      name: function_configurations
      id: awscc.appsync.function_configurations
      x-cfn-schema-name: FunctionConfiguration
      x-type: list
      x-identifiers:
        - FunctionArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'FunctionArn') as function_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
                AND region = 'us-east-1'
    function_configuration:
      name: function_configuration
      id: awscc.appsync.function_configuration
      x-cfn-schema-name: FunctionConfiguration
      x-type: get
      x-identifiers:
        - FunctionArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.FunctionId') as function_id,
              JSON_EXTRACT(Properties, '$.FunctionArn') as function_arn,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.Code') as code,
              JSON_EXTRACT(Properties, '$.CodeS3Location') as code_s3_location,
              JSON_EXTRACT(Properties, '$.DataSourceName') as data_source_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.FunctionVersion') as function_version,
              JSON_EXTRACT(Properties, '$.MaxBatchSize') as max_batch_size,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplate') as request_mapping_template,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplate') as response_mapping_template,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.Runtime') as runtime,
              JSON_EXTRACT(Properties, '$.SyncConfig') as sync_config
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
              AND data__Identifier = '<FunctionArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'FunctionId') as function_id,
                json_extract_path_text(Properties, 'FunctionArn') as function_arn,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'Code') as code,
                json_extract_path_text(Properties, 'CodeS3Location') as code_s3_location,
                json_extract_path_text(Properties, 'DataSourceName') as data_source_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'FunctionVersion') as function_version,
                json_extract_path_text(Properties, 'MaxBatchSize') as max_batch_size,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'RequestMappingTemplate') as request_mapping_template,
                json_extract_path_text(Properties, 'RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
                json_extract_path_text(Properties, 'ResponseMappingTemplate') as response_mapping_template,
                json_extract_path_text(Properties, 'ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
                json_extract_path_text(Properties, 'Runtime') as runtime,
                json_extract_path_text(Properties, 'SyncConfig') as sync_config
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::FunctionConfiguration'
                AND data__Identifier = '<FunctionArn>'
                AND region = 'us-east-1'
    resolvers:
      name: resolvers
      id: awscc.appsync.resolvers
      x-cfn-schema-name: Resolver
      x-type: list
      x-identifiers:
        - ResolverArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ResolverArn') as resolver_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::Resolver'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ResolverArn') as resolver_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::Resolver'
                AND region = 'us-east-1'
    resolver:
      name: resolver
      id: awscc.appsync.resolver
      x-cfn-schema-name: Resolver
      x-type: get
      x-identifiers:
        - ResolverArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ApiId') as api_id,
              JSON_EXTRACT(Properties, '$.CachingConfig') as caching_config,
              JSON_EXTRACT(Properties, '$.Code') as code,
              JSON_EXTRACT(Properties, '$.CodeS3Location') as code_s3_location,
              JSON_EXTRACT(Properties, '$.DataSourceName') as data_source_name,
              JSON_EXTRACT(Properties, '$.FieldName') as field_name,
              JSON_EXTRACT(Properties, '$.Kind') as kind,
              JSON_EXTRACT(Properties, '$.MaxBatchSize') as max_batch_size,
              JSON_EXTRACT(Properties, '$.PipelineConfig') as pipeline_config,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplate') as request_mapping_template,
              JSON_EXTRACT(Properties, '$.RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.ResolverArn') as resolver_arn,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplate') as response_mapping_template,
              JSON_EXTRACT(Properties, '$.ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
              JSON_EXTRACT(Properties, '$.Runtime') as runtime,
              JSON_EXTRACT(Properties, '$.SyncConfig') as sync_config,
              JSON_EXTRACT(Properties, '$.TypeName') as type_name,
              JSON_EXTRACT(Properties, '$.MetricsConfig') as metrics_config
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::Resolver'
              AND data__Identifier = '<ResolverArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ApiId') as api_id,
                json_extract_path_text(Properties, 'CachingConfig') as caching_config,
                json_extract_path_text(Properties, 'Code') as code,
                json_extract_path_text(Properties, 'CodeS3Location') as code_s3_location,
                json_extract_path_text(Properties, 'DataSourceName') as data_source_name,
                json_extract_path_text(Properties, 'FieldName') as field_name,
                json_extract_path_text(Properties, 'Kind') as kind,
                json_extract_path_text(Properties, 'MaxBatchSize') as max_batch_size,
                json_extract_path_text(Properties, 'PipelineConfig') as pipeline_config,
                json_extract_path_text(Properties, 'RequestMappingTemplate') as request_mapping_template,
                json_extract_path_text(Properties, 'RequestMappingTemplateS3Location') as request_mapping_template_s3_location,
                json_extract_path_text(Properties, 'ResolverArn') as resolver_arn,
                json_extract_path_text(Properties, 'ResponseMappingTemplate') as response_mapping_template,
                json_extract_path_text(Properties, 'ResponseMappingTemplateS3Location') as response_mapping_template_s3_location,
                json_extract_path_text(Properties, 'Runtime') as runtime,
                json_extract_path_text(Properties, 'SyncConfig') as sync_config,
                json_extract_path_text(Properties, 'TypeName') as type_name,
                json_extract_path_text(Properties, 'MetricsConfig') as metrics_config
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::Resolver'
                AND data__Identifier = '<ResolverArn>'
                AND region = 'us-east-1'
    source_api_associations:
      name: source_api_associations
      id: awscc.appsync.source_api_associations
      x-cfn-schema-name: SourceApiAssociation
      x-type: list
      x-identifiers:
        - AssociationArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssociationArn') as association_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::SourceApiAssociation'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AssociationArn') as association_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::AppSync::SourceApiAssociation'
                AND region = 'us-east-1'
    source_api_association:
      name: source_api_association
      id: awscc.appsync.source_api_association
      x-cfn-schema-name: SourceApiAssociation
      x-type: get
      x-identifiers:
        - AssociationArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SourceApiIdentifier') as source_api_identifier,
              JSON_EXTRACT(Properties, '$.MergedApiIdentifier') as merged_api_identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.SourceApiAssociationConfig') as source_api_association_config,
              JSON_EXTRACT(Properties, '$.AssociationId') as association_id,
              JSON_EXTRACT(Properties, '$.AssociationArn') as association_arn,
              JSON_EXTRACT(Properties, '$.SourceApiId') as source_api_id,
              JSON_EXTRACT(Properties, '$.SourceApiArn') as source_api_arn,
              JSON_EXTRACT(Properties, '$.MergedApiId') as merged_api_id,
              JSON_EXTRACT(Properties, '$.MergedApiArn') as merged_api_arn,
              JSON_EXTRACT(Properties, '$.SourceApiAssociationStatus') as source_api_association_status,
              JSON_EXTRACT(Properties, '$.SourceApiAssociationStatusDetail') as source_api_association_status_detail,
              JSON_EXTRACT(Properties, '$.LastSuccessfulMergeDate') as last_successful_merge_date
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::SourceApiAssociation'
              AND data__Identifier = '<AssociationArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'SourceApiIdentifier') as source_api_identifier,
                json_extract_path_text(Properties, 'MergedApiIdentifier') as merged_api_identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'SourceApiAssociationConfig') as source_api_association_config,
                json_extract_path_text(Properties, 'AssociationId') as association_id,
                json_extract_path_text(Properties, 'AssociationArn') as association_arn,
                json_extract_path_text(Properties, 'SourceApiId') as source_api_id,
                json_extract_path_text(Properties, 'SourceApiArn') as source_api_arn,
                json_extract_path_text(Properties, 'MergedApiId') as merged_api_id,
                json_extract_path_text(Properties, 'MergedApiArn') as merged_api_arn,
                json_extract_path_text(Properties, 'SourceApiAssociationStatus') as source_api_association_status,
                json_extract_path_text(Properties, 'SourceApiAssociationStatusDetail') as source_api_association_status_detail,
                json_extract_path_text(Properties, 'LastSuccessfulMergeDate') as last_successful_merge_date
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::AppSync::SourceApiAssociation'
                AND data__Identifier = '<AssociationArn>'
                AND region = 'us-east-1'
