openapi: 3.0.0
info:
  title: IAM
  version: 1.0.0
paths: {}
components:
  schemas:
    Policy:
      description: |-
        Contains information about an attached policy.
         An attached policy is a managed policy that has been attached to a user, group, or role.
         For more information about managed policies, refer to [Managed Policies and Inline Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *User Guide*.
      type: object
      additionalProperties: false
      properties:
        PolicyDocument:
          description: The entire contents of the policy that defines permissions. For more information, see [Overview of JSON policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policies-json).
          type: object
        PolicyName:
          description: The friendly name (not ARN) identifying the policy.
          type: string
      required:
        - PolicyName
        - PolicyDocument
    Group:
      type: object
      properties:
        Arn:
          description: The Arn of the group to create
          type: string
        GroupName:
          description: The name of the group to create
          type: string
        ManagedPolicyArns:
          description: 'A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role. '
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Path:
          description: The path to the group
          type: string
        Policies:
          description: Adds or updates an inline policy document that is embedded in the specified IAM group
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Policy'
      x-stackql-resource-name: group
      x-stackql-primaryIdentifier:
        - GroupName
      x-create-only-properties:
        - GroupName
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - iam:CreateGroup
          - iam:PutGroupPolicy
          - iam:AttachGroupPolicy
          - iam:GetGroupPolicy
          - iam:GetGroup
        read:
          - iam:GetGroup
          - iam:ListGroupPolicies
          - iam:GetGroupPolicy
          - iam:ListAttachedGroupPolicies
        update:
          - iam:GetGroup
          - iam:UpdateGroup
          - iam:DetachGroupPolicy
          - iam:AttachGroupPolicy
          - iam:DeleteGroupPolicy
          - iam:PutGroupPolicy
          - iam:GetGroupPolicy
        delete:
          - iam:GetGroup
          - iam:DeleteGroup
          - iam:ListAttachedGroupPolicies
          - iam:ListGroupPolicies
          - iam:DetachGroupPolicy
          - iam:DeleteGroupPolicy
          - iam:GetGroupPolicy
        list:
          - iam:ListGroups
    GroupPolicy:
      type: object
      properties:
        PolicyDocument:
          description: |-
            The policy document.
             You must provide policies in JSON format in IAM. However, for CFN templates formatted in YAML, you can provide the policy in JSON or YAML format. CFN always converts a YAML policy to JSON format before submitting it to IAM.
             The [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
              +  Any printable ASCII character ranging from the space character (``\u0020``) through the end of the ASCII character range
              +  The printable characters in the Basic Latin and Latin-1 Supplement character set (through ``\u00FF``)
              +  The special characters tab (``\u0009``), line feed (``\u000A``), and carriage return (``\u000D``)
          type: object
        PolicyName:
          description: |-
            The name of the policy document.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
          type: string
        GroupName:
          description: |-
            The name of the group to associate the policy with.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.
          type: string
      required:
        - PolicyName
        - GroupName
      x-stackql-resource-name: group_policy
      x-stackql-primaryIdentifier:
        - PolicyName
        - GroupName
      x-create-only-properties:
        - PolicyName
        - GroupName
      x-required-permissions:
        create:
          - iam:PutGroupPolicy
          - iam:GetGroupPolicy
        read:
          - iam:GetGroupPolicy
        update:
          - iam:PutGroupPolicy
          - iam:GetGroupPolicy
        delete:
          - iam:DeleteGroupPolicy
          - iam:GetGroupPolicy
    InstanceProfile:
      type: object
      properties:
        Path:
          type: string
          description: |-
            The path to the instance profile. For more information about paths, see [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
             This parameter is optional. If it is not included, it defaults to a slash (/).
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
        Roles:
          type: array
          description: The name of the role to associate with the instance profile. Only one role can be assigned to an EC2 instance at a time, and all applications on the instance share the same role and permissions.
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        InstanceProfileName:
          type: string
          description: |-
            The name of the instance profile to create.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
        Arn:
          type: string
          description: ''
      required:
        - Roles
      x-stackql-resource-name: instance_profile
      x-stackql-primaryIdentifier:
        - InstanceProfileName
      x-create-only-properties:
        - InstanceProfileName
        - Path
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - iam:CreateInstanceProfile
          - iam:PassRole
          - iam:AddRoleToInstanceProfile
          - iam:GetInstanceProfile
        read:
          - iam:GetInstanceProfile
        update:
          - iam:PassRole
          - iam:RemoveRoleFromInstanceProfile
          - iam:AddRoleToInstanceProfile
          - iam:GetInstanceProfile
        delete:
          - iam:GetInstanceProfile
          - iam:RemoveRoleFromInstanceProfile
          - iam:DeleteInstanceProfile
        list:
          - iam:ListInstanceProfiles
    ManagedPolicy:
      type: object
      properties:
        Description:
          type: string
          description: A friendly description of the policy.
        Groups:
          x-insertionOrder: false
          type: array
          description: The name (friendly name, not ARN) of the group to attach the policy to.
          uniqueItems: true
          items:
            type: string
        ManagedPolicyName:
          type: string
          description: The friendly name of the policy.
        Path:
          type: string
          description: The path for the policy.
        PolicyDocument:
          type: object
          description: The JSON policy document that you want to use as the content for the new policy.
        Roles:
          x-insertionOrder: false
          type: array
          description: The name (friendly name, not ARN) of the role to attach the policy to.
          uniqueItems: true
          items:
            type: string
        Users:
          x-insertionOrder: false
          type: array
          description: The name (friendly name, not ARN) of the IAM user to attach the policy to.
          uniqueItems: true
          items:
            type: string
        PolicyArn:
          type: string
          description: Amazon Resource Name (ARN) of the managed policy
        AttachmentCount:
          type: integer
          description: The number of entities (users, groups, and roles) that the policy is attached to.
        CreateDate:
          type: string
          description: The date and time, in ISO 8601 date-time format, when the policy was created.
        UpdateDate:
          type: string
          description: The date and time, in ISO 8601 date-time format, when the policy was last updated.
        DefaultVersionId:
          type: string
          description: The identifier for the version of the policy that is set as the default version.
        IsAttachable:
          type: boolean
          description: Specifies whether the policy can be attached to an IAM user, group, or role.
        PermissionsBoundaryUsageCount:
          type: integer
          description: The number of entities (users and roles) for which the policy is used to set the permissions boundary.
        PolicyId:
          type: string
          description: The stable and unique string identifying the policy.
      required:
        - PolicyDocument
      x-stackql-resource-name: managed_policy
      x-stackql-primaryIdentifier:
        - PolicyArn
      x-create-only-properties:
        - ManagedPolicyName
        - Description
        - Path
      x-read-only-properties:
        - PolicyArn
        - AttachmentCount
        - CreateDate
        - DefaultVersionId
        - IsAttachable
        - PermissionsBoundaryUsageCount
        - PolicyId
        - UpdateDate
      x-required-permissions:
        create:
          - iam:CreatePolicy
          - iam:AttachGroupPolicy
          - iam:AttachUserPolicy
          - iam:AttachRolePolicy
        read:
          - iam:GetPolicy
          - iam:ListEntitiesForPolicy
          - iam:GetPolicyVersion
        update:
          - iam:DetachRolePolicy
          - iam:GetPolicy
          - iam:ListPolicyVersions
          - iam:DetachGroupPolicy
          - iam:DetachUserPolicy
          - iam:CreatePolicyVersion
          - iam:DeletePolicyVersion
          - iam:AttachGroupPolicy
          - iam:AttachUserPolicy
          - iam:AttachRolePolicy
        delete:
          - iam:DetachRolePolicy
          - iam:GetPolicy
          - iam:ListPolicyVersions
          - iam:DetachGroupPolicy
          - iam:DetachUserPolicy
          - iam:DeletePolicyVersion
          - iam:DeletePolicy
          - iam:ListEntitiesForPolicy
        list:
          - iam:ListPolicies
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      additionalProperties: false
      properties:
        Value:
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          minLength: 1
          maxLength: 256
        Key:
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          type: string
          minLength: 1
          maxLength: 128
      required:
        - Value
        - Key
    OIDCProvider:
      type: object
      properties:
        ClientIdList:
          type: array
          x-insertionOrder: false
          items:
            minLength: 1
            maxLength: 255
            type: string
        Url:
          minLength: 1
          maxLength: 255
          type: string
        ThumbprintList:
          type: array
          x-insertionOrder: false
          items:
            minLength: 40
            maxLength: 40
            pattern: '[0-9A-Fa-f]{40}'
            type: string
          maxItems: 5
        Arn:
          description: Amazon Resource Name (ARN) of the OIDC provider
          minLength: 20
          maxLength: 2048
          type: string
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ThumbprintList
      x-stackql-resource-name: oidc_provider
      x-stackql-primaryIdentifier:
        - Arn
      x-create-only-properties:
        - Url
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - iam:CreateOpenIDConnectProvider
          - iam:TagOpenIDConnectProvider
          - iam:GetOpenIDConnectProvider
        read:
          - iam:GetOpenIDConnectProvider
        update:
          - iam:UpdateOpenIDConnectProviderThumbprint
          - iam:RemoveClientIDFromOpenIDConnectProvider
          - iam:AddClientIDToOpenIDConnectProvider
          - iam:GetOpenIDConnectProvider
          - iam:TagOpenIDConnectProvider
          - iam:UntagOpenIDConnectProvider
          - iam:ListOpenIDConnectProviderTags
        delete:
          - iam:DeleteOpenIDConnectProvider
        list:
          - iam:ListOpenIDConnectProvider
          - iam:GetOpenIDConnectProvider
    Role:
      type: object
      properties:
        Arn:
          description: ''
          type: string
        AssumeRolePolicyDocument:
          description: >-
            The trust policy that is associated with this role. Trust policies define which entities can assume the role. You can associate only one trust policy with a role. For an example of a policy that can be used to assume a role, see [Template Examples](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html#aws-resource-iam-role--examples). For more information about the elements that you can use in an IAM policy, see [Policy Elements
            Reference](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html) in the *User Guide*.
          type: object
        Description:
          description: A description of the role that you provide.
          type: string
        ManagedPolicyArns:
          description: |-
            A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the role.
             For more information about ARNs, see [Amazon Resource Names (ARNs) and Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        MaxSessionDuration:
          description: |-
            The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default value of one hour is applied. This setting can have a value from 1 hour to 12 hours.
             Anyone who assumes the role from the CLI or API can use the ``DurationSeconds`` API parameter or the ``duration-seconds`` CLI parameter to request a longer session. The ``MaxSessionDuration`` setting determines the maximum duration that can be requested using the ``DurationSeconds`` parameter. If users don't specify a value for the ``DurationSeconds`` parameter, their security credentials are valid for one hour by default. This applies when you use the ``AssumeRole*`` API operations or the ``assume-role*`` CLI operations but does not apply when you use those operations to create a console URL. For more information, see [Using IAM roles](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html) in the *IAM User Guide*.
          type: integer
        Path:
          description: |-
            The path to the role. For more information about paths, see [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
             This parameter is optional. If it is not included, it defaults to a slash (/).
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
          default: /
          type: string
        PermissionsBoundary:
          description: |-
            The ARN of the policy used to set the permissions boundary for the role.
             For more information about permissions boundaries, see [Permissions boundaries for IAM identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the *IAM User Guide*.
          type: string
        Policies:
          description: |-
            Adds or updates an inline policy document that is embedded in the specified IAM role.
             When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role. You can update a role's trust policy later. For more information about IAM roles, go to [Using Roles to Delegate Permissions and Federate Identities](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html).
             A role can also have an attached managed policy. For information about policies, see [Managed Policies and Inline Policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html) in the *User Guide*.
             For information about limits on the number of inline policies that you can embed with a role, see [Limitations on Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*.
              If an external policy (such as ``AWS::IAM::Policy`` or
          type: array
          x-insertionOrder: false
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Policy'
        RoleId:
          description: ''
          type: string
        RoleName:
          description: |-
            A name for the IAM role, up to 64 characters in length. For valid values, see the ``RoleName`` parameter for the [CreateRole](https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html) action in the *User Guide*.
             This parameter allows (per its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-. The role name must be unique within the account. Role names are not distinguished by case. For example, you cannot create roles named both "Role1" and "role1".
             If you don't specify a name, CFN generates a unique physical ID and uses that ID for the role name.
             If you specify a name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more information, see [Acknowledging Resources in Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/Use
          type: string
        Tags:
          description: A list of tags that are attached to the role. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide*.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AssumeRolePolicyDocument
      x-stackql-resource-name: role
      x-stackql-primaryIdentifier:
        - RoleName
      x-create-only-properties:
        - Path
        - RoleName
      x-read-only-properties:
        - Arn
        - RoleId
      x-required-permissions:
        create:
          - iam:CreateRole
          - iam:PutRolePolicy
          - iam:AttachRolePolicy
          - iam:GetRolePolicy
          - iam:TagRole
          - iam:UntagRole
          - iam:GetRole
        read:
          - iam:GetRole
          - iam:ListAttachedRolePolicies
          - iam:ListRolePolicies
          - iam:GetRolePolicy
        update:
          - iam:UpdateRole
          - iam:UpdateRoleDescription
          - iam:UpdateAssumeRolePolicy
          - iam:DetachRolePolicy
          - iam:AttachRolePolicy
          - iam:DeleteRolePermissionsBoundary
          - iam:PutRolePermissionsBoundary
          - iam:DeleteRolePolicy
          - iam:PutRolePolicy
          - iam:TagRole
          - iam:UntagRole
        delete:
          - iam:DeleteRole
          - iam:DetachRolePolicy
          - iam:DeleteRolePolicy
          - iam:GetRole
          - iam:ListAttachedRolePolicies
          - iam:ListRolePolicies
          - iam:TagRole
          - iam:UntagRole
        list:
          - iam:ListRoles
    RolePolicy:
      type: object
      properties:
        PolicyDocument:
          description: |-
            The policy document.
             You must provide policies in JSON format in IAM. However, for CFN templates formatted in YAML, you can provide the policy in JSON or YAML format. CFN always converts a YAML policy to JSON format before submitting it to IAM.
             The [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex) used to validate this parameter is a string of characters consisting of the following:
              +  Any printable ASCII character ranging from the space character (``\u0020``) through the end of the ASCII character range
              +  The printable characters in the Basic Latin and Latin-1 Supplement character set (through ``\u00FF``)
              +  The special characters tab (``\u0009``), line feed (``\u000A``), and carriage return (``\u000D``)
          type: object
        PolicyName:
          description: |-
            The name of the policy document.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
          type: string
        RoleName:
          description: |-
            The name of the role to associate the policy with.
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-
          type: string
      required:
        - PolicyName
        - RoleName
      x-stackql-resource-name: role_policy
      x-stackql-primaryIdentifier:
        - PolicyName
        - RoleName
      x-create-only-properties:
        - PolicyName
        - RoleName
      x-required-permissions:
        create:
          - iam:PutRolePolicy
          - iam:GetRolePolicy
        read:
          - iam:GetRolePolicy
        update:
          - iam:PutRolePolicy
          - iam:GetRolePolicy
        delete:
          - iam:DeleteRolePolicy
          - iam:GetRolePolicy
    SAMLProvider:
      type: object
      properties:
        Name:
          minLength: 1
          maxLength: 128
          pattern: '[\w._-]+'
          type: string
        SamlMetadataDocument:
          minLength: 1000
          maxLength: 10000000
          type: string
        Arn:
          description: Amazon Resource Name (ARN) of the SAML provider
          minLength: 1
          maxLength: 1600
          type: string
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - SamlMetadataDocument
      x-stackql-resource-name: saml_provider
      x-stackql-primaryIdentifier:
        - Arn
      x-create-only-properties:
        - Name
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - iam:CreateSAMLProvider
          - iam:GetSAMLProvider
          - iam:TagSAMLProvider
        read:
          - iam:GetSAMLProvider
        update:
          - iam:UpdateSAMLProvider
          - iam:GetSAMLProvider
          - iam:TagSAMLProvider
          - iam:ListSAMLProviderTags
          - iam:UntagSAMLProvider
        delete:
          - iam:DeleteSAMLProvider
        list:
          - iam:ListSAMLProviders
          - iam:GetSAMLProvider
    ServerCertificate:
      type: object
      properties:
        CertificateBody:
          minLength: 1
          maxLength: 16384
          pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
          type: string
        CertificateChain:
          minLength: 1
          maxLength: 2097152
          pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
          type: string
        ServerCertificateName:
          minLength: 1
          maxLength: 128
          pattern: '[\w+=,.@-]+'
          type: string
        Path:
          minLength: 1
          maxLength: 512
          pattern: (\u002F)|(\u002F[\u0021-\u007F]+\u002F)
          type: string
        PrivateKey:
          minLength: 1
          maxLength: 16384
          pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
          type: string
        Arn:
          description: Amazon Resource Name (ARN) of the server certificate
          minLength: 1
          maxLength: 1600
          type: string
        Tags:
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: server_certificate
      x-stackql-primaryIdentifier:
        - ServerCertificateName
      x-create-only-properties:
        - ServerCertificateName
        - PrivateKey
        - CertificateBody
        - CertificateChain
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - iam:UploadServerCertificate
          - iam:TagServerCertificate
          - iam:GetServerCertificate
        read:
          - iam:GetServerCertificate
        update:
          - iam:TagServerCertificate
          - iam:UntagServerCertificate
          - iam:ListServerCertificateTags
          - iam:GetServerCertificate
        delete:
          - iam:DeleteServerCertificate
        list:
          - iam:ListServerCertificates
          - iam:GetServerCertificate
    ServiceLinkedRole:
      type: object
      properties:
        RoleName:
          description: The name of the role.
          type: string
        CustomSuffix:
          description: A string that you provide, which is combined with the service-provided prefix to form the complete role name.
          type: string
        Description:
          description: The description of the role.
          type: string
        AWSServiceName:
          description: The service principal for the AWS service to which this role is attached.
          type: string
      required: []
      x-stackql-resource-name: service_linked_role
      x-stackql-primaryIdentifier:
        - RoleName
      x-create-only-properties:
        - CustomSuffix
        - AWSServiceName
      x-read-only-properties:
        - RoleName
      x-required-permissions:
        create:
          - iam:CreateServiceLinkedRole
          - iam:GetRole
        read:
          - iam:GetRole
        update:
          - iam:UpdateRole
          - iam:GetRole
        delete:
          - iam:DeleteServiceLinkedRole
          - iam:GetServiceLinkedRoleDeletionStatus
          - iam:GetRole
    LoginProfile:
      description: Creates a password for the specified user, giving the user the ability to access AWS services through the console. For more information about managing passwords, see [Managing Passwords](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html) in the *User Guide*.
      type: object
      additionalProperties: false
      properties:
        PasswordResetRequired:
          description: Specifies whether the user is required to set a new password on next sign-in.
          type: boolean
        Password:
          description: The user's password.
          type: string
      required:
        - Password
    User:
      type: object
      properties:
        Path:
          description: |-
            The path for the user name. For more information about paths, see [IAM identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html) in the *IAM User Guide*.
             This parameter is optional. If it is not included, it defaults to a slash (/).
             This parameter allows (through its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (``\u0021``) through the DEL character (``\u007F``), including most punctuation characters, digits, and upper and lowercased letters.
          type: string
        ManagedPolicyArns:
          description: |-
            A list of Amazon Resource Names (ARNs) of the IAM managed policies that you want to attach to the user.
             For more information about ARNs, see [Amazon Resource Names (ARNs) and Service Namespaces](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html) in the *General Reference*.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Policies:
          description: |-
            Adds or updates an inline policy document that is embedded in the specified IAM user. To view AWS::IAM::User snippets, see [Declaring an User Resource](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-iam.html#scenario-iam-user).
              The name of each policy for a role, user, or group must be unique. If you don't choose unique names, updates to the IAM identity will fail. 
              For information about limits on the number of inline policies that you can embed in a user, see [Limitations on Entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/LimitationsOnEntities.html) in the *User Guide*.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Policy'
        UserName:
          description: |-
            The name of the user to create. Do not include the path in this value.
             This parameter allows (per its [regex pattern](https://docs.aws.amazon.com/http://wikipedia.org/wiki/regex)) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-. The user name must be unique within the account. User names are not distinguished by case. For example, you cannot create users named both "John" and "john".
             If you don't specify a name, CFN generates a unique physical ID and uses that ID for the user name.
             If you specify a name, you must specify the ``CAPABILITY_NAMED_IAM`` value to acknowledge your template's capabilities. For more information, see [Acknowledging Resources in Templates](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-iam-template.html#using-iam-capabilities).
              Naming an IAM resource can cause an unrecoverable error if you reuse the same template in multiple Regions. To prevent this, we recommend using ``Fn::Join`` and ``AWS::Region`` to create a Region-specific name, as in the following example: ``{"Fn::Join": ["", [{"Ref": "AWS::Region"}, {"Ref": "MyResourceName"}]]}``.
          type: string
        Groups:
          description: A list of group names to which you want to add the user.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            type: string
        Arn:
          description: ''
          type: string
        LoginProfile:
          description: |-
            Creates a password for the specified IAM user. A password allows an IAM user to access AWS services through the console.
             You can use the CLI, the AWS API, or the *Users* page in the IAM console to create a password for any IAM user. Use [ChangePassword](https://docs.aws.amazon.com/IAM/latest/APIReference/API_ChangePassword.html) to update your own existing password in the *My Security Credentials* page in the console.
             For more information about managing passwords, see [Managing passwords](https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html) in the *User Guide*.
          $ref: '#/components/schemas/LoginProfile'
        Tags:
          description: |-
            A list of tags that you want to attach to the new user. Each tag consists of a key name and an associated value. For more information about tagging, see [Tagging IAM resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the *IAM User Guide*.
              If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.
          type: array
          uniqueItems: false
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        PermissionsBoundary:
          description: |-
            The ARN of the managed policy that is used to set the permissions boundary for the user.
             A permissions boundary policy defines the maximum permissions that identity-based policies can grant to an entity, but does not grant permissions. Permissions boundaries do not define the maximum permissions that a resource-based policy can grant to an entity. To learn more, see [Permissions boundaries for IAM entities](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html) in the *IAM User Guide*.
             For more information about policy types, see [Policy types](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policy-types) in the *IAM User Guide*.
          type: string
      x-stackql-resource-name: user
      x-stackql-primaryIdentifier:
        - UserName
      x-create-only-properties:
        - UserName
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - iam:CreateLoginProfile
          - iam:AddUserToGroup
          - iam:PutUserPolicy
          - iam:AttachUserPolicy
          - iam:CreateUser
          - iam:GetUser
          - iam:TagUser
        read:
          - iam:GetUserPolicy
          - iam:ListGroupsForUser
          - iam:ListAttachedUserPolicies
          - iam:ListUserPolicies
          - iam:GetUser
          - iam:GetLoginProfile
        update:
          - iam:UpdateLoginProfile
          - iam:UpdateUser
          - iam:PutUserPermissionsBoundary
          - iam:AttachUserPolicy
          - iam:DeleteUserPolicy
          - iam:DeleteUserPermissionsBoundary
          - iam:TagUser
          - iam:UntagUser
          - iam:CreateLoginProfile
          - iam:RemoveUserFromGroup
          - iam:AddUserToGroup
          - iam:PutUserPolicy
          - iam:DetachUserPolicy
          - iam:GetLoginProfile
          - iam:DeleteLoginProfile
          - iam:GetUser
          - iam:ListUserTags
        delete:
          - iam:DeleteAccessKey
          - iam:RemoveUserFromGroup
          - iam:DeleteUserPolicy
          - iam:DeleteUser
          - iam:DetachUserPolicy
          - iam:DeleteLoginProfile
          - iam:ListAccessKeys
          - iam:GetUserPolicy
          - iam:ListGroupsForUser
          - iam:ListAttachedUserPolicies
          - iam:ListUserPolicies
          - iam:GetUser
          - iam:GetLoginProfile
        list:
          - iam:listUsers
    UserPolicy:
      type: object
      properties:
        PolicyDocument:
          description: The policy document.
          type: object
        PolicyName:
          description: The name of the policy document.
          type: string
        UserName:
          description: The name of the user to associate the policy with.
          type: string
      required:
        - PolicyName
        - UserName
      x-stackql-resource-name: user_policy
      x-stackql-primaryIdentifier:
        - PolicyName
        - UserName
      x-create-only-properties:
        - PolicyName
        - UserName
      x-required-permissions:
        create:
          - iam:PutUserPolicy
          - iam:GetUserPolicy
        read:
          - iam:GetUserPolicy
        update:
          - iam:PutUserPolicy
          - iam:GetUserPolicy
        delete:
          - iam:DeleteUserPolicy
          - iam:GetUserPolicy
    VirtualMFADevice:
      type: object
      properties:
        VirtualMfaDeviceName:
          minLength: 1
          maxLength: 226
          pattern: '[\w+=,.@-]+'
          type: string
        Path:
          minLength: 1
          maxLength: 512
          pattern: (\u002F)|(\u002F[\u0021-\u007F]+\u002F)
          type: string
        SerialNumber:
          minLength: 9
          maxLength: 256
          pattern: '[\w+=/:,.@-]+'
          type: string
        Users:
          type: array
          uniqueItems: false
          items:
            type: string
        Tags:
          type: array
          uniqueItems: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Users
      x-stackql-resource-name: virtualmfa_device
      x-stackql-primaryIdentifier:
        - SerialNumber
      x-create-only-properties:
        - VirtualMfaDeviceName
        - Base32StringSeed
        - Path
      x-read-only-properties:
        - SerialNumber
      x-required-permissions:
        create:
          - iam:CreateVirtualMFADevice
          - iam:EnableMFADevice
          - iam:ListVirtualMFADevices
        read:
          - iam:ListVirtualMFADevices
        update:
          - iam:TagMFADevice
          - iam:UntagMFADevice
        delete:
          - iam:DeleteVirtualMFADevice
          - iam:DeactivateMFADevice
        list:
          - iam:ListVirtualMFADevices
  x-stackQL-resources:
    groups:
      name: groups
      id: awscc.iam.groups
      x-cfn-schema-name: Group
      x-type: list
      x-identifiers:
        - GroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::Group'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'GroupName') as group_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::Group'
                AND region = 'us-east-1'
    group:
      name: group
      id: awscc.iam.group
      x-cfn-schema-name: Group
      x-type: get
      x-identifiers:
        - GroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name,
              JSON_EXTRACT(Properties, '$.ManagedPolicyArns') as managed_policy_arns,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.Policies') as policies
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::Group'
              AND data__Identifier = '<GroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'GroupName') as group_name,
                json_extract_path_text(Properties, 'ManagedPolicyArns') as managed_policy_arns,
                json_extract_path_text(Properties, 'Path') as path,
                json_extract_path_text(Properties, 'Policies') as policies
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::Group'
                AND data__Identifier = '<GroupName>'
                AND region = 'us-east-1'
    group_policies:
      name: group_policies
      id: awscc.iam.group_policies
      x-cfn-schema-name: GroupPolicy
      x-type: list
      x-identifiers:
        - PolicyName
        - GroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::GroupPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'GroupName') as group_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::GroupPolicy'
                AND region = 'us-east-1'
    group_policy:
      name: group_policy
      id: awscc.iam.group_policy
      x-cfn-schema-name: GroupPolicy
      x-type: get
      x-identifiers:
        - PolicyName
        - GroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.GroupName') as group_name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::GroupPolicy'
              AND data__Identifier = '<PolicyName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'GroupName') as group_name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::GroupPolicy'
                AND data__Identifier = '<PolicyName>'
                AND region = 'us-east-1'
    instance_profiles:
      name: instance_profiles
      id: awscc.iam.instance_profiles
      x-cfn-schema-name: InstanceProfile
      x-type: list
      x-identifiers:
        - InstanceProfileName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.InstanceProfileName') as instance_profile_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::InstanceProfile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'InstanceProfileName') as instance_profile_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::InstanceProfile'
                AND region = 'us-east-1'
    instance_profile:
      name: instance_profile
      id: awscc.iam.instance_profile
      x-cfn-schema-name: InstanceProfile
      x-type: get
      x-identifiers:
        - InstanceProfileName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.Roles') as roles,
              JSON_EXTRACT(Properties, '$.InstanceProfileName') as instance_profile_name,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::InstanceProfile'
              AND data__Identifier = '<InstanceProfileName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Path') as path,
                json_extract_path_text(Properties, 'Roles') as roles,
                json_extract_path_text(Properties, 'InstanceProfileName') as instance_profile_name,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::InstanceProfile'
                AND data__Identifier = '<InstanceProfileName>'
                AND region = 'us-east-1'
    managed_policies:
      name: managed_policies
      id: awscc.iam.managed_policies
      x-cfn-schema-name: ManagedPolicy
      x-type: list
      x-identifiers:
        - PolicyArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyArn') as policy_arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::ManagedPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyArn') as policy_arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::ManagedPolicy'
                AND region = 'us-east-1'
    managed_policy:
      name: managed_policy
      id: awscc.iam.managed_policy
      x-cfn-schema-name: ManagedPolicy
      x-type: get
      x-identifiers:
        - PolicyArn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Groups') as groups,
              JSON_EXTRACT(Properties, '$.ManagedPolicyName') as managed_policy_name,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.Roles') as roles,
              JSON_EXTRACT(Properties, '$.Users') as users,
              JSON_EXTRACT(Properties, '$.PolicyArn') as policy_arn,
              JSON_EXTRACT(Properties, '$.AttachmentCount') as attachment_count,
              JSON_EXTRACT(Properties, '$.CreateDate') as create_date,
              JSON_EXTRACT(Properties, '$.UpdateDate') as update_date,
              JSON_EXTRACT(Properties, '$.DefaultVersionId') as default_version_id,
              JSON_EXTRACT(Properties, '$.IsAttachable') as is_attachable,
              JSON_EXTRACT(Properties, '$.PermissionsBoundaryUsageCount') as permissions_boundary_usage_count,
              JSON_EXTRACT(Properties, '$.PolicyId') as policy_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::ManagedPolicy'
              AND data__Identifier = '<PolicyArn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Groups') as groups,
                json_extract_path_text(Properties, 'ManagedPolicyName') as managed_policy_name,
                json_extract_path_text(Properties, 'Path') as path,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'Roles') as roles,
                json_extract_path_text(Properties, 'Users') as users,
                json_extract_path_text(Properties, 'PolicyArn') as policy_arn,
                json_extract_path_text(Properties, 'AttachmentCount') as attachment_count,
                json_extract_path_text(Properties, 'CreateDate') as create_date,
                json_extract_path_text(Properties, 'UpdateDate') as update_date,
                json_extract_path_text(Properties, 'DefaultVersionId') as default_version_id,
                json_extract_path_text(Properties, 'IsAttachable') as is_attachable,
                json_extract_path_text(Properties, 'PermissionsBoundaryUsageCount') as permissions_boundary_usage_count,
                json_extract_path_text(Properties, 'PolicyId') as policy_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::ManagedPolicy'
                AND data__Identifier = '<PolicyArn>'
                AND region = 'us-east-1'
    oidc_providers:
      name: oidc_providers
      id: awscc.iam.oidc_providers
      x-cfn-schema-name: OIDCProvider
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::OIDCProvider'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::OIDCProvider'
                AND region = 'us-east-1'
    oidc_provider:
      name: oidc_provider
      id: awscc.iam.oidc_provider
      x-cfn-schema-name: OIDCProvider
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ClientIdList') as client_id_list,
              JSON_EXTRACT(Properties, '$.Url') as url,
              JSON_EXTRACT(Properties, '$.ThumbprintList') as thumbprint_list,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::OIDCProvider'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ClientIdList') as client_id_list,
                json_extract_path_text(Properties, 'Url') as url,
                json_extract_path_text(Properties, 'ThumbprintList') as thumbprint_list,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::OIDCProvider'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    roles:
      name: roles
      id: awscc.iam.roles
      x-cfn-schema-name: Role
      x-type: list
      x-identifiers:
        - RoleName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RoleName') as role_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::Role'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RoleName') as role_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::Role'
                AND region = 'us-east-1'
    role:
      name: role
      id: awscc.iam.role
      x-cfn-schema-name: Role
      x-type: get
      x-identifiers:
        - RoleName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AssumeRolePolicyDocument') as assume_role_policy_document,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ManagedPolicyArns') as managed_policy_arns,
              JSON_EXTRACT(Properties, '$.MaxSessionDuration') as max_session_duration,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.PermissionsBoundary') as permissions_boundary,
              JSON_EXTRACT(Properties, '$.Policies') as policies,
              JSON_EXTRACT(Properties, '$.RoleId') as role_id,
              JSON_EXTRACT(Properties, '$.RoleName') as role_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::Role'
              AND data__Identifier = '<RoleName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'AssumeRolePolicyDocument') as assume_role_policy_document,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'ManagedPolicyArns') as managed_policy_arns,
                json_extract_path_text(Properties, 'MaxSessionDuration') as max_session_duration,
                json_extract_path_text(Properties, 'Path') as path,
                json_extract_path_text(Properties, 'PermissionsBoundary') as permissions_boundary,
                json_extract_path_text(Properties, 'Policies') as policies,
                json_extract_path_text(Properties, 'RoleId') as role_id,
                json_extract_path_text(Properties, 'RoleName') as role_name,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::Role'
                AND data__Identifier = '<RoleName>'
                AND region = 'us-east-1'
    role_policies:
      name: role_policies
      id: awscc.iam.role_policies
      x-cfn-schema-name: RolePolicy
      x-type: list
      x-identifiers:
        - PolicyName
        - RoleName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.RoleName') as role_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::RolePolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'RoleName') as role_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::RolePolicy'
                AND region = 'us-east-1'
    role_policy:
      name: role_policy
      id: awscc.iam.role_policy
      x-cfn-schema-name: RolePolicy
      x-type: get
      x-identifiers:
        - PolicyName
        - RoleName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.RoleName') as role_name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::RolePolicy'
              AND data__Identifier = '<PolicyName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'RoleName') as role_name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::RolePolicy'
                AND data__Identifier = '<PolicyName>'
                AND region = 'us-east-1'
    saml_providers:
      name: saml_providers
      id: awscc.iam.saml_providers
      x-cfn-schema-name: SAMLProvider
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::SAMLProvider'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::SAMLProvider'
                AND region = 'us-east-1'
    saml_provider:
      name: saml_provider
      id: awscc.iam.saml_provider
      x-cfn-schema-name: SAMLProvider
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.SamlMetadataDocument') as saml_metadata_document,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::SAMLProvider'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'SamlMetadataDocument') as saml_metadata_document,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::SAMLProvider'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    server_certificates:
      name: server_certificates
      id: awscc.iam.server_certificates
      x-cfn-schema-name: ServerCertificate
      x-type: list
      x-identifiers:
        - ServerCertificateName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ServerCertificateName') as server_certificate_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::ServerCertificate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ServerCertificateName') as server_certificate_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::ServerCertificate'
                AND region = 'us-east-1'
    server_certificate:
      name: server_certificate
      id: awscc.iam.server_certificate
      x-cfn-schema-name: ServerCertificate
      x-type: get
      x-identifiers:
        - ServerCertificateName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CertificateBody') as certificate_body,
              JSON_EXTRACT(Properties, '$.CertificateChain') as certificate_chain,
              JSON_EXTRACT(Properties, '$.ServerCertificateName') as server_certificate_name,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.PrivateKey') as private_key,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::ServerCertificate'
              AND data__Identifier = '<ServerCertificateName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CertificateBody') as certificate_body,
                json_extract_path_text(Properties, 'CertificateChain') as certificate_chain,
                json_extract_path_text(Properties, 'ServerCertificateName') as server_certificate_name,
                json_extract_path_text(Properties, 'Path') as path,
                json_extract_path_text(Properties, 'PrivateKey') as private_key,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::ServerCertificate'
                AND data__Identifier = '<ServerCertificateName>'
                AND region = 'us-east-1'
    service_linked_roles:
      name: service_linked_roles
      id: awscc.iam.service_linked_roles
      x-cfn-schema-name: ServiceLinkedRole
      x-type: list
      x-identifiers:
        - RoleName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RoleName') as role_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::ServiceLinkedRole'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RoleName') as role_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::ServiceLinkedRole'
                AND region = 'us-east-1'
    service_linked_role:
      name: service_linked_role
      id: awscc.iam.service_linked_role
      x-cfn-schema-name: ServiceLinkedRole
      x-type: get
      x-identifiers:
        - RoleName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RoleName') as role_name,
              JSON_EXTRACT(Properties, '$.CustomSuffix') as custom_suffix,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.AWSServiceName') as aws_service_name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::ServiceLinkedRole'
              AND data__Identifier = '<RoleName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RoleName') as role_name,
                json_extract_path_text(Properties, 'CustomSuffix') as custom_suffix,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'AWSServiceName') as aws_service_name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::ServiceLinkedRole'
                AND data__Identifier = '<RoleName>'
                AND region = 'us-east-1'
    users:
      name: users
      id: awscc.iam.users
      x-cfn-schema-name: User
      x-type: list
      x-identifiers:
        - UserName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.UserName') as user_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::User'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'UserName') as user_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::User'
                AND region = 'us-east-1'
    user:
      name: user
      id: awscc.iam.user
      x-cfn-schema-name: User
      x-type: get
      x-identifiers:
        - UserName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.ManagedPolicyArns') as managed_policy_arns,
              JSON_EXTRACT(Properties, '$.Policies') as policies,
              JSON_EXTRACT(Properties, '$.UserName') as user_name,
              JSON_EXTRACT(Properties, '$.Groups') as groups,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.LoginProfile') as login_profile,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.PermissionsBoundary') as permissions_boundary
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::User'
              AND data__Identifier = '<UserName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Path') as path,
                json_extract_path_text(Properties, 'ManagedPolicyArns') as managed_policy_arns,
                json_extract_path_text(Properties, 'Policies') as policies,
                json_extract_path_text(Properties, 'UserName') as user_name,
                json_extract_path_text(Properties, 'Groups') as groups,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'LoginProfile') as login_profile,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'PermissionsBoundary') as permissions_boundary
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::User'
                AND data__Identifier = '<UserName>'
                AND region = 'us-east-1'
    user_policies:
      name: user_policies
      id: awscc.iam.user_policies
      x-cfn-schema-name: UserPolicy
      x-type: list
      x-identifiers:
        - PolicyName
        - UserName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.UserName') as user_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::UserPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'UserName') as user_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::UserPolicy'
                AND region = 'us-east-1'
    user_policy:
      name: user_policy
      id: awscc.iam.user_policy
      x-cfn-schema-name: UserPolicy
      x-type: get
      x-identifiers:
        - PolicyName
        - UserName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.UserName') as user_name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::UserPolicy'
              AND data__Identifier = '<PolicyName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'UserName') as user_name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::UserPolicy'
                AND data__Identifier = '<PolicyName>'
                AND region = 'us-east-1'
    virtualmfa_devices:
      name: virtualmfa_devices
      id: awscc.iam.virtualmfa_devices
      x-cfn-schema-name: VirtualMFADevice
      x-type: list
      x-identifiers:
        - SerialNumber
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SerialNumber') as serial_number
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::VirtualMFADevice'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SerialNumber') as serial_number
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IAM::VirtualMFADevice'
                AND region = 'us-east-1'
    virtualmfa_device:
      name: virtualmfa_device
      id: awscc.iam.virtualmfa_device
      x-cfn-schema-name: VirtualMFADevice
      x-type: get
      x-identifiers:
        - SerialNumber
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.VirtualMfaDeviceName') as virtual_mfa_device_name,
              JSON_EXTRACT(Properties, '$.Path') as path,
              JSON_EXTRACT(Properties, '$.SerialNumber') as serial_number,
              JSON_EXTRACT(Properties, '$.Users') as users,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::VirtualMFADevice'
              AND data__Identifier = '<SerialNumber>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'VirtualMfaDeviceName') as virtual_mfa_device_name,
                json_extract_path_text(Properties, 'Path') as path,
                json_extract_path_text(Properties, 'SerialNumber') as serial_number,
                json_extract_path_text(Properties, 'Users') as users,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IAM::VirtualMFADevice'
                AND data__Identifier = '<SerialNumber>'
                AND region = 'us-east-1'
