openapi: 3.0.0
info:
  title: DataZone
  version: 1.0.0
paths: {}
components:
  schemas:
    AccountId:
      type: string
      maxLength: 12
      minLength: 12
      pattern: ^\d{12}$
    DataAccessRole:
      type: string
      description: The data access role included in the configuration details of the AWS Glue data source.
      pattern: ^arn:aws[^:]*:iam::\d{12}:(role|role/service-role)/[\w+=,.@-]{1,128}$
    DataSourceConfigurationInput:
      description: Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
      oneOf:
        - type: object
          title: GlueRunConfiguration
          properties:
            GlueRunConfiguration:
              $ref: '#/components/schemas/GlueRunConfigurationInput'
          additionalProperties: false
        - type: object
          title: RedshiftRunConfiguration
          properties:
            RedshiftRunConfiguration:
              $ref: '#/components/schemas/RedshiftRunConfigurationInput'
          additionalProperties: false
    DataSourceStatus:
      type: string
      description: The status of the data source.
      enum:
        - CREATING
        - FAILED_CREATION
        - READY
        - UPDATING
        - FAILED_UPDATE
        - RUNNING
        - DELETING
        - FAILED_DELETION
    EnableSetting:
      type: string
      description: Specifies whether the data source is enabled.
      enum:
        - ENABLED
        - DISABLED
    FilterExpression:
      type: object
      description: The search filter expression.
      properties:
        Type:
          $ref: '#/components/schemas/FilterExpressionType'
        Expression:
          type: string
          maxLength: 2048
          minLength: 1
      required:
        - Expression
        - Type
      additionalProperties: false
    FilterExpressionType:
      type: string
      description: The search filter expression type.
      enum:
        - INCLUDE
        - EXCLUDE
    FormName:
      type: string
      description: The name of the metadata form.
      maxLength: 128
      minLength: 1
      pattern: ^(?![0-9_])\w+$|^_\w*[a-zA-Z0-9]\w*$
    FormInput:
      type: object
      description: The details of a metadata form.
      properties:
        FormName:
          description: The name of the metadata form.
          $ref: '#/components/schemas/FormName'
        TypeIdentifier:
          type: string
          description: The ID of the metadata form type.
          maxLength: 385
          minLength: 1
          pattern: ^(?!\.)[\w\.]*\w$
        TypeRevision:
          description: The revision of the metadata form type.
          $ref: '#/components/schemas/TypeRevision'
        Content:
          type: string
          description: The content of the metadata form.
          maxLength: 75000
      required:
        - FormName
      additionalProperties: false
    GlueRunConfigurationInput:
      type: object
      properties:
        DataAccessRole:
          description: The data access role included in the configuration details of the AWS Glue data source.
          $ref: '#/components/schemas/DataAccessRole'
        RelationalFilterConfigurations:
          type: array
          description: The relational filter configurations included in the configuration details of the AWS Glue data source.
          items:
            $ref: '#/components/schemas/RelationalFilterConfiguration'
          x-insertionOrder: false
      required:
        - RelationalFilterConfigurations
      additionalProperties: false
    RecommendationConfiguration:
      type: object
      description: The recommendation to be updated as part of the UpdateDataSource action.
      properties:
        EnableBusinessNameGeneration:
          type: boolean
          description: Specifies whether automatic business name generation is to be enabled or not as part of the recommendation configuration.
      additionalProperties: false
    RedshiftClusterStorage:
      type: object
      description: The name of an Amazon Redshift cluster.
      properties:
        ClusterName:
          type: string
          description: The name of an Amazon Redshift cluster.
          maxLength: 63
          minLength: 1
          pattern: ^[0-9a-z].[a-z0-9\-]*$
      required:
        - ClusterName
      additionalProperties: false
    RedshiftCredentialConfiguration:
      type: object
      description: The ARN of a secret manager for an Amazon Redshift cluster.
      properties:
        SecretManagerArn:
          type: string
          description: The ARN of a secret manager for an Amazon Redshift cluster.
          maxLength: 256
          pattern: ^arn:aws[^:]*:secretsmanager:[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]:\d{12}:secret:.*$
      required:
        - SecretManagerArn
      additionalProperties: false
    RedshiftRunConfigurationInput:
      type: object
      description: The configuration details of the Amazon Redshift data source.
      properties:
        DataAccessRole:
          description: The data access role included in the configuration details of the Amazon Redshift data source.
          $ref: '#/components/schemas/DataAccessRole'
        RelationalFilterConfigurations:
          $ref: '#/components/schemas/RelationalFilterConfigurations'
        RedshiftCredentialConfiguration:
          description: The details of the credentials required to access an Amazon Redshift cluster.
          $ref: '#/components/schemas/RedshiftCredentialConfiguration'
        RedshiftStorage:
          description: The details of the Amazon Redshift storage as part of the configuration of an Amazon Redshift data source run.
          $ref: '#/components/schemas/RedshiftStorage'
      required:
        - RedshiftCredentialConfiguration
        - RedshiftStorage
        - RelationalFilterConfigurations
      additionalProperties: false
    RedshiftServerlessStorage:
      type: object
      description: The details of the Amazon Redshift Serverless workgroup storage.
      properties:
        WorkgroupName:
          type: string
          description: The name of the Amazon Redshift Serverless workgroup.
          maxLength: 64
          minLength: 3
          pattern: ^[a-z0-9-]+$
      required:
        - WorkgroupName
      additionalProperties: false
    RedshiftStorage:
      description: The details of the Amazon Redshift storage as part of the configuration of an Amazon Redshift data source run.
      oneOf:
        - type: object
          title: RedshiftClusterSource
          description: The details of the Amazon Redshift cluster source.
          properties:
            RedshiftClusterSource:
              $ref: '#/components/schemas/RedshiftClusterStorage'
          required:
            - RedshiftClusterSource
          additionalProperties: false
        - type: object
          title: RedshiftServerlessSource
          description: The details of the Amazon Redshift Serverless workgroup source.
          properties:
            RedshiftServerlessSource:
              $ref: '#/components/schemas/RedshiftServerlessStorage'
          required:
            - RedshiftServerlessSource
          additionalProperties: false
    Region:
      type: string
      maxLength: 16
      minLength: 4
      pattern: '[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]'
    RelationalFilterConfiguration:
      type: object
      description: The relational filter configuration for the data source.
      properties:
        DatabaseName:
          type: string
          description: The database name specified in the relational filter configuration for the data source.
          maxLength: 128
          minLength: 1
        SchemaName:
          type: string
          description: The schema name specified in the relational filter configuration for the data source.
          maxLength: 128
          minLength: 1
        FilterExpressions:
          type: array
          description: The filter expressions specified in the relational filter configuration for the data source.
          items:
            $ref: '#/components/schemas/FilterExpression'
          x-insertionOrder: false
      required:
        - DatabaseName
      additionalProperties: false
    RelationalFilterConfigurations:
      type: array
      description: The relational filter configurations included in the configuration details of the Amazon Redshift data source.
      items:
        $ref: '#/components/schemas/RelationalFilterConfiguration'
      x-insertionOrder: false
    ScheduleConfiguration:
      type: object
      description: The schedule of the data source runs.
      properties:
        Timezone:
          description: The timezone of the data source run.
          $ref: '#/components/schemas/Timezone'
        Schedule:
          type: string
          description: The schedule of the data source runs.
          maxLength: 256
          minLength: 1
          pattern: cron\((\b[0-5]?[0-9]\b) (\b2[0-3]\b|\b[0-1]?[0-9]\b) (.*){1,5} (.*){1,5} (.*){1,5} (.*){1,5}\)
      additionalProperties: false
    Timezone:
      type: string
    TypeRevision:
      type: string
      description: The revision of the metadata form type.
      maxLength: 64
      minLength: 1
    DataSource:
      type: object
      properties:
        AssetFormsInput:
          type: array
          description: The metadata forms that are to be attached to the assets that this data source works with.
          items:
            $ref: '#/components/schemas/FormInput'
          maxItems: 10
          minItems: 0
          x-insertionOrder: false
        CreatedAt:
          type: string
          description: The timestamp of when the data source was created.
          format: date-time
        Description:
          type: string
          description: The description of the data source.
          maxLength: 2048
        DomainId:
          type: string
          description: The ID of the Amazon DataZone domain where the data source is created.
          pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
        DomainIdentifier:
          type: string
          description: The ID of the Amazon DataZone domain where the data source is created.
          pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
        EnableSetting:
          description: Specifies whether the data source is enabled.
          $ref: '#/components/schemas/EnableSetting'
        EnvironmentId:
          type: string
          description: The unique identifier of the Amazon DataZone environment to which the data source publishes assets.
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        EnvironmentIdentifier:
          description: The unique identifier of the Amazon DataZone environment to which the data source publishes assets.
          type: string
        Id:
          type: string
          description: The unique identifier of the data source.
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        Configuration:
          description: Configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
          $ref: '#/components/schemas/DataSourceConfigurationInput'
        LastRunAssetCount:
          description: The number of assets created by the data source during its last run.
          type: number
        LastRunAt:
          type: string
          description: The timestamp that specifies when the data source was last run.
        LastRunStatus:
          description: The status of the last run of this data source.
          type: string
        Name:
          type: string
          description: The name of the data source.
          maxLength: 256
          minLength: 1
        ProjectId:
          type: string
          description: The ID of the Amazon DataZone project to which the data source is added.
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        ProjectIdentifier:
          type: string
          description: The identifier of the Amazon DataZone project in which you want to add the data source.
        PublishOnImport:
          type: boolean
          description: Specifies whether the assets that this data source creates in the inventory are to be also automatically published to the catalog.
        Recommendation:
          $ref: '#/components/schemas/RecommendationConfiguration'
          description: Specifies whether the business name generation is to be enabled for this data source.
        Schedule:
          description: The schedule of the data source runs.
          $ref: '#/components/schemas/ScheduleConfiguration'
        Status:
          description: The status of the data source.
          $ref: '#/components/schemas/DataSourceStatus'
        Type:
          type: string
          description: The type of the data source.
          maxLength: 256
          minLength: 1
        UpdatedAt:
          type: string
          description: The timestamp of when this data source was updated.
          format: date-time
      required:
        - Name
        - DomainIdentifier
        - ProjectIdentifier
        - EnvironmentIdentifier
        - Type
      x-stackql-resource-name: data_source
      x-stackql-primaryIdentifier:
        - DomainId
        - Id
      x-create-only-properties:
        - EnvironmentIdentifier
        - DomainIdentifier
        - ProjectIdentifier
        - Type
      x-read-only-properties:
        - CreatedAt
        - DomainId
        - EnvironmentId
        - Id
        - LastRunAssetCount
        - LastRunAt
        - LastRunStatus
        - ProjectId
        - Status
        - UpdatedAt
      x-required-permissions:
        create:
          - datazone:CreateDataSource
          - iam:PassRole
          - datazone:GetDataSource
          - datazone:DeleteDataSource
        read:
          - datazone:GetDataSource
        update:
          - datazone:UpdateDataSource
          - datazone:GetDataSource
          - datazone:DeleteDataSource
        delete:
          - datazone:DeleteDataSource
          - datazone:GetDataSource
        list:
          - datazone:ListDataSources
    AuthType:
      type: string
      description: The type of single sign-on in Amazon DataZone.
      enum:
        - IAM_IDC
        - DISABLED
    DomainStatus:
      type: string
      description: The status of the Amazon DataZone domain.
      enum:
        - CREATING
        - AVAILABLE
        - CREATION_FAILED
        - DELETING
        - DELETED
        - DELETION_FAILED
    SingleSignOn:
      type: object
      description: The single-sign on configuration of the Amazon DataZone domain.
      properties:
        Type:
          $ref: '#/components/schemas/AuthType'
        UserAssignment:
          $ref: '#/components/schemas/UserAssignment'
      additionalProperties: false
    Tag:
      description: A key-value pair to associate with the domain.
      type: object
      properties:
        Key:
          type: string
          description: The key name of the tag.
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: The value for the tag.
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    UserAssignment:
      type: string
      description: The single sign-on user assignment in Amazon DataZone.
      enum:
        - AUTOMATIC
        - MANUAL
    Domain:
      type: object
      properties:
        Arn:
          type: string
          description: The ARN of the Amazon DataZone domain.
          pattern: ^arn:aws(|-cn|-us-gov):datazone:\w+(?:-\w+)+:\d{12}:domain/dzd[-_][a-zA-Z0-9_-]{1,36}$
        CreatedAt:
          type: string
          description: The timestamp of when the Amazon DataZone domain was last updated.
          format: date-time
        Description:
          type: string
          description: The description of the Amazon DataZone domain.
        DomainExecutionRole:
          type: string
          description: The domain execution role that is created when an Amazon DataZone domain is created. The domain execution role is created in the AWS account that houses the Amazon DataZone domain.
          pattern: ^arn:aws[^:]*:iam::\d{12}:(role|role/service-role)/[\w+=,.@-]*$
        Id:
          type: string
          description: The id of the Amazon DataZone domain.
          pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
        KmsKeyIdentifier:
          type: string
          maxLength: 1024
          description: The identifier of the AWS Key Management Service (KMS) key that is used to encrypt the Amazon DataZone domain, metadata, and reporting data.
          minLength: 1
          pattern: ^arn:aws(|-cn|-us-gov):kms:[a-zA-Z0-9-]*:[0-9]{12}:key/[a-zA-Z0-9-]{36}$
        LastUpdatedAt:
          type: string
          description: The timestamp of when the Amazon DataZone domain was last updated.
          format: date-time
        ManagedAccountId:
          type: string
          description: The identifier of the AWS account that manages the domain.
        Name:
          type: string
          description: The name of the Amazon DataZone domain.
        PortalUrl:
          type: string
          description: The URL of the data portal for this Amazon DataZone domain.
        SingleSignOn:
          $ref: '#/components/schemas/SingleSignOn'
          description: The single-sign on configuration of the Amazon DataZone domain.
        Status:
          $ref: '#/components/schemas/DomainStatus'
          description: The status of the Amazon DataZone domain.
        Tags:
          type: array
          description: The tags specified for the Amazon DataZone domain.
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - DomainExecutionRole
        - Name
      x-stackql-resource-name: domain
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - KmsKeyIdentifier
      x-read-only-properties:
        - Arn
        - CreatedAt
        - Id
        - LastUpdatedAt
        - ManagedAccountId
        - PortalUrl
        - Status
      x-required-permissions:
        create:
          - datazone:CreateDomain
          - datazone:UpdateDomain
          - datazone:GetDomain
          - datazone:TagResource
          - sso:CreateManagedApplicationInstance
          - sso:DeleteManagedApplicationInstance
          - sso:PutApplicationAssignmentConfiguration
        read:
          - datazone:GetDomain
        update:
          - datazone:UpdateDomain
          - datazone:GetDomain
          - datazone:TagResource
          - datazone:UntagResource
          - sso:CreateManagedApplicationInstance
          - sso:DeleteManagedApplicationInstance
          - sso:PutApplicationAssignmentConfiguration
        delete:
          - datazone:DeleteDomain
          - datazone:GetDomain
        list:
          - datazone:ListDomains
    EnvironmentParameter:
      type: object
      description: The parameter details of an environment profile.
      properties:
        Name:
          type: string
          description: The name of an environment profile parameter.
        Value:
          type: string
          description: The value of an environment profile parameter.
      additionalProperties: false
    EnvironmentStatus:
      type: string
      description: The status of the Amazon DataZone environment.
      enum:
        - ACTIVE
        - CREATING
        - UPDATING
        - DELETING
        - CREATE_FAILED
        - UPDATE_FAILED
        - DELETE_FAILED
        - VALIDATION_FAILED
        - SUSPENDED
        - DISABLED
        - EXPIRED
        - DELETED
        - INACCESSIBLE
    Environment:
      type: object
      properties:
        AwsAccountId:
          type: string
          description: The AWS account in which the Amazon DataZone environment is created.
          pattern: ^\d{12}$
        AwsAccountRegion:
          type: string
          description: The AWS region in which the Amazon DataZone environment is created.
          pattern: ^[a-z]{2}-[a-z]{4,10}-\d$
        CreatedAt:
          type: string
          description: The timestamp of when the environment was created.
          format: date-time
        CreatedBy:
          type: string
          description: The Amazon DataZone user who created the environment.
        Description:
          type: string
          description: The description of the Amazon DataZone environment.
          maxLength: 2048
        DomainId:
          type: string
          description: The identifier of the Amazon DataZone domain in which the environment is created.
          pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
        DomainIdentifier:
          type: string
          description: The identifier of the Amazon DataZone domain in which the environment would be created.
          pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
        EnvironmentBlueprintId:
          type: string
          description: The ID of the blueprint with which the Amazon DataZone environment was created.
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        EnvironmentProfileId:
          type: string
          description: The ID of the environment profile with which the Amazon DataZone environment was created.
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        EnvironmentProfileIdentifier:
          type: string
          description: The ID of the environment profile with which the Amazon DataZone environment would be created.
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        GlossaryTerms:
          type: array
          x-insertionOrder: false
          description: The glossary terms that can be used in the Amazon DataZone environment.
          items:
            type: string
            pattern: ^[a-zA-Z0-9_-]{1,36}$
          maxItems: 20
          minItems: 1
        Id:
          type: string
          description: The ID of the Amazon DataZone environment.
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        Name:
          type: string
          description: The name of the environment.
          maxLength: 64
          minLength: 1
          pattern: ^[\w -]+$
        ProjectId:
          type: string
          description: The ID of the Amazon DataZone project in which the environment is created.
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        ProjectIdentifier:
          type: string
          description: The ID of the Amazon DataZone project in which the environment would be created.
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        Provider:
          type: string
          description: The provider of the Amazon DataZone environment.
        Status:
          $ref: '#/components/schemas/EnvironmentStatus'
          description: The status of the Amazon DataZone environment.
        UpdatedAt:
          type: string
          description: The timestamp of when the environment was updated.
          format: date-time
        UserParameters:
          type: array
          x-insertionOrder: false
          description: The user parameters of the Amazon DataZone environment.
          items:
            $ref: '#/components/schemas/EnvironmentParameter'
      required:
        - EnvironmentProfileIdentifier
        - Name
        - ProjectIdentifier
        - DomainIdentifier
      x-stackql-resource-name: environment
      x-stackql-primaryIdentifier:
        - DomainId
        - Id
      x-create-only-properties:
        - DomainIdentifier
        - EnvironmentProfileIdentifier
        - ProjectIdentifier
        - UserParameters
      x-read-only-properties:
        - AwsAccountId
        - AwsAccountRegion
        - CreatedAt
        - CreatedBy
        - DomainId
        - EnvironmentBlueprintId
        - EnvironmentProfileId
        - Id
        - ProjectId
        - Provider
        - Status
        - UpdatedAt
      x-required-permissions:
        create:
          - datazone:CreateEnvironment
          - datazone:GetEnvironment
          - datazone:DeleteEnvironment
        read:
          - datazone:GetEnvironment
        update:
          - datazone:UpdateEnvironment
          - datazone:GetEnvironment
          - datazone:DeleteEnvironment
        delete:
          - datazone:DeleteEnvironment
          - datazone:GetEnvironment
        list:
          - datazone:ListEnvironments
    RegionalParameter:
      additionalProperties: false
      type: object
      properties:
        Parameters:
          $ref: '#/components/schemas/Parameter'
        Region:
          pattern: ^[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]$
          type: string
    Parameter:
      x-patternProperties:
        .+:
          type: string
      additionalProperties: false
      type: object
    EnvironmentBlueprintConfiguration:
      type: object
      properties:
        RegionalParameters:
          uniqueItems: true
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/RegionalParameter'
        ProvisioningRoleArn:
          pattern: ^arn:aws[^:]*:iam::\d{12}:(role|role/service-role)/[\w+=,.@-]*$
          type: string
        DomainId:
          pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
          type: string
        CreatedAt:
          format: date-time
          type: string
        EnabledRegions:
          minItems: 0
          x-insertionOrder: false
          type: array
          items:
            minLength: 4
            pattern: ^[a-z]{2}-?(iso|gov)?-{1}[a-z]*-{1}[0-9]$
            type: string
            maxLength: 16
        EnvironmentBlueprintIdentifier:
          pattern: ^[a-zA-Z0-9_-]{1,36}$
          type: string
        EnvironmentBlueprintId:
          pattern: ^[a-zA-Z0-9_-]{1,36}$
          type: string
        UpdatedAt:
          format: date-time
          type: string
        DomainIdentifier:
          pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
          type: string
        ManageAccessRoleArn:
          pattern: ^arn:aws[^:]*:iam::\d{12}:(role|role/service-role)/[\w+=,.@-]*$
          type: string
      required:
        - DomainIdentifier
        - EnvironmentBlueprintIdentifier
        - EnabledRegions
      x-stackql-resource-name: environment_blueprint_configuration
      x-stackql-primaryIdentifier:
        - DomainId
        - EnvironmentBlueprintId
      x-create-only-properties:
        - DomainIdentifier
        - EnvironmentBlueprintIdentifier
      x-read-only-properties:
        - CreatedAt
        - DomainId
        - EnvironmentBlueprintId
        - UpdatedAt
      x-required-permissions:
        read:
          - datazone:GetEnvironmentBlueprintConfiguration
        create:
          - datazone:ListEnvironmentBlueprints
          - iam:PassRole
          - datazone:GetEnvironmentBlueprintConfiguration
          - datazone:PutEnvironmentBlueprintConfiguration
        update:
          - datazone:DeleteEnvironmentBlueprintConfiguration
          - iam:PassRole
          - datazone:GetEnvironmentBlueprintConfiguration
          - datazone:PutEnvironmentBlueprintConfiguration
        list:
          - datazone:ListEnvironmentBlueprintConfigurations
        delete:
          - datazone:GetEnvironmentBlueprintConfiguration
          - datazone:DeleteEnvironmentBlueprintConfiguration
    EnvironmentProfile:
      type: object
      properties:
        AwsAccountId:
          description: The AWS account in which the Amazon DataZone environment is created.
          type: string
          pattern: ^\d{12}$
        AwsAccountRegion:
          description: The AWS region in which this environment profile is created.
          type: string
          pattern: ^[a-z]{2}-[a-z]{4,10}-\d$
        CreatedAt:
          description: The timestamp of when this environment profile was created.
          type: string
          format: date-time
        CreatedBy:
          description: The Amazon DataZone user who created this environment profile.
          type: string
        Description:
          description: The description of this Amazon DataZone environment profile.
          type: string
          maxLength: 2048
        DomainId:
          description: The ID of the Amazon DataZone domain in which this environment profile is created.
          type: string
          pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
        DomainIdentifier:
          description: The ID of the Amazon DataZone domain in which this environment profile is created.
          type: string
          pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
        EnvironmentBlueprintId:
          description: The ID of the blueprint with which this environment profile is created.
          type: string
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        EnvironmentBlueprintIdentifier:
          description: The ID of the blueprint with which this environment profile is created.
          type: string
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        Id:
          description: The ID of this Amazon DataZone environment profile.
          type: string
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        Name:
          description: The name of this Amazon DataZone environment profile.
          type: string
          maxLength: 64
          minLength: 1
          pattern: ^[\w -]+$
        ProjectId:
          description: The identifier of the project in which to create the environment profile.
          type: string
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        ProjectIdentifier:
          description: The identifier of the project in which to create the environment profile.
          type: string
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        UpdatedAt:
          description: The timestamp of when this environment profile was updated.
          type: string
          format: date-time
        UserParameters:
          description: The user parameters of this Amazon DataZone environment profile.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/EnvironmentParameter'
      required:
        - EnvironmentBlueprintIdentifier
        - ProjectIdentifier
        - DomainIdentifier
        - AwsAccountId
        - AwsAccountRegion
        - Name
      x-stackql-resource-name: environment_profile
      x-stackql-primaryIdentifier:
        - DomainId
        - Id
      x-create-only-properties:
        - DomainIdentifier
        - EnvironmentBlueprintIdentifier
        - ProjectIdentifier
      x-read-only-properties:
        - CreatedAt
        - CreatedBy
        - DomainId
        - EnvironmentBlueprintId
        - Id
        - ProjectId
        - UpdatedAt
      x-required-permissions:
        create:
          - datazone:CreateEnvironmentProfile
          - datazone:GetEnvironmentProfile
        read:
          - datazone:GetEnvironmentProfile
        update:
          - datazone:UpdateEnvironmentProfile
          - datazone:GetEnvironmentProfile
        delete:
          - datazone:DeleteEnvironmentProfile
          - datazone:GetEnvironmentProfile
        list:
          - datazone:ListEnvironmentProfiles
    Project:
      type: object
      properties:
        CreatedAt:
          description: The timestamp of when the project was created.
          type: string
          format: date-time
        CreatedBy:
          description: The Amazon DataZone user who created the project.
          type: string
        Description:
          description: The description of the Amazon DataZone project.
          type: string
          maxLength: 2048
        DomainId:
          description: The identifier of the Amazon DataZone domain in which the project was created.
          type: string
          pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
        DomainIdentifier:
          description: The ID of the Amazon DataZone domain in which this project is created.
          type: string
          pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
        GlossaryTerms:
          description: The glossary terms that can be used in this Amazon DataZone project.
          type: array
          x-insertionOrder: false
          items:
            type: string
            pattern: ^[a-zA-Z0-9_-]{1,36}$
          maxItems: 20
          minItems: 1
        Id:
          description: The ID of the Amazon DataZone project.
          type: string
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        LastUpdatedAt:
          description: The timestamp of when the project was last updated.
          type: string
          format: date-time
        Name:
          description: The name of the Amazon DataZone project.
          type: string
          maxLength: 64
          minLength: 1
          pattern: ^[\w -]+$
      required:
        - DomainIdentifier
        - Name
      x-stackql-resource-name: project
      x-stackql-primaryIdentifier:
        - DomainId
        - Id
      x-create-only-properties:
        - DomainIdentifier
      x-read-only-properties:
        - Id
        - CreatedAt
        - CreatedBy
        - DomainId
        - LastUpdatedAt
      x-required-permissions:
        create:
          - datazone:CreateProject
          - datazone:GetProject
        read:
          - datazone:GetProject
        update:
          - datazone:UpdateProject
          - datazone:GetProject
        delete:
          - datazone:DeleteProject
          - datazone:GetProject
        list:
          - datazone:ListProjects
    SubscriptionTargetForm:
      type: object
      description: The details of the subscription target configuration.
      properties:
        FormName:
          type: string
          description: The form name included in the subscription target configuration.
          maxLength: 128
          minLength: 1
          pattern: ^(?![0-9_])\w+$|^_\w*[a-zA-Z0-9]\w*$
        Content:
          type: string
          description: The content of the subscription target configuration.
      required:
        - Content
        - FormName
      additionalProperties: false
    SubscriptionTarget:
      type: object
      properties:
        ApplicableAssetTypes:
          type: array
          description: The asset types that can be included in the subscription target.
          x-insertionOrder: false
          items:
            type: string
            maxLength: 256
            minLength: 1
            pattern: ^[^\.]*
        AuthorizedPrincipals:
          type: array
          description: The authorized principals of the subscription target.
          x-insertionOrder: false
          items:
            type: string
            pattern: ^[a-zA-Z0-9:/_-]*$
          maxItems: 10
          minItems: 1
        CreatedAt:
          type: string
          description: The timestamp of when the subscription target was created.
          format: date-time
        CreatedBy:
          type: string
          description: The Amazon DataZone user who created the subscription target.
        DomainId:
          type: string
          description: The ID of the Amazon DataZone domain in which subscription target is created.
          pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
        DomainIdentifier:
          type: string
          description: The ID of the Amazon DataZone domain in which subscription target would be created.
          pattern: ^dzd[-_][a-zA-Z0-9_-]{1,36}$
        EnvironmentId:
          type: string
          description: The ID of the environment in which subscription target is created.
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        EnvironmentIdentifier:
          type: string
          description: The ID of the environment in which subscription target would be created.
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        Id:
          type: string
          description: The ID of the subscription target.
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        ManageAccessRole:
          type: string
          description: The manage access role that is used to create the subscription target.
        Name:
          type: string
          description: The name of the subscription target.
          maxLength: 256
          minLength: 1
        ProjectId:
          type: string
          description: The identifier of the project specified in the subscription target.
          pattern: ^[a-zA-Z0-9_-]{1,36}$
        Provider:
          type: string
          description: The provider of the subscription target.
        SubscriptionTargetConfig:
          type: array
          description: The configuration of the subscription target.
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/SubscriptionTargetForm'
        Type:
          type: string
          description: The type of the subscription target.
        UpdatedAt:
          type: string
          description: The timestamp of when the subscription target was updated.
          format: date-time
        UpdatedBy:
          type: string
          description: The Amazon DataZone user who updated the subscription target.
      required:
        - ApplicableAssetTypes
        - AuthorizedPrincipals
        - DomainIdentifier
        - EnvironmentIdentifier
        - ManageAccessRole
        - Name
        - SubscriptionTargetConfig
        - Type
      x-stackql-resource-name: subscription_target
      x-stackql-primaryIdentifier:
        - DomainId
        - EnvironmentId
        - Id
      x-create-only-properties:
        - Type
        - DomainIdentifier
        - EnvironmentIdentifier
      x-read-only-properties:
        - CreatedAt
        - CreatedBy
        - DomainId
        - EnvironmentId
        - Id
        - ProjectId
        - UpdatedAt
        - UpdatedBy
      x-required-permissions:
        create:
          - datazone:CreateSubscriptionTarget
          - datazone:GetSubscriptionTarget
          - iam:PassRole
        read:
          - datazone:GetSubscriptionTarget
        update:
          - datazone:UpdateSubscriptionTarget
          - datazone:GetSubscriptionTarget
          - iam:PassRole
        delete:
          - datazone:DeleteSubscriptionTarget
        list:
          - datazone:ListSubscriptionTargets
  x-stackQL-resources:
    data_sources:
      name: data_sources
      id: awscc.datazone.data_sources
      x-cfn-schema-name: DataSource
      x-type: list
      x-identifiers:
        - DomainId
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainId') as domain_id,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::DataSource'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainId') as domain_id,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::DataSource'
                AND region = 'us-east-1'
    data_source:
      name: data_source
      id: awscc.datazone.data_source
      x-cfn-schema-name: DataSource
      x-type: get
      x-identifiers:
        - DomainId
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AssetFormsInput') as asset_forms_input,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DomainId') as domain_id,
              JSON_EXTRACT(Properties, '$.DomainIdentifier') as domain_identifier,
              JSON_EXTRACT(Properties, '$.EnableSetting') as enable_setting,
              JSON_EXTRACT(Properties, '$.EnvironmentId') as environment_id,
              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as environment_identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Configuration') as configuration,
              JSON_EXTRACT(Properties, '$.LastRunAssetCount') as last_run_asset_count,
              JSON_EXTRACT(Properties, '$.LastRunAt') as last_run_at,
              JSON_EXTRACT(Properties, '$.LastRunStatus') as last_run_status,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ProjectId') as project_id,
              JSON_EXTRACT(Properties, '$.ProjectIdentifier') as project_identifier,
              JSON_EXTRACT(Properties, '$.PublishOnImport') as publish_on_import,
              JSON_EXTRACT(Properties, '$.Recommendation') as recommendation,
              JSON_EXTRACT(Properties, '$.Schedule') as schedule,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::DataSource'
              AND data__Identifier = '<DomainId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AssetFormsInput') as asset_forms_input,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'DomainId') as domain_id,
                json_extract_path_text(Properties, 'DomainIdentifier') as domain_identifier,
                json_extract_path_text(Properties, 'EnableSetting') as enable_setting,
                json_extract_path_text(Properties, 'EnvironmentId') as environment_id,
                json_extract_path_text(Properties, 'EnvironmentIdentifier') as environment_identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Configuration') as configuration,
                json_extract_path_text(Properties, 'LastRunAssetCount') as last_run_asset_count,
                json_extract_path_text(Properties, 'LastRunAt') as last_run_at,
                json_extract_path_text(Properties, 'LastRunStatus') as last_run_status,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'ProjectId') as project_id,
                json_extract_path_text(Properties, 'ProjectIdentifier') as project_identifier,
                json_extract_path_text(Properties, 'PublishOnImport') as publish_on_import,
                json_extract_path_text(Properties, 'Recommendation') as recommendation,
                json_extract_path_text(Properties, 'Schedule') as schedule,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'UpdatedAt') as updated_at
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::DataSource'
                AND data__Identifier = '<DomainId>'
                AND region = 'us-east-1'
    domains:
      name: domains
      id: awscc.datazone.domains
      x-cfn-schema-name: Domain
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::Domain'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::Domain'
                AND region = 'us-east-1'
    domain:
      name: domain
      id: awscc.datazone.domain
      x-cfn-schema-name: Domain
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DomainExecutionRole') as domain_execution_role,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.KmsKeyIdentifier') as kms_key_identifier,
              JSON_EXTRACT(Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(Properties, '$.ManagedAccountId') as managed_account_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.PortalUrl') as portal_url,
              JSON_EXTRACT(Properties, '$.SingleSignOn') as single_sign_on,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::Domain'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'DomainExecutionRole') as domain_execution_role,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'KmsKeyIdentifier') as kms_key_identifier,
                json_extract_path_text(Properties, 'LastUpdatedAt') as last_updated_at,
                json_extract_path_text(Properties, 'ManagedAccountId') as managed_account_id,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'PortalUrl') as portal_url,
                json_extract_path_text(Properties, 'SingleSignOn') as single_sign_on,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::Domain'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    environments:
      name: environments
      id: awscc.datazone.environments
      x-cfn-schema-name: Environment
      x-type: list
      x-identifiers:
        - DomainId
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainId') as domain_id,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::Environment'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainId') as domain_id,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::Environment'
                AND region = 'us-east-1'
    environment:
      name: environment
      id: awscc.datazone.environment
      x-cfn-schema-name: Environment
      x-type: get
      x-identifiers:
        - DomainId
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AwsAccountId') as aws_account_id,
              JSON_EXTRACT(Properties, '$.AwsAccountRegion') as aws_account_region,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.CreatedBy') as created_by,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DomainId') as domain_id,
              JSON_EXTRACT(Properties, '$.DomainIdentifier') as domain_identifier,
              JSON_EXTRACT(Properties, '$.EnvironmentBlueprintId') as environment_blueprint_id,
              JSON_EXTRACT(Properties, '$.EnvironmentProfileId') as environment_profile_id,
              JSON_EXTRACT(Properties, '$.EnvironmentProfileIdentifier') as environment_profile_identifier,
              JSON_EXTRACT(Properties, '$.GlossaryTerms') as glossary_terms,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ProjectId') as project_id,
              JSON_EXTRACT(Properties, '$.ProjectIdentifier') as project_identifier,
              JSON_EXTRACT(Properties, '$.Provider') as provider,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.UserParameters') as user_parameters
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::Environment'
              AND data__Identifier = '<DomainId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AwsAccountId') as aws_account_id,
                json_extract_path_text(Properties, 'AwsAccountRegion') as aws_account_region,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'CreatedBy') as created_by,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'DomainId') as domain_id,
                json_extract_path_text(Properties, 'DomainIdentifier') as domain_identifier,
                json_extract_path_text(Properties, 'EnvironmentBlueprintId') as environment_blueprint_id,
                json_extract_path_text(Properties, 'EnvironmentProfileId') as environment_profile_id,
                json_extract_path_text(Properties, 'EnvironmentProfileIdentifier') as environment_profile_identifier,
                json_extract_path_text(Properties, 'GlossaryTerms') as glossary_terms,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'ProjectId') as project_id,
                json_extract_path_text(Properties, 'ProjectIdentifier') as project_identifier,
                json_extract_path_text(Properties, 'Provider') as provider,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                json_extract_path_text(Properties, 'UserParameters') as user_parameters
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::Environment'
                AND data__Identifier = '<DomainId>'
                AND region = 'us-east-1'
    environment_blueprint_configurations:
      name: environment_blueprint_configurations
      id: awscc.datazone.environment_blueprint_configurations
      x-cfn-schema-name: EnvironmentBlueprintConfiguration
      x-type: list
      x-identifiers:
        - DomainId
        - EnvironmentBlueprintId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainId') as domain_id,
              JSON_EXTRACT(Properties, '$.EnvironmentBlueprintId') as environment_blueprint_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::EnvironmentBlueprintConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainId') as domain_id,
                json_extract_path_text(Properties, 'EnvironmentBlueprintId') as environment_blueprint_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::EnvironmentBlueprintConfiguration'
                AND region = 'us-east-1'
    environment_blueprint_configuration:
      name: environment_blueprint_configuration
      id: awscc.datazone.environment_blueprint_configuration
      x-cfn-schema-name: EnvironmentBlueprintConfiguration
      x-type: get
      x-identifiers:
        - DomainId
        - EnvironmentBlueprintId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RegionalParameters') as regional_parameters,
              JSON_EXTRACT(Properties, '$.ProvisioningRoleArn') as provisioning_role_arn,
              JSON_EXTRACT(Properties, '$.DomainId') as domain_id,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.EnabledRegions') as enabled_regions,
              JSON_EXTRACT(Properties, '$.EnvironmentBlueprintIdentifier') as environment_blueprint_identifier,
              JSON_EXTRACT(Properties, '$.EnvironmentBlueprintId') as environment_blueprint_id,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.DomainIdentifier') as domain_identifier,
              JSON_EXTRACT(Properties, '$.ManageAccessRoleArn') as manage_access_role_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::EnvironmentBlueprintConfiguration'
              AND data__Identifier = '<DomainId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RegionalParameters') as regional_parameters,
                json_extract_path_text(Properties, 'ProvisioningRoleArn') as provisioning_role_arn,
                json_extract_path_text(Properties, 'DomainId') as domain_id,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'EnabledRegions') as enabled_regions,
                json_extract_path_text(Properties, 'EnvironmentBlueprintIdentifier') as environment_blueprint_identifier,
                json_extract_path_text(Properties, 'EnvironmentBlueprintId') as environment_blueprint_id,
                json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                json_extract_path_text(Properties, 'DomainIdentifier') as domain_identifier,
                json_extract_path_text(Properties, 'ManageAccessRoleArn') as manage_access_role_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::EnvironmentBlueprintConfiguration'
                AND data__Identifier = '<DomainId>'
                AND region = 'us-east-1'
    environment_profiles:
      name: environment_profiles
      id: awscc.datazone.environment_profiles
      x-cfn-schema-name: EnvironmentProfile
      x-type: list
      x-identifiers:
        - DomainId
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainId') as domain_id,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::EnvironmentProfile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainId') as domain_id,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::EnvironmentProfile'
                AND region = 'us-east-1'
    environment_profile:
      name: environment_profile
      id: awscc.datazone.environment_profile
      x-cfn-schema-name: EnvironmentProfile
      x-type: get
      x-identifiers:
        - DomainId
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AwsAccountId') as aws_account_id,
              JSON_EXTRACT(Properties, '$.AwsAccountRegion') as aws_account_region,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.CreatedBy') as created_by,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DomainId') as domain_id,
              JSON_EXTRACT(Properties, '$.DomainIdentifier') as domain_identifier,
              JSON_EXTRACT(Properties, '$.EnvironmentBlueprintId') as environment_blueprint_id,
              JSON_EXTRACT(Properties, '$.EnvironmentBlueprintIdentifier') as environment_blueprint_identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ProjectId') as project_id,
              JSON_EXTRACT(Properties, '$.ProjectIdentifier') as project_identifier,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.UserParameters') as user_parameters
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::EnvironmentProfile'
              AND data__Identifier = '<DomainId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AwsAccountId') as aws_account_id,
                json_extract_path_text(Properties, 'AwsAccountRegion') as aws_account_region,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'CreatedBy') as created_by,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'DomainId') as domain_id,
                json_extract_path_text(Properties, 'DomainIdentifier') as domain_identifier,
                json_extract_path_text(Properties, 'EnvironmentBlueprintId') as environment_blueprint_id,
                json_extract_path_text(Properties, 'EnvironmentBlueprintIdentifier') as environment_blueprint_identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'ProjectId') as project_id,
                json_extract_path_text(Properties, 'ProjectIdentifier') as project_identifier,
                json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                json_extract_path_text(Properties, 'UserParameters') as user_parameters
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::EnvironmentProfile'
                AND data__Identifier = '<DomainId>'
                AND region = 'us-east-1'
    projects:
      name: projects
      id: awscc.datazone.projects
      x-cfn-schema-name: Project
      x-type: list
      x-identifiers:
        - DomainId
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainId') as domain_id,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::Project'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainId') as domain_id,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::Project'
                AND region = 'us-east-1'
    project:
      name: project
      id: awscc.datazone.project
      x-cfn-schema-name: Project
      x-type: get
      x-identifiers:
        - DomainId
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.CreatedBy') as created_by,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.DomainId') as domain_id,
              JSON_EXTRACT(Properties, '$.DomainIdentifier') as domain_identifier,
              JSON_EXTRACT(Properties, '$.GlossaryTerms') as glossary_terms,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.LastUpdatedAt') as last_updated_at,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::Project'
              AND data__Identifier = '<DomainId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'CreatedBy') as created_by,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'DomainId') as domain_id,
                json_extract_path_text(Properties, 'DomainIdentifier') as domain_identifier,
                json_extract_path_text(Properties, 'GlossaryTerms') as glossary_terms,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'LastUpdatedAt') as last_updated_at,
                json_extract_path_text(Properties, 'Name') as name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::Project'
                AND data__Identifier = '<DomainId>'
                AND region = 'us-east-1'
    subscription_targets:
      name: subscription_targets
      id: awscc.datazone.subscription_targets
      x-cfn-schema-name: SubscriptionTarget
      x-type: list
      x-identifiers:
        - DomainId
        - EnvironmentId
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainId') as domain_id,
              JSON_EXTRACT(Properties, '$.EnvironmentId') as environment_id,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::SubscriptionTarget'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainId') as domain_id,
                json_extract_path_text(Properties, 'EnvironmentId') as environment_id,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DataZone::SubscriptionTarget'
                AND region = 'us-east-1'
    subscription_target:
      name: subscription_target
      id: awscc.datazone.subscription_target
      x-cfn-schema-name: SubscriptionTarget
      x-type: get
      x-identifiers:
        - DomainId
        - EnvironmentId
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ApplicableAssetTypes') as applicable_asset_types,
              JSON_EXTRACT(Properties, '$.AuthorizedPrincipals') as authorized_principals,
              JSON_EXTRACT(Properties, '$.CreatedAt') as created_at,
              JSON_EXTRACT(Properties, '$.CreatedBy') as created_by,
              JSON_EXTRACT(Properties, '$.DomainId') as domain_id,
              JSON_EXTRACT(Properties, '$.DomainIdentifier') as domain_identifier,
              JSON_EXTRACT(Properties, '$.EnvironmentId') as environment_id,
              JSON_EXTRACT(Properties, '$.EnvironmentIdentifier') as environment_identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.ManageAccessRole') as manage_access_role,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ProjectId') as project_id,
              JSON_EXTRACT(Properties, '$.Provider') as provider,
              JSON_EXTRACT(Properties, '$.SubscriptionTargetConfig') as subscription_target_config,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.UpdatedAt') as updated_at,
              JSON_EXTRACT(Properties, '$.UpdatedBy') as updated_by
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::SubscriptionTarget'
              AND data__Identifier = '<DomainId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ApplicableAssetTypes') as applicable_asset_types,
                json_extract_path_text(Properties, 'AuthorizedPrincipals') as authorized_principals,
                json_extract_path_text(Properties, 'CreatedAt') as created_at,
                json_extract_path_text(Properties, 'CreatedBy') as created_by,
                json_extract_path_text(Properties, 'DomainId') as domain_id,
                json_extract_path_text(Properties, 'DomainIdentifier') as domain_identifier,
                json_extract_path_text(Properties, 'EnvironmentId') as environment_id,
                json_extract_path_text(Properties, 'EnvironmentIdentifier') as environment_identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'ManageAccessRole') as manage_access_role,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'ProjectId') as project_id,
                json_extract_path_text(Properties, 'Provider') as provider,
                json_extract_path_text(Properties, 'SubscriptionTargetConfig') as subscription_target_config,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'UpdatedAt') as updated_at,
                json_extract_path_text(Properties, 'UpdatedBy') as updated_by
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DataZone::SubscriptionTarget'
                AND data__Identifier = '<DomainId>'
                AND region = 'us-east-1'
