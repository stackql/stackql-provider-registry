openapi: 3.0.0
info:
  title: EMR
  version: 1.0.0
paths: {}
components:
  schemas:
    SecurityConfiguration:
      type: object
      properties:
        Name:
          description: The name of the security configuration.
          type: string
        SecurityConfiguration:
          description: The security configuration details in JSON format.
          type: object
      required:
        - SecurityConfiguration
      x-stackql-resource-name: security_configuration
      x-stackql-primaryIdentifier:
        - Name
      x-create-only-properties:
        - Name
        - SecurityConfiguration
      x-required-permissions:
        create:
          - elasticmapreduce:CreateSecurityConfiguration
          - elasticmapreduce:DescribeSecurityConfiguration
        read:
          - elasticmapreduce:DescribeSecurityConfiguration
        delete:
          - elasticmapreduce:DeleteSecurityConfiguration
        list:
          - elasticmapreduce:ListSecurityConfigurations
    HadoopJarStepConfig:
      type: object
      additionalProperties: false
      properties:
        Args:
          type: array
          uniqueItems: false
          items:
            type: string
        Jar:
          type: string
        MainClass:
          type: string
        StepProperties:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/KeyValue'
      required:
        - Jar
    KeyValue:
      type: object
      additionalProperties: false
      properties:
        Key:
          type: string
        Value:
          type: string
    Step:
      type: object
      properties:
        Id:
          description: ID generated by service
          type: string
        ActionOnFailure:
          description: This specifies what action to take when the cluster step fails. Possible values are CANCEL_AND_WAIT and CONTINUE.
          type: string
        HadoopJarStep:
          description: The HadoopJarStepConfig property type specifies a job flow step consisting of a JAR file whose main function will be executed. The main function submits a job for the cluster to execute as a step on the master node, and then waits for the job to finish or fail before executing subsequent steps.
          $ref: '#/components/schemas/HadoopJarStepConfig'
        JobFlowId:
          description: A string that uniquely identifies the cluster (job flow).
          type: string
        Name:
          description: The name of the cluster step.
          type: string
      required:
        - JobFlowId
        - HadoopJarStep
        - ActionOnFailure
        - Name
      x-stackql-resource-name: step
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - JobFlowId
        - HadoopJarStep
        - Name
        - ActionOnFailure
      x-read-only-properties:
        - Id
      x-required-permissions:
        create:
          - emr:AddJobFlowSteps
        delete: []
    SubnetId:
      description: Identifier of a subnet
      type: string
      pattern: ^(subnet-[a-f0-9]{13})|(subnet-[a-f0-9]{8})\Z
    Arn:
      type: string
      pattern: ^arn:aws(-(cn|us-gov))?:[a-z-]+:(([a-z]+-)+[0-9])?:([0-9]{12})?:[^.]+$
    Tags:
      type: array
      x-insertionOrder: false
      uniqueItems: true
      items:
        $ref: '#/components/schemas/Tag'
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 1
          maxLength: 128
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.'
          minLength: 0
          maxLength: 256
      required:
        - Key
        - Value
      additionalProperties: false
    Studio:
      type: object
      properties:
        Arn:
          description: The Amazon Resource Name (ARN) of the EMR Studio.
          $ref: '#/components/schemas/Arn'
        AuthMode:
          type: string
          description: Specifies whether the Studio authenticates users using single sign-on (SSO) or IAM. Amazon EMR Studio currently only supports SSO authentication.
          enum:
            - SSO
            - IAM
        DefaultS3Location:
          description: The default Amazon S3 location to back up EMR Studio Workspaces and notebook files. A Studio user can select an alternative Amazon S3 location when creating a Workspace.
          type: string
          minLength: 6
          maxLength: 10280
          pattern: ^s3://.*
        Description:
          description: A detailed description of the Studio.
          type: string
          minLength: 0
          maxLength: 256
        EngineSecurityGroupId:
          description: The ID of the Amazon EMR Studio Engine security group. The Engine security group allows inbound network traffic from the Workspace security group, and it must be in the same VPC specified by VpcId.
          type: string
          minLength: 4
          maxLength: 256
          pattern: ^sg-[a-zA-Z0-9\-._]+$
        Name:
          description: A descriptive name for the Amazon EMR Studio.
          type: string
          minLength: 1
          maxLength: 256
          pattern: '[a-zA-Z0-9_-]+'
        ServiceRole:
          description: The IAM role that will be assumed by the Amazon EMR Studio. The service role provides a way for Amazon EMR Studio to interoperate with other AWS services.
          $ref: '#/components/schemas/Arn'
        StudioId:
          description: The ID of the EMR Studio.
          type: string
          pattern: ^es-[0-9A-Z]+
          minLength: 4
          maxLength: 256
        SubnetIds:
          description: A list of up to 5 subnet IDs to associate with the Studio. The subnets must belong to the VPC specified by VpcId. Studio users can create a Workspace in any of the specified subnets.
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/SubnetId'
        Tags:
          description: A list of tags to associate with the Studio. Tags are user-defined key-value pairs that consist of a required key string with a maximum of 128 characters, and an optional value string with a maximum of 256 characters.
          $ref: '#/components/schemas/Tags'
        Url:
          description: The unique Studio access URL.
          type: string
          pattern: ^https://[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])(:[0-9]*)*([?/#].*)?$
          maxLength: 4096
        UserRole:
          description: The IAM user role that will be assumed by users and groups logged in to a Studio. The permissions attached to this IAM role can be scoped down for each user or group using session policies.
          $ref: '#/components/schemas/Arn'
        VpcId:
          description: The ID of the Amazon Virtual Private Cloud (Amazon VPC) to associate with the Studio.
          type: string
          pattern: ^(vpc-[0-9a-f]{8}|vpc-[0-9a-f]{17})$
        WorkspaceSecurityGroupId:
          description: The ID of the Amazon EMR Studio Workspace security group. The Workspace security group allows outbound network traffic to resources in the Engine security group, and it must be in the same VPC specified by VpcId.
          type: string
          pattern: ^sg-[a-zA-Z0-9\-._]+$
        IdpAuthUrl:
          description: Your identity provider's authentication endpoint. Amazon EMR Studio redirects federated users to this endpoint for authentication when logging in to a Studio with the Studio URL.
          type: string
          pattern: ^https://[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])(:[0-9]*)*([?/#].*)?$
          maxLength: 4096
        IdpRelayStateParameterName:
          description: The name of relay state parameter for external Identity Provider.
          type: string
          minLength: 0
          maxLength: 256
        TrustedIdentityPropagationEnabled:
          description: A Boolean indicating whether to enable Trusted identity propagation for the Studio. The default value is false.
          type: boolean
        IdcUserAssignment:
          description: Specifies whether IAM Identity Center user assignment is REQUIRED or OPTIONAL. If the value is set to REQUIRED, users must be explicitly assigned to the Studio application to access the Studio.
          type: string
          enum:
            - REQUIRED
            - OPTIONAL
        IdcInstanceArn:
          description: The ARN of the IAM Identity Center instance to create the Studio application.
          type: string
          minLength: 20
          maxLength: 2048
        EncryptionKeyArn:
          description: The AWS KMS key identifier (ARN) used to encrypt AWS EMR Studio workspace and notebook files when backed up to AWS S3.
          $ref: '#/components/schemas/Arn'
      required:
        - AuthMode
        - EngineSecurityGroupId
        - Name
        - ServiceRole
        - SubnetIds
        - VpcId
        - WorkspaceSecurityGroupId
        - DefaultS3Location
      x-stackql-resource-name: studio
      x-stackql-primaryIdentifier:
        - StudioId
      x-create-only-properties:
        - AuthMode
        - EngineSecurityGroupId
        - ServiceRole
        - UserRole
        - VpcId
        - WorkspaceSecurityGroupId
        - TrustedIdentityPropagationEnabled
        - IdcUserAssignment
        - IdcInstanceArn
        - EncryptionKeyArn
      x-read-only-properties:
        - StudioId
        - Arn
        - Url
      x-required-permissions:
        create:
          - elasticmapreduce:CreateStudio
          - elasticmapreduce:DescribeStudio
          - elasticmapreduce:AddTags
          - sso:CreateManagedApplicationInstance
          - sso:DeleteManagedApplicationInstance
          - iam:PassRole
        read:
          - elasticmapreduce:DescribeStudio
          - sso:GetManagedApplicationInstance
        update:
          - elasticmapreduce:UpdateStudio
          - elasticmapreduce:DescribeStudio
          - elasticmapreduce:AddTags
          - elasticmapreduce:RemoveTags
        delete:
          - elasticmapreduce:DeleteStudio
          - elasticmapreduce:DescribeStudio
          - sso:DeleteManagedApplicationInstance
        list:
          - elasticmapreduce:ListStudios
    IamPolicyArn:
      type: string
      pattern: ^arn:aws(-(cn|us-gov))?:iam::([0-9]{12})?:policy\/[^.]+$
    StudioSessionMapping:
      type: object
      properties:
        IdentityName:
          type: string
          description: The name of the user or group. For more information, see UserName and DisplayName in the AWS SSO Identity Store API Reference. Either IdentityName or IdentityId must be specified.
        IdentityType:
          type: string
          description: Specifies whether the identity to map to the Studio is a user or a group.
          enum:
            - USER
            - GROUP
        SessionPolicyArn:
          description: The Amazon Resource Name (ARN) for the session policy that will be applied to the user or group. Session policies refine Studio user permissions without the need to use multiple IAM user roles.
          $ref: '#/components/schemas/IamPolicyArn'
        StudioId:
          description: The ID of the Amazon EMR Studio to which the user or group will be mapped.
          type: string
          pattern: ^es-[0-9A-Z]+
          minLength: 4
          maxLength: 256
      required:
        - StudioId
        - IdentityName
        - IdentityType
        - SessionPolicyArn
      x-stackql-resource-name: studio_session_mapping
      x-stackql-primaryIdentifier:
        - StudioId
        - IdentityType
        - IdentityName
      x-create-only-properties:
        - StudioId
        - IdentityType
        - IdentityName
      x-required-permissions:
        create:
          - elasticmapreduce:CreateStudioSessionMapping
          - sso-directory:SearchUsers
          - sso-directory:SearchGroups
          - sso-directory:DescribeUser
          - sso-directory:DescribeGroup
          - sso:ListDirectoryAssociations
          - sso:GetProfile
          - sso:ListProfiles
          - sso:AssociateProfile
        read:
          - elasticmapreduce:GetStudioSessionMapping
          - sso-directory:SearchUsers
          - sso-directory:SearchGroups
          - sso-directory:DescribeUser
          - sso-directory:DescribeGroup
          - sso:GetManagedApplicationInstance
          - sso:DescribeInstance
        update:
          - elasticmapreduce:GetStudioSessionMapping
          - elasticmapreduce:UpdateStudioSessionMapping
          - sso-directory:SearchUsers
          - sso-directory:SearchGroups
          - sso-directory:DescribeUser
          - sso-directory:DescribeGroup
          - sso:GetManagedApplicationInstance
          - sso:DescribeInstance
        delete:
          - elasticmapreduce:GetStudioSessionMapping
          - elasticmapreduce:DeleteStudioSessionMapping
          - sso-directory:SearchUsers
          - sso-directory:SearchGroups
          - sso-directory:DescribeUser
          - sso-directory:DescribeGroup
          - sso:GetManagedApplicationInstance
          - sso:DescribeInstance
          - sso:ListDirectoryAssociations
          - sso:GetProfile
          - sso:ListProfiles
          - sso:DisassociateProfile
        list:
          - elasticmapreduce:ListStudioSessionMappings
    WALWorkspace:
      type: object
      properties:
        WALWorkspaceName:
          description: The name of the emrwal container
          type: string
          minLength: 1
          maxLength: 32
          pattern: ^[a-zA-Z0-9]+$
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: wal_workspace
      x-stackql-primaryIdentifier:
        - WALWorkspaceName
      x-create-only-properties:
        - WALWorkspaceName
      x-required-permissions:
        create:
          - emrwal:CreateWorkspace
          - emrwal:TagResource
          - iam:CreateServiceLinkedRole
        read:
          - emrwal:ListTagsForResource
        delete:
          - emrwal:DeleteWorkspace
        list:
          - emrwal:ListWorkspaces
        update:
          - emrwal:TagResource
          - emrwal:UntagResource
          - emrwal:ListTagsForResource
  x-stackQL-resources:
    security_configurations:
      name: security_configurations
      id: awscc.emr.security_configurations
      x-cfn-schema-name: SecurityConfiguration
      x-type: list
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EMR::SecurityConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EMR::SecurityConfiguration'
                AND region = 'us-east-1'
    security_configuration:
      name: security_configuration
      id: awscc.emr.security_configuration
      x-cfn-schema-name: SecurityConfiguration
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.SecurityConfiguration') as security_configuration
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EMR::SecurityConfiguration'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'SecurityConfiguration') as security_configuration
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EMR::SecurityConfiguration'
                AND data__Identifier = '<Name>'
                AND region = 'us-east-1'
    studios:
      name: studios
      id: awscc.emr.studios
      x-cfn-schema-name: Studio
      x-type: list
      x-identifiers:
        - StudioId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StudioId') as studio_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EMR::Studio'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'StudioId') as studio_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EMR::Studio'
                AND region = 'us-east-1'
    studio:
      name: studio
      id: awscc.emr.studio
      x-cfn-schema-name: Studio
      x-type: get
      x-identifiers:
        - StudioId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AuthMode') as auth_mode,
              JSON_EXTRACT(Properties, '$.DefaultS3Location') as default_s3_location,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.EngineSecurityGroupId') as engine_security_group_id,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.ServiceRole') as service_role,
              JSON_EXTRACT(Properties, '$.StudioId') as studio_id,
              JSON_EXTRACT(Properties, '$.SubnetIds') as subnet_ids,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Url') as url,
              JSON_EXTRACT(Properties, '$.UserRole') as user_role,
              JSON_EXTRACT(Properties, '$.VpcId') as vpc_id,
              JSON_EXTRACT(Properties, '$.WorkspaceSecurityGroupId') as workspace_security_group_id,
              JSON_EXTRACT(Properties, '$.IdpAuthUrl') as idp_auth_url,
              JSON_EXTRACT(Properties, '$.IdpRelayStateParameterName') as idp_relay_state_parameter_name,
              JSON_EXTRACT(Properties, '$.TrustedIdentityPropagationEnabled') as trusted_identity_propagation_enabled,
              JSON_EXTRACT(Properties, '$.IdcUserAssignment') as idc_user_assignment,
              JSON_EXTRACT(Properties, '$.IdcInstanceArn') as idc_instance_arn,
              JSON_EXTRACT(Properties, '$.EncryptionKeyArn') as encryption_key_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EMR::Studio'
              AND data__Identifier = '<StudioId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'AuthMode') as auth_mode,
                json_extract_path_text(Properties, 'DefaultS3Location') as default_s3_location,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'EngineSecurityGroupId') as engine_security_group_id,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'ServiceRole') as service_role,
                json_extract_path_text(Properties, 'StudioId') as studio_id,
                json_extract_path_text(Properties, 'SubnetIds') as subnet_ids,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Url') as url,
                json_extract_path_text(Properties, 'UserRole') as user_role,
                json_extract_path_text(Properties, 'VpcId') as vpc_id,
                json_extract_path_text(Properties, 'WorkspaceSecurityGroupId') as workspace_security_group_id,
                json_extract_path_text(Properties, 'IdpAuthUrl') as idp_auth_url,
                json_extract_path_text(Properties, 'IdpRelayStateParameterName') as idp_relay_state_parameter_name,
                json_extract_path_text(Properties, 'TrustedIdentityPropagationEnabled') as trusted_identity_propagation_enabled,
                json_extract_path_text(Properties, 'IdcUserAssignment') as idc_user_assignment,
                json_extract_path_text(Properties, 'IdcInstanceArn') as idc_instance_arn,
                json_extract_path_text(Properties, 'EncryptionKeyArn') as encryption_key_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EMR::Studio'
                AND data__Identifier = '<StudioId>'
                AND region = 'us-east-1'
    studio_session_mappings:
      name: studio_session_mappings
      id: awscc.emr.studio_session_mappings
      x-cfn-schema-name: StudioSessionMapping
      x-type: list
      x-identifiers:
        - StudioId
        - IdentityType
        - IdentityName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.StudioId') as studio_id,
              JSON_EXTRACT(Properties, '$.IdentityType') as identity_type,
              JSON_EXTRACT(Properties, '$.IdentityName') as identity_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EMR::StudioSessionMapping'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'StudioId') as studio_id,
                json_extract_path_text(Properties, 'IdentityType') as identity_type,
                json_extract_path_text(Properties, 'IdentityName') as identity_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EMR::StudioSessionMapping'
                AND region = 'us-east-1'
    studio_session_mapping:
      name: studio_session_mapping
      id: awscc.emr.studio_session_mapping
      x-cfn-schema-name: StudioSessionMapping
      x-type: get
      x-identifiers:
        - StudioId
        - IdentityType
        - IdentityName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.IdentityName') as identity_name,
              JSON_EXTRACT(Properties, '$.IdentityType') as identity_type,
              JSON_EXTRACT(Properties, '$.SessionPolicyArn') as session_policy_arn,
              JSON_EXTRACT(Properties, '$.StudioId') as studio_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EMR::StudioSessionMapping'
              AND data__Identifier = '<StudioId>|<IdentityType>|<IdentityName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'IdentityName') as identity_name,
                json_extract_path_text(Properties, 'IdentityType') as identity_type,
                json_extract_path_text(Properties, 'SessionPolicyArn') as session_policy_arn,
                json_extract_path_text(Properties, 'StudioId') as studio_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EMR::StudioSessionMapping'
                AND data__Identifier = '<StudioId>|<IdentityType>|<IdentityName>'
                AND region = 'us-east-1'
    wal_workspaces:
      name: wal_workspaces
      id: awscc.emr.wal_workspaces
      x-cfn-schema-name: WALWorkspace
      x-type: list
      x-identifiers:
        - WALWorkspaceName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.WALWorkspaceName') as wal_workspace_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EMR::WALWorkspace'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'WALWorkspaceName') as wal_workspace_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::EMR::WALWorkspace'
                AND region = 'us-east-1'
    wal_workspace:
      name: wal_workspace
      id: awscc.emr.wal_workspace
      x-cfn-schema-name: WALWorkspace
      x-type: get
      x-identifiers:
        - WALWorkspaceName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.WALWorkspaceName') as wal_workspace_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EMR::WALWorkspace'
              AND data__Identifier = '<WALWorkspaceName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'WALWorkspaceName') as wal_workspace_name,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::EMR::WALWorkspace'
                AND data__Identifier = '<WALWorkspaceName>'
                AND region = 'us-east-1'
