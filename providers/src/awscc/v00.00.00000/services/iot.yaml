openapi: 3.0.0
info:
  title: IoT
  version: 1.0.0
paths: {}
components:
  schemas:
    AuditCheckConfigurations:
      description: Specifies which audit checks are enabled and disabled for this account.
      type: object
      properties:
        AuthenticatedCognitoRoleOverlyPermissiveCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        CaCertificateExpiringCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        CaCertificateKeyQualityCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        ConflictingClientIdsCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        DeviceCertificateExpiringCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        DeviceCertificateKeyQualityCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        DeviceCertificateSharedCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        IotPolicyOverlyPermissiveCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        IotRoleAliasAllowsAccessToUnusedServicesCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        IotRoleAliasOverlyPermissiveCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        LoggingDisabledCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        RevokedCaCertificateStillActiveCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        RevokedDeviceCertificateStillActiveCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        UnauthenticatedCognitoRoleOverlyPermissiveCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        IntermediateCaRevokedForActiveDeviceCertificatesCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
        IoTPolicyPotentialMisConfigurationCheck:
          $ref: '#/components/schemas/AuditCheckConfiguration'
      additionalProperties: false
    AuditNotificationTargetConfigurations:
      description: Information about the targets to which audit notifications are sent.
      type: object
      properties:
        Sns:
          $ref: '#/components/schemas/AuditNotificationTarget'
      additionalProperties: false
    AuditCheckConfiguration:
      description: The configuration for a specific audit check.
      type: object
      properties:
        Enabled:
          description: True if the check is enabled.
          type: boolean
      additionalProperties: false
    AuditNotificationTarget:
      type: object
      properties:
        TargetArn:
          description: The ARN of the target (SNS topic) to which audit notifications are sent.
          type: string
          maxLength: 2048
        RoleArn:
          description: The ARN of the role that grants permission to send notifications to the target.
          type: string
          minLength: 20
          maxLength: 2048
        Enabled:
          description: True if notifications to the target are enabled.
          type: boolean
      additionalProperties: false
    AccountAuditConfiguration:
      type: object
      properties:
        AccountId:
          description: Your 12-digit account ID (used as the primary identifier for the CloudFormation resource).
          type: string
          minLength: 12
          maxLength: 12
        AuditCheckConfigurations:
          $ref: '#/components/schemas/AuditCheckConfigurations'
        AuditNotificationTargetConfigurations:
          $ref: '#/components/schemas/AuditNotificationTargetConfigurations'
        RoleArn:
          description: The ARN of the role that grants permission to AWS IoT to access information about your devices, policies, certificates and other items as required when performing an audit.
          type: string
          minLength: 20
          maxLength: 2048
      required:
        - AccountId
        - AuditCheckConfigurations
        - RoleArn
      x-stackql-resource-name: account_audit_configuration
      x-stackql-primaryIdentifier:
        - AccountId
      x-create-only-properties:
        - AccountId
      x-required-permissions:
        create:
          - iot:UpdateAccountAuditConfiguration
          - iot:DescribeAccountAuditConfiguration
          - iam:PassRole
        read:
          - iot:DescribeAccountAuditConfiguration
        update:
          - iot:UpdateAccountAuditConfiguration
          - iot:DescribeAccountAuditConfiguration
          - iam:PassRole
        delete:
          - iot:DescribeAccountAuditConfiguration
          - iot:DeleteAccountAuditConfiguration
        list:
          - iot:DescribeAccountAuditConfiguration
    Tag:
      type: object
      properties:
        Key:
          type: string
        Value:
          type: string
      additionalProperties: false
      required:
        - Key
        - Value
    Authorizer:
      type: object
      properties:
        AuthorizerFunctionArn:
          type: string
        Arn:
          type: string
        AuthorizerName:
          type: string
          pattern: '[\w=,@-]+'
          minLength: 1
          maxLength: 128
        SigningDisabled:
          type: boolean
        Status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        TokenKeyName:
          type: string
        TokenSigningPublicKeys:
          type: object
          additionalProperties: false
          x-patternProperties:
            '[a-zA-Z0-9:_-]+':
              type: string
              maxLength: 5120
        EnableCachingForHttp:
          type: boolean
        Tags:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - AuthorizerFunctionArn
      x-stackql-resource-name: authorizer
      x-stackql-primaryIdentifier:
        - AuthorizerName
      x-create-only-properties:
        - SigningDisabled
        - AuthorizerName
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - iot:CreateAuthorizer
          - iot:DescribeAuthorizer
          - iot:TagResource
          - iot:ListTagsForResource
        read:
          - iot:DescribeAuthorizer
          - iot:ListTagsForResource
        update:
          - iot:UpdateAuthorizer
          - iot:DescribeAuthorizer
          - iot:TagResource
          - iot:UntagResource
          - iot:ListTagsForResource
        delete:
          - iot:UpdateAuthorizer
          - iot:DeleteAuthorizer
          - iot:DescribeAuthorizer
        list:
          - iot:ListAuthorizers
    BillingGroup:
      type: object
      properties:
        Id:
          type: string
        Arn:
          type: string
        BillingGroupName:
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        BillingGroupProperties:
          type: object
          additionalProperties: false
          properties:
            BillingGroupDescription:
              type: string
              maxLength: 2028
              pattern: '[\p{Graph}\x20]*'
      x-stackql-resource-name: billing_group
      x-stackql-primaryIdentifier:
        - BillingGroupName
      x-create-only-properties:
        - BillingGroupName
      x-read-only-properties:
        - Arn
        - Id
      x-required-permissions:
        create:
          - iot:DescribeBillingGroup
          - iot:ListTagsForResource
          - iot:CreateBillingGroup
          - iot:TagResource
        delete:
          - iot:DescribeBillingGroup
          - iot:DeleteBillingGroup
        list:
          - iot:ListBillingGroups
          - iot:ListTagsForResource
        read:
          - iot:DescribeBillingGroup
          - iot:ListTagsForResource
        update:
          - iot:DescribeBillingGroup
          - iot:UpdateBillingGroup
          - iot:ListTagsForResource
          - iot:TagResource
          - iot:UntagResource
    RegistrationConfig:
      type: object
      additionalProperties: false
      properties:
        TemplateBody:
          type: string
          pattern: '[\s\S]*'
          minLength: 0
          maxLength: 10240
        RoleArn:
          type: string
          pattern: arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
          minLength: 20
          maxLength: 2048
        TemplateName:
          type: string
          pattern: ^[0-9A-Za-z_-]+$
          minLength: 1
          maxLength: 36
    CACertificate:
      type: object
      properties:
        CACertificatePem:
          type: string
          pattern: '[\s\S]*'
          minLength: 1
          maxLength: 65536
        VerificationCertificatePem:
          type: string
          description: The private key verification certificate.
          pattern: '[\s\S]*'
          minLength: 1
          maxLength: 65536
        Status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
        CertificateMode:
          type: string
          enum:
            - DEFAULT
            - SNI_ONLY
        AutoRegistrationStatus:
          type: string
          enum:
            - ENABLE
            - DISABLE
        RemoveAutoRegistration:
          type: boolean
        RegistrationConfig:
          $ref: '#/components/schemas/RegistrationConfig'
        Id:
          type: string
        Arn:
          type: string
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - CACertificatePem
        - Status
      x-stackql-resource-name: ca_certificate
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - VerificationCertificatePem
        - CertificateMode
        - CACertificatePem
      x-read-only-properties:
        - Arn
        - Id
      x-required-permissions:
        create:
          - iam:GetRole
          - iam:PassRole
          - iot:RegisterCACertificate
          - iot:DescribeCACertificate
          - iot:TagResource
          - iot:ListTagsForResource
        read:
          - iot:DescribeCACertificate
          - iot:ListTagsForResource
        update:
          - iam:GetRole
          - iam:PassRole
          - iot:UpdateCACertificate
          - iot:DescribeCACertificate
          - iot:TagResource
          - iot:UntagResource
          - iot:ListTagsForResource
        delete:
          - iot:UpdateCACertificate
          - iot:DeleteCACertificate
          - iot:DescribeCACertificate
        list:
          - iot:ListCACertificates
    Certificate:
      type: object
      properties:
        CACertificatePem:
          type: string
          minLength: 1
          maxLength: 65536
        CertificatePem:
          type: string
          minLength: 1
          maxLength: 65536
        CertificateSigningRequest:
          type: string
        CertificateMode:
          type: string
          enum:
            - DEFAULT
            - SNI_ONLY
        Status:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - REVOKED
            - PENDING_TRANSFER
            - PENDING_ACTIVATION
        Id:
          type: string
        Arn:
          type: string
      required:
        - Status
      x-stackql-resource-name: certificate
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - CertificateSigningRequest
        - CACertificatePem
        - CertificatePem
        - CertificateMode
      x-read-only-properties:
        - Arn
        - Id
      x-required-permissions:
        create:
          - iot:CreateCertificateFromCsr
          - iot:RegisterCertificate
          - iot:RegisterCertificateWithoutCA
          - iot:DescribeCertificate
        read:
          - iot:DescribeCertificate
        update:
          - iot:UpdateCertificate
          - iot:DescribeCertificate
        delete:
          - iot:DeleteCertificate
          - iot:UpdateCertificate
          - iot:DescribeCertificate
        list:
          - iot:ListCertificates
    CertificateProviderOperation:
      type: string
      enum:
        - CreateCertificateFromCsr
    CertificateProvider:
      type: object
      properties:
        CertificateProviderName:
          type: string
          pattern: '[\w=,@-]+'
          minLength: 1
          maxLength: 128
        LambdaFunctionArn:
          type: string
          minLength: 1
          maxLength: 170
        AccountDefaultForOperations:
          type: array
          minItems: 1
          maxItems: 1
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/CertificateProviderOperation'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          maxItems: 50
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          type: string
      required:
        - LambdaFunctionArn
        - AccountDefaultForOperations
      x-stackql-resource-name: certificate_provider
      x-stackql-primaryIdentifier:
        - CertificateProviderName
      x-create-only-properties:
        - CertificateProviderName
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - iot:CreateCertificateProvider
          - iot:DescribeCertificateProvider
          - iot:TagResource
          - iot:ListTagsForResource
        read:
          - iot:DescribeCertificateProvider
          - iot:ListTagsForResource
        update:
          - iot:UpdateCertificateProvider
          - iot:DescribeCertificateProvider
          - iot:TagResource
          - iot:UntagResource
          - iot:ListTagsForResource
        delete:
          - iot:DeleteCertificateProvider
          - iot:DescribeCertificateProvider
        list:
          - iot:ListCertificateProviders
    CustomMetric:
      type: object
      properties:
        MetricName:
          description: 'The name of the custom metric. This will be used in the metric report submitted from the device/thing. Shouldn''t begin with aws: . Cannot be updated once defined.'
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
        DisplayName:
          description: Field represents a friendly name in the console for the custom metric; it doesn't have to be unique. Don't use this name as the metric identifier in the device metric report. Can be updated once defined.
          type: string
          maxLength: 128
        MetricType:
          description: The type of the custom metric. Types include string-list, ip-address-list, number-list, and number.
          type: string
          enum:
            - string-list
            - ip-address-list
            - number-list
            - number
        MetricArn:
          description: The Amazon Resource Number (ARN) of the custom metric.
          type: string
          minLength: 20
          maxLength: 2048
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - MetricType
      x-stackql-resource-name: custom_metric
      x-stackql-primaryIdentifier:
        - MetricName
      x-create-only-properties:
        - MetricName
        - MetricType
      x-read-only-properties:
        - MetricArn
      x-required-permissions:
        create:
          - iot:CreateCustomMetric
          - iot:TagResource
        read:
          - iot:DescribeCustomMetric
          - iot:ListTagsForResource
        update:
          - iot:UpdateCustomMetric
          - iot:ListTagsForResource
          - iot:UntagResource
          - iot:TagResource
        delete:
          - iot:DescribeCustomMetric
          - iot:DeleteCustomMetric
        list:
          - iot:ListCustomMetrics
    Dimension:
      type: object
      properties:
        Name:
          description: A unique identifier for the dimension.
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
        Type:
          description: Specifies the type of the dimension.
          type: string
          enum:
            - TOPIC_FILTER
        StringValues:
          description: Specifies the value or list of values for the dimension.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
            minLength: 1
            maxLength: 256
          minItems: 1
          maxItems: 5
        Tags:
          description: Metadata that can be used to manage the dimension.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          description: The ARN (Amazon resource name) of the created dimension.
          type: string
      required:
        - Type
        - StringValues
      x-stackql-resource-name: dimension
      x-stackql-primaryIdentifier:
        - Name
      x-create-only-properties:
        - Name
        - Type
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - iot:CreateDimension
          - iot:TagResource
        read:
          - iot:DescribeDimension
          - iot:ListTagsForResource
        update:
          - iot:UpdateDimension
          - iot:ListTagsForResource
          - iot:UntagResource
          - iot:TagResource
        delete:
          - iot:DescribeDimension
          - iot:DeleteDimension
        list:
          - iot:ListDimensions
    AuthorizerConfig:
      type: object
      properties:
        AllowAuthorizerOverride:
          type: boolean
        DefaultAuthorizerName:
          type: string
          minLength: 1
          maxLength: 128
          pattern: ^[\w=,@-]+$
      additionalProperties: false
    ServerCertificateConfig:
      type: object
      properties:
        EnableOCSPCheck:
          type: boolean
      additionalProperties: false
    ServerCertificateSummary:
      type: object
      properties:
        ServerCertificateArn:
          type: string
          pattern: ^arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\d{1}:\d{12}:certificate/[a-zA-Z0-9/-]+$
          minLength: 1
          maxLength: 2048
        ServerCertificateStatus:
          type: string
          enum:
            - INVALID
            - VALID
        ServerCertificateStatusDetail:
          type: string
      additionalProperties: false
    TlsConfig:
      type: object
      properties:
        SecurityPolicy:
          type: string
          maxLength: 128
      additionalProperties: false
    DomainConfiguration:
      type: object
      properties:
        DomainConfigurationName:
          type: string
          minLength: 1
          maxLength: 128
          pattern: ^[\w.-]+$
        AuthorizerConfig:
          $ref: '#/components/schemas/AuthorizerConfig'
        DomainName:
          type: string
          minLength: 1
          maxLength: 253
        ServerCertificateArns:
          type: array
          minItems: 0
          maxItems: 1
          x-insertionOrder: true
          items:
            type: string
            pattern: ^arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\d{1}:\d{12}:certificate/[a-zA-Z0-9/-]+$
            minLength: 1
            maxLength: 2048
        ServiceType:
          type: string
          enum:
            - DATA
            - CREDENTIAL_PROVIDER
            - JOBS
        ValidationCertificateArn:
          type: string
          pattern: ^arn:aws(-cn|-us-gov|-iso-b|-iso)?:acm:[a-z]{2}-(gov-|iso-|isob-)?[a-z]{4,9}-\d{1}:\d{12}:certificate/[a-zA-Z0-9/-]+$
        Arn:
          type: string
        DomainConfigurationStatus:
          type: string
          enum:
            - ENABLED
            - DISABLED
        DomainType:
          type: string
          enum:
            - ENDPOINT
            - AWS_MANAGED
            - CUSTOMER_MANAGED
        ServerCertificateConfig:
          $ref: '#/components/schemas/ServerCertificateConfig'
        ServerCertificates:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/ServerCertificateSummary'
        TlsConfig:
          $ref: '#/components/schemas/TlsConfig'
        Tags:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Tag'
      required: []
      x-stackql-resource-name: domain_configuration
      x-stackql-primaryIdentifier:
        - DomainConfigurationName
      x-create-only-properties:
        - DomainConfigurationName
        - DomainName
        - ServiceType
        - ValidationCertificateArn
        - ServerCertificateArns
      x-read-only-properties:
        - Arn
        - DomainType
        - ServerCertificates
      x-required-permissions:
        create:
          - iot:CreateDomainConfiguration
          - iot:UpdateDomainConfiguration
          - iot:DescribeDomainConfiguration
          - iot:TagResource
          - iot:ListTagsForResource
          - acm:GetCertificate
        read:
          - iot:DescribeDomainConfiguration
          - iot:ListTagsForResource
        update:
          - iot:UpdateDomainConfiguration
          - iot:DescribeDomainConfiguration
          - iot:ListTagsForResource
          - iot:TagResource
          - iot:UntagResource
        delete:
          - iot:DescribeDomainConfiguration
          - iot:DeleteDomainConfiguration
          - iot:UpdateDomainConfiguration
        list:
          - iot:ListDomainConfigurations
    AggregationType:
      description: Aggregation types supported by Fleet Indexing
      type: object
      properties:
        Name:
          description: Fleet Indexing aggregation type names such as Statistics, Percentiles and Cardinality
          type: string
        Values:
          description: Fleet Indexing aggregation type values
          type: array
          x-insertionOrder: false
          items:
            type: string
      required:
        - Name
        - Values
      additionalProperties: false
    iso8601UTC:
      description: The datetime value in ISO 8601 format. The timezone is always UTC. (YYYY-MM-DDThh:mm:ss.sssZ)
      type: string
      pattern: ^([0-2]\d{3})-(0[0-9]|1[0-2])-([0-2]\d|3[01])T([01]\d|2[0-4]):([0-5]\d):([0-6]\d)((\.\d{3})?)Z$
    FleetMetric:
      type: object
      properties:
        MetricName:
          description: The name of the fleet metric
          type: string
        Description:
          description: The description of a fleet metric
          type: string
        QueryString:
          description: The Fleet Indexing query used by a fleet metric
          type: string
        Period:
          description: The period of metric emission in seconds
          type: integer
        AggregationField:
          description: The aggregation field to perform aggregation and metric emission
          type: string
        QueryVersion:
          description: The version of a Fleet Indexing query used by a fleet metric
          type: string
        IndexName:
          description: The index name of a fleet metric
          type: string
        Unit:
          description: The unit of data points emitted by a fleet metric
          type: string
        AggregationType:
          $ref: '#/components/schemas/AggregationType'
        MetricArn:
          description: The Amazon Resource Number (ARN) of a fleet metric metric
          type: string
        CreationDate:
          description: The creation date of a fleet metric
          $ref: '#/components/schemas/iso8601UTC'
        LastModifiedDate:
          description: The last modified date of a fleet metric
          $ref: '#/components/schemas/iso8601UTC'
        Version:
          description: The version of a fleet metric
          type: number
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - MetricName
      x-stackql-resource-name: fleet_metric
      x-stackql-primaryIdentifier:
        - MetricName
      x-create-only-properties:
        - MetricName
      x-read-only-properties:
        - MetricArn
        - CreationDate
        - LastModifiedDate
        - Version
      x-required-permissions:
        create:
          - iot:CreateFleetMetric
          - iot:DescribeFleetMetric
          - iot:TagResource
        read:
          - iot:DescribeFleetMetric
          - iot:ListTagsForResource
        update:
          - iot:UpdateFleetMetric
          - iot:DescribeFleetMetric
          - iot:ListTagsForResource
          - iot:UntagResource
          - iot:TagResource
        delete:
          - iot:DeleteFleetMetric
          - iot:DescribeFleetMetric
        list:
          - iot:ListFleetMetrics
    ExponentialRolloutRate:
      description: Allows you to create an exponential rate of rollout for a job.
      type: object
      properties:
        BaseRatePerMinute:
          description: The minimum number of things that will be notified of a pending job, per minute at the start of job rollout. This parameter allows you to define the initial rate of rollout.
          $ref: '#/components/schemas/BaseRatePerMinute'
        IncrementFactor:
          description: The exponential factor to increase the rate of rollout for a job.
          $ref: '#/components/schemas/IncrementFactor'
        RateIncreaseCriteria:
          description: The criteria to initiate the increase in rate of rollout for a job.
          type: object
          $ref: '#/components/schemas/RateIncreaseCriteria'
      additionalProperties: false
      required:
        - BaseRatePerMinute
        - IncrementFactor
        - RateIncreaseCriteria
    BaseRatePerMinute:
      type: integer
      minimum: 1
    IncrementFactor:
      type: number
      minimum: 1
      maximum: 5
    RateIncreaseCriteria:
      type: object
      properties:
        NumberOfNotifiedThings:
          $ref: '#/components/schemas/NumberOfNotifiedThings'
        NumberOfSucceededThings:
          $ref: '#/components/schemas/NumberOfSucceededThings'
      additionalProperties: false
    NumberOfNotifiedThings:
      type: integer
      minimum: 1
    NumberOfSucceededThings:
      type: integer
      minimum: 1
    MaximumPerMinute:
      type: integer
      minimum: 1
    AbortCriteria:
      description: The criteria that determine when and how a job abort takes place.
      type: object
      properties:
        Action:
          description: The type of job action to take to initiate the job abort.
          $ref: '#/components/schemas/Action'
        FailureType:
          description: The type of job execution failures that can initiate a job abort.
          $ref: '#/components/schemas/FailureType'
        MinNumberOfExecutedThings:
          description: The minimum number of things which must receive job execution notifications before the job can be aborted.
          $ref: '#/components/schemas/MinNumberOfExecutedThings'
        ThresholdPercentage:
          description: The minimum percentage of job execution failures that must occur to initiate the job abort.
          $ref: '#/components/schemas/ThresholdPercentage'
      additionalProperties: false
      required:
        - Action
        - FailureType
        - MinNumberOfExecutedThings
        - ThresholdPercentage
    Action:
      type: object
      additionalProperties: false
      properties:
        CloudwatchAlarm:
          $ref: '#/components/schemas/CloudwatchAlarmAction'
        CloudwatchLogs:
          $ref: '#/components/schemas/CloudwatchLogsAction'
        CloudwatchMetric:
          $ref: '#/components/schemas/CloudwatchMetricAction'
        DynamoDB:
          $ref: '#/components/schemas/DynamoDBAction'
        DynamoDBv2:
          $ref: '#/components/schemas/DynamoDBv2Action'
        Elasticsearch:
          $ref: '#/components/schemas/ElasticsearchAction'
        Firehose:
          $ref: '#/components/schemas/FirehoseAction'
        Http:
          $ref: '#/components/schemas/HttpAction'
        IotAnalytics:
          $ref: '#/components/schemas/IotAnalyticsAction'
        IotEvents:
          $ref: '#/components/schemas/IotEventsAction'
        IotSiteWise:
          $ref: '#/components/schemas/IotSiteWiseAction'
        Kafka:
          $ref: '#/components/schemas/KafkaAction'
        Kinesis:
          $ref: '#/components/schemas/KinesisAction'
        Lambda:
          $ref: '#/components/schemas/LambdaAction'
        Location:
          $ref: '#/components/schemas/LocationAction'
        OpenSearch:
          $ref: '#/components/schemas/OpenSearchAction'
        Republish:
          $ref: '#/components/schemas/RepublishAction'
        S3:
          $ref: '#/components/schemas/S3Action'
        Sns:
          $ref: '#/components/schemas/SnsAction'
        Sqs:
          $ref: '#/components/schemas/SqsAction'
        StepFunctions:
          $ref: '#/components/schemas/StepFunctionsAction'
        Timestream:
          $ref: '#/components/schemas/TimestreamAction'
    FailureType:
      type: string
      enum:
        - FAILED
        - REJECTED
        - TIMED_OUT
        - ALL
    MinNumberOfExecutedThings:
      type: integer
      minimum: 1
    ThresholdPercentage:
      type: number
      maximum: 100
    InProgressTimeoutInMinutes:
      description: Specifies the amount of time, in minutes, this device has to finish execution of this job.
      type: integer
      minimum: 1
      maximum: 10080
    RoleArn:
      type: string
    ExpiresInSec:
      description: How number (in seconds) pre-signed URLs are valid.
      type: integer
      minimum: 60
      maximum: 3600
    RetryCriteria:
      description: Specifies how many times a failure type should be retried.
      type: object
      properties:
        NumberOfRetries:
          type: integer
          minimum: 0
          maximum: 10
        FailureType:
          $ref: '#/components/schemas/JobRetryFailureType'
      additionalProperties: false
    JobRetryFailureType:
      type: string
      enum:
        - FAILED
        - TIMED_OUT
        - ALL
    MaintenanceWindow:
      description: Specifies a start time and duration for a scheduled Job.
      type: object
      properties:
        StartTime:
          type: string
          minLength: 1
          maxLength: 256
        DurationInMinutes:
          type: integer
          minimum: 1
          maximum: 1430
      additionalProperties: false
    DestinationPackageVersion:
      description: Specifies target package version ARNs for a software update job.
      type: string
      minLength: 1
      maxLength: 1600
    JobTemplate:
      type: object
      properties:
        Arn:
          type: string
        JobArn:
          description: Optional for copying a JobTemplate from a pre-existing Job configuration.
          type: string
        JobTemplateId:
          type: string
          pattern: '[a-zA-Z0-9_-]+'
          minLength: 1
          maxLength: 64
        Description:
          description: A description of the Job Template.
          type: string
          pattern: '[^\p{C}]+'
          maxLength: 2028
        Document:
          description: The job document. Required if you don't specify a value for documentSource.
          type: string
          maxLength: 32768
        DocumentSource:
          description: An S3 link to the job document to use in the template. Required if you don't specify a value for document.
          type: string
          minLength: 1
          maxLength: 1350
        TimeoutConfig:
          description: Specifies the amount of time each device has to finish its execution of the job.
          type: object
          properties:
            InProgressTimeoutInMinutes:
              $ref: '#/components/schemas/InProgressTimeoutInMinutes'
          required:
            - InProgressTimeoutInMinutes
          additionalProperties: false
        JobExecutionsRolloutConfig:
          description: Allows you to create a staged rollout of a job.
          type: object
          properties:
            ExponentialRolloutRate:
              description: The rate of increase for a job rollout. This parameter allows you to define an exponential rate for a job rollout.
              $ref: '#/components/schemas/ExponentialRolloutRate'
            MaximumPerMinute:
              description: The maximum number of things that will be notified of a pending job, per minute. This parameter allows you to create a staged rollout.
              $ref: '#/components/schemas/MaximumPerMinute'
          additionalProperties: false
        AbortConfig:
          description: The criteria that determine when and how a job abort takes place.
          type: object
          properties:
            CriteriaList:
              type: array
              x-insertionOrder: false
              minItems: 1
              items:
                $ref: '#/components/schemas/AbortCriteria'
          required:
            - CriteriaList
          additionalProperties: false
        PresignedUrlConfig:
          type: object
          description: Configuration for pre-signed S3 URLs.
          properties:
            RoleArn:
              $ref: '#/components/schemas/RoleArn'
            ExpiresInSec:
              $ref: '#/components/schemas/ExpiresInSec'
          required:
            - RoleArn
          additionalProperties: false
        JobExecutionsRetryConfig:
          type: object
          properties:
            RetryCriteriaList:
              type: array
              x-insertionOrder: false
              minItems: 1
              maxItems: 2
              items:
                $ref: '#/components/schemas/RetryCriteria'
          additionalProperties: false
        MaintenanceWindows:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/MaintenanceWindow'
        DestinationPackageVersions:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/DestinationPackageVersion'
        Tags:
          description: Metadata that can be used to manage the JobTemplate.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - JobTemplateId
        - Description
      x-stackql-resource-name: job_template
      x-stackql-primaryIdentifier:
        - JobTemplateId
      x-create-only-properties:
        - JobTemplateId
        - JobArn
        - Description
        - Document
        - DocumentSource
        - TimeoutConfig
        - JobExecutionsRolloutConfig
        - AbortConfig
        - PresignedUrlConfig
        - Tags
        - DestinationPackageVersions
        - JobExecutionsRetryConfig
        - MaintenanceWindows
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - iot:CreateJobTemplate
          - iam:PassRole
          - s3:GetObject
          - iot:TagResource
        read:
          - iot:DescribeJobTemplate
        delete:
          - iot:DeleteJobTemplate
        list:
          - iot:ListJobTemplates
    Logging:
      type: object
      properties:
        AccountId:
          description: Your 12-digit account ID (used as the primary identifier for the CloudFormation resource).
          type: string
          minLength: 12
          maxLength: 12
          pattern: ^[0-9]{12}$
        RoleArn:
          description: The ARN of the role that allows IoT to write to Cloudwatch logs.
          type: string
          minLength: 20
          maxLength: 2048
        DefaultLogLevel:
          description: 'The log level to use. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.'
          type: string
          enum:
            - ERROR
            - WARN
            - INFO
            - DEBUG
            - DISABLED
      required:
        - AccountId
        - RoleArn
        - DefaultLogLevel
      x-stackql-resource-name: logging
      x-stackql-primaryIdentifier:
        - AccountId
      x-create-only-properties:
        - AccountId
      x-required-permissions:
        create:
          - iot:SetV2LoggingOptions
          - iot:GetV2LoggingOptions
          - iam:PassRole
        read:
          - iot:GetV2LoggingOptions
        update:
          - iot:SetV2LoggingOptions
          - iot:GetV2LoggingOptions
          - iam:PassRole
        delete:
          - iot:SetV2LoggingOptions
          - iot:GetV2LoggingOptions
        list:
          - iot:GetV2LoggingOptions
    ActionParams:
      type: object
      description: The set of parameters for this mitigation action. You can specify only one type of parameter (in other words, you can apply only one action for each defined mitigation action).
      properties:
        AddThingsToThingGroupParams:
          $ref: '#/components/schemas/AddThingsToThingGroupParams'
        EnableIoTLoggingParams:
          $ref: '#/components/schemas/EnableIoTLoggingParams'
        PublishFindingToSnsParams:
          $ref: '#/components/schemas/PublishFindingToSnsParams'
        ReplaceDefaultPolicyVersionParams:
          $ref: '#/components/schemas/ReplaceDefaultPolicyVersionParams'
        UpdateCACertificateParams:
          $ref: '#/components/schemas/UpdateCACertificateParams'
        UpdateDeviceCertificateParams:
          $ref: '#/components/schemas/UpdateDeviceCertificateParams'
      additionalProperties: false
    AddThingsToThingGroupParams:
      description: Parameters to define a mitigation action that moves devices associated with a certificate to one or more specified thing groups, typically for quarantine.
      type: object
      properties:
        OverrideDynamicGroups:
          type: boolean
          description: Specifies if this mitigation action can move the things that triggered the mitigation action out of one or more dynamic thing groups.
        ThingGroupNames:
          description: The list of groups to which you want to add the things that triggered the mitigation action.
          type: array
          uniqueItems: true
          items:
            type: string
            minLength: 1
            maxLength: 128
          minItems: 1
          maxItems: 10
          x-insertionOrder: false
      required:
        - ThingGroupNames
      additionalProperties: false
    EnableIoTLoggingParams:
      description: Parameters to define a mitigation action that enables AWS IoT logging at a specified level of detail.
      type: object
      properties:
        LogLevel:
          type: string
          enum:
            - DEBUG
            - INFO
            - ERROR
            - WARN
            - UNSET_VALUE
          description: ' Specifies which types of information are logged.'
        RoleArnForLogging:
          description: ' The ARN of the IAM role used for logging.'
          type: string
          minLength: 20
          maxLength: 2048
      required:
        - LogLevel
        - RoleArnForLogging
      additionalProperties: false
    PublishFindingToSnsParams:
      type: object
      description: Parameters, to define a mitigation action that publishes findings to Amazon SNS. You can implement your own custom actions in response to the Amazon SNS messages.
      properties:
        TopicArn:
          type: string
          description: The ARN of the topic to which you want to publish the findings.
          minLength: 20
          maxLength: 2048
      required:
        - TopicArn
      additionalProperties: false
    ReplaceDefaultPolicyVersionParams:
      type: object
      description: Parameters to define a mitigation action that adds a blank policy to restrict permissions.
      properties:
        TemplateName:
          type: string
          enum:
            - BLANK_POLICY
            - UNSET_VALUE
      required:
        - TemplateName
      additionalProperties: false
    UpdateCACertificateParams:
      type: object
      description: Parameters to define a mitigation action that changes the state of the CA certificate to inactive.
      properties:
        Action:
          type: string
          enum:
            - DEACTIVATE
            - UNSET_VALUE
      required:
        - Action
      additionalProperties: false
    UpdateDeviceCertificateParams:
      type: object
      description: Parameters to define a mitigation action that changes the state of the device certificate to inactive.
      properties:
        Action:
          type: string
          enum:
            - DEACTIVATE
            - UNSET_VALUE
      required:
        - Action
      additionalProperties: false
    MitigationAction:
      type: object
      properties:
        ActionName:
          description: A unique identifier for the mitigation action.
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
        RoleArn:
          type: string
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
        ActionParams:
          $ref: '#/components/schemas/ActionParams'
        MitigationActionArn:
          type: string
        MitigationActionId:
          type: string
      required:
        - RoleArn
        - ActionParams
      x-stackql-resource-name: mitigation_action
      x-stackql-primaryIdentifier:
        - ActionName
      x-create-only-properties:
        - ActionName
      x-read-only-properties:
        - MitigationActionArn
        - MitigationActionId
      x-required-permissions:
        create:
          - iot:CreateMitigationAction
          - iot:DescribeMitigationAction
          - iot:TagResource
          - iam:PassRole
        read:
          - iot:DescribeMitigationAction
          - iot:ListTagsForResource
        update:
          - iot:UpdateMitigationAction
          - iot:ListTagsForResource
          - iot:UntagResource
          - iot:TagResource
          - iam:PassRole
        delete:
          - iot:DescribeMitigationAction
          - iot:DeleteMitigationAction
        list:
          - iot:ListMitigationActions
    Policy:
      type: object
      properties:
        Id:
          type: string
        Arn:
          type: string
        PolicyDocument:
          type: object
          minLength: 1
          maxLength: 404600
        PolicyName:
          type: string
        Tags:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - PolicyDocument
      x-stackql-resource-name: policy
      x-stackql-primaryIdentifier:
        - Id
      x-create-only-properties:
        - PolicyName
      x-read-only-properties:
        - Arn
        - Id
      x-required-permissions:
        create:
          - iot:CreatePolicy
          - iot:GetPolicy
          - iot:TagResource
          - iot:ListTagsForResource
        read:
          - iot:GetPolicy
          - iot:ListTagsForResource
        delete:
          - iot:DeletePolicy
          - iot:GetPolicy
          - iot:ListPolicyVersions
          - iot:DeletePolicyVersion
        update:
          - iot:GetPolicy
          - iot:ListPolicyVersions
          - iot:CreatePolicyVersion
          - iot:DeletePolicyVersion
          - iot:SetDefaultPolicyVersion
          - iot:TagResource
          - iot:UntagResource
          - iot:ListTagsForResource
        list:
          - iot:ListPolicies
    ProvisioningHook:
      type: object
      properties:
        TargetArn:
          type: string
        PayloadVersion:
          type: string
    ProvisioningTemplate:
      type: object
      properties:
        TemplateArn:
          type: string
        TemplateName:
          type: string
          pattern: ^[0-9A-Za-z_-]+$
          minLength: 1
          maxLength: 36
        Description:
          type: string
          maxLength: 500
        Enabled:
          type: boolean
        ProvisioningRoleArn:
          type: string
        TemplateBody:
          type: string
        TemplateType:
          type: string
          enum:
            - FLEET_PROVISIONING
            - JITP
        PreProvisioningHook:
          $ref: '#/components/schemas/ProvisioningHook'
        Tags:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - ProvisioningRoleArn
        - TemplateBody
      x-stackql-resource-name: provisioning_template
      x-stackql-primaryIdentifier:
        - TemplateName
      x-create-only-properties:
        - TemplateName
        - TemplateType
      x-read-only-properties:
        - TemplateArn
      x-required-permissions:
        create:
          - iam:GetRole
          - iam:PassRole
          - iot:CreateProvisioningTemplate
          - iot:DescribeProvisioningTemplate
          - iot:TagResource
          - iot:ListTagsForResource
        read:
          - iot:DescribeProvisioningTemplate
          - iot:ListTagsForResource
        update:
          - iam:GetRole
          - iam:PassRole
          - iot:UpdateProvisioningTemplate
          - iot:CreateProvisioningTemplateVersion
          - iot:ListProvisioningTemplateVersions
          - iot:DeleteProvisioningTemplateVersion
          - iot:DescribeProvisioningTemplate
          - iot:TagResource
          - iot:UntagResource
          - iot:ListTagsForResource
        delete:
          - iot:DeleteProvisioningTemplate
          - iot:DescribeProvisioningTemplate
        list:
          - iot:ListProvisioningTemplates
    ResourceSpecificLogging:
      type: object
      properties:
        TargetType:
          description: The target type. Value must be THING_GROUP, CLIENT_ID, SOURCE_IP, PRINCIPAL_ID, or EVENT_TYPE.
          type: string
          enum:
            - THING_GROUP
            - CLIENT_ID
            - SOURCE_IP
            - PRINCIPAL_ID
            - EVENT_TYPE
        TargetName:
          description: The target name.
          type: string
          minLength: 1
          maxLength: 128
          pattern: '[a-zA-Z0-9.:\s_\-]+'
        LogLevel:
          description: 'The log level for a specific target. Valid values are: ERROR, WARN, INFO, DEBUG, or DISABLED.'
          type: string
          enum:
            - ERROR
            - WARN
            - INFO
            - DEBUG
            - DISABLED
        TargetId:
          description: Unique Id for a Target (TargetType:TargetName), this will be internally built to serve as primary identifier for a log target.
          type: string
          minLength: 13
          maxLength: 140
          pattern: '[a-zA-Z0-9.:\s_\-]+'
      required:
        - TargetName
        - TargetType
        - LogLevel
      x-stackql-resource-name: resource_specific_logging
      x-stackql-primaryIdentifier:
        - TargetId
      x-create-only-properties:
        - TargetName
        - TargetType
      x-read-only-properties:
        - TargetId
      x-required-permissions:
        create:
          - iot:ListV2LoggingLevels
          - iot:SetV2LoggingLevel
        read:
          - iot:ListV2LoggingLevels
        update:
          - iot:ListV2LoggingLevels
          - iot:SetV2LoggingLevel
        delete:
          - iot:ListV2LoggingLevels
          - iot:DeleteV2LoggingLevel
        list:
          - iot:ListV2LoggingLevels
    RoleAlias:
      type: object
      properties:
        RoleAlias:
          type: string
          pattern: '[\w=,@-]+'
          minLength: 1
          maxLength: 128
        RoleAliasArn:
          type: string
          pattern: '[\w=,@-]+'
          minLength: 1
          maxLength: 128
        RoleArn:
          type: string
          pattern: arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+
          minLength: 20
          maxLength: 2048
        CredentialDurationSeconds:
          type: integer
          minimum: 900
          maximum: 43200
          default: 3600
        Tags:
          type: array
          x-insertionOrder: true
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - RoleArn
      x-stackql-resource-name: role_alias
      x-stackql-primaryIdentifier:
        - RoleAlias
      x-create-only-properties:
        - RoleAlias
      x-read-only-properties:
        - RoleAliasArn
      x-required-permissions:
        create:
          - iam:GetRole
          - iam:PassRole
          - iot:CreateRoleAlias
          - iot:DescribeRoleAlias
          - iot:TagResource
          - iot:ListTagsForResource
        read:
          - iam:GetRole
          - iam:PassRole
          - iot:DescribeRoleAlias
          - iot:ListTagsForResource
        update:
          - iam:GetRole
          - iam:PassRole
          - iot:UpdateRoleAlias
          - iot:DescribeRoleAlias
          - iot:TagResource
          - iot:UntagResource
          - iot:ListTagsForResource
        delete:
          - iot:DeleteRoleAlias
          - iot:DescribeRoleAlias
        list:
          - iot:ListRoleAliases
    ScheduledAudit:
      type: object
      properties:
        ScheduledAuditName:
          description: The name you want to give to the scheduled audit.
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
        Frequency:
          description: How often the scheduled audit takes place. Can be one of DAILY, WEEKLY, BIWEEKLY, or MONTHLY.
          type: string
          enum:
            - DAILY
            - WEEKLY
            - BIWEEKLY
            - MONTHLY
        DayOfMonth:
          description: The day of the month on which the scheduled audit takes place. Can be 1 through 31 or LAST. This field is required if the frequency parameter is set to MONTHLY.
          type: string
          pattern: ^([1-9]|[12][0-9]|3[01])$|^LAST$|^UNSET_VALUE$
        DayOfWeek:
          description: The day of the week on which the scheduled audit takes place. Can be one of SUN, MON, TUE,WED, THU, FRI, or SAT. This field is required if the frequency parameter is set to WEEKLY or BIWEEKLY.
          type: string
          enum:
            - SUN
            - MON
            - TUE
            - WED
            - THU
            - FRI
            - SAT
            - UNSET_VALUE
        TargetCheckNames:
          description: Which checks are performed during the scheduled audit. Checks must be enabled for your account.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        ScheduledAuditArn:
          description: The ARN (Amazon resource name) of the scheduled audit.
          type: string
          minLength: 20
          maxLength: 2048
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Frequency
        - TargetCheckNames
      x-stackql-resource-name: scheduled_audit
      x-stackql-primaryIdentifier:
        - ScheduledAuditName
      x-create-only-properties:
        - ScheduledAuditName
      x-read-only-properties:
        - ScheduledAuditArn
      x-required-permissions:
        create:
          - iot:CreateScheduledAudit
          - iot:DescribeScheduledAudit
          - iot:TagResource
        read:
          - iot:DescribeScheduledAudit
          - iot:ListTagsForResource
        update:
          - iot:UpdateScheduledAudit
          - iot:ListTagsForResource
          - iot:UntagResource
          - iot:TagResource
        delete:
          - iot:DescribeScheduledAudit
          - iot:DeleteScheduledAudit
        list:
          - iot:ListScheduledAudits
    Behavior:
      description: A security profile behavior.
      type: object
      properties:
        Name:
          description: The name for the behavior.
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
        Metric:
          description: What is measured by the behavior.
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
        MetricDimension:
          $ref: '#/components/schemas/MetricDimension'
        Criteria:
          $ref: '#/components/schemas/BehaviorCriteria'
        SuppressAlerts:
          description: Manage Detect alarm SNS notifications by setting behavior notification to on or suppressed. Detect will continue to performing device behavior evaluations. However, suppressed alarms wouldn't be forwarded for SNS notification.
          type: boolean
        ExportMetric:
          $ref: '#/components/schemas/ExportMetric'
      required:
        - Name
      additionalProperties: false
    ExportMetric:
      description: Flag to enable/disable metrics export for metric to be retained.
      type: boolean
    MetricDimension:
      description: The dimension of a metric.
      type: object
      properties:
        DimensionName:
          description: A unique identifier for the dimension.
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
        Operator:
          description: Defines how the dimensionValues of a dimension are interpreted.
          type: string
          enum:
            - IN
            - NOT_IN
      required:
        - DimensionName
      additionalProperties: false
    BehaviorCriteria:
      description: The criteria by which the behavior is determined to be normal.
      type: object
      properties:
        ComparisonOperator:
          description: The operator that relates the thing measured (metric) to the criteria (containing a value or statisticalThreshold).
          type: string
          enum:
            - less-than
            - less-than-equals
            - greater-than
            - greater-than-equals
            - in-cidr-set
            - not-in-cidr-set
            - in-port-set
            - not-in-port-set
            - in-set
            - not-in-set
        Value:
          $ref: '#/components/schemas/MetricValue'
        DurationSeconds:
          type: integer
          description: Use this to specify the time duration over which the behavior is evaluated.
        ConsecutiveDatapointsToAlarm:
          description: If a device is in violation of the behavior for the specified number of consecutive datapoints, an alarm occurs. If not specified, the default is 1.
          type: integer
          minimum: 1
          maximum: 10
        ConsecutiveDatapointsToClear:
          description: If an alarm has occurred and the offending device is no longer in violation of the behavior for the specified number of consecutive datapoints, the alarm is cleared. If not specified, the default is 1.
          type: integer
          minimum: 1
          maximum: 10
        StatisticalThreshold:
          $ref: '#/components/schemas/StatisticalThreshold'
        MlDetectionConfig:
          $ref: '#/components/schemas/MachineLearningDetectionConfig'
      additionalProperties: false
    MetricValue:
      description: The value to be compared with the metric.
      type: object
      properties:
        Count:
          description: If the ComparisonOperator calls for a numeric value, use this to specify that (integer) numeric value to be compared with the metric.
          type: string
          minimum: 0
        Cidrs:
          description: If the ComparisonOperator calls for a set of CIDRs, use this to specify that set to be compared with the metric.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
        Ports:
          description: If the ComparisonOperator calls for a set of ports, use this to specify that set to be compared with the metric.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: integer
            minimum: 0
            maximum: 65535
        Number:
          description: The numeral value of a metric.
          type: number
        Numbers:
          description: The numeral values of a metric.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: number
        Strings:
          description: The string values of a metric.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            type: string
      additionalProperties: false
    StatisticalThreshold:
      description: A statistical ranking (percentile) which indicates a threshold value by which a behavior is determined to be in compliance or in violation of the behavior.
      type: object
      properties:
        Statistic:
          description: The percentile which resolves to a threshold value by which compliance with a behavior is determined
          type: string
          enum:
            - Average
            - p0
            - p0.1
            - p0.01
            - p1
            - p10
            - p50
            - p90
            - p99
            - p99.9
            - p99.99
            - p100
      additionalProperties: false
    MachineLearningDetectionConfig:
      description: The configuration of an ML Detect Security Profile.
      type: object
      properties:
        ConfidenceLevel:
          description: The sensitivity of anomalous behavior evaluation. Can be Low, Medium, or High.
          type: string
          enum:
            - LOW
            - MEDIUM
            - HIGH
      additionalProperties: false
    AlertTarget:
      description: A structure containing the alert target ARN and the role ARN.
      type: object
      properties:
        AlertTargetArn:
          description: The ARN of the notification target to which alerts are sent.
          type: string
          maxLength: 2048
        RoleArn:
          description: The ARN of the role that grants permission to send alerts to the notification target.
          type: string
          minLength: 20
          maxLength: 2048
      required:
        - AlertTargetArn
        - RoleArn
      additionalProperties: false
    MetricToRetain:
      description: The metric you want to retain. Dimensions are optional.
      type: object
      properties:
        Metric:
          description: What is measured by the behavior.
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
        MetricDimension:
          $ref: '#/components/schemas/MetricDimension'
        ExportMetric:
          $ref: '#/components/schemas/ExportMetric'
      required:
        - Metric
      additionalProperties: false
    SecurityProfile:
      type: object
      properties:
        SecurityProfileName:
          description: A unique identifier for the security profile.
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
        SecurityProfileDescription:
          description: A description of the security profile.
          type: string
          maxLength: 1000
        Behaviors:
          description: Specifies the behaviors that, when violated by a device (thing), cause an alert.
          type: array
          maxLength: 100
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Behavior'
        AlertTargets:
          description: Specifies the destinations to which alerts are sent.
          type: object
          x-patternProperties:
            '[a-zA-Z0-9:_-]+':
              $ref: '#/components/schemas/AlertTarget'
          additionalProperties: false
        AdditionalMetricsToRetainV2:
          description: A list of metrics whose data is retained (stored). By default, data is retained for any metric used in the profile's behaviors, but it is also retained for any metric specified here.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/MetricToRetain'
        MetricsExportConfig:
          description: A structure containing the mqtt topic for metrics export.
          type: object
          properties:
            MqttTopic:
              description: The topic for metrics export.
              type: string
              minLength: 1
              maxLength: 512
            RoleArn:
              description: The ARN of the role that grants permission to publish to mqtt topic.
              type: string
              minLength: 20
              maxLength: 2048
          required:
            - MqttTopic
            - RoleArn
          additionalProperties: false
        Tags:
          description: Metadata that can be used to manage the security profile.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        TargetArns:
          description: A set of target ARNs that the security profile is attached to.
          type: array
          uniqueItems: true
          x-insertionOrder: false
          items:
            description: The ARN of the target to which the security profile is attached.
            type: string
            maxLength: 2048
        SecurityProfileArn:
          description: The ARN (Amazon resource name) of the created security profile.
          type: string
      required: []
      x-stackql-resource-name: security_profile
      x-stackql-primaryIdentifier:
        - SecurityProfileName
      x-create-only-properties:
        - SecurityProfileName
      x-read-only-properties:
        - SecurityProfileArn
      x-required-permissions:
        create:
          - iot:CreateSecurityProfile
          - iot:AttachSecurityProfile
          - iot:DescribeSecurityProfile
          - iot:TagResource
          - iam:PassRole
        read:
          - iot:DescribeSecurityProfile
          - iot:ListTagsForResource
          - iot:ListTargetsForSecurityProfile
        update:
          - iot:UpdateSecurityProfile
          - iot:ListTargetsForSecurityProfile
          - iot:AttachSecurityProfile
          - iot:DetachSecurityProfile
          - iot:ListTagsForResource
          - iot:UntagResource
          - iot:TagResource
          - iam:PassRole
        delete:
          - iot:DescribeSecurityProfile
          - iot:DeleteSecurityProfile
        list:
          - iot:ListSecurityProfiles
    SoftwarePackage:
      type: object
      properties:
        Description:
          type: string
          maxLength: 1024
          minLength: 0
          pattern: ^[^\p{C}]+$
        PackageArn:
          type: string
        PackageName:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^[a-zA-Z0-9-_.]+$
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: software_package
      x-stackql-primaryIdentifier:
        - PackageName
      x-create-only-properties:
        - PackageName
      x-read-only-properties:
        - PackageArn
      x-required-permissions:
        create:
          - iot:CreatePackage
          - iot:GetPackage
          - iot:TagResource
          - iot:GetIndexingConfiguration
        read:
          - iot:GetPackage
          - iot:ListTagsForResource
        update:
          - iot:CreatePackage
          - iot:UpdatePackage
          - iot:GetPackage
          - iot:ListTagsForResource
          - iot:TagResource
          - iot:UntagResource
          - iot:GetIndexingConfiguration
        delete:
          - iot:DeletePackage
          - iot:DeletePackageVersion
          - iot:GetPackage
          - iot:GetPackageVersion
          - iot:UpdatePackage
          - iot:UpdatePackageVersion
          - iot:GetIndexingConfiguration
          - iot:ListPackageVersions
        list:
          - iot:ListPackages
    PackageVersionStatus:
      type: string
      enum:
        - DRAFT
        - PUBLISHED
        - DEPRECATED
    ResourceAttributes:
      type: object
      x-patternProperties:
        ^[a-zA-Z0-9:_-]+$:
          type: string
          minLength: 1
          pattern: ^[^\p{C}]+$
      additionalProperties: false
    SoftwarePackageVersion:
      type: object
      properties:
        Attributes:
          $ref: '#/components/schemas/ResourceAttributes'
        Description:
          type: string
          maxLength: 1024
          minLength: 0
          pattern: ^[^\p{C}]+$
        ErrorReason:
          type: string
        PackageName:
          type: string
          maxLength: 128
          minLength: 1
          pattern: ^[a-zA-Z0-9-_.]+$
        PackageVersionArn:
          type: string
        Status:
          $ref: '#/components/schemas/PackageVersionStatus'
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
        VersionName:
          type: string
          maxLength: 64
          minLength: 1
          pattern: ^[a-zA-Z0-9-_.]+$
      required:
        - PackageName
      x-stackql-resource-name: software_package_version
      x-stackql-primaryIdentifier:
        - PackageName
        - VersionName
      x-create-only-properties:
        - PackageName
        - VersionName
      x-read-only-properties:
        - ErrorReason
        - PackageVersionArn
        - Status
      x-required-permissions:
        create:
          - iot:CreatePackageVersion
          - iot:GetPackageVersion
          - iot:TagResource
          - iot:GetIndexingConfiguration
        read:
          - iot:GetPackageVersion
          - iot:ListTagsForResource
        update:
          - iot:UpdatePackageVersion
          - iot:GetPackageVersion
          - iot:ListTagsForResource
          - iot:TagResource
          - iot:UntagResource
          - iot:GetIndexingConfiguration
        delete:
          - iot:DeletePackageVersion
          - iot:UpdatePackageVersion
          - iot:GetPackageVersion
          - iot:GetIndexingConfiguration
        list:
          - iot:ListPackageVersions
    AttributePayload:
      type: object
      additionalProperties: false
      properties:
        Attributes:
          type: object
          x-patternProperties:
            '[a-zA-Z0-9_.,@/:#-]+':
              type: string
          additionalProperties: false
    Thing:
      type: object
      properties:
        Id:
          type: string
        Arn:
          type: string
        AttributePayload:
          $ref: '#/components/schemas/AttributePayload'
        ThingName:
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
      x-stackql-resource-name: thing
      x-stackql-primaryIdentifier:
        - ThingName
      x-create-only-properties:
        - ThingName
      x-read-only-properties:
        - Id
        - Arn
      x-required-permissions:
        create:
          - iot:CreateThing
          - iot:DescribeThing
        delete:
          - iot:DeleteThing
          - iot:DescribeThing
        list:
          - iot:ListThings
        read:
          - iot:DescribeThing
        update:
          - iot:UpdateThing
          - iot:DescribeThing
    ThingGroup:
      type: object
      properties:
        Id:
          type: string
        Arn:
          type: string
        ThingGroupName:
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
        ParentGroupName:
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
        QueryString:
          type: string
          minLength: 1
          maxLength: 1000
        ThingGroupProperties:
          type: object
          additionalProperties: false
          properties:
            AttributePayload:
              $ref: '#/components/schemas/AttributePayload'
            ThingGroupDescription:
              type: string
              pattern: '[\p{Graph}\x20]*'
              maxLength: 2028
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: thing_group
      x-stackql-primaryIdentifier:
        - ThingGroupName
      x-create-only-properties:
        - ThingGroupName
        - ParentGroupName
      x-read-only-properties:
        - Arn
        - Id
      x-required-permissions:
        create:
          - iot:DescribeThingGroup
          - iot:ListTagsForResource
          - iot:CreateThingGroup
          - iot:CreateDynamicThingGroup
          - iot:TagResource
        delete:
          - iot:DescribeThingGroup
          - iot:DeleteThingGroup
          - iot:DeleteDynamicThingGroup
        list:
          - iot:ListThingGroups
          - iot:ListTagsForResource
        read:
          - iot:DescribeThingGroup
          - iot:ListTagsForResource
        update:
          - iot:ListTagsForResource
          - iot:DescribeThingGroup
          - iot:UpdateThingGroup
          - iot:UpdateDynamicThingGroup
          - iot:TagResource
          - iot:UntagResource
    ThingType:
      type: object
      properties:
        Id:
          type: string
        Arn:
          type: string
        ThingTypeName:
          type: string
          pattern: '[a-zA-Z0-9:_-]+'
          minLength: 1
          maxLength: 128
        DeprecateThingType:
          type: boolean
        ThingTypeProperties:
          type: object
          additionalProperties: false
          properties:
            SearchableAttributes:
              type: array
              maxItems: 3
              uniqueItems: true
              x-insertionOrder: true
              items:
                type: string
                pattern: '[a-zA-Z0-9_.,@/:#-]+'
                maxLength: 128
            ThingTypeDescription:
              pattern: '[\p{Graph}\x20]*'
              type: string
              maxLength: 2028
        Tags:
          description: An array of key-value pairs to apply to this resource.
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: thing_type
      x-stackql-primaryIdentifier:
        - ThingTypeName
      x-create-only-properties:
        - ThingTypeName
        - ThingTypeProperties
      x-read-only-properties:
        - Arn
        - Id
      x-required-permissions:
        create:
          - iot:DescribeThingType
          - iot:ListTagsForResource
          - iot:CreateThingType
          - iot:DeprecateThingType
          - iot:TagResource
        delete:
          - iot:DescribeThingType
          - iot:DeleteThingType
          - iot:DeprecateThingType
        list:
          - iot:ListThingTypes
          - iot:ListTagsForResource
        read:
          - iot:DescribeThingType
          - iot:ListTagsForResource
        update:
          - iot:DescribeThingType
          - iot:UpdateThingType
          - iot:ListTagsForResource
          - iot:TagResource
          - iot:UntagResource
          - iot:DeprecateThingType
    TopicRulePayload:
      type: object
      additionalProperties: false
      properties:
        RuleDisabled:
          type: boolean
        ErrorAction:
          $ref: '#/components/schemas/Action'
        Description:
          type: string
        AwsIotSqlVersion:
          type: string
        Actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        Sql:
          type: string
      required:
        - Actions
        - Sql
    CloudwatchAlarmAction:
      type: object
      additionalProperties: false
      properties:
        StateValue:
          type: string
        AlarmName:
          type: string
        StateReason:
          type: string
        RoleArn:
          type: string
      required:
        - AlarmName
        - StateReason
        - StateValue
        - RoleArn
    CloudwatchLogsAction:
      type: object
      additionalProperties: false
      properties:
        LogGroupName:
          type: string
        RoleArn:
          type: string
        BatchMode:
          type: boolean
      required:
        - LogGroupName
        - RoleArn
    CloudwatchMetricAction:
      type: object
      additionalProperties: false
      properties:
        MetricName:
          type: string
        MetricValue:
          type: string
        MetricNamespace:
          type: string
        MetricUnit:
          type: string
        RoleArn:
          type: string
        MetricTimestamp:
          type: string
      required:
        - MetricName
        - MetricValue
        - MetricNamespace
        - MetricUnit
        - RoleArn
    DynamoDBAction:
      type: object
      additionalProperties: false
      properties:
        TableName:
          type: string
        PayloadField:
          type: string
        RangeKeyField:
          type: string
        HashKeyField:
          type: string
        RangeKeyValue:
          type: string
        RangeKeyType:
          type: string
        HashKeyType:
          type: string
        HashKeyValue:
          type: string
        RoleArn:
          type: string
      required:
        - TableName
        - HashKeyField
        - HashKeyValue
        - RoleArn
    DynamoDBv2Action:
      type: object
      additionalProperties: false
      properties:
        PutItem:
          $ref: '#/components/schemas/PutItemInput'
        RoleArn:
          type: string
    PutItemInput:
      type: object
      additionalProperties: false
      properties:
        TableName:
          type: string
      required:
        - TableName
    ElasticsearchAction:
      type: object
      additionalProperties: false
      properties:
        Type:
          type: string
        Index:
          type: string
        Id:
          type: string
        Endpoint:
          type: string
        RoleArn:
          type: string
      required:
        - Type
        - Endpoint
        - Index
        - Id
        - RoleArn
    FirehoseAction:
      type: object
      additionalProperties: false
      properties:
        DeliveryStreamName:
          type: string
        RoleArn:
          type: string
        Separator:
          type: string
        BatchMode:
          type: boolean
      required:
        - DeliveryStreamName
        - RoleArn
    HttpAction:
      type: object
      additionalProperties: false
      properties:
        ConfirmationUrl:
          type: string
        Headers:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/HttpActionHeader'
        Url:
          type: string
        Auth:
          $ref: '#/components/schemas/HttpAuthorization'
      required:
        - Url
    HttpActionHeader:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    HttpAuthorization:
      type: object
      additionalProperties: false
      properties:
        Sigv4:
          $ref: '#/components/schemas/SigV4Authorization'
    SigV4Authorization:
      type: object
      additionalProperties: false
      properties:
        ServiceName:
          type: string
        SigningRegion:
          type: string
        RoleArn:
          type: string
      required:
        - ServiceName
        - SigningRegion
        - RoleArn
    IotAnalyticsAction:
      type: object
      additionalProperties: false
      properties:
        RoleArn:
          type: string
        ChannelName:
          type: string
        BatchMode:
          type: boolean
      required:
        - ChannelName
        - RoleArn
    IotEventsAction:
      type: object
      additionalProperties: false
      properties:
        InputName:
          type: string
        RoleArn:
          type: string
        MessageId:
          type: string
        BatchMode:
          type: boolean
      required:
        - InputName
        - RoleArn
    IotSiteWiseAction:
      type: object
      additionalProperties: false
      properties:
        RoleArn:
          type: string
        PutAssetPropertyValueEntries:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/PutAssetPropertyValueEntry'
      required:
        - PutAssetPropertyValueEntries
        - RoleArn
    PutAssetPropertyValueEntry:
      type: object
      additionalProperties: false
      properties:
        PropertyAlias:
          type: string
        PropertyValues:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/AssetPropertyValue'
        AssetId:
          type: string
        EntryId:
          type: string
        PropertyId:
          type: string
      required:
        - PropertyValues
    AssetPropertyValue:
      type: object
      additionalProperties: false
      properties:
        Value:
          $ref: '#/components/schemas/AssetPropertyVariant'
        Timestamp:
          $ref: '#/components/schemas/AssetPropertyTimestamp'
        Quality:
          type: string
      required:
        - Value
        - Timestamp
    AssetPropertyVariant:
      type: object
      additionalProperties: false
      properties:
        StringValue:
          type: string
        DoubleValue:
          type: string
        BooleanValue:
          type: string
        IntegerValue:
          type: string
    AssetPropertyTimestamp:
      type: object
      additionalProperties: false
      properties:
        TimeInSeconds:
          type: string
        OffsetInNanos:
          type: string
      required:
        - TimeInSeconds
    KafkaAction:
      type: object
      additionalProperties: false
      properties:
        DestinationArn:
          type: string
        Topic:
          type: string
        Key:
          type: string
        Partition:
          type: string
        ClientProperties:
          type: object
          additionalProperties: false
          x-patternProperties:
            .*:
              type: string
          minProperties: 1
        Headers:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/KafkaActionHeader'
      required:
        - DestinationArn
        - Topic
        - ClientProperties
    KafkaActionHeader:
      type: object
      additionalProperties: false
      properties:
        Value:
          type: string
        Key:
          type: string
      required:
        - Value
        - Key
    KinesisAction:
      type: object
      additionalProperties: false
      properties:
        PartitionKey:
          type: string
        StreamName:
          type: string
        RoleArn:
          type: string
      required:
        - StreamName
        - RoleArn
    LambdaAction:
      type: object
      additionalProperties: false
      properties:
        FunctionArn:
          type: string
    LocationAction:
      type: object
      additionalProperties: false
      properties:
        RoleArn:
          type: string
        TrackerName:
          type: string
        DeviceId:
          type: string
        Latitude:
          type: string
        Longitude:
          type: string
        Timestamp:
          $ref: '#/components/schemas/Timestamp'
      required:
        - RoleArn
        - TrackerName
        - DeviceId
        - Latitude
        - Longitude
    Timestamp:
      type: object
      properties:
        Value:
          type: string
        Unit:
          type: string
      additionalProperties: false
      required:
        - Value
    OpenSearchAction:
      type: object
      additionalProperties: false
      properties:
        Type:
          type: string
        Index:
          type: string
        Id:
          type: string
        Endpoint:
          type: string
        RoleArn:
          type: string
      required:
        - Type
        - Endpoint
        - Index
        - Id
        - RoleArn
    RepublishAction:
      type: object
      additionalProperties: false
      properties:
        Qos:
          type: integer
        Topic:
          type: string
        RoleArn:
          type: string
        Headers:
          $ref: '#/components/schemas/RepublishActionHeaders'
      required:
        - Topic
        - RoleArn
    RepublishActionHeaders:
      type: object
      additionalProperties: false
      properties:
        PayloadFormatIndicator:
          type: string
          minLength: 0
          maxLength: 1024
        ContentType:
          type: string
          minLength: 0
          maxLength: 1024
        ResponseTopic:
          type: string
          minLength: 0
          maxLength: 1024
        CorrelationData:
          type: string
          minLength: 0
          maxLength: 1024
        MessageExpiry:
          type: string
          minLength: 0
          maxLength: 1024
        UserProperties:
          $ref: '#/components/schemas/UserProperties'
    UserProperties:
      type: array
      minItems: 1
      maxItems: 100
      items:
        $ref: '#/components/schemas/UserProperty'
    UserProperty:
      type: object
      additionalProperties: false
      required:
        - Key
        - Value
      properties:
        Key:
          type: string
          minLength: 0
          maxLength: 1024
        Value:
          type: string
          minLength: 0
          maxLength: 1024
    S3Action:
      type: object
      additionalProperties: false
      properties:
        BucketName:
          type: string
        Key:
          type: string
        RoleArn:
          type: string
        CannedAcl:
          $ref: '#/components/schemas/CannedAccessControlList'
      required:
        - BucketName
        - Key
        - RoleArn
    CannedAccessControlList:
      type: string
      enum:
        - private
        - public-read
        - public-read-write
        - aws-exec-read
        - authenticated-read
        - bucket-owner-read
        - bucket-owner-full-control
        - log-delivery-write
    SnsAction:
      type: object
      additionalProperties: false
      properties:
        TargetArn:
          type: string
        MessageFormat:
          type: string
        RoleArn:
          type: string
      required:
        - TargetArn
        - RoleArn
    StepFunctionsAction:
      type: object
      additionalProperties: false
      properties:
        ExecutionNamePrefix:
          type: string
        StateMachineName:
          type: string
        RoleArn:
          type: string
      required:
        - StateMachineName
        - RoleArn
    SqsAction:
      type: object
      additionalProperties: false
      properties:
        RoleArn:
          type: string
        UseBase64:
          type: boolean
        QueueUrl:
          type: string
      required:
        - RoleArn
        - QueueUrl
    TimestreamAction:
      type: object
      additionalProperties: false
      properties:
        RoleArn:
          type: string
        DatabaseName:
          type: string
        TableName:
          type: string
        Dimensions:
          $ref: '#/components/schemas/TimestreamDimensionsList'
        Timestamp:
          $ref: '#/components/schemas/TimestreamTimestamp'
      required:
        - RoleArn
        - DatabaseName
        - TableName
        - Dimensions
    TimestreamDimensionsList:
      type: array
      minItems: 1
      maxItems: 128
      items:
        $ref: '#/components/schemas/TimestreamDimension'
    TimestreamDimension:
      type: object
      properties:
        Name:
          type: string
        Value:
          type: string
      additionalProperties: false
      required:
        - Name
        - Value
    TimestreamTimestamp:
      type: object
      properties:
        Value:
          type: string
        Unit:
          type: string
      additionalProperties: false
      required:
        - Value
        - Unit
    TopicRule:
      type: object
      properties:
        Arn:
          type: string
        RuleName:
          type: string
        TopicRulePayload:
          $ref: '#/components/schemas/TopicRulePayload'
        Tags:
          type: array
          x-insertionOrder: false
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - TopicRulePayload
      x-stackql-resource-name: topic_rule
      x-stackql-primaryIdentifier:
        - RuleName
      x-create-only-properties:
        - RuleName
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - iam:PassRole
          - iot:CreateTopicRule
          - iot:GetTopicRule
          - iot:TagResource
          - iot:ListTagsForResource
        read:
          - iot:GetTopicRule
          - iot:ListTagsForResource
        update:
          - iam:PassRole
          - iot:GetTopicRule
          - iot:ListTagsForResource
          - iot:ReplaceTopicRule
          - iot:TagResource
          - iot:UntagResource
        delete:
          - iot:GetTopicRule
          - iot:DeleteTopicRule
        list:
          - iot:ListTopicRules
    TopicRuleDestinationStatus:
      type: string
      enum:
        - ENABLED
        - IN_PROGRESS
        - DISABLED
    HttpUrlDestinationSummary:
      type: object
      additionalProperties: false
      properties:
        ConfirmationUrl:
          type: string
    VpcDestinationProperties:
      type: object
      additionalProperties: false
      properties:
        SubnetIds:
          type: array
          uniqueItems: true
          items:
            type: string
        SecurityGroups:
          type: array
          uniqueItems: true
          items:
            type: string
        VpcId:
          type: string
        RoleArn:
          type: string
    TopicRuleDestination:
      type: object
      properties:
        Arn:
          description: Amazon Resource Name (ARN).
          type: string
        Status:
          description: The status of the TopicRuleDestination.
          $ref: '#/components/schemas/TopicRuleDestinationStatus'
        HttpUrlProperties:
          description: HTTP URL destination properties.
          $ref: '#/components/schemas/HttpUrlDestinationSummary'
        StatusReason:
          description: The reasoning for the current status of the TopicRuleDestination.
          type: string
        VpcProperties:
          description: VPC destination properties.
          $ref: '#/components/schemas/VpcDestinationProperties'
      x-stackql-resource-name: topic_rule_destination
      x-stackql-primaryIdentifier:
        - Arn
      x-create-only-properties:
        - HttpUrlProperties
        - VpcProperties
      x-read-only-properties:
        - Arn
        - StatusReason
      x-required-permissions:
        create:
          - iam:PassRole
          - iot:CreateTopicRuleDestination
          - iot:GetTopicRuleDestination
          - iot:UpdateTopicRuleDestination
        read:
          - iot:GetTopicRuleDestination
        update:
          - iam:PassRole
          - iot:GetTopicRuleDestination
          - iot:UpdateTopicRuleDestination
        delete:
          - iot:GetTopicRuleDestination
          - iot:DeleteTopicRuleDestination
        list:
          - iot:ListTopicRuleDestinations
  x-stackQL-resources:
    account_audit_configurations:
      name: account_audit_configurations
      id: awscc.iot.account_audit_configurations
      x-cfn-schema-name: AccountAuditConfiguration
      x-type: list
      x-identifiers:
        - AccountId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::AccountAuditConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccountId') as account_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::AccountAuditConfiguration'
                AND region = 'us-east-1'
    account_audit_configuration:
      name: account_audit_configuration
      id: awscc.iot.account_audit_configuration
      x-cfn-schema-name: AccountAuditConfiguration
      x-type: get
      x-identifiers:
        - AccountId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id,
              JSON_EXTRACT(Properties, '$.AuditCheckConfigurations') as audit_check_configurations,
              JSON_EXTRACT(Properties, '$.AuditNotificationTargetConfigurations') as audit_notification_target_configurations,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::AccountAuditConfiguration'
              AND data__Identifier = '<AccountId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AccountId') as account_id,
                json_extract_path_text(Properties, 'AuditCheckConfigurations') as audit_check_configurations,
                json_extract_path_text(Properties, 'AuditNotificationTargetConfigurations') as audit_notification_target_configurations,
                json_extract_path_text(Properties, 'RoleArn') as role_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::AccountAuditConfiguration'
                AND data__Identifier = '<AccountId>'
                AND region = 'us-east-1'
    authorizers:
      name: authorizers
      id: awscc.iot.authorizers
      x-cfn-schema-name: Authorizer
      x-type: list
      x-identifiers:
        - AuthorizerName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AuthorizerName') as authorizer_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::Authorizer'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AuthorizerName') as authorizer_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::Authorizer'
                AND region = 'us-east-1'
    authorizer:
      name: authorizer
      id: awscc.iot.authorizer
      x-cfn-schema-name: Authorizer
      x-type: get
      x-identifiers:
        - AuthorizerName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AuthorizerFunctionArn') as authorizer_function_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AuthorizerName') as authorizer_name,
              JSON_EXTRACT(Properties, '$.SigningDisabled') as signing_disabled,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.TokenKeyName') as token_key_name,
              JSON_EXTRACT(Properties, '$.TokenSigningPublicKeys') as token_signing_public_keys,
              JSON_EXTRACT(Properties, '$.EnableCachingForHttp') as enable_caching_for_http,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::Authorizer'
              AND data__Identifier = '<AuthorizerName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AuthorizerFunctionArn') as authorizer_function_arn,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'AuthorizerName') as authorizer_name,
                json_extract_path_text(Properties, 'SigningDisabled') as signing_disabled,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'TokenKeyName') as token_key_name,
                json_extract_path_text(Properties, 'TokenSigningPublicKeys') as token_signing_public_keys,
                json_extract_path_text(Properties, 'EnableCachingForHttp') as enable_caching_for_http,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::Authorizer'
                AND data__Identifier = '<AuthorizerName>'
                AND region = 'us-east-1'
    billing_groups:
      name: billing_groups
      id: awscc.iot.billing_groups
      x-cfn-schema-name: BillingGroup
      x-type: list
      x-identifiers:
        - BillingGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.BillingGroupName') as billing_group_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::BillingGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'BillingGroupName') as billing_group_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::BillingGroup'
                AND region = 'us-east-1'
    billing_group:
      name: billing_group
      id: awscc.iot.billing_group
      x-cfn-schema-name: BillingGroup
      x-type: get
      x-identifiers:
        - BillingGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.BillingGroupName') as billing_group_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.BillingGroupProperties') as billing_group_properties
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::BillingGroup'
              AND data__Identifier = '<BillingGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'BillingGroupName') as billing_group_name,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'BillingGroupProperties') as billing_group_properties
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::BillingGroup'
                AND data__Identifier = '<BillingGroupName>'
                AND region = 'us-east-1'
    ca_certificates:
      name: ca_certificates
      id: awscc.iot.ca_certificates
      x-cfn-schema-name: CACertificate
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::CACertificate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::CACertificate'
                AND region = 'us-east-1'
    ca_certificate:
      name: ca_certificate
      id: awscc.iot.ca_certificate
      x-cfn-schema-name: CACertificate
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CACertificatePem') as ca_certificate_pem,
              JSON_EXTRACT(Properties, '$.VerificationCertificatePem') as verification_certificate_pem,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.CertificateMode') as certificate_mode,
              JSON_EXTRACT(Properties, '$.AutoRegistrationStatus') as auto_registration_status,
              JSON_EXTRACT(Properties, '$.RemoveAutoRegistration') as remove_auto_registration,
              JSON_EXTRACT(Properties, '$.RegistrationConfig') as registration_config,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::CACertificate'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'CACertificatePem') as ca_certificate_pem,
                json_extract_path_text(Properties, 'VerificationCertificatePem') as verification_certificate_pem,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'CertificateMode') as certificate_mode,
                json_extract_path_text(Properties, 'AutoRegistrationStatus') as auto_registration_status,
                json_extract_path_text(Properties, 'RemoveAutoRegistration') as remove_auto_registration,
                json_extract_path_text(Properties, 'RegistrationConfig') as registration_config,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::CACertificate'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    certificates:
      name: certificates
      id: awscc.iot.certificates
      x-cfn-schema-name: Certificate
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::Certificate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::Certificate'
                AND region = 'us-east-1'
    certificate:
      name: certificate
      id: awscc.iot.certificate
      x-cfn-schema-name: Certificate
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CACertificatePem') as ca_certificate_pem,
              JSON_EXTRACT(Properties, '$.CertificatePem') as certificate_pem,
              JSON_EXTRACT(Properties, '$.CertificateSigningRequest') as certificate_signing_request,
              JSON_EXTRACT(Properties, '$.CertificateMode') as certificate_mode,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::Certificate'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'CACertificatePem') as ca_certificate_pem,
                json_extract_path_text(Properties, 'CertificatePem') as certificate_pem,
                json_extract_path_text(Properties, 'CertificateSigningRequest') as certificate_signing_request,
                json_extract_path_text(Properties, 'CertificateMode') as certificate_mode,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::Certificate'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    certificate_providers:
      name: certificate_providers
      id: awscc.iot.certificate_providers
      x-cfn-schema-name: CertificateProvider
      x-type: list
      x-identifiers:
        - CertificateProviderName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.CertificateProviderName') as certificate_provider_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::CertificateProvider'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'CertificateProviderName') as certificate_provider_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::CertificateProvider'
                AND region = 'us-east-1'
    certificate_provider:
      name: certificate_provider
      id: awscc.iot.certificate_provider
      x-cfn-schema-name: CertificateProvider
      x-type: get
      x-identifiers:
        - CertificateProviderName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.CertificateProviderName') as certificate_provider_name,
              JSON_EXTRACT(Properties, '$.LambdaFunctionArn') as lambda_function_arn,
              JSON_EXTRACT(Properties, '$.AccountDefaultForOperations') as account_default_for_operations,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::CertificateProvider'
              AND data__Identifier = '<CertificateProviderName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'CertificateProviderName') as certificate_provider_name,
                json_extract_path_text(Properties, 'LambdaFunctionArn') as lambda_function_arn,
                json_extract_path_text(Properties, 'AccountDefaultForOperations') as account_default_for_operations,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::CertificateProvider'
                AND data__Identifier = '<CertificateProviderName>'
                AND region = 'us-east-1'
    custom_metrics:
      name: custom_metrics
      id: awscc.iot.custom_metrics
      x-cfn-schema-name: CustomMetric
      x-type: list
      x-identifiers:
        - MetricName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.MetricName') as metric_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::CustomMetric'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'MetricName') as metric_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::CustomMetric'
                AND region = 'us-east-1'
    custom_metric:
      name: custom_metric
      id: awscc.iot.custom_metric
      x-cfn-schema-name: CustomMetric
      x-type: get
      x-identifiers:
        - MetricName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.MetricName') as metric_name,
              JSON_EXTRACT(Properties, '$.DisplayName') as display_name,
              JSON_EXTRACT(Properties, '$.MetricType') as metric_type,
              JSON_EXTRACT(Properties, '$.MetricArn') as metric_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::CustomMetric'
              AND data__Identifier = '<MetricName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'MetricName') as metric_name,
                json_extract_path_text(Properties, 'DisplayName') as display_name,
                json_extract_path_text(Properties, 'MetricType') as metric_type,
                json_extract_path_text(Properties, 'MetricArn') as metric_arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::CustomMetric'
                AND data__Identifier = '<MetricName>'
                AND region = 'us-east-1'
    dimensions:
      name: dimensions
      id: awscc.iot.dimensions
      x-cfn-schema-name: Dimension
      x-type: list
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Name') as name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::Dimension'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Name') as name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::Dimension'
                AND region = 'us-east-1'
    dimension:
      name: dimension
      id: awscc.iot.dimension
      x-cfn-schema-name: Dimension
      x-type: get
      x-identifiers:
        - Name
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Name') as name,
              JSON_EXTRACT(Properties, '$.Type') as type,
              JSON_EXTRACT(Properties, '$.StringValues') as string_values,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::Dimension'
              AND data__Identifier = '<Name>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Name') as name,
                json_extract_path_text(Properties, 'Type') as type,
                json_extract_path_text(Properties, 'StringValues') as string_values,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::Dimension'
                AND data__Identifier = '<Name>'
                AND region = 'us-east-1'
    domain_configurations:
      name: domain_configurations
      id: awscc.iot.domain_configurations
      x-cfn-schema-name: DomainConfiguration
      x-type: list
      x-identifiers:
        - DomainConfigurationName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DomainConfigurationName') as domain_configuration_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::DomainConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DomainConfigurationName') as domain_configuration_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::DomainConfiguration'
                AND region = 'us-east-1'
    domain_configuration:
      name: domain_configuration
      id: awscc.iot.domain_configuration
      x-cfn-schema-name: DomainConfiguration
      x-type: get
      x-identifiers:
        - DomainConfigurationName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.DomainConfigurationName') as domain_configuration_name,
              JSON_EXTRACT(Properties, '$.AuthorizerConfig') as authorizer_config,
              JSON_EXTRACT(Properties, '$.DomainName') as domain_name,
              JSON_EXTRACT(Properties, '$.ServerCertificateArns') as server_certificate_arns,
              JSON_EXTRACT(Properties, '$.ServiceType') as service_type,
              JSON_EXTRACT(Properties, '$.ValidationCertificateArn') as validation_certificate_arn,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.DomainConfigurationStatus') as domain_configuration_status,
              JSON_EXTRACT(Properties, '$.DomainType') as domain_type,
              JSON_EXTRACT(Properties, '$.ServerCertificateConfig') as server_certificate_config,
              JSON_EXTRACT(Properties, '$.ServerCertificates') as server_certificates,
              JSON_EXTRACT(Properties, '$.TlsConfig') as tls_config,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::DomainConfiguration'
              AND data__Identifier = '<DomainConfigurationName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'DomainConfigurationName') as domain_configuration_name,
                json_extract_path_text(Properties, 'AuthorizerConfig') as authorizer_config,
                json_extract_path_text(Properties, 'DomainName') as domain_name,
                json_extract_path_text(Properties, 'ServerCertificateArns') as server_certificate_arns,
                json_extract_path_text(Properties, 'ServiceType') as service_type,
                json_extract_path_text(Properties, 'ValidationCertificateArn') as validation_certificate_arn,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'DomainConfigurationStatus') as domain_configuration_status,
                json_extract_path_text(Properties, 'DomainType') as domain_type,
                json_extract_path_text(Properties, 'ServerCertificateConfig') as server_certificate_config,
                json_extract_path_text(Properties, 'ServerCertificates') as server_certificates,
                json_extract_path_text(Properties, 'TlsConfig') as tls_config,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::DomainConfiguration'
                AND data__Identifier = '<DomainConfigurationName>'
                AND region = 'us-east-1'
    fleet_metrics:
      name: fleet_metrics
      id: awscc.iot.fleet_metrics
      x-cfn-schema-name: FleetMetric
      x-type: list
      x-identifiers:
        - MetricName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.MetricName') as metric_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::FleetMetric'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'MetricName') as metric_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::FleetMetric'
                AND region = 'us-east-1'
    fleet_metric:
      name: fleet_metric
      id: awscc.iot.fleet_metric
      x-cfn-schema-name: FleetMetric
      x-type: get
      x-identifiers:
        - MetricName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.MetricName') as metric_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.QueryString') as query_string,
              JSON_EXTRACT(Properties, '$.Period') as period,
              JSON_EXTRACT(Properties, '$.AggregationField') as aggregation_field,
              JSON_EXTRACT(Properties, '$.QueryVersion') as query_version,
              JSON_EXTRACT(Properties, '$.IndexName') as index_name,
              JSON_EXTRACT(Properties, '$.Unit') as unit,
              JSON_EXTRACT(Properties, '$.AggregationType') as aggregation_type,
              JSON_EXTRACT(Properties, '$.MetricArn') as metric_arn,
              JSON_EXTRACT(Properties, '$.CreationDate') as creation_date,
              JSON_EXTRACT(Properties, '$.LastModifiedDate') as last_modified_date,
              JSON_EXTRACT(Properties, '$.Version') as version,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::FleetMetric'
              AND data__Identifier = '<MetricName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'MetricName') as metric_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'QueryString') as query_string,
                json_extract_path_text(Properties, 'Period') as period,
                json_extract_path_text(Properties, 'AggregationField') as aggregation_field,
                json_extract_path_text(Properties, 'QueryVersion') as query_version,
                json_extract_path_text(Properties, 'IndexName') as index_name,
                json_extract_path_text(Properties, 'Unit') as unit,
                json_extract_path_text(Properties, 'AggregationType') as aggregation_type,
                json_extract_path_text(Properties, 'MetricArn') as metric_arn,
                json_extract_path_text(Properties, 'CreationDate') as creation_date,
                json_extract_path_text(Properties, 'LastModifiedDate') as last_modified_date,
                json_extract_path_text(Properties, 'Version') as version,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::FleetMetric'
                AND data__Identifier = '<MetricName>'
                AND region = 'us-east-1'
    job_templates:
      name: job_templates
      id: awscc.iot.job_templates
      x-cfn-schema-name: JobTemplate
      x-type: list
      x-identifiers:
        - JobTemplateId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.JobTemplateId') as job_template_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::JobTemplate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'JobTemplateId') as job_template_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::JobTemplate'
                AND region = 'us-east-1'
    job_template:
      name: job_template
      id: awscc.iot.job_template
      x-cfn-schema-name: JobTemplate
      x-type: get
      x-identifiers:
        - JobTemplateId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.JobArn') as job_arn,
              JSON_EXTRACT(Properties, '$.JobTemplateId') as job_template_id,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Document') as document,
              JSON_EXTRACT(Properties, '$.DocumentSource') as document_source,
              JSON_EXTRACT(Properties, '$.TimeoutConfig') as timeout_config,
              JSON_EXTRACT(Properties, '$.JobExecutionsRolloutConfig') as job_executions_rollout_config,
              JSON_EXTRACT(Properties, '$.AbortConfig') as abort_config,
              JSON_EXTRACT(Properties, '$.PresignedUrlConfig') as presigned_url_config,
              JSON_EXTRACT(Properties, '$.JobExecutionsRetryConfig') as job_executions_retry_config,
              JSON_EXTRACT(Properties, '$.MaintenanceWindows') as maintenance_windows,
              JSON_EXTRACT(Properties, '$.DestinationPackageVersions') as destination_package_versions,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::JobTemplate'
              AND data__Identifier = '<JobTemplateId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'JobArn') as job_arn,
                json_extract_path_text(Properties, 'JobTemplateId') as job_template_id,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Document') as document,
                json_extract_path_text(Properties, 'DocumentSource') as document_source,
                json_extract_path_text(Properties, 'TimeoutConfig') as timeout_config,
                json_extract_path_text(Properties, 'JobExecutionsRolloutConfig') as job_executions_rollout_config,
                json_extract_path_text(Properties, 'AbortConfig') as abort_config,
                json_extract_path_text(Properties, 'PresignedUrlConfig') as presigned_url_config,
                json_extract_path_text(Properties, 'JobExecutionsRetryConfig') as job_executions_retry_config,
                json_extract_path_text(Properties, 'MaintenanceWindows') as maintenance_windows,
                json_extract_path_text(Properties, 'DestinationPackageVersions') as destination_package_versions,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::JobTemplate'
                AND data__Identifier = '<JobTemplateId>'
                AND region = 'us-east-1'
    loggings:
      name: loggings
      id: awscc.iot.loggings
      x-cfn-schema-name: Logging
      x-type: list
      x-identifiers:
        - AccountId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::Logging'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'AccountId') as account_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::Logging'
                AND region = 'us-east-1'
    logging:
      name: logging
      id: awscc.iot.logging
      x-cfn-schema-name: Logging
      x-type: get
      x-identifiers:
        - AccountId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.AccountId') as account_id,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.DefaultLogLevel') as default_log_level
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::Logging'
              AND data__Identifier = '<AccountId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'AccountId') as account_id,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'DefaultLogLevel') as default_log_level
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::Logging'
                AND data__Identifier = '<AccountId>'
                AND region = 'us-east-1'
    mitigation_actions:
      name: mitigation_actions
      id: awscc.iot.mitigation_actions
      x-cfn-schema-name: MitigationAction
      x-type: list
      x-identifiers:
        - ActionName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ActionName') as action_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::MitigationAction'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ActionName') as action_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::MitigationAction'
                AND region = 'us-east-1'
    mitigation_action:
      name: mitigation_action
      id: awscc.iot.mitigation_action
      x-cfn-schema-name: MitigationAction
      x-type: get
      x-identifiers:
        - ActionName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ActionName') as action_name,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.ActionParams') as action_params,
              JSON_EXTRACT(Properties, '$.MitigationActionArn') as mitigation_action_arn,
              JSON_EXTRACT(Properties, '$.MitigationActionId') as mitigation_action_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::MitigationAction'
              AND data__Identifier = '<ActionName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ActionName') as action_name,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'ActionParams') as action_params,
                json_extract_path_text(Properties, 'MitigationActionArn') as mitigation_action_arn,
                json_extract_path_text(Properties, 'MitigationActionId') as mitigation_action_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::MitigationAction'
                AND data__Identifier = '<ActionName>'
                AND region = 'us-east-1'
    policies:
      name: policies
      id: awscc.iot.policies
      x-cfn-schema-name: Policy
      x-type: list
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Id') as id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::Policy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Id') as id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::Policy'
                AND region = 'us-east-1'
    policy:
      name: policy
      id: awscc.iot.policy
      x-cfn-schema-name: Policy
      x-type: get
      x-identifiers:
        - Id
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.PolicyDocument') as policy_document,
              JSON_EXTRACT(Properties, '$.PolicyName') as policy_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::Policy'
              AND data__Identifier = '<Id>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'PolicyDocument') as policy_document,
                json_extract_path_text(Properties, 'PolicyName') as policy_name,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::Policy'
                AND data__Identifier = '<Id>'
                AND region = 'us-east-1'
    provisioning_templates:
      name: provisioning_templates
      id: awscc.iot.provisioning_templates
      x-cfn-schema-name: ProvisioningTemplate
      x-type: list
      x-identifiers:
        - TemplateName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TemplateName') as template_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::ProvisioningTemplate'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TemplateName') as template_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::ProvisioningTemplate'
                AND region = 'us-east-1'
    provisioning_template:
      name: provisioning_template
      id: awscc.iot.provisioning_template
      x-cfn-schema-name: ProvisioningTemplate
      x-type: get
      x-identifiers:
        - TemplateName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TemplateArn') as template_arn,
              JSON_EXTRACT(Properties, '$.TemplateName') as template_name,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.Enabled') as enabled,
              JSON_EXTRACT(Properties, '$.ProvisioningRoleArn') as provisioning_role_arn,
              JSON_EXTRACT(Properties, '$.TemplateBody') as template_body,
              JSON_EXTRACT(Properties, '$.TemplateType') as template_type,
              JSON_EXTRACT(Properties, '$.PreProvisioningHook') as pre_provisioning_hook,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::ProvisioningTemplate'
              AND data__Identifier = '<TemplateName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'TemplateArn') as template_arn,
                json_extract_path_text(Properties, 'TemplateName') as template_name,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'Enabled') as enabled,
                json_extract_path_text(Properties, 'ProvisioningRoleArn') as provisioning_role_arn,
                json_extract_path_text(Properties, 'TemplateBody') as template_body,
                json_extract_path_text(Properties, 'TemplateType') as template_type,
                json_extract_path_text(Properties, 'PreProvisioningHook') as pre_provisioning_hook,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::ProvisioningTemplate'
                AND data__Identifier = '<TemplateName>'
                AND region = 'us-east-1'
    resource_specific_loggings:
      name: resource_specific_loggings
      id: awscc.iot.resource_specific_loggings
      x-cfn-schema-name: ResourceSpecificLogging
      x-type: list
      x-identifiers:
        - TargetId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TargetId') as target_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::ResourceSpecificLogging'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TargetId') as target_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::ResourceSpecificLogging'
                AND region = 'us-east-1'
    resource_specific_logging:
      name: resource_specific_logging
      id: awscc.iot.resource_specific_logging
      x-cfn-schema-name: ResourceSpecificLogging
      x-type: get
      x-identifiers:
        - TargetId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.TargetType') as target_type,
              JSON_EXTRACT(Properties, '$.TargetName') as target_name,
              JSON_EXTRACT(Properties, '$.LogLevel') as log_level,
              JSON_EXTRACT(Properties, '$.TargetId') as target_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::ResourceSpecificLogging'
              AND data__Identifier = '<TargetId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'TargetType') as target_type,
                json_extract_path_text(Properties, 'TargetName') as target_name,
                json_extract_path_text(Properties, 'LogLevel') as log_level,
                json_extract_path_text(Properties, 'TargetId') as target_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::ResourceSpecificLogging'
                AND data__Identifier = '<TargetId>'
                AND region = 'us-east-1'
    role_aliases:
      name: role_aliases
      id: awscc.iot.role_aliases
      x-cfn-schema-name: RoleAlias
      x-type: list
      x-identifiers:
        - RoleAlias
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RoleAlias') as role_alias
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::RoleAlias'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RoleAlias') as role_alias
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::RoleAlias'
                AND region = 'us-east-1'
    role_alias:
      name: role_alias
      id: awscc.iot.role_alias
      x-cfn-schema-name: RoleAlias
      x-type: get
      x-identifiers:
        - RoleAlias
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.RoleAlias') as role_alias,
              JSON_EXTRACT(Properties, '$.RoleAliasArn') as role_alias_arn,
              JSON_EXTRACT(Properties, '$.RoleArn') as role_arn,
              JSON_EXTRACT(Properties, '$.CredentialDurationSeconds') as credential_duration_seconds,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::RoleAlias'
              AND data__Identifier = '<RoleAlias>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'RoleAlias') as role_alias,
                json_extract_path_text(Properties, 'RoleAliasArn') as role_alias_arn,
                json_extract_path_text(Properties, 'RoleArn') as role_arn,
                json_extract_path_text(Properties, 'CredentialDurationSeconds') as credential_duration_seconds,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::RoleAlias'
                AND data__Identifier = '<RoleAlias>'
                AND region = 'us-east-1'
    scheduled_audits:
      name: scheduled_audits
      id: awscc.iot.scheduled_audits
      x-cfn-schema-name: ScheduledAudit
      x-type: list
      x-identifiers:
        - ScheduledAuditName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ScheduledAuditName') as scheduled_audit_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::ScheduledAudit'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ScheduledAuditName') as scheduled_audit_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::ScheduledAudit'
                AND region = 'us-east-1'
    scheduled_audit:
      name: scheduled_audit
      id: awscc.iot.scheduled_audit
      x-cfn-schema-name: ScheduledAudit
      x-type: get
      x-identifiers:
        - ScheduledAuditName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.ScheduledAuditName') as scheduled_audit_name,
              JSON_EXTRACT(Properties, '$.Frequency') as frequency,
              JSON_EXTRACT(Properties, '$.DayOfMonth') as day_of_month,
              JSON_EXTRACT(Properties, '$.DayOfWeek') as day_of_week,
              JSON_EXTRACT(Properties, '$.TargetCheckNames') as target_check_names,
              JSON_EXTRACT(Properties, '$.ScheduledAuditArn') as scheduled_audit_arn,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::ScheduledAudit'
              AND data__Identifier = '<ScheduledAuditName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'ScheduledAuditName') as scheduled_audit_name,
                json_extract_path_text(Properties, 'Frequency') as frequency,
                json_extract_path_text(Properties, 'DayOfMonth') as day_of_month,
                json_extract_path_text(Properties, 'DayOfWeek') as day_of_week,
                json_extract_path_text(Properties, 'TargetCheckNames') as target_check_names,
                json_extract_path_text(Properties, 'ScheduledAuditArn') as scheduled_audit_arn,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::ScheduledAudit'
                AND data__Identifier = '<ScheduledAuditName>'
                AND region = 'us-east-1'
    security_profiles:
      name: security_profiles
      id: awscc.iot.security_profiles
      x-cfn-schema-name: SecurityProfile
      x-type: list
      x-identifiers:
        - SecurityProfileName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SecurityProfileName') as security_profile_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::SecurityProfile'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SecurityProfileName') as security_profile_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::SecurityProfile'
                AND region = 'us-east-1'
    security_profile:
      name: security_profile
      id: awscc.iot.security_profile
      x-cfn-schema-name: SecurityProfile
      x-type: get
      x-identifiers:
        - SecurityProfileName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.SecurityProfileName') as security_profile_name,
              JSON_EXTRACT(Properties, '$.SecurityProfileDescription') as security_profile_description,
              JSON_EXTRACT(Properties, '$.Behaviors') as behaviors,
              JSON_EXTRACT(Properties, '$.AlertTargets') as alert_targets,
              JSON_EXTRACT(Properties, '$.AdditionalMetricsToRetainV2') as additional_metrics_to_retain_v2,
              JSON_EXTRACT(Properties, '$.MetricsExportConfig') as metrics_export_config,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TargetArns') as target_arns,
              JSON_EXTRACT(Properties, '$.SecurityProfileArn') as security_profile_arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::SecurityProfile'
              AND data__Identifier = '<SecurityProfileName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'SecurityProfileName') as security_profile_name,
                json_extract_path_text(Properties, 'SecurityProfileDescription') as security_profile_description,
                json_extract_path_text(Properties, 'Behaviors') as behaviors,
                json_extract_path_text(Properties, 'AlertTargets') as alert_targets,
                json_extract_path_text(Properties, 'AdditionalMetricsToRetainV2') as additional_metrics_to_retain_v2,
                json_extract_path_text(Properties, 'MetricsExportConfig') as metrics_export_config,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TargetArns') as target_arns,
                json_extract_path_text(Properties, 'SecurityProfileArn') as security_profile_arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::SecurityProfile'
                AND data__Identifier = '<SecurityProfileName>'
                AND region = 'us-east-1'
    software_packages:
      name: software_packages
      id: awscc.iot.software_packages
      x-cfn-schema-name: SoftwarePackage
      x-type: list
      x-identifiers:
        - PackageName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PackageName') as package_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::SoftwarePackage'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PackageName') as package_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::SoftwarePackage'
                AND region = 'us-east-1'
    software_package:
      name: software_package
      id: awscc.iot.software_package
      x-cfn-schema-name: SoftwarePackage
      x-type: get
      x-identifiers:
        - PackageName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.PackageArn') as package_arn,
              JSON_EXTRACT(Properties, '$.PackageName') as package_name,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::SoftwarePackage'
              AND data__Identifier = '<PackageName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'PackageArn') as package_arn,
                json_extract_path_text(Properties, 'PackageName') as package_name,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::SoftwarePackage'
                AND data__Identifier = '<PackageName>'
                AND region = 'us-east-1'
    software_package_versions:
      name: software_package_versions
      id: awscc.iot.software_package_versions
      x-cfn-schema-name: SoftwarePackageVersion
      x-type: list
      x-identifiers:
        - PackageName
        - VersionName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.PackageName') as package_name,
              JSON_EXTRACT(Properties, '$.VersionName') as version_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::SoftwarePackageVersion'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'PackageName') as package_name,
                json_extract_path_text(Properties, 'VersionName') as version_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::SoftwarePackageVersion'
                AND region = 'us-east-1'
    software_package_version:
      name: software_package_version
      id: awscc.iot.software_package_version
      x-cfn-schema-name: SoftwarePackageVersion
      x-type: get
      x-identifiers:
        - PackageName
        - VersionName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Attributes') as attributes,
              JSON_EXTRACT(Properties, '$.Description') as description,
              JSON_EXTRACT(Properties, '$.ErrorReason') as error_reason,
              JSON_EXTRACT(Properties, '$.PackageName') as package_name,
              JSON_EXTRACT(Properties, '$.PackageVersionArn') as package_version_arn,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.VersionName') as version_name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::SoftwarePackageVersion'
              AND data__Identifier = '<PackageName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Attributes') as attributes,
                json_extract_path_text(Properties, 'Description') as description,
                json_extract_path_text(Properties, 'ErrorReason') as error_reason,
                json_extract_path_text(Properties, 'PackageName') as package_name,
                json_extract_path_text(Properties, 'PackageVersionArn') as package_version_arn,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'VersionName') as version_name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::SoftwarePackageVersion'
                AND data__Identifier = '<PackageName>'
                AND region = 'us-east-1'
    things:
      name: things
      id: awscc.iot.things
      x-cfn-schema-name: Thing
      x-type: list
      x-identifiers:
        - ThingName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ThingName') as thing_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::Thing'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ThingName') as thing_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::Thing'
                AND region = 'us-east-1'
    thing:
      name: thing
      id: awscc.iot.thing
      x-cfn-schema-name: Thing
      x-type: get
      x-identifiers:
        - ThingName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.AttributePayload') as attribute_payload,
              JSON_EXTRACT(Properties, '$.ThingName') as thing_name
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::Thing'
              AND data__Identifier = '<ThingName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'AttributePayload') as attribute_payload,
                json_extract_path_text(Properties, 'ThingName') as thing_name
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::Thing'
                AND data__Identifier = '<ThingName>'
                AND region = 'us-east-1'
    thing_groups:
      name: thing_groups
      id: awscc.iot.thing_groups
      x-cfn-schema-name: ThingGroup
      x-type: list
      x-identifiers:
        - ThingGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ThingGroupName') as thing_group_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::ThingGroup'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ThingGroupName') as thing_group_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::ThingGroup'
                AND region = 'us-east-1'
    thing_group:
      name: thing_group
      id: awscc.iot.thing_group
      x-cfn-schema-name: ThingGroup
      x-type: get
      x-identifiers:
        - ThingGroupName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ThingGroupName') as thing_group_name,
              JSON_EXTRACT(Properties, '$.ParentGroupName') as parent_group_name,
              JSON_EXTRACT(Properties, '$.QueryString') as query_string,
              JSON_EXTRACT(Properties, '$.ThingGroupProperties') as thing_group_properties,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::ThingGroup'
              AND data__Identifier = '<ThingGroupName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ThingGroupName') as thing_group_name,
                json_extract_path_text(Properties, 'ParentGroupName') as parent_group_name,
                json_extract_path_text(Properties, 'QueryString') as query_string,
                json_extract_path_text(Properties, 'ThingGroupProperties') as thing_group_properties,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::ThingGroup'
                AND data__Identifier = '<ThingGroupName>'
                AND region = 'us-east-1'
    thing_types:
      name: thing_types
      id: awscc.iot.thing_types
      x-cfn-schema-name: ThingType
      x-type: list
      x-identifiers:
        - ThingTypeName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ThingTypeName') as thing_type_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::ThingType'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ThingTypeName') as thing_type_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::ThingType'
                AND region = 'us-east-1'
    thing_type:
      name: thing_type
      id: awscc.iot.thing_type
      x-cfn-schema-name: ThingType
      x-type: get
      x-identifiers:
        - ThingTypeName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Id') as id,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.ThingTypeName') as thing_type_name,
              JSON_EXTRACT(Properties, '$.DeprecateThingType') as deprecate_thing_type,
              JSON_EXTRACT(Properties, '$.ThingTypeProperties') as thing_type_properties,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::ThingType'
              AND data__Identifier = '<ThingTypeName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Id') as id,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'ThingTypeName') as thing_type_name,
                json_extract_path_text(Properties, 'DeprecateThingType') as deprecate_thing_type,
                json_extract_path_text(Properties, 'ThingTypeProperties') as thing_type_properties,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::ThingType'
                AND data__Identifier = '<ThingTypeName>'
                AND region = 'us-east-1'
    topic_rules:
      name: topic_rules
      id: awscc.iot.topic_rules
      x-cfn-schema-name: TopicRule
      x-type: list
      x-identifiers:
        - RuleName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RuleName') as rule_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::TopicRule'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RuleName') as rule_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::TopicRule'
                AND region = 'us-east-1'
    topic_rule:
      name: topic_rule
      id: awscc.iot.topic_rule
      x-cfn-schema-name: TopicRule
      x-type: get
      x-identifiers:
        - RuleName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.RuleName') as rule_name,
              JSON_EXTRACT(Properties, '$.TopicRulePayload') as topic_rule_payload,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::TopicRule'
              AND data__Identifier = '<RuleName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'RuleName') as rule_name,
                json_extract_path_text(Properties, 'TopicRulePayload') as topic_rule_payload,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::TopicRule'
                AND data__Identifier = '<RuleName>'
                AND region = 'us-east-1'
    topic_rule_destinations:
      name: topic_rule_destinations
      id: awscc.iot.topic_rule_destinations
      x-cfn-schema-name: TopicRuleDestination
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::TopicRuleDestination'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::IoT::TopicRuleDestination'
                AND region = 'us-east-1'
    topic_rule_destination:
      name: topic_rule_destination
      id: awscc.iot.topic_rule_destination
      x-cfn-schema-name: TopicRuleDestination
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              data__Identifier,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.Status') as status,
              JSON_EXTRACT(Properties, '$.HttpUrlProperties') as http_url_properties,
              JSON_EXTRACT(Properties, '$.StatusReason') as status_reason,
              JSON_EXTRACT(Properties, '$.VpcProperties') as vpc_properties
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::TopicRuleDestination'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                data__Identifier,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'Status') as status,
                json_extract_path_text(Properties, 'HttpUrlProperties') as http_url_properties,
                json_extract_path_text(Properties, 'StatusReason') as status_reason,
                json_extract_path_text(Properties, 'VpcProperties') as vpc_properties
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::IoT::TopicRuleDestination'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
