openapi: 3.0.0
info:
  title: ECR
  version: 1.0.0
paths: {}
components:
  schemas:
    RegistryId:
      type: string
      description: 'The AWS account ID associated with the registry that contains the repository. If you do not specify a registry, the default registry is assumed. '
      minLength: 12
      maxLength: 12
      pattern: ^[0-9]{12}$
    RepositoryDescription:
      type: string
      description: The description of the public repository.
      maxLength: 1024
    OperatingSystemList:
      type: array
      maxItems: 50
      uniqueItems: true
      x-insertionOrder: false
      description: Select the operating systems that the images in your repository are compatible with.
      items:
        $ref: '#/components/schemas/OperatingSystem'
    OperatingSystem:
      type: string
      description: The name of the operating system.
      maxLength: 50
      minLength: 1
    ArchitectureList:
      type: array
      maxItems: 50
      uniqueItems: true
      x-insertionOrder: false
      description: Select the system architectures that the images in your repository are compatible with.
      items:
        $ref: '#/components/schemas/Architecture'
    Architecture:
      type: string
      description: The name of the architecture.
      maxLength: 50
      minLength: 1
    UsageText:
      type: string
      description: Provide detailed information about how to use the images in the repository. This provides context, support information, and additional usage details for users of the repository.
      maxLength: 10240
    AboutText:
      type: string
      description: Provide a detailed description of the repository. Identify what is included in the repository, any licensing details, or other relevant information.
      maxLength: 10240
    Tag:
      description: A key-value pair to associate with a resource.
      type: object
      properties:
        Key:
          type: string
          description: 'The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 1
          maxLength: 127
        Value:
          type: string
          description: 'The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. '
          minLength: 1
          maxLength: 255
      required:
        - Value
        - Key
      additionalProperties: false
    PublicRepository:
      type: object
      properties:
        RepositoryName:
          type: string
          description: The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
          minLength: 2
          maxLength: 256
          pattern: ^(?=.{2,256}$)((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*)$
        RepositoryPolicyText:
          type: object
          description: 'The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container Registry User Guide. '
        Arn:
          type: string
        RepositoryCatalogData:
          type: object
          description: The CatalogData property type specifies Catalog data for ECR Public Repository. For information about Catalog Data, see <link>
          properties:
            RepositoryDescription:
              $ref: '#/components/schemas/RepositoryDescription'
            Architectures:
              $ref: '#/components/schemas/ArchitectureList'
            OperatingSystems:
              $ref: '#/components/schemas/OperatingSystemList'
            AboutText:
              $ref: '#/components/schemas/AboutText'
            UsageText:
              $ref: '#/components/schemas/UsageText'
          additionalProperties: false
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
      x-stackql-resource-name: public_repository
      x-stackql-primaryIdentifier:
        - RepositoryName
      x-create-only-properties:
        - RepositoryName
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - ecr-public:CreateRepository
          - ecr-public:SetRepositoryPolicy
          - ecr-public:PutRepositoryCatalogData
          - ecr-public:TagResource
        read:
          - ecr-public:DescribeRepositories
          - ecr-public:GetRepositoryPolicy
          - ecr-public:GetRepositoryCatalogData
          - ecr-public:ListTagsForResource
        update:
          - ecr-public:SetRepositoryPolicy
          - ecr-public:DeleteRepositoryPolicy
          - ecr-public:PutRepositoryCatalogData
          - ecr-public:TagResource
          - ecr-public:UntagResource
        delete:
          - ecr-public:DeleteRepository
        list:
          - ecr-public:DescribeRepositories
    PullThroughCacheRule:
      type: object
      properties:
        EcrRepositoryPrefix:
          type: string
          description: The ECRRepositoryPrefix is a custom alias for upstream registry url.
          minLength: 2
          maxLength: 30
          pattern: (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*
        UpstreamRegistryUrl:
          type: string
          description: The upstreamRegistryUrl is the endpoint of upstream registry url of the public repository to be cached
        CredentialArn:
          type: string
          description: The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.
          minLength: 50
          maxLength: 612
          pattern: ^arn:aws:secretsmanager:[a-zA-Z0-9-:]+:secret:ecr\-pullthroughcache\/[a-zA-Z0-9\/_+=.@-]+$
        UpstreamRegistry:
          type: string
          description: The name of the upstream registry.
      x-stackql-resource-name: pull_through_cache_rule
      x-stackql-primaryIdentifier:
        - EcrRepositoryPrefix
      x-create-only-properties:
        - EcrRepositoryPrefix
        - UpstreamRegistryUrl
        - CredentialArn
        - UpstreamRegistry
      x-required-permissions:
        create:
          - ecr:DescribePullThroughCacheRules
          - ecr:CreatePullThroughCacheRule
          - ecr:DeletePullThroughCacheRule
          - iam:CreateServiceLinkedRole
          - secretsmanager:GetSecretValue
        read:
          - ecr:DescribePullThroughCacheRules
        update:
          - ecr:DescribePullThroughCacheRules
          - ecr:CreatePullThroughCacheRule
          - ecr:DeletePullThroughCacheRule
          - iam:CreateServiceLinkedRole
          - secretsmanager:GetSecretValue
        delete:
          - ecr:DescribePullThroughCacheRules
          - ecr:DeletePullThroughCacheRule
        list:
          - ecr:DescribePullThroughCacheRules
    EcrRepositoryPrefix:
      type: string
      description: The ECRRepositoryPrefix is a custom alias for upstream registry url.
      minLength: 2
      maxLength: 30
      pattern: (?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*
    UpstreamRegistryUrl:
      type: string
      description: The upstreamRegistryUrl is the endpoint of upstream registry url of the public repository to be cached
    CredentialArn:
      type: string
      description: The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that identifies the credentials to authenticate to the upstream registry.
      minLength: 50
      maxLength: 612
      pattern: ^arn:aws:secretsmanager:[a-zA-Z0-9-:]+:secret:ecr\-pullthroughcache\/[a-zA-Z0-9\/_+=.@-]+$
    UpstreamRegistry:
      type: string
      description: The name of the upstream registry.
    RegistryPolicy:
      type: object
      properties:
        RegistryId:
          $ref: '#/components/schemas/RegistryId'
        PolicyText:
          type: object
          description: The JSON policy text to apply to your registry. The policy text follows the same format as IAM policy text. For more information, see Registry permissions (https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry-permissions.html) in the Amazon Elastic Container Registry User Guide.
      required:
        - PolicyText
      x-stackql-resource-name: registry_policy
      x-stackql-primaryIdentifier:
        - RegistryId
      x-read-only-properties:
        - RegistryId
      x-required-permissions:
        create:
          - ecr:GetRegistryPolicy
          - ecr:PutRegistryPolicy
        read:
          - ecr:GetRegistryPolicy
        list:
          - ecr:GetRegistryPolicy
        update:
          - ecr:GetRegistryPolicy
          - ecr:PutRegistryPolicy
        delete:
          - ecr:DeleteRegistryPolicy
    ReplicationConfiguration:
      type: object
      properties:
        ReplicationConfiguration:
          $ref: '#/components/schemas/ReplicationConfiguration'
        RegistryId:
          type: string
          description: The RegistryId associated with the aws account.
      required:
        - ReplicationConfiguration
      x-stackql-resource-name: replication_configuration
      x-stackql-primaryIdentifier:
        - RegistryId
      x-read-only-properties:
        - RegistryId
      x-required-permissions:
        create:
          - ecr:DescribeRegistry
          - ecr:PutReplicationConfiguration
          - iam:CreateServiceLinkedRole
        read:
          - ecr:DescribeRegistry
        update:
          - ecr:DescribeRegistry
          - ecr:PutReplicationConfiguration
          - iam:CreateServiceLinkedRole
        delete:
          - ecr:DescribeRegistry
          - ecr:PutReplicationConfiguration
          - iam:CreateServiceLinkedRole
        list:
          - ecr:DescribeRegistry
    ReplicationRule:
      type: object
      properties:
        RepositoryFilters:
          type: array
          minItems: 0
          maxItems: 100
          items:
            $ref: '#/components/schemas/RepositoryFilter'
          description: An array of objects representing the details of a repository filter.
        Destinations:
          type: array
          minItems: 1
          maxItems: 25
          items:
            $ref: '#/components/schemas/ReplicationDestination'
          description: An array of objects representing the details of a replication destination.
      description: An array of objects representing the details of a replication destination.
      required:
        - Destinations
      additionalProperties: false
    RepositoryFilter:
      type: object
      properties:
        Filter:
          $ref: '#/components/schemas/Filter'
        FilterType:
          $ref: '#/components/schemas/FilterType'
      description: An array of objects representing the details of a repository filter.
      required:
        - Filter
        - FilterType
      additionalProperties: false
    Filter:
      type: string
      description: The repository filter to be applied for replication.
      pattern: ^(?:[a-z0-9]+(?:[._-][a-z0-9]*)*/)*[a-z0-9]*(?:[._-][a-z0-9]*)*$
    FilterType:
      description: Type of repository filter
      type: string
      enum:
        - PREFIX_MATCH
    ReplicationDestination:
      type: object
      properties:
        Region:
          $ref: '#/components/schemas/Region'
        RegistryId:
          $ref: '#/components/schemas/RegistryId'
      description: An array of objects representing the details of a replication destination.
      required:
        - Region
        - RegistryId
      additionalProperties: false
    Region:
      description: A Region to replicate to.
      type: string
      pattern: '[0-9a-z-]{2,25}'
    LifecyclePolicy:
      type: object
      description: The LifecyclePolicy property type specifies a lifecycle policy. For information about lifecycle policy syntax, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html
      properties:
        LifecyclePolicyText:
          $ref: '#/components/schemas/LifecyclePolicyText'
        RegistryId:
          $ref: '#/components/schemas/RegistryId'
      additionalProperties: false
    LifecyclePolicyText:
      type: string
      description: The JSON repository policy text to apply to the repository.
      minLength: 100
      maxLength: 30720
    ImageScanningConfiguration:
      type: object
      description: The image scanning configuration for the repository. This setting determines whether images are scanned for known vulnerabilities after being pushed to the repository.
      properties:
        ScanOnPush:
          $ref: '#/components/schemas/ScanOnPush'
      additionalProperties: false
    ScanOnPush:
      type: boolean
      description: The setting that determines whether images are scanned after being pushed to a repository.
    EncryptionConfiguration:
      type: object
      description: |-
        The encryption configuration for the repository. This determines how the contents of your repository are encrypted at rest.

        By default, when no encryption configuration is set or the AES256 encryption type is used, Amazon ECR uses server-side encryption with Amazon S3-managed encryption keys which encrypts your data at rest using an AES-256 encryption algorithm. This does not require any action on your part.

        For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html
      properties:
        EncryptionType:
          $ref: '#/components/schemas/EncryptionType'
        KmsKey:
          $ref: '#/components/schemas/KmsKey'
      required:
        - EncryptionType
      additionalProperties: false
    EncryptionType:
      type: string
      description: The encryption type to use.
      enum:
        - AES256
        - KMS
    KmsKey:
      type: string
      description: If you use the KMS encryption type, specify the CMK to use for encryption. The alias, key ID, or full ARN of the CMK can be specified. The key must exist in the same Region as the repository. If no key is specified, the default AWS managed CMK for Amazon ECR will be used.
      minLength: 1
      maxLength: 2048
    EmptyOnDelete:
      type: boolean
      description: If true, deleting the repository force deletes the contents of the repository. Without a force delete, you can only delete empty repositories.
    Repository:
      type: object
      properties:
        EmptyOnDelete:
          $ref: '#/components/schemas/EmptyOnDelete'
        LifecyclePolicy:
          $ref: '#/components/schemas/LifecyclePolicy'
        RepositoryName:
          type: string
          description: The name to use for the repository. The repository name may be specified on its own (such as nginx-web-app) or it can be prepended with a namespace to group the repository into a category (such as project-a/nginx-web-app). If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the repository name. For more information, see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html.
          minLength: 2
          maxLength: 256
          pattern: ^(?=.{2,256}$)((?:[a-z0-9]+(?:[._-][a-z0-9]+)*/)*[a-z0-9]+(?:[._-][a-z0-9]+)*)$
        RepositoryPolicyText:
          type: object
          description: 'The JSON repository policy text to apply to the repository. For more information, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html in the Amazon Elastic Container Registry User Guide. '
        Tags:
          type: array
          maxItems: 50
          uniqueItems: true
          x-insertionOrder: false
          description: An array of key-value pairs to apply to this resource.
          items:
            $ref: '#/components/schemas/Tag'
        Arn:
          type: string
        RepositoryUri:
          type: string
        ImageTagMutability:
          type: string
          description: The image tag mutability setting for the repository.
          enum:
            - MUTABLE
            - IMMUTABLE
        ImageScanningConfiguration:
          $ref: '#/components/schemas/ImageScanningConfiguration'
        EncryptionConfiguration:
          $ref: '#/components/schemas/EncryptionConfiguration'
      x-stackql-resource-name: repository
      x-stackql-primaryIdentifier:
        - RepositoryName
      x-create-only-properties:
        - RepositoryName
        - EncryptionConfiguration
        - EncryptionConfiguration/EncryptionType
        - EncryptionConfiguration/KmsKey
      x-read-only-properties:
        - Arn
        - RepositoryUri
      x-required-permissions:
        create:
          - ecr:CreateRepository
          - ecr:PutLifecyclePolicy
          - ecr:SetRepositoryPolicy
          - ecr:TagResource
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:RetireGrant
        read:
          - ecr:DescribeRepositories
          - ecr:GetLifecyclePolicy
          - ecr:GetRepositoryPolicy
          - ecr:ListTagsForResource
        update:
          - ecr:DescribeRepositories
          - ecr:PutLifecyclePolicy
          - ecr:SetRepositoryPolicy
          - ecr:ListTagsForResource
          - ecr:TagResource
          - ecr:UntagResource
          - ecr:DeleteLifecyclePolicy
          - ecr:DeleteRepositoryPolicy
          - ecr:PutImageScanningConfiguration
          - ecr:PutImageTagMutability
          - kms:DescribeKey
          - kms:CreateGrant
          - kms:RetireGrant
        delete:
          - ecr:DeleteRepository
          - kms:RetireGrant
        list:
          - ecr:DescribeRepositories
  x-stackQL-resources:
    public_repositories:
      name: public_repositories
      id: awscc.ecr.public_repositories
      x-cfn-schema-name: PublicRepository
      x-type: list
      x-identifiers:
        - RepositoryName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RepositoryName') as repository_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::PublicRepository'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RepositoryName') as repository_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::PublicRepository'
                AND region = 'us-east-1'
    public_repository:
      name: public_repository
      id: awscc.ecr.public_repository
      x-cfn-schema-name: PublicRepository
      x-type: get
      x-identifiers:
        - RepositoryName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RepositoryName') as repository_name,
              JSON_EXTRACT(Properties, '$.RepositoryPolicyText') as repository_policy_text,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.RepositoryCatalogData') as repository_catalog_data,
              JSON_EXTRACT(Properties, '$.Tags') as tags
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::PublicRepository'
              AND data__Identifier = '<RepositoryName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RepositoryName') as repository_name,
                json_extract_path_text(Properties, 'RepositoryPolicyText') as repository_policy_text,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'RepositoryCatalogData') as repository_catalog_data,
                json_extract_path_text(Properties, 'Tags') as tags
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::PublicRepository'
                AND data__Identifier = '<RepositoryName>'
                AND region = 'us-east-1'
    pull_through_cache_rules:
      name: pull_through_cache_rules
      id: awscc.ecr.pull_through_cache_rules
      x-cfn-schema-name: PullThroughCacheRule
      x-type: list
      x-identifiers:
        - EcrRepositoryPrefix
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EcrRepositoryPrefix') as ecr_repository_prefix
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::PullThroughCacheRule'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EcrRepositoryPrefix') as ecr_repository_prefix
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::PullThroughCacheRule'
                AND region = 'us-east-1'
    pull_through_cache_rule:
      name: pull_through_cache_rule
      id: awscc.ecr.pull_through_cache_rule
      x-cfn-schema-name: PullThroughCacheRule
      x-type: get
      x-identifiers:
        - EcrRepositoryPrefix
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EcrRepositoryPrefix') as ecr_repository_prefix,
              JSON_EXTRACT(Properties, '$.UpstreamRegistryUrl') as upstream_registry_url,
              JSON_EXTRACT(Properties, '$.CredentialArn') as credential_arn,
              JSON_EXTRACT(Properties, '$.UpstreamRegistry') as upstream_registry
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::PullThroughCacheRule'
              AND data__Identifier = '<EcrRepositoryPrefix>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EcrRepositoryPrefix') as ecr_repository_prefix,
                json_extract_path_text(Properties, 'UpstreamRegistryUrl') as upstream_registry_url,
                json_extract_path_text(Properties, 'CredentialArn') as credential_arn,
                json_extract_path_text(Properties, 'UpstreamRegistry') as upstream_registry
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::PullThroughCacheRule'
                AND data__Identifier = '<EcrRepositoryPrefix>'
                AND region = 'us-east-1'
    registry_policies:
      name: registry_policies
      id: awscc.ecr.registry_policies
      x-cfn-schema-name: RegistryPolicy
      x-type: list
      x-identifiers:
        - RegistryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RegistryId') as registry_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::RegistryPolicy'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RegistryId') as registry_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::RegistryPolicy'
                AND region = 'us-east-1'
    registry_policy:
      name: registry_policy
      id: awscc.ecr.registry_policy
      x-cfn-schema-name: RegistryPolicy
      x-type: get
      x-identifiers:
        - RegistryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RegistryId') as registry_id,
              JSON_EXTRACT(Properties, '$.PolicyText') as policy_text
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::RegistryPolicy'
              AND data__Identifier = '<RegistryId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RegistryId') as registry_id,
                json_extract_path_text(Properties, 'PolicyText') as policy_text
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::RegistryPolicy'
                AND data__Identifier = '<RegistryId>'
                AND region = 'us-east-1'
    replication_configurations:
      name: replication_configurations
      id: awscc.ecr.replication_configurations
      x-cfn-schema-name: ReplicationConfiguration
      x-type: list
      x-identifiers:
        - RegistryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RegistryId') as registry_id
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::ReplicationConfiguration'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RegistryId') as registry_id
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::ReplicationConfiguration'
                AND region = 'us-east-1'
    replication_configuration:
      name: replication_configuration
      id: awscc.ecr.replication_configuration
      x-cfn-schema-name: ReplicationConfiguration
      x-type: get
      x-identifiers:
        - RegistryId
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ReplicationConfiguration') as replication_configuration,
              JSON_EXTRACT(Properties, '$.RegistryId') as registry_id
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::ReplicationConfiguration'
              AND data__Identifier = '<RegistryId>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ReplicationConfiguration') as replication_configuration,
                json_extract_path_text(Properties, 'RegistryId') as registry_id
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::ReplicationConfiguration'
                AND data__Identifier = '<RegistryId>'
                AND region = 'us-east-1'
    repositories:
      name: repositories
      id: awscc.ecr.repositories
      x-cfn-schema-name: Repository
      x-type: list
      x-identifiers:
        - RepositoryName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.RepositoryName') as repository_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::Repository'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'RepositoryName') as repository_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::ECR::Repository'
                AND region = 'us-east-1'
    repository:
      name: repository
      id: awscc.ecr.repository
      x-cfn-schema-name: Repository
      x-type: get
      x-identifiers:
        - RepositoryName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.EmptyOnDelete') as empty_on_delete,
              JSON_EXTRACT(Properties, '$.LifecyclePolicy') as lifecycle_policy,
              JSON_EXTRACT(Properties, '$.RepositoryName') as repository_name,
              JSON_EXTRACT(Properties, '$.RepositoryPolicyText') as repository_policy_text,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.RepositoryUri') as repository_uri,
              JSON_EXTRACT(Properties, '$.ImageTagMutability') as image_tag_mutability,
              JSON_EXTRACT(Properties, '$.ImageScanningConfiguration') as image_scanning_configuration,
              JSON_EXTRACT(Properties, '$.EncryptionConfiguration') as encryption_configuration
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::Repository'
              AND data__Identifier = '<RepositoryName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'EmptyOnDelete') as empty_on_delete,
                json_extract_path_text(Properties, 'LifecyclePolicy') as lifecycle_policy,
                json_extract_path_text(Properties, 'RepositoryName') as repository_name,
                json_extract_path_text(Properties, 'RepositoryPolicyText') as repository_policy_text,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'RepositoryUri') as repository_uri,
                json_extract_path_text(Properties, 'ImageTagMutability') as image_tag_mutability,
                json_extract_path_text(Properties, 'ImageScanningConfiguration') as image_scanning_configuration,
                json_extract_path_text(Properties, 'EncryptionConfiguration') as encryption_configuration
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::ECR::Repository'
                AND data__Identifier = '<RepositoryName>'
                AND region = 'us-east-1'
