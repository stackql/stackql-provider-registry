openapi: 3.0.0
info:
  title: Comprehend
  version: 1.0.0
paths: {}
components:
  schemas:
    Tag:
      type: object
      properties:
        Key:
          type: string
          minLength: 1
          maxLength: 128
        Value:
          type: string
          minLength: 0
          maxLength: 256
      additionalProperties: false
      required:
        - Key
        - Value
    DocumentClassifierInputDataConfig:
      type: object
      properties:
        AugmentedManifests:
          type: array
          items:
            $ref: '#/components/schemas/AugmentedManifestsListItem'
          x-insertionOrder: false
          uniqueItems: true
        DataFormat:
          type: string
          enum:
            - COMPREHEND_CSV
            - AUGMENTED_MANIFEST
        LabelDelimiter:
          type: string
          pattern: ^[ ~!@#$%^*\-_+=|\\:;\t>?/]$
          minLength: 1
          maxLength: 1
        DocumentType:
          type: string
          enum:
            - PLAIN_TEXT_DOCUMENT
            - SEMI_STRUCTURED_DOCUMENT
        Documents:
          $ref: '#/components/schemas/DocumentClassifierDocuments'
        DocumentReaderConfig:
          $ref: '#/components/schemas/DocumentReaderConfig'
        S3Uri:
          $ref: '#/components/schemas/S3Uri'
        TestS3Uri:
          $ref: '#/components/schemas/S3Uri'
      required: []
      additionalProperties: false
    AugmentedManifestsListItem:
      type: object
      properties:
        AttributeNames:
          type: array
          items:
            type: string
            pattern: ^[a-zA-Z0-9](-*[a-zA-Z0-9])*
          x-insertionOrder: false
          uniqueItems: true
          minItems: 1
          maxItems: 63
        S3Uri:
          $ref: '#/components/schemas/S3Uri'
        Split:
          type: string
          enum:
            - TRAIN
            - TEST
      required:
        - AttributeNames
        - S3Uri
      additionalProperties: false
    DocumentClassifierDocuments:
      type: object
      properties:
        S3Uri:
          $ref: '#/components/schemas/S3Uri'
        TestS3Uri:
          $ref: '#/components/schemas/S3Uri'
      required:
        - S3Uri
      additionalProperties: false
    DocumentReaderConfig:
      type: object
      properties:
        DocumentReadAction:
          type: string
          enum:
            - TEXTRACT_DETECT_DOCUMENT_TEXT
            - TEXTRACT_ANALYZE_DOCUMENT
        DocumentReadMode:
          type: string
          enum:
            - SERVICE_DEFAULT
            - FORCE_DOCUMENT_READ_ACTION
        FeatureTypes:
          type: array
          items:
            type: string
            enum:
              - TABLES
              - FORMS
          x-insertionOrder: false
          uniqueItems: true
          minItems: 1
          maxItems: 2
      required:
        - DocumentReadAction
      additionalProperties: false
    DocumentClassifierOutputDataConfig:
      type: object
      properties:
        KmsKeyId:
          $ref: '#/components/schemas/KmsKeyId'
        S3Uri:
          $ref: '#/components/schemas/S3Uri'
      required: []
      additionalProperties: false
    VpcConfig:
      type: object
      properties:
        SecurityGroupIds:
          type: array
          items:
            type: string
            pattern: '[-0-9a-zA-Z]+'
            minLength: 1
            maxLength: 32
          x-insertionOrder: false
          uniqueItems: true
          minItems: 1
          maxItems: 5
        Subnets:
          type: array
          items:
            type: string
            pattern: '[-0-9a-zA-Z]+'
            minLength: 1
            maxLength: 32
          x-insertionOrder: false
          uniqueItems: true
          minItems: 1
          maxItems: 16
      required:
        - SecurityGroupIds
        - Subnets
      additionalProperties: false
    S3Uri:
      type: string
      pattern: s3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?
      maxLength: 1024
    KmsKeyId:
      type: string
      minLength: 1
      maxLength: 2048
    DocumentClassifier:
      type: object
      properties:
        DataAccessRoleArn:
          type: string
          pattern: arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+
          minLength: 20
          maxLength: 2048
        InputDataConfig:
          $ref: '#/components/schemas/DocumentClassifierInputDataConfig'
        OutputDataConfig:
          $ref: '#/components/schemas/DocumentClassifierOutputDataConfig'
        LanguageCode:
          type: string
          enum:
            - en
            - es
            - fr
            - it
            - de
            - pt
        ModelKmsKeyId:
          $ref: '#/components/schemas/KmsKeyId'
        ModelPolicy:
          type: string
          pattern: '[\u0009\u000A\u000D\u0020-\u00FF]+'
          minLength: 1
          maxLength: 20000
        DocumentClassifierName:
          type: string
          pattern: ^[a-zA-Z0-9](-*[a-zA-Z0-9])*$
          minLength: 1
          maxLength: 63
        Mode:
          type: string
          enum:
            - MULTI_CLASS
            - MULTI_LABEL
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          x-insertionOrder: false
          uniqueItems: true
        VersionName:
          type: string
          pattern: ^[a-zA-Z0-9](-*[a-zA-Z0-9])*$
          minLength: 1
          maxLength: 63
        VolumeKmsKeyId:
          $ref: '#/components/schemas/KmsKeyId'
        VpcConfig:
          $ref: '#/components/schemas/VpcConfig'
        Arn:
          type: string
          pattern: arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:document-classifier/[a-zA-Z0-9](-*[a-zA-Z0-9])*(/version/[a-zA-Z0-9](-*[a-zA-Z0-9])*)?
          minLength: 1
          maxLength: 256
      required:
        - DocumentClassifierName
        - DataAccessRoleArn
        - InputDataConfig
        - LanguageCode
      x-stackql-resource-name: document_classifier
      x-stackql-primaryIdentifier:
        - Arn
      x-create-only-properties:
        - DataAccessRoleArn
        - InputDataConfig
        - OutputDataConfig
        - LanguageCode
        - ModelKmsKeyId
        - DocumentClassifierName
        - VersionName
        - Mode
        - VolumeKmsKeyId
        - VpcConfig
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - iam:PassRole
          - comprehend:CreateDocumentClassifier
          - comprehend:DescribeDocumentClassifier
          - comprehend:DescribeResourcePolicy
          - comprehend:ListTagsForResource
          - textract:DetectDocumentText
        read:
          - comprehend:DescribeDocumentClassifier
          - comprehend:DescribeResourcePolicy
          - comprehend:ListTagsForResource
        update:
          - iam:PassRole
          - comprehend:PutResourcePolicy
          - comprehend:DeleteResourcePolicy
          - comprehend:DescribeResourcePolicy
          - comprehend:DescribeDocumentClassifier
          - comprehend:ListTagsForResource
          - comprehend:TagResource
          - comprehend:UntagResource
        delete:
          - comprehend:DescribeDocumentClassifier
          - comprehend:DeleteDocumentClassifier
        list:
          - comprehend:ListDocumentClassifiers
    TaskConfig:
      type: object
      properties:
        LanguageCode:
          type: string
          enum:
            - en
            - es
            - fr
            - it
            - de
            - pt
        DocumentClassificationConfig:
          $ref: '#/components/schemas/DocumentClassificationConfig'
        EntityRecognitionConfig:
          $ref: '#/components/schemas/EntityRecognitionConfig'
      required:
        - LanguageCode
      additionalProperties: false
    DataSecurityConfig:
      type: object
      properties:
        ModelKmsKeyId:
          $ref: '#/components/schemas/KmsKeyId'
        VolumeKmsKeyId:
          $ref: '#/components/schemas/KmsKeyId'
        DataLakeKmsKeyId:
          $ref: '#/components/schemas/KmsKeyId'
        VpcConfig:
          $ref: '#/components/schemas/VpcConfig'
      required: []
      additionalProperties: false
    EntityTypesListItem:
      type: object
      properties:
        Type:
          type: string
          pattern: ^(?![^\n\r\t,]*\\n|\\r|\\t)[^\n\r\t,]+$
          minLength: 1
          maxLength: 64
      additionalProperties: false
      required:
        - Type
    EntityRecognitionConfig:
      type: object
      properties:
        EntityTypes:
          type: array
          items:
            $ref: '#/components/schemas/EntityTypesListItem'
          x-insertionOrder: false
          uniqueItems: true
          minItems: 1
          maxItems: 25
      additionalProperties: false
    DocumentClassificationConfig:
      type: object
      properties:
        Mode:
          type: string
          enum:
            - MULTI_CLASS
            - MULTI_LABEL
        Labels:
          type: array
          items:
            type: string
            maxLength: 5000
          x-insertionOrder: false
          uniqueItems: true
          maxItems: 1000
      additionalProperties: false
      required:
        - Mode
    Flywheel:
      type: object
      properties:
        ActiveModelArn:
          type: string
          pattern: arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:(document-classifier|entity-recognizer)/[a-zA-Z0-9](-*[a-zA-Z0-9])*(/version/[a-zA-Z0-9](-*[a-zA-Z0-9])*)?
          maxLength: 256
        DataAccessRoleArn:
          type: string
          pattern: arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+
          minLength: 20
          maxLength: 2048
        DataLakeS3Uri:
          type: string
          pattern: s3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?
          maxLength: 512
        DataSecurityConfig:
          $ref: '#/components/schemas/DataSecurityConfig'
        FlywheelName:
          type: string
          pattern: ^[a-zA-Z0-9](-*[a-zA-Z0-9])*$
          minLength: 1
          maxLength: 63
        ModelType:
          type: string
          enum:
            - DOCUMENT_CLASSIFIER
            - ENTITY_RECOGNIZER
        Tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          x-insertionOrder: false
          uniqueItems: true
        TaskConfig:
          $ref: '#/components/schemas/TaskConfig'
        Arn:
          type: string
          pattern: arn:aws(-[^:]+)?:comprehend:[a-zA-Z0-9-]*:[0-9]{12}:flywheel/[a-zA-Z0-9](-*[a-zA-Z0-9])*
          minLength: 1
          maxLength: 256
      required:
        - FlywheelName
        - DataAccessRoleArn
        - DataLakeS3Uri
      x-stackql-resource-name: flywheel
      x-stackql-primaryIdentifier:
        - Arn
      x-create-only-properties:
        - FlywheelName
        - ModelType
        - DataLakeS3Uri
        - TaskConfig
      x-read-only-properties:
        - Arn
      x-required-permissions:
        create:
          - iam:PassRole
          - comprehend:CreateFlywheel
          - comprehend:DescribeFlywheel
          - comprehend:ListTagsForResource
        read:
          - comprehend:DescribeFlywheel
          - comprehend:ListTagsForResource
        update:
          - iam:PassRole
          - comprehend:DescribeFlywheel
          - comprehend:UpdateFlywheel
          - comprehend:ListTagsForResource
          - comprehend:TagResource
          - comprehend:UntagResource
        delete:
          - comprehend:DeleteFlywheel
          - comprehend:DescribeFlywheel
        list:
          - comprehend:ListFlywheels
  x-stackQL-resources:
    document_classifiers:
      name: document_classifiers
      id: awscc.comprehend.document_classifiers
      x-cfn-schema-name: DocumentClassifier
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Comprehend::DocumentClassifier'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Comprehend::DocumentClassifier'
                AND region = 'us-east-1'
    document_classifier:
      name: document_classifier
      id: awscc.comprehend.document_classifier
      x-cfn-schema-name: DocumentClassifier
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.DataAccessRoleArn') as data_access_role_arn,
              JSON_EXTRACT(Properties, '$.InputDataConfig') as input_data_config,
              JSON_EXTRACT(Properties, '$.OutputDataConfig') as output_data_config,
              JSON_EXTRACT(Properties, '$.LanguageCode') as language_code,
              JSON_EXTRACT(Properties, '$.ModelKmsKeyId') as model_kms_key_id,
              JSON_EXTRACT(Properties, '$.ModelPolicy') as model_policy,
              JSON_EXTRACT(Properties, '$.DocumentClassifierName') as document_classifier_name,
              JSON_EXTRACT(Properties, '$.Mode') as mode,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.VersionName') as version_name,
              JSON_EXTRACT(Properties, '$.VolumeKmsKeyId') as volume_kms_key_id,
              JSON_EXTRACT(Properties, '$.VpcConfig') as vpc_config,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Comprehend::DocumentClassifier'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'DataAccessRoleArn') as data_access_role_arn,
                json_extract_path_text(Properties, 'InputDataConfig') as input_data_config,
                json_extract_path_text(Properties, 'OutputDataConfig') as output_data_config,
                json_extract_path_text(Properties, 'LanguageCode') as language_code,
                json_extract_path_text(Properties, 'ModelKmsKeyId') as model_kms_key_id,
                json_extract_path_text(Properties, 'ModelPolicy') as model_policy,
                json_extract_path_text(Properties, 'DocumentClassifierName') as document_classifier_name,
                json_extract_path_text(Properties, 'Mode') as mode,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'VersionName') as version_name,
                json_extract_path_text(Properties, 'VolumeKmsKeyId') as volume_kms_key_id,
                json_extract_path_text(Properties, 'VpcConfig') as vpc_config,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Comprehend::DocumentClassifier'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
    flywheels:
      name: flywheels
      id: awscc.comprehend.flywheels
      x-cfn-schema-name: Flywheel
      x-type: list
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Comprehend::Flywheel'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::Comprehend::Flywheel'
                AND region = 'us-east-1'
    flywheel:
      name: flywheel
      id: awscc.comprehend.flywheel
      x-cfn-schema-name: Flywheel
      x-type: get
      x-identifiers:
        - Arn
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.ActiveModelArn') as active_model_arn,
              JSON_EXTRACT(Properties, '$.DataAccessRoleArn') as data_access_role_arn,
              JSON_EXTRACT(Properties, '$.DataLakeS3Uri') as data_lake_s3_uri,
              JSON_EXTRACT(Properties, '$.DataSecurityConfig') as data_security_config,
              JSON_EXTRACT(Properties, '$.FlywheelName') as flywheel_name,
              JSON_EXTRACT(Properties, '$.ModelType') as model_type,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TaskConfig') as task_config,
              JSON_EXTRACT(Properties, '$.Arn') as arn
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Comprehend::Flywheel'
              AND data__Identifier = '<Arn>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'ActiveModelArn') as active_model_arn,
                json_extract_path_text(Properties, 'DataAccessRoleArn') as data_access_role_arn,
                json_extract_path_text(Properties, 'DataLakeS3Uri') as data_lake_s3_uri,
                json_extract_path_text(Properties, 'DataSecurityConfig') as data_security_config,
                json_extract_path_text(Properties, 'FlywheelName') as flywheel_name,
                json_extract_path_text(Properties, 'ModelType') as model_type,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TaskConfig') as task_config,
                json_extract_path_text(Properties, 'Arn') as arn
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::Comprehend::Flywheel'
                AND data__Identifier = '<Arn>'
                AND region = 'us-east-1'
