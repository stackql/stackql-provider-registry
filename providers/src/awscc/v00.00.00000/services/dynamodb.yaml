openapi: 3.0.0
info:
  title: DynamoDB
  version: 1.0.0
paths: {}
components:
  schemas:
    LocalSecondaryIndex:
      description: Represents the properties of a local secondary index. A local secondary index can only be created when its parent table is created.
      additionalProperties: false
      type: object
      properties:
        IndexName:
          description: The name of the local secondary index. The name must be unique among all other indexes on this table.
          type: string
        Projection:
          description: Represents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
          $ref: '#/components/schemas/Projection'
        KeySchema:
          uniqueItems: true
          description: |-
            The complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:
              +   ``HASH`` - partition key
              +   ``RANGE`` - sort key
              
              The partition key of an item is also known as its *hash attribute*. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.
             The sort key of an item is also known as its *range attribute*. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
          type: array
          items:
            $ref: '#/components/schemas/KeySchema'
      required:
        - IndexName
        - Projection
        - KeySchema
    SSESpecification:
      description: Represents the settings used to enable server-side encryption.
      additionalProperties: false
      type: object
      properties:
        SSEEnabled:
          description: Indicates whether server-side encryption is done using an AWS managed key or an AWS owned key. If enabled (true), server-side encryption type is set to ``KMS`` and an AWS managed key is used (KMS charges apply). If disabled (false) or not specified, server-side encryption is set to AWS owned key.
          type: boolean
        SSEType:
          description: |-
            Server-side encryption type. The only supported value is:
              +   ``KMS`` - Server-side encryption that uses KMSlong. The key is stored in your account and is managed by KMS (KMS charges apply).
          type: string
        KMSMasterKeyId:
          description: The KMS key that should be used for the KMS encryption. To specify a key, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB key ``alias/aws/dynamodb``.
          type: string
      required:
        - SSEEnabled
    KinesisStreamSpecification:
      description: The Kinesis Data Streams configuration for the specified table.
      additionalProperties: false
      type: object
      properties:
        ApproximateCreationDateTimePrecision:
          description: The precision for the time and date that the stream was created.
          type: string
          enum:
            - MICROSECOND
            - MILLISECOND
        StreamArn:
          description: |-
            The ARN for a specific Kinesis data stream.
             Length Constraints: Minimum length of 37. Maximum length of 1024.
          type: string
      required:
        - StreamArn
    StreamSpecification:
      description: Represents the DynamoDB Streams configuration for a table in DynamoDB.
      additionalProperties: false
      type: object
      properties:
        StreamViewType:
          description: |-
            When an item in the table is modified, ``StreamViewType`` determines what information is written to the stream for this table. Valid values for ``StreamViewType`` are:
              +   ``KEYS_ONLY`` - Only the key attributes of the modified item are written to the stream.
              +   ``NEW_IMAGE`` - The entire item, as it appears after it was modified, is written to the stream.
              +   ``OLD_IMAGE`` - The entire item, as it appeared before it was modified, is written to the stream.
              +   ``NEW_AND_OLD_IMAGES`` - Both the new and the old item images of the item are written to the stream.
          type: string
      required:
        - StreamViewType
    ContributorInsightsSpecification:
      description: The settings used to enable or disable CloudWatch Contributor Insights.
      additionalProperties: false
      type: object
      properties:
        Enabled:
          description: Indicates whether CloudWatch Contributor Insights are to be enabled (true) or disabled (false).
          type: boolean
      required:
        - Enabled
    ReplicaSpecification:
      additionalProperties: false
      type: object
      properties:
        SSESpecification:
          $ref: '#/components/schemas/ReplicaSSESpecification'
        KinesisStreamSpecification:
          $ref: '#/components/schemas/KinesisStreamSpecification'
        ContributorInsightsSpecification:
          $ref: '#/components/schemas/ContributorInsightsSpecification'
        GlobalSecondaryIndexes:
          uniqueItems: true
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/ReplicaGlobalSecondaryIndexSpecification'
        Region:
          type: string
        PointInTimeRecoverySpecification:
          $ref: '#/components/schemas/PointInTimeRecoverySpecification'
        ReadProvisionedThroughputSettings:
          $ref: '#/components/schemas/ReadProvisionedThroughputSettings'
        TableClass:
          type: string
        DeletionProtectionEnabled:
          type: boolean
        Tags:
          uniqueItems: true
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      required:
        - Region
    CapacityAutoScalingSettings:
      additionalProperties: false
      type: object
      properties:
        MinCapacity:
          type: integer
          minimum: 1
        SeedCapacity:
          type: integer
          minimum: 1
        TargetTrackingScalingPolicyConfiguration:
          $ref: '#/components/schemas/TargetTrackingScalingPolicyConfiguration'
        MaxCapacity:
          type: integer
          minimum: 1
      required:
        - MinCapacity
        - MaxCapacity
        - TargetTrackingScalingPolicyConfiguration
    AttributeDefinition:
      description: Represents an attribute for describing the schema for the table and indexes.
      additionalProperties: false
      type: object
      properties:
        AttributeType:
          description: |-
            The data type for the attribute, where:
              +   ``S`` - the attribute is of type String
              +   ``N`` - the attribute is of type Number
              +   ``B`` - the attribute is of type Binary
          type: string
        AttributeName:
          description: A name for the attribute.
          type: string
      required:
        - AttributeName
        - AttributeType
    Projection:
      description: Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
      additionalProperties: false
      type: object
      properties:
        NonKeyAttributes:
          uniqueItems: false
          description: |-
            Represents the non-key attribute names which will be projected into the index.
             For local secondary indexes, the total count of ``NonKeyAttributes`` summed across all of the local secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.
          type: array
          items:
            type: string
        ProjectionType:
          description: |-
            The set of attributes that are projected into the index:
              +   ``KEYS_ONLY`` - Only the index and primary keys are projected into the index.
              +   ``INCLUDE`` - In addition to the attributes described in ``KEYS_ONLY``, the secondary index will include other non-key attributes that you specify.
              +   ``ALL`` - All of the table attributes are projected into the index.
              
             When using the DynamoDB console, ``ALL`` is selected by default.
          type: string
    PointInTimeRecoverySpecification:
      description: The settings used to enable point in time recovery.
      additionalProperties: false
      type: object
      properties:
        PointInTimeRecoveryEnabled:
          description: Indicates whether point in time recovery is enabled (true) or disabled (false) on the table.
          type: boolean
    ReplicaGlobalSecondaryIndexSpecification:
      additionalProperties: false
      type: object
      properties:
        IndexName:
          minLength: 3
          type: string
          maxLength: 255
        ContributorInsightsSpecification:
          $ref: '#/components/schemas/ContributorInsightsSpecification'
        ReadProvisionedThroughputSettings:
          $ref: '#/components/schemas/ReadProvisionedThroughputSettings'
      required:
        - IndexName
    TargetTrackingScalingPolicyConfiguration:
      additionalProperties: false
      type: object
      properties:
        ScaleOutCooldown:
          type: integer
          minimum: 0
        TargetValue:
          format: double
          type: number
        DisableScaleIn:
          type: boolean
        ScaleInCooldown:
          type: integer
          minimum: 0
      required:
        - TargetValue
    GlobalSecondaryIndex:
      description: Represents the properties of a global secondary index.
      additionalProperties: false
      type: object
      properties:
        IndexName:
          description: The name of the global secondary index. The name must be unique among all other indexes on this table.
          type: string
        ContributorInsightsSpecification:
          description: The settings used to enable or disable CloudWatch Contributor Insights for the specified global secondary index.
          $ref: '#/components/schemas/ContributorInsightsSpecification'
        Projection:
          description: Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
          $ref: '#/components/schemas/Projection'
        ProvisionedThroughput:
          description: |-
            Represents the provisioned throughput settings for the specified global secondary index.
             For current minimum and maximum provisioned throughput values, see [Service, Account, and Table Quotas](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the *Amazon DynamoDB Developer Guide*.
          $ref: '#/components/schemas/ProvisionedThroughput'
        KeySchema:
          uniqueItems: true
          description: |-
            The complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:
              +   ``HASH`` - partition key
              +   ``RANGE`` - sort key
              
              The partition key of an item is also known as its *hash attribute*. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.
             The sort key of an item is also known as its *range attribute*. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
          type: array
          items:
            $ref: '#/components/schemas/KeySchema'
      required:
        - IndexName
        - Projection
        - KeySchema
    WriteProvisionedThroughputSettings:
      additionalProperties: false
      type: object
      properties:
        WriteCapacityAutoScalingSettings:
          $ref: '#/components/schemas/CapacityAutoScalingSettings'
    ReplicaSSESpecification:
      additionalProperties: false
      type: object
      properties:
        KMSMasterKeyId:
          type: string
      required:
        - KMSMasterKeyId
    KeySchema:
      description: |-
        Represents *a single element* of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.
         A ``KeySchemaElement`` represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one ``KeySchemaElement`` (for the partition key). A composite primary key would require one ``KeySchemaElement`` for the partition key, and another ``KeySchemaElement`` for the sort key.
         A ``KeySchemaElement`` must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.
      additionalProperties: false
      type: object
      properties:
        KeyType:
          description: |-
            The role that this key attribute will assume:
              +   ``HASH`` - partition key
              +   ``RANGE`` - sort key
              
              The partition key of an item is also known as its *hash attribute*. The term "hash attribute" derives from DynamoDB's usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.
             The sort key of an item is also known as its *range attribute*. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.
          type: string
        AttributeName:
          description: The name of a key attribute.
          type: string
      required:
        - KeyType
        - AttributeName
    Tag:
      description: |-
        Describes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB table. 
          AWS-assigned tag names and values are automatically assigned the ``aws:`` prefix, which the user cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned tag names have the prefix ``user:`` in the Cost Allocation Report. You cannot backdate the application of a tag.
         For an overview on tagging DynamoDB resources, see [Tagging for DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html) in the *Amazon DynamoDB Developer Guide*.
      additionalProperties: false
      type: object
      properties:
        Value:
          description: The value of the tag. Tag values are case-sensitive and can be null.
          type: string
        Key:
          description: The key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value.
          type: string
      required:
        - Value
        - Key
    ReadProvisionedThroughputSettings:
      additionalProperties: false
      type: object
      properties:
        ReadCapacityUnits:
          type: integer
          minimum: 1
        ReadCapacityAutoScalingSettings:
          $ref: '#/components/schemas/CapacityAutoScalingSettings'
    TimeToLiveSpecification:
      description: Represents the settings used to enable or disable Time to Live (TTL) for the specified table.
      additionalProperties: false
      type: object
      properties:
        Enabled:
          description: Indicates whether TTL is to be enabled (true) or disabled (false) on the table.
          type: boolean
        AttributeName:
          description: |-
            The name of the TTL attribute used to store the expiration time for items in the table.
               + The ``AttributeName`` property is required when enabling the TTL, or when TTL is already enabled.
              +  To update this property, you must first disable TTL and then enable TTL with the new attribute name.
          type: string
      required:
        - Enabled
    GlobalTable:
      type: object
      properties:
        TableId:
          type: string
        SSESpecification:
          $ref: '#/components/schemas/SSESpecification'
        StreamSpecification:
          $ref: '#/components/schemas/StreamSpecification'
        Replicas:
          minItems: 1
          uniqueItems: true
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/ReplicaSpecification'
        WriteProvisionedThroughputSettings:
          $ref: '#/components/schemas/WriteProvisionedThroughputSettings'
        TableName:
          type: string
        AttributeDefinitions:
          minItems: 1
          uniqueItems: true
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/AttributeDefinition'
        BillingMode:
          type: string
        GlobalSecondaryIndexes:
          uniqueItems: true
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/GlobalSecondaryIndex'
        KeySchema:
          minItems: 1
          maxItems: 2
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/KeySchema'
        LocalSecondaryIndexes:
          uniqueItems: true
          x-insertionOrder: false
          type: array
          items:
            $ref: '#/components/schemas/LocalSecondaryIndex'
        Arn:
          type: string
        StreamArn:
          type: string
        TimeToLiveSpecification:
          $ref: '#/components/schemas/TimeToLiveSpecification'
      required:
        - KeySchema
        - AttributeDefinitions
        - Replicas
      x-stackql-resource-name: global_table
      x-stackql-primaryIdentifier:
        - TableName
      x-create-only-properties:
        - LocalSecondaryIndexes
        - TableName
        - KeySchema
      x-read-only-properties:
        - Arn
        - StreamArn
        - TableId
      x-required-permissions:
        read:
          - dynamodb:Describe*
          - dynamodb:GetResourcePolicy
          - application-autoscaling:Describe*
          - cloudwatch:PutMetricData
          - dynamodb:ListTagsOfResource
          - kms:DescribeKey
        create:
          - dynamodb:CreateTable
          - dynamodb:CreateTableReplica
          - dynamodb:Describe*
          - dynamodb:UpdateTimeToLive
          - dynamodb:UpdateContributorInsights
          - dynamodb:UpdateContinuousBackups
          - dynamodb:ListTagsOfResource
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:UpdateItem
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          - dynamodb:BatchWriteItem
          - dynamodb:TagResource
          - dynamodb:EnableKinesisStreamingDestination
          - dynamodb:DisableKinesisStreamingDestination
          - dynamodb:UpdateTableReplicaAutoScaling
          - dynamodb:TagResource
          - dynamodb:GetResourcePolicy
          - dynamodb:PutResourcePolicy
          - application-autoscaling:DeleteScalingPolicy
          - application-autoscaling:DeleteScheduledAction
          - application-autoscaling:DeregisterScalableTarget
          - application-autoscaling:Describe*
          - application-autoscaling:PutScalingPolicy
          - application-autoscaling:PutScheduledAction
          - application-autoscaling:RegisterScalableTarget
          - kinesis:ListStreams
          - kinesis:DescribeStream
          - kinesis:PutRecords
          - kms:CreateGrant
          - kms:DescribeKey
          - kms:ListAliases
          - kms:Decrypt
          - kms:RevokeGrant
          - cloudwatch:PutMetricData
          - iam:CreateServiceLinkedRole
        update:
          - dynamodb:Describe*
          - dynamodb:CreateTableReplica
          - dynamodb:UpdateTable
          - dynamodb:UpdateTimeToLive
          - dynamodb:UpdateContinuousBackups
          - dynamodb:UpdateContributorInsights
          - dynamodb:ListTagsOfResource
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:UpdateItem
          - dynamodb:PutItem
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          - dynamodb:BatchWriteItem
          - dynamodb:DeleteTable
          - dynamodb:DeleteTableReplica
          - dynamodb:UpdateItem
          - dynamodb:TagResource
          - dynamodb:UntagResource
          - dynamodb:EnableKinesisStreamingDestination
          - dynamodb:DisableKinesisStreamingDestination
          - dynamodb:UpdateTableReplicaAutoScaling
          - dynamodb:UpdateKinesisStreamingDestination
          - dynamodb:GetResourcePolicy
          - dynamodb:PutResourcePolicy
          - dynamodb:DeleteResourcePolicy
          - application-autoscaling:DeleteScalingPolicy
          - application-autoscaling:DeleteScheduledAction
          - application-autoscaling:DeregisterScalableTarget
          - application-autoscaling:Describe*
          - application-autoscaling:PutScalingPolicy
          - application-autoscaling:PutScheduledAction
          - application-autoscaling:RegisterScalableTarget
          - kinesis:ListStreams
          - kinesis:DescribeStream
          - kinesis:PutRecords
          - kms:CreateGrant
          - kms:DescribeKey
          - kms:ListAliases
          - kms:RevokeGrant
          - cloudwatch:PutMetricData
        list:
          - dynamodb:ListTables
          - cloudwatch:PutMetricData
        delete:
          - dynamodb:Describe*
          - dynamodb:DeleteTable
          - application-autoscaling:DeleteScalingPolicy
          - application-autoscaling:DeleteScheduledAction
          - application-autoscaling:DeregisterScalableTarget
          - application-autoscaling:Describe*
          - application-autoscaling:PutScalingPolicy
          - application-autoscaling:PutScheduledAction
          - application-autoscaling:RegisterScalableTarget
    InputFormatOptions:
      description: The format options for the data that was imported into the target table. There is one value, CsvOption.
      additionalProperties: false
      type: object
      properties:
        Csv:
          description: The options for imported source files in CSV format. The values are Delimiter and HeaderList.
          $ref: '#/components/schemas/Csv'
    Csv:
      description: The options for imported source files in CSV format. The values are Delimiter and HeaderList.
      additionalProperties: false
      type: object
      properties:
        Delimiter:
          description: The delimiter used for separating items in the CSV file being imported.
          type: string
        HeaderList:
          uniqueItems: true
          description: List of the headers used to specify a common header for all source CSV files being imported. If this field is specified then the first line of each CSV file is treated as data instead of the header. If this field is not specified the the first line of each CSV file is treated as the header.
          type: array
          items:
            type: string
    ImportSourceSpecification:
      description: Specifies the properties of data being imported from the S3 bucket source to the table.
      additionalProperties: false
      type: object
      properties:
        S3BucketSource:
          description: The S3 bucket that provides the source for the import.
          $ref: '#/components/schemas/S3BucketSource'
        InputFormat:
          description: The format of the source data. Valid values for ``ImportFormat`` are ``CSV``, ``DYNAMODB_JSON`` or ``ION``.
          type: string
        InputFormatOptions:
          description: Additional properties that specify how the input is formatted,
          $ref: '#/components/schemas/InputFormatOptions'
        InputCompressionType:
          description: Type of compression to be used on the input coming from the imported table.
          type: string
      required:
        - S3BucketSource
        - InputFormat
    ProvisionedThroughput:
      description: Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Table ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html).
      additionalProperties: false
      type: object
      properties:
        WriteCapacityUnits:
          description: |-
            The maximum number of writes consumed per second before DynamoDB returns a ``ThrottlingException``. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html) in the *Amazon DynamoDB Developer Guide*.
             If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
          type: integer
        ReadCapacityUnits:
          description: |-
            The maximum number of strongly consistent reads consumed per second before DynamoDB returns a ``ThrottlingException``. For more information, see [Specifying Read and Write Requirements](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ProvisionedThroughput.html) in the *Amazon DynamoDB Developer Guide*.
             If read/write capacity mode is ``PAY_PER_REQUEST`` the value is set to 0.
          type: integer
      required:
        - WriteCapacityUnits
        - ReadCapacityUnits
    S3BucketSource:
      description: The S3 bucket that is being imported from.
      additionalProperties: false
      type: object
      properties:
        S3Bucket:
          description: The S3 bucket that is being imported from.
          type: string
        S3KeyPrefix:
          description: The key prefix shared by all S3 Objects that are being imported.
          type: string
        S3BucketOwner:
          description: The account number of the S3 bucket that is being imported from. If the bucket is owned by the requester this is optional.
          type: string
      required:
        - S3Bucket
    DeprecatedKeySchema:
      description: ''
      additionalProperties: false
      type: object
      properties:
        HashKeyElement:
          $ref: '#/components/schemas/DeprecatedHashKeyElement'
      required:
        - HashKeyElement
    DeprecatedHashKeyElement:
      description: ''
      additionalProperties: false
      type: object
      properties:
        AttributeType:
          type: string
        AttributeName:
          type: string
      required:
        - AttributeType
        - AttributeName
    Table:
      type: object
      properties:
        SSESpecification:
          description: Specifies the settings to enable server-side encryption.
          $ref: '#/components/schemas/SSESpecification'
        KinesisStreamSpecification:
          description: The Kinesis Data Streams configuration for the specified table.
          $ref: '#/components/schemas/KinesisStreamSpecification'
        StreamSpecification:
          description: The settings for the DDB table stream, which capture changes to items stored in the table.
          $ref: '#/components/schemas/StreamSpecification'
        ContributorInsightsSpecification:
          description: The settings used to enable or disable CloudWatch Contributor Insights for the specified table.
          $ref: '#/components/schemas/ContributorInsightsSpecification'
        ImportSourceSpecification:
          description: |-
            Specifies the properties of data being imported from the S3 bucket source to the table.
              If you specify the ``ImportSourceSpecification`` property, and also specify either the ``StreamSpecification``, the ``TableClass`` property, or the ``DeletionProtectionEnabled`` property, the IAM entity creating/updating stack must have ``UpdateTable`` permission.
          $ref: '#/components/schemas/ImportSourceSpecification'
        PointInTimeRecoverySpecification:
          description: The settings used to enable point in time recovery.
          $ref: '#/components/schemas/PointInTimeRecoverySpecification'
        ProvisionedThroughput:
          description: |-
            Throughput for the specified table, which consists of values for ``ReadCapacityUnits`` and ``WriteCapacityUnits``. For more information about the contents of a provisioned throughput structure, see [Amazon DynamoDB Table ProvisionedThroughput](https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_ProvisionedThroughput.html). 
             If you set ``BillingMode`` as ``PROVISIONED``, you must specify this property. If you set ``BillingMode`` as ``PAY_PER_REQUEST``, you cannot specify this property.
          $ref: '#/components/schemas/ProvisionedThroughput'
        TableName:
          description: |-
            A name for the table. If you don't specify a name, CFNlong generates a unique physical ID and uses that ID for the table name. For more information, see [Name Type](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-name.html).
              If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
          type: string
        AttributeDefinitions:
          uniqueItems: true
          description: |-
            A list of attributes that describe the key schema for the table and indexes.
             This property is required to create a DDB table.
             Update requires: [Some interruptions](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-update-behaviors.html#update-some-interrupt). Replacement if you edit an existing AttributeDefinition.
          type: array
          items:
            $ref: '#/components/schemas/AttributeDefinition'
        BillingMode:
          description: |-
            Specify how you are charged for read and write throughput and how you manage capacity.
             Valid values include:
              +   ``PROVISIONED`` - We recommend using ``PROVISIONED`` for predictable workloads. ``PROVISIONED`` sets the billing mode to [Provisioned Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual).
              +   ``PAY_PER_REQUEST`` - We recommend using ``PAY_PER_REQUEST`` for unpredictable workloads. ``PAY_PER_REQUEST`` sets the billing mode to [On-Demand Mode](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).
              
             If not specified, the default is ``PROVISIONED``.
          type: string
        GlobalSecondaryIndexes:
          uniqueItems: false
          description: |-
            Global secondary indexes to be created on the table. You can create up to 20 global secondary indexes.
              If you update a table to include a new global secondary index, CFNlong initiates the index creation and then proceeds with the stack update. CFNlong doesn't wait for the index to complete creation because the backfilling phase can take a long time, depending on the size of the table. You can't use the index or update the table until the index's status is ``ACTIVE``. You can track its status by using the DynamoDB [DescribeTable](https://docs.aws.amazon.com/cli/latest/reference/dynamodb/describe-table.html) command.
             If you add or delete an index during an update, we recommend that you don't update any other resources. If your stack fails to update and is rolled back while adding a new index, you must manually delete the index. 
             Updates are not supported. The following are exceptions:
              +  If you update either the contributor insights specification or the provisioned throughput value
          type: array
          items:
            $ref: '#/components/schemas/GlobalSecondaryIndex'
        KeySchema:
          oneOf:
            - uniqueItems: true
              type: array
              items:
                $ref: '#/components/schemas/KeySchema'
            - type: object
          description: Specifies the attributes that make up the primary key for the table. The attributes in the ``KeySchema`` property must also be defined in the ``AttributeDefinitions`` property.
        LocalSecondaryIndexes:
          uniqueItems: false
          description: Local secondary indexes to be created on the table. You can create up to 5 local secondary indexes. Each index is scoped to a given hash key value. The size of each hash key can be up to 10 gigabytes.
          type: array
          items:
            $ref: '#/components/schemas/LocalSecondaryIndex'
        Arn:
          description: ''
          type: string
        StreamArn:
          description: ''
          type: string
        DeletionProtectionEnabled:
          description: Determines if a table is protected from deletion. When enabled, the table cannot be deleted by any user or process. This setting is disabled by default. For more information, see [Using deletion protection](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.Basics.html#WorkingWithTables.Basics.DeletionProtection) in the *Developer Guide*.
          type: boolean
        TableClass:
          description: The table class of the new table. Valid values are ``STANDARD`` and ``STANDARD_INFREQUENT_ACCESS``.
          type: string
        Tags:
          uniqueItems: false
          description: |-
            An array of key-value pairs to apply to this resource.
             For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html).
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        TimeToLiveSpecification:
          description: |-
            Specifies the Time to Live (TTL) settings for the table.
              For detailed information about the limits in DynamoDB, see [Limits in Amazon DynamoDB](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
          $ref: '#/components/schemas/TimeToLiveSpecification'
      required:
        - KeySchema
      x-stackql-resource-name: table
      x-stackql-primaryIdentifier:
        - TableName
      x-create-only-properties:
        - TableName
        - ImportSourceSpecification
      x-read-only-properties:
        - Arn
        - StreamArn
      x-required-permissions:
        read:
          - dynamodb:DescribeTable
          - dynamodb:DescribeContinuousBackups
          - dynamodb:DescribeContributorInsights
          - dynamodb:DescribeKinesisStreamingDestination
          - dynamodb:ListTagsOfResource
          - dynamodb:GetResourcePolicy
        create:
          - dynamodb:CreateTable
          - dynamodb:DescribeImport
          - dynamodb:DescribeTable
          - dynamodb:DescribeTimeToLive
          - dynamodb:UpdateTimeToLive
          - dynamodb:UpdateContributorInsights
          - dynamodb:UpdateContinuousBackups
          - dynamodb:DescribeContinuousBackups
          - dynamodb:DescribeContributorInsights
          - dynamodb:EnableKinesisStreamingDestination
          - dynamodb:DisableKinesisStreamingDestination
          - dynamodb:DescribeKinesisStreamingDestination
          - dynamodb:ImportTable
          - dynamodb:ListTagsOfResource
          - dynamodb:TagResource
          - dynamodb:UpdateTable
          - dynamodb:GetResourcePolicy
          - dynamodb:PutResourcePolicy
          - kinesis:DescribeStream
          - kinesis:PutRecords
          - iam:CreateServiceLinkedRole
          - kms:CreateGrant
          - kms:Decrypt
          - kms:DescribeKey
          - kms:ListAliases
          - kms:Encrypt
          - kms:RevokeGrant
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          - logs:PutLogEvents
          - logs:PutRetentionPolicy
          - s3:GetObject
          - s3:GetObjectMetadata
          - s3:ListBucket
        update:
          - dynamodb:UpdateTable
          - dynamodb:DescribeTable
          - dynamodb:DescribeTimeToLive
          - dynamodb:UpdateTimeToLive
          - dynamodb:UpdateContinuousBackups
          - dynamodb:UpdateContributorInsights
          - dynamodb:UpdateKinesisStreamingDestination
          - dynamodb:DescribeContinuousBackups
          - dynamodb:DescribeKinesisStreamingDestination
          - dynamodb:ListTagsOfResource
          - dynamodb:TagResource
          - dynamodb:UntagResource
          - dynamodb:DescribeContributorInsights
          - dynamodb:EnableKinesisStreamingDestination
          - dynamodb:DisableKinesisStreamingDestination
          - dynamodb:GetResourcePolicy
          - dynamodb:PutResourcePolicy
          - dynamodb:DeleteResourcePolicy
          - kinesis:DescribeStream
          - kinesis:PutRecords
          - iam:CreateServiceLinkedRole
          - kms:CreateGrant
          - kms:DescribeKey
          - kms:ListAliases
          - kms:RevokeGrant
        list:
          - dynamodb:ListTables
        delete:
          - dynamodb:DeleteTable
          - dynamodb:DescribeTable
  x-stackQL-resources:
    global_tables:
      name: global_tables
      id: awscc.dynamodb.global_tables
      x-cfn-schema-name: GlobalTable
      x-type: list
      x-identifiers:
        - TableName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TableName') as table_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DynamoDB::GlobalTable'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TableName') as table_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DynamoDB::GlobalTable'
                AND region = 'us-east-1'
    global_table:
      name: global_table
      id: awscc.dynamodb.global_table
      x-cfn-schema-name: GlobalTable
      x-type: get
      x-identifiers:
        - TableName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TableId') as table_id,
              JSON_EXTRACT(Properties, '$.SSESpecification') as sse_specification,
              JSON_EXTRACT(Properties, '$.StreamSpecification') as stream_specification,
              JSON_EXTRACT(Properties, '$.Replicas') as replicas,
              JSON_EXTRACT(Properties, '$.WriteProvisionedThroughputSettings') as write_provisioned_throughput_settings,
              JSON_EXTRACT(Properties, '$.TableName') as table_name,
              JSON_EXTRACT(Properties, '$.AttributeDefinitions') as attribute_definitions,
              JSON_EXTRACT(Properties, '$.BillingMode') as billing_mode,
              JSON_EXTRACT(Properties, '$.GlobalSecondaryIndexes') as global_secondary_indexes,
              JSON_EXTRACT(Properties, '$.KeySchema') as key_schema,
              JSON_EXTRACT(Properties, '$.LocalSecondaryIndexes') as local_secondary_indexes,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.StreamArn') as stream_arn,
              JSON_EXTRACT(Properties, '$.TimeToLiveSpecification') as time_to_live_specification
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DynamoDB::GlobalTable'
              AND data__Identifier = '<TableName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TableId') as table_id,
                json_extract_path_text(Properties, 'SSESpecification') as sse_specification,
                json_extract_path_text(Properties, 'StreamSpecification') as stream_specification,
                json_extract_path_text(Properties, 'Replicas') as replicas,
                json_extract_path_text(Properties, 'WriteProvisionedThroughputSettings') as write_provisioned_throughput_settings,
                json_extract_path_text(Properties, 'TableName') as table_name,
                json_extract_path_text(Properties, 'AttributeDefinitions') as attribute_definitions,
                json_extract_path_text(Properties, 'BillingMode') as billing_mode,
                json_extract_path_text(Properties, 'GlobalSecondaryIndexes') as global_secondary_indexes,
                json_extract_path_text(Properties, 'KeySchema') as key_schema,
                json_extract_path_text(Properties, 'LocalSecondaryIndexes') as local_secondary_indexes,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'StreamArn') as stream_arn,
                json_extract_path_text(Properties, 'TimeToLiveSpecification') as time_to_live_specification
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DynamoDB::GlobalTable'
                AND data__Identifier = '<TableName>'
                AND region = 'us-east-1'
    tables:
      name: tables
      id: awscc.dynamodb.tables
      x-cfn-schema-name: Table
      x-type: list
      x-identifiers:
        - TableName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.TableName') as table_name
              FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DynamoDB::Table'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'TableName') as table_name
                FROM awscc.cloud_control.resources WHERE data__TypeName = 'AWS::DynamoDB::Table'
                AND region = 'us-east-1'
    table:
      name: table
      id: awscc.dynamodb.table
      x-cfn-schema-name: Table
      x-type: get
      x-identifiers:
        - TableName
      config:
        views:
          select:
            predicate: sqlDialect == "sqlite3"
            ddl: |-
              SELECT
              region,
              JSON_EXTRACT(Properties, '$.SSESpecification') as sse_specification,
              JSON_EXTRACT(Properties, '$.KinesisStreamSpecification') as kinesis_stream_specification,
              JSON_EXTRACT(Properties, '$.StreamSpecification') as stream_specification,
              JSON_EXTRACT(Properties, '$.ContributorInsightsSpecification') as contributor_insights_specification,
              JSON_EXTRACT(Properties, '$.ImportSourceSpecification') as import_source_specification,
              JSON_EXTRACT(Properties, '$.PointInTimeRecoverySpecification') as point_in_time_recovery_specification,
              JSON_EXTRACT(Properties, '$.ProvisionedThroughput') as provisioned_throughput,
              JSON_EXTRACT(Properties, '$.TableName') as table_name,
              JSON_EXTRACT(Properties, '$.AttributeDefinitions') as attribute_definitions,
              JSON_EXTRACT(Properties, '$.BillingMode') as billing_mode,
              JSON_EXTRACT(Properties, '$.GlobalSecondaryIndexes') as global_secondary_indexes,
              JSON_EXTRACT(Properties, '$.KeySchema') as key_schema,
              JSON_EXTRACT(Properties, '$.LocalSecondaryIndexes') as local_secondary_indexes,
              JSON_EXTRACT(Properties, '$.Arn') as arn,
              JSON_EXTRACT(Properties, '$.StreamArn') as stream_arn,
              JSON_EXTRACT(Properties, '$.DeletionProtectionEnabled') as deletion_protection_enabled,
              JSON_EXTRACT(Properties, '$.TableClass') as table_class,
              JSON_EXTRACT(Properties, '$.Tags') as tags,
              JSON_EXTRACT(Properties, '$.TimeToLiveSpecification') as time_to_live_specification
              FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DynamoDB::Table'
              AND data__Identifier = '<TableName>'
              AND region = 'us-east-1'
            fallback:
              predicate: sqlDialect == "postgres"
              ddl: |-
                SELECT
                region,
                json_extract_path_text(Properties, 'SSESpecification') as sse_specification,
                json_extract_path_text(Properties, 'KinesisStreamSpecification') as kinesis_stream_specification,
                json_extract_path_text(Properties, 'StreamSpecification') as stream_specification,
                json_extract_path_text(Properties, 'ContributorInsightsSpecification') as contributor_insights_specification,
                json_extract_path_text(Properties, 'ImportSourceSpecification') as import_source_specification,
                json_extract_path_text(Properties, 'PointInTimeRecoverySpecification') as point_in_time_recovery_specification,
                json_extract_path_text(Properties, 'ProvisionedThroughput') as provisioned_throughput,
                json_extract_path_text(Properties, 'TableName') as table_name,
                json_extract_path_text(Properties, 'AttributeDefinitions') as attribute_definitions,
                json_extract_path_text(Properties, 'BillingMode') as billing_mode,
                json_extract_path_text(Properties, 'GlobalSecondaryIndexes') as global_secondary_indexes,
                json_extract_path_text(Properties, 'KeySchema') as key_schema,
                json_extract_path_text(Properties, 'LocalSecondaryIndexes') as local_secondary_indexes,
                json_extract_path_text(Properties, 'Arn') as arn,
                json_extract_path_text(Properties, 'StreamArn') as stream_arn,
                json_extract_path_text(Properties, 'DeletionProtectionEnabled') as deletion_protection_enabled,
                json_extract_path_text(Properties, 'TableClass') as table_class,
                json_extract_path_text(Properties, 'Tags') as tags,
                json_extract_path_text(Properties, 'TimeToLiveSpecification') as time_to_live_specification
                FROM awscc.cloud_control.resource WHERE data__TypeName = 'AWS::DynamoDB::Table'
                AND data__Identifier = '<TableName>'
                AND region = 'us-east-1'
