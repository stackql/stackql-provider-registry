components:
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        enum:
        - '1'
        - '2'
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        enum:
        - json
        - media
        - proto
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you
        with API access, quota, and reports. Required unless you provide an OAuth
        2.0 token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: Available to use for quota purposes for server-side applications.
        Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
  schemas:
    AndroidAppAsset:
      description: Describes an android app asset.
      properties:
        certificate:
          $ref: '#/components/schemas/CertificateInfo'
          description: Because there is no global enforcement of package name uniqueness,
            we also require a signing certificate, which in combination with the package
            name uniquely identifies an app. Some apps' signing keys are rotated,
            so they may be signed by different keys over time. We treat these as distinct
            assets, since we use (package name, cert) as the unique ID. This should
            not normally pose any problems as both versions of the app will make the
            same or similar statements. Other assets making statements about the app
            will have to be updated when a key is rotated, however. (Note that the
            syntaxes for publishing and querying for statements contain syntactic
            sugar to easily let you specify apps that are known by multiple certificates.)
            REQUIRED
        packageName:
          description: Android App assets are naturally identified by their Java package
            name. For example, the Google Maps app uses the package name `com.google.android.apps.maps`.
            REQUIRED
          type: string
      type: object
    Asset:
      description: Uniquely identifies an asset. A digital asset is an identifiable
        and addressable online entity that typically provides some service or content.
        Examples of assets are websites, Android apps, Twitter feeds, and Plus Pages.
      properties:
        androidApp:
          $ref: '#/components/schemas/AndroidAppAsset'
          description: Set if this is an Android App asset.
        web:
          $ref: '#/components/schemas/WebAsset'
          description: Set if this is a web asset.
      type: object
    CertificateInfo:
      description: Describes an X509 certificate.
      properties:
        sha256Fingerprint:
          description: 'The uppercase SHA-265 fingerprint of the certificate. From
            the PEM certificate, it can be acquired like this: $ keytool -printcert
            -file $CERTFILE | grep SHA256: SHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:
            \ 42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5 or like this: $ openssl x509
            -in $CERTFILE -noout -fingerprint -sha256 SHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:
            \ 16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5 In this example, the
            contents of this field would be `14:6D:E9:83:C5:73: 06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:
            44:E5`. If these tools are not available to you, you can convert the PEM
            certificate into the DER format, compute the SHA-256 hash of that string
            and represent the result as a hexstring (that is, uppercase hexadecimal
            representations of each octet, separated by colons).'
          type: string
      type: object
    CheckResponse:
      description: Response message for the CheckAssetLinks call.
      properties:
        debugString:
          description: Human-readable message containing information intended to help
            end users understand, reproduce and debug the result. The message will
            be in English and we are currently not planning to offer any translations.
            Please note that no guarantees are made about the contents or format of
            this string. Any aspect of it may be subject to change without notice.
            You should not attempt to programmatically parse this data. For programmatic
            access, use the error_code field below.
          type: string
        errorCode:
          description: Error codes that describe the result of the Check operation.
          items:
            enum:
            - ERROR_CODE_UNSPECIFIED
            - ERROR_CODE_INVALID_QUERY
            - ERROR_CODE_FETCH_ERROR
            - ERROR_CODE_FAILED_SSL_VALIDATION
            - ERROR_CODE_REDIRECT
            - ERROR_CODE_TOO_LARGE
            - ERROR_CODE_MALFORMED_HTTP_RESPONSE
            - ERROR_CODE_WRONG_CONTENT_TYPE
            - ERROR_CODE_MALFORMED_CONTENT
            - ERROR_CODE_SECURE_ASSET_INCLUDES_INSECURE
            - ERROR_CODE_FETCH_BUDGET_EXHAUSTED
            type: string
          type: array
        linked:
          description: Set to true if the assets specified in the request are linked
            by the relation specified in the request.
          type: boolean
        maxAge:
          description: From serving time, how much longer the response should be considered
            valid barring further updates. REQUIRED
          format: google-duration
          type: string
      type: object
    ListResponse:
      description: Response message for the List call.
      properties:
        debugString:
          description: Human-readable message containing information intended to help
            end users understand, reproduce and debug the result. The message will
            be in English and we are currently not planning to offer any translations.
            Please note that no guarantees are made about the contents or format of
            this string. Any aspect of it may be subject to change without notice.
            You should not attempt to programmatically parse this data. For programmatic
            access, use the error_code field below.
          type: string
        errorCode:
          description: Error codes that describe the result of the List operation.
          items:
            enum:
            - ERROR_CODE_UNSPECIFIED
            - ERROR_CODE_INVALID_QUERY
            - ERROR_CODE_FETCH_ERROR
            - ERROR_CODE_FAILED_SSL_VALIDATION
            - ERROR_CODE_REDIRECT
            - ERROR_CODE_TOO_LARGE
            - ERROR_CODE_MALFORMED_HTTP_RESPONSE
            - ERROR_CODE_WRONG_CONTENT_TYPE
            - ERROR_CODE_MALFORMED_CONTENT
            - ERROR_CODE_SECURE_ASSET_INCLUDES_INSECURE
            - ERROR_CODE_FETCH_BUDGET_EXHAUSTED
            type: string
          type: array
        maxAge:
          description: From serving time, how much longer the response should be considered
            valid barring further updates. REQUIRED
          format: google-duration
          type: string
        statements:
          description: A list of all the matching statements that have been found.
          items:
            $ref: '#/components/schemas/Statement'
          type: array
      type: object
    Statement:
      description: Describes a reliable statement that has been made about the relationship
        between a source asset and a target asset. Statements are always made by the
        source asset, either directly or by delegating to a statement list that is
        stored elsewhere. For more detailed definitions of statements and assets,
        please refer to our [API documentation landing page](/digital-asset-links/v1/getting-started).
      properties:
        relation:
          description: 'The relation identifies the use of the statement as intended
            by the source asset''s owner (that is, the person or entity who issued
            the statement). Every complete statement has a relation. We identify relations
            with strings of the format `/`, where `` must be one of a set of pre-defined
            purpose categories, and `` is a free-form lowercase alphanumeric string
            that describes the specific use case of the statement. Refer to [our API
            documentation](/digital-asset-links/v1/relation-strings) for the current
            list of supported relations. Example: `delegate_permission/common.handle_all_urls`
            REQUIRED'
          type: string
        source:
          $ref: '#/components/schemas/Asset'
          description: Every statement has a source asset. REQUIRED
        target:
          $ref: '#/components/schemas/Asset'
          description: Every statement has a target asset. REQUIRED
      type: object
    WebAsset:
      description: Describes a web asset.
      properties:
        site:
          description: 'Web assets are identified by a URL that contains only the
            scheme, hostname and port parts. The format is http[s]://[:] Hostnames
            must be fully qualified: they must end in a single period ("`.`"). Only
            the schemes "http" and "https" are currently allowed. Port numbers are
            given as a decimal number, and they must be omitted if the standard port
            numbers are used: 80 for http and 443 for https. We call this limited
            URL the "site". All URLs that share the same scheme, hostname and port
            are considered to be a part of the site and thus belong to the web asset.
            Example: the asset with the site `https://www.google.com` contains all
            these URLs: * `https://www.google.com/` * `https://www.google.com:443/`
            * `https://www.google.com/foo` * `https://www.google.com/foo?bar` * `https://www.google.com/foo#bar`
            * `https://user@password:www.google.com/` But it does not contain these
            URLs: * `http://www.google.com/` (wrong scheme) * `https://google.com/`
            (hostname does not match) * `https://www.google.com:444/` (port does not
            match) REQUIRED'
          type: string
      type: object
  x-stackQL-resources:
    assetlinks:
      id: google.digitalassetlinks.assetlinks
      methods:
        check:
          operation:
            $ref: '#/paths/~1v1~1assetlinks:check/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      name: assetlinks
      title: assetlinks
    statements:
      id: google.digitalassetlinks.statements
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1statements:list/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      name: statements
      title: statements
externalDocs:
  url: https://developers.google.com/digital-asset-links/
info:
  contact:
    name: Google
    url: https://google.com
    x-twitter: youtube
  description: Discovers relationships between online assets such as websites or mobile
    apps.
  license:
    name: Creative Commons Attribution 3.0
    url: http://creativecommons.org/licenses/by/3.0/
  termsOfService: https://developers.google.com/terms/
  title: Digital Asset Links API
  version: v1
  x-apiClientRegistration:
    url: https://console.developers.google.com
  x-apisguru-categories:
  - analytics
  - media
  x-logo:
    url: https://api.apis.guru/v2/cache/logo/https_www.google.com_images_branding_googlelogo_2x_googlelogo_color_272x92dp.png
  x-origin:
  - converter:
      url: https://github.com/mermade/oas-kit
      version: 7.0.4
    format: google
    url: https://digitalassetlinks.googleapis.com/$discovery/rest?version=v1
    version: v1
  x-providerName: googleapis.com
  x-serviceName: digitalassetlinks
openapi: 3.0.0
paths:
  /v1/assetlinks:check:
    get:
      description: 'Determines whether the specified (directional) relationship exists
        between the specified source and target assets. The relation describes the
        intent of the link between the two assets as claimed by the source asset.
        An example for such relationships is the delegation of privileges or permissions.
        This command is most often used by infrastructure systems to check preconditions
        for an action. For example, a client may want to know if it is OK to send
        a web URL to a particular mobile app instead. The client can check for the
        relevant asset link from the website to the mobile app to decide if the operation
        should be allowed. A note about security: if you specify a secure asset as
        the source, such as an HTTPS website or an Android app, the API will ensure
        that any statements used to generate the response have been made in a secure
        way by the owner of that asset. Conversely, if the source asset is an insecure
        HTTP website (that is, the URL starts with `http://` instead of `https://`),
        the API cannot verify its statements securely, and it is not possible to ensure
        that the website''s statements have not been altered by a third party. For
        more information, see the [Digital Asset Links technical design specification](https://github.com/google/digitalassetlinks/blob/master/well-known/details.md).'
      operationId: digitalassetlinks.assetlinks.check
      parameters:
      - description: 'Query string for the relation. We identify relations with strings
          of the format `/`, where `` must be one of a set of pre-defined purpose
          categories, and `` is a free-form lowercase alphanumeric string that describes
          the specific use case of the statement. Refer to [our API documentation](/digital-asset-links/v1/relation-strings)
          for the current list of supported relations. For a query to match an asset
          link, both the query''s and the asset link''s relation strings must match
          exactly. Example: A query with relation `delegate_permission/common.handle_all_urls`
          matches an asset link with relation `delegate_permission/common.handle_all_urls`.'
        in: query
        name: relation
        schema:
          type: string
      - description: 'The uppercase SHA-265 fingerprint of the certificate. From the
          PEM certificate, it can be acquired like this: $ keytool -printcert -file
          $CERTFILE | grep SHA256: SHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:
          \ 42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5 or like this: $ openssl x509 -in
          $CERTFILE -noout -fingerprint -sha256 SHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:
          \ 16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5 In this example, the contents
          of this field would be `14:6D:E9:83:C5:73: 06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:
          44:E5`. If these tools are not available to you, you can convert the PEM
          certificate into the DER format, compute the SHA-256 hash of that string
          and represent the result as a hexstring (that is, uppercase hexadecimal
          representations of each octet, separated by colons).'
        in: query
        name: source.androidApp.certificate.sha256Fingerprint
        schema:
          type: string
      - description: Android App assets are naturally identified by their Java package
          name. For example, the Google Maps app uses the package name `com.google.android.apps.maps`.
          REQUIRED
        in: query
        name: source.androidApp.packageName
        schema:
          type: string
      - description: 'Web assets are identified by a URL that contains only the scheme,
          hostname and port parts. The format is http[s]://[:] Hostnames must be fully
          qualified: they must end in a single period ("`.`"). Only the schemes "http"
          and "https" are currently allowed. Port numbers are given as a decimal number,
          and they must be omitted if the standard port numbers are used: 80 for http
          and 443 for https. We call this limited URL the "site". All URLs that share
          the same scheme, hostname and port are considered to be a part of the site
          and thus belong to the web asset. Example: the asset with the site `https://www.google.com`
          contains all these URLs: * `https://www.google.com/` * `https://www.google.com:443/`
          * `https://www.google.com/foo` * `https://www.google.com/foo?bar` * `https://www.google.com/foo#bar`
          * `https://user@password:www.google.com/` But it does not contain these
          URLs: * `http://www.google.com/` (wrong scheme) * `https://google.com/`
          (hostname does not match) * `https://www.google.com:444/` (port does not
          match) REQUIRED'
        in: query
        name: source.web.site
        schema:
          type: string
      - description: 'The uppercase SHA-265 fingerprint of the certificate. From the
          PEM certificate, it can be acquired like this: $ keytool -printcert -file
          $CERTFILE | grep SHA256: SHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:
          \ 42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5 or like this: $ openssl x509 -in
          $CERTFILE -noout -fingerprint -sha256 SHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:
          \ 16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5 In this example, the contents
          of this field would be `14:6D:E9:83:C5:73: 06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:
          44:E5`. If these tools are not available to you, you can convert the PEM
          certificate into the DER format, compute the SHA-256 hash of that string
          and represent the result as a hexstring (that is, uppercase hexadecimal
          representations of each octet, separated by colons).'
        in: query
        name: target.androidApp.certificate.sha256Fingerprint
        schema:
          type: string
      - description: Android App assets are naturally identified by their Java package
          name. For example, the Google Maps app uses the package name `com.google.android.apps.maps`.
          REQUIRED
        in: query
        name: target.androidApp.packageName
        schema:
          type: string
      - description: 'Web assets are identified by a URL that contains only the scheme,
          hostname and port parts. The format is http[s]://[:] Hostnames must be fully
          qualified: they must end in a single period ("`.`"). Only the schemes "http"
          and "https" are currently allowed. Port numbers are given as a decimal number,
          and they must be omitted if the standard port numbers are used: 80 for http
          and 443 for https. We call this limited URL the "site". All URLs that share
          the same scheme, hostname and port are considered to be a part of the site
          and thus belong to the web asset. Example: the asset with the site `https://www.google.com`
          contains all these URLs: * `https://www.google.com/` * `https://www.google.com:443/`
          * `https://www.google.com/foo` * `https://www.google.com/foo?bar` * `https://www.google.com/foo#bar`
          * `https://user@password:www.google.com/` But it does not contain these
          URLs: * `http://www.google.com/` (wrong scheme) * `https://google.com/`
          (hostname does not match) * `https://www.google.com:444/` (port does not
          match) REQUIRED'
        in: query
        name: target.web.site
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckResponse'
          description: Successful response
      tags:
      - assetlinks
    parameters:
    - $ref: '#/components/parameters/_.xgafv'
    - $ref: '#/components/parameters/access_token'
    - $ref: '#/components/parameters/alt'
    - $ref: '#/components/parameters/callback'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/key'
    - $ref: '#/components/parameters/oauth_token'
    - $ref: '#/components/parameters/prettyPrint'
    - $ref: '#/components/parameters/quotaUser'
    - $ref: '#/components/parameters/upload_protocol'
    - $ref: '#/components/parameters/uploadType'
  /v1/statements:list:
    get:
      description: 'Retrieves a list of all statements from a given source that match
        the specified target and statement string. The API guarantees that all statements
        with secure source assets, such as HTTPS websites or Android apps, have been
        made in a secure way by the owner of those assets, as described in the [Digital
        Asset Links technical design specification](https://github.com/google/digitalassetlinks/blob/master/well-known/details.md).
        Specifically, you should consider that for insecure websites (that is, where
        the URL starts with `http://` instead of `https://`), this guarantee cannot
        be made. The `List` command is most useful in cases where the API client wants
        to know all the ways in which two assets are related, or enumerate all the
        relationships from a particular source asset. Example: a feature that helps
        users navigate to related items. When a mobile app is running on a device,
        the feature would make it easy to navigate to the corresponding web site or
        Google+ profile.'
      operationId: digitalassetlinks.statements.list
      parameters:
      - description: 'Use only associations that match the specified relation. See
          the [`Statement`](#Statement) message for a detailed definition of relation
          strings. For a query to match a statement, one of the following must be
          true: * both the query''s and the statement''s relation strings match exactly,
          or * the query''s relation string is empty or missing. Example: A query
          with relation `delegate_permission/common.handle_all_urls` matches an asset
          link with relation `delegate_permission/common.handle_all_urls`.'
        in: query
        name: relation
        schema:
          type: string
      - description: 'The uppercase SHA-265 fingerprint of the certificate. From the
          PEM certificate, it can be acquired like this: $ keytool -printcert -file
          $CERTFILE | grep SHA256: SHA256: 14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:
          \ 42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5 or like this: $ openssl x509 -in
          $CERTFILE -noout -fingerprint -sha256 SHA256 Fingerprint=14:6D:E9:83:C5:73:06:50:D8:EE:B9:95:2F:34:FC:64:
          \ 16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:44:E5 In this example, the contents
          of this field would be `14:6D:E9:83:C5:73: 06:50:D8:EE:B9:95:2F:34:FC:64:16:A0:83:42:E6:1D:BE:A8:8A:04:96:B2:3F:CF:
          44:E5`. If these tools are not available to you, you can convert the PEM
          certificate into the DER format, compute the SHA-256 hash of that string
          and represent the result as a hexstring (that is, uppercase hexadecimal
          representations of each octet, separated by colons).'
        in: query
        name: source.androidApp.certificate.sha256Fingerprint
        schema:
          type: string
      - description: Android App assets are naturally identified by their Java package
          name. For example, the Google Maps app uses the package name `com.google.android.apps.maps`.
          REQUIRED
        in: query
        name: source.androidApp.packageName
        schema:
          type: string
      - description: 'Web assets are identified by a URL that contains only the scheme,
          hostname and port parts. The format is http[s]://[:] Hostnames must be fully
          qualified: they must end in a single period ("`.`"). Only the schemes "http"
          and "https" are currently allowed. Port numbers are given as a decimal number,
          and they must be omitted if the standard port numbers are used: 80 for http
          and 443 for https. We call this limited URL the "site". All URLs that share
          the same scheme, hostname and port are considered to be a part of the site
          and thus belong to the web asset. Example: the asset with the site `https://www.google.com`
          contains all these URLs: * `https://www.google.com/` * `https://www.google.com:443/`
          * `https://www.google.com/foo` * `https://www.google.com/foo?bar` * `https://www.google.com/foo#bar`
          * `https://user@password:www.google.com/` But it does not contain these
          URLs: * `http://www.google.com/` (wrong scheme) * `https://google.com/`
          (hostname does not match) * `https://www.google.com:444/` (port does not
          match) REQUIRED'
        in: query
        name: source.web.site
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'
          description: Successful response
      tags:
      - statements
    parameters:
    - $ref: '#/components/parameters/_.xgafv'
    - $ref: '#/components/parameters/access_token'
    - $ref: '#/components/parameters/alt'
    - $ref: '#/components/parameters/callback'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/key'
    - $ref: '#/components/parameters/oauth_token'
    - $ref: '#/components/parameters/prettyPrint'
    - $ref: '#/components/parameters/quotaUser'
    - $ref: '#/components/parameters/upload_protocol'
    - $ref: '#/components/parameters/uploadType'
servers:
- url: https://digitalassetlinks.googleapis.com/
tags:
- name: assetlinks
- name: statements
