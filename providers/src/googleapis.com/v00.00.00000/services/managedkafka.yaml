openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Managed Service for Apache Kafka API
  description: 'Manage Apache Kafka clusters and resources. '
  version: v1
  x-discovery-doc-revision: '20250814'
  x-generated-date: '2025-08-28'
externalDocs:
  url: https://cloud.google.com/managed-service-for-apache-kafka/docs
servers:
  - url: https://managedkafka.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    ListOperationsResponse:
      id: ListOperationsResponse
      description: The response message for Operations.ListOperations.
      type: object
      properties:
        operations:
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Operation:
      id: Operation
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      type: object
      properties:
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
          type: string
        metadata:
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
          type: boolean
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
        response:
          description: >-
            The normal, successful response of the operation. If the original
            method returns no data on success, such as `Delete`, the response is
            `google.protobuf.Empty`. If the original method is standard
            `Get`/`Create`/`Update`, the response should be the resource. For
            other methods, the response should have the type `XxxResponse`,
            where `Xxx` is the original method name. For example, if the
            original method name is `TakeSnapshot()`, the inferred response type
            is `TakeSnapshotResponse`.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    Status:
      id: Status
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      type: object
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    CancelOperationRequest:
      id: CancelOperationRequest
      description: The request message for Operations.CancelOperation.
      type: object
      properties: {}
    ListClustersResponse:
      id: ListClustersResponse
      description: Response for ListClusters.
      type: object
      properties:
        clusters:
          description: The list of Clusters in the requested parent.
          type: array
          items:
            $ref: '#/components/schemas/Cluster'
        nextPageToken:
          description: >-
            A token that can be sent as `page_token` to retrieve the next page
            of results. If this field is omitted, there are no more results.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    Cluster:
      id: Cluster
      description: An Apache Kafka cluster deployed in a location.
      type: object
      properties:
        gcpConfig:
          description: >-
            Required. Configuration properties for a Kafka cluster deployed to
            Google Cloud Platform.
          $ref: '#/components/schemas/GcpConfig'
        name:
          description: >-
            Identifier. The name of the cluster. Structured like:
            projects/{project_number}/locations/{location}/clusters/{cluster_id}
          type: string
        createTime:
          description: Output only. The time when the cluster was created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The time when the cluster was last updated.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: Optional. Labels as key value pairs.
          type: object
          additionalProperties:
            type: string
        capacityConfig:
          description: Required. Capacity configuration for the Kafka cluster.
          $ref: '#/components/schemas/CapacityConfig'
        rebalanceConfig:
          description: Optional. Rebalance configuration for the Kafka cluster.
          $ref: '#/components/schemas/RebalanceConfig'
        state:
          description: Output only. The current state of the cluster.
          readOnly: true
          type: string
          enumDescriptions:
            - A state was not specified.
            - The cluster is being created.
            - The cluster is active.
            - The cluster is being deleted.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - ACTIVE
            - DELETING
        satisfiesPzi:
          description: Output only. Reserved for future use.
          readOnly: true
          type: boolean
        satisfiesPzs:
          description: Output only. Reserved for future use.
          readOnly: true
          type: boolean
        tlsConfig:
          description: Optional. TLS configuration for the Kafka cluster.
          $ref: '#/components/schemas/TlsConfig'
    GcpConfig:
      id: GcpConfig
      description: >-
        Configuration properties for a Kafka cluster deployed to Google Cloud
        Platform.
      type: object
      properties:
        accessConfig:
          description: Required. Access configuration for the Kafka cluster.
          $ref: '#/components/schemas/AccessConfig'
        kmsKey:
          description: >-
            Optional. Immutable. The Cloud KMS Key name to use for encryption.
            The key must be located in the same region as the cluster and cannot
            be changed. Structured like:
            projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
          type: string
    AccessConfig:
      id: AccessConfig
      description: The configuration of access to the Kafka cluster.
      type: object
      properties:
        networkConfigs:
          description: >-
            Required. Virtual Private Cloud (VPC) networks that must be granted
            direct access to the Kafka cluster. Minimum of 1 network is
            required. Maximum 10 networks can be specified.
          type: array
          items:
            $ref: '#/components/schemas/NetworkConfig'
    NetworkConfig:
      id: NetworkConfig
      description: >-
        The configuration of a Virtual Private Cloud (VPC) network that can
        access the Kafka cluster.
      type: object
      properties:
        subnet:
          description: >-
            Required. Name of the VPC subnet in which to create Private Service
            Connect (PSC) endpoints for the Kafka brokers and bootstrap address.
            Structured like:
            projects/{project}/regions/{region}/subnetworks/{subnet_id} The
            subnet must be located in the same region as the Kafka cluster. The
            project may differ. Multiple subnets from the same parent network
            must not be specified.
          type: string
    CapacityConfig:
      id: CapacityConfig
      description: A capacity configuration of a Kafka cluster.
      type: object
      properties:
        vcpuCount:
          description: >-
            Required. The number of vCPUs to provision for the cluster. Minimum:
            3.
          type: string
          format: int64
        memoryBytes:
          description: >-
            Required. The memory to provision for the cluster in bytes. The
            CPU:memory ratio (vCPU:GiB) must be between 1:1 and 1:8. Minimum:
            3221225472 (3 GiB).
          type: string
          format: int64
    RebalanceConfig:
      id: RebalanceConfig
      description: Defines rebalancing behavior of a Kafka cluster.
      type: object
      properties:
        mode:
          description: >-
            Optional. The rebalance behavior for the cluster. When not
            specified, defaults to `NO_REBALANCE`.
          type: string
          enumDescriptions:
            - A mode was not specified. Do not use.
            - Do not rebalance automatically.
            - >-
              Automatically rebalance topic partitions among brokers when the
              cluster is scaled up.
          enum:
            - MODE_UNSPECIFIED
            - NO_REBALANCE
            - AUTO_REBALANCE_ON_SCALE_UP
    TlsConfig:
      id: TlsConfig
      description: The TLS configuration for the Kafka cluster.
      type: object
      properties:
        trustConfig:
          description: >-
            Optional. The configuration of the broker truststore. If specified,
            clients can use mTLS for authentication.
          $ref: '#/components/schemas/TrustConfig'
        sslPrincipalMappingRules:
          description: >-
            Optional. A list of rules for mapping from SSL principal names to
            short names. These are applied in order by Kafka. Refer to the
            Apache Kafka documentation for `ssl.principal.mapping.rules` for the
            precise formatting details and syntax. Example:
            "RULE:^CN=(.*?),OU=ServiceUsers.*$/$1@example.com/,DEFAULT" This is
            a static Kafka broker configuration. Setting or modifying this field
            will trigger a rolling restart of the Kafka brokers to apply the
            change. An empty string means no rules are applied (Kafka default).
          type: string
    TrustConfig:
      id: TrustConfig
      description: Sources of CA certificates to install in the broker's truststore.
      type: object
      properties:
        casConfigs:
          description: >-
            Optional. Configuration for the Google Certificate Authority
            Service. Maximum 10.
          type: array
          items:
            $ref: '#/components/schemas/CertificateAuthorityServiceConfig'
    CertificateAuthorityServiceConfig:
      id: CertificateAuthorityServiceConfig
      description: A configuration for the Google Certificate Authority Service.
      type: object
      properties:
        caPool:
          description: >-
            Required. The name of the CA pool to pull CA certificates from.
            Structured like:
            projects/{project}/locations/{location}/caPools/{ca_pool}. The CA
            pool does not need to be in the same project or location as the
            Kafka cluster.
          type: string
    ListTopicsResponse:
      id: ListTopicsResponse
      description: Response for ListTopics.
      type: object
      properties:
        topics:
          description: >-
            The list of topics in the requested parent. The order of the topics
            is unspecified.
          type: array
          items:
            $ref: '#/components/schemas/Topic'
        nextPageToken:
          description: >-
            A token that can be sent as `page_token` to retrieve the next page
            of results. If this field is omitted, there are no more results.
          type: string
    Topic:
      id: Topic
      description: A Kafka topic in a given cluster.
      type: object
      properties:
        name:
          description: >-
            Identifier. The name of the topic. The `topic` segment is used when
            connecting directly to the cluster. Structured like:
            projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}
          type: string
        partitionCount:
          description: >-
            Required. The number of partitions this topic has. The partition
            count can only be increased, not decreased. Please note that if
            partitions are increased for a topic that has a key, the
            partitioning logic or the ordering of the messages will be affected.
          type: integer
          format: int32
        replicationFactor:
          description: >-
            Required. Immutable. The number of replicas of each partition. A
            replication factor of 3 is recommended for high availability.
          type: integer
          format: int32
        configs:
          description: >-
            Optional. Configurations for the topic that are overridden from the
            cluster defaults. The key of the map is a Kafka topic property name,
            for example: `cleanup.policy`, `compression.type`.
          type: object
          additionalProperties:
            type: string
    ListConsumerGroupsResponse:
      id: ListConsumerGroupsResponse
      description: Response for ListConsumerGroups.
      type: object
      properties:
        consumerGroups:
          description: >-
            The list of consumer group in the requested parent. The order of the
            consumer groups is unspecified.
          type: array
          items:
            $ref: '#/components/schemas/ConsumerGroup'
        nextPageToken:
          description: >-
            A token that can be sent as `page_token` to retrieve the next page
            of results. If this field is omitted, there are no more results.
          type: string
    ConsumerGroup:
      id: ConsumerGroup
      description: A Kafka consumer group in a given cluster.
      type: object
      properties:
        name:
          description: >-
            Identifier. The name of the consumer group. The `consumer_group`
            segment is used when connecting directly to the cluster. Structured
            like:
            projects/{project}/locations/{location}/clusters/{cluster}/consumerGroups/{consumer_group}
          type: string
        topics:
          description: >-
            Optional. Metadata for this consumer group for all topics it has
            metadata for. The key of the map is a topic name, structured like:
            projects/{project}/locations/{location}/clusters/{cluster}/topics/{topic}
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ConsumerTopicMetadata'
    ConsumerTopicMetadata:
      id: ConsumerTopicMetadata
      description: Metadata for a consumer group corresponding to a specific topic.
      type: object
      properties:
        partitions:
          description: >-
            Optional. Metadata for this consumer group and topic for all
            partition indexes it has metadata for.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ConsumerPartitionMetadata'
    ConsumerPartitionMetadata:
      id: ConsumerPartitionMetadata
      description: Metadata for a consumer group corresponding to a specific partition.
      type: object
      properties:
        offset:
          description: >-
            Required. The current offset for this partition, or 0 if no offset
            has been committed.
          type: string
          format: int64
        metadata:
          description: >-
            Optional. The associated metadata for this partition, or empty if it
            does not exist.
          type: string
    ListAclsResponse:
      id: ListAclsResponse
      description: Response for ListAcls.
      type: object
      properties:
        acls:
          description: >-
            The list of acls in the requested parent. The order of the acls is
            unspecified.
          type: array
          items:
            $ref: '#/components/schemas/Acl'
        nextPageToken:
          description: >-
            A token that can be sent as `page_token` to retrieve the next page
            of results. If this field is omitted, there are no more results.
          type: string
    Acl:
      id: Acl
      description: >-
        Represents the set of ACLs for a given Kafka Resource Pattern, which
        consists of resource_type, resource_name and pattern_type.
      type: object
      properties:
        name:
          description: >-
            Identifier. The name for the acl. Represents a single Resource
            Pattern. Structured like:
            projects/{project}/locations/{location}/clusters/{cluster}/acls/{acl_id}
            The structure of `acl_id` defines the Resource Pattern
            (resource_type, resource_name, pattern_type) of the acl. `acl_id` is
            structured like one of the following: For acls on the cluster:
            `cluster` For acls on a single resource within the cluster:
            `topic/{resource_name}` `consumerGroup/{resource_name}`
            `transactionalId/{resource_name}` For acls on all resources that
            match a prefix: `topicPrefixed/{resource_name}`
            `consumerGroupPrefixed/{resource_name}`
            `transactionalIdPrefixed/{resource_name}` For acls on all resources
            of a given type (i.e. the wildcard literal "*"): `allTopics`
            (represents `topic/*`) `allConsumerGroups` (represents
            `consumerGroup/*`) `allTransactionalIds` (represents
            `transactionalId/*`)
          type: string
        aclEntries:
          description: >-
            Required. The ACL entries that apply to the resource pattern. The
            maximum number of allowed entries 100.
          type: array
          items:
            $ref: '#/components/schemas/AclEntry'
        etag:
          description: >-
            Optional. `etag` is used for concurrency control. An `etag` is
            returned in the response to `GetAcl` and `CreateAcl`. Callers are
            required to put that etag in the request to `UpdateAcl` to ensure
            that their change will be applied to the same version of the acl
            that exists in the Kafka Cluster. A terminal 'T' character in the
            etag indicates that the AclEntries were truncated; more entries for
            the Acl exist on the Kafka Cluster, but can't be returned in the Acl
            due to repeated field limits.
          type: string
        resourceType:
          description: >-
            Output only. The ACL resource type derived from the name. One of:
            CLUSTER, TOPIC, GROUP, TRANSACTIONAL_ID.
          readOnly: true
          type: string
        resourceName:
          description: >-
            Output only. The ACL resource name derived from the name. For
            cluster resource_type, this is always "kafka-cluster". Can be the
            wildcard literal "*".
          readOnly: true
          type: string
        patternType:
          description: >-
            Output only. The ACL pattern type derived from the name. One of:
            LITERAL, PREFIXED.
          readOnly: true
          type: string
    AclEntry:
      id: AclEntry
      description: Represents the access granted for a given Resource Pattern in an ACL.
      type: object
      properties:
        principal:
          description: >-
            Required. The principal. Specified as Google Cloud account, with the
            Kafka StandardAuthorizer prefix "User:". For example:
            "User:test-kafka-client@test-project.iam.gserviceaccount.com". Can
            be the wildcard "User:*" to refer to all users.
          type: string
        permissionType:
          description: >-
            Required. The permission type. Accepted values are (case
            insensitive): ALLOW, DENY.
          type: string
        operation:
          description: >-
            Required. The operation type. Allowed values are (case insensitive):
            ALL, READ, WRITE, CREATE, DELETE, ALTER, DESCRIBE, CLUSTER_ACTION,
            DESCRIBE_CONFIGS, ALTER_CONFIGS, and IDEMPOTENT_WRITE. See
            https://kafka.apache.org/documentation/#operations_resources_and_protocols
            for valid combinations of resource_type and operation for different
            Kafka API requests.
          type: string
        host:
          description: >-
            Required. The host. Must be set to "*" for Managed Service for
            Apache Kafka.
          type: string
    AddAclEntryResponse:
      id: AddAclEntryResponse
      description: Response for AddAclEntry.
      type: object
      properties:
        acl:
          description: The updated acl.
          $ref: '#/components/schemas/Acl'
        aclCreated:
          description: Whether the acl was created as a result of adding the acl entry.
          type: boolean
    RemoveAclEntryResponse:
      id: RemoveAclEntryResponse
      description: Response for RemoveAclEntry.
      type: object
      properties:
        acl:
          description: >-
            The updated acl. Returned if the removed acl entry was not the last
            entry in the acl.
          $ref: '#/components/schemas/Acl'
        aclDeleted:
          description: >-
            Returned with value true if the removed acl entry was the last entry
            in the acl, resulting in acl deletion.
          type: boolean
    ListConnectClustersResponse:
      id: ListConnectClustersResponse
      description: Response for ListConnectClusters.
      type: object
      properties:
        connectClusters:
          description: The list of Connect clusters in the requested parent.
          type: array
          items:
            $ref: '#/components/schemas/ConnectCluster'
        nextPageToken:
          description: >-
            A token that can be sent as `page_token` to retrieve the next page
            of results. If this field is omitted, there are no more results.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    ConnectCluster:
      id: ConnectCluster
      description: An Apache Kafka Connect cluster deployed in a location.
      type: object
      properties:
        gcpConfig:
          description: >-
            Required. Configuration properties for a Kafka Connect cluster
            deployed to Google Cloud Platform.
          $ref: '#/components/schemas/ConnectGcpConfig'
        name:
          description: >-
            Identifier. The name of the Kafka Connect cluster. Structured like:
            projects/{project_number}/locations/{location}/connectClusters/{connect_cluster_id}
          type: string
        kafkaCluster:
          description: >-
            Required. Immutable. The name of the Kafka cluster this Kafka
            Connect cluster is attached to. Structured like:
            projects/{project}/locations/{location}/clusters/{cluster}
          type: string
        createTime:
          description: Output only. The time when the cluster was created.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The time when the cluster was last updated.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: Optional. Labels as key value pairs.
          type: object
          additionalProperties:
            type: string
        capacityConfig:
          description: Required. Capacity configuration for the Kafka Connect cluster.
          $ref: '#/components/schemas/CapacityConfig'
        state:
          description: Output only. The current state of the cluster.
          readOnly: true
          type: string
          enumDescriptions:
            - A state was not specified.
            - The cluster is being created.
            - The cluster is active.
            - The cluster is being deleted.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - ACTIVE
            - DELETING
        config:
          description: >-
            Optional. Configurations for the worker that are overridden from the
            defaults. The key of the map is a Kafka Connect worker property
            name, for example: `exactly.once.source.support`.
          type: object
          additionalProperties:
            type: string
        satisfiesPzi:
          description: Output only. Reserved for future use.
          readOnly: true
          type: boolean
        satisfiesPzs:
          description: Output only. Reserved for future use.
          readOnly: true
          type: boolean
    ConnectGcpConfig:
      id: ConnectGcpConfig
      description: >-
        Configuration properties for a Kafka Connect cluster deployed to Google
        Cloud Platform.
      type: object
      properties:
        accessConfig:
          description: Required. Access configuration for the Kafka Connect cluster.
          $ref: '#/components/schemas/ConnectAccessConfig'
        secretPaths:
          description: >-
            Optional. Secrets to load into workers. Exact SecretVersions from
            Secret Manager must be provided -- aliases are not supported. Up to
            32 secrets may be loaded into one cluster. Format:
            projects//secrets//versions/
          type: array
          items:
            type: string
    ConnectAccessConfig:
      id: ConnectAccessConfig
      description: The configuration of access to the Kafka Connect cluster.
      type: object
      properties:
        networkConfigs:
          description: >-
            Required. Virtual Private Cloud (VPC) networks that must be granted
            direct access to the Kafka Connect cluster. Minimum of 1 network is
            required. Maximum 10 networks can be specified.
          type: array
          items:
            $ref: '#/components/schemas/ConnectNetworkConfig'
    ConnectNetworkConfig:
      id: ConnectNetworkConfig
      description: >-
        The configuration of a Virtual Private Cloud (VPC) network that can
        access the Kafka Connect cluster.
      type: object
      properties:
        primarySubnet:
          description: >-
            Required. VPC subnet to make available to the Kafka Connect cluster.
            Structured like:
            projects/{project}/regions/{region}/subnetworks/{subnet_id} It is
            used to create a Private Service Connect (PSC) interface for the
            Kafka Connect workers. It must be located in the same region as the
            Kafka Connect cluster. The CIDR range of the subnet must be within
            the IPv4 address ranges for private networks, as specified in RFC
            1918. The primary subnet CIDR range must have a minimum size of /22
            (1024 addresses).
          type: string
        additionalSubnets:
          description: >-
            Optional. Additional subnets may be specified. They may be in
            another region, but must be in the same VPC network. The Connect
            workers can communicate with network endpoints in either the primary
            or additional subnets.
          type: array
          items:
            type: string
        dnsDomainNames:
          description: >-
            Optional. Additional DNS domain names from the subnet's network to
            be made visible to the Connect Cluster. When using MirrorMaker2,
            it's necessary to add the bootstrap address's dns domain name of the
            target cluster to make it visible to the connector. For example:
            my-kafka-cluster.us-central1.managedkafka.my-project.cloud.goog
          type: array
          items:
            type: string
    ListConnectorsResponse:
      id: ListConnectorsResponse
      description: Response for ListConnectors.
      type: object
      properties:
        connectors:
          description: The list of connectors in the requested parent.
          type: array
          items:
            $ref: '#/components/schemas/Connector'
        nextPageToken:
          description: >-
            A token that can be sent as `page_token` to retrieve the next page
            of results. If this field is omitted, there are no more results.
          type: string
    Connector:
      id: Connector
      description: A Kafka Connect connector in a given ConnectCluster.
      type: object
      properties:
        taskRestartPolicy:
          description: Optional. Restarts the individual tasks of a Connector.
          $ref: '#/components/schemas/TaskRetryPolicy'
        name:
          description: >-
            Identifier. The name of the connector. Structured like:
            projects/{project}/locations/{location}/connectClusters/{connect_cluster}/connectors/{connector}
          type: string
        configs:
          description: >-
            Optional. Connector config as keys/values. The keys of the map are
            connector property names, for example: `connector.class`,
            `tasks.max`, `key.converter`.
          type: object
          additionalProperties:
            type: string
        state:
          description: Output only. The current state of the connector.
          readOnly: true
          type: string
          enumDescriptions:
            - A state was not specified.
            - The connector is not assigned to any tasks, usually transient.
            - The connector is running.
            - The connector has been paused.
            - The connector has failed. See logs for why.
            - The connector is restarting.
            - The connector has been stopped.
          enum:
            - STATE_UNSPECIFIED
            - UNASSIGNED
            - RUNNING
            - PAUSED
            - FAILED
            - RESTARTING
            - STOPPED
    TaskRetryPolicy:
      id: TaskRetryPolicy
      description: >-
        Task Retry Policy is implemented on a best-effort basis. Retry delay
        will be exponential based on provided minimum and maximum backoffs.
        https://en.wikipedia.org/wiki/Exponential_backoff. Note that the delay
        between consecutive task restarts may not always precisely match the
        configured settings. This can happen when the ConnectCluster is in
        rebalancing state or if the ConnectCluster is unresponsive etc. The
        default values for minimum and maximum backoffs are 60 seconds and 30
        minutes respectively.
      type: object
      properties:
        minimumBackoff:
          description: >-
            Optional. The minimum amount of time to wait before retrying a
            failed task. This sets a lower bound for the backoff delay.
          type: string
          format: google-duration
        maximumBackoff:
          description: >-
            Optional. The maximum amount of time to wait before retrying a
            failed task. This sets an upper bound for the backoff delay.
          type: string
          format: google-duration
    PauseConnectorRequest:
      id: PauseConnectorRequest
      description: Request for PauseConnector.
      type: object
      properties: {}
    PauseConnectorResponse:
      id: PauseConnectorResponse
      description: Response for PauseConnector.
      type: object
      properties: {}
    ResumeConnectorRequest:
      id: ResumeConnectorRequest
      description: Request for ResumeConnector.
      type: object
      properties: {}
    ResumeConnectorResponse:
      id: ResumeConnectorResponse
      description: Response for ResumeConnector.
      type: object
      properties: {}
    RestartConnectorRequest:
      id: RestartConnectorRequest
      description: Request for RestartConnector.
      type: object
      properties: {}
    RestartConnectorResponse:
      id: RestartConnectorResponse
      description: Response for RestartConnector.
      type: object
      properties: {}
    StopConnectorRequest:
      id: StopConnectorRequest
      description: Request for StopConnector.
      type: object
      properties: {}
    StopConnectorResponse:
      id: StopConnectorResponse
      description: Response for StopConnector.
      type: object
      properties: {}
    ListLocationsResponse:
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      type: object
      properties:
        locations:
          description: >-
            A list of locations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Location:
      id: Location
      description: A resource that represents a Google Cloud location.
      type: object
      properties:
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            `"projects/example-project/locations/us-east1"`
          type: string
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        labels:
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"}
          type: object
          additionalProperties:
            type: string
        metadata:
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    SchemaRegistry:
      id: SchemaRegistry
      description: SchemaRegistry is a schema registry instance.
      type: object
      properties:
        name:
          description: >-
            Identifier. The name of the schema registry instance. Structured
            like:
            `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}`
            The instance name {schema_registry} can contain the following: * Up
            to 255 characters. * Letters (uppercase or lowercase), numbers, and
            underscores.
          type: string
        contexts:
          description: Output only. The contexts of the schema registry instance.
          readOnly: true
          type: array
          items:
            type: string
    ListSchemaRegistriesResponse:
      id: ListSchemaRegistriesResponse
      description: Request for ListSchemaRegistries.
      type: object
      properties:
        schemaRegistries:
          description: The schema registry instances.
          type: array
          items:
            $ref: '#/components/schemas/SchemaRegistry'
    CreateSchemaRegistryRequest:
      id: CreateSchemaRegistryRequest
      description: Request to create a schema registry instance.
      type: object
      properties:
        schemaRegistryId:
          description: >-
            Required. The schema registry instance ID to use for this schema
            registry. The ID must contain only letters (a-z, A-Z), numbers
            (0-9), and underscores (-). The maximum length is 63 characters. The
            ID must not start with a number.
          type: string
        schemaRegistry:
          description: >-
            Required. The schema registry instance to create. The name field is
            ignored.
          $ref: '#/components/schemas/SchemaRegistry'
    Context:
      id: Context
      description: >-
        Context represents an independent schema grouping in a schema registry
        instance.
      type: object
      properties:
        name:
          description: >-
            Identifier. The name of the context. Structured like:
            `projects/{project}/locations/{location}/schemaRegistries/{schema_registry}/contexts/{context}`
            The context name {context} can contain the following: * Up to 255
            characters. * Allowed characters: letters (uppercase or lowercase),
            numbers, and the following special characters: `.`, `-`, `_`, `+`,
            `%`, and `~`.
          type: string
        subjects:
          description: Optional. The subjects of the context.
          type: array
          items:
            type: string
    HttpBody:
      id: HttpBody
      description: >-
        Message that represents an arbitrary HTTP body. It should only be used
        for payload formats that can't be represented as JSON, such as raw
        binary or an HTML page. This message can be used both in streaming and
        non-streaming API methods in the request as well as the response. It can
        be used as a top-level request field, which is convenient if one wants
        to extract parameters from either the URL or HTTP template into the
        request fields and also want access to the raw HTTP body. Example:
        message GetResourceRequest { // A unique request id. string request_id =
        1; // The raw HTTP body is bound to this field. google.api.HttpBody
        http_body = 2; } service ResourceService { rpc
        GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc
        UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); }
        Example with streaming methods: service CaldavService { rpc
        GetCalendar(stream google.api.HttpBody) returns (stream
        google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody)
        returns (stream google.api.HttpBody); } Use of this type only changes
        how the request and response bodies are handled, all other features will
        continue to work unchanged.
      type: object
      properties:
        contentType:
          description: >-
            The HTTP Content-Type header value specifying the content type of
            the body.
          type: string
        data:
          description: The HTTP request/response body as raw binary.
          type: string
          format: byte
        extensions:
          description: >-
            Application specific response metadata. Must be set in the first
            response for streaming APIs.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    Schema:
      id: Schema
      description: Schema for a Kafka message.
      type: object
      properties:
        schemaType:
          description: Optional. The schema type of the schema.
          type: string
          enumDescriptions:
            - No schema type. The default will be AVRO.
            - Avro schema type.
            - JSON schema type.
            - Protobuf schema type.
          enum:
            - SCHEMA_TYPE_UNSPECIFIED
            - AVRO
            - JSON
            - PROTOBUF
        schema:
          description: The schema payload.
          type: string
        references:
          description: Optional. The schema references used by the schema.
          type: array
          items:
            $ref: '#/components/schemas/SchemaReference'
    SchemaReference:
      id: SchemaReference
      description: SchemaReference is a reference to a schema.
      type: object
      properties:
        name:
          description: Required. The name of the reference.
          type: string
        subject:
          description: Required. The subject of the reference.
          type: string
        version:
          description: Required. The version of the reference.
          type: integer
          format: int32
    LookupVersionRequest:
      id: LookupVersionRequest
      description: Request for LookupVersion.
      type: object
      properties:
        schemaType:
          description: Optional. The schema type of the schema.
          type: string
          enumDescriptions:
            - No schema type. The default will be AVRO.
            - Avro schema type.
            - JSON schema type.
            - Protobuf schema type.
          enum:
            - SCHEMA_TYPE_UNSPECIFIED
            - AVRO
            - JSON
            - PROTOBUF
        schema:
          description: Required. The schema payload
          type: string
        references:
          description: Optional. The schema references used by the schema.
          type: array
          items:
            $ref: '#/components/schemas/SchemaReference'
        normalize:
          description: >-
            Optional. If true, the schema will be normalized before being looked
            up. The default is false.
          type: boolean
        deleted:
          description: >-
            Optional. If true, soft-deleted versions will be included in lookup,
            no matter if the subject is active or soft-deleted. If false,
            soft-deleted versions will be excluded. The default is false.
          type: boolean
    SchemaVersion:
      id: SchemaVersion
      description: Version of a schema.
      type: object
      properties:
        subject:
          description: Required. The subject of the version.
          type: string
        version:
          description: Required. The version ID
          type: integer
          format: int32
        id:
          description: Required. The schema ID.
          type: integer
          format: int32
        schemaType:
          description: Optional. The schema type of the schema.
          type: string
          enumDescriptions:
            - No schema type. The default will be AVRO.
            - Avro schema type.
            - JSON schema type.
            - Protobuf schema type.
          enum:
            - SCHEMA_TYPE_UNSPECIFIED
            - AVRO
            - JSON
            - PROTOBUF
        schema:
          description: Required. The schema payload.
          type: string
        references:
          description: Optional. The schema references used by the schema.
          type: array
          items:
            $ref: '#/components/schemas/SchemaReference'
    CreateVersionRequest:
      id: CreateVersionRequest
      description: Request for CreateVersion.
      type: object
      properties:
        version:
          description: >-
            Optional. The version to create. It is optional. If not specified,
            the version will be created with the max version ID of the subject
            increased by 1. If the version ID is specified, it will be used as
            the new version ID and must not be used by an existing version of
            the subject.
          type: integer
          format: int32
        id:
          description: >-
            Optional. The schema ID of the schema. If not specified, the schema
            ID will be generated by the server. If the schema ID is specified,
            it must not be used by an existing schema that is different from the
            schema to be created.
          type: integer
          format: int32
        schemaType:
          description: >-
            Optional. The type of the schema. It is optional. If not specified,
            the schema type will be AVRO.
          type: string
          enumDescriptions:
            - No schema type. The default will be AVRO.
            - Avro schema type.
            - JSON schema type.
            - Protobuf schema type.
          enum:
            - SCHEMA_TYPE_UNSPECIFIED
            - AVRO
            - JSON
            - PROTOBUF
        schema:
          description: Required. The schema payload
          type: string
        references:
          description: Optional. The schema references used by the schema.
          type: array
          items:
            $ref: '#/components/schemas/SchemaReference'
        normalize:
          description: >-
            Optional. If true, the schema will be normalized before being
            stored. The default is false.
          type: boolean
    CreateVersionResponse:
      id: CreateVersionResponse
      description: Response for CreateVersion.
      type: object
      properties:
        id:
          description: The unique identifier of the schema created.
          type: integer
          format: int32
    CheckCompatibilityRequest:
      id: CheckCompatibilityRequest
      description: Request for CheckCompatibility.
      type: object
      properties:
        schemaType:
          description: Optional. The schema type of the schema.
          type: string
          enumDescriptions:
            - No schema type. The default will be AVRO.
            - Avro schema type.
            - JSON schema type.
            - Protobuf schema type.
          enum:
            - SCHEMA_TYPE_UNSPECIFIED
            - AVRO
            - JSON
            - PROTOBUF
        schema:
          description: Required. The schema payload
          type: string
        references:
          description: Optional. The schema references used by the schema.
          type: array
          items:
            $ref: '#/components/schemas/SchemaReference'
        verbose:
          description: >-
            Optional. If true, the response will contain the compatibility check
            result with reasons for failed checks. The default is false.
          type: boolean
    CheckCompatibilityResponse:
      id: CheckCompatibilityResponse
      description: Response for CheckCompatibility.
      type: object
      properties:
        is_compatible:
          description: >-
            The compatibility check result. If true, the schema is compatible
            with the resource.
          type: boolean
        messages:
          description: Failure reasons if verbose = true.
          type: array
          items:
            type: string
    SchemaConfig:
      id: SchemaConfig
      description: >-
        SchemaConfig represents configuration for a schema registry or a
        specific subject.
      type: object
      properties:
        compatibility:
          description: >-
            Required. The compatibility type of the schema. The default value is
            BACKWARD. If unset in a SchemaSubject-level SchemaConfig, defaults
            to the global value. If unset in a SchemaRegistry-level
            SchemaConfig, reverts to the default value.
          type: string
          enumDescriptions:
            - No compatibility check.
            - Backwards compatible with the most recent version.
            - Backwards compatible with all previous versions.
            - Forwards compatible with the most recent version.
            - Forwards compatible with all previous versions.
            - Backwards and forwards compatible with the most recent version.
            - Backwards and forwards compatible with all previous versions.
          enum:
            - NONE
            - BACKWARD
            - BACKWARD_TRANSITIVE
            - FORWARD
            - FORWARD_TRANSITIVE
            - FULL
            - FULL_TRANSITIVE
        normalize:
          description: >-
            Optional. If true, the schema will be normalized before being stored
            or looked up. The default is false. If unset in a
            SchemaSubject-level SchemaConfig, the global value will be used. If
            unset in a SchemaRegistry-level SchemaConfig, reverts to the default
            value.
          type: boolean
        alias:
          description: >-
            Optional. The subject to which this subject is an alias of. Only
            applicable for subject config.
          type: string
    UpdateSchemaConfigRequest:
      id: UpdateSchemaConfigRequest
      description: >-
        Request for updating schema config. On a SchemaSubject-level
        SchemaConfig, an unset field will be removed from the SchemaConfig.
      type: object
      properties:
        compatibility:
          description: >-
            Required. The compatibility type of the schemas. Cannot be unset for
            a SchemaRegistry-level SchemaConfig. If unset on a
            SchemaSubject-level SchemaConfig, removes the compatibility field
            for the SchemaConfig.
          type: string
          enumDescriptions:
            - No compatibility check.
            - Backwards compatible with the most recent version.
            - Backwards compatible with all previous versions.
            - Forwards compatible with the most recent version.
            - Forwards compatible with all previous versions.
            - Backwards and forwards compatible with the most recent version.
            - Backwards and forwards compatible with all previous versions.
          enum:
            - NONE
            - BACKWARD
            - BACKWARD_TRANSITIVE
            - FORWARD
            - FORWARD_TRANSITIVE
            - FULL
            - FULL_TRANSITIVE
        normalize:
          description: >-
            Optional. If true, the schema will be normalized before being stored
            or looked up. The default is false. Cannot be unset for a
            SchemaRegistry-level SchemaConfig. If unset on a SchemaSubject-level
            SchemaConfig, removes the normalize field for the SchemaConfig.
          type: boolean
    SchemaMode:
      id: SchemaMode
      description: >-
        SchemaMode represents the mode of a schema registry or a specific
        subject. Four modes are supported: * NONE: deprecated. This was the
        default mode for a subject, but now the default is unset (which means
        use the global schema registry setting) * READONLY: The schema registry
        is in read-only mode. * READWRITE: The schema registry is in read-write
        mode, which allows limited write operations on the schema. * IMPORT: The
        schema registry is in import mode, which allows more editing operations
        on the schema for data importing purposes.
      type: object
      properties:
        mode:
          description: >-
            Required. The mode type of a schema registry (READWRITE by default)
            or of a subject (unset by default, which means use the global schema
            registry setting).
          type: string
          enumDescriptions:
            - >-
              The default / unset value. The subject mode is NONE/unset by
              default, which means use the global schema registry mode. This
              should not be used for setting the mode.
            - READONLY mode.
            - READWRITE mode.
            - IMPORT mode.
          enum:
            - NONE
            - READONLY
            - READWRITE
            - IMPORT
    UpdateSchemaModeRequest:
      id: UpdateSchemaModeRequest
      description: Request for updating schema registry or subject mode.
      type: object
      properties:
        mode:
          description: Required. The mode type.
          type: string
          enumDescriptions:
            - >-
              The default / unset value. The subject mode is NONE/unset by
              default, which means use the global schema registry mode. This
              should not be used for setting the mode.
            - READONLY mode.
            - READWRITE mode.
            - IMPORT mode.
          enum:
            - NONE
            - READONLY
            - READWRITE
            - IMPORT
    OperationMetadata:
      id: OperationMetadata
      description: Represents the metadata of the long-running operation.
      type: object
      properties:
        createTime:
          description: Output only. The time the operation was created.
          readOnly: true
          type: string
          format: google-datetime
        endTime:
          description: Output only. The time the operation finished running.
          readOnly: true
          type: string
          format: google-datetime
        target:
          description: >-
            Output only. Server-defined resource path for the target of the
            operation.
          readOnly: true
          type: string
        verb:
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
          type: string
        statusMessage:
          description: Output only. Human-readable status of the operation, if any.
          readOnly: true
          type: string
        requestedCancellation:
          description: >-
            Output only. Identifies whether the user has requested cancellation
            of the operation. Operations that have been cancelled successfully
            have Operation.error value with a google.rpc.Status.code of 1,
            corresponding to `Code.CANCELLED`.
          readOnly: true
          type: boolean
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    locations:
      id: google.managedkafka.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    operations:
      id: google.managedkafka.operations
      name: operations
      title: Operations
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    clusters:
      id: google.managedkafka.clusters
      name: clusters
      title: Clusters
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.clusters
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/get'
          - $ref: '#/components/x-stackQL-resources/clusters/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/clusters/methods/delete'
    topics:
      id: google.managedkafka.topics
      name: topics
      title: Topics
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1topics/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.topics
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1topics/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1topics~1{topicsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1topics~1{topicsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1topics~1{topicsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/topics/methods/get'
          - $ref: '#/components/x-stackQL-resources/topics/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/topics/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/topics/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/topics/methods/delete'
    consumer_groups:
      id: google.managedkafka.consumer_groups
      name: consumer_groups
      title: Consumer_groups
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1consumerGroups/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.consumerGroups
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1consumerGroups~1{consumerGroupsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1consumerGroups~1{consumerGroupsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1consumerGroups~1{consumerGroupsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/consumer_groups/methods/get'
          - $ref: '#/components/x-stackQL-resources/consumer_groups/methods/list'
        insert: []
        update:
          - $ref: '#/components/x-stackQL-resources/consumer_groups/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/consumer_groups/methods/delete'
    acls:
      id: google.managedkafka.acls
      name: acls
      title: Acls
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1acls/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.acls
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1acls/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1acls~1{aclsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1acls~1{aclsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1acls~1{aclsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/acls/methods/get'
          - $ref: '#/components/x-stackQL-resources/acls/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/acls/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/acls/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/acls/methods/delete'
    acls_acl_entry:
      id: google.managedkafka.acls_acl_entry
      name: acls_acl_entry
      title: Acls_acl_entry
      methods:
        add_acl_entry:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1acls~1{aclsId}:addAclEntry/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        remove_acl_entry:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1clusters~1{clustersId}~1acls~1{aclsId}:removeAclEntry/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/acls_acl_entry/methods/add_acl_entry
        update: []
        replace: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/acls_acl_entry/methods/remove_acl_entry
    connect_clusters:
      id: google.managedkafka.connect_clusters
      name: connect_clusters
      title: Connect_clusters
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.connectClusters
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters~1{connectClustersId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters~1{connectClustersId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters~1{connectClustersId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/connect_clusters/methods/get'
          - $ref: '#/components/x-stackQL-resources/connect_clusters/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/connect_clusters/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/connect_clusters/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/connect_clusters/methods/delete'
    connectors:
      id: google.managedkafka.connectors
      name: connectors
      title: Connectors
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters~1{connectClustersId}~1connectors/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.connectors
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters~1{connectClustersId}~1connectors/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters~1{connectClustersId}~1connectors~1{connectorsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters~1{connectClustersId}~1connectors~1{connectorsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters~1{connectClustersId}~1connectors~1{connectorsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        pause:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters~1{connectClustersId}~1connectors~1{connectorsId}:pause/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        resume:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters~1{connectClustersId}~1connectors~1{connectorsId}:resume/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        restart:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters~1{connectClustersId}~1connectors~1{connectorsId}:restart/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        stop:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectClusters~1{connectClustersId}~1connectors~1{connectorsId}:stop/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/connectors/methods/get'
          - $ref: '#/components/x-stackQL-resources/connectors/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/connectors/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/connectors/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/connectors/methods/delete'
    schema_registries:
      id: google.managedkafka.schema_registries
      name: schema_registries
      title: Schema_registries
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/schema_registries/methods/get'
          - $ref: '#/components/x-stackQL-resources/schema_registries/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/schema_registries/methods/create'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/schema_registries/methods/delete'
    contexts:
      id: google.managedkafka.contexts
      name: contexts
      title: Contexts
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1contexts~1{contextsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1contexts/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/contexts/methods/get'
          - $ref: '#/components/x-stackQL-resources/contexts/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    schemas:
      id: google.managedkafka.schemas
      name: schemas
      title: Schemas
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1schemas~1{schemasId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/schemas/methods/get'
        insert: []
        update: []
        replace: []
        delete: []
    schemas_schema:
      id: google.managedkafka.schemas_schema
      name: schemas_schema
      title: Schemas_schema
      methods:
        get_schema:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1schemas~1{schemasId}~1schema/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/schemas_schema/methods/get_schema'
        insert: []
        update: []
        replace: []
        delete: []
    versions:
      id: google.managedkafka.versions
      name: versions
      title: Versions
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1subjects~1{subjectsId}~1versions/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1subjects~1{subjectsId}~1versions~1{versionsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1subjects~1{subjectsId}~1versions~1{versionsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1subjects~1{subjectsId}~1versions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/versions/methods/get'
          - $ref: '#/components/x-stackQL-resources/versions/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/versions/methods/create'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/versions/methods/delete'
    types:
      id: google.managedkafka.types
      name: types
      title: Types
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1schemas~1types/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/types/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    subjects:
      id: google.managedkafka.subjects
      name: subjects
      title: Subjects
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1subjects/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1subjects~1{subjectsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        lookup_version:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1subjects~1{subjectsId}/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/subjects/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/subjects/methods/delete'
    versions_schema:
      id: google.managedkafka.versions_schema
      name: versions_schema
      title: Versions_schema
      methods:
        get_schema:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1subjects~1{subjectsId}~1versions~1{versionsId}~1schema/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/versions_schema/methods/get_schema
        insert: []
        update: []
        replace: []
        delete: []
    referencedby:
      id: google.managedkafka.referencedby
      name: referencedby
      title: Referencedby
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1subjects~1{subjectsId}~1versions~1{versionsId}~1referencedby/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/referencedby/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    compatibility:
      id: google.managedkafka.compatibility
      name: compatibility
      title: Compatibility
      methods:
        check_compatibility:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1compatibility~1{compatibilityId}/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    config:
      id: google.managedkafka.config
      name: config
      title: Config
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1config~1{configId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1config~1{configId}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1config~1{configId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/config/methods/get'
        insert: []
        update: []
        replace:
          - $ref: '#/components/x-stackQL-resources/config/methods/update'
        delete:
          - $ref: '#/components/x-stackQL-resources/config/methods/delete'
    mode:
      id: google.managedkafka.mode
      name: mode
      title: Mode
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1mode~1{modeId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1mode~1{modeId}/put
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1schemaRegistries~1{schemaRegistriesId}~1mode~1{modeId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/mode/methods/get'
        insert: []
        update: []
        replace:
          - $ref: '#/components/x-stackQL-resources/mode/methods/update'
        delete:
          - $ref: '#/components/x-stackQL-resources/mode/methods/delete'
paths:
  /v1/projects/{projectsId}/locations:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: Lists information about the supported locations for this service.
      operationId: managedkafka.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: extraLocationTypes
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: managedkafka.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: managedkafka.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: managedkafka.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: managedkafka.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        `1`, corresponding to `Code.CANCELLED`.
      operationId: managedkafka.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/clusters:
    parameters: *ref_1
    get:
      description: Lists the clusters in a given project and location.
      operationId: managedkafka.projects.locations.clusters.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListClustersResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
    post:
      description: Creates a new cluster in a given project and location.
      operationId: managedkafka.projects.locations.clusters.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cluster'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: clusterId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}:
    parameters: *ref_1
    get:
      description: Returns the properties of a single cluster.
      operationId: managedkafka.projects.locations.clusters.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
    patch:
      description: Updates the properties of a single cluster.
      operationId: managedkafka.projects.locations.clusters.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cluster'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: requestId
          schema:
            type: string
    delete:
      description: Deletes a single cluster.
      operationId: managedkafka.projects.locations.clusters.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/topics:
    parameters: *ref_1
    get:
      description: Lists the topics in a given cluster.
      operationId: managedkafka.projects.locations.clusters.topics.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTopicsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
    post:
      description: Creates a new topic in a given project and location.
      operationId: managedkafka.projects.locations.clusters.topics.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: query
          name: topicId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/topics/{topicsId}:
    parameters: *ref_1
    get:
      description: Returns the properties of a single topic.
      operationId: managedkafka.projects.locations.clusters.topics.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: path
          name: topicsId
          required: true
          schema:
            type: string
    patch:
      description: Updates the properties of a single topic.
      operationId: managedkafka.projects.locations.clusters.topics.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topic'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: path
          name: topicsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Deletes a single topic.
      operationId: managedkafka.projects.locations.clusters.topics.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: path
          name: topicsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/consumerGroups:
    parameters: *ref_1
    get:
      description: Lists the consumer groups in a given cluster.
      operationId: managedkafka.projects.locations.clusters.consumerGroups.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConsumerGroupsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/consumerGroups/{consumerGroupsId}:
    parameters: *ref_1
    get:
      description: Returns the properties of a single consumer group.
      operationId: managedkafka.projects.locations.clusters.consumerGroups.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: path
          name: consumerGroupsId
          required: true
          schema:
            type: string
    patch:
      description: Updates the properties of a single consumer group.
      operationId: managedkafka.projects.locations.clusters.consumerGroups.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsumerGroup'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerGroup'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: path
          name: consumerGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Deletes a single consumer group.
      operationId: managedkafka.projects.locations.clusters.consumerGroups.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: path
          name: consumerGroupsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/acls:
    parameters: *ref_1
    get:
      description: Lists the acls in a given cluster.
      operationId: managedkafka.projects.locations.clusters.acls.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAclsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
    post:
      description: Creates a new acl in the given project, location, and cluster.
      operationId: managedkafka.projects.locations.clusters.acls.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Acl'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acl'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: query
          name: aclId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/acls/{aclsId}:
    parameters: *ref_1
    get:
      description: Returns the properties of a single acl.
      operationId: managedkafka.projects.locations.clusters.acls.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acl'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: path
          name: aclsId
          required: true
          schema:
            type: string
    patch:
      description: Updates the properties of a single acl.
      operationId: managedkafka.projects.locations.clusters.acls.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Acl'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Acl'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: path
          name: aclsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Deletes an acl.
      operationId: managedkafka.projects.locations.clusters.acls.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: path
          name: aclsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/acls/{aclsId}:addAclEntry:
    parameters: *ref_1
    post:
      description: >-
        Incremental update: Adds an acl entry to an acl. Creates the acl if it
        does not exist yet.
      operationId: managedkafka.projects.locations.clusters.acls.addAclEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AclEntry'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddAclEntryResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: path
          name: aclsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/clusters/{clustersId}/acls/{aclsId}:removeAclEntry:
    parameters: *ref_1
    post:
      description: >-
        Incremental update: Removes an acl entry from an acl. Deletes the acl if
        its acl entries become empty (i.e. if the removed entry was the last one
        in the acl).
      operationId: managedkafka.projects.locations.clusters.acls.removeAclEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AclEntry'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveAclEntryResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: clustersId
          required: true
          schema:
            type: string
        - in: path
          name: aclsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connectClusters:
    parameters: *ref_1
    get:
      description: Lists the Kafka Connect clusters in a given project and location.
      operationId: managedkafka.projects.locations.connectClusters.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectClustersResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
    post:
      description: Creates a new Kafka Connect cluster in a given project and location.
      operationId: managedkafka.projects.locations.connectClusters.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectCluster'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: connectClusterId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connectClusters/{connectClustersId}:
    parameters: *ref_1
    get:
      description: Returns the properties of a single Kafka Connect cluster.
      operationId: managedkafka.projects.locations.connectClusters.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectCluster'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectClustersId
          required: true
          schema:
            type: string
    patch:
      description: Updates the properties of a single Kafka Connect cluster.
      operationId: managedkafka.projects.locations.connectClusters.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectCluster'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectClustersId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: requestId
          schema:
            type: string
    delete:
      description: Deletes a single Connect cluster.
      operationId: managedkafka.projects.locations.connectClusters.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectClustersId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connectClusters/{connectClustersId}/connectors:
    parameters: *ref_1
    get:
      description: Lists the connectors in a given Connect cluster.
      operationId: managedkafka.projects.locations.connectClusters.connectors.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectorsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectClustersId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
    post:
      description: Creates a new connector in a given Connect cluster.
      operationId: managedkafka.projects.locations.connectClusters.connectors.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connector'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectClustersId
          required: true
          schema:
            type: string
        - in: query
          name: connectorId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connectClusters/{connectClustersId}/connectors/{connectorsId}:
    parameters: *ref_1
    get:
      description: Returns the properties of a single connector.
      operationId: managedkafka.projects.locations.connectClusters.connectors.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectClustersId
          required: true
          schema:
            type: string
        - in: path
          name: connectorsId
          required: true
          schema:
            type: string
    patch:
      description: Updates the properties of a connector.
      operationId: managedkafka.projects.locations.connectClusters.connectors.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connector'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connector'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectClustersId
          required: true
          schema:
            type: string
        - in: path
          name: connectorsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Deletes a connector.
      operationId: managedkafka.projects.locations.connectClusters.connectors.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectClustersId
          required: true
          schema:
            type: string
        - in: path
          name: connectorsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connectClusters/{connectClustersId}/connectors/{connectorsId}:pause:
    parameters: *ref_1
    post:
      description: Pauses the connector and its tasks.
      operationId: managedkafka.projects.locations.connectClusters.connectors.pause
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PauseConnectorRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PauseConnectorResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectClustersId
          required: true
          schema:
            type: string
        - in: path
          name: connectorsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connectClusters/{connectClustersId}/connectors/{connectorsId}:resume:
    parameters: *ref_1
    post:
      description: Resumes the connector and its tasks.
      operationId: managedkafka.projects.locations.connectClusters.connectors.resume
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResumeConnectorRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResumeConnectorResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectClustersId
          required: true
          schema:
            type: string
        - in: path
          name: connectorsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connectClusters/{connectClustersId}/connectors/{connectorsId}:restart:
    parameters: *ref_1
    post:
      description: Restarts the connector.
      operationId: managedkafka.projects.locations.connectClusters.connectors.restart
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestartConnectorRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestartConnectorResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectClustersId
          required: true
          schema:
            type: string
        - in: path
          name: connectorsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connectClusters/{connectClustersId}/connectors/{connectorsId}:stop:
    parameters: *ref_1
    post:
      description: Stops the connector.
      operationId: managedkafka.projects.locations.connectClusters.connectors.stop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopConnectorRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopConnectorResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectClustersId
          required: true
          schema:
            type: string
        - in: path
          name: connectorsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}:
    parameters: *ref_1
    get:
      description: Get the schema registry instance.
      operationId: managedkafka.projects.locations.schemaRegistries.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaRegistry'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
    delete:
      description: Delete a schema registry instance.
      operationId: managedkafka.projects.locations.schemaRegistries.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries:
    parameters: *ref_1
    get:
      description: List schema registries.
      operationId: managedkafka.projects.locations.schemaRegistries.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSchemaRegistriesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
    post:
      description: Create a schema registry instance.
      operationId: managedkafka.projects.locations.schemaRegistries.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSchemaRegistryRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaRegistry'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}:
    parameters: *ref_1
    get:
      description: Get the context.
      operationId: managedkafka.projects.locations.schemaRegistries.contexts.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Context'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts:
    parameters: *ref_1
    get:
      description: List contexts for a schema registry.
      operationId: managedkafka.projects.locations.schemaRegistries.contexts.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/schemas/{schemasId}:
    parameters: *ref_1
    get:
      description: Get the schema for the given schema id.
      operationId: managedkafka.projects.locations.schemaRegistries.contexts.schemas.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
        - in: query
          name: subject
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/schemas/{schemasId}/schema:
    parameters: *ref_1
    get:
      description: >-
        Get the schema string for the given schema id. The response will be the
        schema string.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.contexts.schemas.getSchema
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
        - in: query
          name: subject
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/schemas/{schemasId}/versions:
    parameters: *ref_1
    get:
      description: >-
        List the schema versions for the given schema id. The response will be
        an array of subject-version pairs as: [{"subject":"subject1",
        "version":1}, {"subject":"subject2", "version":2}].
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.contexts.schemas.versions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
        - in: query
          name: subject
          schema:
            type: string
        - in: query
          name: deleted
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/schemas/types:
    parameters: *ref_1
    get:
      description: >-
        List the supported schema types. The response will be an array of schema
        types.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.contexts.schemas.types.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/schemas/{schemasId}/subjects:
    parameters: *ref_1
    get:
      description: >-
        List subjects which reference a particular schema id. The response will
        be an array of subject names.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.contexts.schemas.subjects.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
        - in: query
          name: subject
          schema:
            type: string
        - in: query
          name: deleted
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/subjects:
    parameters: *ref_1
    get:
      description: >-
        List subjects in the schema registry. The response will be an array of
        subject names.
      operationId: managedkafka.projects.locations.schemaRegistries.contexts.subjects.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: query
          name: subjectPrefix
          schema:
            type: string
        - in: query
          name: deleted
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/subjects/{subjectsId}:
    parameters: *ref_1
    delete:
      description: >-
        Delete a subject. The response will be an array of versions of the
        deleted subject.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.contexts.subjects.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
        - in: query
          name: permanent
          schema:
            type: boolean
    post:
      description: Lookup a schema under the specified subject.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.contexts.subjects.lookupVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupVersionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/subjects/{subjectsId}/versions/{versionsId}:
    parameters: *ref_1
    get:
      description: Get a versioned schema (schema with subject/version) of a subject.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.contexts.subjects.versions.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: deleted
          schema:
            type: boolean
    delete:
      description: >-
        Delete a version of a subject. The response will be the deleted version
        id.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.contexts.subjects.versions.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: permanent
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/subjects/{subjectsId}/versions/{versionsId}/schema:
    parameters: *ref_1
    get:
      description: >-
        Get the schema string only for a version of a subject. The response will
        be the schema string.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.contexts.subjects.versions.getSchema
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: deleted
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/subjects/{subjectsId}/versions:
    parameters: *ref_1
    get:
      description: >-
        Get all versions of a subject. The response will be an array of versions
        of the subject.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.contexts.subjects.versions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
        - in: query
          name: deleted
          schema:
            type: boolean
    post:
      description: Register a new version under a given subject with the given schema.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.contexts.subjects.versions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVersionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVersionResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/subjects/{subjectsId}/versions/{versionsId}/referencedby:
    parameters: *ref_1
    get:
      description: >-
        Get a list of IDs of schemas that reference the schema with the given
        subject and version.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.contexts.subjects.versions.referencedby.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/compatibility/{compatibilityId}:
    parameters: *ref_1
    post:
      description: >-
        Check compatibility of a schema with all versions or a specific version
        of a subject.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.contexts.compatibility.checkCompatibility
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckCompatibilityRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckCompatibilityResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: compatibilityId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/config/{configId}:
    parameters: *ref_1
    get:
      description: Get schema config at global level or for a subject.
      operationId: managedkafka.projects.locations.schemaRegistries.contexts.config.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: configId
          required: true
          schema:
            type: string
        - in: query
          name: defaultToGlobal
          schema:
            type: boolean
    put:
      description: >-
        Update config at global level or for a subject. Creates a
        SchemaSubject-level SchemaConfig if it does not exist.
      operationId: managedkafka.projects.locations.schemaRegistries.contexts.config.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSchemaConfigRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: configId
          required: true
          schema:
            type: string
    delete:
      description: Delete schema config for a subject.
      operationId: managedkafka.projects.locations.schemaRegistries.contexts.config.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: configId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/contexts/{contextsId}/mode/{modeId}:
    parameters: *ref_1
    get:
      description: Get mode at global level or for a subject.
      operationId: managedkafka.projects.locations.schemaRegistries.contexts.mode.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaMode'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: modeId
          required: true
          schema:
            type: string
    put:
      description: Update mode at global level or for a subject.
      operationId: managedkafka.projects.locations.schemaRegistries.contexts.mode.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSchemaModeRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaMode'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: modeId
          required: true
          schema:
            type: string
    delete:
      description: Delete schema mode for a subject.
      operationId: managedkafka.projects.locations.schemaRegistries.contexts.mode.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaMode'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: contextsId
          required: true
          schema:
            type: string
        - in: path
          name: modeId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/schemas/{schemasId}:
    parameters: *ref_1
    get:
      description: Get the schema for the given schema id.
      operationId: managedkafka.projects.locations.schemaRegistries.schemas.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
        - in: query
          name: subject
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/schemas/{schemasId}/schema:
    parameters: *ref_1
    get:
      description: >-
        Get the schema string for the given schema id. The response will be the
        schema string.
      operationId: managedkafka.projects.locations.schemaRegistries.schemas.getSchema
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
        - in: query
          name: subject
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/schemas/{schemasId}/versions:
    parameters: *ref_1
    get:
      description: >-
        List the schema versions for the given schema id. The response will be
        an array of subject-version pairs as: [{"subject":"subject1",
        "version":1}, {"subject":"subject2", "version":2}].
      operationId: managedkafka.projects.locations.schemaRegistries.schemas.versions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
        - in: query
          name: subject
          schema:
            type: string
        - in: query
          name: deleted
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/schemas/types:
    parameters: *ref_1
    get:
      description: >-
        List the supported schema types. The response will be an array of schema
        types.
      operationId: managedkafka.projects.locations.schemaRegistries.schemas.types.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/schemas/{schemasId}/subjects:
    parameters: *ref_1
    get:
      description: >-
        List subjects which reference a particular schema id. The response will
        be an array of subject names.
      operationId: managedkafka.projects.locations.schemaRegistries.schemas.subjects.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: schemasId
          required: true
          schema:
            type: string
        - in: query
          name: subject
          schema:
            type: string
        - in: query
          name: deleted
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/subjects:
    parameters: *ref_1
    get:
      description: >-
        List subjects in the schema registry. The response will be an array of
        subject names.
      operationId: managedkafka.projects.locations.schemaRegistries.subjects.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: query
          name: subjectPrefix
          schema:
            type: string
        - in: query
          name: deleted
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/subjects/{subjectsId}:
    parameters: *ref_1
    delete:
      description: >-
        Delete a subject. The response will be an array of versions of the
        deleted subject.
      operationId: managedkafka.projects.locations.schemaRegistries.subjects.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
        - in: query
          name: permanent
          schema:
            type: boolean
    post:
      description: Lookup a schema under the specified subject.
      operationId: managedkafka.projects.locations.schemaRegistries.subjects.lookupVersion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupVersionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/subjects/{subjectsId}/versions/{versionsId}:
    parameters: *ref_1
    get:
      description: Get a versioned schema (schema with subject/version) of a subject.
      operationId: managedkafka.projects.locations.schemaRegistries.subjects.versions.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: deleted
          schema:
            type: boolean
    delete:
      description: >-
        Delete a version of a subject. The response will be the deleted version
        id.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.subjects.versions.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: permanent
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/subjects/{subjectsId}/versions/{versionsId}/schema:
    parameters: *ref_1
    get:
      description: >-
        Get the schema string only for a version of a subject. The response will
        be the schema string.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.subjects.versions.getSchema
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
        - in: query
          name: deleted
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/subjects/{subjectsId}/versions:
    parameters: *ref_1
    get:
      description: >-
        Get all versions of a subject. The response will be an array of versions
        of the subject.
      operationId: managedkafka.projects.locations.schemaRegistries.subjects.versions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
        - in: query
          name: deleted
          schema:
            type: boolean
    post:
      description: Register a new version under a given subject with the given schema.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.subjects.versions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVersionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateVersionResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/subjects/{subjectsId}/versions/{versionsId}/referencedby:
    parameters: *ref_1
    get:
      description: >-
        Get a list of IDs of schemas that reference the schema with the given
        subject and version.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.subjects.versions.referencedby.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: subjectsId
          required: true
          schema:
            type: string
        - in: path
          name: versionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/compatibility/{compatibilityId}:
    parameters: *ref_1
    post:
      description: >-
        Check compatibility of a schema with all versions or a specific version
        of a subject.
      operationId: >-
        managedkafka.projects.locations.schemaRegistries.compatibility.checkCompatibility
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckCompatibilityRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckCompatibilityResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: compatibilityId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/config/{configId}:
    parameters: *ref_1
    get:
      description: Get schema config at global level or for a subject.
      operationId: managedkafka.projects.locations.schemaRegistries.config.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: configId
          required: true
          schema:
            type: string
        - in: query
          name: defaultToGlobal
          schema:
            type: boolean
    put:
      description: >-
        Update config at global level or for a subject. Creates a
        SchemaSubject-level SchemaConfig if it does not exist.
      operationId: managedkafka.projects.locations.schemaRegistries.config.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSchemaConfigRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: configId
          required: true
          schema:
            type: string
    delete:
      description: Delete schema config for a subject.
      operationId: managedkafka.projects.locations.schemaRegistries.config.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: configId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/schemaRegistries/{schemaRegistriesId}/mode/{modeId}:
    parameters: *ref_1
    get:
      description: Get mode at global level or for a subject.
      operationId: managedkafka.projects.locations.schemaRegistries.mode.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaMode'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: modeId
          required: true
          schema:
            type: string
    put:
      description: Update mode at global level or for a subject.
      operationId: managedkafka.projects.locations.schemaRegistries.mode.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSchemaModeRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaMode'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: modeId
          required: true
          schema:
            type: string
    delete:
      description: Delete schema mode for a subject.
      operationId: managedkafka.projects.locations.schemaRegistries.mode.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaMode'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: schemaRegistriesId
          required: true
          schema:
            type: string
        - in: path
          name: modeId
          required: true
          schema:
            type: string
