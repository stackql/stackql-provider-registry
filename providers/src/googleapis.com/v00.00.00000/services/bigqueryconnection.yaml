openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: BigQuery Connection API
  description: Allows users to manage BigQuery connections to external data sources.
  version: v1
  x-discovery-doc-revision: '20250713'
  x-generated-date: '2025-08-28'
externalDocs:
  url: https://cloud.google.com/bigquery/docs/connections-api-intro
servers:
  - url: https://bigqueryconnection.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/bigquery: >-
              View and manage your data in Google BigQuery and see the email
              address for your Google Account
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    Connection:
      id: Connection
      description: >-
        Configuration parameters to establish connection with an external data
        source, except the credential attributes.
      type: object
      properties:
        name:
          description: >-
            Output only. The resource name of the connection in the form of:
            `projects/{project_id}/locations/{location_id}/connections/{connection_id}`
          readOnly: true
          type: string
        friendlyName:
          description: User provided display name for the connection.
          type: string
        description:
          description: User provided description.
          type: string
        cloudSql:
          description: Cloud SQL properties.
          $ref: '#/components/schemas/CloudSqlProperties'
        aws:
          description: Amazon Web Services (AWS) properties.
          $ref: '#/components/schemas/AwsProperties'
        azure:
          description: Azure properties.
          $ref: '#/components/schemas/AzureProperties'
        cloudSpanner:
          description: Cloud Spanner properties.
          $ref: '#/components/schemas/CloudSpannerProperties'
        cloudResource:
          description: Cloud Resource properties.
          $ref: '#/components/schemas/CloudResourceProperties'
        spark:
          description: Spark properties.
          $ref: '#/components/schemas/SparkProperties'
        salesforceDataCloud:
          description: >-
            Optional. Salesforce DataCloud properties. This field is intended
            for use only by Salesforce partner projects. This field contains
            properties for your Salesforce DataCloud connection.
          $ref: '#/components/schemas/SalesforceDataCloudProperties'
        configuration:
          description: Optional. Connector configuration.
          $ref: '#/components/schemas/ConnectorConfiguration'
        creationTime:
          description: Output only. The creation timestamp of the connection.
          readOnly: true
          type: string
          format: int64
        lastModifiedTime:
          description: Output only. The last update timestamp of the connection.
          readOnly: true
          type: string
          format: int64
        hasCredential:
          description: Output only. True, if credential is configured for this connection.
          readOnly: true
          type: boolean
        kmsKeyName:
          description: >-
            Optional. The Cloud KMS key that is used for credentials encryption.
            If omitted, internal Google owned encryption keys are used. Example:
            `projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]`
          type: string
    CloudSqlProperties:
      id: CloudSqlProperties
      description: Connection properties specific to the Cloud SQL.
      type: object
      properties:
        instanceId:
          description: Cloud SQL instance ID in the form `project:location:instance`.
          type: string
        database:
          description: Database name.
          type: string
        type:
          description: Type of the Cloud SQL database.
          type: string
          enumDescriptions:
            - Unspecified database type.
            - Cloud SQL for PostgreSQL.
            - Cloud SQL for MySQL.
          enum:
            - DATABASE_TYPE_UNSPECIFIED
            - POSTGRES
            - MYSQL
        credential:
          description: Input only. Cloud SQL credential.
          $ref: '#/components/schemas/CloudSqlCredential'
        serviceAccountId:
          description: >-
            Output only. The account ID of the service used for the purpose of
            this connection. When the connection is used in the context of an
            operation in BigQuery, this service account will serve as the
            identity being used for connecting to the CloudSQL instance
            specified in this connection.
          readOnly: true
          type: string
    CloudSqlCredential:
      id: CloudSqlCredential
      description: Credential info for the Cloud SQL.
      type: object
      properties:
        username:
          description: The username for the credential.
          type: string
        password:
          description: The password for the credential.
          type: string
    AwsProperties:
      id: AwsProperties
      description: Connection properties specific to Amazon Web Services (AWS).
      type: object
      properties:
        accessRole:
          description: >-
            Authentication using Google owned service account to assume into
            customer's AWS IAM Role.
          $ref: '#/components/schemas/AwsAccessRole'
    AwsAccessRole:
      id: AwsAccessRole
      description: >-
        Authentication method for Amazon Web Services (AWS) that uses Google
        owned Google service account to assume into customer's AWS IAM Role.
      type: object
      properties:
        iamRoleId:
          description: >-
            The userâ€™s AWS IAM Role that trusts the Google-owned AWS IAM user
            Connection.
          type: string
        identity:
          description: >-
            A unique Google-owned and Google-generated identity for the
            Connection. This identity will be used to access the user's AWS IAM
            Role.
          type: string
    AzureProperties:
      id: AzureProperties
      description: Container for connection properties specific to Azure.
      type: object
      properties:
        application:
          description: Output only. The name of the Azure Active Directory Application.
          readOnly: true
          type: string
        clientId:
          description: >-
            Output only. The client id of the Azure Active Directory
            Application.
          readOnly: true
          type: string
        objectId:
          description: >-
            Output only. The object id of the Azure Active Directory
            Application.
          readOnly: true
          type: string
        customerTenantId:
          description: The id of customer's directory that host the data.
          type: string
        redirectUri:
          description: >-
            The URL user will be redirected to after granting consent during
            connection setup.
          type: string
        federatedApplicationClientId:
          description: >-
            The client ID of the user's Azure Active Directory Application used
            for a federated connection.
          type: string
        identity:
          description: >-
            Output only. A unique Google-owned and Google-generated identity for
            the Connection. This identity will be used to access the user's
            Azure Active Directory Application.
          readOnly: true
          type: string
    CloudSpannerProperties:
      id: CloudSpannerProperties
      description: Connection properties specific to Cloud Spanner.
      type: object
      properties:
        database:
          description: Cloud Spanner database in the form `project/instance/database'
          type: string
        useParallelism:
          description: If parallelism should be used when reading from Cloud Spanner
          type: boolean
        maxParallelism:
          description: >-
            Allows setting max parallelism per query when executing on Spanner
            independent compute resources. If unspecified, default values of
            parallelism are chosen that are dependent on the Cloud Spanner
            instance configuration. REQUIRES: `use_parallelism` must be set.
            REQUIRES: `use_data_boost` must be set.
          type: integer
          format: int32
        useServerlessAnalytics:
          description: >-
            Deprecated: prefer use_data_boost instead. If the serverless
            analytics service should be used to read data from Cloud Spanner.
            Note: `use_parallelism` must be set when using serverless analytics.
          deprecated: true
          type: boolean
        useDataBoost:
          description: >-
            If set, the request will be executed via Spanner independent compute
            resources. REQUIRES: `use_parallelism` must be set.
          type: boolean
        databaseRole:
          description: >-
            Optional. Cloud Spanner database role for fine-grained access
            control. The Cloud Spanner admin should have provisioned the
            database role with appropriate permissions, such as `SELECT` and
            `INSERT`. Other users should only use roles provided by their Cloud
            Spanner admins. For more details, see [About fine-grained access
            control] (https://cloud.google.com/spanner/docs/fgac-about).
            REQUIRES: The database role name must start with a letter, and can
            only contain letters, numbers, and underscores.
          type: string
    CloudResourceProperties:
      id: CloudResourceProperties
      description: >-
        Container for connection properties for delegation of access to GCP
        resources.
      type: object
      properties:
        serviceAccountId:
          description: >-
            Output only. The account ID of the service created for the purpose
            of this connection. The service account does not have any
            permissions associated with it when it is created. After creation,
            customers delegate permissions to the service account. When the
            connection is used in the context of an operation in BigQuery, the
            service account will be used to connect to the desired resources in
            GCP. The account ID is in the form of:
            @gcp-sa-bigquery-cloudresource.iam.gserviceaccount.com
          readOnly: true
          type: string
    SparkProperties:
      id: SparkProperties
      description: >-
        Container for connection properties to execute stored procedures for
        Apache Spark.
      type: object
      properties:
        serviceAccountId:
          description: >-
            Output only. The account ID of the service created for the purpose
            of this connection. The service account does not have any
            permissions associated with it when it is created. After creation,
            customers delegate permissions to the service account. When the
            connection is used in the context of a stored procedure for Apache
            Spark in BigQuery, the service account is used to connect to the
            desired resources in Google Cloud. The account ID is in the form of:
            bqcx--@gcp-sa-bigquery-consp.iam.gserviceaccount.com
          readOnly: true
          type: string
        metastoreServiceConfig:
          description: >-
            Optional. Dataproc Metastore Service configuration for the
            connection.
          $ref: '#/components/schemas/MetastoreServiceConfig'
        sparkHistoryServerConfig:
          description: Optional. Spark History Server configuration for the connection.
          $ref: '#/components/schemas/SparkHistoryServerConfig'
    MetastoreServiceConfig:
      id: MetastoreServiceConfig
      description: Configuration of the Dataproc Metastore Service.
      type: object
      properties:
        metastoreService:
          description: >-
            Optional. Resource name of an existing Dataproc Metastore service.
            Example: *
            `projects/[project_id]/locations/[region]/services/[service_id]`
          type: string
    SparkHistoryServerConfig:
      id: SparkHistoryServerConfig
      description: Configuration of the Spark History Server.
      type: object
      properties:
        dataprocCluster:
          description: >-
            Optional. Resource name of an existing Dataproc Cluster to act as a
            Spark History Server for the connection. Example: *
            `projects/[project_id]/regions/[region]/clusters/[cluster_name]`
          type: string
    SalesforceDataCloudProperties:
      id: SalesforceDataCloudProperties
      description: >-
        Connection properties specific to Salesforce DataCloud. This is intended
        for use only by Salesforce partner projects.
      type: object
      properties:
        instanceUri:
          description: The URL to the user's Salesforce DataCloud instance.
          type: string
        identity:
          description: >-
            Output only. A unique Google-owned and Google-generated service
            account identity for the connection.
          readOnly: true
          type: string
        tenantId:
          description: The ID of the user's Salesforce tenant.
          type: string
    ConnectorConfiguration:
      id: ConnectorConfiguration
      description: Represents concrete parameter values for Connector Configuration.
      type: object
      properties:
        connectorId:
          description: >-
            Required. Immutable. The ID of the Connector these parameters are
            configured for.
          type: string
        endpoint:
          description: >-
            Specifies how to reach the remote system this connection is pointing
            to.
          $ref: '#/components/schemas/ConnectorConfigurationEndpoint'
        authentication:
          description: Client authentication.
          $ref: '#/components/schemas/ConnectorConfigurationAuthentication'
        network:
          description: Networking configuration.
          $ref: '#/components/schemas/ConnectorConfigurationNetwork'
        asset:
          description: Data asset.
          $ref: '#/components/schemas/ConnectorConfigurationAsset'
    ConnectorConfigurationEndpoint:
      id: ConnectorConfigurationEndpoint
      description: Remote endpoint specification.
      type: object
      properties:
        hostPort:
          description: >-
            Host and port in a format of `hostname:port` as defined in
            https://www.ietf.org/rfc/rfc3986.html#section-3.2.2 and
            https://www.ietf.org/rfc/rfc3986.html#section-3.2.3.
          type: string
    ConnectorConfigurationAuthentication:
      id: ConnectorConfigurationAuthentication
      description: Client authentication.
      type: object
      properties:
        usernamePassword:
          description: Username/password authentication.
          $ref: '#/components/schemas/ConnectorConfigurationUsernamePassword'
        serviceAccount:
          description: >-
            Output only. Google-managed service account associated with this
            connection, e.g.,
            `service-{project_number}@gcp-sa-bigqueryconnection.iam.gserviceaccount.com`.
            BigQuery jobs using this connection will act as `service_account`
            identity while connecting to the datasource.
          readOnly: true
          type: string
    ConnectorConfigurationUsernamePassword:
      id: ConnectorConfigurationUsernamePassword
      description: Username and Password authentication.
      type: object
      properties:
        username:
          description: Required. Username.
          type: string
        password:
          description: Required. Password.
          $ref: '#/components/schemas/ConnectorConfigurationSecret'
    ConnectorConfigurationSecret:
      id: ConnectorConfigurationSecret
      description: Secret value parameter.
      type: object
      properties:
        plaintext:
          description: Input only. Secret as plaintext.
          type: string
        secretType:
          description: >-
            Output only. Indicates type of secret. Can be used to check type of
            stored secret value even if it's `INPUT_ONLY`.
          readOnly: true
          type: string
          enumDescriptions:
            - ''
            - ''
          enum:
            - SECRET_TYPE_UNSPECIFIED
            - PLAINTEXT
    ConnectorConfigurationNetwork:
      id: ConnectorConfigurationNetwork
      description: Network related configuration.
      type: object
      properties:
        privateServiceConnect:
          description: Private Service Connect networking configuration.
          $ref: '#/components/schemas/ConnectorConfigurationPrivateServiceConnect'
    ConnectorConfigurationPrivateServiceConnect:
      id: ConnectorConfigurationPrivateServiceConnect
      description: Private Service Connect configuration.
      type: object
      properties:
        networkAttachment:
          description: >-
            Required. Network Attachment name in the format of
            `projects/{project}/regions/{region}/networkAttachments/{networkattachment}`.
          type: string
    ConnectorConfigurationAsset:
      id: ConnectorConfigurationAsset
      description: >-
        Data Asset - a resource within instance of the system, reachable under
        specified endpoint. For example a database name in a SQL DB.
      type: object
      properties:
        database:
          description: Name of the database.
          type: string
        googleCloudResource:
          description: >-
            Full Google Cloud resource name -
            https://cloud.google.com/apis/design/resource_names#full_resource_name.
            Example: `//library.googleapis.com/shelves/shelf1/books/book2`
          type: string
    ListConnectionsResponse:
      id: ListConnectionsResponse
      description: The response for ConnectionService.ListConnections.
      type: object
      properties:
        nextPageToken:
          description: Next page token.
          type: string
        connections:
          description: List of connections.
          type: array
          items:
            $ref: '#/components/schemas/Connection'
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    GetIamPolicyRequest:
      id: GetIamPolicyRequest
      description: Request message for `GetIamPolicy` method.
      type: object
      properties:
        options:
          description: >-
            OPTIONAL: A `GetPolicyOptions` object for specifying options to
            `GetIamPolicy`.
          $ref: '#/components/schemas/GetPolicyOptions'
    GetPolicyOptions:
      id: GetPolicyOptions
      description: Encapsulates settings provided to GetIamPolicy.
      type: object
      properties:
        requestedPolicyVersion:
          description: >-
            Optional. The maximum policy version that will be used to format the
            policy. Valid values are 0, 1, and 3. Requests specifying an invalid
            value will be rejected. Requests for policies with any conditional
            role bindings must specify version 3. Policies with no conditional
            role bindings may specify any valid value or leave the field unset.
            The policy in the response might use the policy version that you
            specified, or it might use a lower policy version. For example, if
            you specify version 3, but the policy has no conditional role
            bindings, the response uses version 1. To learn which resources
            support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
          format: int32
    Policy:
      id: Policy
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources. A `Policy` is a collection of
        `bindings`. A `binding` binds one or more `members`, or principals, to a
        single `role`. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role. For some types of Google Cloud resources, a `binding` can
        also specify a `condition`, which is a logical expression that allows
        access to a resource only if the expression evaluates to `true`. A
        condition can add constraints based on attributes of the request, the
        resource, or both. To learn which resources support conditions in their
        IAM policies, see the [IAM
        documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        **JSON example:** ``` { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
        members: - user:mike@example.com - group:admins@example.com -
        domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ```
        For a description of IAM and its features, see the [IAM
        documentation](https://cloud.google.com/iam/docs/).
      type: object
      properties:
        version:
          description: >-
            Specifies the format of the policy. Valid values are `0`, `1`, and
            `3`. Requests that specify an invalid value are rejected. Any
            operation that affects conditional role bindings must specify
            version `3`. This requirement applies to the following operations: *
            Getting a policy that includes a conditional role binding * Adding a
            conditional role binding to a policy * Changing a conditional role
            binding in a policy * Removing any role binding, with or without a
            condition, from a policy that includes conditions **Important:** If
            you use IAM Conditions, you must include the `etag` field whenever
            you call `setIamPolicy`. If you omit this field, then IAM allows you
            to overwrite a version `3` policy with a version `1` policy, and all
            of the conditions in the version `3` policy are lost. If a policy
            does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset. To learn which
            resources support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
          format: int32
        bindings:
          description: >-
            Associates a list of `members`, or principals, with a `role`.
            Optionally, may specify a `condition` that determines how and when
            the `bindings` are applied. Each of the `bindings` must contain at
            least one principal. The `bindings` in a `Policy` can refer to up to
            1,500 principals; up to 250 of these principals can be Google
            groups. Each occurrence of a principal counts towards these limits.
            For example, if the `bindings` grant 50 different roles to
            `user:alice@example.com`, and not to any other principal, then you
            can add another 1,450 principals to the `bindings` in the `Policy`.
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        auditConfigs:
          description: Specifies cloud audit logging configuration for this policy.
          type: array
          items:
            $ref: '#/components/schemas/AuditConfig'
        etag:
          description: >-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the `etag`
            in the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An `etag` is returned in the response to
            `getIamPolicy`, and systems are expected to put that etag in the
            request to `setIamPolicy` to ensure that their change will be
            applied to the same version of the policy. **Important:** If you use
            IAM Conditions, you must include the `etag` field whenever you call
            `setIamPolicy`. If you omit this field, then IAM allows you to
            overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
          type: string
          format: byte
    Binding:
      id: Binding
      description: Associates `members`, or principals, with a `role`.
      type: object
      properties:
        role:
          description: >-
            Role that is assigned to the list of `members`, or principals. For
            example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an
            overview of the IAM roles and permissions, see the [IAM
            documentation](https://cloud.google.com/iam/docs/roles-overview).
            For a list of the available pre-defined roles, see
            [here](https://cloud.google.com/iam/docs/understanding-roles).
          type: string
        members:
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. `members` can have the following values: * `allUsers`: A
            special identifier that represents anyone who is on the internet;
            with or without a Google account. * `allAuthenticatedUsers`: A
            special identifier that represents anyone who is authenticated with
            a Google account or a service account. Does not include identities
            that come from external identity providers (IdPs) through identity
            federation. * `user:{emailid}`: An email address that represents a
            specific Google account. For example, `alice@example.com` . *
            `serviceAccount:{emailid}`: An email address that represents a
            Google service account. For example,
            `my-other-app@appspot.gserviceaccount.com`. *
            `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
            An identifier for a [Kubernetes service
            account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example,
            `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
            `group:{emailid}`: An email address that represents a Google group.
            For example, `admins@example.com`. * `domain:{domain}`: The G Suite
            domain (primary) that represents all the users of that domain. For
            example, `google.com` or `example.com`. *
            `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
            A single identity in a workforce identity pool. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
            All workforce identities in a group. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
            All workforce identities with a specific attribute value. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`:
            All identities in a workforce identity pool. *
            `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
            A single identity in a workload identity pool. *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
            A workload identity pool group. *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
            All identities in a workload identity pool with a certain attribute.
            *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`:
            All identities in a workload identity pool. *
            `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus
            unique identifier) representing a user that has been recently
            deleted. For example, `alice@example.com?uid=123456789012345678901`.
            If the user is recovered, this value reverts to `user:{emailid}` and
            the recovered user retains the role in the binding. *
            `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
            If the service account is undeleted, this value reverts to
            `serviceAccount:{emailid}` and the undeleted service account retains
            the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`:
            An email address (plus unique identifier) representing a Google
            group that has been recently deleted. For example,
            `admins@example.com?uid=123456789012345678901`. If the group is
            recovered, this value reverts to `group:{emailid}` and the recovered
            group retains the role in the binding. *
            `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
            Deleted single identity in a workforce identity pool. For example,
            `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
          type: array
          items:
            type: string
        condition:
          description: >-
            The condition that is associated with this binding. If the condition
            evaluates to `true`, then this binding applies to the current
            request. If the condition evaluates to `false`, then this binding
            does not apply to the current request. However, a different role
            binding might grant the same role to one or more of the principals
            in this binding. To learn which resources support conditions in
            their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          $ref: '#/components/schemas/Expr'
    Expr:
      id: Expr
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec. Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
      type: object
      properties:
        expression:
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
          type: string
        title:
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
          type: string
        description:
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
          type: string
        location:
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
          type: string
    AuditConfig:
      id: AuditConfig
      description: >-
        Specifies the audit configuration for a service. The configuration
        determines which permission types are logged, and what identities, if
        any, are exempted from logging. An AuditConfig must have one or more
        AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
        specific service, the union of the two AuditConfigs is used for that
        service: the log_types specified in each AuditConfig are enabled, and
        the exempted_members in each AuditLogConfig are exempted. Example Policy
        with multiple AuditConfigs: { "audit_configs": [ { "service":
        "allServices", "audit_log_configs": [ { "log_type": "DATA_READ",
        "exempted_members": [ "user:jose@example.com" ] }, { "log_type":
        "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service":
        "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type":
        "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [
        "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy
        enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts
        `jose@example.com` from DATA_READ logging, and `aliya@example.com` from
        DATA_WRITE logging.
      type: object
      properties:
        service:
          description: >-
            Specifies a service that will be enabled for audit logging. For
            example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
            `allServices` is a special value that covers all services.
          type: string
        auditLogConfigs:
          description: The configuration for logging of each type of permission.
          type: array
          items:
            $ref: '#/components/schemas/AuditLogConfig'
    AuditLogConfig:
      id: AuditLogConfig
      description: >-
        Provides the configuration for logging a type of permissions. Example: {
        "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
        "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This
        enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
        jose@example.com from DATA_READ logging.
      type: object
      properties:
        logType:
          description: The log type that this config enables.
          type: string
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
        exemptedMembers:
          description: >-
            Specifies the identities that do not cause logging for this type of
            permission. Follows the same format of Binding.members.
          type: array
          items:
            type: string
    SetIamPolicyRequest:
      id: SetIamPolicyRequest
      description: Request message for `SetIamPolicy` method.
      type: object
      properties:
        policy:
          description: >-
            REQUIRED: The complete policy to be applied to the `resource`. The
            size of the policy is limited to a few 10s of KB. An empty policy is
            a valid policy but certain Google Cloud services (such as Projects)
            might reject them.
          $ref: '#/components/schemas/Policy'
        updateMask:
          description: >-
            OPTIONAL: A FieldMask specifying which fields of the policy to
            modify. Only the fields in the mask will be modified. If no mask is
            provided, the following default mask is used: `paths: "bindings,
            etag"`
          type: string
          format: google-fieldmask
    TestIamPermissionsRequest:
      id: TestIamPermissionsRequest
      description: Request message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          description: >-
            The set of permissions to check for the `resource`. Permissions with
            wildcards (such as `*` or `storage.*`) are not allowed. For more
            information see [IAM
            Overview](https://cloud.google.com/iam/docs/overview#permissions).
          type: array
          items:
            type: string
    TestIamPermissionsResponse:
      id: TestIamPermissionsResponse
      description: Response message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          description: >-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
          type: array
          items:
            type: string
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    connections:
      id: google.bigqueryconnection.connections
      name: connections
      title: Connections
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connections/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connections/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.connections
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connections~1{connectionsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connections~1{connectionsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connections~1{connectionsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/connections/methods/get'
          - $ref: '#/components/x-stackQL-resources/connections/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/connections/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/connections/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/connections/methods/delete'
    connections_iam_policies:
      id: google.bigqueryconnection.connections_iam_policies
      name: connections_iam_policies
      title: Connections_iam_policies
      methods:
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connections~1{connectionsId}:getIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connections~1{connectionsId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connections~1{connectionsId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/connections_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/connections_iam_policies/methods/set_iam_policy
        delete: []
paths:
  /v1/projects/{projectsId}/locations/{locationsId}/connections:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    post:
      description: Creates a new connection.
      operationId: bigqueryconnection.projects.locations.connections.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: connectionId
          schema:
            type: string
    get:
      description: Returns a list of connections in the given project.
      operationId: bigqueryconnection.projects.locations.connections.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:
    parameters: *ref_1
    get:
      description: Returns specified connection.
      operationId: bigqueryconnection.projects.locations.connections.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionsId
          required: true
          schema:
            type: string
    patch:
      description: >-
        Updates the specified connection. For security reasons, also resets
        credential if connection properties are in the update field mask.
      operationId: bigqueryconnection.projects.locations.connections.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Connection'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    delete:
      description: Deletes connection and associated credential.
      operationId: bigqueryconnection.projects.locations.connections.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:getIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: bigqueryconnection.projects.locations.connections.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: bigqueryconnection.projects.locations.connections.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connections/{connectionsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: bigqueryconnection.projects.locations.connections.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionsId
          required: true
          schema:
            type: string
