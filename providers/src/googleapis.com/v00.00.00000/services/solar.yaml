openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Solar API
  description: Solar API.
  version: v1
  x-discovery-doc-revision: '20240910'
  x-generated-date: '2024-09-13'
externalDocs:
  url: https://developers.google.com/maps/documentation/solar
servers:
  - url: https://solar.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    BuildingInsights:
      properties:
        imageryDate:
          description: Date that the underlying imagery was acquired. This is approximate.
          $ref: '#/components/schemas/Date'
        center:
          $ref: '#/components/schemas/LatLng'
          description: A point near the center of the building.
        regionCode:
          type: string
          description: Region code for the country (or region) this building is in.
        administrativeArea:
          description: >-
            Administrative area 1 (e.g., in the US, the state) that contains
            this building. For example, in the US, the abbreviation might be
            "MA" or "CA."
          type: string
        postalCode:
          description: Postal code (e.g., US zip code) this building is contained by.
          type: string
        solarPotential:
          $ref: '#/components/schemas/SolarPotential'
          description: Solar potential of the building.
        statisticalArea:
          description: Statistical area (e.g., US census tract) this building is in.
          type: string
        imageryQuality:
          description: >-
            The quality of the imagery used to compute the data for this
            building.
          type: string
          enumDescriptions:
            - No quality is known.
            - >-
              Solar data is derived from aerial imagery captured at low-altitude
              and processed at 0.1 m/pixel.
            - >-
              Solar data is derived from enhanced aerial imagery captured at
              high-altitude and processed at 0.25 m/pixel.
            - >-
              Solar data is derived from enhanced satellite imagery processed at
              0.25 m/pixel.
            - >-
              Solar data is derived from enhanced satellite imagery processed at
              0.25 m/pixel.
          enum:
            - IMAGERY_QUALITY_UNSPECIFIED
            - HIGH
            - MEDIUM
            - LOW
            - BASE
        boundingBox:
          $ref: '#/components/schemas/LatLngBox'
          description: The bounding box of the building.
        imageryProcessedDate:
          $ref: '#/components/schemas/Date'
          description: When processing was completed on this imagery.
        name:
          type: string
          description: The resource name for the building, of the format `building/`.
      type: object
      description: >-
        Response message for `Solar.FindClosestBuildingInsights`. Information
        about the location, dimensions, and solar potential of a building.
      id: BuildingInsights
    FinancedPurchaseSavings:
      properties:
        savings:
          $ref: '#/components/schemas/SavingsOverTime'
          description: How much is saved (or not) over the lifetime period.
        rebateValue:
          description: >-
            The value of all tax rebates (including Federal Investment Tax
            Credit (ITC)).
          $ref: '#/components/schemas/Money'
        loanInterestRate:
          description: The interest rate on loans assumed in this set of calculations.
          format: float
          type: number
        annualLoanPayment:
          $ref: '#/components/schemas/Money'
          description: Annual loan payments.
      type: object
      description: >-
        Cost and benefit of using a loan to buy a particular configuration of
        solar panels with a particular electricity usage.
      id: FinancedPurchaseSavings
    RoofSegmentSizeAndSunshineStats:
      properties:
        azimuthDegrees:
          format: float
          type: number
          description: >-
            Compass direction the roof segment is pointing in. 0 = North, 90 =
            East, 180 = South. For a "flat" roof segment (`pitch_degrees` very
            near 0), azimuth is not well defined, so for consistency, we define
            it arbitrarily to be 0 (North).
        center:
          $ref: '#/components/schemas/LatLng'
          description: A point near the center of the roof segment.
        boundingBox:
          $ref: '#/components/schemas/LatLngBox'
          description: The bounding box of the roof segment.
        pitchDegrees:
          format: float
          description: >-
            Angle of the roof segment relative to the theoretical ground plane.
            0 = parallel to the ground, 90 = perpendicular to the ground.
          type: number
        planeHeightAtCenterMeters:
          description: >-
            The height of the roof segment plane, in meters above sea level, at
            the point designated by `center`. Together with the pitch, azimuth,
            and center location, this fully defines the roof segment plane.
          format: float
          type: number
        stats:
          $ref: '#/components/schemas/SizeAndSunshineStats'
          description: Total size and sunlight quantiles for the roof segment.
      description: Information about the size and sunniness quantiles of a roof segment.
      id: RoofSegmentSizeAndSunshineStats
      type: object
    FinancialAnalysis:
      properties:
        leasingSavings:
          description: Cost and benefit of leasing the solar panels.
          $ref: '#/components/schemas/LeasingSavings'
        averageKwhPerMonth:
          format: float
          description: >-
            How much electricity the house uses in an average month, based on
            the bill size and the local electricity rates.
          type: number
        panelConfigIndex:
          format: int32
          description: >-
            Index in solar_panel_configs of the optimum solar layout for this
            bill size. This can be -1 indicating that there is no layout. In
            this case, the remaining submessages will be omitted.
          type: integer
        cashPurchaseSavings:
          description: Cost and benefit of buying the solar panels with cash.
          $ref: '#/components/schemas/CashPurchaseSavings'
        financedPurchaseSavings:
          $ref: '#/components/schemas/FinancedPurchaseSavings'
          description: >-
            Cost and benefit of buying the solar panels by financing the
            purchase.
        monthlyBill:
          description: The monthly electric bill this analysis assumes.
          $ref: '#/components/schemas/Money'
        financialDetails:
          $ref: '#/components/schemas/FinancialDetails'
          description: >-
            Financial information that applies regardless of the financing
            method used.
        defaultBill:
          description: >-
            Whether this is the bill size selected to be the default bill for
            the area this building is in. Exactly one `FinancialAnalysis` in
            `BuildingSolarPotential` should have `default_bill` set.
          type: boolean
      description: >-
        Analysis of the cost and benefits of the optimum solar layout for a
        particular electric bill size.
      id: FinancialAnalysis
      type: object
    DataLayers:
      type: object
      properties:
        dsmUrl:
          type: string
          description: >-
            The URL for an image of the DSM (Digital Surface Model) of the
            region. Values are in meters above EGM96 geoid (i.e., sea level).
            Invalid locations (where we don't have data) are stored as -9999.
        imageryProcessedDate:
          $ref: '#/components/schemas/Date'
          description: When processing was completed on this imagery.
        maskUrl:
          type: string
          description: >-
            The URL for the building mask image: one bit per pixel saying
            whether that pixel is considered to be part of a rooftop or not.
        rgbUrl:
          type: string
          description: The URL for an image of RGB data (aerial photo) of the region.
        imageryQuality:
          enumDescriptions:
            - No quality is known.
            - >-
              Solar data is derived from aerial imagery captured at low-altitude
              and processed at 0.1 m/pixel.
            - >-
              Solar data is derived from enhanced aerial imagery captured at
              high-altitude and processed at 0.25 m/pixel.
            - >-
              Solar data is derived from enhanced satellite imagery processed at
              0.25 m/pixel.
            - >-
              Solar data is derived from enhanced satellite imagery processed at
              0.25 m/pixel.
          description: The quality of the result's imagery.
          type: string
          enum:
            - IMAGERY_QUALITY_UNSPECIFIED
            - HIGH
            - MEDIUM
            - LOW
            - BASE
        annualFluxUrl:
          description: >-
            The URL for the annual flux map (annual sunlight on roofs) of the
            region. Values are kWh/kW/year. This is *unmasked flux*: flux is
            computed for every location, not just building rooftops. Invalid
            locations are stored as -9999: locations outside our coverage area
            will be invalid, and a few locations inside the coverage area, where
            we were unable to calculate flux, will also be invalid.
          type: string
        imageryDate:
          $ref: '#/components/schemas/Date'
          description: >-
            When the source imagery (from which all the other data are derived)
            in this region was taken. It is necessarily somewhat approximate, as
            the images may have been taken over more than one day.
        hourlyShadeUrls:
          items:
            type: string
          description: >-
            Twelve URLs for hourly shade, corresponding to January...December,
            in order. Each GeoTIFF will contain 24 bands, corresponding to the
            24 hours of the day. Each pixel is a 32 bit integer, corresponding
            to the (up to) 31 days of that month; a 1 bit means that the
            corresponding location is able to see the sun at that day, of that
            hour, of that month. Invalid locations are stored as -9999 (since
            this is negative, it has bit 31 set, and no valid value could have
            bit 31 set as that would correspond to the 32nd day of the month).
            An example may be useful. If you want to know whether a point (at
            pixel location (x, y)) saw sun at 4pm on the 22nd of June you would:
            1. fetch the sixth URL in this list (corresponding to June). 1. look
            up the 17th channel (corresponding to 4pm). 1. read the 32-bit value
            at (x, y). 1. read bit 21 of the value (corresponding to the 22nd of
            the month). 1. if that bit is a 1, then that spot saw the sun at 4pm
            22 June. More formally: Given `month` (1-12), `day` (1...month max;
            February has 28 days) and `hour` (0-23), the shade/sun for that
            month/day/hour at a position `(x, y)` is the bit ```
            (hourly_shade[month - 1])(x, y)[hour] & (1 << (day - 1)) ``` where
            `(x, y)` is spatial indexing, `[month - 1]` refers to fetching the
            `month - 1`st URL (indexing from zero), `[hour]` is indexing into
            the channels, and a final non-zero result means "sunny". There are
            no leap days, and DST doesn't exist (all days are 24 hours long;
            noon is always "standard time" noon).
          type: array
        monthlyFluxUrl:
          type: string
          description: >-
            The URL for the monthly flux map (sunlight on roofs, broken down by
            month) of the region. Values are kWh/kW/year. The GeoTIFF pointed to
            by this URL will contain twelve bands, corresponding to
            January...December, in order.
      description: >-
        Information about the solar potential of a region. The actual data are
        contained in a number of GeoTIFF files covering the requested region,
        for which this message contains URLs: Each string in the `DataLayers`
        message contains a URL from which the corresponding GeoTIFF can be
        fetched. These URLs are valid for a few hours after they've been
        generated. Most of the GeoTIFF files are at a resolution of 0.1m/pixel,
        but the monthly flux file is at 0.5m/pixel, and the hourly shade files
        are at 1m/pixel. If a `pixel_size_meters` value was specified in the
        `GetDataLayersRequest`, then the minimum resolution in the GeoTIFF files
        will be that value.
      id: DataLayers
    SolarPotential:
      description: >-
        Information about the solar potential of a building. A number of fields
        in this are defined in terms of "panels". The fields
        panel_capacity_watts, panel_height_meters, and panel_width_meters
        describe the parameters of the model of panel used in these
        calculations.
      id: SolarPotential
      type: object
      properties:
        carbonOffsetFactorKgPerMwh:
          description: >-
            Equivalent amount of CO2 produced per MWh of grid electricity. This
            is a measure of the carbon intensity of grid electricity displaced
            by solar electricity.
          format: float
          type: number
        buildingStats:
          description: >-
            Size and sunlight quantiles for the entire building, including parts
            of the roof that were not assigned to some roof segment. Because the
            orientations of these parts are not well characterised, the roof
            area estimate is unreliable, but the ground area estimate is
            reliable. It may be that a more reliable whole building roof area
            can be obtained by scaling the roof area from whole_roof_stats by
            the ratio of the ground areas of `building_stats` and
            `whole_roof_stats`.
          $ref: '#/components/schemas/SizeAndSunshineStats'
        roofSegmentStats:
          items:
            $ref: '#/components/schemas/RoofSegmentSizeAndSunshineStats'
          type: array
          description: Size and sunlight quantiles for each roof segment.
        maxArrayPanelsCount:
          type: integer
          format: int32
          description: >-
            Size of the maximum array - that is, the maximum number of panels
            that can fit on the roof.
        panelHeightMeters:
          format: float
          description: >-
            Height, in meters in portrait orientation, of the panel used in the
            calculations.
          type: number
        wholeRoofStats:
          $ref: '#/components/schemas/SizeAndSunshineStats'
          description: >-
            Total size and sunlight quantiles for the part of the roof that was
            assigned to some roof segment. Despite the name, this may not
            include the entire building. See building_stats.
        maxArrayAreaMeters2:
          description: Size, in square meters, of the maximum array.
          type: number
          format: float
        solarPanelConfigs:
          description: >-
            Each SolarPanelConfig describes a different arrangement of solar
            panels on the roof. They are in order of increasing number of
            panels. The `SolarPanelConfig` with panels_count=N is based on the
            first N panels in the `solar_panels` list. This field is only
            populated if at least 4 panels can fit on a roof.
          type: array
          items:
            $ref: '#/components/schemas/SolarPanelConfig'
        panelCapacityWatts:
          format: float
          type: number
          description: Capacity, in watts, of the panel used in the calculations.
        solarPanels:
          type: array
          description: >-
            Each SolarPanel describes a single solar panel. They are listed in
            the order that the panel layout algorithm placed this. This is
            usually, though not always, in decreasing order of annual energy
            production.
          items:
            $ref: '#/components/schemas/SolarPanel'
        maxSunshineHoursPerYear:
          format: float
          type: number
          description: >-
            Maximum number of sunshine hours received per year, by any point on
            the roof. Sunshine hours are a measure of the total amount of
            insolation (energy) received per year. 1 sunshine hour = 1 kWh per
            kW (where kW refers to kW of capacity under Standard Testing
            Conditions).
        panelLifetimeYears:
          type: integer
          description: >-
            The expected lifetime, in years, of the solar panels. This is used
            in the financial calculations.
          format: int32
        panelWidthMeters:
          type: number
          description: >-
            Width, in meters in portrait orientation, of the panel used in the
            calculations.
          format: float
        financialAnalyses:
          items:
            $ref: '#/components/schemas/FinancialAnalysis'
          description: >-
            A FinancialAnalysis gives the savings from going solar assuming a
            given monthly bill and a given electricity provider. They are in
            order of increasing order of monthly bill amount. This field will be
            empty for buildings in areas for which the Solar API does not have
            enough information to perform financial computations.
          type: array
    RoofSegmentSummary:
      id: RoofSegmentSummary
      type: object
      description: >-
        Information about a roof segment on the building, with some number of
        panels placed on it.
      properties:
        pitchDegrees:
          description: >-
            Angle of the roof segment relative to the theoretical ground plane.
            0 = parallel to the ground, 90 = perpendicular to the ground.
          type: number
          format: float
        segmentIndex:
          format: int32
          description: >-
            Index in roof_segment_stats of the corresponding
            `RoofSegmentSizeAndSunshineStats`.
          type: integer
        azimuthDegrees:
          format: float
          type: number
          description: >-
            Compass direction the roof segment is pointing in. 0 = North, 90 =
            East, 180 = South. For a "flat" roof segment (`pitch_degrees` very
            near 0), azimuth is not well defined, so for consistency, we define
            it arbitrarily to be 0 (North).
        panelsCount:
          format: int32
          type: integer
          description: The total number of panels on this segment.
        yearlyEnergyDcKwh:
          format: float
          type: number
          description: >-
            How much sunlight energy this part of the layout captures over the
            course of a year, in DC kWh, assuming the panels described above.
    FinancialDetails:
      properties:
        percentageExportedToGrid:
          description: >-
            The percentage (0-100) of solar electricity production we assumed
            was exported to the grid, based on the first quarter of production.
            This affects the calculations if net metering is not allowed.
          format: float
          type: number
        solarPercentage:
          description: >-
            Percentage (0-100) of the user's power supplied by solar. Valid for
            the first year but approximately correct for future years.
          format: float
          type: number
        costOfElectricityWithoutSolar:
          description: >-
            Total cost of electricity the user would have paid over the lifetime
            period if they didn't install solar.
          $ref: '#/components/schemas/Money'
        federalIncentive:
          $ref: '#/components/schemas/Money'
          description: >-
            Amount of money available from federal incentives; this applies if
            the user buys (with or without a loan) the panels.
        utilityIncentive:
          $ref: '#/components/schemas/Money'
          description: >-
            Amount of money available from utility incentives; this applies if
            the user buys (with or without a loan) the panels.
        remainingLifetimeUtilityBill:
          $ref: '#/components/schemas/Money'
          description: >-
            Utility bill for electricity not produced by solar, for the lifetime
            of the panels.
        initialAcKwhPerYear:
          type: number
          description: >-
            How many AC kWh we think the solar panels will generate in their
            first year.
          format: float
        netMeteringAllowed:
          description: Whether net metering is allowed.
          type: boolean
        lifetimeSrecTotal:
          description: >-
            Amount of money the user will receive from Solar Renewable Energy
            Credits over the panel lifetime; this applies if the user buys (with
            or without a loan) the panels.
          $ref: '#/components/schemas/Money'
        stateIncentive:
          description: >-
            Amount of money available from state incentives; this applies if the
            user buys (with or without a loan) the panels.
          $ref: '#/components/schemas/Money'
      description: >-
        Details of a financial analysis. Some of these details are already
        stored at higher levels (e.g., out of pocket cost). Total money amounts
        are over a lifetime period defined by the panel_lifetime_years field in
        SolarPotential. Note: The out of pocket cost of purchasing the panels is
        given in the out_of_pocket_cost field in CashPurchaseSavings.
      id: FinancialDetails
      type: object
    LeasingSavings:
      type: object
      properties:
        annualLeasingCost:
          $ref: '#/components/schemas/Money'
          description: Estimated annual leasing cost.
        savings:
          $ref: '#/components/schemas/SavingsOverTime'
          description: How much is saved (or not) over the lifetime period.
        leasesSupported:
          type: boolean
          description: >-
            Whether leases are supported in this juristiction by the financial
            calculation engine. If this field is false, then the values in this
            message should probably be ignored. This is independent of
            `leases_allowed`: in some areas leases are allowed, but under
            conditions that aren't handled by the financial models.
        leasesAllowed:
          type: boolean
          description: >-
            Whether leases are allowed in this juristiction (leases are not
            allowed in some states). If this field is false, then the values in
            this message should probably be ignored.
      description: >-
        Cost and benefit of leasing a particular configuration of solar panels
        with a particular electricity usage.
      id: LeasingSavings
    SolarPanel:
      description: >-
        SolarPanel describes the position, orientation, and production of a
        single solar panel. See the panel_height_meters, panel_width_meters, and
        panel_capacity_watts fields in SolarPotential for information on the
        parameters of the panel.
      properties:
        orientation:
          description: The orientation of the panel.
          enumDescriptions:
            - No panel orientation is known.
            - >-
              A `LANDSCAPE` panel has its long edge perpendicular to the azimuth
              direction of the roof segment that it is placed on.
            - >-
              A `PORTRAIT` panel has its long edge parallel to the azimuth
              direction of the roof segment that it is placed on.
          type: string
          enum:
            - SOLAR_PANEL_ORIENTATION_UNSPECIFIED
            - LANDSCAPE
            - PORTRAIT
        yearlyEnergyDcKwh:
          type: number
          format: float
          description: >-
            How much sunlight energy this layout captures over the course of a
            year, in DC kWh.
        segmentIndex:
          format: int32
          description: >-
            Index in roof_segment_stats of the `RoofSegmentSizeAndSunshineStats`
            which corresponds to the roof segment that this panel is placed on.
          type: integer
        center:
          $ref: '#/components/schemas/LatLng'
          description: The centre of the panel.
      type: object
      id: SolarPanel
    Date:
      properties:
        month:
          description: >-
            Month of a year. Must be from 1 to 12, or 0 to specify a year
            without a month and day.
          type: integer
          format: int32
        day:
          description: >-
            Day of a month. Must be from 1 to 31 and valid for the year and
            month, or 0 to specify a year by itself or a year and month where
            the day isn't significant.
          type: integer
          format: int32
        year:
          format: int32
          description: >-
            Year of the date. Must be from 1 to 9999, or 0 to specify a date
            without a year.
          type: integer
      id: Date
      description: >-
        Represents a whole or partial calendar date, such as a birthday. The
        time of day and time zone are either specified elsewhere or are
        insignificant. The date is relative to the Gregorian Calendar. This can
        represent one of the following: * A full date, with non-zero year,
        month, and day values. * A month and day, with a zero year (for example,
        an anniversary). * A year on its own, with a zero month and a zero day.
        * A year and month, with a zero day (for example, a credit card
        expiration date). Related types: * google.type.TimeOfDay *
        google.type.DateTime * google.protobuf.Timestamp
      type: object
    SizeAndSunshineStats:
      properties:
        sunshineQuantiles:
          items:
            type: number
            format: float
          description: >-
            Quantiles of the pointwise sunniness across the area. If there are N
            values here, this represents the (N-1)-iles. For example, if there
            are 5 values, then they would be the quartiles (min, 25%, 50%, 75%,
            max). Values are in annual kWh/kW like max_sunshine_hours_per_year.
          type: array
        areaMeters2:
          type: number
          description: >-
            The area of the roof or roof segment, in m^2. This is the roof area
            (accounting for tilt), not the ground footprint area.
          format: float
        groundAreaMeters2:
          description: >-
            The ground footprint area covered by the roof or roof segment, in
            m^2.
          type: number
          format: float
      type: object
      id: SizeAndSunshineStats
      description: Size and sunniness quantiles of a roof, or part of a roof.
    LatLngBox:
      properties:
        sw:
          $ref: '#/components/schemas/LatLng'
          description: The southwest corner of the box.
        ne:
          description: The northeast corner of the box.
          $ref: '#/components/schemas/LatLng'
      description: A bounding box in lat/lng coordinates.
      type: object
      id: LatLngBox
    LatLng:
      id: LatLng
      properties:
        latitude:
          format: double
          description: The latitude in degrees. It must be in the range [-90.0, +90.0].
          type: number
        longitude:
          description: The longitude in degrees. It must be in the range [-180.0, +180.0].
          format: double
          type: number
      description: >-
        An object that represents a latitude/longitude pair. This is expressed
        as a pair of doubles to represent degrees latitude and degrees
        longitude. Unless specified otherwise, this object must conform to the
        WGS84 standard. Values must be within normalized ranges.
      type: object
    HttpBody:
      id: HttpBody
      type: object
      properties:
        data:
          type: string
          description: The HTTP request/response body as raw binary.
          format: byte
        extensions:
          type: array
          description: >-
            Application specific response metadata. Must be set in the first
            response for streaming APIs.
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
        contentType:
          type: string
          description: >-
            The HTTP Content-Type header value specifying the content type of
            the body.
      description: >-
        Message that represents an arbitrary HTTP body. It should only be used
        for payload formats that can't be represented as JSON, such as raw
        binary or an HTML page. This message can be used both in streaming and
        non-streaming API methods in the request as well as the response. It can
        be used as a top-level request field, which is convenient if one wants
        to extract parameters from either the URL or HTTP template into the
        request fields and also want access to the raw HTTP body. Example:
        message GetResourceRequest { // A unique request id. string request_id =
        1; // The raw HTTP body is bound to this field. google.api.HttpBody
        http_body = 2; } service ResourceService { rpc
        GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc
        UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); }
        Example with streaming methods: service CaldavService { rpc
        GetCalendar(stream google.api.HttpBody) returns (stream
        google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody)
        returns (stream google.api.HttpBody); } Use of this type only changes
        how the request and response bodies are handled, all other features will
        continue to work unchanged.
    SolarPanelConfig:
      id: SolarPanelConfig
      properties:
        panelsCount:
          description: >-
            Total number of panels. Note that this is redundant to (the sum of)
            the corresponding fields in roof_segment_summaries.
          type: integer
          format: int32
        roofSegmentSummaries:
          items:
            $ref: '#/components/schemas/RoofSegmentSummary'
          type: array
          description: >-
            Information about the production of each roof segment that is
            carrying at least one panel in this layout.
            `roof_segment_summaries[i]` describes the i-th roof segment,
            including its size, expected production and orientation.
        yearlyEnergyDcKwh:
          type: number
          format: float
          description: >-
            How much sunlight energy this layout captures over the course of a
            year, in DC kWh, assuming the panels described above.
      description: >-
        SolarPanelConfig describes a particular placement of solar panels on the
        roof.
      type: object
    Money:
      properties:
        units:
          format: int64
          description: >-
            The whole units of the amount. For example if `currencyCode` is
            `"USD"`, then 1 unit is one US dollar.
          type: string
        nanos:
          format: int32
          description: >-
            Number of nano (10^-9) units of the amount. The value must be
            between -999,999,999 and +999,999,999 inclusive. If `units` is
            positive, `nanos` must be positive or zero. If `units` is zero,
            `nanos` can be positive, zero, or negative. If `units` is negative,
            `nanos` must be negative or zero. For example $-1.75 is represented
            as `units`=-1 and `nanos`=-750,000,000.
          type: integer
        currencyCode:
          description: The three-letter currency code defined in ISO 4217.
          type: string
      type: object
      id: Money
      description: Represents an amount of money with its currency type.
    CashPurchaseSavings:
      description: >-
        Cost and benefit of an outright purchase of a particular configuration
        of solar panels with a particular electricity usage.
      type: object
      id: CashPurchaseSavings
      properties:
        rebateValue:
          $ref: '#/components/schemas/Money'
          description: The value of all tax rebates.
        upfrontCost:
          $ref: '#/components/schemas/Money'
          description: >-
            Initial cost after tax incentives: it's the amount that must be paid
            during first year. Contrast with `out_of_pocket_cost`, which is
            before tax incentives.
        paybackYears:
          description: >-
            Number of years until payback occurs. A negative value means payback
            never occurs within the lifetime period.
          type: number
          format: float
        savings:
          description: How much is saved (or not) over the lifetime period.
          $ref: '#/components/schemas/SavingsOverTime'
        outOfPocketCost:
          $ref: '#/components/schemas/Money'
          description: >-
            Initial cost before tax incentives: the amount that must be paid
            out-of-pocket. Contrast with `upfront_cost`, which is after tax
            incentives.
    SavingsOverTime:
      type: object
      properties:
        savingsYear20:
          $ref: '#/components/schemas/Money'
          description: Savings in the first twenty years after panel installation.
        savingsYear1:
          $ref: '#/components/schemas/Money'
          description: Savings in the first year after panel installation.
        presentValueOfSavingsYear20:
          $ref: '#/components/schemas/Money'
          description: >-
            Using the assumed discount rate, what is the present value of the
            cumulative 20-year savings?
        presentValueOfSavingsLifetime:
          $ref: '#/components/schemas/Money'
          description: >-
            Using the assumed discount rate, what is the present value of the
            cumulative lifetime savings?
        savingsLifetime:
          $ref: '#/components/schemas/Money'
          description: Savings in the entire panel lifetime.
        financiallyViable:
          description: >-
            Indicates whether this scenario is financially viable. Will be false
            for scenarios with poor financial viability (e.g., money-losing).
          type: boolean
      id: SavingsOverTime
      description: Financial information that's shared between different financing methods.
  parameters:
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
  x-stackQL-resources:
    building_insights:
      id: google.solar.building_insights
      name: building_insights
      title: Building_insights
      methods:
        find_closest:
          operation:
            $ref: '#/paths/~1v1~1buildingInsights:findClosest/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    geo_tiff:
      id: google.solar.geo_tiff
      name: geo_tiff
      title: Geo_tiff
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1geoTiff:get/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/geo_tiff/methods/get'
        insert: []
        update: []
        replace: []
        delete: []
    data_layers:
      id: google.solar.data_layers
      name: data_layers
      title: Data_layers
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1dataLayers:get/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/data_layers/methods/get'
        insert: []
        update: []
        replace: []
        delete: []
paths:
  /v1/buildingInsights:findClosest:
    parameters: &ref_1
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/callback'
    get:
      description: >-
        Locates the closest building to a query point. Returns an error with
        code `NOT_FOUND` if there are no buildings within approximately 50m of
        the query point.
      operationId: solar.buildingInsights.findClosest
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingInsights'
      parameters:
        - in: query
          name: location.latitude
          schema:
            type: number
            format: double
        - in: query
          name: experiments
          schema:
            type: string
        - in: query
          name: requiredQuality
          schema:
            type: string
        - in: query
          name: location.longitude
          schema:
            type: number
            format: double
  /v1/geoTiff:get:
    parameters: *ref_1
    get:
      description: Returns an image by its ID.
      operationId: solar.geoTiff.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: query
          name: id
          schema:
            type: string
  /v1/dataLayers:get:
    parameters: *ref_1
    get:
      description: >-
        Gets solar information for a region surrounding a location. Returns an
        error with code `NOT_FOUND` if the location is outside the coverage
        area.
      operationId: solar.dataLayers.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataLayers'
      parameters:
        - in: query
          name: experiments
          schema:
            type: string
        - in: query
          name: pixelSizeMeters
          schema:
            type: number
            format: float
        - in: query
          name: location.latitude
          schema:
            type: number
            format: double
        - in: query
          name: requiredQuality
          schema:
            type: string
        - in: query
          name: exactQualityRequired
          schema:
            type: boolean
        - in: query
          name: view
          schema:
            type: string
        - in: query
          name: radiusMeters
          schema:
            type: number
            format: float
        - in: query
          name: location.longitude
          schema:
            type: number
            format: double
