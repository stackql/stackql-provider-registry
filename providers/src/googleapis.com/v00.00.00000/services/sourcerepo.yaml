openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Cloud Source Repositories API
  description: Accesses source code repositories hosted by Google.
  version: v1
  x-discovery-doc-revision: '20230820'
  x-generated-date: '2023-09-01'
externalDocs:
  url: 'https://cloud.google.com/source-repositories/docs/apis'
servers:
  - url: 'https://sourcerepo.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/source.read_write': Manage the contents of your source code repositories
            'https://www.googleapis.com/auth/source.full_control': Manage your source code repositories
            'https://www.googleapis.com/auth/source.read_only': View the contents of your source code repositories
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    Repo:
      description: A repository (or repo) is a Git repository storing versioned source content.
      type: object
      properties:
        pubsubConfigs:
          description: How this repository publishes a change in the repository through Cloud Pub/Sub. Keyed by the topic names.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/PubsubConfig'
        mirrorConfig:
          description: How this repository mirrors a repository managed by another service. Read-only field.
          $ref: '#/components/schemas/MirrorConfig'
        size:
          format: int64
          type: string
          description: 'The disk usage of the repo, in bytes. Read-only field. Size is only returned by GetRepo.'
        url:
          type: string
          description: URL to clone the repository from Google Cloud Source Repositories. Read-only field.
        name:
          type: string
          description: 'Resource name of the repository, of the form `projects//repos/`. The repo name may contain slashes. eg, `projects/myproject/repos/name/with/slash`'
      id: Repo
    Policy:
      type: object
      id: Policy
      properties:
        auditConfigs:
          description: Specifies cloud audit logging configuration for this policy.
          type: array
          items:
            $ref: '#/components/schemas/AuditConfig'
        etag:
          format: byte
          type: string
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
        bindings:
          items:
            $ref: '#/components/schemas/Binding'
          description: 'Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.'
          type: array
        version:
          type: integer
          format: int32
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
    AuditLogConfig:
      id: AuditLogConfig
      description: 'Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables ''DATA_READ'' and ''DATA_WRITE'' logging, while exempting jose@example.com from DATA_READ logging.'
      type: object
      properties:
        exemptedMembers:
          description: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
          type: array
          items:
            type: string
        logType:
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
          description: The log type that this config enables.
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          type: string
    Expr:
      properties:
        expression:
          description: Textual representation of an expression in Common Expression Language syntax.
          type: string
        location:
          description: 'Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.'
          type: string
        title:
          type: string
          description: 'Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.'
        description:
          type: string
          description: 'Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.'
      type: object
      id: Expr
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
    Binding:
      properties:
        role:
          description: 'Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.'
          type: string
        members:
          items:
            type: string
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.'
          type: array
        condition:
          $ref: '#/components/schemas/Expr'
          description: 'The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
      description: 'Associates `members`, or principals, with a `role`.'
      id: Binding
      type: object
    MirrorConfig:
      description: 'Configuration to automatically mirror a repository from another hosting service, for example GitHub or Bitbucket.'
      type: object
      id: MirrorConfig
      properties:
        deployKeyId:
          description: ID of the SSH deploy key at the other hosting service. Removing this key from the other service would deauthorize Google Cloud Source Repositories from mirroring.
          type: string
        webhookId:
          description: 'ID of the webhook listening to updates to trigger mirroring. Removing this webhook from the other hosting service will stop Google Cloud Source Repositories from receiving notifications, and thereby disabling mirroring.'
          type: string
        url:
          description: URL of the main repository at the other hosting service.
          type: string
    TestIamPermissionsResponse:
      type: object
      description: Response message for `TestIamPermissions` method.
      properties:
        permissions:
          type: array
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
          items:
            type: string
      id: TestIamPermissionsResponse
    SyncRepoRequest:
      id: SyncRepoRequest
      type: object
      description: Request for SyncRepo.
      properties: {}
    SetIamPolicyRequest:
      description: Request message for `SetIamPolicy` method.
      type: object
      properties:
        updateMask:
          description: 'OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`'
          type: string
          format: google-fieldmask
        policy:
          $ref: '#/components/schemas/Policy'
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
      id: SetIamPolicyRequest
    TestIamPermissionsRequest:
      description: Request message for `TestIamPermissions` method.
      properties:
        permissions:
          type: array
          items:
            type: string
          description: 'The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).'
      type: object
      id: TestIamPermissionsRequest
    PubsubConfig:
      type: object
      id: PubsubConfig
      properties:
        messageFormat:
          description: The format of the Cloud Pub/Sub messages.
          enumDescriptions:
            - Unspecified.
            - The message payload is a serialized protocol buffer of SourceRepoEvent.
            - The message payload is a JSON string of SourceRepoEvent.
          enum:
            - MESSAGE_FORMAT_UNSPECIFIED
            - PROTOBUF
            - JSON
          type: string
        serviceAccountEmail:
          type: string
          description: 'Email address of the service account used for publishing Cloud Pub/Sub messages. This service account needs to be in the same project as the PubsubConfig. When added, the caller needs to have iam.serviceAccounts.actAs permission on this service account. If unspecified, it defaults to the compute engine default service account.'
        topic:
          description: A topic of Cloud Pub/Sub. Values are of the form `projects//topics/`. The project needs to be the same project as this config is in.
          type: string
      description: Configuration to publish a Cloud Pub/Sub message.
    ListReposResponse:
      id: ListReposResponse
      type: object
      properties:
        repos:
          type: array
          items:
            $ref: '#/components/schemas/Repo'
          description: The listed repos.
        nextPageToken:
          type: string
          description: 'If non-empty, additional repositories exist within the project. These can be retrieved by including this value in the next ListReposRequest''s page_token field.'
      description: Response for ListRepos. The size is not set in the returned repositories.
    Status:
      properties:
        message:
          type: string
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
        code:
          type: integer
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          format: int32
        details:
          type: array
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      type: object
      id: Status
    Operation:
      id: Operation
      type: object
      properties:
        name:
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.'
          type: string
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
          description: 'The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.'
        done:
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
          type: boolean
        metadata:
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
        error:
          $ref: '#/components/schemas/Status'
          description: The error result of the operation in case of failure or cancellation.
      description: This resource represents a long-running operation that is the result of a network API call.
    UpdateProjectConfigRequest:
      properties:
        updateMask:
          description: 'A FieldMask specifying which fields of the project_config to modify. Only the fields in the mask will be modified. If no mask is provided, this request is no-op.'
          type: string
          format: google-fieldmask
        projectConfig:
          $ref: '#/components/schemas/ProjectConfig'
          description: The new configuration for the project.
      type: object
      description: Request for UpdateProjectConfig.
      id: UpdateProjectConfigRequest
    ProjectConfig:
      description: Cloud Source Repositories configuration of a project.
      type: object
      id: ProjectConfig
      properties:
        name:
          type: string
          description: The name of the project. Values are of the form `projects/`.
        pubsubConfigs:
          type: object
          description: How this project publishes a change in the repositories through Cloud Pub/Sub. Keyed by the topic names.
          additionalProperties:
            $ref: '#/components/schemas/PubsubConfig'
        enablePrivateKeyCheck:
          description: Reject a Git push that contains a private key.
          type: boolean
    SyncRepoMetadata:
      description: Metadata of SyncRepo. This message is in the metadata field of Operation.
      id: SyncRepoMetadata
      properties:
        name:
          type: string
          description: The name of the repo being synchronized. Values are of the form `projects//repos/`.
        startTime:
          description: The time this operation is started.
          type: string
          format: google-datetime
        statusMessage:
          description: The latest status message on syncing the repository.
          type: string
        updateTime:
          format: google-datetime
          description: The time this operation's status message is updated.
          type: string
      type: object
    Empty:
      id: Empty
      properties: {}
      type: object
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
    UpdateRepoRequest:
      type: object
      properties:
        updateMask:
          format: google-fieldmask
          description: 'A FieldMask specifying which fields of the repo to modify. Only the fields in the mask will be modified. If no mask is provided, this request is no-op.'
          type: string
        repo:
          $ref: '#/components/schemas/Repo'
          description: The new configuration for the repository.
      description: Request for UpdateRepo.
      id: UpdateRepoRequest
    AuditConfig:
      id: AuditConfig
      description: 'Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.'
      properties:
        auditLogConfigs:
          items:
            $ref: '#/components/schemas/AuditLogConfig'
          description: The configuration for logging of each type of permission.
          type: array
        service:
          type: string
          description: 'Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.'
      type: object
  parameters:
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
  x-stackQL-resources:
    repos:
      id: google.sourcerepo.repos
      name: repos
      title: Repos
      methods:
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1repos/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1repos/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.repos
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1repos/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1repos~1{reposId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1repos~1{reposId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1repos~1{reposId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        sync:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1repos~1{reposId}:sync/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/repos/methods/get'
          - $ref: '#/components/x-stackQL-resources/repos/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/repos/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/repos/methods/delete'
    repos_iam_policies:
      id: google.sourcerepo.repos_iam_policies
      name: repos_iam_policies
      title: Repos Iam Policies
      methods:
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1repos~1{reposId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1repos~1{reposId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1repos~1{reposId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1repos~1{reposId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/repos_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    config:
      id: google.sourcerepo.config
      name: config
      title: Config
      methods:
        update_config:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1config/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_config:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1config/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/config/methods/get_config'
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/repos':
    parameters: &ref_1
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
    post:
      description: 'Creates a repo in the given project with the given name. If the named repository already exists, `CreateRepo` returns `ALREADY_EXISTS`.'
      operationId: sourcerepo.projects.repos.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repo'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.full_control'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.full_control'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repo'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: repos
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: 'Returns all repos belonging to a project. The sizes of the repos are not set by ListRepos. To get the size of a repo, use GetRepo.'
      operationId: sourcerepo.projects.repos.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.full_control'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.full_control'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.read_only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.read_only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.read_write'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.read_write'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReposResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: repos
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.repos
  '/v1/projects/{projectsId}/repos/{reposId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: Sets the access control policy on the specified resource. Replaces any existing policy.
      operationId: sourcerepo.projects.repos.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.full_control'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.full_control'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: reposId
          required: true
          schema:
            type: string
      x-stackQL-resource: repos_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/repos/{reposId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: sourcerepo.projects.repos.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.full_control'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.full_control'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.read_only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.read_only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.read_write'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.read_write'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: reposId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: repos_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/repos/{reposId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.'
      operationId: sourcerepo.projects.repos.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.full_control'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.full_control'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.read_only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.read_only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.read_write'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.read_write'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: reposId
          required: true
          schema:
            type: string
      x-stackQL-resource: repos_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/repos/{reposId}':
    parameters: *ref_1
    delete:
      description: Deletes a repo.
      operationId: sourcerepo.projects.repos.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.full_control'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.full_control'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: reposId
          required: true
          schema:
            type: string
      x-stackQL-resource: repos
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Updates information about a repo.
      operationId: sourcerepo.projects.repos.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRepoRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repo'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: reposId
          required: true
          schema:
            type: string
      x-stackQL-resource: repos
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Returns information about a repo.
      operationId: sourcerepo.projects.repos.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.full_control'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.full_control'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.read_only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.read_only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/source.read_write'
          Oauth2c:
            - 'https://www.googleapis.com/auth/source.read_write'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repo'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: reposId
          required: true
          schema:
            type: string
      x-stackQL-resource: repos
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/repos/{reposId}:sync':
    parameters: *ref_1
    post:
      description: Synchronize a connected repo. The response contains SyncRepoMetadata in the metadata field.
      operationId: sourcerepo.projects.repos.sync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyncRepoRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: reposId
          required: true
          schema:
            type: string
      x-stackQL-resource: repos
      x-stackQL-method: sync
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/config':
    parameters: *ref_1
    patch:
      description: Updates the Cloud Source Repositories configuration of the project.
      operationId: sourcerepo.projects.updateConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectConfigRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: config
      x-stackQL-method: update_config
      x-stackQL-verb: exec
    get:
      description: Returns the Cloud Source Repositories configuration of the project.
      operationId: sourcerepo.projects.getConfig
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: config
      x-stackQL-method: get_config
      x-stackQL-verb: select
