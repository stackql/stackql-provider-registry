openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: BigLake API
  description: >-
    The BigLake API provides access to BigLake Metastore, a serverless, fully
    managed, and highly available metastore for open-source data that can be
    used for querying Apache Iceberg tables in BigQuery.
  version: v1
  x-discovery-doc-revision: '20240902'
  x-generated-date: '2024-09-19'
externalDocs:
  url: https://cloud.google.com/bigquery/
servers:
  - url: https://biglake.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/bigquery: >-
              View and manage your data in Google BigQuery and see the email
              address for your Google Account
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    Catalog:
      id: Catalog
      description: Catalog is the container of databases.
      type: object
      properties:
        name:
          description: >-
            Output only. The resource name. Format:
            projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}
          readOnly: true
          type: string
        createTime:
          description: Output only. The creation time of the catalog.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The last modification time of the catalog.
          readOnly: true
          type: string
          format: google-datetime
        deleteTime:
          description: >-
            Output only. The deletion time of the catalog. Only set after the
            catalog is deleted.
          readOnly: true
          type: string
          format: google-datetime
        expireTime:
          description: >-
            Output only. The time when this catalog is considered expired. Only
            set after the catalog is deleted.
          readOnly: true
          type: string
          format: google-datetime
    ListCatalogsResponse:
      id: ListCatalogsResponse
      description: Response message for the ListCatalogs method.
      type: object
      properties:
        catalogs:
          description: The catalogs from the specified project.
          type: array
          items:
            $ref: '#/components/schemas/Catalog'
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
          type: string
    Database:
      id: Database
      description: Database is the container of tables.
      type: object
      properties:
        hiveOptions:
          description: Options of a Hive database.
          $ref: '#/components/schemas/HiveDatabaseOptions'
        name:
          description: >-
            Output only. The resource name. Format:
            projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}
          readOnly: true
          type: string
        createTime:
          description: Output only. The creation time of the database.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The last modification time of the database.
          readOnly: true
          type: string
          format: google-datetime
        deleteTime:
          description: >-
            Output only. The deletion time of the database. Only set after the
            database is deleted.
          readOnly: true
          type: string
          format: google-datetime
        expireTime:
          description: >-
            Output only. The time when this database is considered expired. Only
            set after the database is deleted.
          readOnly: true
          type: string
          format: google-datetime
        type:
          description: The database type.
          type: string
          enumDescriptions:
            - The type is not specified.
            - >-
              Represents a database storing tables compatible with Hive
              Metastore tables.
          enum:
            - TYPE_UNSPECIFIED
            - HIVE
    HiveDatabaseOptions:
      id: HiveDatabaseOptions
      description: Options of a Hive database.
      type: object
      properties:
        locationUri:
          description: >-
            Cloud Storage folder URI where the database data is stored, starting
            with "gs://".
          type: string
        parameters:
          description: Stores user supplied Hive database parameters.
          type: object
          additionalProperties:
            type: string
    ListDatabasesResponse:
      id: ListDatabasesResponse
      description: Response message for the ListDatabases method.
      type: object
      properties:
        databases:
          description: The databases from the specified catalog.
          type: array
          items:
            $ref: '#/components/schemas/Database'
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
          type: string
    Table:
      id: Table
      description: Represents a table.
      type: object
      properties:
        hiveOptions:
          description: Options of a Hive table.
          $ref: '#/components/schemas/HiveTableOptions'
        name:
          description: >-
            Output only. The resource name. Format:
            projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
          readOnly: true
          type: string
        createTime:
          description: Output only. The creation time of the table.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The last modification time of the table.
          readOnly: true
          type: string
          format: google-datetime
        deleteTime:
          description: >-
            Output only. The deletion time of the table. Only set after the
            table is deleted.
          readOnly: true
          type: string
          format: google-datetime
        expireTime:
          description: >-
            Output only. The time when this table is considered expired. Only
            set after the table is deleted.
          readOnly: true
          type: string
          format: google-datetime
        type:
          description: The table type.
          type: string
          enumDescriptions:
            - The type is not specified.
            - Represents a table compatible with Hive Metastore tables.
          enum:
            - TYPE_UNSPECIFIED
            - HIVE
        etag:
          description: >-
            The checksum of a table object computed by the server based on the
            value of other fields. It may be sent on update requests to ensure
            the client has an up-to-date value before proceeding. It is only
            checked for update table operations.
          type: string
    HiveTableOptions:
      id: HiveTableOptions
      description: Options of a Hive table.
      type: object
      properties:
        parameters:
          description: Stores user supplied Hive table parameters.
          type: object
          additionalProperties:
            type: string
        tableType:
          description: Hive table type. For example, MANAGED_TABLE, EXTERNAL_TABLE.
          type: string
        storageDescriptor:
          description: Stores physical storage information of the data.
          $ref: '#/components/schemas/StorageDescriptor'
    StorageDescriptor:
      id: StorageDescriptor
      description: Stores physical storage information of the data.
      type: object
      properties:
        locationUri:
          description: >-
            Cloud Storage folder URI where the table data is stored, starting
            with "gs://".
          type: string
        inputFormat:
          description: The fully qualified Java class name of the input format.
          type: string
        outputFormat:
          description: The fully qualified Java class name of the output format.
          type: string
        serdeInfo:
          description: Serializer and deserializer information.
          $ref: '#/components/schemas/SerDeInfo'
    SerDeInfo:
      id: SerDeInfo
      description: Serializer and deserializer information.
      type: object
      properties:
        serializationLib:
          description: The fully qualified Java class name of the serialization library.
          type: string
    RenameTableRequest:
      id: RenameTableRequest
      description: Request message for the RenameTable method in MetastoreService
      type: object
      properties:
        newName:
          description: >-
            Required. The new `name` for the specified table, must be in the
            same database. Format:
            projects/{project_id_or_number}/locations/{location_id}/catalogs/{catalog_id}/databases/{database_id}/tables/{table_id}
          type: string
    ListTablesResponse:
      id: ListTablesResponse
      description: Response message for the ListTables method.
      type: object
      properties:
        tables:
          description: The tables from the specified database.
          type: array
          items:
            $ref: '#/components/schemas/Table'
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
          type: string
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    catalogs:
      id: google.biglake.catalogs
      name: catalogs
      title: Catalogs
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.catalogs
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs~1{catalogsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs~1{catalogsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/catalogs/methods/get'
          - $ref: '#/components/x-stackQL-resources/catalogs/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/catalogs/methods/create'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/catalogs/methods/delete'
    databases:
      id: google.biglake.databases
      name: databases
      title: Databases
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs~1{catalogsId}~1databases/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs~1{catalogsId}~1databases/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.databases
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs~1{catalogsId}~1databases~1{databasesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs~1{catalogsId}~1databases~1{databasesId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs~1{catalogsId}~1databases~1{databasesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/databases/methods/get'
          - $ref: '#/components/x-stackQL-resources/databases/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/databases/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/databases/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/databases/methods/delete'
    tables:
      id: google.biglake.tables
      name: tables
      title: Tables
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs~1{catalogsId}~1databases~1{databasesId}~1tables/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs~1{catalogsId}~1databases~1{databasesId}~1tables/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.tables
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs~1{catalogsId}~1databases~1{databasesId}~1tables~1{tablesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs~1{catalogsId}~1databases~1{databasesId}~1tables~1{tablesId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs~1{catalogsId}~1databases~1{databasesId}~1tables~1{tablesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        rename:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1catalogs~1{catalogsId}~1databases~1{databasesId}~1tables~1{tablesId}:rename/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tables/methods/get'
          - $ref: '#/components/x-stackQL-resources/tables/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/tables/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/tables/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/tables/methods/delete'
paths:
  /v1/projects/{projectsId}/locations/{locationsId}/catalogs:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    post:
      description: Creates a new catalog.
      operationId: biglake.projects.locations.catalogs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalog'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: catalogId
          schema:
            type: string
    get:
      description: List all catalogs in a specified project.
      operationId: biglake.projects.locations.catalogs.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCatalogsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}:
    parameters: *ref_1
    delete:
      description: Deletes an existing catalog specified by the catalog ID.
      operationId: biglake.projects.locations.catalogs.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: catalogsId
          required: true
          schema:
            type: string
    get:
      description: Gets the catalog specified by the resource name.
      operationId: biglake.projects.locations.catalogs.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: catalogsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/databases:
    parameters: *ref_1
    post:
      description: Creates a new database.
      operationId: biglake.projects.locations.catalogs.databases.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Database'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: catalogsId
          required: true
          schema:
            type: string
        - in: query
          name: databaseId
          schema:
            type: string
    get:
      description: List all databases in a specified catalog.
      operationId: biglake.projects.locations.catalogs.databases.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDatabasesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: catalogsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/databases/{databasesId}:
    parameters: *ref_1
    delete:
      description: Deletes an existing database specified by the database ID.
      operationId: biglake.projects.locations.catalogs.databases.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: catalogsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
    patch:
      description: Updates an existing database specified by the database ID.
      operationId: biglake.projects.locations.catalogs.databases.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Database'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: catalogsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    get:
      description: Gets the database specified by the resource name.
      operationId: biglake.projects.locations.catalogs.databases.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: catalogsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/databases/{databasesId}/tables:
    parameters: *ref_1
    post:
      description: Creates a new table.
      operationId: biglake.projects.locations.catalogs.databases.tables.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: catalogsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: query
          name: tableId
          schema:
            type: string
    get:
      description: List all tables in a specified database.
      operationId: biglake.projects.locations.catalogs.databases.tables.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTablesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: catalogsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: view
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/databases/{databasesId}/tables/{tablesId}:
    parameters: *ref_1
    delete:
      description: Deletes an existing table specified by the table ID.
      operationId: biglake.projects.locations.catalogs.databases.tables.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: catalogsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: tablesId
          required: true
          schema:
            type: string
    patch:
      description: Updates an existing table specified by the table ID.
      operationId: biglake.projects.locations.catalogs.databases.tables.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: catalogsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: tablesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
    get:
      description: Gets the table specified by the resource name.
      operationId: biglake.projects.locations.catalogs.databases.tables.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: catalogsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: tablesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/catalogs/{catalogsId}/databases/{databasesId}/tables/{tablesId}:rename:
    parameters: *ref_1
    post:
      description: Renames an existing table specified by the table ID.
      operationId: biglake.projects.locations.catalogs.databases.tables.rename
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameTableRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/bigquery
          Oauth2c:
            - https://www.googleapis.com/auth/bigquery
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: catalogsId
          required: true
          schema:
            type: string
        - in: path
          name: databasesId
          required: true
          schema:
            type: string
        - in: path
          name: tablesId
          required: true
          schema:
            type: string
