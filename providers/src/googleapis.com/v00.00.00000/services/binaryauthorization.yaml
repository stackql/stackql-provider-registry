openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Binary Authorization API
  description: 'The management interface for Binary Authorization, a service that provides policy-based deployment validation and control for images deployed to Google Kubernetes Engine (GKE), Anthos Service Mesh, Anthos Clusters, and Cloud Run. '
  version: v1
  x-discovery-doc-revision: '20230804'
  x-generated-date: '2023-09-01'
externalDocs:
  url: 'https://cloud.google.com/binary-authorization/'
servers:
  - url: 'https://binaryauthorization.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    Signature:
      description: 'Verifiers (e.g. Kritis implementations) MUST verify signatures with respect to the trust anchors defined in policy (e.g. a Kritis policy). Typically this means that the verifier has been configured with a map from `public_key_id` to public key material (and any required parameters, e.g. signing algorithm). In particular, verification implementations MUST NOT treat the signature `public_key_id` as anything more than a key lookup hint. The `public_key_id` DOES NOT validate or authenticate a public key; it only provides a mechanism for quickly selecting a public key ALREADY CONFIGURED on the verifier through a trusted channel. Verification implementations MUST reject signatures in any of the following circumstances: * The `public_key_id` is not recognized by the verifier. * The public key that `public_key_id` refers to does not verify the signature with respect to the payload. The `signature` contents SHOULD NOT be "attached" (where the payload is included with the serialized `signature` bytes). Verifiers MUST ignore any "attached" payload and only verify signatures with respect to explicitly provided payload (e.g. a `payload` field on the proto message that holds this Signature, or the canonical serialization of the proto message that holds this signature).'
      properties:
        publicKeyId:
          description: 'The identifier for the public key that verifies this signature. * The `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986 conformant URI. * When possible, the `public_key_id` SHOULD be an immutable reference, such as a cryptographic digest. Examples of valid `public_key_id`s: OpenPGP V4 public key fingerprint: * "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of the DER serialization): * "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" * "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"'
          type: string
        signature:
          type: string
          description: 'The content of the signature, an opaque bytestring. The payload that this signature verifies MUST be unambiguously provided with the Signature during verification. A wrapper message might provide the payload explicitly. Alternatively, a message might have a canonical serialization that can always be unambiguously computed to derive the payload.'
          format: byte
      type: object
      id: Signature
    Expr:
      type: object
      id: Expr
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
      properties:
        description:
          type: string
          description: 'Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.'
        expression:
          type: string
          description: Textual representation of an expression in Common Expression Language syntax.
        location:
          type: string
          description: 'Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.'
        title:
          description: 'Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.'
          type: string
    Empty:
      id: Empty
      properties: {}
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      type: object
    TestIamPermissionsRequest:
      description: Request message for `TestIamPermissions` method.
      id: TestIamPermissionsRequest
      type: object
      properties:
        permissions:
          items:
            type: string
          type: array
          description: 'The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).'
    SetIamPolicyRequest:
      properties:
        policy:
          $ref: '#/components/schemas/IamPolicy'
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
      description: Request message for `SetIamPolicy` method.
      type: object
      id: SetIamPolicyRequest
    ImageFreshnessCheck:
      id: ImageFreshnessCheck
      description: 'An image freshness check, which rejects images that were uploaded before the set number of days ago to the supported repositories.'
      type: object
      properties:
        maxUploadAgeDays:
          type: integer
          format: int32
          description: Required. The max number of days that is allowed since the image was uploaded. Must be greater than zero.
    ValidateAttestationOccurrenceRequest:
      type: object
      description: Request message for ValidationHelperV1.ValidateAttestationOccurrence.
      properties:
        occurrenceNote:
          description: Required. The resource name of the Note to which the containing Occurrence is associated.
          type: string
        occurrenceResourceUri:
          description: Required. The URI of the artifact (e.g. container image) that is the subject of the containing Occurrence.
          type: string
        attestation:
          $ref: '#/components/schemas/AttestationOccurrence'
          description: Required. An AttestationOccurrence to be checked that it can be verified by the Attestor. It does not have to be an existing entity in Container Analysis. It must otherwise be a valid AttestationOccurrence.
      id: ValidateAttestationOccurrenceRequest
    PkixPublicKeySet:
      id: PkixPublicKeySet
      description: 'A bundle of PKIX public keys, used to authenticate attestation signatures. Generally, a signature is considered to be authenticated by a PkixPublicKeySet if any of the public keys verify it (i.e. it is an "OR" of the keys).'
      type: object
      properties:
        pkixPublicKeys:
          description: Required. `pkix_public_keys` must have at least one entry.
          items:
            $ref: '#/components/schemas/PkixPublicKey'
          type: array
    Binding:
      type: object
      description: 'Associates `members`, or principals, with a `role`.'
      id: Binding
      properties:
        members:
          type: array
          items:
            type: string
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.'
        condition:
          $ref: '#/components/schemas/Expr'
          description: 'The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
        role:
          type: string
          description: 'Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.'
    TrustedDirectoryCheck:
      type: object
      description: 'A trusted directory check, which rejects images that do not come from the set of user-configured trusted directories.'
      properties:
        trustedDirPatterns:
          description: 'Required. List of trusted directory patterns. A pattern is in the form "registry/path/to/directory". The registry domain part is defined as two or more dot-separated words, e.g., us.pkg.dev, or gcr.io. Additionally, * can be used in three ways as wildcards: 1. leading * to match varying prefixes in registry subdomain (useful for location prefixes); 2. trailing * after registry/ to match varying endings; 3. trailing ** after registry/ to match "/" as well. For example: -- gcr.io/my-project/my-repo is valid to match a single directory -- *-docker.pkg.dev/my-project/my-repo or *.gcr.io/my-project are valid to match varying prefixes -- gcr.io/my-project/* will match all direct directories in my-project -- gcr.io/my-project/** would match all directories in my-project -- gcr.i* is not allowed since the registry is not completely specified -- sub*domain.gcr.io/nginx is not valid because only leading * or trailing * are allowed. -- *pkg.dev/my-project/my-repo is not valid because leading * can only match subdomain -- **-docker.pkg.dev is not valid because one leading * is allowed, and that it cannot match "/"'
          items:
            type: string
          type: array
      id: TrustedDirectoryCheck
    UserOwnedGrafeasNote:
      id: UserOwnedGrafeasNote
      type: object
      description: An user owned Grafeas note references a Grafeas Attestation.Authority Note created by the user.
      properties:
        noteReference:
          type: string
          description: 'Required. The Grafeas resource name of a Attestation.Authority Note, created by the user, in the format: `projects/*/notes/*`. This field may not be updated. An attestation by this attestor is stored as a Grafeas Attestation.Authority Occurrence that names a container image and that links to this Note. Grafeas is an external dependency.'
        publicKeys:
          items:
            $ref: '#/components/schemas/AttestorPublicKey'
          description: 'Optional. Public keys that verify attestations signed by this attestor. This field may be updated. If this field is non-empty, one of the specified public keys must verify that an attestation was signed by this attestor for the image specified in the admission request. If this field is empty, this attestor always returns that no valid attestations exist.'
          type: array
        delegationServiceAccountEmail:
          type: string
          description: 'Output only. This field will contain the service account email address that this Attestor will use as the principal when querying Container Analysis. Attestor administrators must grant this service account the IAM role needed to read attestations from the note_reference in Container Analysis (`containeranalysis.notes.occurrences.viewer`). This email address is fixed for the lifetime of the Attestor, but callers should not make any other assumptions about the service account email; future versions may use an email based on a different naming pattern.'
          readOnly: true
    AttestorPublicKey:
      id: AttestorPublicKey
      type: object
      properties:
        pkixPublicKey:
          description: 'A raw PKIX SubjectPublicKeyInfo format public key. NOTE: `id` may be explicitly provided by the caller when using this type of public key, but it MUST be a valid RFC3986 URI. If `id` is left blank, a default one will be computed based on the digest of the DER encoding of the public key.'
          $ref: '#/components/schemas/PkixPublicKey'
        id:
          description: 'The ID of this public key. Signatures verified by BinAuthz must include the ID of the public key that can be used to verify them, and that ID must match the contents of this field exactly. Additional restrictions on this field can be imposed based on which public key type is encapsulated. See the documentation on `public_key` cases below for details.'
          type: string
        asciiArmoredPgpPublicKey:
          type: string
          description: 'ASCII-armored representation of a PGP public key, as the entire output by the command `gpg --export --armor foo@example.com` (either LF or CRLF line endings). When using this field, `id` should be left blank. The BinAuthz API handlers will calculate the ID and fill it in automatically. BinAuthz computes this ID as the OpenPGP RFC4880 V4 fingerprint, represented as upper-case hex. If `id` is provided by the caller, it will be overwritten by the API-calculated ID.'
        comment:
          description: Optional. A descriptive comment. This field may be updated.
          type: string
      description: An attestor public key that will be used to verify attestations signed by this attestor.
    IamPolicy:
      properties:
        etag:
          type: string
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
          format: byte
        version:
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
          type: integer
          format: int32
        bindings:
          items:
            $ref: '#/components/schemas/Binding'
          type: array
          description: 'Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.'
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
      id: IamPolicy
      type: object
    AttestationAuthenticator:
      id: AttestationAuthenticator
      type: object
      description: 'An attestation authenticator that will be used to verify attestations. Typically this is just a set of public keys. Conceptually, an authenticator can be treated as always returning either "authenticated" or "not authenticated" when presented with a signed attestation (almost always assumed to be a [DSSE](https://github.com/secure-systems-lab/dsse) attestation). The details of how an authenticator makes this decision are specific to the type of ''authenticator'' that this message wraps.'
      properties:
        displayName:
          type: string
          description: Optional. A user-provided name for this AttestationAuthenticator. This field has no effect on the policy evaluation behavior except to improve readability of messages in evaluation results.
        pkixPublicKeySet:
          description: 'Optional. A set of raw PKIX SubjectPublicKeyInfo format public keys. If any public key in the set validates the attestation signature, then the signature is considered authenticated (i.e. any one key is sufficient to authenticate).'
          $ref: '#/components/schemas/PkixPublicKeySet'
    Jwt:
      properties:
        compactJwt:
          type: string
          description: 'The compact encoding of a JWS, which is always three base64 encoded strings joined by periods. For details, see: https://tools.ietf.org/html/rfc7515.html#section-3.1'
      type: object
      id: Jwt
    Policy:
      description: A policy for container image binary authorization.
      properties:
        defaultAdmissionRule:
          description: 'Required. Default admission rule for a cluster without a per-cluster, per- kubernetes-service-account, or per-istio-service-identity admission rule.'
          $ref: '#/components/schemas/AdmissionRule'
        updateTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. Time when the policy was last updated.
        etag:
          description: 'Optional. A checksum, returned by the server, that can be sent on update requests to ensure the policy has an up-to-date value before attempting to update it. See https://google.aip.dev/154.'
          type: string
        kubernetesNamespaceAdmissionRules:
          description: 'Optional. Per-kubernetes-namespace admission rules. K8s namespace spec format: `[a-z.-]+`, e.g. `some-namespace`'
          additionalProperties:
            $ref: '#/components/schemas/AdmissionRule'
          type: object
        istioServiceIdentityAdmissionRules:
          additionalProperties:
            $ref: '#/components/schemas/AdmissionRule'
          description: 'Optional. Per-istio-service-identity admission rules. Istio service identity spec format: `spiffe:///ns//sa/` or `/ns//sa/` e.g. `spiffe://example.com/ns/test-ns/sa/default`'
          type: object
        clusterAdmissionRules:
          type: object
          description: 'Optional. Per-cluster admission rules. Cluster spec format: `location.clusterId`. There can be at most one admission rule per cluster spec. A `location` is either a compute zone (e.g. us-central1-a) or a region (e.g. us-central1). For `clusterId` syntax restrictions see https://cloud.google.com/container-engine/reference/rest/v1/projects.zones.clusters.'
          additionalProperties:
            $ref: '#/components/schemas/AdmissionRule'
        kubernetesServiceAccountAdmissionRules:
          additionalProperties:
            $ref: '#/components/schemas/AdmissionRule'
          description: 'Optional. Per-kubernetes-service-account admission rules. Service account spec format: `namespace:serviceaccount`. e.g. `test-ns:default`'
          type: object
        description:
          description: Optional. A descriptive comment.
          type: string
        name:
          readOnly: true
          type: string
          description: 'Output only. The resource name, in the format `projects/*/policy`. There is at most one policy per project.'
        admissionWhitelistPatterns:
          items:
            $ref: '#/components/schemas/AdmissionWhitelistPattern'
          type: array
          description: Optional. Admission policy allowlisting. A matching admission request will always be permitted. This feature is typically used to exclude Google or third-party infrastructure images from Binary Authorization policies.
        globalPolicyEvaluationMode:
          type: string
          description: Optional. Controls the evaluation of a Google-maintained global admission policy for common system-level images. Images not covered by the global policy will be subject to the project admission policy. This setting has no effect when specified inside a global admission policy.
          enum:
            - GLOBAL_POLICY_EVALUATION_MODE_UNSPECIFIED
            - ENABLE
            - DISABLE
          enumDescriptions:
            - 'Not specified: DISABLE is assumed.'
            - Enables system policy evaluation.
            - Disables system policy evaluation.
      type: object
      id: Policy
    Check:
      properties:
        vulnerabilityCheck:
          description: 'Optional. Require that an image does not contain vulnerabilities that violate the configured rules, such as based on severity levels.'
          $ref: '#/components/schemas/VulnerabilityCheck'
        displayName:
          type: string
          description: Optional. A user-provided name for this Check. This field has no effect on the policy evaluation behavior except to improve readability of messages in evaluation results.
        imageFreshnessCheck:
          $ref: '#/components/schemas/ImageFreshnessCheck'
          description: Optional. Require that an image is no older than a configured expiration time. Image age is determined by its upload time.
        trustedDirectoryCheck:
          $ref: '#/components/schemas/TrustedDirectoryCheck'
          description: Optional. Require that an image lives in a trusted directory.
        alwaysDeny:
          description: 'Optional. A special-case check that always denies. Note that this still only applies when the scope of the CheckSet applies and the image isn''t exempted by an image allowlist. This check is primarily useful for testing, or to set the default behavior for all unmatched scopes to "deny".'
          type: boolean
        simpleSigningAttestationCheck:
          description: Optional. Require a SimpleSigning-type attestation for every image in the deployment.
          $ref: '#/components/schemas/SimpleSigningAttestationCheck'
        slsaCheck:
          description: 'Optional. Require that an image was built by a trusted builder (such as Google Cloud Build or GitHub), meets requirements for Supply chain Levels for Software Artifacts (SLSA), and was built from a trusted source code repostitory.'
          $ref: '#/components/schemas/SlsaCheck'
        imageAllowlist:
          description: 'Optional. Images exempted from this Check. If any of the patterns match the image url, the check will not be evaluated.'
          $ref: '#/components/schemas/ImageAllowlist'
      id: Check
      type: object
      description: 'A single check to perform against a Pod. Checks are grouped into CheckSets, which are defined by the top-level policy.'
    GkePolicy:
      description: A Binary Authorization policy for a GKE cluster. This is one type of policy that can occur as a `PlatformPolicy`.
      type: object
      id: GkePolicy
      properties:
        checkSets:
          items:
            $ref: '#/components/schemas/CheckSet'
          type: array
          description: 'Optional. The CheckSets to apply, scoped by namespace or namespace and service account. Exactly one CheckSet will be evaluated for a given Pod (unless the list is empty, in which case the behavior is "always allow"). If multiple CheckSets have scopes that match the namespace and service account of the Pod being evaluated, only the CheckSet with the MOST SPECIFIC scope will match. CheckSets must be listed in order of decreasing specificity, i.e. if a scope matches a given service account (which must include the namespace), it must come before a CheckSet with a scope matching just that namespace. This property is enforced by server-side validation. The purpose of this restriction is to ensure that if more than one CheckSet matches a given Pod, the CheckSet that will be evaluated will always be the first in the list to match (because if any other matches, it must be less specific). If `check_sets` is empty, the default behavior is to allow all images. If `check_sets` is non-empty, the last `check_sets` entry must always be a CheckSet with no scope set, i.e. a catchall to handle any situation not caught by the preceding CheckSets.'
        imageAllowlist:
          $ref: '#/components/schemas/ImageAllowlist'
          description: 'Optional. Images exempted from this policy. If any of the patterns match the image being evaluated, the rest of the policy will not be evaluated.'
    TestIamPermissionsResponse:
      properties:
        permissions:
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
          type: array
          items:
            type: string
      type: object
      description: Response message for `TestIamPermissions` method.
      id: TestIamPermissionsResponse
    ListPlatformPoliciesResponse:
      type: object
      description: Response message for PlatformPolicyManagementService.ListPlatformPolicies.
      id: ListPlatformPoliciesResponse
      properties:
        platformPolicies:
          items:
            $ref: '#/components/schemas/PlatformPolicy'
          description: The list of platform policies.
          type: array
        nextPageToken:
          description: A token to retrieve the next page of results. Pass this value in the ListPlatformPoliciesRequest.page_token field in the subsequent call to the `ListPlatformPolicies` method to retrieve the next page of results.
          type: string
    ListAttestorsResponse:
      description: Response message for BinauthzManagementService.ListAttestors.
      id: ListAttestorsResponse
      properties:
        nextPageToken:
          description: A token to retrieve the next page of results. Pass this value in the ListAttestorsRequest.page_token field in the subsequent call to the `ListAttestors` method to retrieve the next page of results.
          type: string
        attestors:
          description: The list of attestors.
          items:
            $ref: '#/components/schemas/Attestor'
          type: array
      type: object
    VerificationRule:
      type: object
      properties:
        trustedSourceRepoPatterns:
          description: 'List of trusted source code repository URL patterns. These patterns match the full repository URL without its scheme (e.g. "https://"). The patterns must not include schemes. For example, the pattern "source.cloud.google.com/my-project/my-repo-name" matches the following URLs: - "source.cloud.google.com/my-project/my-repo-name" - "git+ssh://source.cloud.google.com/my-project/my-repo-name" - "https://source.cloud.google.com/my-project/my-repo-name" A pattern matches a URL either exactly or with * wildcards. * can be used in only two ways: 1. trailing * after hosturi/ to match varying endings; 2. trailing ** after hosturi/ to match "/" as well. * and ** can only be used as wildcards and can only occur at the end of the pattern after a /. (So it''s not possible to match a URL that contains literal *.) For example: - "github.com/my-project/my-repo" is valid to match a single repo - "github.com/my-project/*" will match all direct repos in my-project - "github.com/**" matches all repos in GitHub'
          type: array
          items:
            type: string
        trustedBuilder:
          enum:
            - BUILDER_UNSPECIFIED
            - GOOGLE_CLOUD_BUILD
          enumDescriptions:
            - Should never happen.
            - 'The whole Google Cloud Build (GCB) builder group, including all GCB builder types.'
          type: string
          description: 'Each verification rule is used for evaluation against provenances generated by a specific builder (group). For some of the builders, such as the Google Cloud Build, users don''t need to explicitly specify their roots of trust in the policy since the evaluation service can automatically fetch them based on the builder (group).'
        attestationSource:
          $ref: '#/components/schemas/AttestationSource'
          description: Specifies where to fetch the provenances attestations generated by the builder (group).
        configBasedBuildRequired:
          type: boolean
          description: 'If true, require the image to be built from a top-level configuration. trusted_source_repo patterns specifies the repositories containing this configuration.'
      id: VerificationRule
      description: 'Specifies verification rules for evaluating the SLSA attestations including: which builders to trust, where to fetch the SLSA attestations generated by those builders, and other builder-specific evaluation rules such as which source repositories are trusted. An image is considered verified by the rule if any of the fetched SLSA attestations is verified.'
    PlatformPolicy:
      id: PlatformPolicy
      description: A Binary Authorization platform policy for deployments on various platforms.
      type: object
      properties:
        name:
          type: string
          description: 'Output only. The relative resource name of the BinAuthz platform policy, in the form of `projects/*/platforms/*/policies/*`.'
          readOnly: true
        updateTime:
          format: google-datetime
          description: Output only. Time when the policy was last updated.
          type: string
          readOnly: true
        description:
          description: Optional. A description comment about the policy.
          type: string
        gkePolicy:
          description: Optional. GKE platform-specific policy.
          $ref: '#/components/schemas/GkePolicy'
    Attestor:
      id: Attestor
      properties:
        userOwnedGrafeasNote:
          description: 'This specifies how an attestation will be read, and how it will be used during policy enforcement.'
          $ref: '#/components/schemas/UserOwnedGrafeasNote'
        description:
          type: string
          description: Optional. A descriptive comment. This field may be updated. The field may be displayed in chooser dialogs.
        etag:
          type: string
          description: 'Optional. A checksum, returned by the server, that can be sent on update requests to ensure the attestor has an up-to-date value before attempting to update it. See https://google.aip.dev/154.'
        updateTime:
          format: google-datetime
          description: Output only. Time when the attestor was last updated.
          type: string
          readOnly: true
        name:
          description: 'Required. The resource name, in the format: `projects/*/attestors/*`. This field may not be updated.'
          type: string
      type: object
      description: An attestor that attests to container image artifacts. An existing attestor cannot be modified except where indicated.
    ValidateAttestationOccurrenceResponse:
      type: object
      properties:
        denialReason:
          type: string
          description: The reason for denial if the Attestation couldn't be validated.
        result:
          description: The result of the Attestation validation.
          enum:
            - RESULT_UNSPECIFIED
            - VERIFIED
            - ATTESTATION_NOT_VERIFIABLE
          enumDescriptions:
            - Unspecified.
            - The Attestation was able to verified by the Attestor.
            - The Attestation was not able to verified by the Attestor.
          type: string
      id: ValidateAttestationOccurrenceResponse
      description: Response message for ValidationHelperV1.ValidateAttestationOccurrence.
    AdmissionRule:
      properties:
        evaluationMode:
          type: string
          enum:
            - EVALUATION_MODE_UNSPECIFIED
            - ALWAYS_ALLOW
            - REQUIRE_ATTESTATION
            - ALWAYS_DENY
          enumDescriptions:
            - Do not use.
            - This rule allows all all pod creations.
            - This rule allows a pod creation if all the attestors listed in `require_attestations_by` have valid attestations for all of the images in the pod spec.
            - This rule denies all pod creations.
          description: Required. How this admission rule will be evaluated.
        enforcementMode:
          enumDescriptions:
            - Do not use.
            - Enforce the admission rule by blocking the pod creation.
            - 'Dryrun mode: Audit logging only. This will allow the pod creation as if the admission request had specified break-glass.'
          type: string
          enum:
            - ENFORCEMENT_MODE_UNSPECIFIED
            - ENFORCED_BLOCK_AND_AUDIT_LOG
            - DRYRUN_AUDIT_LOG_ONLY
          description: Required. The action when a pod creation is denied by the admission rule.
        requireAttestationsBy:
          type: array
          items:
            type: string
          description: 'Optional. The resource names of the attestors that must attest to a container image, in the format `projects/*/attestors/*`. Each attestor must exist before a policy can reference it. To add an attestor to a policy the principal issuing the policy change request must be able to read the attestor resource. Note: this field must be non-empty when the evaluation_mode field specifies REQUIRE_ATTESTATION, otherwise it must be empty.'
      id: AdmissionRule
      description: 'An admission rule specifies either that all container images used in a pod creation request must be attested to by one or more attestors, that all pod creations will be allowed, or that all pod creations will be denied. Images matching an admission allowlist pattern are exempted from admission rules and will never block a pod creation.'
      type: object
    ImageAllowlist:
      id: ImageAllowlist
      type: object
      description: Images that are exempted from normal checks based on name pattern only.
      properties:
        allowPattern:
          description: 'Required. A disjunction of image patterns to allow. If any of these patterns match, then the image is considered exempted by this allowlist.'
          type: array
          items:
            type: string
    PkixPublicKey:
      description: 'A public key in the PkixPublicKey format (see https://tools.ietf.org/html/rfc5280#section-4.1.2.7 for details). Public keys of this type are typically textually encoded using the PEM format.'
      type: object
      properties:
        signatureAlgorithm:
          description: The signature algorithm used to verify a message against a signature using this key. These signature algorithm must match the structure and any object identifiers encoded in `public_key_pem` (i.e. this algorithm must match that of the public key).
          enumDescriptions:
            - Not specified.
            - RSASSA-PSS 2048 bit key with a SHA256 digest.
            - RSASSA-PSS 2048 bit key with a SHA256 digest.
            - RSASSA-PSS 3072 bit key with a SHA256 digest.
            - RSASSA-PSS 3072 bit key with a SHA256 digest.
            - RSASSA-PSS 4096 bit key with a SHA256 digest.
            - RSASSA-PSS 4096 bit key with a SHA256 digest.
            - RSASSA-PSS 4096 bit key with a SHA512 digest.
            - RSASSA-PSS 4096 bit key with a SHA512 digest.
            - RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
            - RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
            - ECDSA on the NIST P-256 curve with a SHA256 digest.
            - ECDSA on the NIST P-256 curve with a SHA256 digest.
            - ECDSA on the NIST P-384 curve with a SHA384 digest.
            - ECDSA on the NIST P-384 curve with a SHA384 digest.
            - ECDSA on the NIST P-521 curve with a SHA512 digest.
            - ECDSA on the NIST P-521 curve with a SHA512 digest.
          type: string
          enum:
            - SIGNATURE_ALGORITHM_UNSPECIFIED
            - RSA_PSS_2048_SHA256
            - RSA_SIGN_PSS_2048_SHA256
            - RSA_PSS_3072_SHA256
            - RSA_SIGN_PSS_3072_SHA256
            - RSA_PSS_4096_SHA256
            - RSA_SIGN_PSS_4096_SHA256
            - RSA_PSS_4096_SHA512
            - RSA_SIGN_PSS_4096_SHA512
            - RSA_SIGN_PKCS1_2048_SHA256
            - RSA_SIGN_PKCS1_3072_SHA256
            - RSA_SIGN_PKCS1_4096_SHA256
            - RSA_SIGN_PKCS1_4096_SHA512
            - ECDSA_P256_SHA256
            - EC_SIGN_P256_SHA256
            - ECDSA_P384_SHA384
            - EC_SIGN_P384_SHA384
            - ECDSA_P521_SHA512
            - EC_SIGN_P521_SHA512
        publicKeyPem:
          description: 'A PEM-encoded public key, as described in https://tools.ietf.org/html/rfc7468#section-13'
          type: string
      id: PkixPublicKey
    CheckSet:
      type: object
      id: CheckSet
      properties:
        displayName:
          type: string
          description: Optional. A user-provided name for this CheckSet. This field has no effect on the policy evaluation behavior except to improve readability of messages in evaluation results.
        scope:
          description: 'Optional. The scope to which this CheckSet applies. If unset or an empty string (the default), applies to all namespaces and service accounts. See the Scope message documentation for details on scoping rules.'
          $ref: '#/components/schemas/Scope'
        imageAllowlist:
          $ref: '#/components/schemas/ImageAllowlist'
          description: 'Optional. Images exempted from this CheckSet. If any of the patterns match the image being evaluated, no checks in the CheckSet will be evaluated.'
        checks:
          items:
            $ref: '#/components/schemas/Check'
          type: array
          description: 'Optional. The checks to apply. The ultimate result of evaluating the check set will be "allow" if and only if every check in ''checks'' evaluates to "allow". If `checks` is empty, the default behavior is "always allow".'
      description: 'A conjunction of policy checks, scoped to a particular namespace or Kubernetes service account. In order for evaluation of a CheckSet to return "allowed" for a given image in a given Pod, one of the following conditions must be satisfied: * The image is explicitly exempted by an entry in `image_allowlist`, OR * ALL of the `checks` evaluate to "allowed".'
    SlsaCheck:
      id: SlsaCheck
      description: 'A SLSA provenance attestation check, which ensures that images are built by a trusted builder using source code from its trusted repositories only.'
      properties:
        rules:
          description: Specifies a list of verification rules for the SLSA attestations. An image is considered compliant with the SlsaCheck if any of the rules are satisfied.
          type: array
          items:
            $ref: '#/components/schemas/VerificationRule'
      type: object
    AttestationOccurrence:
      type: object
      properties:
        jwts:
          items:
            $ref: '#/components/schemas/Jwt'
          description: 'One or more JWTs encoding a self-contained attestation. Each JWT encodes the payload that it verifies within the JWT itself. Verifier implementation SHOULD ignore the `serialized_payload` field when verifying these JWTs. If only JWTs are present on this AttestationOccurrence, then the `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim specific to the `resource_uri` of this Occurrence, but this is not validated by Grafeas metadata API implementations. The JWT itself is opaque to Grafeas.'
          type: array
        serializedPayload:
          description: Required. The serialized payload that is verified by one or more `signatures`.
          type: string
          format: byte
        signatures:
          description: One or more signatures over `serialized_payload`. Verifier implementations should consider this attestation message verified if at least one `signature` verifies `serialized_payload`. See `Signature` in common.proto for more details on signature structure and verification.
          type: array
          items:
            $ref: '#/components/schemas/Signature'
      description: 'Occurrence that represents a single "attestation". The authenticity of an attestation can be verified using the attached signature. If the verifier trusts the public key of the signer, then verifying the signature is sufficient to establish trust. In this circumstance, the authority to which this attestation is attached is primarily useful for lookup (how to find this attestation if you already know the authority and artifact to be verified) and intent (for which authority this attestation was intended to sign.'
      id: AttestationOccurrence
    Scope:
      type: object
      properties:
        kubernetesNamespace:
          type: string
          description: 'Optional. Matches all Kubernetes service accounts in the provided namespace, unless a more specific `kubernetes_service_account` scope already matched.'
        kubernetesServiceAccount:
          description: 'Optional. Matches a single Kubernetes service account, e.g. ''my-namespace:my-service-account''. `kubernetes_service_account` scope is always more specific than `kubernetes_namespace` scope for the same namespace.'
          type: string
      id: Scope
      description: A scope specifier for CheckSets.
    SimpleSigningAttestationCheck:
      properties:
        containerAnalysisAttestationProjects:
          type: array
          description: 'Optional. The projects where attestations are stored as Container Analysis Occurrences. Only one attestation needs to successfully verify an image for this check to pass, so a single verified attestation found in any of `container_analysis_attestation_projects` is sufficient for the check to pass. When fetching Occurrences from Container Analysis, only ''AttestationOccurrence'' kinds are considered. In the future, additional Occurrence kinds may be added to the query.'
          items:
            type: string
        attestationAuthenticators:
          items:
            $ref: '#/components/schemas/AttestationAuthenticator'
          description: 'Required. The authenticators required by this check to verify an attestation. Typically this is one or more PKIX public keys for signature verification. Only one authenticator needs to consider an attestation verified in order for an attestation to be considered fully authenticated. In otherwords, this list of authenticators is an "OR" of the authenticator results. At least one authenticator is required.'
          type: array
      type: object
      description: 'Require a signed [DSSE](https://github.com/secure-systems-lab/dsse) attestation with type SimpleSigning.'
      id: SimpleSigningAttestationCheck
    VulnerabilityCheck:
      description: 'An image vulnerability check, which rejects images that violate the configured vulnerability rules.'
      properties:
        maximumFixableSeverity:
          description: Required. The threshold for severity for which a fix is currently available. This field is required and must be set.
          enumDescriptions:
            - Not specified.
            - Block any vulnerability.
            - Allow only minimal severity.
            - Allow only low severity and lower.
            - Allow medium severity and lower.
            - Allow high severity and lower.
            - Allow critical severity and lower.
            - 'Allow all severity, even vulnerability with unspecified severity.'
          type: string
          enum:
            - MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED
            - BLOCK_ALL
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
            - ALLOW_ALL
        blockedCves:
          description: 'Optional. A list of specific CVEs to always raise warnings about even if the vulnerability level meets maximumUnfixableSeverity or maximumFixableSeverity. CVEs are listed in the format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will block vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.'
          type: array
          items:
            type: string
        allowedCves:
          description: 'Optional. A list of specific CVEs to ignore even if the vulnerability level violates maximumUnfixableSeverity or maximumFixableSeverity. CVEs are listed in the format of Container Analysis note id. For example: - CVE-2021-20305 - CVE-2020-10543 The CVEs are applicable regardless of note provider project, e.g., an entry of `CVE-2021-20305` will allow vulnerabilities with a note name of either `projects/goog-vulnz/notes/CVE-2021-20305` or `projects/CUSTOM-PROJECT/notes/CVE-2021-20305`.'
          items:
            type: string
          type: array
        containerAnalysisVulnerabilityProjects:
          description: 'Optional. The projects where vulnerabilities are stored as Container Analysis Occurrences. Each project is expressed in the resource format of `projects/[PROJECT_ID]`, e.g., projects/my-gcp-project. An attempt will be made for each project to fetch vulnerabilities, and all valid vulnerabilities will be used to check against the vulnerability policy. If no valid scan is found in all projects configured here, an error will be returned for the check.'
          type: array
          items:
            type: string
        maximumUnfixableSeverity:
          enum:
            - MAXIMUM_ALLOWED_SEVERITY_UNSPECIFIED
            - BLOCK_ALL
            - MINIMAL
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
            - ALLOW_ALL
          enumDescriptions:
            - Not specified.
            - Block any vulnerability.
            - Allow only minimal severity.
            - Allow only low severity and lower.
            - Allow medium severity and lower.
            - Allow high severity and lower.
            - Allow critical severity and lower.
            - 'Allow all severity, even vulnerability with unspecified severity.'
          type: string
          description: Required. The threshold for severity for which a fix isn't currently available. This field is required and must be set.
      type: object
      id: VulnerabilityCheck
    AdmissionWhitelistPattern:
      id: AdmissionWhitelistPattern
      description: An admission allowlist pattern exempts images from checks by admission rules.
      properties:
        namePattern:
          description: 'An image name pattern to allowlist, in the form `registry/path/to/image`. This supports a trailing `*` wildcard, but this is allowed only in text after the `registry/` part. This also supports a trailing `**` wildcard which matches subdirectories of a given entry.'
          type: string
      type: object
    AttestationSource:
      type: object
      id: AttestationSource
      properties:
        containerAnalysisAttestationProjects:
          items:
            type: string
          description: The ids of the GCP projects storing the SLSA attestations as container analysis Occurrences.
          type: array
      description: Specifies the locations for fetching the provenance attestations.
  parameters:
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    systempolicy_policy:
      id: google.binaryauthorization.systempolicy_policy
      name: systempolicy_policy
      title: Systempolicy Policy
      methods:
        get_policy:
          operation:
            $ref: '#/paths/~1v1~1locations~1{locationsId}~1policy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/systempolicy_policy/methods/get_policy'
        insert: []
        update: []
        delete: []
    policy:
      id: google.binaryauthorization.policy
      name: policy
      title: Policy
      methods:
        update_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1policy/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1policy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/policy/methods/get_policy'
        insert: []
        update: []
        delete: []
    attestors_iam_policies:
      id: google.binaryauthorization.attestors_iam_policies
      name: attestors_iam_policies
      title: Attestors Iam Policies
      methods:
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1attestors~1{attestorsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1attestors~1{attestorsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1attestors~1{attestorsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1attestors~1{attestorsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/attestors_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    attestors:
      id: google.binaryauthorization.attestors
      name: attestors
      title: Attestors
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1attestors~1{attestorsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1attestors~1{attestorsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1attestors~1{attestorsId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        validate_attestation_occurrence:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1attestors~1{attestorsId}:validateAttestationOccurrence/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1attestors/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.attestors
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1attestors/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1attestors/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/attestors/methods/get'
          - $ref: '#/components/x-stackQL-resources/attestors/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/attestors/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/attestors/methods/delete'
    policy_iam_policies:
      id: google.binaryauthorization.policy_iam_policies
      name: policy_iam_policies
      title: Policy Iam Policies
      methods:
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1policy:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1policy:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1policy:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1policy:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/policy_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    policies:
      id: google.binaryauthorization.policies
      name: policies
      title: Policies
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1platforms~1{platformsId}~1policies~1{policiesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        replace_platform_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1platforms~1{platformsId}~1policies~1{policiesId}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1platforms~1{platformsId}~1policies~1{policiesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1platforms~1{platformsId}~1policies/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.platformPolicies
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1platforms~1{platformsId}~1policies/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1platforms~1{platformsId}~1policies/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/policies/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/policies/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/policies/methods/delete'
paths:
  '/v1/locations/{locationsId}/policy':
    parameters: &ref_1
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: Gets the current system policy in the specified location.
      operationId: binaryauthorization.systempolicy.getPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: systempolicy_policy
      x-stackQL-method: get_policy
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/policy':
    parameters: *ref_1
    put:
      description: 'Creates or updates a project''s policy, and returns a copy of the new policy. A policy is always updated as a whole, to avoid race conditions with concurrent policy enforcement (or management!) requests. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed.'
      operationId: binaryauthorization.projects.updatePolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: policy
      x-stackQL-method: update_policy
      x-stackQL-verb: exec
    get:
      description: 'A policy specifies the attestors that must attest to a container image, before the project is allowed to deploy that image. There is at most one policy per project. All image admission requests are permitted if a project has no policy. Gets the policy for this project. Returns a default policy if the project does not have one.'
      operationId: binaryauthorization.projects.getPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: policy
      x-stackQL-method: get_policy
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/attestors/{attestorsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: binaryauthorization.projects.attestors.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IamPolicy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: attestorsId
          required: true
          schema:
            type: string
      x-stackQL-resource: attestors_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/attestors/{attestorsId}':
    parameters: *ref_1
    get:
      description: Gets an attestor. Returns NOT_FOUND if the attestor does not exist.
      operationId: binaryauthorization.projects.attestors.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attestor'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: attestorsId
          required: true
          schema:
            type: string
      x-stackQL-resource: attestors
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: Deletes an attestor. Returns NOT_FOUND if the attestor does not exist.
      operationId: binaryauthorization.projects.attestors.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: attestorsId
          required: true
          schema:
            type: string
      x-stackQL-resource: attestors
      x-stackQL-method: delete
      x-stackQL-verb: delete
    put:
      description: Updates an attestor. Returns NOT_FOUND if the attestor does not exist.
      operationId: binaryauthorization.projects.attestors.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attestor'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attestor'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: attestorsId
          required: true
          schema:
            type: string
      x-stackQL-resource: attestors
      x-stackQL-method: update
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/attestors/{attestorsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: binaryauthorization.projects.attestors.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IamPolicy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: attestorsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: attestors_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/attestors/{attestorsId}:validateAttestationOccurrence':
    parameters: *ref_1
    post:
      description: Returns whether the given Attestation for the given image URI was signed by the given Attestor
      operationId: binaryauthorization.projects.attestors.validateAttestationOccurrence
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateAttestationOccurrenceRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateAttestationOccurrenceResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: attestorsId
          required: true
          schema:
            type: string
      x-stackQL-resource: attestors
      x-stackQL-method: validate_attestation_occurrence
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/attestors/{attestorsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: binaryauthorization.projects.attestors.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: attestorsId
          required: true
          schema:
            type: string
      x-stackQL-resource: attestors_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/attestors':
    parameters: *ref_1
    get:
      description: Lists attestors. Returns INVALID_ARGUMENT if the project does not exist.
      operationId: binaryauthorization.projects.attestors.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAttestorsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: attestors
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.attestors
    post:
      description: 'Creates an attestor, and returns a copy of the new attestor. Returns NOT_FOUND if the project does not exist, INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the attestor already exists.'
      operationId: binaryauthorization.projects.attestors.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attestor'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attestor'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: attestorId
          schema:
            type: string
      x-stackQL-resource: attestors
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/policy:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: binaryauthorization.projects.policy.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IamPolicy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: policy_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/policy:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: binaryauthorization.projects.policy.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IamPolicy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: policy_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1/projects/{projectsId}/policy:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: binaryauthorization.projects.policy.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: policy_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/platforms/{platformsId}/policies/{policiesId}':
    parameters: *ref_1
    get:
      description: Gets a platform policy. Returns NOT_FOUND if the policy doesn't exist.
      operationId: binaryauthorization.projects.platforms.policies.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPolicy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: platformsId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-method: get
      x-stackQL-verb: select
    put:
      description: Replaces a platform policy. Returns NOT_FOUND if the policy doesn't exist.
      operationId: binaryauthorization.projects.platforms.policies.replacePlatformPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformPolicy'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPolicy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: platformsId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-method: replace_platform_policy
      x-stackQL-verb: exec
    delete:
      description: Deletes a platform policy. Returns NOT_FOUND if the policy doesn't exist.
      operationId: binaryauthorization.projects.platforms.policies.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: platformsId
          required: true
          schema:
            type: string
        - in: path
          name: policiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/platforms/{platformsId}/policies':
    parameters: *ref_1
    get:
      description: Lists platform policies owned by a project in the specified platform. Returns INVALID_ARGUMENT if the project or the platform doesn't exist.
      operationId: binaryauthorization.projects.platforms.policies.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPlatformPoliciesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: platformsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: policies
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.platformPolicies
    post:
      description: 'Creates a platform policy, and returns a copy of it. Returns NOT_FOUND if the project or platform doesn''t exist, INVALID_ARGUMENT if the request is malformed, ALREADY_EXISTS if the policy already exists, and INVALID_ARGUMENT if the policy contains a platform-specific policy that does not match the platform value specified in the URL.'
      operationId: binaryauthorization.projects.platforms.policies.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformPolicy'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformPolicy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: platformsId
          required: true
          schema:
            type: string
        - in: query
          name: policyId
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-method: create
      x-stackQL-verb: insert
