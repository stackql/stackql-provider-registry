openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Datastream API
  description: ''
  version: v1
  x-discovery-doc-revision: '20240515'
  x-generated-date: '2024-06-02'
externalDocs:
  url: https://cloud.google.com/datastream/
servers:
  - url: https://datastream.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    ListOperationsResponse:
      id: ListOperationsResponse
      description: The response message for Operations.ListOperations.
      type: object
      properties:
        operations:
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Operation:
      id: Operation
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      type: object
      properties:
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
          type: string
        metadata:
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
          type: boolean
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
        response:
          description: >-
            The normal, successful response of the operation. If the original
            method returns no data on success, such as `Delete`, the response is
            `google.protobuf.Empty`. If the original method is standard
            `Get`/`Create`/`Update`, the response should be the resource. For
            other methods, the response should have the type `XxxResponse`,
            where `Xxx` is the original method name. For example, if the
            original method name is `TakeSnapshot()`, the inferred response type
            is `TakeSnapshotResponse`.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    Status:
      id: Status
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      type: object
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    CancelOperationRequest:
      id: CancelOperationRequest
      description: The request message for Operations.CancelOperation.
      type: object
      properties: {}
    ListConnectionProfilesResponse:
      id: ListConnectionProfilesResponse
      description: Response message for listing connection profiles.
      type: object
      properties:
        connectionProfiles:
          description: List of connection profiles.
          type: array
          items:
            $ref: '#/components/schemas/ConnectionProfile'
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    ConnectionProfile:
      id: ConnectionProfile
      description: >-
        A set of reusable connection configurations to be used as a source or
        destination for a stream.
      type: object
      properties:
        name:
          description: Output only. The resource's name.
          readOnly: true
          type: string
        createTime:
          description: Output only. The create time of the resource.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The update time of the resource.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: Labels.
          type: object
          additionalProperties:
            type: string
        displayName:
          description: Required. Display name.
          type: string
        oracleProfile:
          description: Oracle ConnectionProfile configuration.
          $ref: '#/components/schemas/OracleProfile'
        gcsProfile:
          description: Cloud Storage ConnectionProfile configuration.
          $ref: '#/components/schemas/GcsProfile'
        mysqlProfile:
          description: MySQL ConnectionProfile configuration.
          $ref: '#/components/schemas/MysqlProfile'
        bigqueryProfile:
          description: BigQuery Connection Profile configuration.
          $ref: '#/components/schemas/BigQueryProfile'
        postgresqlProfile:
          description: PostgreSQL Connection Profile configuration.
          $ref: '#/components/schemas/PostgresqlProfile'
        sqlServerProfile:
          description: SQLServer Connection Profile configuration.
          $ref: '#/components/schemas/SqlServerProfile'
        staticServiceIpConnectivity:
          description: Static Service IP connectivity.
          $ref: '#/components/schemas/StaticServiceIpConnectivity'
        forwardSshConnectivity:
          description: Forward SSH tunnel connectivity.
          $ref: '#/components/schemas/ForwardSshTunnelConnectivity'
        privateConnectivity:
          description: Private connectivity.
          $ref: '#/components/schemas/PrivateConnectivity'
    OracleProfile:
      id: OracleProfile
      description: Oracle database profile.
      type: object
      properties:
        hostname:
          description: Required. Hostname for the Oracle connection.
          type: string
        port:
          description: Port for the Oracle connection, default value is 1521.
          type: integer
          format: int32
        username:
          description: Required. Username for the Oracle connection.
          type: string
        password:
          description: Required. Password for the Oracle connection.
          type: string
        databaseService:
          description: Required. Database for the Oracle connection.
          type: string
        connectionAttributes:
          description: Connection string attributes
          type: object
          additionalProperties:
            type: string
        oracleSslConfig:
          description: Optional. SSL configuration for the Oracle connection.
          $ref: '#/components/schemas/OracleSslConfig'
    OracleSslConfig:
      id: OracleSslConfig
      description: Oracle SSL configuration information.
      type: object
      properties:
        caCertificate:
          description: >-
            Input only. PEM-encoded certificate of the CA that signed the source
            database server's certificate.
          type: string
        caCertificateSet:
          description: >-
            Output only. Indicates whether the ca_certificate field has been set
            for this Connection-Profile.
          readOnly: true
          type: boolean
    GcsProfile:
      id: GcsProfile
      description: Cloud Storage bucket profile.
      type: object
      properties:
        bucket:
          description: Required. The Cloud Storage bucket name.
          type: string
        rootPath:
          description: The root path inside the Cloud Storage bucket.
          type: string
    MysqlProfile:
      id: MysqlProfile
      description: MySQL database profile.
      type: object
      properties:
        hostname:
          description: Required. Hostname for the MySQL connection.
          type: string
        port:
          description: Port for the MySQL connection, default value is 3306.
          type: integer
          format: int32
        username:
          description: Required. Username for the MySQL connection.
          type: string
        password:
          description: Required. Input only. Password for the MySQL connection.
          type: string
        sslConfig:
          description: SSL configuration for the MySQL connection.
          $ref: '#/components/schemas/MysqlSslConfig'
    MysqlSslConfig:
      id: MysqlSslConfig
      description: MySQL SSL configuration information.
      type: object
      properties:
        clientKey:
          description: >-
            Input only. PEM-encoded private key associated with the Client
            Certificate. If this field is used then the 'client_certificate' and
            the 'ca_certificate' fields are mandatory.
          type: string
        clientKeySet:
          description: Output only. Indicates whether the client_key field is set.
          readOnly: true
          type: boolean
        clientCertificate:
          description: >-
            Input only. PEM-encoded certificate that will be used by the replica
            to authenticate against the source database server. If this field is
            used then the 'client_key' and the 'ca_certificate' fields are
            mandatory.
          type: string
        clientCertificateSet:
          description: Output only. Indicates whether the client_certificate field is set.
          readOnly: true
          type: boolean
        caCertificate:
          description: >-
            Input only. PEM-encoded certificate of the CA that signed the source
            database server's certificate.
          type: string
        caCertificateSet:
          description: Output only. Indicates whether the ca_certificate field is set.
          readOnly: true
          type: boolean
    BigQueryProfile:
      id: BigQueryProfile
      description: BigQuery warehouse profile.
      type: object
      properties: {}
    PostgresqlProfile:
      id: PostgresqlProfile
      description: PostgreSQL database profile.
      type: object
      properties:
        hostname:
          description: Required. Hostname for the PostgreSQL connection.
          type: string
        port:
          description: Port for the PostgreSQL connection, default value is 5432.
          type: integer
          format: int32
        username:
          description: Required. Username for the PostgreSQL connection.
          type: string
        password:
          description: Required. Password for the PostgreSQL connection.
          type: string
        database:
          description: Required. Database for the PostgreSQL connection.
          type: string
    SqlServerProfile:
      id: SqlServerProfile
      description: SQLServer database profile
      type: object
      properties:
        hostname:
          description: Required. Hostname for the SQLServer connection.
          type: string
        port:
          description: Port for the SQLServer connection, default value is 1433.
          type: integer
          format: int32
        username:
          description: Required. Username for the SQLServer connection.
          type: string
        password:
          description: Required. Password for the SQLServer connection.
          type: string
        database:
          description: Required. Database for the SQLServer connection.
          type: string
    StaticServiceIpConnectivity:
      id: StaticServiceIpConnectivity
      description: >-
        Static IP address connectivity. Used when the source database is
        configured to allow incoming connections from the Datastream public IP
        addresses for the region specified in the connection profile.
      type: object
      properties: {}
    ForwardSshTunnelConnectivity:
      id: ForwardSshTunnelConnectivity
      description: Forward SSH Tunnel connectivity.
      type: object
      properties:
        hostname:
          description: Required. Hostname for the SSH tunnel.
          type: string
        username:
          description: Required. Username for the SSH tunnel.
          type: string
        port:
          description: Port for the SSH tunnel, default value is 22.
          type: integer
          format: int32
        password:
          description: Input only. SSH password.
          type: string
        privateKey:
          description: Input only. SSH private key.
          type: string
    PrivateConnectivity:
      id: PrivateConnectivity
      description: Private Connectivity
      type: object
      properties:
        privateConnection:
          description: >-
            Required. A reference to a private connection resource. Format:
            `projects/{project}/locations/{location}/privateConnections/{name}`
          type: string
    DiscoverConnectionProfileRequest:
      id: DiscoverConnectionProfileRequest
      description: Request message for 'discover' ConnectionProfile request.
      type: object
      properties:
        connectionProfile:
          description: An ad-hoc connection profile configuration.
          $ref: '#/components/schemas/ConnectionProfile'
        connectionProfileName:
          description: A reference to an existing connection profile.
          type: string
        fullHierarchy:
          description: >-
            Whether to retrieve the full hierarchy of data objects (TRUE) or
            only the current level (FALSE).
          type: boolean
        hierarchyDepth:
          description: >-
            The number of hierarchy levels below the current level to be
            retrieved.
          type: integer
          format: int32
        oracleRdbms:
          description: Oracle RDBMS to enrich with child data objects and metadata.
          $ref: '#/components/schemas/OracleRdbms'
        mysqlRdbms:
          description: MySQL RDBMS to enrich with child data objects and metadata.
          $ref: '#/components/schemas/MysqlRdbms'
        postgresqlRdbms:
          description: PostgreSQL RDBMS to enrich with child data objects and metadata.
          $ref: '#/components/schemas/PostgresqlRdbms'
    OracleRdbms:
      id: OracleRdbms
      description: Oracle database structure.
      type: object
      properties:
        oracleSchemas:
          description: Oracle schemas/databases in the database server.
          type: array
          items:
            $ref: '#/components/schemas/OracleSchema'
    OracleSchema:
      id: OracleSchema
      description: Oracle schema.
      type: object
      properties:
        schema:
          description: Schema name.
          type: string
        oracleTables:
          description: Tables in the schema.
          type: array
          items:
            $ref: '#/components/schemas/OracleTable'
    OracleTable:
      id: OracleTable
      description: Oracle table.
      type: object
      properties:
        table:
          description: Table name.
          type: string
        oracleColumns:
          description: >-
            Oracle columns in the schema. When unspecified as part of
            include/exclude objects, includes/excludes everything.
          type: array
          items:
            $ref: '#/components/schemas/OracleColumn'
    OracleColumn:
      id: OracleColumn
      description: Oracle Column.
      type: object
      properties:
        column:
          description: Column name.
          type: string
        dataType:
          description: The Oracle data type.
          type: string
        length:
          description: Column length.
          type: integer
          format: int32
        precision:
          description: Column precision.
          type: integer
          format: int32
        scale:
          description: Column scale.
          type: integer
          format: int32
        encoding:
          description: Column encoding.
          type: string
        primaryKey:
          description: Whether or not the column represents a primary key.
          type: boolean
        nullable:
          description: Whether or not the column can accept a null value.
          type: boolean
        ordinalPosition:
          description: The ordinal position of the column in the table.
          type: integer
          format: int32
    MysqlRdbms:
      id: MysqlRdbms
      description: MySQL database structure
      type: object
      properties:
        mysqlDatabases:
          description: Mysql databases on the server
          type: array
          items:
            $ref: '#/components/schemas/MysqlDatabase'
    MysqlDatabase:
      id: MysqlDatabase
      description: MySQL database.
      type: object
      properties:
        database:
          description: Database name.
          type: string
        mysqlTables:
          description: Tables in the database.
          type: array
          items:
            $ref: '#/components/schemas/MysqlTable'
    MysqlTable:
      id: MysqlTable
      description: MySQL table.
      type: object
      properties:
        table:
          description: Table name.
          type: string
        mysqlColumns:
          description: >-
            MySQL columns in the database. When unspecified as part of
            include/exclude objects, includes/excludes everything.
          type: array
          items:
            $ref: '#/components/schemas/MysqlColumn'
    MysqlColumn:
      id: MysqlColumn
      description: MySQL Column.
      type: object
      properties:
        column:
          description: Column name.
          type: string
        dataType:
          description: >-
            The MySQL data type. Full data types list can be found here:
            https://dev.mysql.com/doc/refman/8.0/en/data-types.html
          type: string
        length:
          description: Column length.
          type: integer
          format: int32
        collation:
          description: Column collation.
          type: string
        primaryKey:
          description: Whether or not the column represents a primary key.
          type: boolean
        nullable:
          description: Whether or not the column can accept a null value.
          type: boolean
        ordinalPosition:
          description: The ordinal position of the column in the table.
          type: integer
          format: int32
        precision:
          description: Column precision.
          type: integer
          format: int32
        scale:
          description: Column scale.
          type: integer
          format: int32
    PostgresqlRdbms:
      id: PostgresqlRdbms
      description: PostgreSQL database structure.
      type: object
      properties:
        postgresqlSchemas:
          description: PostgreSQL schemas in the database server.
          type: array
          items:
            $ref: '#/components/schemas/PostgresqlSchema'
    PostgresqlSchema:
      id: PostgresqlSchema
      description: PostgreSQL schema.
      type: object
      properties:
        schema:
          description: Schema name.
          type: string
        postgresqlTables:
          description: Tables in the schema.
          type: array
          items:
            $ref: '#/components/schemas/PostgresqlTable'
    PostgresqlTable:
      id: PostgresqlTable
      description: PostgreSQL table.
      type: object
      properties:
        table:
          description: Table name.
          type: string
        postgresqlColumns:
          description: >-
            PostgreSQL columns in the schema. When unspecified as part of
            include/exclude objects, includes/excludes everything.
          type: array
          items:
            $ref: '#/components/schemas/PostgresqlColumn'
    PostgresqlColumn:
      id: PostgresqlColumn
      description: PostgreSQL Column.
      type: object
      properties:
        column:
          description: Column name.
          type: string
        dataType:
          description: The PostgreSQL data type.
          type: string
        length:
          description: Column length.
          type: integer
          format: int32
        precision:
          description: Column precision.
          type: integer
          format: int32
        scale:
          description: Column scale.
          type: integer
          format: int32
        primaryKey:
          description: Whether or not the column represents a primary key.
          type: boolean
        nullable:
          description: Whether or not the column can accept a null value.
          type: boolean
        ordinalPosition:
          description: The ordinal position of the column in the table.
          type: integer
          format: int32
    DiscoverConnectionProfileResponse:
      id: DiscoverConnectionProfileResponse
      description: Response from a discover request.
      type: object
      properties:
        oracleRdbms:
          description: Enriched Oracle RDBMS object.
          $ref: '#/components/schemas/OracleRdbms'
        mysqlRdbms:
          description: Enriched MySQL RDBMS object.
          $ref: '#/components/schemas/MysqlRdbms'
        postgresqlRdbms:
          description: Enriched PostgreSQL RDBMS object.
          $ref: '#/components/schemas/PostgresqlRdbms'
    ListStreamsResponse:
      id: ListStreamsResponse
      description: Response message for listing streams.
      type: object
      properties:
        streams:
          description: List of streams
          type: array
          items:
            $ref: '#/components/schemas/Stream'
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    Stream:
      id: Stream
      description: A resource representing streaming data from a source to a destination.
      type: object
      properties:
        name:
          description: Output only. The stream's name.
          readOnly: true
          type: string
        createTime:
          description: Output only. The creation time of the stream.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The last update time of the stream.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: Labels.
          type: object
          additionalProperties:
            type: string
        displayName:
          description: Required. Display name.
          type: string
        sourceConfig:
          description: Required. Source connection profile configuration.
          $ref: '#/components/schemas/SourceConfig'
        destinationConfig:
          description: Required. Destination connection profile configuration.
          $ref: '#/components/schemas/DestinationConfig'
        state:
          description: The state of the stream.
          type: string
          enumDescriptions:
            - Unspecified stream state.
            - >-
              The stream has been created but has not yet started streaming
              data.
            - The stream is running.
            - The stream is paused.
            - >-
              The stream is in maintenance mode. Updates are rejected on the
              resource in this state.
            - >-
              The stream is experiencing an error that is preventing data from
              being streamed.
            - The stream has experienced a terminal failure.
            - The stream is starting, but not yet running.
            - >-
              The Stream is no longer reading new events, but still writing
              events in the buffer.
          enum:
            - STATE_UNSPECIFIED
            - NOT_STARTED
            - RUNNING
            - PAUSED
            - MAINTENANCE
            - FAILED
            - FAILED_PERMANENTLY
            - STARTING
            - DRAINING
        backfillAll:
          description: >-
            Automatically backfill objects included in the stream source
            configuration. Specific objects can be excluded.
          $ref: '#/components/schemas/BackfillAllStrategy'
        backfillNone:
          description: Do not automatically backfill any objects.
          $ref: '#/components/schemas/BackfillNoneStrategy'
        errors:
          description: Output only. Errors on the Stream.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Error'
        customerManagedEncryptionKey:
          description: >-
            Immutable. A reference to a KMS encryption key. If provided, it will
            be used to encrypt the data. If left blank, data will be encrypted
            using an internal Stream-specific encryption key provisioned through
            KMS.
          type: string
        lastRecoveryTime:
          description: >-
            Output only. If the stream was recovered, the time of the last
            recovery. Note: This field is currently experimental.
          readOnly: true
          type: string
          format: google-datetime
    SourceConfig:
      id: SourceConfig
      description: The configuration of the stream source.
      type: object
      properties:
        sourceConnectionProfile:
          description: >-
            Required. Source connection profile resoource. Format:
            `projects/{project}/locations/{location}/connectionProfiles/{name}`
          type: string
        oracleSourceConfig:
          description: Oracle data source configuration.
          $ref: '#/components/schemas/OracleSourceConfig'
        mysqlSourceConfig:
          description: MySQL data source configuration.
          $ref: '#/components/schemas/MysqlSourceConfig'
        postgresqlSourceConfig:
          description: PostgreSQL data source configuration.
          $ref: '#/components/schemas/PostgresqlSourceConfig'
        sqlServerSourceConfig:
          description: SQLServer data source configuration.
          $ref: '#/components/schemas/SqlServerSourceConfig'
    OracleSourceConfig:
      id: OracleSourceConfig
      description: Oracle data source configuration
      type: object
      properties:
        includeObjects:
          description: Oracle objects to include in the stream.
          $ref: '#/components/schemas/OracleRdbms'
        excludeObjects:
          description: Oracle objects to exclude from the stream.
          $ref: '#/components/schemas/OracleRdbms'
        maxConcurrentCdcTasks:
          description: >-
            Maximum number of concurrent CDC tasks. The number should be
            non-negative. If not set (or set to 0), the system's default value
            is used.
          type: integer
          format: int32
        maxConcurrentBackfillTasks:
          description: >-
            Maximum number of concurrent backfill tasks. The number should be
            non-negative. If not set (or set to 0), the system's default value
            is used.
          type: integer
          format: int32
        dropLargeObjects:
          description: Drop large object values.
          $ref: '#/components/schemas/DropLargeObjects'
        streamLargeObjects:
          description: Stream large object values.
          $ref: '#/components/schemas/StreamLargeObjects'
    DropLargeObjects:
      id: DropLargeObjects
      description: Configuration to drop large object values.
      type: object
      properties: {}
    StreamLargeObjects:
      id: StreamLargeObjects
      description: Configuration to stream large object values.
      type: object
      properties: {}
    MysqlSourceConfig:
      id: MysqlSourceConfig
      description: MySQL source configuration
      type: object
      properties:
        includeObjects:
          description: MySQL objects to retrieve from the source.
          $ref: '#/components/schemas/MysqlRdbms'
        excludeObjects:
          description: MySQL objects to exclude from the stream.
          $ref: '#/components/schemas/MysqlRdbms'
        maxConcurrentCdcTasks:
          description: >-
            Maximum number of concurrent CDC tasks. The number should be non
            negative. If not set (or set to 0), the system's default value will
            be used.
          type: integer
          format: int32
        maxConcurrentBackfillTasks:
          description: >-
            Maximum number of concurrent backfill tasks. The number should be
            non negative. If not set (or set to 0), the system's default value
            will be used.
          type: integer
          format: int32
    PostgresqlSourceConfig:
      id: PostgresqlSourceConfig
      description: PostgreSQL data source configuration
      type: object
      properties:
        includeObjects:
          description: PostgreSQL objects to include in the stream.
          $ref: '#/components/schemas/PostgresqlRdbms'
        excludeObjects:
          description: PostgreSQL objects to exclude from the stream.
          $ref: '#/components/schemas/PostgresqlRdbms'
        replicationSlot:
          description: >-
            Required. Immutable. The name of the logical replication slot that's
            configured with the pgoutput plugin.
          type: string
        publication:
          description: >-
            Required. The name of the publication that includes the set of all
            tables that are defined in the stream's include_objects.
          type: string
        maxConcurrentBackfillTasks:
          description: >-
            Maximum number of concurrent backfill tasks. The number should be
            non negative. If not set (or set to 0), the system's default value
            will be used.
          type: integer
          format: int32
    SqlServerSourceConfig:
      id: SqlServerSourceConfig
      description: SQLServer data source configuration
      type: object
      properties:
        includeObjects:
          description: SQLServer objects to include in the stream.
          $ref: '#/components/schemas/SqlServerRdbms'
        excludeObjects:
          description: SQLServer objects to exclude from the stream.
          $ref: '#/components/schemas/SqlServerRdbms'
        maxConcurrentCdcTasks:
          description: Max concurrent CDC tasks.
          type: integer
          format: int32
        maxConcurrentBackfillTasks:
          description: Max concurrent backfill tasks.
          type: integer
          format: int32
        transactionLogs:
          description: CDC reader reads from transaction logs.
          $ref: '#/components/schemas/SqlServerTransactionLogs'
        changeTables:
          description: CDC reader reads from change tables.
          $ref: '#/components/schemas/SqlServerChangeTables'
    SqlServerRdbms:
      id: SqlServerRdbms
      description: SQLServer database structure.
      type: object
      properties:
        schemas:
          description: SQLServer schemas in the database server.
          type: array
          items:
            $ref: '#/components/schemas/SqlServerSchema'
    SqlServerSchema:
      id: SqlServerSchema
      description: SQLServer schema.
      type: object
      properties:
        schema:
          description: Schema name.
          type: string
        tables:
          description: Tables in the schema.
          type: array
          items:
            $ref: '#/components/schemas/SqlServerTable'
    SqlServerTable:
      id: SqlServerTable
      description: SQLServer table.
      type: object
      properties:
        table:
          description: Table name.
          type: string
        columns:
          description: >-
            SQLServer columns in the schema. When unspecified as part of
            include/exclude objects, includes/excludes everything.
          type: array
          items:
            $ref: '#/components/schemas/SqlServerColumn'
    SqlServerColumn:
      id: SqlServerColumn
      description: SQLServer Column.
      type: object
      properties:
        column:
          description: Column name.
          type: string
        dataType:
          description: The SQLServer data type.
          type: string
        length:
          description: Column length.
          type: integer
          format: int32
        precision:
          description: Column precision.
          type: integer
          format: int32
        scale:
          description: Column scale.
          type: integer
          format: int32
        primaryKey:
          description: Whether or not the column represents a primary key.
          type: boolean
        nullable:
          description: Whether or not the column can accept a null value.
          type: boolean
        ordinalPosition:
          description: The ordinal position of the column in the table.
          type: integer
          format: int32
    SqlServerTransactionLogs:
      id: SqlServerTransactionLogs
      description: Configuration to use Transaction Logs CDC read method.
      type: object
      properties: {}
    SqlServerChangeTables:
      id: SqlServerChangeTables
      description: Configuration to use Change Tables CDC read method.
      type: object
      properties: {}
    DestinationConfig:
      id: DestinationConfig
      description: The configuration of the stream destination.
      type: object
      properties:
        destinationConnectionProfile:
          description: >-
            Required. Destination connection profile resource. Format:
            `projects/{project}/locations/{location}/connectionProfiles/{name}`
          type: string
        gcsDestinationConfig:
          description: A configuration for how data should be loaded to Cloud Storage.
          $ref: '#/components/schemas/GcsDestinationConfig'
        bigqueryDestinationConfig:
          description: BigQuery destination configuration.
          $ref: '#/components/schemas/BigQueryDestinationConfig'
    GcsDestinationConfig:
      id: GcsDestinationConfig
      description: Google Cloud Storage destination configuration
      type: object
      properties:
        path:
          description: Path inside the Cloud Storage bucket to write data to.
          type: string
        fileRotationMb:
          description: The maximum file size to be saved in the bucket.
          type: integer
          format: int32
        fileRotationInterval:
          description: >-
            The maximum duration for which new events are added before a file is
            closed and a new file is created. Values within the range of 15-60
            seconds are allowed.
          type: string
          format: google-duration
        avroFileFormat:
          description: AVRO file format configuration.
          $ref: '#/components/schemas/AvroFileFormat'
        jsonFileFormat:
          description: JSON file format configuration.
          $ref: '#/components/schemas/JsonFileFormat'
    AvroFileFormat:
      id: AvroFileFormat
      description: AVRO file format configuration.
      type: object
      properties: {}
    JsonFileFormat:
      id: JsonFileFormat
      description: JSON file format configuration.
      type: object
      properties:
        schemaFileFormat:
          description: The schema file format along JSON data files.
          type: string
          enumDescriptions:
            - Unspecified schema file format.
            - Do not attach schema file.
            - Avro schema format.
          enum:
            - SCHEMA_FILE_FORMAT_UNSPECIFIED
            - NO_SCHEMA_FILE
            - AVRO_SCHEMA_FILE
        compression:
          description: Compression of the loaded JSON file.
          type: string
          enumDescriptions:
            - Unspecified json file compression.
            - Do not compress JSON file.
            - Gzip compression.
          enum:
            - JSON_COMPRESSION_UNSPECIFIED
            - NO_COMPRESSION
            - GZIP
    BigQueryDestinationConfig:
      id: BigQueryDestinationConfig
      description: BigQuery destination configuration
      type: object
      properties:
        singleTargetDataset:
          description: Single destination dataset.
          $ref: '#/components/schemas/SingleTargetDataset'
        sourceHierarchyDatasets:
          description: Source hierarchy datasets.
          $ref: '#/components/schemas/SourceHierarchyDatasets'
        dataFreshness:
          description: >-
            The guaranteed data freshness (in seconds) when querying tables
            created by the stream. Editing this field will only affect new
            tables created in the future, but existing tables will not be
            impacted. Lower values mean that queries will return fresher data,
            but may result in higher cost.
          type: string
          format: google-duration
        merge:
          description: The standard mode
          $ref: '#/components/schemas/Merge'
        appendOnly:
          description: Append only mode
          $ref: '#/components/schemas/AppendOnly'
    SingleTargetDataset:
      id: SingleTargetDataset
      description: A single target dataset to which all data will be streamed.
      type: object
      properties:
        datasetId:
          description: >-
            The dataset ID of the target dataset. DatasetIds allowed characters:
            https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets#datasetreference.
          type: string
    SourceHierarchyDatasets:
      id: SourceHierarchyDatasets
      description: >-
        Destination datasets are created so that hierarchy of the destination
        data objects matches the source hierarchy.
      type: object
      properties:
        datasetTemplate:
          description: The dataset template to use for dynamic dataset creation.
          $ref: '#/components/schemas/DatasetTemplate'
    DatasetTemplate:
      id: DatasetTemplate
      description: Dataset template used for dynamic dataset creation.
      type: object
      properties:
        location:
          description: >-
            Required. The geographic location where the dataset should reside.
            See https://cloud.google.com/bigquery/docs/locations for supported
            locations.
          type: string
        datasetIdPrefix:
          description: >-
            If supplied, every created dataset will have its name prefixed by
            the provided value. The prefix and name will be separated by an
            underscore. i.e. _.
          type: string
        kmsKeyName:
          description: >-
            Describes the Cloud KMS encryption key that will be used to protect
            destination BigQuery table. The BigQuery Service Account associated
            with your project requires access to this encryption key. i.e.
            projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}.
            See
            https://cloud.google.com/bigquery/docs/customer-managed-encryption
            for more information.
          type: string
    Merge:
      id: Merge
      description: >-
        Merge mode defines that all changes to a table will be merged at the
        destination table.
      type: object
      properties: {}
    AppendOnly:
      id: AppendOnly
      description: >-
        AppendOnly mode defines that all changes to a table will be written to
        the destination table.
      type: object
      properties: {}
    BackfillAllStrategy:
      id: BackfillAllStrategy
      description: >-
        Backfill strategy to automatically backfill the Stream's objects.
        Specific objects can be excluded.
      type: object
      properties:
        oracleExcludedObjects:
          description: Oracle data source objects to avoid backfilling.
          $ref: '#/components/schemas/OracleRdbms'
        mysqlExcludedObjects:
          description: MySQL data source objects to avoid backfilling.
          $ref: '#/components/schemas/MysqlRdbms'
        postgresqlExcludedObjects:
          description: PostgreSQL data source objects to avoid backfilling.
          $ref: '#/components/schemas/PostgresqlRdbms'
        sqlServerExcludedObjects:
          description: SQLServer data source objects to avoid backfilling
          $ref: '#/components/schemas/SqlServerRdbms'
    BackfillNoneStrategy:
      id: BackfillNoneStrategy
      description: >-
        Backfill strategy to disable automatic backfill for the Stream's
        objects.
      type: object
      properties: {}
    Error:
      id: Error
      description: Represent a user-facing Error.
      type: object
      properties:
        reason:
          description: A title that explains the reason for the error.
          type: string
        errorUuid:
          description: >-
            A unique identifier for this specific error, allowing it to be
            traced throughout the system in logs and API responses.
          type: string
        message:
          description: A message containing more information about the error that occurred.
          type: string
        errorTime:
          description: The time when the error occurred.
          type: string
          format: google-datetime
        details:
          description: Additional information about the error.
          type: object
          additionalProperties:
            type: string
    RunStreamRequest:
      id: RunStreamRequest
      description: Request message for running a stream.
      type: object
      properties:
        cdcStrategy:
          description: >-
            Optional. The CDC strategy of the stream. If not set, the system's
            default value will be used.
          $ref: '#/components/schemas/CdcStrategy'
    CdcStrategy:
      id: CdcStrategy
      description: The strategy that the stream uses for CDC replication.
      type: object
      properties:
        mostRecentStartPosition:
          description: >-
            Optional. Start replicating from the most recent position in the
            source.
          $ref: '#/components/schemas/MostRecentStartPosition'
        nextAvailableStartPosition:
          description: >-
            Optional. Resume replication from the next available position in the
            source.
          $ref: '#/components/schemas/NextAvailableStartPosition'
        specificStartPosition:
          description: Optional. Start replicating from a specific position in the source.
          $ref: '#/components/schemas/SpecificStartPosition'
    MostRecentStartPosition:
      id: MostRecentStartPosition
      description: >-
        CDC strategy to start replicating from the most recent position in the
        source.
      type: object
      properties: {}
    NextAvailableStartPosition:
      id: NextAvailableStartPosition
      description: >-
        CDC strategy to resume replication from the next available position in
        the source.
      type: object
      properties: {}
    SpecificStartPosition:
      id: SpecificStartPosition
      description: >-
        CDC strategy to start replicating from a specific position in the
        source.
      type: object
      properties:
        mysqlLogPosition:
          description: MySQL specific log position to start replicating from.
          $ref: '#/components/schemas/MysqlLogPosition'
        oracleScnPosition:
          description: Oracle SCN to start replicating from.
          $ref: '#/components/schemas/OracleScnPosition'
    MysqlLogPosition:
      id: MysqlLogPosition
      description: MySQL log position
      type: object
      properties:
        logFile:
          description: Required. The binary log file name.
          type: string
        logPosition:
          description: >-
            Optional. The position within the binary log file. Default is head
            of file.
          type: integer
          format: int32
    OracleScnPosition:
      id: OracleScnPosition
      description: Oracle SCN position
      type: object
      properties:
        scn:
          description: Required. SCN number from where Logs will be read
          type: string
          format: int64
    StreamObject:
      id: StreamObject
      description: A specific stream object (e.g a specific DB table).
      type: object
      properties:
        name:
          description: Output only. The object resource's name.
          readOnly: true
          type: string
        createTime:
          description: Output only. The creation time of the object.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The last update time of the object.
          readOnly: true
          type: string
          format: google-datetime
        displayName:
          description: Required. Display name.
          type: string
        errors:
          description: Output only. Active errors on the object.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Error'
        backfillJob:
          description: The latest backfill job that was initiated for the stream object.
          $ref: '#/components/schemas/BackfillJob'
        sourceObject:
          description: The object identifier in the data source.
          $ref: '#/components/schemas/SourceObjectIdentifier'
    BackfillJob:
      id: BackfillJob
      description: Represents a backfill job on a specific stream object.
      type: object
      properties:
        state:
          description: Output only. Backfill job state.
          readOnly: true
          type: string
          enumDescriptions:
            - Default value.
            - >-
              Backfill job was never started for the stream object (stream has
              backfill strategy defined as manual or object was explicitly
              excluded from automatic backfill).
            - Backfill job will start pending available resources.
            - Backfill job is running.
            - Backfill job stopped (next job run will start from beginning).
            - Backfill job failed (due to an error).
            - Backfill completed successfully.
            - >-
              Backfill job failed since the table structure is currently
              unsupported for backfill.
          enum:
            - STATE_UNSPECIFIED
            - NOT_STARTED
            - PENDING
            - ACTIVE
            - STOPPED
            - FAILED
            - COMPLETED
            - UNSUPPORTED
        trigger:
          description: Backfill job's triggering reason.
          type: string
          enumDescriptions:
            - Default value.
            - >-
              Object backfill job was triggered automatically according to the
              stream's backfill strategy.
            - >-
              Object backfill job was triggered manually using the dedicated
              API.
          enum:
            - TRIGGER_UNSPECIFIED
            - AUTOMATIC
            - MANUAL
        lastStartTime:
          description: Output only. Backfill job's start time.
          readOnly: true
          type: string
          format: google-datetime
        lastEndTime:
          description: Output only. Backfill job's end time.
          readOnly: true
          type: string
          format: google-datetime
        errors:
          description: Output only. Errors which caused the backfill job to fail.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Error'
    SourceObjectIdentifier:
      id: SourceObjectIdentifier
      description: Represents an identifier of an object in the data source.
      type: object
      properties:
        oracleIdentifier:
          description: Oracle data source object identifier.
          $ref: '#/components/schemas/OracleObjectIdentifier'
        mysqlIdentifier:
          description: Mysql data source object identifier.
          $ref: '#/components/schemas/MysqlObjectIdentifier'
        postgresqlIdentifier:
          description: PostgreSQL data source object identifier.
          $ref: '#/components/schemas/PostgresqlObjectIdentifier'
        sqlServerIdentifier:
          description: SQLServer data source object identifier.
          $ref: '#/components/schemas/SqlServerObjectIdentifier'
    OracleObjectIdentifier:
      id: OracleObjectIdentifier
      description: Oracle data source object identifier.
      type: object
      properties:
        schema:
          description: Required. The schema name.
          type: string
        table:
          description: Required. The table name.
          type: string
    MysqlObjectIdentifier:
      id: MysqlObjectIdentifier
      description: Mysql data source object identifier.
      type: object
      properties:
        database:
          description: Required. The database name.
          type: string
        table:
          description: Required. The table name.
          type: string
    PostgresqlObjectIdentifier:
      id: PostgresqlObjectIdentifier
      description: PostgreSQL data source object identifier.
      type: object
      properties:
        schema:
          description: Required. The schema name.
          type: string
        table:
          description: Required. The table name.
          type: string
    SqlServerObjectIdentifier:
      id: SqlServerObjectIdentifier
      description: SQLServer data source object identifier.
      type: object
      properties:
        schema:
          description: Required. The schema name.
          type: string
        table:
          description: Required. The table name.
          type: string
    LookupStreamObjectRequest:
      id: LookupStreamObjectRequest
      description: >-
        Request for looking up a specific stream object by its source object
        identifier.
      type: object
      properties:
        sourceObjectIdentifier:
          description: >-
            Required. The source object identifier which maps to the stream
            object.
          $ref: '#/components/schemas/SourceObjectIdentifier'
    ListStreamObjectsResponse:
      id: ListStreamObjectsResponse
      description: Response containing the objects for a stream.
      type: object
      properties:
        streamObjects:
          description: List of stream objects.
          type: array
          items:
            $ref: '#/components/schemas/StreamObject'
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page.
          type: string
    StartBackfillJobRequest:
      id: StartBackfillJobRequest
      description: >-
        Request for manually initiating a backfill job for a specific stream
        object.
      type: object
      properties: {}
    StartBackfillJobResponse:
      id: StartBackfillJobResponse
      description: >-
        Response for manually initiating a backfill job for a specific stream
        object.
      type: object
      properties:
        object:
          description: The stream object resource a backfill job was started for.
          $ref: '#/components/schemas/StreamObject'
    StopBackfillJobRequest:
      id: StopBackfillJobRequest
      description: >-
        Request for manually stopping a running backfill job for a specific
        stream object.
      type: object
      properties: {}
    StopBackfillJobResponse:
      id: StopBackfillJobResponse
      description: Response for manually stop a backfill job for a specific stream object.
      type: object
      properties:
        object:
          description: The stream object resource the backfill job was stopped for.
          $ref: '#/components/schemas/StreamObject'
    FetchStaticIpsResponse:
      id: FetchStaticIpsResponse
      description: Response message for a 'FetchStaticIps' response.
      type: object
      properties:
        staticIps:
          description: list of static ips by account
          type: array
          items:
            type: string
        nextPageToken:
          description: >-
            A token that can be sent as `page_token` to retrieve the next page.
            If this field is omitted, there are no subsequent pages.
          type: string
    PrivateConnection:
      id: PrivateConnection
      description: >-
        The PrivateConnection resource is used to establish private connectivity
        between Datastream and a customer's network.
      type: object
      properties:
        name:
          description: Output only. The resource's name.
          readOnly: true
          type: string
        createTime:
          description: Output only. The create time of the resource.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The update time of the resource.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: Labels.
          type: object
          additionalProperties:
            type: string
        displayName:
          description: Required. Display name.
          type: string
        state:
          description: Output only. The state of the Private Connection.
          readOnly: true
          type: string
          enumDescriptions:
            - Unspecified state.
            - The private connection is in creation state - creating resources.
            - The private connection has been created with all of its resources.
            - The private connection creation has failed.
            - The private connection is being deleted.
            - Delete request has failed, resource is in invalid state.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - CREATED
            - FAILED
            - DELETING
            - FAILED_TO_DELETE
        error:
          description: >-
            Output only. In case of error, the details of the error in a
            user-friendly format.
          readOnly: true
          $ref: '#/components/schemas/Error'
        vpcPeeringConfig:
          description: VPC Peering Config.
          $ref: '#/components/schemas/VpcPeeringConfig'
    VpcPeeringConfig:
      id: VpcPeeringConfig
      description: >-
        The VPC Peering configuration is used to create VPC peering between
        Datastream and the consumer's VPC.
      type: object
      properties:
        vpc:
          description: >-
            Required. Fully qualified name of the VPC that Datastream will peer
            to. Format: `projects/{project}/global/{networks}/{name}`
          type: string
        subnet:
          description: Required. A free subnet for peering. (CIDR of /29)
          type: string
    ListPrivateConnectionsResponse:
      id: ListPrivateConnectionsResponse
      description: Response containing a list of private connection configurations.
      type: object
      properties:
        privateConnections:
          description: List of private connectivity configurations.
          type: array
          items:
            $ref: '#/components/schemas/PrivateConnection'
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    Route:
      id: Route
      description: >-
        The route resource is the child of the private connection resource, used
        for defining a route for a private connection.
      type: object
      properties:
        name:
          description: Output only. The resource's name.
          readOnly: true
          type: string
        createTime:
          description: Output only. The create time of the resource.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The update time of the resource.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: Labels.
          type: object
          additionalProperties:
            type: string
        displayName:
          description: Required. Display name.
          type: string
        destinationAddress:
          description: Required. Destination address for connection
          type: string
        destinationPort:
          description: Destination port for connection
          type: integer
          format: int32
    ListRoutesResponse:
      id: ListRoutesResponse
      description: Route list response.
      type: object
      properties:
        routes:
          description: List of Routes.
          type: array
          items:
            $ref: '#/components/schemas/Route'
        nextPageToken:
          description: >-
            A token, which can be sent as `page_token` to retrieve the next
            page. If this field is omitted, there are no subsequent pages.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    ListLocationsResponse:
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      type: object
      properties:
        locations:
          description: >-
            A list of locations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Location:
      id: Location
      description: A resource that represents a Google Cloud location.
      type: object
      properties:
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            `"projects/example-project/locations/us-east1"`
          type: string
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        labels:
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"}
          type: object
          additionalProperties:
            type: string
        metadata:
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    OperationMetadata:
      id: OperationMetadata
      description: Represents the metadata of the long-running operation.
      type: object
      properties:
        createTime:
          description: Output only. The time the operation was created.
          readOnly: true
          type: string
          format: google-datetime
        endTime:
          description: Output only. The time the operation finished running.
          readOnly: true
          type: string
          format: google-datetime
        target:
          description: >-
            Output only. Server-defined resource path for the target of the
            operation.
          readOnly: true
          type: string
        verb:
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
          type: string
        statusMessage:
          description: Output only. Human-readable status of the operation, if any.
          readOnly: true
          type: string
        requestedCancellation:
          description: >-
            Output only. Identifies whether the user has requested cancellation
            of the operation. Operations that have successfully been cancelled
            have Operation.error value with a google.rpc.Status.code of 1,
            corresponding to `Code.CANCELLED`.
          readOnly: true
          type: boolean
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
        validationResult:
          description: Output only. Results of executed validations if there are any.
          readOnly: true
          $ref: '#/components/schemas/ValidationResult'
    ValidationResult:
      id: ValidationResult
      description: Contains the current validation results.
      type: object
      properties:
        validations:
          description: >-
            A list of validations (includes both executed as well as not
            executed validations).
          type: array
          items:
            $ref: '#/components/schemas/Validation'
    Validation:
      id: Validation
      description: A validation to perform on a stream.
      type: object
      properties:
        description:
          description: A short description of the validation.
          type: string
        state:
          description: Output only. Validation execution status.
          readOnly: true
          type: string
          enumDescriptions:
            - Unspecified state.
            - Validation did not execute.
            - Validation failed.
            - Validation passed.
            - Validation executed with warnings.
          enum:
            - STATE_UNSPECIFIED
            - NOT_EXECUTED
            - FAILED
            - PASSED
            - WARNING
        message:
          description: Messages reflecting the validation results.
          type: array
          items:
            $ref: '#/components/schemas/ValidationMessage'
        code:
          description: A custom code identifying this validation.
          type: string
    ValidationMessage:
      id: ValidationMessage
      description: Represent user-facing validation result message.
      type: object
      properties:
        message:
          description: The result of the validation.
          type: string
        level:
          description: Message severity level (warning or error).
          type: string
          enumDescriptions:
            - Unspecified level.
            - Potentially cause issues with the Stream.
            - Definitely cause issues with the Stream.
          enum:
            - LEVEL_UNSPECIFIED
            - WARNING
            - ERROR
        metadata:
          description: Additional metadata related to the result.
          type: object
          additionalProperties:
            type: string
        code:
          description: A custom code identifying this specific message.
          type: string
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    static_ips:
      id: datastream.static_ips
      name: static_ips
      title: Static_ips
      methods:
        fetch_static_ips:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}:fetchStaticIps/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    locations:
      id: datastream.locations
      name: locations
      title: Locations
      methods:
        _list:
          operation: &ref_1
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response: &ref_2
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        list:
          operation: *ref_1
          response: *ref_2
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
        insert: []
        update: []
        delete: []
    operations:
      id: datastream.operations
      name: operations
      title: Operations
      methods:
        _list:
          operation: &ref_3
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get
          response: &ref_4
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        list:
          operation: *ref_3
          response: *ref_4
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    connection_profiles:
      id: datastream.connection_profiles
      name: connection_profiles
      title: Connection_profiles
      methods:
        _list:
          operation: &ref_5
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles/get
          response: &ref_6
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.connectionProfiles
        list:
          operation: *ref_5
          response: *ref_6
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles~1{connectionProfilesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles~1{connectionProfilesId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles~1{connectionProfilesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        discover:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles:discover/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/connection_profiles/methods/list'
          - $ref: '#/components/x-stackQL-resources/connection_profiles/methods/get'
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/connection_profiles/methods/create
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/connection_profiles/methods/delete
    streams:
      id: datastream.streams
      name: streams
      title: Streams
      methods:
        _list:
          operation: &ref_7
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams/get
          response: &ref_8
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.streams
        list:
          operation: *ref_7
          response: *ref_8
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        run:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}:run/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/streams/methods/list'
          - $ref: '#/components/x-stackQL-resources/streams/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/streams/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/streams/methods/delete'
    objects:
      id: datastream.objects
      name: objects
      title: Objects
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects~1{objectsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        lookup:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects:lookup/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        _list:
          operation: &ref_9
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects/get
          response: &ref_10
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.streamObjects
        list:
          operation: *ref_9
          response: *ref_10
        start_backfill_job:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects~1{objectsId}:startBackfillJob/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        stop_backfill_job:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects~1{objectsId}:stopBackfillJob/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/objects/methods/get'
          - $ref: '#/components/x-stackQL-resources/objects/methods/list'
        insert: []
        update: []
        delete: []
    private_connections:
      id: datastream.private_connections
      name: private_connections
      title: Private_connections
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        _list:
          operation: &ref_11
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections/get
          response: &ref_12
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.privateConnections
        list:
          operation: *ref_11
          response: *ref_12
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/private_connections/methods/list'
          - $ref: '#/components/x-stackQL-resources/private_connections/methods/get'
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/private_connections/methods/create
        update: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/private_connections/methods/delete
    routes:
      id: datastream.routes
      name: routes
      title: Routes
      methods:
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        _list:
          operation: &ref_13
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes/get
          response: &ref_14
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.routes
        list:
          operation: *ref_13
          response: *ref_14
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes~1{routesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes~1{routesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/routes/methods/list'
          - $ref: '#/components/x-stackQL-resources/routes/methods/get'
        insert:
          - $ref: '#/components/x-stackQL-resources/routes/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/routes/methods/delete'
paths:
  /v1/projects/{projectsId}/locations/{locationsId}:fetchStaticIps:
    parameters: &ref_15
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: >-
        The FetchStaticIps API call exposes the static IP addresses used by
        Datastream.
      operationId: datastream.projects.locations.fetchStaticIps
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchStaticIpsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations:
    parameters: *ref_15
    get:
      description: Lists information about the supported locations for this service.
      operationId: datastream.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_15
    get:
      description: Gets information about a location.
      operationId: datastream.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_15
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: datastream.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_15
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: datastream.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: datastream.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_15
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        1, corresponding to `Code.CANCELLED`.
      operationId: datastream.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connectionProfiles:
    parameters: *ref_15
    get:
      description: >-
        Use this method to list connection profiles created in a project and
        location.
      operationId: datastream.projects.locations.connectionProfiles.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectionProfilesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
    post:
      description: >-
        Use this method to create a connection profile in a project and
        location.
      operationId: datastream.projects.locations.connectionProfiles.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionProfile'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: connectionProfileId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: force
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/connectionProfiles/{connectionProfilesId}:
    parameters: *ref_15
    get:
      description: Use this method to get details about a connection profile.
      operationId: datastream.projects.locations.connectionProfiles.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionProfile'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionProfilesId
          required: true
          schema:
            type: string
    patch:
      description: Use this method to update the parameters of a connection profile.
      operationId: datastream.projects.locations.connectionProfiles.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionProfile'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionProfilesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: force
          schema:
            type: boolean
    delete:
      description: Use this method to delete a connection profile.
      operationId: datastream.projects.locations.connectionProfiles.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionProfilesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/connectionProfiles:discover:
    parameters: *ref_15
    post:
      description: >-
        Use this method to discover a connection profile. The discover API call
        exposes the data objects and metadata belonging to the profile.
        Typically, a request returns children data objects of a parent data
        object that's optionally supplied in the request.
      operationId: datastream.projects.locations.connectionProfiles.discover
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoverConnectionProfileRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverConnectionProfileResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/streams:
    parameters: *ref_15
    get:
      description: Use this method to list streams in a project and location.
      operationId: datastream.projects.locations.streams.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStreamsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
    post:
      description: Use this method to create a stream.
      operationId: datastream.projects.locations.streams.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stream'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: streamId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: force
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}:
    parameters: *ref_15
    get:
      description: Use this method to get details about a stream.
      operationId: datastream.projects.locations.streams.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
    patch:
      description: Use this method to update the configuration of a stream.
      operationId: datastream.projects.locations.streams.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stream'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: force
          schema:
            type: boolean
    delete:
      description: Use this method to delete a stream.
      operationId: datastream.projects.locations.streams.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}:run:
    parameters: *ref_15
    post:
      description: >-
        Use this method to start, resume or recover a stream with a non default
        CDC strategy. NOTE: This feature is currently experimental.
      operationId: datastream.projects.locations.streams.run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunStreamRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects/{objectsId}:
    parameters: *ref_15
    get:
      description: Use this method to get details about a stream object.
      operationId: datastream.projects.locations.streams.objects.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamObject'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: path
          name: objectsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects:lookup:
    parameters: *ref_15
    post:
      description: >-
        Use this method to look up a stream object by its source object
        identifier.
      operationId: datastream.projects.locations.streams.objects.lookup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupStreamObjectRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamObject'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects:
    parameters: *ref_15
    get:
      description: Use this method to list the objects of a specific stream.
      operationId: datastream.projects.locations.streams.objects.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStreamObjectsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects/{objectsId}:startBackfillJob:
    parameters: *ref_15
    post:
      description: Use this method to start a backfill job for the specified stream object.
      operationId: datastream.projects.locations.streams.objects.startBackfillJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartBackfillJobRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartBackfillJobResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: path
          name: objectsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects/{objectsId}:stopBackfillJob:
    parameters: *ref_15
    post:
      description: Use this method to stop a backfill job for the specified stream object.
      operationId: datastream.projects.locations.streams.objects.stopBackfillJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopBackfillJobRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopBackfillJobResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: path
          name: objectsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/privateConnections:
    parameters: *ref_15
    post:
      description: Use this method to create a private connectivity configuration.
      operationId: datastream.projects.locations.privateConnections.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateConnection'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: privateConnectionId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
    get:
      description: >-
        Use this method to list private connectivity configurations in a project
        and location.
      operationId: datastream.projects.locations.privateConnections.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrivateConnectionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}:
    parameters: *ref_15
    get:
      description: >-
        Use this method to get details about a private connectivity
        configuration.
      operationId: datastream.projects.locations.privateConnections.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateConnection'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
    delete:
      description: Use this method to delete a private connectivity configuration.
      operationId: datastream.projects.locations.privateConnections.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}/routes:
    parameters: *ref_15
    post:
      description: >-
        Use this method to create a route for a private connectivity
        configuration in a project and location.
      operationId: datastream.projects.locations.privateConnections.routes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: routeId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
    get:
      description: >-
        Use this method to list routes created for a private connectivity
        configuration in a project and location.
      operationId: datastream.projects.locations.privateConnections.routes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoutesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}/routes/{routesId}:
    parameters: *ref_15
    get:
      description: Use this method to get details about a route.
      operationId: datastream.projects.locations.privateConnections.routes.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: path
          name: routesId
          required: true
          schema:
            type: string
    delete:
      description: Use this method to delete a route.
      operationId: datastream.projects.locations.privateConnections.routes.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: path
          name: routesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
