openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Datastream API
  description: ''
  version: v1
  x-discovery-doc-revision: '20221128'
  x-generated-date: '2023-01-06'
externalDocs:
  url: https://cloud.google.com/datastream/
servers:
  - url: https://datastream.googleapis.com
components:
  schemas:
    ForwardSshTunnelConnectivity:
      id: ForwardSshTunnelConnectivity
      properties:
        username:
          description: Required. Username for the SSH tunnel.
          type: string
        port:
          type: integer
          description: Port for the SSH tunnel, default value is 22.
          format: int32
        password:
          type: string
          description: Input only. SSH password.
        privateKey:
          type: string
          description: Input only. SSH private key.
        hostname:
          description: Required. Hostname for the SSH tunnel.
          type: string
      description: Forward SSH Tunnel connectivity.
      type: object
    Empty:
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      properties: {}
      id: Empty
      type: object
    PostgresqlSourceConfig:
      type: object
      description: PostgreSQL data source configuration
      id: PostgresqlSourceConfig
      properties:
        publication:
          description: Required. The name of the publication that includes the set of all tables that are defined in the stream's include_objects.
          type: string
        includeObjects:
          description: PostgreSQL objects to include in the stream.
          $ref: '#/components/schemas/PostgresqlRdbms'
        excludeObjects:
          description: PostgreSQL objects to exclude from the stream.
          $ref: '#/components/schemas/PostgresqlRdbms'
        replicationSlot:
          type: string
          description: Required. Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.
    OperationMetadata:
      description: Represents the metadata of the long-running operation.
      properties:
        apiVersion:
          type: string
          readOnly: true
          description: Output only. API version used to start the operation.
        requestedCancellation:
          description: Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
          readOnly: true
          type: boolean
        verb:
          type: string
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
        createTime:
          description: Output only. The time the operation was created.
          readOnly: true
          type: string
          format: google-datetime
        validationResult:
          readOnly: true
          description: Output only. Results of executed validations if there are any.
          $ref: '#/components/schemas/ValidationResult'
        target:
          type: string
          description: Output only. Server-defined resource path for the target of the operation.
          readOnly: true
        statusMessage:
          description: Output only. Human-readable status of the operation, if any.
          type: string
          readOnly: true
        endTime:
          type: string
          format: google-datetime
          description: Output only. The time the operation finished running.
          readOnly: true
      type: object
      id: OperationMetadata
    MysqlRdbms:
      type: object
      description: MySQL database structure
      id: MysqlRdbms
      properties:
        mysqlDatabases:
          type: array
          description: Mysql databases on the server
          items:
            $ref: '#/components/schemas/MysqlDatabase'
    MysqlSourceConfig:
      description: MySQL source configuration
      properties:
        maxConcurrentCdcTasks:
          type: integer
          description: Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
          format: int32
        includeObjects:
          $ref: '#/components/schemas/MysqlRdbms'
          description: MySQL objects to retrieve from the source.
        excludeObjects:
          $ref: '#/components/schemas/MysqlRdbms'
          description: MySQL objects to exclude from the stream.
      type: object
      id: MysqlSourceConfig
    PostgresqlColumn:
      type: object
      id: PostgresqlColumn
      description: PostgreSQL Column.
      properties:
        column:
          description: Column name.
          type: string
        length:
          format: int32
          description: Column length.
          type: integer
        nullable:
          type: boolean
          description: Whether or not the column can accept a null value.
        dataType:
          type: string
          description: The PostgreSQL data type.
        ordinalPosition:
          format: int32
          description: The ordinal position of the column in the table.
          type: integer
        scale:
          type: integer
          format: int32
          description: Column scale.
        precision:
          description: Column precision.
          format: int32
          type: integer
        primaryKey:
          type: boolean
          description: Whether or not the column represents a primary key.
    StreamObject:
      id: StreamObject
      properties:
        createTime:
          description: Output only. The creation time of the object.
          format: google-datetime
          readOnly: true
          type: string
        updateTime:
          readOnly: true
          description: Output only. The last update time of the object.
          format: google-datetime
          type: string
        errors:
          type: array
          readOnly: true
          description: Output only. Active errors on the object.
          items:
            $ref: '#/components/schemas/Error'
        displayName:
          type: string
          description: Required. Display name.
        sourceObject:
          $ref: '#/components/schemas/SourceObjectIdentifier'
          description: The object identifier in the data source.
        name:
          description: Output only. The object resource's name.
          type: string
          readOnly: true
        backfillJob:
          $ref: '#/components/schemas/BackfillJob'
          description: The latest backfill job that was initiated for the stream object.
      type: object
      description: A specific stream object (e.g a specific DB table).
    OracleRdbms:
      properties:
        oracleSchemas:
          description: Oracle schemas/databases in the database server.
          type: array
          items:
            $ref: '#/components/schemas/OracleSchema'
      type: object
      id: OracleRdbms
      description: Oracle database structure.
    ListStreamsResponse:
      type: object
      description: Response message for listing streams.
      id: ListStreamsResponse
      properties:
        streams:
          description: List of streams
          items:
            $ref: '#/components/schemas/Stream'
          type: array
        nextPageToken:
          description: A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
          type: string
        unreachable:
          items:
            type: string
          description: Locations that could not be reached.
          type: array
    OracleTable:
      type: object
      properties:
        table:
          description: Table name.
          type: string
        oracleColumns:
          description: Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
          items:
            $ref: '#/components/schemas/OracleColumn'
          type: array
      id: OracleTable
      description: Oracle table.
    Validation:
      id: Validation
      type: object
      properties:
        message:
          description: Messages reflecting the validation results.
          type: array
          items:
            $ref: '#/components/schemas/ValidationMessage'
        code:
          description: A custom code identifying this validation.
          type: string
        state:
          enumDescriptions:
            - Unspecified state.
            - Validation did not execute.
            - Validation failed.
            - Validation passed.
          type: string
          description: Validation execution status.
          enum:
            - STATE_UNSPECIFIED
            - NOT_EXECUTED
            - FAILED
            - PASSED
        description:
          type: string
          description: A short description of the validation.
      description: A validation to perform on a stream.
    Route:
      id: Route
      type: object
      description: The route resource is the child of the private connection resource, used for defining a route for a private connection.
      properties:
        updateTime:
          readOnly: true
          format: google-datetime
          description: Output only. The update time of the resource.
          type: string
        labels:
          additionalProperties:
            type: string
          type: object
          description: Labels.
        displayName:
          description: Required. Display name.
          type: string
        destinationAddress:
          description: Required. Destination address for connection
          type: string
        createTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. The create time of the resource.
        destinationPort:
          format: int32
          type: integer
          description: Destination port for connection
        name:
          readOnly: true
          type: string
          description: Output only. The resource's name.
    OracleSchema:
      type: object
      properties:
        schema:
          description: Schema name.
          type: string
        oracleTables:
          items:
            $ref: '#/components/schemas/OracleTable'
          type: array
          description: Tables in the schema.
      description: Oracle schema.
      id: OracleSchema
    BackfillNoneStrategy:
      description: Backfill strategy to disable automatic backfill for the Stream's objects.
      properties: {}
      id: BackfillNoneStrategy
      type: object
    PostgresqlTable:
      description: PostgreSQL table.
      properties:
        table:
          type: string
          description: Table name.
        postgresqlColumns:
          items:
            $ref: '#/components/schemas/PostgresqlColumn'
          type: array
          description: PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
      id: PostgresqlTable
      type: object
    BackfillAllStrategy:
      type: object
      properties:
        oracleExcludedObjects:
          $ref: '#/components/schemas/OracleRdbms'
          description: Oracle data source objects to avoid backfilling.
        mysqlExcludedObjects:
          description: MySQL data source objects to avoid backfilling.
          $ref: '#/components/schemas/MysqlRdbms'
        postgresqlExcludedObjects:
          $ref: '#/components/schemas/PostgresqlRdbms'
          description: PostgreSQL data source objects to avoid backfilling.
      id: BackfillAllStrategy
      description: Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
    ValidationMessage:
      id: ValidationMessage
      type: object
      description: Represent user-facing validation result message.
      properties:
        message:
          type: string
          description: The result of the validation.
        code:
          description: A custom code identifying this specific message.
          type: string
        level:
          enumDescriptions:
            - Unspecified level.
            - Potentially cause issues with the Stream.
            - Definitely cause issues with the Stream.
          type: string
          enum:
            - LEVEL_UNSPECIFIED
            - WARNING
            - ERROR
          description: Message severity level (warning or error).
        metadata:
          type: object
          additionalProperties:
            type: string
          description: Additional metadata related to the result.
    ConnectionProfile:
      type: object
      id: ConnectionProfile
      properties:
        privateConnectivity:
          $ref: '#/components/schemas/PrivateConnectivity'
          description: Private connectivity.
        gcsProfile:
          description: Cloud Storage ConnectionProfile configuration.
          $ref: '#/components/schemas/GcsProfile'
        forwardSshConnectivity:
          $ref: '#/components/schemas/ForwardSshTunnelConnectivity'
          description: Forward SSH tunnel connectivity.
        bigqueryProfile:
          description: BigQuery Connection Profile configuration.
          $ref: '#/components/schemas/BigQueryProfile'
        staticServiceIpConnectivity:
          $ref: '#/components/schemas/StaticServiceIpConnectivity'
          description: Static Service IP connectivity.
        postgresqlProfile:
          $ref: '#/components/schemas/PostgresqlProfile'
          description: PostgreSQL Connection Profile configuration.
        displayName:
          description: Required. Display name.
          type: string
        oracleProfile:
          description: Oracle ConnectionProfile configuration.
          $ref: '#/components/schemas/OracleProfile'
        updateTime:
          description: Output only. The update time of the resource.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          type: object
          description: Labels.
          additionalProperties:
            type: string
        mysqlProfile:
          description: MySQL ConnectionProfile configuration.
          $ref: '#/components/schemas/MysqlProfile'
        createTime:
          readOnly: true
          description: Output only. The create time of the resource.
          format: google-datetime
          type: string
        name:
          description: Output only. The resource's name.
          type: string
          readOnly: true
      description: A set of reusable connection configurations to be used as a source or destination for a stream.
    StartBackfillJobResponse:
      description: Response for manually initiating a backfill job for a specific stream object.
      id: StartBackfillJobResponse
      type: object
      properties:
        object:
          $ref: '#/components/schemas/StreamObject'
          description: The stream object resource a backfill job was started for.
    MysqlDatabase:
      type: object
      id: MysqlDatabase
      properties:
        mysqlTables:
          description: Tables in the database.
          items:
            $ref: '#/components/schemas/MysqlTable'
          type: array
        database:
          type: string
          description: Database name.
      description: MySQL database.
    ListOperationsResponse:
      type: object
      description: The response message for Operations.ListOperations.
      properties:
        operations:
          description: A list of operations that matches the specified filter in the request.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          type: string
          description: The standard List next-page token.
      id: ListOperationsResponse
    DiscoverConnectionProfileRequest:
      description: Request message for 'discover' ConnectionProfile request.
      id: DiscoverConnectionProfileRequest
      properties:
        mysqlRdbms:
          description: MySQL RDBMS to enrich with child data objects and metadata.
          $ref: '#/components/schemas/MysqlRdbms'
        connectionProfileName:
          type: string
          description: A reference to an existing connection profile.
        fullHierarchy:
          type: boolean
          description: Whether to retrieve the full hierarchy of data objects (TRUE) or only the current level (FALSE).
        hierarchyDepth:
          format: int32
          type: integer
          description: The number of hierarchy levels below the current level to be retrieved.
        oracleRdbms:
          $ref: '#/components/schemas/OracleRdbms'
          description: Oracle RDBMS to enrich with child data objects and metadata.
        postgresqlRdbms:
          description: PostgreSQL RDBMS to enrich with child data objects and metadata.
          $ref: '#/components/schemas/PostgresqlRdbms'
        connectionProfile:
          description: An ad-hoc connection profile configuration.
          $ref: '#/components/schemas/ConnectionProfile'
      type: object
    BigQueryProfile:
      type: object
      properties: {}
      description: BigQuery warehouse profile.
      id: BigQueryProfile
    StopBackfillJobRequest:
      description: Request for manually stopping a running backfill job for a specific stream object.
      properties: {}
      type: object
      id: StopBackfillJobRequest
    GcsProfile:
      properties:
        rootPath:
          description: The root path inside the Cloud Storage bucket.
          type: string
        bucket:
          description: Required. The Cloud Storage bucket name.
          type: string
      description: Cloud Storage bucket profile.
      type: object
      id: GcsProfile
    ValidationResult:
      id: ValidationResult
      properties:
        validations:
          description: A list of validations (includes both executed as well as not executed validations).
          type: array
          items:
            $ref: '#/components/schemas/Validation'
      description: Contains the current validation results.
      type: object
    SourceHierarchyDatasets:
      type: object
      description: Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
      properties:
        datasetTemplate:
          $ref: '#/components/schemas/DatasetTemplate'
      id: SourceHierarchyDatasets
    Location:
      id: Location
      properties:
        displayName:
          type: string
          description: The friendly name for this location, typically a nearby city name. For example, "Tokyo".
        labels:
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
          type: object
          additionalProperties:
            type: string
        metadata:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          description: Service-specific metadata. For example the available capacity at the given location.
          type: object
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        name:
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
          type: string
      description: A resource that represents Google Cloud Platform location.
      type: object
    DatasetTemplate:
      type: object
      description: Dataset template used for dynamic dataset creation.
      id: DatasetTemplate
      properties:
        datasetIdPrefix:
          type: string
          description: If supplied, every created dataset will have its name prefixed by the provided value. The prefix and name will be separated by an underscore. i.e. _.
        kmsKeyName:
          description: Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}. See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
          type: string
        location:
          description: Required. The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.
          type: string
    BigQueryDestinationConfig:
      type: object
      properties:
        singleTargetDataset:
          description: Single destination dataset.
          $ref: '#/components/schemas/SingleTargetDataset'
        sourceHierarchyDatasets:
          $ref: '#/components/schemas/SourceHierarchyDatasets'
          description: Source hierarchy datasets.
        dataFreshness:
          format: google-duration
          type: string
          description: The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing this field will only affect new tables created in the future, but existing tables will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
      id: BigQueryDestinationConfig
    OracleProfile:
      description: Oracle database profile.
      properties:
        connectionAttributes:
          additionalProperties:
            type: string
          type: object
          description: Connection string attributes
        password:
          description: Required. Password for the Oracle connection.
          type: string
        port:
          description: Port for the Oracle connection, default value is 1521.
          type: integer
          format: int32
        username:
          type: string
          description: Required. Username for the Oracle connection.
        databaseService:
          type: string
          description: Required. Database for the Oracle connection.
        hostname:
          description: Required. Hostname for the Oracle connection.
          type: string
      id: OracleProfile
      type: object
    ListRoutesResponse:
      id: ListRoutesResponse
      type: object
      properties:
        routes:
          description: List of Routes.
          items:
            $ref: '#/components/schemas/Route'
          type: array
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
        nextPageToken:
          type: string
          description: A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
      description: Route list response.
    LookupStreamObjectRequest:
      description: Request for looking up a specific stream object by its source object identifier.
      id: LookupStreamObjectRequest
      properties:
        sourceObjectIdentifier:
          description: Required. The source object identifier which maps to the stream object.
          $ref: '#/components/schemas/SourceObjectIdentifier'
      type: object
    SourceConfig:
      id: SourceConfig
      description: The configuration of the stream source.
      type: object
      properties:
        sourceConnectionProfile:
          type: string
          description: 'Required. Source connection profile resoource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`'
        mysqlSourceConfig:
          description: MySQL data source configuration.
          $ref: '#/components/schemas/MysqlSourceConfig'
        postgresqlSourceConfig:
          $ref: '#/components/schemas/PostgresqlSourceConfig'
          description: PostgreSQL data source configuration.
        oracleSourceConfig:
          $ref: '#/components/schemas/OracleSourceConfig'
          description: Oracle data source configuration.
    OracleColumn:
      properties:
        length:
          description: Column length.
          type: integer
          format: int32
        dataType:
          description: The Oracle data type.
          type: string
        encoding:
          type: string
          description: Column encoding.
        nullable:
          type: boolean
          description: Whether or not the column can accept a null value.
        precision:
          type: integer
          description: Column precision.
          format: int32
        primaryKey:
          type: boolean
          description: Whether or not the column represents a primary key.
        ordinalPosition:
          type: integer
          format: int32
          description: The ordinal position of the column in the table.
        column:
          description: Column name.
          type: string
        scale:
          type: integer
          description: Column scale.
          format: int32
      id: OracleColumn
      type: object
      description: Oracle Column.
    PostgresqlRdbms:
      description: PostgreSQL database structure.
      properties:
        postgresqlSchemas:
          description: PostgreSQL schemas in the database server.
          items:
            $ref: '#/components/schemas/PostgresqlSchema'
          type: array
      id: PostgresqlRdbms
      type: object
    PostgresqlObjectIdentifier:
      description: PostgreSQL data source object identifier.
      properties:
        table:
          type: string
          description: Required. The table name.
        schema:
          description: Required. The schema name.
          type: string
      id: PostgresqlObjectIdentifier
      type: object
    Error:
      properties:
        message:
          description: A message containing more information about the error that occurred.
          type: string
        details:
          additionalProperties:
            type: string
          type: object
          description: Additional information about the error.
        errorTime:
          type: string
          description: The time when the error occurred.
          format: google-datetime
        reason:
          description: A title that explains the reason for the error.
          type: string
        errorUuid:
          type: string
          description: A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.
      id: Error
      description: Represent a user-facing Error.
      type: object
    Status:
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      type: object
      properties:
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        details:
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
      id: Status
    GcsDestinationConfig:
      type: object
      description: Google Cloud Storage destination configuration
      properties:
        jsonFileFormat:
          description: JSON file format configuration.
          $ref: '#/components/schemas/JsonFileFormat'
        avroFileFormat:
          $ref: '#/components/schemas/AvroFileFormat'
          description: AVRO file format configuration.
        path:
          type: string
          description: Path inside the Cloud Storage bucket to write data to.
        fileRotationMb:
          description: The maximum file size to be saved in the bucket.
          format: int32
          type: integer
        fileRotationInterval:
          description: The maximum duration for which new events are added before a file is closed and a new file is created.
          format: google-duration
          type: string
      id: GcsDestinationConfig
    BackfillJob:
      description: Represents a backfill job on a specific stream object.
      id: BackfillJob
      properties:
        lastEndTime:
          format: google-datetime
          description: Output only. Backfill job's end time.
          readOnly: true
          type: string
        trigger:
          type: string
          description: Backfill job's triggering reason.
          enum:
            - TRIGGER_UNSPECIFIED
            - AUTOMATIC
            - MANUAL
          enumDescriptions:
            - Default value.
            - Object backfill job was triggered automatically according to the stream's backfill strategy.
            - Object backfill job was triggered manually using the dedicated API.
        state:
          enum:
            - STATE_UNSPECIFIED
            - NOT_STARTED
            - PENDING
            - ACTIVE
            - STOPPED
            - FAILED
            - COMPLETED
            - UNSUPPORTED
          enumDescriptions:
            - Default value.
            - Backfill job was never started for the stream object (stream has backfill strategy defined as manual or object was explicitly excluded from automatic backfill).
            - Backfill job will start pending available resources.
            - Backfill job is running.
            - Backfill job stopped (next job run will start from beginning).
            - Backfill job failed (due to an error).
            - Backfill completed successfully.
            - Backfill job failed since the table structure is currently unsupported for backfill.
          description: Backfill job state.
          type: string
        lastStartTime:
          type: string
          readOnly: true
          description: Output only. Backfill job's start time.
          format: google-datetime
        errors:
          readOnly: true
          description: Output only. Errors which caused the backfill job to fail.
          type: array
          items:
            $ref: '#/components/schemas/Error'
      type: object
    PostgresqlProfile:
      type: object
      description: PostgreSQL database profile.
      properties:
        password:
          type: string
          description: Required. Password for the PostgreSQL connection.
        hostname:
          description: Required. Hostname for the PostgreSQL connection.
          type: string
        username:
          type: string
          description: Required. Username for the PostgreSQL connection.
        database:
          type: string
          description: Required. Database for the PostgreSQL connection.
        port:
          type: integer
          format: int32
          description: Port for the PostgreSQL connection, default value is 5432.
      id: PostgresqlProfile
    ListStreamObjectsResponse:
      type: object
      id: ListStreamObjectsResponse
      properties:
        streamObjects:
          description: List of stream objects.
          type: array
          items:
            $ref: '#/components/schemas/StreamObject'
        nextPageToken:
          type: string
          description: A token, which can be sent as `page_token` to retrieve the next page.
      description: Response containing the objects for a stream.
    PrivateConnection:
      description: The PrivateConnection resource is used to establish private connectivity between Datastream and a customer's network.
      type: object
      properties:
        state:
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - CREATED
            - FAILED
            - DELETING
            - FAILED_TO_DELETE
          description: Output only. The state of the Private Connection.
          readOnly: true
          enumDescriptions:
            - Unspecified state.
            - The private connection is in creation state - creating resources.
            - The private connection has been created with all of its resources.
            - The private connection creation has failed.
            - The private connection is being deleted.
            - Delete request has failed, resource is in invalid state.
          type: string
        vpcPeeringConfig:
          $ref: '#/components/schemas/VpcPeeringConfig'
          description: VPC Peering Config.
        error:
          description: Output only. In case of error, the details of the error in a user-friendly format.
          readOnly: true
          $ref: '#/components/schemas/Error'
        displayName:
          type: string
          description: Required. Display name.
        updateTime:
          format: google-datetime
          type: string
          description: Output only. The update time of the resource.
          readOnly: true
        createTime:
          description: Output only. The create time of the resource.
          type: string
          readOnly: true
          format: google-datetime
        name:
          description: Output only. The resource's name.
          readOnly: true
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
          description: Labels.
      id: PrivateConnection
    CancelOperationRequest:
      id: CancelOperationRequest
      type: object
      description: The request message for Operations.CancelOperation.
      properties: {}
    SourceObjectIdentifier:
      description: Represents an identifier of an object in the data source.
      properties:
        oracleIdentifier:
          $ref: '#/components/schemas/OracleObjectIdentifier'
          description: Oracle data source object identifier.
        mysqlIdentifier:
          $ref: '#/components/schemas/MysqlObjectIdentifier'
          description: Mysql data source object identifier.
        postgresqlIdentifier:
          description: PostgreSQL data source object identifier.
          $ref: '#/components/schemas/PostgresqlObjectIdentifier'
      id: SourceObjectIdentifier
      type: object
    ListPrivateConnectionsResponse:
      description: Response containing a list of private connection configurations.
      id: ListPrivateConnectionsResponse
      properties:
        privateConnections:
          type: array
          items:
            $ref: '#/components/schemas/PrivateConnection'
          description: List of private connectivity configurations.
        unreachable:
          type: array
          items:
            type: string
          description: Locations that could not be reached.
        nextPageToken:
          type: string
          description: A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
      type: object
    PostgresqlSchema:
      id: PostgresqlSchema
      properties:
        schema:
          type: string
          description: Schema name.
        postgresqlTables:
          items:
            $ref: '#/components/schemas/PostgresqlTable'
          type: array
          description: Tables in the schema.
      description: PostgreSQL schema.
      type: object
    Operation:
      properties:
        error:
          $ref: '#/components/schemas/Status'
          description: The error result of the operation in case of failure or cancellation.
        name:
          type: string
          description: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
          type: object
        metadata:
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
        done:
          type: boolean
          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
      type: object
      id: Operation
      description: This resource represents a long-running operation that is the result of a network API call.
    MysqlProfile:
      properties:
        port:
          type: integer
          format: int32
          description: Port for the MySQL connection, default value is 3306.
        username:
          description: Required. Username for the MySQL connection.
          type: string
        hostname:
          type: string
          description: Required. Hostname for the MySQL connection.
        password:
          description: Required. Input only. Password for the MySQL connection.
          type: string
        sslConfig:
          $ref: '#/components/schemas/MysqlSslConfig'
          description: SSL configuration for the MySQL connection.
      id: MysqlProfile
      type: object
      description: MySQL database profile.
    MysqlTable:
      id: MysqlTable
      description: MySQL table.
      type: object
      properties:
        mysqlColumns:
          description: MySQL columns in the database. When unspecified as part of include/exclude objects, includes/excludes everything.
          items:
            $ref: '#/components/schemas/MysqlColumn'
          type: array
        table:
          description: Table name.
          type: string
    StreamLargeObjects:
      properties: {}
      id: StreamLargeObjects
      description: Configuration to stream large object values.
      type: object
    StartBackfillJobRequest:
      properties: {}
      type: object
      description: Request for manually initiating a backfill job for a specific stream object.
      id: StartBackfillJobRequest
    MysqlObjectIdentifier:
      type: object
      description: Mysql data source object identifier.
      properties:
        table:
          description: Required. The table name.
          type: string
        database:
          description: Required. The database name.
          type: string
      id: MysqlObjectIdentifier
    Stream:
      id: Stream
      description: A resource representing streaming data from a source to a destination.
      properties:
        updateTime:
          description: Output only. The last update time of the stream.
          readOnly: true
          format: google-datetime
          type: string
        backfillAll:
          $ref: '#/components/schemas/BackfillAllStrategy'
          description: Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
        createTime:
          readOnly: true
          format: google-datetime
          type: string
          description: Output only. The creation time of the stream.
        errors:
          type: array
          description: Output only. Errors on the Stream.
          items:
            $ref: '#/components/schemas/Error'
          readOnly: true
        backfillNone:
          description: Do not automatically backfill any objects.
          $ref: '#/components/schemas/BackfillNoneStrategy'
        name:
          readOnly: true
          description: Output only. The stream's name.
          type: string
        sourceConfig:
          description: Required. Source connection profile configuration.
          $ref: '#/components/schemas/SourceConfig'
        displayName:
          type: string
          description: Required. Display name.
        destinationConfig:
          description: Required. Destination connection profile configuration.
          $ref: '#/components/schemas/DestinationConfig'
        labels:
          type: object
          description: Labels.
          additionalProperties:
            type: string
        customerManagedEncryptionKey:
          type: string
          description: Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
        state:
          type: string
          description: The state of the stream.
          enumDescriptions:
            - Unspecified stream state.
            - The stream has been created but has not yet started streaming data.
            - The stream is running.
            - The stream is paused.
            - The stream is in maintenance mode. Updates are rejected on the resource in this state.
            - The stream is experiencing an error that is preventing data from being streamed.
            - The stream has experienced a terminal failure.
            - The stream is starting, but not yet running.
            - The Stream is no longer reading new events, but still writing events in the buffer.
          enum:
            - STATE_UNSPECIFIED
            - NOT_STARTED
            - RUNNING
            - PAUSED
            - MAINTENANCE
            - FAILED
            - FAILED_PERMANENTLY
            - STARTING
            - DRAINING
      type: object
    DestinationConfig:
      id: DestinationConfig
      type: object
      description: The configuration of the stream destination.
      properties:
        bigqueryDestinationConfig:
          $ref: '#/components/schemas/BigQueryDestinationConfig'
          description: BigQuery destination configuration.
        destinationConnectionProfile:
          type: string
          description: 'Required. Destination connection profile resource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`'
        gcsDestinationConfig:
          $ref: '#/components/schemas/GcsDestinationConfig'
          description: A configuration for how data should be loaded to Cloud Storage.
    OracleSourceConfig:
      description: Oracle data source configuration
      id: OracleSourceConfig
      type: object
      properties:
        maxConcurrentCdcTasks:
          type: integer
          description: Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
          format: int32
        excludeObjects:
          $ref: '#/components/schemas/OracleRdbms'
          description: Oracle objects to exclude from the stream.
        dropLargeObjects:
          description: Drop large object values.
          $ref: '#/components/schemas/DropLargeObjects'
        streamLargeObjects:
          description: 'Stream large object values. NOTE: This feature is currently experimental.'
          $ref: '#/components/schemas/StreamLargeObjects'
        includeObjects:
          $ref: '#/components/schemas/OracleRdbms'
          description: Oracle objects to include in the stream.
    JsonFileFormat:
      description: JSON file format configuration.
      properties:
        schemaFileFormat:
          enum:
            - SCHEMA_FILE_FORMAT_UNSPECIFIED
            - NO_SCHEMA_FILE
            - AVRO_SCHEMA_FILE
          description: The schema file format along JSON data files.
          enumDescriptions:
            - Unspecified schema file format.
            - Do not attach schema file.
            - Avro schema format.
          type: string
        compression:
          enumDescriptions:
            - Unspecified json file compression.
            - Do not compress JSON file.
            - Gzip compression.
          description: Compression of the loaded JSON file.
          enum:
            - JSON_COMPRESSION_UNSPECIFIED
            - NO_COMPRESSION
            - GZIP
          type: string
      type: object
      id: JsonFileFormat
    StopBackfillJobResponse:
      id: StopBackfillJobResponse
      description: Response for manually stop a backfill job for a specific stream object.
      type: object
      properties:
        object:
          $ref: '#/components/schemas/StreamObject'
          description: The stream object resource the backfill job was stopped for.
    VpcPeeringConfig:
      type: object
      properties:
        subnet:
          description: Required. A free subnet for peering. (CIDR of /29)
          type: string
        vpc:
          type: string
          description: 'Required. Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`'
      description: The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
      id: VpcPeeringConfig
    AvroFileFormat:
      id: AvroFileFormat
      properties: {}
      description: AVRO file format configuration.
      type: object
    DiscoverConnectionProfileResponse:
      id: DiscoverConnectionProfileResponse
      properties:
        oracleRdbms:
          description: Enriched Oracle RDBMS object.
          $ref: '#/components/schemas/OracleRdbms'
        mysqlRdbms:
          description: Enriched MySQL RDBMS object.
          $ref: '#/components/schemas/MysqlRdbms'
        postgresqlRdbms:
          $ref: '#/components/schemas/PostgresqlRdbms'
          description: Enriched PostgreSQL RDBMS object.
      type: object
      description: Response from a discover request.
    MysqlSslConfig:
      id: MysqlSslConfig
      properties:
        clientKeySet:
          type: boolean
          description: Output only. Indicates whether the client_key field is set.
          readOnly: true
        clientKey:
          type: string
          description: Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
        caCertificateSet:
          description: Output only. Indicates whether the ca_certificate field is set.
          readOnly: true
          type: boolean
        clientCertificateSet:
          readOnly: true
          type: boolean
          description: Output only. Indicates whether the client_certificate field is set.
        caCertificate:
          type: string
          description: Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
        clientCertificate:
          type: string
          description: Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
      type: object
      description: MySQL SSL configuration information.
    DropLargeObjects:
      type: object
      description: Configuration to drop large object values.
      id: DropLargeObjects
      properties: {}
    PrivateConnectivity:
      description: Private Connectivity
      properties:
        privateConnection:
          type: string
          description: 'Required. A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`'
      type: object
      id: PrivateConnectivity
    SingleTargetDataset:
      id: SingleTargetDataset
      type: object
      description: A single target dataset to which all data will be streamed.
      properties:
        datasetId:
          description: The dataset ID of the target dataset.
          type: string
    StaticServiceIpConnectivity:
      type: object
      description: Static IP address connectivity.
      properties: {}
      id: StaticServiceIpConnectivity
    FetchStaticIpsResponse:
      properties:
        nextPageToken:
          description: A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
          type: string
        staticIps:
          type: array
          description: list of static ips by account
          items:
            type: string
      description: Response message for a 'FetchStaticIps' response.
      type: object
      id: FetchStaticIpsResponse
    MysqlColumn:
      description: MySQL Column.
      id: MysqlColumn
      type: object
      properties:
        nullable:
          type: boolean
          description: Whether or not the column can accept a null value.
        dataType:
          description: 'The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html'
          type: string
        ordinalPosition:
          type: integer
          format: int32
          description: The ordinal position of the column in the table.
        primaryKey:
          description: Whether or not the column represents a primary key.
          type: boolean
        collation:
          type: string
          description: Column collation.
        column:
          description: Column name.
          type: string
        length:
          format: int32
          type: integer
          description: Column length.
    ListLocationsResponse:
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      properties:
        locations:
          type: array
          description: A list of locations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/Location'
        nextPageToken:
          type: string
          description: The standard List next-page token.
      type: object
    ListConnectionProfilesResponse:
      description: Response message for listing connection profiles.
      type: object
      id: ListConnectionProfilesResponse
      properties:
        nextPageToken:
          description: A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
          type: string
        connectionProfiles:
          description: List of connection profiles.
          items:
            $ref: '#/components/schemas/ConnectionProfile'
          type: array
        unreachable:
          items:
            type: string
          type: array
          description: Locations that could not be reached.
    OracleObjectIdentifier:
      type: object
      properties:
        table:
          description: Required. The table name.
          type: string
        schema:
          type: string
          description: Required. The schema name.
      id: OracleObjectIdentifier
      description: Oracle data source object identifier.
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    locations:
      id: google.datastream.locations
      name: locations
      title: Locations
      methods:
        projects_locations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: locations
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/projects_locations_get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/projects_locations_list'
        insert: []
        update: []
        delete: []
    locations__static_ips:
      id: google.datastream.locations__static_ips
      name: locations__static_ips
      title: Locations__static_ips
      methods:
        projects_locations_fetchStaticIps:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}:fetchStaticIps/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations__static_ips/methods/projects_locations_fetchStaticIps'
        insert: []
        update: []
        delete: []
    objects:
      id: google.datastream.objects
      name: objects
      title: Objects
      methods:
        projects_locations_streams_objects_stopBackfillJob:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects~1{objectsId}:stopBackfillJob/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_objects_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects~1{objectsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_objects_startBackfillJob:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects~1{objectsId}:startBackfillJob/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_objects_lookup:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects:lookup/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_objects_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: streamObjects
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/objects/methods/projects_locations_streams_objects_get'
          - $ref: '#/components/x-stackQL-resources/objects/methods/projects_locations_streams_objects_list'
        insert: []
        update: []
        delete: []
    streams:
      id: google.datastream.streams
      name: streams
      title: Streams
      methods:
        projects_locations_streams_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/streams/methods/projects_locations_streams_get'
          - $ref: '#/components/x-stackQL-resources/streams/methods/projects_locations_streams_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/streams/methods/projects_locations_streams_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/streams/methods/projects_locations_streams_delete'
    operations:
      id: google.datastream.operations
      name: operations
      title: Operations
      methods:
        projects_locations_operations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: operations
        projects_locations_operations_cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_delete'
    connection_profiles:
      id: google.datastream.connection_profiles
      name: connection_profiles
      title: Connection_profiles
      methods:
        projects_locations_connectionProfiles_discover:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles:discover/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_connectionProfiles_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles~1{connectionProfilesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_connectionProfiles_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles~1{connectionProfilesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_connectionProfiles_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles~1{connectionProfilesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_connectionProfiles_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_connectionProfiles_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/connection_profiles/methods/projects_locations_connectionProfiles_get'
          - $ref: '#/components/x-stackQL-resources/connection_profiles/methods/projects_locations_connectionProfiles_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/connection_profiles/methods/projects_locations_connectionProfiles_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/connection_profiles/methods/projects_locations_connectionProfiles_delete'
    private_connections:
      id: google.datastream.private_connections
      name: private_connections
      title: Private_connections
      methods:
        projects_locations_privateConnections_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_privateConnections_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_privateConnections_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_privateConnections_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/private_connections/methods/projects_locations_privateConnections_get'
          - $ref: '#/components/x-stackQL-resources/private_connections/methods/projects_locations_privateConnections_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/private_connections/methods/projects_locations_privateConnections_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/private_connections/methods/projects_locations_privateConnections_delete'
    routes:
      id: google.datastream.routes
      name: routes
      title: Routes
      methods:
        projects_locations_privateConnections_routes_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_privateConnections_routes_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_privateConnections_routes_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes~1{routesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_privateConnections_routes_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes~1{routesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/routes/methods/projects_locations_privateConnections_routes_get'
          - $ref: '#/components/x-stackQL-resources/routes/methods/projects_locations_privateConnections_routes_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/routes/methods/projects_locations_privateConnections_routes_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/routes/methods/projects_locations_privateConnections_routes_delete'
paths:
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: &ref_1
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
    get:
      description: Gets information about a location.
      operationId: datastream.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations:
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: datastream.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}:fetchStaticIps:
    parameters: *ref_1
    get:
      description: The FetchStaticIps API call exposes the static IP addresses used by Datastream.
      operationId: datastream.projects.locations.fetchStaticIps
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchStaticIpsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: locations__static_ips
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects/{objectsId}:stopBackfillJob:
    parameters: *ref_1
    post:
      description: Use this method to stop a backfill job for the specified stream object.
      operationId: datastream.projects.locations.streams.objects.stopBackfillJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopBackfillJobRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopBackfillJobResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: path
          name: objectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects/{objectsId}:
    parameters: *ref_1
    get:
      description: Use this method to get details about a stream object.
      operationId: datastream.projects.locations.streams.objects.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamObject'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: path
          name: objectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects/{objectsId}:startBackfillJob:
    parameters: *ref_1
    post:
      description: Use this method to start a backfill job for the specified stream object.
      operationId: datastream.projects.locations.streams.objects.startBackfillJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartBackfillJobRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartBackfillJobResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: path
          name: objectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects:lookup:
    parameters: *ref_1
    post:
      description: Use this method to look up a stream object by its source object identifier.
      operationId: datastream.projects.locations.streams.objects.lookup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupStreamObjectRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamObject'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects:
    parameters: *ref_1
    get:
      description: Use this method to list the objects of a specific stream.
      operationId: datastream.projects.locations.streams.objects.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStreamObjectsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/streams:
    parameters: *ref_1
    get:
      description: Use this method to list streams in a project and location.
      operationId: datastream.projects.locations.streams.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStreamsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: streams
      x-stackQL-verb: select
    post:
      description: Use this method to create a stream.
      operationId: datastream.projects.locations.streams.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stream'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: streamId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: streams
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}:
    parameters: *ref_1
    get:
      description: Use this method to get details about a stream.
      operationId: datastream.projects.locations.streams.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
      x-stackQL-resource: streams
      x-stackQL-verb: select
    delete:
      description: Use this method to delete a stream.
      operationId: datastream.projects.locations.streams.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: streams
      x-stackQL-verb: delete
    patch:
      description: Use this method to update the configuration of a stream.
      operationId: datastream.projects.locations.streams.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stream'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
      x-stackQL-resource: streams
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: datastream.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
    delete:
      description: Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
      operationId: datastream.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.'
      operationId: datastream.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
      operationId: datastream.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/connectionProfiles:discover:
    parameters: *ref_1
    post:
      description: Use this method to discover a connection profile. The discover API call exposes the data objects and metadata belonging to the profile. Typically, a request returns children data objects of a parent data object that's optionally supplied in the request.
      operationId: datastream.projects.locations.connectionProfiles.discover
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoverConnectionProfileRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverConnectionProfileResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/connectionProfiles/{connectionProfilesId}:
    parameters: *ref_1
    patch:
      description: Use this method to update the parameters of a connection profile.
      operationId: datastream.projects.locations.connectionProfiles.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionProfile'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionProfilesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: connection_profiles
      x-stackQL-verb: exec
    get:
      description: Use this method to get details about a connection profile.
      operationId: datastream.projects.locations.connectionProfiles.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionProfile'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionProfilesId
          required: true
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-verb: select
    delete:
      description: Use this method to delete a connection profile.
      operationId: datastream.projects.locations.connectionProfiles.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionProfilesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/connectionProfiles:
    parameters: *ref_1
    post:
      description: Use this method to create a connection profile in a project and location.
      operationId: datastream.projects.locations.connectionProfiles.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionProfile'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: connectionProfileId
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-verb: insert
    get:
      description: Use this method to list connection profiles created in a project and location.
      operationId: datastream.projects.locations.connectionProfiles.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectionProfilesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/privateConnections:
    parameters: *ref_1
    get:
      description: Use this method to list private connectivity configurations in a project and location.
      operationId: datastream.projects.locations.privateConnections.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrivateConnectionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: private_connections
      x-stackQL-verb: select
    post:
      description: Use this method to create a private connectivity configuration.
      operationId: datastream.projects.locations.privateConnections.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateConnection'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: privateConnectionId
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: private_connections
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}:
    parameters: *ref_1
    delete:
      description: Use this method to delete a private connectivity configuration.
      operationId: datastream.projects.locations.privateConnections.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: private_connections
      x-stackQL-verb: delete
    get:
      description: Use this method to get details about a private connectivity configuration.
      operationId: datastream.projects.locations.privateConnections.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateConnection'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: private_connections
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}/routes:
    parameters: *ref_1
    post:
      description: Use this method to create a route for a private connectivity configuration in a project and location.
      operationId: datastream.projects.locations.privateConnections.routes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: routeId
          schema:
            type: string
      x-stackQL-resource: routes
      x-stackQL-verb: insert
    get:
      description: Use this method to list routes created for a private connectivity configuration in a project and location.
      operationId: datastream.projects.locations.privateConnections.routes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoutesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: routes
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}/routes/{routesId}:
    parameters: *ref_1
    get:
      description: Use this method to get details about a route.
      operationId: datastream.projects.locations.privateConnections.routes.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: path
          name: routesId
          required: true
          schema:
            type: string
      x-stackQL-resource: routes
      x-stackQL-verb: select
    delete:
      description: Use this method to delete a route.
      operationId: datastream.projects.locations.privateConnections.routes.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: path
          name: routesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: routes
      x-stackQL-verb: delete
