openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Datastream API
  description: ''
  version: v1
  x-discovery-doc-revision: '20230802'
  x-generated-date: '2023-08-17'
externalDocs:
  url: 'https://cloud.google.com/datastream/'
servers:
  - url: 'https://datastream.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    SourceHierarchyDatasets:
      type: object
      description: Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
      id: SourceHierarchyDatasets
      properties:
        datasetTemplate:
          $ref: '#/components/schemas/DatasetTemplate'
          description: The dataset template to use for dynamic dataset creation.
    OracleSourceConfig:
      description: Oracle data source configuration
      properties:
        includeObjects:
          description: Oracle objects to include in the stream.
          $ref: '#/components/schemas/OracleRdbms'
        maxConcurrentCdcTasks:
          format: int32
          description: 'Maximum number of concurrent CDC tasks. The number should be non-negative. If not set (or set to 0), the system''s default value is used.'
          type: integer
        excludeObjects:
          description: Oracle objects to exclude from the stream.
          $ref: '#/components/schemas/OracleRdbms'
        dropLargeObjects:
          description: Drop large object values.
          $ref: '#/components/schemas/DropLargeObjects'
        streamLargeObjects:
          description: 'Stream large object values. NOTE: This feature is currently experimental.'
          $ref: '#/components/schemas/StreamLargeObjects'
        maxConcurrentBackfillTasks:
          description: 'Maximum number of concurrent backfill tasks. The number should be non-negative. If not set (or set to 0), the system''s default value is used.'
          type: integer
          format: int32
      type: object
      id: OracleSourceConfig
    ListRoutesResponse:
      description: Route list response.
      properties:
        nextPageToken:
          type: string
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
        unreachable:
          type: array
          description: Locations that could not be reached.
          items:
            type: string
        routes:
          type: array
          description: List of Routes.
          items:
            $ref: '#/components/schemas/Route'
      id: ListRoutesResponse
      type: object
    ListStreamObjectsResponse:
      id: ListStreamObjectsResponse
      type: object
      description: Response containing the objects for a stream.
      properties:
        nextPageToken:
          type: string
          description: 'A token, which can be sent as `page_token` to retrieve the next page.'
        streamObjects:
          items:
            $ref: '#/components/schemas/StreamObject'
          type: array
          description: List of stream objects.
    ConnectionProfile:
      description: A set of reusable connection configurations to be used as a source or destination for a stream.
      type: object
      properties:
        updateTime:
          readOnly: true
          description: Output only. The update time of the resource.
          format: google-datetime
          type: string
        mysqlProfile:
          $ref: '#/components/schemas/MysqlProfile'
          description: MySQL ConnectionProfile configuration.
        postgresqlProfile:
          description: PostgreSQL Connection Profile configuration.
          $ref: '#/components/schemas/PostgresqlProfile'
        gcsProfile:
          $ref: '#/components/schemas/GcsProfile'
          description: Cloud Storage ConnectionProfile configuration.
        forwardSshConnectivity:
          $ref: '#/components/schemas/ForwardSshTunnelConnectivity'
          description: Forward SSH tunnel connectivity.
        privateConnectivity:
          description: Private connectivity.
          $ref: '#/components/schemas/PrivateConnectivity'
        displayName:
          type: string
          description: Required. Display name.
        createTime:
          readOnly: true
          format: google-datetime
          type: string
          description: Output only. The create time of the resource.
        labels:
          type: object
          description: Labels.
          additionalProperties:
            type: string
        name:
          description: Output only. The resource's name.
          type: string
          readOnly: true
        oracleProfile:
          $ref: '#/components/schemas/OracleProfile'
          description: Oracle ConnectionProfile configuration.
        bigqueryProfile:
          $ref: '#/components/schemas/BigQueryProfile'
          description: BigQuery Connection Profile configuration.
        staticServiceIpConnectivity:
          description: Static Service IP connectivity.
          $ref: '#/components/schemas/StaticServiceIpConnectivity'
      id: ConnectionProfile
    OracleTable:
      id: OracleTable
      properties:
        table:
          type: string
          description: Table name.
        oracleColumns:
          items:
            $ref: '#/components/schemas/OracleColumn'
          description: 'Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.'
          type: array
      type: object
      description: Oracle table.
    OracleSchema:
      properties:
        schema:
          type: string
          description: Schema name.
        oracleTables:
          items:
            $ref: '#/components/schemas/OracleTable'
          type: array
          description: Tables in the schema.
      type: object
      id: OracleSchema
      description: Oracle schema.
    OracleObjectIdentifier:
      type: object
      id: OracleObjectIdentifier
      properties:
        table:
          description: Required. The table name.
          type: string
        schema:
          type: string
          description: Required. The schema name.
      description: Oracle data source object identifier.
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        operations:
          type: array
          description: A list of operations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/Operation'
      type: object
      id: ListOperationsResponse
    FetchStaticIpsResponse:
      id: FetchStaticIpsResponse
      description: Response message for a 'FetchStaticIps' response.
      properties:
        staticIps:
          type: array
          items:
            type: string
          description: list of static ips by account
        nextPageToken:
          description: 'A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
      type: object
    SourceConfig:
      type: object
      id: SourceConfig
      description: The configuration of the stream source.
      properties:
        mysqlSourceConfig:
          description: MySQL data source configuration.
          $ref: '#/components/schemas/MysqlSourceConfig'
        postgresqlSourceConfig:
          $ref: '#/components/schemas/PostgresqlSourceConfig'
          description: PostgreSQL data source configuration.
        sourceConnectionProfile:
          type: string
          description: 'Required. Source connection profile resoource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`'
        oracleSourceConfig:
          $ref: '#/components/schemas/OracleSourceConfig'
          description: Oracle data source configuration.
    ListConnectionProfilesResponse:
      type: object
      properties:
        unreachable:
          items:
            type: string
          description: Locations that could not be reached.
          type: array
        nextPageToken:
          type: string
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
        connectionProfiles:
          items:
            $ref: '#/components/schemas/ConnectionProfile'
          description: List of connection profiles.
          type: array
      id: ListConnectionProfilesResponse
      description: Response message for listing connection profiles.
    BigQueryProfile:
      description: BigQuery warehouse profile.
      properties: {}
      id: BigQueryProfile
      type: object
    ValidationResult:
      description: Contains the current validation results.
      properties:
        validations:
          type: array
          items:
            $ref: '#/components/schemas/Validation'
          description: A list of validations (includes both executed as well as not executed validations).
      type: object
      id: ValidationResult
    PostgresqlRdbms:
      properties:
        postgresqlSchemas:
          items:
            $ref: '#/components/schemas/PostgresqlSchema'
          description: PostgreSQL schemas in the database server.
          type: array
      description: PostgreSQL database structure.
      type: object
      id: PostgresqlRdbms
    Operation:
      type: object
      description: This resource represents a long-running operation that is the result of a network API call.
      properties:
        metadata:
          type: object
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        response:
          type: object
          description: 'The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.'
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
        name:
          type: string
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.'
        done:
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
          type: boolean
        error:
          description: The error result of the operation in case of failure or cancellation.
          $ref: '#/components/schemas/Status'
      id: Operation
    BackfillJob:
      type: object
      properties:
        state:
          type: string
          description: Output only. Backfill job state.
          enumDescriptions:
            - Default value.
            - Backfill job was never started for the stream object (stream has backfill strategy defined as manual or object was explicitly excluded from automatic backfill).
            - Backfill job will start pending available resources.
            - Backfill job is running.
            - Backfill job stopped (next job run will start from beginning).
            - Backfill job failed (due to an error).
            - Backfill completed successfully.
            - Backfill job failed since the table structure is currently unsupported for backfill.
          enum:
            - STATE_UNSPECIFIED
            - NOT_STARTED
            - PENDING
            - ACTIVE
            - STOPPED
            - FAILED
            - COMPLETED
            - UNSUPPORTED
          readOnly: true
        lastStartTime:
          readOnly: true
          description: Output only. Backfill job's start time.
          type: string
          format: google-datetime
        trigger:
          enum:
            - TRIGGER_UNSPECIFIED
            - AUTOMATIC
            - MANUAL
          enumDescriptions:
            - Default value.
            - Object backfill job was triggered automatically according to the stream's backfill strategy.
            - Object backfill job was triggered manually using the dedicated API.
          description: Backfill job's triggering reason.
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
          readOnly: true
          description: Output only. Errors which caused the backfill job to fail.
        lastEndTime:
          type: string
          description: Output only. Backfill job's end time.
          readOnly: true
          format: google-datetime
      id: BackfillJob
      description: Represents a backfill job on a specific stream object.
    PostgresqlObjectIdentifier:
      properties:
        table:
          type: string
          description: Required. The table name.
        schema:
          description: Required. The schema name.
          type: string
      description: PostgreSQL data source object identifier.
      id: PostgresqlObjectIdentifier
      type: object
    ValidationMessage:
      properties:
        metadata:
          type: object
          description: Additional metadata related to the result.
          additionalProperties:
            type: string
        level:
          description: Message severity level (warning or error).
          type: string
          enumDescriptions:
            - Unspecified level.
            - Potentially cause issues with the Stream.
            - Definitely cause issues with the Stream.
          enum:
            - LEVEL_UNSPECIFIED
            - WARNING
            - ERROR
        message:
          type: string
          description: The result of the validation.
        code:
          type: string
          description: A custom code identifying this specific message.
      type: object
      description: Represent user-facing validation result message.
      id: ValidationMessage
    PostgresqlSourceConfig:
      description: PostgreSQL data source configuration
      id: PostgresqlSourceConfig
      type: object
      properties:
        excludeObjects:
          description: PostgreSQL objects to exclude from the stream.
          $ref: '#/components/schemas/PostgresqlRdbms'
        publication:
          description: Required. The name of the publication that includes the set of all tables that are defined in the stream's include_objects.
          type: string
        includeObjects:
          $ref: '#/components/schemas/PostgresqlRdbms'
          description: PostgreSQL objects to include in the stream.
        replicationSlot:
          type: string
          description: Required. Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.
        maxConcurrentBackfillTasks:
          type: integer
          format: int32
          description: 'Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system''s default value will be used.'
    LookupStreamObjectRequest:
      description: Request for looking up a specific stream object by its source object identifier.
      properties:
        sourceObjectIdentifier:
          description: Required. The source object identifier which maps to the stream object.
          $ref: '#/components/schemas/SourceObjectIdentifier'
      id: LookupStreamObjectRequest
      type: object
    OracleRdbms:
      properties:
        oracleSchemas:
          items:
            $ref: '#/components/schemas/OracleSchema'
          type: array
          description: Oracle schemas/databases in the database server.
      id: OracleRdbms
      type: object
      description: Oracle database structure.
    MysqlRdbms:
      type: object
      id: MysqlRdbms
      description: MySQL database structure
      properties:
        mysqlDatabases:
          items:
            $ref: '#/components/schemas/MysqlDatabase'
          description: Mysql databases on the server
          type: array
    AvroFileFormat:
      id: AvroFileFormat
      type: object
      properties: {}
      description: AVRO file format configuration.
    BackfillNoneStrategy:
      properties: {}
      description: Backfill strategy to disable automatic backfill for the Stream's objects.
      id: BackfillNoneStrategy
      type: object
    PostgresqlTable:
      id: PostgresqlTable
      type: object
      description: PostgreSQL table.
      properties:
        table:
          description: Table name.
          type: string
        postgresqlColumns:
          description: 'PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.'
          items:
            $ref: '#/components/schemas/PostgresqlColumn'
          type: array
    PrivateConnectivity:
      description: Private Connectivity
      id: PrivateConnectivity
      type: object
      properties:
        privateConnection:
          type: string
          description: 'Required. A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`'
    Validation:
      description: A validation to perform on a stream.
      type: object
      id: Validation
      properties:
        description:
          description: A short description of the validation.
          type: string
        state:
          description: Output only. Validation execution status.
          enumDescriptions:
            - Unspecified state.
            - Validation did not execute.
            - Validation failed.
            - Validation passed.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - NOT_EXECUTED
            - FAILED
            - PASSED
          readOnly: true
        code:
          description: A custom code identifying this validation.
          type: string
        message:
          items:
            $ref: '#/components/schemas/ValidationMessage'
          description: Messages reflecting the validation results.
          type: array
    StartBackfillJobRequest:
      description: Request for manually initiating a backfill job for a specific stream object.
      type: object
      id: StartBackfillJobRequest
      properties: {}
    CdcStrategy:
      type: object
      properties:
        mostRecentStartPosition:
          $ref: '#/components/schemas/MostRecentStartPosition'
          description: Optional. Start replicating from the most recent position in the source.
        specificStartPosition:
          $ref: '#/components/schemas/SpecificStartPosition'
          description: Optional. Start replicating from a specific position in the source.
        nextAvailableStartPosition:
          description: Optional. Resume replication from the next available position in the source.
          $ref: '#/components/schemas/NextAvailableStartPosition'
      description: The strategy that the stream uses for CDC replication.
      id: CdcStrategy
    JsonFileFormat:
      properties:
        compression:
          enum:
            - JSON_COMPRESSION_UNSPECIFIED
            - NO_COMPRESSION
            - GZIP
          type: string
          enumDescriptions:
            - Unspecified json file compression.
            - Do not compress JSON file.
            - Gzip compression.
          description: Compression of the loaded JSON file.
        schemaFileFormat:
          type: string
          enum:
            - SCHEMA_FILE_FORMAT_UNSPECIFIED
            - NO_SCHEMA_FILE
            - AVRO_SCHEMA_FILE
          enumDescriptions:
            - Unspecified schema file format.
            - Do not attach schema file.
            - Avro schema format.
          description: The schema file format along JSON data files.
      description: JSON file format configuration.
      id: JsonFileFormat
      type: object
    MysqlSourceConfig:
      properties:
        includeObjects:
          $ref: '#/components/schemas/MysqlRdbms'
          description: MySQL objects to retrieve from the source.
        maxConcurrentBackfillTasks:
          description: 'Maximum number of concurrent backfill tasks. The number should be non negative. If not set (or set to 0), the system''s default value will be used.'
          type: integer
          format: int32
        excludeObjects:
          $ref: '#/components/schemas/MysqlRdbms'
          description: MySQL objects to exclude from the stream.
        maxConcurrentCdcTasks:
          description: 'Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system''s default value will be used.'
          format: int32
          type: integer
      type: object
      id: MysqlSourceConfig
      description: MySQL source configuration
    VpcPeeringConfig:
      description: The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
      type: object
      properties:
        vpc:
          type: string
          description: 'Required. Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`'
        subnet:
          type: string
          description: Required. A free subnet for peering. (CIDR of /29)
      id: VpcPeeringConfig
    StaticServiceIpConnectivity:
      properties: {}
      description: Static IP address connectivity. Used when the source database is configured to allow incoming connections from the Datastream public IP addresses for the region specified in the connection profile.
      type: object
      id: StaticServiceIpConnectivity
    SingleTargetDataset:
      type: object
      id: SingleTargetDataset
      description: A single target dataset to which all data will be streamed.
      properties:
        datasetId:
          type: string
          description: 'The dataset ID of the target dataset. DatasetIds allowed characters: https://cloud.google.com/bigquery/docs/reference/rest/v2/datasets#datasetreference.'
    StopBackfillJobResponse:
      description: Response for manually stop a backfill job for a specific stream object.
      id: StopBackfillJobResponse
      properties:
        object:
          description: The stream object resource the backfill job was stopped for.
          $ref: '#/components/schemas/StreamObject'
      type: object
    MysqlSslConfig:
      properties:
        caCertificate:
          type: string
          description: Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
        clientCertificateSet:
          description: Output only. Indicates whether the client_certificate field is set.
          readOnly: true
          type: boolean
        clientCertificate:
          type: string
          description: Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
        caCertificateSet:
          readOnly: true
          description: Output only. Indicates whether the ca_certificate field is set.
          type: boolean
        clientKey:
          description: Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
          type: string
        clientKeySet:
          description: Output only. Indicates whether the client_key field is set.
          type: boolean
          readOnly: true
      type: object
      description: MySQL SSL configuration information.
      id: MysqlSslConfig
    PostgresqlColumn:
      id: PostgresqlColumn
      type: object
      description: PostgreSQL Column.
      properties:
        column:
          type: string
          description: Column name.
        primaryKey:
          description: Whether or not the column represents a primary key.
          type: boolean
        nullable:
          type: boolean
          description: Whether or not the column can accept a null value.
        length:
          type: integer
          format: int32
          description: Column length.
        dataType:
          type: string
          description: The PostgreSQL data type.
        scale:
          format: int32
          type: integer
          description: Column scale.
        ordinalPosition:
          description: The ordinal position of the column in the table.
          type: integer
          format: int32
        precision:
          description: Column precision.
          type: integer
          format: int32
    DiscoverConnectionProfileResponse:
      id: DiscoverConnectionProfileResponse
      type: object
      properties:
        oracleRdbms:
          description: Enriched Oracle RDBMS object.
          $ref: '#/components/schemas/OracleRdbms'
        postgresqlRdbms:
          $ref: '#/components/schemas/PostgresqlRdbms'
          description: Enriched PostgreSQL RDBMS object.
        mysqlRdbms:
          description: Enriched MySQL RDBMS object.
          $ref: '#/components/schemas/MysqlRdbms'
      description: Response from a discover request.
    NextAvailableStartPosition:
      description: CDC strategy to resume replication from the next available position in the source.
      properties: {}
      type: object
      id: NextAvailableStartPosition
    PrivateConnection:
      type: object
      id: PrivateConnection
      description: The PrivateConnection resource is used to establish private connectivity between Datastream and a customer's network.
      properties:
        error:
          readOnly: true
          $ref: '#/components/schemas/Error'
          description: 'Output only. In case of error, the details of the error in a user-friendly format.'
        vpcPeeringConfig:
          description: VPC Peering Config.
          $ref: '#/components/schemas/VpcPeeringConfig'
        updateTime:
          readOnly: true
          type: string
          description: Output only. The update time of the resource.
          format: google-datetime
        name:
          description: Output only. The resource's name.
          readOnly: true
          type: string
        createTime:
          description: Output only. The create time of the resource.
          type: string
          readOnly: true
          format: google-datetime
        labels:
          description: Labels.
          type: object
          additionalProperties:
            type: string
        state:
          description: Output only. The state of the Private Connection.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - CREATED
            - FAILED
            - DELETING
            - FAILED_TO_DELETE
          enumDescriptions:
            - Unspecified state.
            - The private connection is in creation state - creating resources.
            - The private connection has been created with all of its resources.
            - The private connection creation has failed.
            - The private connection is being deleted.
            - 'Delete request has failed, resource is in invalid state.'
          type: string
          readOnly: true
        displayName:
          description: Required. Display name.
          type: string
    CancelOperationRequest:
      description: The request message for Operations.CancelOperation.
      type: object
      id: CancelOperationRequest
      properties: {}
    BigQueryDestinationConfig:
      type: object
      description: BigQuery destination configuration
      properties:
        dataFreshness:
          type: string
          format: google-duration
          description: 'The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing this field will only affect new tables created in the future, but existing tables will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.'
        sourceHierarchyDatasets:
          description: Source hierarchy datasets.
          $ref: '#/components/schemas/SourceHierarchyDatasets'
        singleTargetDataset:
          $ref: '#/components/schemas/SingleTargetDataset'
          description: Single destination dataset.
      id: BigQueryDestinationConfig
    Error:
      type: object
      id: Error
      description: Represent a user-facing Error.
      properties:
        reason:
          description: A title that explains the reason for the error.
          type: string
        errorTime:
          format: google-datetime
          description: The time when the error occurred.
          type: string
        errorUuid:
          description: 'A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.'
          type: string
        details:
          type: object
          additionalProperties:
            type: string
          description: Additional information about the error.
        message:
          description: A message containing more information about the error that occurred.
          type: string
    MysqlObjectIdentifier:
      properties:
        database:
          type: string
          description: Required. The database name.
        table:
          type: string
          description: Required. The table name.
      type: object
      description: Mysql data source object identifier.
      id: MysqlObjectIdentifier
    DatasetTemplate:
      properties:
        datasetIdPrefix:
          description: 'If supplied, every created dataset will have its name prefixed by the provided value. The prefix and name will be separated by an underscore. i.e. _.'
          type: string
        location:
          description: 'Required. The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.'
          type: string
        kmsKeyName:
          type: string
          description: 'Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}. See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.'
      type: object
      id: DatasetTemplate
      description: Dataset template used for dynamic dataset creation.
    StreamObject:
      description: A specific stream object (e.g a specific DB table).
      properties:
        name:
          readOnly: true
          type: string
          description: Output only. The object resource's name.
        sourceObject:
          description: The object identifier in the data source.
          $ref: '#/components/schemas/SourceObjectIdentifier'
        backfillJob:
          $ref: '#/components/schemas/BackfillJob'
          description: The latest backfill job that was initiated for the stream object.
        errors:
          items:
            $ref: '#/components/schemas/Error'
          description: Output only. Active errors on the object.
          readOnly: true
          type: array
        createTime:
          readOnly: true
          description: Output only. The creation time of the object.
          type: string
          format: google-datetime
        displayName:
          type: string
          description: Required. Display name.
        updateTime:
          type: string
          format: google-datetime
          readOnly: true
          description: Output only. The last update time of the object.
      type: object
      id: StreamObject
    Status:
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      id: Status
      type: object
      properties:
        message:
          type: string
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
        code:
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          format: int32
          type: integer
        details:
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          type: array
    BackfillAllStrategy:
      type: object
      properties:
        oracleExcludedObjects:
          $ref: '#/components/schemas/OracleRdbms'
          description: Oracle data source objects to avoid backfilling.
        mysqlExcludedObjects:
          $ref: '#/components/schemas/MysqlRdbms'
          description: MySQL data source objects to avoid backfilling.
        postgresqlExcludedObjects:
          description: PostgreSQL data source objects to avoid backfilling.
          $ref: '#/components/schemas/PostgresqlRdbms'
      id: BackfillAllStrategy
      description: Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
    ListLocationsResponse:
      description: The response message for Locations.ListLocations.
      type: object
      id: ListLocationsResponse
      properties:
        nextPageToken:
          type: string
          description: The standard List next-page token.
        locations:
          items:
            $ref: '#/components/schemas/Location'
          description: A list of locations that matches the specified filter in the request.
          type: array
    DiscoverConnectionProfileRequest:
      properties:
        fullHierarchy:
          description: Whether to retrieve the full hierarchy of data objects (TRUE) or only the current level (FALSE).
          type: boolean
        connectionProfileName:
          type: string
          description: A reference to an existing connection profile.
        mysqlRdbms:
          $ref: '#/components/schemas/MysqlRdbms'
          description: MySQL RDBMS to enrich with child data objects and metadata.
        connectionProfile:
          description: An ad-hoc connection profile configuration.
          $ref: '#/components/schemas/ConnectionProfile'
        oracleRdbms:
          description: Oracle RDBMS to enrich with child data objects and metadata.
          $ref: '#/components/schemas/OracleRdbms'
        postgresqlRdbms:
          description: PostgreSQL RDBMS to enrich with child data objects and metadata.
          $ref: '#/components/schemas/PostgresqlRdbms'
        hierarchyDepth:
          type: integer
          description: The number of hierarchy levels below the current level to be retrieved.
          format: int32
      description: Request message for 'discover' ConnectionProfile request.
      id: DiscoverConnectionProfileRequest
      type: object
    DropLargeObjects:
      type: object
      properties: {}
      description: Configuration to drop large object values.
      id: DropLargeObjects
    ForwardSshTunnelConnectivity:
      id: ForwardSshTunnelConnectivity
      description: Forward SSH Tunnel connectivity.
      properties:
        password:
          description: Input only. SSH password.
          type: string
        username:
          description: Required. Username for the SSH tunnel.
          type: string
        privateKey:
          description: Input only. SSH private key.
          type: string
        hostname:
          type: string
          description: Required. Hostname for the SSH tunnel.
        port:
          description: 'Port for the SSH tunnel, default value is 22.'
          type: integer
          format: int32
      type: object
    StreamLargeObjects:
      id: StreamLargeObjects
      type: object
      properties: {}
      description: Configuration to stream large object values.
    MysqlProfile:
      type: object
      description: MySQL database profile.
      properties:
        sslConfig:
          $ref: '#/components/schemas/MysqlSslConfig'
          description: SSL configuration for the MySQL connection.
        password:
          type: string
          description: Required. Input only. Password for the MySQL connection.
        hostname:
          description: Required. Hostname for the MySQL connection.
          type: string
        port:
          type: integer
          description: 'Port for the MySQL connection, default value is 3306.'
          format: int32
        username:
          description: Required. Username for the MySQL connection.
          type: string
      id: MysqlProfile
    Route:
      type: object
      id: Route
      description: 'The route resource is the child of the private connection resource, used for defining a route for a private connection.'
      properties:
        labels:
          description: Labels.
          type: object
          additionalProperties:
            type: string
        destinationAddress:
          description: Required. Destination address for connection
          type: string
        updateTime:
          readOnly: true
          type: string
          format: google-datetime
          description: Output only. The update time of the resource.
        displayName:
          type: string
          description: Required. Display name.
        destinationPort:
          description: Destination port for connection
          type: integer
          format: int32
        name:
          description: Output only. The resource's name.
          readOnly: true
          type: string
        createTime:
          readOnly: true
          format: google-datetime
          description: Output only. The create time of the resource.
          type: string
    RunStreamRequest:
      type: object
      id: RunStreamRequest
      description: Request message for running a stream.
      properties:
        cdcStrategy:
          description: 'Optional. The CDC strategy of the stream. If not set, the system''s default value will be used.'
          $ref: '#/components/schemas/CdcStrategy'
    Location:
      id: Location
      description: A resource that represents a Google Cloud location.
      type: object
      properties:
        metadata:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          description: Service-specific metadata. For example the available capacity at the given location.
          type: object
        displayName:
          type: string
          description: 'The friendly name for this location, typically a nearby city name. For example, "Tokyo".'
        labels:
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
          additionalProperties:
            type: string
          type: object
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        name:
          type: string
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
    OracleProfile:
      properties:
        connectionAttributes:
          additionalProperties:
            type: string
          description: Connection string attributes
          type: object
        port:
          description: 'Port for the Oracle connection, default value is 1521.'
          type: integer
          format: int32
        hostname:
          description: Required. Hostname for the Oracle connection.
          type: string
        username:
          type: string
          description: Required. Username for the Oracle connection.
        password:
          description: Required. Password for the Oracle connection.
          type: string
        databaseService:
          description: Required. Database for the Oracle connection.
          type: string
      type: object
      description: Oracle database profile.
      id: OracleProfile
    GcsDestinationConfig:
      description: Google Cloud Storage destination configuration
      id: GcsDestinationConfig
      properties:
        jsonFileFormat:
          $ref: '#/components/schemas/JsonFileFormat'
          description: JSON file format configuration.
        fileRotationMb:
          description: The maximum file size to be saved in the bucket.
          type: integer
          format: int32
        path:
          type: string
          description: Path inside the Cloud Storage bucket to write data to.
        fileRotationInterval:
          format: google-duration
          description: The maximum duration for which new events are added before a file is closed and a new file is created. Values within the range of 15-60 seconds are allowed.
          type: string
        avroFileFormat:
          $ref: '#/components/schemas/AvroFileFormat'
          description: AVRO file format configuration.
      type: object
    MysqlTable:
      type: object
      id: MysqlTable
      description: MySQL table.
      properties:
        mysqlColumns:
          items:
            $ref: '#/components/schemas/MysqlColumn'
          type: array
          description: 'MySQL columns in the database. When unspecified as part of include/exclude objects, includes/excludes everything.'
        table:
          description: Table name.
          type: string
    SpecificStartPosition:
      properties:
        mysqlLogPosition:
          $ref: '#/components/schemas/MysqlLogPosition'
          description: MySQL specific log position to start replicating from.
      description: CDC strategy to start replicating from a specific position in the source.
      id: SpecificStartPosition
      type: object
    OracleColumn:
      id: OracleColumn
      type: object
      description: Oracle Column.
      properties:
        precision:
          description: Column precision.
          type: integer
          format: int32
        dataType:
          type: string
          description: The Oracle data type.
        encoding:
          description: Column encoding.
          type: string
        column:
          description: Column name.
          type: string
        primaryKey:
          type: boolean
          description: Whether or not the column represents a primary key.
        length:
          format: int32
          description: Column length.
          type: integer
        ordinalPosition:
          description: The ordinal position of the column in the table.
          format: int32
          type: integer
        scale:
          format: int32
          type: integer
          description: Column scale.
        nullable:
          type: boolean
          description: Whether or not the column can accept a null value.
    MysqlColumn:
      type: object
      id: MysqlColumn
      properties:
        dataType:
          description: 'The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html'
          type: string
        primaryKey:
          description: Whether or not the column represents a primary key.
          type: boolean
        column:
          description: Column name.
          type: string
        nullable:
          description: Whether or not the column can accept a null value.
          type: boolean
        precision:
          type: integer
          format: int32
          description: Column precision.
        length:
          format: int32
          type: integer
          description: Column length.
        ordinalPosition:
          format: int32
          description: The ordinal position of the column in the table.
          type: integer
        scale:
          format: int32
          description: Column scale.
          type: integer
        collation:
          type: string
          description: Column collation.
      description: MySQL Column.
    StartBackfillJobResponse:
      description: Response for manually initiating a backfill job for a specific stream object.
      id: StartBackfillJobResponse
      type: object
      properties:
        object:
          description: The stream object resource a backfill job was started for.
          $ref: '#/components/schemas/StreamObject'
    PostgresqlProfile:
      id: PostgresqlProfile
      properties:
        password:
          type: string
          description: Required. Password for the PostgreSQL connection.
        hostname:
          type: string
          description: Required. Hostname for the PostgreSQL connection.
        port:
          description: 'Port for the PostgreSQL connection, default value is 5432.'
          format: int32
          type: integer
        database:
          description: Required. Database for the PostgreSQL connection.
          type: string
        username:
          type: string
          description: Required. Username for the PostgreSQL connection.
      type: object
      description: PostgreSQL database profile.
    DestinationConfig:
      type: object
      properties:
        destinationConnectionProfile:
          type: string
          description: 'Required. Destination connection profile resource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`'
        bigqueryDestinationConfig:
          description: BigQuery destination configuration.
          $ref: '#/components/schemas/BigQueryDestinationConfig'
        gcsDestinationConfig:
          $ref: '#/components/schemas/GcsDestinationConfig'
          description: A configuration for how data should be loaded to Cloud Storage.
      description: The configuration of the stream destination.
      id: DestinationConfig
    Empty:
      type: object
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      properties: {}
      id: Empty
    ListStreamsResponse:
      id: ListStreamsResponse
      properties:
        nextPageToken:
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
        streams:
          items:
            $ref: '#/components/schemas/Stream'
          type: array
          description: List of streams
        unreachable:
          description: Locations that could not be reached.
          items:
            type: string
          type: array
      type: object
      description: Response message for listing streams.
    MysqlDatabase:
      type: object
      id: MysqlDatabase
      description: MySQL database.
      properties:
        database:
          type: string
          description: Database name.
        mysqlTables:
          type: array
          description: Tables in the database.
          items:
            $ref: '#/components/schemas/MysqlTable'
    StopBackfillJobRequest:
      properties: {}
      id: StopBackfillJobRequest
      type: object
      description: Request for manually stopping a running backfill job for a specific stream object.
    SourceObjectIdentifier:
      properties:
        mysqlIdentifier:
          description: Mysql data source object identifier.
          $ref: '#/components/schemas/MysqlObjectIdentifier'
        postgresqlIdentifier:
          description: PostgreSQL data source object identifier.
          $ref: '#/components/schemas/PostgresqlObjectIdentifier'
        oracleIdentifier:
          description: Oracle data source object identifier.
          $ref: '#/components/schemas/OracleObjectIdentifier'
      id: SourceObjectIdentifier
      description: Represents an identifier of an object in the data source.
      type: object
    ListPrivateConnectionsResponse:
      description: Response containing a list of private connection configurations.
      type: object
      properties:
        nextPageToken:
          type: string
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
        privateConnections:
          items:
            $ref: '#/components/schemas/PrivateConnection'
          type: array
          description: List of private connectivity configurations.
        unreachable:
          items:
            type: string
          type: array
          description: Locations that could not be reached.
      id: ListPrivateConnectionsResponse
    MostRecentStartPosition:
      description: CDC strategy to start replicating from the most recent position in the source.
      properties: {}
      type: object
      id: MostRecentStartPosition
    MysqlLogPosition:
      id: MysqlLogPosition
      properties:
        logFile:
          description: The binary log file name.
          type: string
        logPosition:
          type: integer
          description: The position within the binary log file. Default is head of file.
          format: int32
      description: MySQL log position
      type: object
    GcsProfile:
      properties:
        bucket:
          type: string
          description: Required. The Cloud Storage bucket name.
        rootPath:
          type: string
          description: The root path inside the Cloud Storage bucket.
      id: GcsProfile
      description: Cloud Storage bucket profile.
      type: object
    OperationMetadata:
      properties:
        statusMessage:
          type: string
          readOnly: true
          description: 'Output only. Human-readable status of the operation, if any.'
        createTime:
          readOnly: true
          type: string
          description: Output only. The time the operation was created.
          format: google-datetime
        requestedCancellation:
          type: boolean
          readOnly: true
          description: 'Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
        apiVersion:
          description: Output only. API version used to start the operation.
          type: string
          readOnly: true
        verb:
          readOnly: true
          type: string
          description: Output only. Name of the verb executed by the operation.
        target:
          description: Output only. Server-defined resource path for the target of the operation.
          type: string
          readOnly: true
        endTime:
          format: google-datetime
          description: Output only. The time the operation finished running.
          type: string
          readOnly: true
        validationResult:
          readOnly: true
          $ref: '#/components/schemas/ValidationResult'
          description: Output only. Results of executed validations if there are any.
      type: object
      description: Represents the metadata of the long-running operation.
      id: OperationMetadata
    PostgresqlSchema:
      type: object
      properties:
        postgresqlTables:
          type: array
          items:
            $ref: '#/components/schemas/PostgresqlTable'
          description: Tables in the schema.
        schema:
          type: string
          description: Schema name.
      description: PostgreSQL schema.
      id: PostgresqlSchema
    Stream:
      description: A resource representing streaming data from a source to a destination.
      id: Stream
      type: object
      properties:
        labels:
          additionalProperties:
            type: string
          description: Labels.
          type: object
        state:
          enum:
            - STATE_UNSPECIFIED
            - NOT_STARTED
            - RUNNING
            - PAUSED
            - MAINTENANCE
            - FAILED
            - FAILED_PERMANENTLY
            - STARTING
            - DRAINING
          type: string
          enumDescriptions:
            - Unspecified stream state.
            - The stream has been created but has not yet started streaming data.
            - The stream is running.
            - The stream is paused.
            - The stream is in maintenance mode. Updates are rejected on the resource in this state.
            - The stream is experiencing an error that is preventing data from being streamed.
            - The stream has experienced a terminal failure.
            - 'The stream is starting, but not yet running.'
            - 'The Stream is no longer reading new events, but still writing events in the buffer.'
          description: The state of the stream.
        displayName:
          description: Required. Display name.
          type: string
        destinationConfig:
          description: Required. Destination connection profile configuration.
          $ref: '#/components/schemas/DestinationConfig'
        name:
          type: string
          description: Output only. The stream's name.
          readOnly: true
        backfillNone:
          description: Do not automatically backfill any objects.
          $ref: '#/components/schemas/BackfillNoneStrategy'
        updateTime:
          format: google-datetime
          type: string
          description: Output only. The last update time of the stream.
          readOnly: true
        customerManagedEncryptionKey:
          type: string
          description: 'Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.'
        sourceConfig:
          $ref: '#/components/schemas/SourceConfig'
          description: Required. Source connection profile configuration.
        createTime:
          type: string
          description: Output only. The creation time of the stream.
          readOnly: true
          format: google-datetime
        errors:
          items:
            $ref: '#/components/schemas/Error'
          readOnly: true
          description: Output only. Errors on the Stream.
          type: array
        backfillAll:
          description: Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
          $ref: '#/components/schemas/BackfillAllStrategy'
  parameters:
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
  x-stackQL-resources:
    objects:
      id: google.datastream.objects
      name: objects
      title: Objects
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.streamObjects
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        stop_backfill_job:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects~1{objectsId}:stopBackfillJob/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        start_backfill_job:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects~1{objectsId}:startBackfillJob/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects~1{objectsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        lookup:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects:lookup/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/objects/methods/list'
          - $ref: '#/components/x-stackQL-resources/objects/methods/get'
        insert: []
        update: []
        delete: []
    streams:
      id: google.datastream.streams
      name: streams
      title: Streams
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        run:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}:run/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.streams
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/streams/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/streams/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/streams/methods/delete'
    operations:
      id: google.datastream.operations
      name: operations
      title: Operations
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    connection_profiles:
      id: google.datastream.connection_profiles
      name: connection_profiles
      title: Connection Profiles
      methods:
        discover:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles:discover/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.connectionProfiles
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles~1{connectionProfilesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles~1{connectionProfilesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles~1{connectionProfilesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/connection_profiles/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/connection_profiles/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/connection_profiles/methods/delete'
    routes:
      id: google.datastream.routes
      name: routes
      title: Routes
      methods:
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.routes
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes~1{routesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes~1{routesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/routes/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/routes/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/routes/methods/delete'
    private_connections:
      id: google.datastream.private_connections
      name: private_connections
      title: Private Connections
      methods:
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.privateConnections
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/private_connections/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/private_connections/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/private_connections/methods/delete'
    locations:
      id: google.datastream.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        delete: []
    static_ips:
      id: google.datastream.static_ips
      name: static_ips
      title: Static Ips
      methods:
        fetch_static_ips:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}:fetchStaticIps/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects':
    parameters: &ref_1
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/access_token'
    get:
      description: Use this method to list the objects of a specific stream.
      operationId: datastream.projects.locations.streams.objects.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStreamObjectsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: objects
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.streamObjects
  '/v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects/{objectsId}:stopBackfillJob':
    parameters: *ref_1
    post:
      description: Use this method to stop a backfill job for the specified stream object.
      operationId: datastream.projects.locations.streams.objects.stopBackfillJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopBackfillJobRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopBackfillJobResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: path
          name: objectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-method: stop_backfill_job
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects/{objectsId}:startBackfillJob':
    parameters: *ref_1
    post:
      description: Use this method to start a backfill job for the specified stream object.
      operationId: datastream.projects.locations.streams.objects.startBackfillJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartBackfillJobRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartBackfillJobResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: path
          name: objectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-method: start_backfill_job
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects/{objectsId}':
    parameters: *ref_1
    get:
      description: Use this method to get details about a stream object.
      operationId: datastream.projects.locations.streams.objects.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamObject'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: path
          name: objectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects:lookup':
    parameters: *ref_1
    post:
      description: Use this method to look up a stream object by its source object identifier.
      operationId: datastream.projects.locations.streams.objects.lookup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupStreamObjectRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamObject'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-method: lookup
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}':
    parameters: *ref_1
    get:
      description: Use this method to get details about a stream.
      operationId: datastream.projects.locations.streams.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
      x-stackQL-resource: streams
      x-stackQL-method: get
      x-stackQL-verb: exec
    patch:
      description: Use this method to update the configuration of a stream.
      operationId: datastream.projects.locations.streams.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stream'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: force
          schema:
            type: boolean
        - in: query
          name: cdcStrategy.specificStartPosition.mysqlLogPosition.logPosition
          schema:
            type: integer
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: cdcStrategy.specificStartPosition.mysqlLogPosition.logFile
          schema:
            type: string
      x-stackQL-resource: streams
      x-stackQL-method: patch
      x-stackQL-verb: exec
    delete:
      description: Use this method to delete a stream.
      operationId: datastream.projects.locations.streams.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: streams
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}:run':
    parameters: *ref_1
    post:
      description: 'Use this method to start, resume or recover a stream with a non default CDC strategy. NOTE: This feature is currently experimental.'
      operationId: datastream.projects.locations.streams.run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunStreamRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
      x-stackQL-resource: streams
      x-stackQL-method: run
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/streams':
    parameters: *ref_1
    post:
      description: Use this method to create a stream.
      operationId: datastream.projects.locations.streams.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stream'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: streamId
          schema:
            type: string
      x-stackQL-resource: streams
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Use this method to list streams in a project and location.
      operationId: datastream.projects.locations.streams.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStreamsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: streams
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.streams
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}':
    parameters: *ref_1
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: datastream.projects.locations.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: get
      x-stackQL-verb: exec
    delete:
      description: 'Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.'
      operationId: datastream.projects.locations.operations.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel':
    parameters: *ref_1
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
      operationId: datastream.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: cancel
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/operations':
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`.'
      operationId: datastream.projects.locations.operations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.operations
  '/v1/projects/{projectsId}/locations/{locationsId}/connectionProfiles:discover':
    parameters: *ref_1
    post:
      description: 'Use this method to discover a connection profile. The discover API call exposes the data objects and metadata belonging to the profile. Typically, a request returns children data objects of a parent data object that''s optionally supplied in the request.'
      operationId: datastream.projects.locations.connectionProfiles.discover
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoverConnectionProfileRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverConnectionProfileResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-method: discover
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/connectionProfiles':
    parameters: *ref_1
    get:
      description: Use this method to list connection profiles created in a project and location.
      operationId: datastream.projects.locations.connectionProfiles.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectionProfilesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.connectionProfiles
    post:
      description: Use this method to create a connection profile in a project and location.
      operationId: datastream.projects.locations.connectionProfiles.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionProfile'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: connectionProfileId
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
      x-stackQL-resource: connection_profiles
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/connectionProfiles/{connectionProfilesId}':
    parameters: *ref_1
    delete:
      description: Use this method to delete a connection profile.
      operationId: datastream.projects.locations.connectionProfiles.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionProfilesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Use this method to update the parameters of a connection profile.
      operationId: datastream.projects.locations.connectionProfiles.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionProfile'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionProfilesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: connection_profiles
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Use this method to get details about a connection profile.
      operationId: datastream.projects.locations.connectionProfiles.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionProfile'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionProfilesId
          required: true
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-method: get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}/routes':
    parameters: *ref_1
    post:
      description: Use this method to create a route for a private connectivity configuration in a project and location.
      operationId: datastream.projects.locations.privateConnections.routes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: routeId
          schema:
            type: string
      x-stackQL-resource: routes
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Use this method to list routes created for a private connectivity configuration in a project and location.
      operationId: datastream.projects.locations.privateConnections.routes.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoutesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: routes
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.routes
  '/v1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}/routes/{routesId}':
    parameters: *ref_1
    get:
      description: Use this method to get details about a route.
      operationId: datastream.projects.locations.privateConnections.routes.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: path
          name: routesId
          required: true
          schema:
            type: string
      x-stackQL-resource: routes
      x-stackQL-method: get
      x-stackQL-verb: exec
    delete:
      description: Use this method to delete a route.
      operationId: datastream.projects.locations.privateConnections.routes.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: path
          name: routesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: routes
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/privateConnections':
    parameters: *ref_1
    post:
      description: Use this method to create a private connectivity configuration.
      operationId: datastream.projects.locations.privateConnections.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateConnection'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
        - in: query
          name: privateConnectionId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: private_connections
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Use this method to list private connectivity configurations in a project and location.
      operationId: datastream.projects.locations.privateConnections.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrivateConnectionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: private_connections
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.privateConnections
  '/v1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}':
    parameters: *ref_1
    delete:
      description: Use this method to delete a private connectivity configuration.
      operationId: datastream.projects.locations.privateConnections.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: private_connections
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Use this method to get details about a private connectivity configuration.
      operationId: datastream.projects.locations.privateConnections.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateConnection'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: private_connections
      x-stackQL-method: get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations':
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: datastream.projects.locations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.locations
  '/v1/projects/{projectsId}/locations/{locationsId}':
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: datastream.projects.locations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}:fetchStaticIps':
    parameters: *ref_1
    get:
      description: The FetchStaticIps API call exposes the static IP addresses used by Datastream.
      operationId: datastream.projects.locations.fetchStaticIps
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchStaticIpsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: static_ips
      x-stackQL-method: fetch_static_ips
      x-stackQL-verb: exec
