openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Datastream API
  description: ''
  version: v1
  x-discovery-doc-revision: '20230103'
  x-generated-date: '2023-01-19'
externalDocs:
  url: https://cloud.google.com/datastream/
servers:
  - url: https://datastream.googleapis.com
components:
  schemas:
    ValidationResult:
      description: Contains the current validation results.
      type: object
      properties:
        validations:
          items:
            $ref: '#/components/schemas/Validation'
          type: array
          description: A list of validations (includes both executed as well as not executed validations).
      id: ValidationResult
    OracleRdbms:
      id: OracleRdbms
      properties:
        oracleSchemas:
          items:
            $ref: '#/components/schemas/OracleSchema'
          type: array
          description: Oracle schemas/databases in the database server.
      type: object
      description: Oracle database structure.
    PostgresqlSchema:
      properties:
        schema:
          type: string
          description: Schema name.
        postgresqlTables:
          items:
            $ref: '#/components/schemas/PostgresqlTable'
          type: array
          description: Tables in the schema.
      type: object
      id: PostgresqlSchema
      description: PostgreSQL schema.
    CancelOperationRequest:
      id: CancelOperationRequest
      description: The request message for Operations.CancelOperation.
      properties: {}
      type: object
    Empty:
      properties: {}
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      id: Empty
      type: object
    OracleSchema:
      id: OracleSchema
      description: Oracle schema.
      type: object
      properties:
        schema:
          type: string
          description: Schema name.
        oracleTables:
          type: array
          description: Tables in the schema.
          items:
            $ref: '#/components/schemas/OracleTable'
    AvroFileFormat:
      type: object
      properties: {}
      description: AVRO file format configuration.
      id: AvroFileFormat
    PostgresqlProfile:
      id: PostgresqlProfile
      type: object
      properties:
        username:
          description: Required. Username for the PostgreSQL connection.
          type: string
        database:
          type: string
          description: Required. Database for the PostgreSQL connection.
        password:
          type: string
          description: Required. Password for the PostgreSQL connection.
        hostname:
          type: string
          description: Required. Hostname for the PostgreSQL connection.
        port:
          type: integer
          format: int32
          description: Port for the PostgreSQL connection, default value is 5432.
      description: PostgreSQL database profile.
    PostgresqlObjectIdentifier:
      description: PostgreSQL data source object identifier.
      type: object
      properties:
        schema:
          description: Required. The schema name.
          type: string
        table:
          description: Required. The table name.
          type: string
      id: PostgresqlObjectIdentifier
    DatasetTemplate:
      description: Dataset template used for dynamic dataset creation.
      type: object
      id: DatasetTemplate
      properties:
        datasetIdPrefix:
          description: If supplied, every created dataset will have its name prefixed by the provided value. The prefix and name will be separated by an underscore. i.e. _.
          type: string
        location:
          description: Required. The geographic location where the dataset should reside. See https://cloud.google.com/bigquery/docs/locations for supported locations.
          type: string
        kmsKeyName:
          description: Describes the Cloud KMS encryption key that will be used to protect destination BigQuery table. The BigQuery Service Account associated with your project requires access to this encryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}. See https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.
          type: string
    SourceHierarchyDatasets:
      properties:
        datasetTemplate:
          $ref: '#/components/schemas/DatasetTemplate'
      description: Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.
      type: object
      id: SourceHierarchyDatasets
    OracleSourceConfig:
      id: OracleSourceConfig
      properties:
        maxConcurrentCdcTasks:
          description: Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
          format: int32
          type: integer
        includeObjects:
          description: Oracle objects to include in the stream.
          $ref: '#/components/schemas/OracleRdbms'
        excludeObjects:
          $ref: '#/components/schemas/OracleRdbms'
          description: Oracle objects to exclude from the stream.
        streamLargeObjects:
          description: 'Stream large object values. NOTE: This feature is currently experimental.'
          $ref: '#/components/schemas/StreamLargeObjects'
        dropLargeObjects:
          description: Drop large object values.
          $ref: '#/components/schemas/DropLargeObjects'
      description: Oracle data source configuration
      type: object
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      id: ListOperationsResponse
      properties:
        operations:
          description: A list of operations that matches the specified filter in the request.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          type: string
          description: The standard List next-page token.
      type: object
    PostgresqlSourceConfig:
      type: object
      properties:
        excludeObjects:
          $ref: '#/components/schemas/PostgresqlRdbms'
          description: PostgreSQL objects to exclude from the stream.
        includeObjects:
          description: PostgreSQL objects to include in the stream.
          $ref: '#/components/schemas/PostgresqlRdbms'
        replicationSlot:
          description: Required. Immutable. The name of the logical replication slot that's configured with the pgoutput plugin.
          type: string
        publication:
          description: Required. The name of the publication that includes the set of all tables that are defined in the stream's include_objects.
          type: string
      id: PostgresqlSourceConfig
      description: PostgreSQL data source configuration
    BigQueryProfile:
      properties: {}
      type: object
      description: BigQuery warehouse profile.
      id: BigQueryProfile
    ListConnectionProfilesResponse:
      description: Response message for listing connection profiles.
      id: ListConnectionProfilesResponse
      type: object
      properties:
        nextPageToken:
          description: A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
          type: string
        connectionProfiles:
          items:
            $ref: '#/components/schemas/ConnectionProfile'
          description: List of connection profiles.
          type: array
        unreachable:
          items:
            type: string
          description: Locations that could not be reached.
          type: array
    DropLargeObjects:
      type: object
      id: DropLargeObjects
      properties: {}
      description: Configuration to drop large object values.
    OperationMetadata:
      properties:
        verb:
          type: string
          readOnly: true
          description: Output only. Name of the verb executed by the operation.
        requestedCancellation:
          readOnly: true
          description: Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
          type: boolean
        apiVersion:
          readOnly: true
          description: Output only. API version used to start the operation.
          type: string
        createTime:
          description: Output only. The time the operation was created.
          readOnly: true
          type: string
          format: google-datetime
        statusMessage:
          type: string
          readOnly: true
          description: Output only. Human-readable status of the operation, if any.
        target:
          readOnly: true
          type: string
          description: Output only. Server-defined resource path for the target of the operation.
        validationResult:
          readOnly: true
          description: Output only. Results of executed validations if there are any.
          $ref: '#/components/schemas/ValidationResult'
        endTime:
          type: string
          description: Output only. The time the operation finished running.
          readOnly: true
          format: google-datetime
      id: OperationMetadata
      type: object
      description: Represents the metadata of the long-running operation.
    OracleObjectIdentifier:
      properties:
        table:
          description: Required. The table name.
          type: string
        schema:
          type: string
          description: Required. The schema name.
      id: OracleObjectIdentifier
      type: object
      description: Oracle data source object identifier.
    StopBackfillJobResponse:
      properties:
        object:
          $ref: '#/components/schemas/StreamObject'
          description: The stream object resource the backfill job was stopped for.
      id: StopBackfillJobResponse
      type: object
      description: Response for manually stop a backfill job for a specific stream object.
    ListPrivateConnectionsResponse:
      description: Response containing a list of private connection configurations.
      type: object
      properties:
        unreachable:
          items:
            type: string
          type: array
          description: Locations that could not be reached.
        privateConnections:
          description: List of private connectivity configurations.
          type: array
          items:
            $ref: '#/components/schemas/PrivateConnection'
        nextPageToken:
          type: string
          description: A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
      id: ListPrivateConnectionsResponse
    BackfillAllStrategy:
      id: BackfillAllStrategy
      properties:
        oracleExcludedObjects:
          $ref: '#/components/schemas/OracleRdbms'
          description: Oracle data source objects to avoid backfilling.
        mysqlExcludedObjects:
          $ref: '#/components/schemas/MysqlRdbms'
          description: MySQL data source objects to avoid backfilling.
        postgresqlExcludedObjects:
          description: PostgreSQL data source objects to avoid backfilling.
          $ref: '#/components/schemas/PostgresqlRdbms'
      type: object
      description: Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.
    MysqlProfile:
      id: MysqlProfile
      description: MySQL database profile.
      properties:
        port:
          type: integer
          description: Port for the MySQL connection, default value is 3306.
          format: int32
        hostname:
          description: Required. Hostname for the MySQL connection.
          type: string
        password:
          type: string
          description: Required. Input only. Password for the MySQL connection.
        sslConfig:
          description: SSL configuration for the MySQL connection.
          $ref: '#/components/schemas/MysqlSslConfig'
        username:
          description: Required. Username for the MySQL connection.
          type: string
      type: object
    MysqlTable:
      id: MysqlTable
      type: object
      description: MySQL table.
      properties:
        mysqlColumns:
          items:
            $ref: '#/components/schemas/MysqlColumn'
          type: array
          description: MySQL columns in the database. When unspecified as part of include/exclude objects, includes/excludes everything.
        table:
          description: Table name.
          type: string
    JsonFileFormat:
      description: JSON file format configuration.
      properties:
        compression:
          enum:
            - JSON_COMPRESSION_UNSPECIFIED
            - NO_COMPRESSION
            - GZIP
          description: Compression of the loaded JSON file.
          type: string
          enumDescriptions:
            - Unspecified json file compression.
            - Do not compress JSON file.
            - Gzip compression.
        schemaFileFormat:
          enumDescriptions:
            - Unspecified schema file format.
            - Do not attach schema file.
            - Avro schema format.
          type: string
          enum:
            - SCHEMA_FILE_FORMAT_UNSPECIFIED
            - NO_SCHEMA_FILE
            - AVRO_SCHEMA_FILE
          description: The schema file format along JSON data files.
      type: object
      id: JsonFileFormat
    Validation:
      type: object
      id: Validation
      properties:
        message:
          type: array
          description: Messages reflecting the validation results.
          items:
            $ref: '#/components/schemas/ValidationMessage'
        description:
          type: string
          description: A short description of the validation.
        code:
          description: A custom code identifying this validation.
          type: string
        state:
          description: Validation execution status.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - NOT_EXECUTED
            - FAILED
            - PASSED
          enumDescriptions:
            - Unspecified state.
            - Validation did not execute.
            - Validation failed.
            - Validation passed.
      description: A validation to perform on a stream.
    Stream:
      id: Stream
      properties:
        backfillAll:
          description: Automatically backfill objects included in the stream source configuration. Specific objects can be excluded.
          $ref: '#/components/schemas/BackfillAllStrategy'
        customerManagedEncryptionKey:
          type: string
          description: Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data will be encrypted using an internal Stream-specific encryption key provisioned through KMS.
        createTime:
          type: string
          format: google-datetime
          description: Output only. The creation time of the stream.
          readOnly: true
        labels:
          description: Labels.
          type: object
          additionalProperties:
            type: string
        state:
          description: The state of the stream.
          enumDescriptions:
            - Unspecified stream state.
            - The stream has been created but has not yet started streaming data.
            - The stream is running.
            - The stream is paused.
            - The stream is in maintenance mode. Updates are rejected on the resource in this state.
            - The stream is experiencing an error that is preventing data from being streamed.
            - The stream has experienced a terminal failure.
            - The stream is starting, but not yet running.
            - The Stream is no longer reading new events, but still writing events in the buffer.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - NOT_STARTED
            - RUNNING
            - PAUSED
            - MAINTENANCE
            - FAILED
            - FAILED_PERMANENTLY
            - STARTING
            - DRAINING
        destinationConfig:
          $ref: '#/components/schemas/DestinationConfig'
          description: Required. Destination connection profile configuration.
        displayName:
          description: Required. Display name.
          type: string
        name:
          description: Output only. The stream's name.
          type: string
          readOnly: true
        backfillNone:
          description: Do not automatically backfill any objects.
          $ref: '#/components/schemas/BackfillNoneStrategy'
        sourceConfig:
          $ref: '#/components/schemas/SourceConfig'
          description: Required. Source connection profile configuration.
        errors:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Error'
          description: Output only. Errors on the Stream.
        updateTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. The last update time of the stream.
      description: A resource representing streaming data from a source to a destination.
      type: object
    VpcPeeringConfig:
      properties:
        vpc:
          description: 'Required. Fully qualified name of the VPC that Datastream will peer to. Format: `projects/{project}/global/{networks}/{name}`'
          type: string
        subnet:
          description: Required. A free subnet for peering. (CIDR of /29)
          type: string
      id: VpcPeeringConfig
      description: The VPC Peering configuration is used to create VPC peering between Datastream and the consumer's VPC.
      type: object
    SourceObjectIdentifier:
      description: Represents an identifier of an object in the data source.
      id: SourceObjectIdentifier
      type: object
      properties:
        oracleIdentifier:
          description: Oracle data source object identifier.
          $ref: '#/components/schemas/OracleObjectIdentifier'
        mysqlIdentifier:
          description: Mysql data source object identifier.
          $ref: '#/components/schemas/MysqlObjectIdentifier'
        postgresqlIdentifier:
          description: PostgreSQL data source object identifier.
          $ref: '#/components/schemas/PostgresqlObjectIdentifier'
    PostgresqlColumn:
      id: PostgresqlColumn
      properties:
        primaryKey:
          type: boolean
          description: Whether or not the column represents a primary key.
        precision:
          type: integer
          format: int32
          description: Column precision.
        column:
          type: string
          description: Column name.
        dataType:
          description: The PostgreSQL data type.
          type: string
        ordinalPosition:
          description: The ordinal position of the column in the table.
          format: int32
          type: integer
        scale:
          format: int32
          type: integer
          description: Column scale.
        length:
          format: int32
          description: Column length.
          type: integer
        nullable:
          description: Whether or not the column can accept a null value.
          type: boolean
      description: PostgreSQL Column.
      type: object
    ListStreamObjectsResponse:
      type: object
      properties:
        streamObjects:
          description: List of stream objects.
          items:
            $ref: '#/components/schemas/StreamObject'
          type: array
        nextPageToken:
          type: string
          description: A token, which can be sent as `page_token` to retrieve the next page.
      description: Response containing the objects for a stream.
      id: ListStreamObjectsResponse
    Error:
      id: Error
      description: Represent a user-facing Error.
      type: object
      properties:
        errorUuid:
          type: string
          description: A unique identifier for this specific error, allowing it to be traced throughout the system in logs and API responses.
        reason:
          type: string
          description: A title that explains the reason for the error.
        message:
          type: string
          description: A message containing more information about the error that occurred.
        details:
          additionalProperties:
            type: string
          description: Additional information about the error.
          type: object
        errorTime:
          description: The time when the error occurred.
          format: google-datetime
          type: string
    OracleColumn:
      properties:
        precision:
          description: Column precision.
          format: int32
          type: integer
        length:
          format: int32
          type: integer
          description: Column length.
        scale:
          format: int32
          description: Column scale.
          type: integer
        encoding:
          type: string
          description: Column encoding.
        dataType:
          description: The Oracle data type.
          type: string
        ordinalPosition:
          format: int32
          description: The ordinal position of the column in the table.
          type: integer
        column:
          type: string
          description: Column name.
        nullable:
          type: boolean
          description: Whether or not the column can accept a null value.
        primaryKey:
          description: Whether or not the column represents a primary key.
          type: boolean
      description: Oracle Column.
      id: OracleColumn
      type: object
    PrivateConnection:
      properties:
        state:
          readOnly: true
          type: string
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - CREATED
            - FAILED
            - DELETING
            - FAILED_TO_DELETE
          description: Output only. The state of the Private Connection.
          enumDescriptions:
            - Unspecified state.
            - The private connection is in creation state - creating resources.
            - The private connection has been created with all of its resources.
            - The private connection creation has failed.
            - The private connection is being deleted.
            - Delete request has failed, resource is in invalid state.
        updateTime:
          readOnly: true
          type: string
          description: Output only. The update time of the resource.
          format: google-datetime
        vpcPeeringConfig:
          $ref: '#/components/schemas/VpcPeeringConfig'
          description: VPC Peering Config.
        error:
          readOnly: true
          $ref: '#/components/schemas/Error'
          description: Output only. In case of error, the details of the error in a user-friendly format.
        name:
          description: Output only. The resource's name.
          readOnly: true
          type: string
        displayName:
          description: Required. Display name.
          type: string
        labels:
          description: Labels.
          additionalProperties:
            type: string
          type: object
        createTime:
          description: Output only. The create time of the resource.
          readOnly: true
          type: string
          format: google-datetime
      type: object
      id: PrivateConnection
      description: The PrivateConnection resource is used to establish private connectivity between Datastream and a customer's network.
    FetchStaticIpsResponse:
      id: FetchStaticIpsResponse
      properties:
        nextPageToken:
          type: string
          description: A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
        staticIps:
          items:
            type: string
          type: array
          description: list of static ips by account
      type: object
      description: Response message for a 'FetchStaticIps' response.
    SingleTargetDataset:
      type: object
      id: SingleTargetDataset
      properties:
        datasetId:
          type: string
          description: The dataset ID of the target dataset.
      description: A single target dataset to which all data will be streamed.
    StartBackfillJobRequest:
      description: Request for manually initiating a backfill job for a specific stream object.
      id: StartBackfillJobRequest
      type: object
      properties: {}
    MysqlColumn:
      type: object
      id: MysqlColumn
      description: MySQL Column.
      properties:
        nullable:
          type: boolean
          description: Whether or not the column can accept a null value.
        length:
          format: int32
          description: Column length.
          type: integer
        ordinalPosition:
          format: int32
          description: The ordinal position of the column in the table.
          type: integer
        collation:
          description: Column collation.
          type: string
        primaryKey:
          type: boolean
          description: Whether or not the column represents a primary key.
        dataType:
          description: 'The MySQL data type. Full data types list can be found here: https://dev.mysql.com/doc/refman/8.0/en/data-types.html'
          type: string
        column:
          type: string
          description: Column name.
    MysqlSourceConfig:
      description: MySQL source configuration
      type: object
      properties:
        includeObjects:
          $ref: '#/components/schemas/MysqlRdbms'
          description: MySQL objects to retrieve from the source.
        excludeObjects:
          description: MySQL objects to exclude from the stream.
          $ref: '#/components/schemas/MysqlRdbms'
        maxConcurrentCdcTasks:
          type: integer
          description: Maximum number of concurrent CDC tasks. The number should be non negative. If not set (or set to 0), the system's default value will be used.
          format: int32
      id: MysqlSourceConfig
    ListLocationsResponse:
      id: ListLocationsResponse
      properties:
        nextPageToken:
          type: string
          description: The standard List next-page token.
        locations:
          description: A list of locations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/Location'
          type: array
      description: The response message for Locations.ListLocations.
      type: object
    GcsDestinationConfig:
      id: GcsDestinationConfig
      properties:
        path:
          description: Path inside the Cloud Storage bucket to write data to.
          type: string
        fileRotationMb:
          description: The maximum file size to be saved in the bucket.
          format: int32
          type: integer
        fileRotationInterval:
          format: google-duration
          description: The maximum duration for which new events are added before a file is closed and a new file is created.
          type: string
        avroFileFormat:
          description: AVRO file format configuration.
          $ref: '#/components/schemas/AvroFileFormat'
        jsonFileFormat:
          description: JSON file format configuration.
          $ref: '#/components/schemas/JsonFileFormat'
      description: Google Cloud Storage destination configuration
      type: object
    StreamObject:
      properties:
        errors:
          description: Output only. Active errors on the object.
          items:
            $ref: '#/components/schemas/Error'
          type: array
          readOnly: true
        sourceObject:
          description: The object identifier in the data source.
          $ref: '#/components/schemas/SourceObjectIdentifier'
        backfillJob:
          description: The latest backfill job that was initiated for the stream object.
          $ref: '#/components/schemas/BackfillJob'
        createTime:
          description: Output only. The creation time of the object.
          format: google-datetime
          type: string
          readOnly: true
        updateTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. The last update time of the object.
        name:
          type: string
          description: Output only. The object resource's name.
          readOnly: true
        displayName:
          description: Required. Display name.
          type: string
      type: object
      description: A specific stream object (e.g a specific DB table).
      id: StreamObject
    MysqlObjectIdentifier:
      properties:
        database:
          description: Required. The database name.
          type: string
        table:
          description: Required. The table name.
          type: string
      type: object
      description: Mysql data source object identifier.
      id: MysqlObjectIdentifier
    BackfillJob:
      type: object
      properties:
        errors:
          readOnly: true
          description: Output only. Errors which caused the backfill job to fail.
          items:
            $ref: '#/components/schemas/Error'
          type: array
        state:
          type: string
          description: Backfill job state.
          enum:
            - STATE_UNSPECIFIED
            - NOT_STARTED
            - PENDING
            - ACTIVE
            - STOPPED
            - FAILED
            - COMPLETED
            - UNSUPPORTED
          enumDescriptions:
            - Default value.
            - Backfill job was never started for the stream object (stream has backfill strategy defined as manual or object was explicitly excluded from automatic backfill).
            - Backfill job will start pending available resources.
            - Backfill job is running.
            - Backfill job stopped (next job run will start from beginning).
            - Backfill job failed (due to an error).
            - Backfill completed successfully.
            - Backfill job failed since the table structure is currently unsupported for backfill.
        trigger:
          enumDescriptions:
            - Default value.
            - Object backfill job was triggered automatically according to the stream's backfill strategy.
            - Object backfill job was triggered manually using the dedicated API.
          enum:
            - TRIGGER_UNSPECIFIED
            - AUTOMATIC
            - MANUAL
          type: string
          description: Backfill job's triggering reason.
        lastEndTime:
          description: Output only. Backfill job's end time.
          type: string
          readOnly: true
          format: google-datetime
        lastStartTime:
          format: google-datetime
          type: string
          description: Output only. Backfill job's start time.
          readOnly: true
      description: Represents a backfill job on a specific stream object.
      id: BackfillJob
    DiscoverConnectionProfileResponse:
      description: Response from a discover request.
      properties:
        postgresqlRdbms:
          description: Enriched PostgreSQL RDBMS object.
          $ref: '#/components/schemas/PostgresqlRdbms'
        oracleRdbms:
          $ref: '#/components/schemas/OracleRdbms'
          description: Enriched Oracle RDBMS object.
        mysqlRdbms:
          $ref: '#/components/schemas/MysqlRdbms'
          description: Enriched MySQL RDBMS object.
      type: object
      id: DiscoverConnectionProfileResponse
    MysqlDatabase:
      type: object
      properties:
        mysqlTables:
          description: Tables in the database.
          type: array
          items:
            $ref: '#/components/schemas/MysqlTable'
        database:
          type: string
          description: Database name.
      id: MysqlDatabase
      description: MySQL database.
    OracleProfile:
      properties:
        username:
          description: Required. Username for the Oracle connection.
          type: string
        port:
          type: integer
          format: int32
          description: Port for the Oracle connection, default value is 1521.
        connectionAttributes:
          description: Connection string attributes
          additionalProperties:
            type: string
          type: object
        hostname:
          description: Required. Hostname for the Oracle connection.
          type: string
        databaseService:
          description: Required. Database for the Oracle connection.
          type: string
        password:
          type: string
          description: Required. Password for the Oracle connection.
      id: OracleProfile
      description: Oracle database profile.
      type: object
    BackfillNoneStrategy:
      properties: {}
      type: object
      id: BackfillNoneStrategy
      description: Backfill strategy to disable automatic backfill for the Stream's objects.
    Operation:
      type: object
      description: This resource represents a long-running operation that is the result of a network API call.
      id: Operation
      properties:
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
          type: object
        done:
          type: boolean
          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
        error:
          $ref: '#/components/schemas/Status'
          description: The error result of the operation in case of failure or cancellation.
        name:
          description: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
          type: string
        response:
          description: The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
    OracleTable:
      properties:
        table:
          description: Table name.
          type: string
        oracleColumns:
          items:
            $ref: '#/components/schemas/OracleColumn'
          description: Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
          type: array
      description: Oracle table.
      type: object
      id: OracleTable
    PostgresqlTable:
      type: object
      properties:
        postgresqlColumns:
          type: array
          description: PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.
          items:
            $ref: '#/components/schemas/PostgresqlColumn'
        table:
          type: string
          description: Table name.
      id: PostgresqlTable
      description: PostgreSQL table.
    ValidationMessage:
      properties:
        level:
          enumDescriptions:
            - Unspecified level.
            - Potentially cause issues with the Stream.
            - Definitely cause issues with the Stream.
          description: Message severity level (warning or error).
          enum:
            - LEVEL_UNSPECIFIED
            - WARNING
            - ERROR
          type: string
        metadata:
          description: Additional metadata related to the result.
          additionalProperties:
            type: string
          type: object
        message:
          type: string
          description: The result of the validation.
        code:
          type: string
          description: A custom code identifying this specific message.
      description: Represent user-facing validation result message.
      type: object
      id: ValidationMessage
    Route:
      description: The route resource is the child of the private connection resource, used for defining a route for a private connection.
      id: Route
      type: object
      properties:
        updateTime:
          type: string
          readOnly: true
          description: Output only. The update time of the resource.
          format: google-datetime
        createTime:
          readOnly: true
          format: google-datetime
          description: Output only. The create time of the resource.
          type: string
        name:
          description: Output only. The resource's name.
          readOnly: true
          type: string
        destinationAddress:
          description: Required. Destination address for connection
          type: string
        labels:
          additionalProperties:
            type: string
          description: Labels.
          type: object
        destinationPort:
          format: int32
          description: Destination port for connection
          type: integer
        displayName:
          description: Required. Display name.
          type: string
    StaticServiceIpConnectivity:
      properties: {}
      id: StaticServiceIpConnectivity
      type: object
      description: Static IP address connectivity.
    MysqlRdbms:
      id: MysqlRdbms
      properties:
        mysqlDatabases:
          description: Mysql databases on the server
          type: array
          items:
            $ref: '#/components/schemas/MysqlDatabase'
      description: MySQL database structure
      type: object
    SourceConfig:
      description: The configuration of the stream source.
      type: object
      id: SourceConfig
      properties:
        mysqlSourceConfig:
          $ref: '#/components/schemas/MysqlSourceConfig'
          description: MySQL data source configuration.
        sourceConnectionProfile:
          type: string
          description: 'Required. Source connection profile resoource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`'
        postgresqlSourceConfig:
          description: PostgreSQL data source configuration.
          $ref: '#/components/schemas/PostgresqlSourceConfig'
        oracleSourceConfig:
          $ref: '#/components/schemas/OracleSourceConfig'
          description: Oracle data source configuration.
    ListStreamsResponse:
      properties:
        streams:
          type: array
          items:
            $ref: '#/components/schemas/Stream'
          description: List of streams
        unreachable:
          type: array
          items:
            type: string
          description: Locations that could not be reached.
        nextPageToken:
          description: A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
          type: string
      description: Response message for listing streams.
      type: object
      id: ListStreamsResponse
    Location:
      id: Location
      type: object
      description: A resource that represents Google Cloud Platform location.
      properties:
        displayName:
          type: string
          description: The friendly name for this location, typically a nearby city name. For example, "Tokyo".
        metadata:
          type: object
          description: Service-specific metadata. For example the available capacity at the given location.
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        name:
          type: string
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
        labels:
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
          additionalProperties:
            type: string
          type: object
    PostgresqlRdbms:
      properties:
        postgresqlSchemas:
          type: array
          description: PostgreSQL schemas in the database server.
          items:
            $ref: '#/components/schemas/PostgresqlSchema'
      id: PostgresqlRdbms
      type: object
      description: PostgreSQL database structure.
    StreamLargeObjects:
      type: object
      description: Configuration to stream large object values.
      properties: {}
      id: StreamLargeObjects
    ForwardSshTunnelConnectivity:
      description: Forward SSH Tunnel connectivity.
      properties:
        username:
          type: string
          description: Required. Username for the SSH tunnel.
        privateKey:
          description: Input only. SSH private key.
          type: string
        hostname:
          type: string
          description: Required. Hostname for the SSH tunnel.
        password:
          type: string
          description: Input only. SSH password.
        port:
          type: integer
          description: Port for the SSH tunnel, default value is 22.
          format: int32
      type: object
      id: ForwardSshTunnelConnectivity
    DestinationConfig:
      description: The configuration of the stream destination.
      id: DestinationConfig
      type: object
      properties:
        bigqueryDestinationConfig:
          $ref: '#/components/schemas/BigQueryDestinationConfig'
          description: BigQuery destination configuration.
        destinationConnectionProfile:
          type: string
          description: 'Required. Destination connection profile resource. Format: `projects/{project}/locations/{location}/connectionProfiles/{name}`'
        gcsDestinationConfig:
          $ref: '#/components/schemas/GcsDestinationConfig'
          description: A configuration for how data should be loaded to Cloud Storage.
    ListRoutesResponse:
      type: object
      properties:
        nextPageToken:
          type: string
          description: A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
        routes:
          items:
            $ref: '#/components/schemas/Route'
          type: array
          description: List of Routes.
        unreachable:
          type: array
          items:
            type: string
          description: Locations that could not be reached.
      description: Route list response.
      id: ListRoutesResponse
    Status:
      properties:
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        code:
          type: integer
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
        details:
          type: array
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
      type: object
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      id: Status
    BigQueryDestinationConfig:
      id: BigQueryDestinationConfig
      type: object
      properties:
        singleTargetDataset:
          description: Single destination dataset.
          $ref: '#/components/schemas/SingleTargetDataset'
        dataFreshness:
          type: string
          format: google-duration
          description: The guaranteed data freshness (in seconds) when querying tables created by the stream. Editing this field will only affect new tables created in the future, but existing tables will not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.
        sourceHierarchyDatasets:
          $ref: '#/components/schemas/SourceHierarchyDatasets'
          description: Source hierarchy datasets.
    StartBackfillJobResponse:
      type: object
      properties:
        object:
          $ref: '#/components/schemas/StreamObject'
          description: The stream object resource a backfill job was started for.
      id: StartBackfillJobResponse
      description: Response for manually initiating a backfill job for a specific stream object.
    GcsProfile:
      properties:
        bucket:
          type: string
          description: Required. The Cloud Storage bucket name.
        rootPath:
          type: string
          description: The root path inside the Cloud Storage bucket.
      id: GcsProfile
      description: Cloud Storage bucket profile.
      type: object
    MysqlSslConfig:
      id: MysqlSslConfig
      type: object
      properties:
        caCertificate:
          description: Input only. PEM-encoded certificate of the CA that signed the source database server's certificate.
          type: string
        clientKey:
          description: Input only. PEM-encoded private key associated with the Client Certificate. If this field is used then the 'client_certificate' and the 'ca_certificate' fields are mandatory.
          type: string
        clientKeySet:
          description: Output only. Indicates whether the client_key field is set.
          readOnly: true
          type: boolean
        clientCertificate:
          description: Input only. PEM-encoded certificate that will be used by the replica to authenticate against the source database server. If this field is used then the 'client_key' and the 'ca_certificate' fields are mandatory.
          type: string
        caCertificateSet:
          readOnly: true
          description: Output only. Indicates whether the ca_certificate field is set.
          type: boolean
        clientCertificateSet:
          readOnly: true
          description: Output only. Indicates whether the client_certificate field is set.
          type: boolean
      description: MySQL SSL configuration information.
    PrivateConnectivity:
      properties:
        privateConnection:
          description: 'Required. A reference to a private connection resource. Format: `projects/{project}/locations/{location}/privateConnections/{name}`'
          type: string
      description: Private Connectivity
      type: object
      id: PrivateConnectivity
    StopBackfillJobRequest:
      description: Request for manually stopping a running backfill job for a specific stream object.
      id: StopBackfillJobRequest
      properties: {}
      type: object
    DiscoverConnectionProfileRequest:
      description: Request message for 'discover' ConnectionProfile request.
      id: DiscoverConnectionProfileRequest
      type: object
      properties:
        postgresqlRdbms:
          description: PostgreSQL RDBMS to enrich with child data objects and metadata.
          $ref: '#/components/schemas/PostgresqlRdbms'
        mysqlRdbms:
          $ref: '#/components/schemas/MysqlRdbms'
          description: MySQL RDBMS to enrich with child data objects and metadata.
        connectionProfile:
          $ref: '#/components/schemas/ConnectionProfile'
          description: An ad-hoc connection profile configuration.
        connectionProfileName:
          type: string
          description: A reference to an existing connection profile.
        hierarchyDepth:
          type: integer
          format: int32
          description: The number of hierarchy levels below the current level to be retrieved.
        oracleRdbms:
          description: Oracle RDBMS to enrich with child data objects and metadata.
          $ref: '#/components/schemas/OracleRdbms'
        fullHierarchy:
          description: Whether to retrieve the full hierarchy of data objects (TRUE) or only the current level (FALSE).
          type: boolean
    ConnectionProfile:
      type: object
      properties:
        mysqlProfile:
          description: MySQL ConnectionProfile configuration.
          $ref: '#/components/schemas/MysqlProfile'
        displayName:
          description: Required. Display name.
          type: string
        name:
          type: string
          readOnly: true
          description: Output only. The resource's name.
        staticServiceIpConnectivity:
          description: Static Service IP connectivity.
          $ref: '#/components/schemas/StaticServiceIpConnectivity'
        gcsProfile:
          $ref: '#/components/schemas/GcsProfile'
          description: Cloud Storage ConnectionProfile configuration.
        postgresqlProfile:
          $ref: '#/components/schemas/PostgresqlProfile'
          description: PostgreSQL Connection Profile configuration.
        bigqueryProfile:
          $ref: '#/components/schemas/BigQueryProfile'
          description: BigQuery Connection Profile configuration.
        oracleProfile:
          description: Oracle ConnectionProfile configuration.
          $ref: '#/components/schemas/OracleProfile'
        updateTime:
          readOnly: true
          description: Output only. The update time of the resource.
          type: string
          format: google-datetime
        createTime:
          format: google-datetime
          type: string
          description: Output only. The create time of the resource.
          readOnly: true
        privateConnectivity:
          $ref: '#/components/schemas/PrivateConnectivity'
          description: Private connectivity.
        labels:
          additionalProperties:
            type: string
          type: object
          description: Labels.
        forwardSshConnectivity:
          $ref: '#/components/schemas/ForwardSshTunnelConnectivity'
          description: Forward SSH tunnel connectivity.
      id: ConnectionProfile
      description: A set of reusable connection configurations to be used as a source or destination for a stream.
    LookupStreamObjectRequest:
      properties:
        sourceObjectIdentifier:
          description: Required. The source object identifier which maps to the stream object.
          $ref: '#/components/schemas/SourceObjectIdentifier'
      type: object
      description: Request for looking up a specific stream object by its source object identifier.
      id: LookupStreamObjectRequest
  parameters:
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    locations_static_ips:
      id: google.datastream.locations_static_ips
      name: locations_static_ips
      title: Locations_static_ips
      methods:
        projects_locations_fetchStaticIps:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}:fetchStaticIps/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations_static_ips/methods/projects_locations_fetchStaticIps'
        insert: []
        update: []
        delete: []
    locations:
      id: google.datastream.locations
      name: locations
      title: Locations
      methods:
        projects_locations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: locations
        projects_locations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/projects_locations_get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/projects_locations_list'
        insert: []
        update: []
        delete: []
    streams:
      id: google.datastream.streams
      name: streams
      title: Streams
      methods:
        projects_locations_streams_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/streams/methods/projects_locations_streams_get'
          - $ref: '#/components/x-stackQL-resources/streams/methods/projects_locations_streams_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/streams/methods/projects_locations_streams_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/streams/methods/projects_locations_streams_delete'
    objects:
      id: google.datastream.objects
      name: objects
      title: Objects
      methods:
        projects_locations_streams_objects_stopBackfillJob:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects~1{objectsId}:stopBackfillJob/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_objects_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: streamObjects
        projects_locations_streams_objects_lookup:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects:lookup/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_objects_startBackfillJob:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects~1{objectsId}:startBackfillJob/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_streams_objects_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1streams~1{streamsId}~1objects~1{objectsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/objects/methods/projects_locations_streams_objects_get'
          - $ref: '#/components/x-stackQL-resources/objects/methods/projects_locations_streams_objects_list'
        insert: []
        update: []
        delete: []
    connection_profiles:
      id: google.datastream.connection_profiles
      name: connection_profiles
      title: Connection_profiles
      methods:
        projects_locations_connectionProfiles_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles~1{connectionProfilesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_connectionProfiles_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles~1{connectionProfilesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_connectionProfiles_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles~1{connectionProfilesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_connectionProfiles_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_connectionProfiles_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_connectionProfiles_discover:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1connectionProfiles:discover/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/connection_profiles/methods/projects_locations_connectionProfiles_get'
          - $ref: '#/components/x-stackQL-resources/connection_profiles/methods/projects_locations_connectionProfiles_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/connection_profiles/methods/projects_locations_connectionProfiles_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/connection_profiles/methods/projects_locations_connectionProfiles_delete'
    routes:
      id: google.datastream.routes
      name: routes
      title: Routes
      methods:
        projects_locations_privateConnections_routes_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_privateConnections_routes_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_privateConnections_routes_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes~1{routesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_privateConnections_routes_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}~1routes~1{routesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/routes/methods/projects_locations_privateConnections_routes_get'
          - $ref: '#/components/x-stackQL-resources/routes/methods/projects_locations_privateConnections_routes_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/routes/methods/projects_locations_privateConnections_routes_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/routes/methods/projects_locations_privateConnections_routes_delete'
    private_connections:
      id: google.datastream.private_connections
      name: private_connections
      title: Private_connections
      methods:
        projects_locations_privateConnections_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_privateConnections_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_privateConnections_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_privateConnections_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1privateConnections~1{privateConnectionsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/private_connections/methods/projects_locations_privateConnections_get'
          - $ref: '#/components/x-stackQL-resources/private_connections/methods/projects_locations_privateConnections_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/private_connections/methods/projects_locations_privateConnections_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/private_connections/methods/projects_locations_privateConnections_delete'
    operations:
      id: google.datastream.operations
      name: operations
      title: Operations
      methods:
        projects_locations_operations_cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: operations
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_delete'
paths:
  /v1/projects/{projectsId}/locations/{locationsId}:fetchStaticIps:
    parameters: &ref_1
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/callback'
    get:
      description: The FetchStaticIps API call exposes the static IP addresses used by Datastream.
      operationId: datastream.projects.locations.fetchStaticIps
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchStaticIpsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: locations_static_ips
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations:
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: datastream.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: datastream.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/streams:
    parameters: *ref_1
    get:
      description: Use this method to list streams in a project and location.
      operationId: datastream.projects.locations.streams.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStreamsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: streams
      x-stackQL-verb: select
    post:
      description: Use this method to create a stream.
      operationId: datastream.projects.locations.streams.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stream'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: streamId
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
      x-stackQL-resource: streams
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}:
    parameters: *ref_1
    delete:
      description: Use this method to delete a stream.
      operationId: datastream.projects.locations.streams.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: streams
      x-stackQL-verb: delete
    patch:
      description: Use this method to update the configuration of a stream.
      operationId: datastream.projects.locations.streams.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stream'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: streams
      x-stackQL-verb: exec
    get:
      description: Use this method to get details about a stream.
      operationId: datastream.projects.locations.streams.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stream'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
      x-stackQL-resource: streams
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects/{objectsId}:stopBackfillJob:
    parameters: *ref_1
    post:
      description: Use this method to stop a backfill job for the specified stream object.
      operationId: datastream.projects.locations.streams.objects.stopBackfillJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopBackfillJobRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopBackfillJobResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: path
          name: objectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects:
    parameters: *ref_1
    get:
      description: Use this method to list the objects of a specific stream.
      operationId: datastream.projects.locations.streams.objects.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListStreamObjectsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects:lookup:
    parameters: *ref_1
    post:
      description: Use this method to look up a stream object by its source object identifier.
      operationId: datastream.projects.locations.streams.objects.lookup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LookupStreamObjectRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamObject'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects/{objectsId}:startBackfillJob:
    parameters: *ref_1
    post:
      description: Use this method to start a backfill job for the specified stream object.
      operationId: datastream.projects.locations.streams.objects.startBackfillJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartBackfillJobRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartBackfillJobResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: path
          name: objectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/streams/{streamsId}/objects/{objectsId}:
    parameters: *ref_1
    get:
      description: Use this method to get details about a stream object.
      operationId: datastream.projects.locations.streams.objects.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamObject'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: streamsId
          required: true
          schema:
            type: string
        - in: path
          name: objectsId
          required: true
          schema:
            type: string
      x-stackQL-resource: objects
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/connectionProfiles/{connectionProfilesId}:
    parameters: *ref_1
    patch:
      description: Use this method to update the parameters of a connection profile.
      operationId: datastream.projects.locations.connectionProfiles.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionProfile'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionProfilesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
      x-stackQL-resource: connection_profiles
      x-stackQL-verb: exec
    delete:
      description: Use this method to delete a connection profile.
      operationId: datastream.projects.locations.connectionProfiles.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionProfilesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-verb: delete
    get:
      description: Use this method to get details about a connection profile.
      operationId: datastream.projects.locations.connectionProfiles.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionProfile'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: connectionProfilesId
          required: true
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/connectionProfiles:
    parameters: *ref_1
    get:
      description: Use this method to list connection profiles created in a project and location.
      operationId: datastream.projects.locations.connectionProfiles.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListConnectionProfilesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-verb: select
    post:
      description: Use this method to create a connection profile in a project and location.
      operationId: datastream.projects.locations.connectionProfiles.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionProfile'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: connectionProfileId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: force
          schema:
            type: boolean
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/connectionProfiles:discover:
    parameters: *ref_1
    post:
      description: Use this method to discover a connection profile. The discover API call exposes the data objects and metadata belonging to the profile. Typically, a request returns children data objects of a parent data object that's optionally supplied in the request.
      operationId: datastream.projects.locations.connectionProfiles.discover
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoverConnectionProfileRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverConnectionProfileResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: connection_profiles
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}/routes:
    parameters: *ref_1
    post:
      description: Use this method to create a route for a private connectivity configuration in a project and location.
      operationId: datastream.projects.locations.privateConnections.routes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: routeId
          schema:
            type: string
      x-stackQL-resource: routes
      x-stackQL-verb: insert
    get:
      description: Use this method to list routes created for a private connectivity configuration in a project and location.
      operationId: datastream.projects.locations.privateConnections.routes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRoutesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: routes
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}/routes/{routesId}:
    parameters: *ref_1
    delete:
      description: Use this method to delete a route.
      operationId: datastream.projects.locations.privateConnections.routes.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: path
          name: routesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: routes
      x-stackQL-verb: delete
    get:
      description: Use this method to get details about a route.
      operationId: datastream.projects.locations.privateConnections.routes.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: path
          name: routesId
          required: true
          schema:
            type: string
      x-stackQL-resource: routes
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/privateConnections:
    parameters: *ref_1
    get:
      description: Use this method to list private connectivity configurations in a project and location.
      operationId: datastream.projects.locations.privateConnections.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPrivateConnectionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: private_connections
      x-stackQL-verb: select
    post:
      description: Use this method to create a private connectivity configuration.
      operationId: datastream.projects.locations.privateConnections.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PrivateConnection'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: privateConnectionId
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: private_connections
      x-stackQL-verb: insert
  /v1/projects/{projectsId}/locations/{locationsId}/privateConnections/{privateConnectionsId}:
    parameters: *ref_1
    delete:
      description: Use this method to delete a private connectivity configuration.
      operationId: datastream.projects.locations.privateConnections.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: private_connections
      x-stackQL-verb: delete
    get:
      description: Use this method to get details about a private connectivity configuration.
      operationId: datastream.projects.locations.privateConnections.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrivateConnection'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: privateConnectionsId
          required: true
          schema:
            type: string
      x-stackQL-resource: private_connections
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
      operationId: datastream.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    delete:
      description: Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
      operationId: datastream.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: delete
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: datastream.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.'
      operationId: datastream.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
