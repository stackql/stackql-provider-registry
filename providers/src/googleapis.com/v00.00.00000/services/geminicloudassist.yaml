openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Gemini Cloud Assist API
  description: 'The AI-powered assistant for Google Cloud. '
  version: v1alpha
  x-discovery-doc-revision: '20250821'
  x-generated-date: '2025-08-28'
externalDocs:
  url: https://cloud.google.com/gemini
servers:
  - url: https://geminicloudassist.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    InvokeExplainRequest:
      id: InvokeExplainRequest
      description: Request for InvokeExplain.
      type: object
      properties:
        contents:
          description: >-
            Optional. Content of the input. It is repeated because it can
            contain the history of the conversation. Most recent content is the
            last element of the list.
          type: array
          items:
            $ref: '#/components/schemas/Content'
    Content:
      id: Content
      description: >-
        A `Content` includes a `role` field designating the producer of the
        `Content` and a `parts` field containing multi-part data that contains
        the content of the message turn.
      type: object
      properties:
        role:
          description: >-
            Optional. The producer of the content. Must be either 'user' or
            'model'. Useful to set for multi-turn conversations, otherwise can
            be left blank or unset.
          type: string
        parts:
          description: >-
            Required. Ordered `Parts` that constitute a single message. In the
            future, parts may have different IANA MIME types.
          type: array
          items:
            $ref: '#/components/schemas/Part'
    Part:
      id: Part
      description: >-
        A datatype containing media that is part of a multi-part `Content`
        message. A `Part` consists of data which has an associated datatype. A
        `Part` can only contain one of the accepted types in `Part.data`.
      type: object
      properties:
        text:
          description: Optional. Text part (can be code).
          type: string
    InvokeExplainResponse:
      id: InvokeExplainResponse
      description: Response for InvokeExplain.
      type: object
      properties:
        content:
          description: The output content.
          $ref: '#/components/schemas/Content'
    ListOperationsResponse:
      id: ListOperationsResponse
      description: The response message for Operations.ListOperations.
      type: object
      properties:
        operations:
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Operation:
      id: Operation
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      type: object
      properties:
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
          type: string
        metadata:
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
          type: boolean
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
        response:
          description: >-
            The normal, successful response of the operation. If the original
            method returns no data on success, such as `Delete`, the response is
            `google.protobuf.Empty`. If the original method is standard
            `Get`/`Create`/`Update`, the response should be the resource. For
            other methods, the response should have the type `XxxResponse`,
            where `Xxx` is the original method name. For example, if the
            original method name is `TakeSnapshot()`, the inferred response type
            is `TakeSnapshotResponse`.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    Status:
      id: Status
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      type: object
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    CancelOperationRequest:
      id: CancelOperationRequest
      description: The request message for Operations.CancelOperation.
      type: object
      properties: {}
    ListInvestigationsResponse:
      id: ListInvestigationsResponse
      description: Message for response to listing Investigations
      type: object
      properties:
        investigations:
          description: The list of Investigation
          type: array
          items:
            $ref: '#/components/schemas/Investigation'
        nextPageToken:
          description: A token identifying a page of results the server should return.
          type: string
        unreachable:
          description: Unordered list. Locations that could not be reached.
          type: array
          items:
            type: string
    Investigation:
      id: Investigation
      description: 'Message describing Investigation object Next Id: 24'
      type: object
      properties:
        name:
          description: Identifier. name of resource
          type: string
        createTime:
          description: Output only. [Output only] Create time stamp
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. [Output only] Update time stamp
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: Optional. Labels as key value pairs
          type: object
          additionalProperties:
            type: string
        revision:
          description: Output only. [Output only] Current revision of the investigation
          readOnly: true
          type: string
        revisionIndex:
          description: >-
            Output only. [Output only] Index of the current revision of the
            investigation. 1-based.
          readOnly: true
          type: integer
          format: int32
        revisionPredecessor:
          description: >-
            Optional. The name of the revision that was this revision's
            predecessor. The UI, for example, will set this to the existing
            revision when when a new revision is created due to an edit.
          type: string
        annotations:
          description: >-
            Optional. Annotations on the investigation. Unlike labels, these may
            carry semantic meaning in running the investigation, and will not be
            read by other systems such as billing.
          $ref: '#/components/schemas/InvestigationAnnotations'
        executionState:
          description: >-
            Output only. [Output only] The execution state of this
            investigation.
          readOnly: true
          type: string
          enumDescriptions:
            - Default value. This value is unused.
            - The investigation is being executed.
            - >-
              The investigation has not yet been executed since the symptom was
              last updated.
            - >-
              The investigation execution has completed, but the execution has
              failed.
            - >-
              All execution tasks have completed and the investigation is at
              rest.
          enum:
            - INVESTIGATION_EXECUTION_STATE_UNSPECIFIED
            - INVESTIGATION_EXECUTION_STATE_RUNNING
            - INVESTIGATION_EXECUTION_STATE_MODIFIED
            - INVESTIGATION_EXECUTION_STATE_FAILED
            - INVESTIGATION_EXECUTION_STATE_COMPLETED
        error:
          description: >-
            Output only. [Output only] If the investigation execution state is
            FAILED, this field will contain the error message.
          readOnly: true
          $ref: '#/components/schemas/Status'
        operation:
          description: >-
            Output only. The Run operation most recently performed on the
            investigation.
          readOnly: true
          type: string
        title:
          description: Required. Human-readable display title for the investigation.
          type: string
        observations:
          description: >-
            Optional. A map from observation ID to the observation. This is a
            map so that we can cleanly overwrite old observations with the
            version from the latest revision. See Observation for guidance on
            choosing IDs.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Observation'
        observerStatuses:
          description: >-
            Optional. Plural version of above. Code will transition to this over
            time.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ObserverStatus'
        dataVersion:
          description: >-
            Optional. The data model version of this Investigation. Should be
            either 1 or 2. Treat 0 as 1. If 1, use V1 Investigation data model.
            If 2, use the Investigation Observation data model.
          type: integer
          format: int32
        clarificationsNeeded:
          description: >-
            Optional. Questions that the system needs to ask the user. The
            results will be passed back by the UI as new Observations. The ID
            for those observations will be the key of the entry in the
            clarifications_needed map.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ClarificationNeeded'
    InvestigationAnnotations:
      id: InvestigationAnnotations
      description: >-
        Additional user-defined annotations on an Investigation. There are some
        pre-defined ones, and a map for new applications to add their own.
      type: object
      properties:
        followUp:
          description: >-
            Output only. Follow-up is required to continue the investigation.
            Generally set to true by the troubleshooter and false when the
            questions have been answered.
          readOnly: true
          type: boolean
        newlyCreated:
          description: >-
            Optional. This investigation is been newly created and hasn't been
            saved by the user yet. Set to true when an Investigation is created
            by an application (like Chat) and false when the user requests
            action via the UI.
          type: boolean
        supportCase:
          description: Optional. The support case ID associated with the investigation.
          type: string
        uiReadOnly:
          description: >-
            Optional. Whether the UI should disable editing of this
            investigation.
          type: boolean
        uiHidden:
          description: >-
            Optional. Whether the UI should hide this investigation from its
            list.
          type: boolean
        extrasMap:
          description: >-
            Optional. Additional annotations required by applications. These
            will not be redacted and should NOT contain any CCC/PII.
          type: object
          additionalProperties:
            type: string
        componentVersions:
          description: >-
            Output only. Map of component key to version. Filled in by the run
            process. The key is unique to a "component", broadly defined. A
            component might be the TAF framework, Titan, a GCA tool, etc. The
            version is a string that is unique to a particular release of the
            component, e.g., a build label.
          readOnly: true
          type: object
          additionalProperties:
            type: string
        revisionLastRunInterval:
          description: Output only. Start/end time when the revision was last run.
          readOnly: true
          $ref: '#/components/schemas/Interval'
        featureFlags:
          description: >-
            Output only. Map of feature flag names to their (string-serialized)
            values. Filled in by, and at the very start of, the run process.
            Treat as immutable for the subsequent life of an investigation run.
          readOnly: true
          type: object
          additionalProperties:
            type: string
        pagePath:
          description: Optional. Page path field set by the UI.
          type: string
    Interval:
      id: Interval
      description: >-
        Represents a time interval, encoded as a Timestamp start (inclusive) and
        a Timestamp end (exclusive). The start must be less than or equal to the
        end. When the start equals the end, the interval is empty (matches no
        time). When both start and end are unspecified, the interval matches any
        time.
      type: object
      properties:
        startTime:
          description: >-
            Optional. Inclusive start of the interval. If specified, a Timestamp
            matching this interval will have to be the same or after the start.
          type: string
          format: google-datetime
        endTime:
          description: >-
            Optional. Exclusive end of the interval. If specified, a Timestamp
            matching this interval will have to be before the end.
          type: string
          format: google-datetime
    Observation:
      id: Observation
      description: >-
        An observation is the basic unit of interchange between user and system,
        or between different components of the system. It is the element that
        has a relevance. They should therefore be relatively small; if you
        expect users to react to "part" of an observation, it should be broken
        up into smaller observations. A particular runbook run, a particular
        user parameter input, a particular interesting log entry might all be
        separate observations. This means there might be dozens or hundreds in
        an investigation. Next Id: 26
      type: object
      properties:
        id:
          description: >-
            Optional. Uniquely identifies this observation. Should depend on the
            'core content' of the observation, but not e.g. on the relevance.
            Should not depend on anything that can vary unpredictably from
            revision to revision to run. This is also the map key in the parent
            Investigation. They should be hierarchical with '.' as the separator
            starting with the name of the observer. So for instance,
            diagnostics.runbook.ABC, or signals.logs, or user.input.2 It should
            be usable as a URL component. (Case-insensitive [a-z0-9-._]+) These
            will not be rendered for users, but will be visible in the data
            model. They will be used by Google engineers to localize bugs so
            should be semi-readable.
          type: string
        timeRanges:
          description: >-
            Optional. When this observation occurred. Observations should have
            at least one time range so that the observations can be shown on a
            timeline and so we can find related events. For a repeated but not
            continuous event, it is appropriate to have more than one range. The
            UI may combine these. DEPRECATED: Use time_intervals instead.
          deprecated: true
          type: array
          items:
            $ref: '#/components/schemas/TimeRange'
        timeIntervals:
          description: >-
            Optional. When this observation occurred. Observations should have
            at least one time range so that the observations can be shown on a
            timeline and so we can find related events. For a repeated but not
            continuous event, it is appropriate to have more than one range. The
            UI may combine these.
          type: array
          items:
            $ref: '#/components/schemas/Interval'
        title:
          description: >-
            Optional. The label shown in the UI. This need not be unique within
            an investigation. However, it should be specific and less than 80
            characters so that the user can easily scan across many
            observations. "Nettools pod configured with ALL capabilities
            dropped" is much better than "Interesting pod configuration".
          type: string
        observationType:
          description: Required. The type of the observation (e.g. log, metric, etc.)
          type: string
          enumDescriptions:
            - >-
              Do not use. Specify the type of the observation. Add a new enum if
              you need it.
            - The text of this observation is a log entry.
            - The content of this observation is a metric or group of metrics.
            - A config
            - A change of config
            - An alert
            - >-
              An event from a continuous integration system, e.g. prober
              failure.
            - Free text input, such as the initial user input. Can be markdown.
            - >-
              This is for [tentative] conclusions drawn by the system. These can
              become inputs to a subsequent revision. In this case the
              recommendations will be used, but not the remediation.
            - Structured input, e.g. runbook parameters put into a form
            - >-
              Used for an observation that includes more than one kind of
              evidence, such as a runbook output.
            - Runbook output can be 'other' if none of the other types apply.
            - Resources we think are related to the investigation.
            - A theme discovered in the logs.
            - Signals output that includes a config analyzed by LLM.
            - Signals output that includes an outage from PSH.
            - >-
              Text that provides knowledge about a particular user's problem.
              For example, error catalog instructions/external links, RAG etc.
          enum:
            - OBSERVATION_TYPE_UNSPECIFIED
            - OBSERVATION_TYPE_CLOUD_LOG
            - OBSERVATION_TYPE_CLOUD_METRIC
            - OBSERVATION_TYPE_CAIS_CONFIG
            - OBSERVATION_TYPE_CAIS_CONFIG_DIFF
            - OBSERVATION_TYPE_CLOUD_ALERT
            - OBSERVATION_TYPE_CICD_EVENT
            - OBSERVATION_TYPE_TEXT_DESCRIPTION
            - OBSERVATION_TYPE_HYPOTHESIS
            - OBSERVATION_TYPE_STRUCTURED_INPUT
            - OBSERVATION_TYPE_COMPOSITE
            - OBSERVATION_TYPE_OTHER
            - OBSERVATION_TYPE_RELATED_RESOURCES
            - OBSERVATION_TYPE_LOG_THEME
            - OBSERVATION_TYPE_CONFIG_ANALYSIS
            - OBSERVATION_TYPE_OUTAGE
            - OBSERVATION_TYPE_KNOWLEDGE
        observerType:
          description: Required. The origin of the data, e.g. user, system code, LLM etc.
          type: string
          enumDescriptions:
            - >-
              Do not use. Specify where the observation came from. Add a new
              enum if you need it.
            - >-
              We separate these for internal attribution reasons. Diagnostics
              have an explicit notion of root causes, e.g. via runbooks.
            - Signals is for processing that doesn't have explicit root causes.
            - >-
              This is for code that depends only on premises. In particular,
              error catalog lookups.
            - >-
              This is for AI inferences made along the way that depend only on
              observations listed as premises.
            - User-input observation, including answers to clarifications.
            - An observation from an external-to-GCA alert.
          enum:
            - OBSERVER_TYPE_UNSPECIFIED
            - OBSERVER_TYPE_DIAGNOSTICS
            - OBSERVER_TYPE_SIGNALS
            - OBSERVER_TYPE_DETERMINISTIC_CODE
            - OBSERVER_TYPE_AI
            - OBSERVER_TYPE_USER
            - OBSERVER_TYPE_ALERT
        text:
          description: >-
            Optional. Natural-language [markdown] text associated with the
            observation. This is the core content, not a metadata description.
          type: string
        data:
          description: >-
            Optional. A structured representation of the observation, as chosen
            by the observer. Optional. If present, an observer SHOULD also
            supply a text description of the observation to facilitate
            processing by an LLM and rendering in the UI.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object.
        dataUrls:
          description: >-
            Optional. A map from human-readable names to URLs for supportive
            evidence. The map key will be rendered as URL anchor text. Fill this
            in whenever an observation depends on a thing outside the system.
            For example, logging/metrics/etc query that can regenerate the
            observation.
          type: object
          additionalProperties:
            type: string
        knowledgeUrls:
          description: Optional. A map from human-readable names to URLs for documentation.
          type: object
          additionalProperties:
            type: string
        baseObservations:
          description: >-
            Optional. The ids of other observations that this observation is
            based on. For example, a conclusion observation will record the
            observations that were used to generate it. An extracted param will
            record what it was extracted from. The graph of premises and
            conclusions will be acyclic within a revision.
          type: array
          items:
            type: string
        relevantResources:
          description: >-
            Optional. The Google Cloud resources relevant to the observation.
            These should be fully qualified resource URIs, e.g.,
            "//compute.googleapis.com/projects/my-project/zones/us-central1-a/instances/my-instance"
          type: array
          items:
            type: string
        recommendation:
          description: >-
            Optional. Natural language [markdown] text which describes a
            recommended action to remediate / fix the root cause. This is free
            form and not machine- processed at this time. A recommendation can
            be: - High-level remediation descriptions - Specific and tactical
            remediation steps with executable commands - Specific and tactical
            troubleshooting steps for where to investigate next with executable
            commands
          type: string
        systemRelevanceScore:
          description: >-
            Optional. How relevant this observation is to the investigation, as
            inferred by the system. Optional. Should be in the range [-1, 1].
            For OBSERVATION_TYPE_HYPOTHESIS, represents confidence in the
            explanation. Only root-cause hypotheses are ranked against each
            other. For other ObservationTypes, this represents a relevance
            score, and they are ranked against each other. A value of 0 is
            neutral.
          type: number
          format: float
        relevanceOverride:
          description: Optional. The user's relevance judgement.
          type: string
          enumDescriptions:
            - >-
              The user has not marked this observation as relevant or
              irrelevant.
            - The user marked this observation as relevant.
            - The user marked this observation as irrelevant.
          enum:
            - USER_RELEVANCE_UNSPECIFIED
            - USER_RELEVANCE_PROMOTED
            - USER_RELEVANCE_REJECTED
        observerErrors:
          description: >-
            Output only. An error within the Investigation system that blocked
            an observer from making a particular observation. The error string
            here will be shown to users. Repeated because an observer might lack
            multiple permissions. Deprecated: Use ObserverStatus.observer_errors
            instead.
          readOnly: true
          deprecated: true
          type: array
          items:
            $ref: '#/components/schemas/Status'
        observationCompletionState:
          description: >-
            Optional. An ObservationCompletionState represents whether the
            emitted observation is fully formed and should be shown the to the
            user. This is intended to allow hiding observations that are in an
            intermediate state.
          type: string
          enumDescriptions:
            - Do not use.
            - >-
              This observation is fully formed and should be shown the to the
              user.
            - >-
              This observation is missing some information, or needs further
              processing by a different observer. This type of Observation
              should not be persisted into future investigation revisions.
          enum:
            - OBSERVATION_COMPLETION_STATE_UNSPECIFIED
            - OBSERVATION_COMPLETION_STATE_COMPLETE
            - OBSERVATION_COMPLETION_STATE_INCOMPLETE
        observedNormalOperation:
          description: >-
            Optional. Whether this observation gives us information about an
            issue / root cause (false) or indicates normal operation (true).
            This is conceptually different from the relevance and used
            differently. An irrelevant observation should be hidden from the LLM
            and also the user. A relevant observation of a problem should be
            shown as an observation and should motivate a hypothesis. A relevant
            finding of normalcy may / may not be shown in the UI, but should be
            used by the LLM to filter out hypotheses that are refuted by the
            finding.
          type: boolean
    TimeRange:
      id: TimeRange
      description: >-
        Represents a time range at which an observation applies DEPRECATED: Use
        google.type.Interval instead.
      type: object
      properties:
        startTime:
          description: >-
            When this observation began applying. Use 'now' if the observer is
            just looking at the current state of Google Cloud.
          deprecated: true
          type: string
          format: google-datetime
        endTime:
          description: >-
            If end is unspecified, that implies that it continues to the
            present. Use end==start for a single moment.
          deprecated: true
          type: string
          format: google-datetime
    ObserverStatus:
      id: ObserverStatus
      description: >-
        An ObserverStatus represents the status of an observer at a particular
        point during execution of an investigation. NOTE: By default, nothing in
        this message is redacted. Components should NOT put PII / CCC here
        except where redacted. Next Id: 13
      type: object
      properties:
        observer:
          description: >-
            Optional. The ID of the observer that this status is for. Observer
            IDs should be human-readable and hierarchical, e.g.
            "signals.logs.firewall_rules" or "diagnostics.error_catalog".
          type: string
        observerExecutionState:
          description: Optional. The current execution state of the observer.
          type: string
          enumDescriptions:
            - The observer state is unspecified.
            - The investigation has not yet started.
            - >-
              The investigation is running and this observer is runnable or
              running.
            - The observer has finished without an internal error.
            - >-
              The observer tried to run but failed due to an error. This is
              specific to a component and may be rendered in the UI if the
              observation is shown, as very low priority.
            - The observer is blocked pending an input.
            - >-
              The observer reports an error that blocks or severely impacts the
              investigation, for example CAIS or logging disabled. Should be
              rendered in the UI prominently.
            - >-
              The observer reports an error that degrades the investigation, may
              require user to escalate or re-run the investigation after
              mitigating the cause.
          enum:
            - OBSERVER_EXECUTION_UNSPECIFIED
            - OBSERVER_EXECUTION_NOT_STARTED
            - OBSERVER_EXECUTION_RUNNING
            - OBSERVER_EXECUTION_COMPLETE
            - OBSERVER_EXECUTION_FAILED
            - OBSERVER_EXECUTION_BLOCKED
            - OBSERVER_EXECUTION_INVESTIGATION_BLOCKED
            - OBSERVER_EXECUTION_INVESTIGATION_DEGRADED
        observerDisplayName:
          description: >-
            Required. The name to show the user when describing this observer.
            Note that the UI might replace this with an internationalized
            counterpart, so it should not be generated dynamically. Required so
            that the user can see which observer (e.g. runbook) the system is
            talking about.
          type: string
        updateTime:
          description: >-
            Optional. The time when the status was updated. Optional because the
            observer is responsible for setting it. Becomes end_time when the
            observer is complete.
          type: string
          format: google-datetime
        startTime:
          description: >-
            Optional. The time when the observer started. Optional because the
            observer is responsible for setting it. When the observer is
            finished, the difference between this and update_time is the
            observer run time.
          type: string
          format: google-datetime
        updateComment:
          description: >-
            Optional. A status update from the observer. May be logged for
            debugging purposes. These may be shown to users. A good update would
            be "parameters matched, queued for execution" or "checked log file
            2/5".
          type: string
        absentObservations:
          description: >-
            Optional. The IDs of any predicate observations that would be needed
            to run this observer, but are missing. Runbook parameters are the
            motivating example. An observer must not emit an ID corresponding to
            an existing observation.
          type: array
          items:
            $ref: '#/components/schemas/AbsentObservation'
        observerErrors:
          description: >-
            Optional. An error within the Investigation system that blocked an
            observer from making a particular observation. The error string here
            will be shown to users. Repeated because an observer might lack
            multiple permissions.
          type: array
          items:
            $ref: '#/components/schemas/Status'
    AbsentObservation:
      id: AbsentObservation
      description: >-
        An identifier of an observation that is needed. Typically a parameter
        but extensible to other cases.
      type: object
      properties:
        param:
          description: Optional. A runbook parameter.
          type: string
        generalMissingObservation:
          description: >-
            Optional. A missing observation that the user could supply that is
            not a runbook parameter.
          $ref: '#/components/schemas/GeneralAbsentObservation'
        pendingObservation:
          description: >-
            Optional. An observation that is not yet created that an observer
            should create by running. This might prompt the system to execute a
            runbook.
          type: string
    GeneralAbsentObservation:
      id: GeneralAbsentObservation
      description: An absent observation that is not a runbook parameter.
      type: object
      properties:
        id:
          description: Optional. The ID of the missing observation.
          type: string
        title:
          description: Optional. The title to display in the UI
          type: string
        validationRegex:
          description: >-
            Optional. The regex that the answer must match. Must conform to
            JavaScript's regular expression string pattern syntax. See
            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp#syntax
          type: string
    ClarificationNeeded:
      id: ClarificationNeeded
      description: A clarification needed by the system.
      type: object
      properties:
        runbookParameter:
          description: >-
            Optional. The result of a clarification is an observation. A runbook
            parameter that the user needs to provide.
          $ref: '#/components/schemas/RunbookParameter'
        generalMissingObservation:
          description: Optional. A missing observation that is not a runbook parameter.
          $ref: '#/components/schemas/GeneralAbsentObservation'
        parentObserverNames:
          description: >-
            Optional. The display names of the observers that asked for this
            clarification. The UI will group by these names.
          type: array
          items:
            type: string
    RunbookParameter:
      id: RunbookParameter
      description: Parameter metadata for runbooks updated by the Diagnostic task.
      type: object
      properties:
        id:
          description: Optional. The name of the parameter.
          type: string
        displayName:
          description: Optional. The name of the parameter to be displayed to the user.
          type: string
        description:
          description: Optional. The description of the parameter.
          type: string
        exampleValues:
          description: Optional. Examples of the parameter value.
          type: array
          items:
            type: string
        value:
          description: Optional. The value of the parameter if available.
          type: string
        associatedAssetTypes:
          description: >-
            Optional. If present, a list of resource types that this parameter
            might be. For example, "compute.googleapis.com/Instance".
          type: array
          items:
            type: string
    ListInvestigationRevisionsResponse:
      id: ListInvestigationRevisionsResponse
      description: Message for response to listing revisions of a given Investigation
      type: object
      properties:
        revisions:
          description: The list of Investigation revisions
          type: array
          items:
            $ref: '#/components/schemas/InvestigationRevision'
        nextPageToken:
          description: A token identifying a page of results the server should return.
          type: string
        unreachable:
          description: Unordered list. Locations that could not be reached.
          type: array
          items:
            type: string
    InvestigationRevision:
      id: InvestigationRevision
      description: Message describing a revision of an Investigation
      type: object
      properties:
        name:
          description: Identifier. name of resource
          type: string
        snapshot:
          description: >-
            Optional. [Output only] Snapshot of the investigation contents at
            this revision
          $ref: '#/components/schemas/Investigation'
        createTime:
          description: Output only. [Output only] Create time stamp
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: Optional. Labels as key value pairs
          type: object
          additionalProperties:
            type: string
        index:
          description: Output only. Revision index number, in order of creation.
          readOnly: true
          type: integer
          format: int32
    RunInvestigationRevisionRequest:
      id: RunInvestigationRevisionRequest
      description: Request for running an investigation at a particular revision.
      type: object
      properties:
        runParameters:
          description: Optional. Parameters to pass through to Titan.
          $ref: '#/components/schemas/InvestigationRunParameters'
        updatedRevision:
          description: Optional. Revision to update before running.
          $ref: '#/components/schemas/InvestigationRevision'
        updateMask:
          description: >-
            Optional. The fields of the revision to update. Note that only
            user-writeable fields can be updated.
          type: string
          format: google-fieldmask
    InvestigationRunParameters:
      id: InvestigationRunParameters
      description: Represents user parameters for running an investigation.
      type: object
      properties:
        accessTokens:
          description: >-
            Optional. If populated, map of project to access token for
            TSE-triggered investigations.
          type: object
          additionalProperties:
            type: string
    ListLocationsResponse:
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      type: object
      properties:
        locations:
          description: >-
            A list of locations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Location:
      id: Location
      description: A resource that represents a Google Cloud location.
      type: object
      properties:
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            `"projects/example-project/locations/us-east1"`
          type: string
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        labels:
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"}
          type: object
          additionalProperties:
            type: string
        metadata:
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    SetIamPolicyRequest:
      id: SetIamPolicyRequest
      description: Request message for `SetIamPolicy` method.
      type: object
      properties:
        policy:
          description: >-
            REQUIRED: The complete policy to be applied to the `resource`. The
            size of the policy is limited to a few 10s of KB. An empty policy is
            a valid policy but certain Google Cloud services (such as Projects)
            might reject them.
          $ref: '#/components/schemas/Policy'
        updateMask:
          description: >-
            OPTIONAL: A FieldMask specifying which fields of the policy to
            modify. Only the fields in the mask will be modified. If no mask is
            provided, the following default mask is used: `paths: "bindings,
            etag"`
          type: string
          format: google-fieldmask
    Policy:
      id: Policy
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources. A `Policy` is a collection of
        `bindings`. A `binding` binds one or more `members`, or principals, to a
        single `role`. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role. For some types of Google Cloud resources, a `binding` can
        also specify a `condition`, which is a logical expression that allows
        access to a resource only if the expression evaluates to `true`. A
        condition can add constraints based on attributes of the request, the
        resource, or both. To learn which resources support conditions in their
        IAM policies, see the [IAM
        documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        **JSON example:** ``` { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
        members: - user:mike@example.com - group:admins@example.com -
        domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ```
        For a description of IAM and its features, see the [IAM
        documentation](https://cloud.google.com/iam/docs/).
      type: object
      properties:
        version:
          description: >-
            Specifies the format of the policy. Valid values are `0`, `1`, and
            `3`. Requests that specify an invalid value are rejected. Any
            operation that affects conditional role bindings must specify
            version `3`. This requirement applies to the following operations: *
            Getting a policy that includes a conditional role binding * Adding a
            conditional role binding to a policy * Changing a conditional role
            binding in a policy * Removing any role binding, with or without a
            condition, from a policy that includes conditions **Important:** If
            you use IAM Conditions, you must include the `etag` field whenever
            you call `setIamPolicy`. If you omit this field, then IAM allows you
            to overwrite a version `3` policy with a version `1` policy, and all
            of the conditions in the version `3` policy are lost. If a policy
            does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset. To learn which
            resources support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
          format: int32
        bindings:
          description: >-
            Associates a list of `members`, or principals, with a `role`.
            Optionally, may specify a `condition` that determines how and when
            the `bindings` are applied. Each of the `bindings` must contain at
            least one principal. The `bindings` in a `Policy` can refer to up to
            1,500 principals; up to 250 of these principals can be Google
            groups. Each occurrence of a principal counts towards these limits.
            For example, if the `bindings` grant 50 different roles to
            `user:alice@example.com`, and not to any other principal, then you
            can add another 1,450 principals to the `bindings` in the `Policy`.
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        auditConfigs:
          description: Specifies cloud audit logging configuration for this policy.
          type: array
          items:
            $ref: '#/components/schemas/AuditConfig'
        etag:
          description: >-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the `etag`
            in the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An `etag` is returned in the response to
            `getIamPolicy`, and systems are expected to put that etag in the
            request to `setIamPolicy` to ensure that their change will be
            applied to the same version of the policy. **Important:** If you use
            IAM Conditions, you must include the `etag` field whenever you call
            `setIamPolicy`. If you omit this field, then IAM allows you to
            overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
          type: string
          format: byte
    Binding:
      id: Binding
      description: Associates `members`, or principals, with a `role`.
      type: object
      properties:
        role:
          description: >-
            Role that is assigned to the list of `members`, or principals. For
            example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an
            overview of the IAM roles and permissions, see the [IAM
            documentation](https://cloud.google.com/iam/docs/roles-overview).
            For a list of the available pre-defined roles, see
            [here](https://cloud.google.com/iam/docs/understanding-roles).
          type: string
        members:
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. `members` can have the following values: * `allUsers`: A
            special identifier that represents anyone who is on the internet;
            with or without a Google account. * `allAuthenticatedUsers`: A
            special identifier that represents anyone who is authenticated with
            a Google account or a service account. Does not include identities
            that come from external identity providers (IdPs) through identity
            federation. * `user:{emailid}`: An email address that represents a
            specific Google account. For example, `alice@example.com` . *
            `serviceAccount:{emailid}`: An email address that represents a
            Google service account. For example,
            `my-other-app@appspot.gserviceaccount.com`. *
            `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
            An identifier for a [Kubernetes service
            account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example,
            `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
            `group:{emailid}`: An email address that represents a Google group.
            For example, `admins@example.com`. * `domain:{domain}`: The G Suite
            domain (primary) that represents all the users of that domain. For
            example, `google.com` or `example.com`. *
            `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
            A single identity in a workforce identity pool. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
            All workforce identities in a group. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
            All workforce identities with a specific attribute value. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`:
            All identities in a workforce identity pool. *
            `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
            A single identity in a workload identity pool. *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
            A workload identity pool group. *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
            All identities in a workload identity pool with a certain attribute.
            *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`:
            All identities in a workload identity pool. *
            `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus
            unique identifier) representing a user that has been recently
            deleted. For example, `alice@example.com?uid=123456789012345678901`.
            If the user is recovered, this value reverts to `user:{emailid}` and
            the recovered user retains the role in the binding. *
            `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
            If the service account is undeleted, this value reverts to
            `serviceAccount:{emailid}` and the undeleted service account retains
            the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`:
            An email address (plus unique identifier) representing a Google
            group that has been recently deleted. For example,
            `admins@example.com?uid=123456789012345678901`. If the group is
            recovered, this value reverts to `group:{emailid}` and the recovered
            group retains the role in the binding. *
            `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
            Deleted single identity in a workforce identity pool. For example,
            `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
          type: array
          items:
            type: string
        condition:
          description: >-
            The condition that is associated with this binding. If the condition
            evaluates to `true`, then this binding applies to the current
            request. If the condition evaluates to `false`, then this binding
            does not apply to the current request. However, a different role
            binding might grant the same role to one or more of the principals
            in this binding. To learn which resources support conditions in
            their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          $ref: '#/components/schemas/Expr'
    Expr:
      id: Expr
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec. Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
      type: object
      properties:
        expression:
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
          type: string
        title:
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
          type: string
        description:
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
          type: string
        location:
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
          type: string
    AuditConfig:
      id: AuditConfig
      description: >-
        Specifies the audit configuration for a service. The configuration
        determines which permission types are logged, and what identities, if
        any, are exempted from logging. An AuditConfig must have one or more
        AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
        specific service, the union of the two AuditConfigs is used for that
        service: the log_types specified in each AuditConfig are enabled, and
        the exempted_members in each AuditLogConfig are exempted. Example Policy
        with multiple AuditConfigs: { "audit_configs": [ { "service":
        "allServices", "audit_log_configs": [ { "log_type": "DATA_READ",
        "exempted_members": [ "user:jose@example.com" ] }, { "log_type":
        "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service":
        "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type":
        "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [
        "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy
        enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts
        `jose@example.com` from DATA_READ logging, and `aliya@example.com` from
        DATA_WRITE logging.
      type: object
      properties:
        service:
          description: >-
            Specifies a service that will be enabled for audit logging. For
            example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
            `allServices` is a special value that covers all services.
          type: string
        auditLogConfigs:
          description: The configuration for logging of each type of permission.
          type: array
          items:
            $ref: '#/components/schemas/AuditLogConfig'
    AuditLogConfig:
      id: AuditLogConfig
      description: >-
        Provides the configuration for logging a type of permissions. Example: {
        "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
        "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This
        enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
        jose@example.com from DATA_READ logging.
      type: object
      properties:
        logType:
          description: The log type that this config enables.
          type: string
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
        exemptedMembers:
          description: >-
            Specifies the identities that do not cause logging for this type of
            permission. Follows the same format of Binding.members.
          type: array
          items:
            type: string
    TestIamPermissionsRequest:
      id: TestIamPermissionsRequest
      description: Request message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          description: >-
            The set of permissions to check for the `resource`. Permissions with
            wildcards (such as `*` or `storage.*`) are not allowed. For more
            information see [IAM
            Overview](https://cloud.google.com/iam/docs/overview#permissions).
          type: array
          items:
            type: string
    TestIamPermissionsResponse:
      id: TestIamPermissionsResponse
      description: Response message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          description: >-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
          type: array
          items:
            type: string
    OperationMetadata:
      id: OperationMetadata
      description: Represents the metadata of the long-running operation.
      type: object
      properties:
        createTime:
          description: Output only. The time the operation was created.
          readOnly: true
          type: string
          format: google-datetime
        endTime:
          description: Output only. The time the operation finished running.
          readOnly: true
          type: string
          format: google-datetime
        target:
          description: >-
            Output only. Server-defined resource path for the target of the
            operation.
          readOnly: true
          type: string
        verb:
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
          type: string
        statusMessage:
          description: Output only. Human-readable status of the operation, if any.
          readOnly: true
          type: string
        requestedCancellation:
          description: >-
            Output only. Identifies whether the user has requested cancellation
            of the operation. Operations that have been cancelled successfully
            have Operation.error value with a google.rpc.Status.code of 1,
            corresponding to `Code.CANCELLED`.
          readOnly: true
          type: boolean
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    locations:
      id: google.geminicloudassist.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1alpha~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        get:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    instances:
      id: google.geminicloudassist.instances
      name: instances
      title: Instances
      methods:
        invoke_explain:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1instances~1{instancesId}:invokeExplain/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    operations:
      id: google.geminicloudassist.operations
      name: operations
      title: Operations
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        get:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    investigations:
      id: google.geminicloudassist.investigations
      name: investigations
      title: Investigations
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.investigations
        create:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations~1{investigationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations~1{investigationsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations~1{investigationsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/investigations/methods/get'
          - $ref: '#/components/x-stackQL-resources/investigations/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/investigations/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/investigations/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/investigations/methods/delete'
    investigations_iam_policies:
      id: google.geminicloudassist.investigations_iam_policies
      name: investigations_iam_policies
      title: Investigations_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations~1{investigationsId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations~1{investigationsId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations~1{investigationsId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/investigations_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/investigations_iam_policies/methods/set_iam_policy
        delete: []
    revisions:
      id: google.geminicloudassist.revisions
      name: revisions
      title: Revisions
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations~1{investigationsId}~1revisions/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.revisions
        create:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations~1{investigationsId}~1revisions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations~1{investigationsId}~1revisions~1{revisionsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations~1{investigationsId}~1revisions~1{revisionsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations~1{investigationsId}~1revisions~1{revisionsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        run:
          operation:
            $ref: >-
              #/paths/~1v1alpha~1projects~1{projectsId}~1locations~1{locationsId}~1investigations~1{investigationsId}~1revisions~1{revisionsId}:run/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/revisions/methods/get'
          - $ref: '#/components/x-stackQL-resources/revisions/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/revisions/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/revisions/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/revisions/methods/delete'
paths:
  /v1alpha/projects/{projectsId}/locations:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: Lists information about the supported locations for this service.
      operationId: geminicloudassist.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: extraLocationTypes
          schema:
            type: string
  /v1alpha/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: geminicloudassist.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
  /v1alpha/projects/{projectsId}/locations/{locationsId}/instances/{instancesId}:invokeExplain:
    parameters: *ref_1
    post:
      description: Invokes Explain with Gemini Cloud Assist.
      operationId: geminicloudassist.projects.locations.instances.invokeExplain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeExplainRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeExplainResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: instancesId
          required: true
          schema:
            type: string
  /v1alpha/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: geminicloudassist.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: geminicloudassist.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: geminicloudassist.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1alpha/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        `1`, corresponding to `Code.CANCELLED`.
      operationId: geminicloudassist.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1alpha/projects/{projectsId}/locations/{locationsId}/investigations:
    parameters: *ref_1
    get:
      description: Lists Investigations in a given project and location.
      operationId: geminicloudassist.projects.locations.investigations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInvestigationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
    post:
      description: Creates a new Investigation in a given project and location.
      operationId: geminicloudassist.projects.locations.investigations.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Investigation'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investigation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: investigationId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1alpha/projects/{projectsId}/locations/{locationsId}/investigations/{investigationsId}:
    parameters: *ref_1
    get:
      description: Gets details of a single Investigation.
      operationId: geminicloudassist.projects.locations.investigations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investigation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: investigationsId
          required: true
          schema:
            type: string
    patch:
      description: Updates the parameters of a single Investigation.
      operationId: geminicloudassist.projects.locations.investigations.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Investigation'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Investigation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: investigationsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: requestId
          schema:
            type: string
    delete:
      description: Deletes a single Investigation.
      operationId: geminicloudassist.projects.locations.investigations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: investigationsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1alpha/projects/{projectsId}/locations/{locationsId}/investigations/{investigationsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: geminicloudassist.projects.locations.investigations.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: investigationsId
          required: true
          schema:
            type: string
  /v1alpha/projects/{projectsId}/locations/{locationsId}/investigations/{investigationsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: geminicloudassist.projects.locations.investigations.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: investigationsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1alpha/projects/{projectsId}/locations/{locationsId}/investigations/{investigationsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: geminicloudassist.projects.locations.investigations.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: investigationsId
          required: true
          schema:
            type: string
  /v1alpha/projects/{projectsId}/locations/{locationsId}/investigations/{investigationsId}/revisions:
    parameters: *ref_1
    get:
      description: Lists Investigations in a given project and location.
      operationId: geminicloudassist.projects.locations.investigations.revisions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInvestigationRevisionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: investigationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
    post:
      description: Creates a new revision of a given Investigation.
      operationId: geminicloudassist.projects.locations.investigations.revisions.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestigationRevision'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestigationRevision'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: investigationsId
          required: true
          schema:
            type: string
        - in: query
          name: investigationRevisionId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v1alpha/projects/{projectsId}/locations/{locationsId}/investigations/{investigationsId}/revisions/{revisionsId}:
    parameters: *ref_1
    get:
      description: Gets details of a single revision of an Investigation.
      operationId: geminicloudassist.projects.locations.investigations.revisions.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestigationRevision'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: investigationsId
          required: true
          schema:
            type: string
        - in: path
          name: revisionsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a single revision of an Investigation. Fails if the revision is
        the investigation's active revision.
      operationId: geminicloudassist.projects.locations.investigations.revisions.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: investigationsId
          required: true
          schema:
            type: string
        - in: path
          name: revisionsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
    patch:
      description: Updates the parameters of a single Investigation.
      operationId: geminicloudassist.projects.locations.investigations.revisions.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestigationRevision'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestigationRevision'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: investigationsId
          required: true
          schema:
            type: string
        - in: path
          name: revisionsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: requestId
          schema:
            type: string
  /v1alpha/projects/{projectsId}/locations/{locationsId}/investigations/{investigationsId}/revisions/{revisionsId}:run:
    parameters: *ref_1
    post:
      description: Run an existing revision of an investigation.
      operationId: geminicloudassist.projects.locations.investigations.revisions.run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunInvestigationRevisionRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: investigationsId
          required: true
          schema:
            type: string
        - in: path
          name: revisionsId
          required: true
          schema:
            type: string
