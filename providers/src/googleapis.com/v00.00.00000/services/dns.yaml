openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Cloud DNS API
  description: ''
  version: v1
  x-discovery-doc-revision: '20230807'
  x-generated-date: '2023-09-01'
externalDocs:
  url: 'https://cloud.google.com/dns/docs'
servers:
  - url: 'https://dns.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform.read-only': View your data across Google Cloud services and see the email address of your Google Account
            'https://www.googleapis.com/auth/ndev.clouddns.readonly': View your DNS records hosted by Google Cloud DNS
            'https://www.googleapis.com/auth/ndev.clouddns.readwrite': View and manage your DNS records hosted by Google Cloud DNS
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    GoogleIamV1TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      id: GoogleIamV1TestIamPermissionsResponse
      properties:
        permissions:
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
          items:
            type: string
          type: array
      type: object
    ManagedZoneServiceDirectoryConfig:
      description: Contains information about Service Directory-backed zones.
      type: object
      id: ManagedZoneServiceDirectoryConfig
      properties:
        namespace:
          $ref: '#/components/schemas/ManagedZoneServiceDirectoryConfigNamespace'
          description: Contains information about the namespace associated with the zone.
        kind:
          type: string
          default: dns#managedZoneServiceDirectoryConfig
    RRSetRoutingPolicyGeoPolicyGeoPolicyItem:
      type: object
      description: ResourceRecordSet data for one geo location.
      properties:
        rrdatas:
          items:
            type: string
          type: array
        healthCheckedTargets:
          $ref: '#/components/schemas/RRSetRoutingPolicyHealthCheckTargets'
          description: For A and AAAA types only. Endpoints to return in the query result only if they are healthy. These can be specified along with rrdata within this item.
        kind:
          type: string
          default: dns#rRSetRoutingPolicyGeoPolicyGeoPolicyItem
        location:
          description: 'The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.'
          type: string
        signatureRrdatas:
          type: array
          items:
            type: string
          description: 'DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there''s a restriction of 1 ip per item. .'
      id: RRSetRoutingPolicyGeoPolicyGeoPolicyItem
    RRSetRoutingPolicyLoadBalancerTarget:
      properties:
        project:
          description: The project ID in which the ILB exists.
          type: string
        networkUrl:
          description: 'The fully qualified url of the network on which the ILB is present. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}'
          type: string
        region:
          description: The region in which the ILB exists.
          type: string
        loadBalancerType:
          type: string
          description: The type of Load Balancer specified by this target. Must match the configuration of the Load Balancer located at the LoadBalancerTarget's IP address/port and region.
          enumDescriptions:
            - ''
            - Cross-region internal Application Load Balancer
            - Regional internal passthrough Network Load Balancer
            - Regional internal Application Load Balancer
          enum:
            - none
            - globalL7ilb
            - regionalL4ilb
            - regionalL7ilb
        ipProtocol:
          enum:
            - undefined
            - tcp
            - udp
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
        port:
          type: string
          description: The configured port of the Load Balancer.
        kind:
          type: string
          default: dns#rRSetRoutingPolicyLoadBalancerTarget
        ipAddress:
          type: string
          description: The frontend IP address of the Load Balancer to health check.
      id: RRSetRoutingPolicyLoadBalancerTarget
      type: object
    PoliciesPatchResponse:
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
        header:
          $ref: '#/components/schemas/ResponseHeader'
      id: PoliciesPatchResponse
    ManagedZonePrivateVisibilityConfigGKECluster:
      id: ManagedZonePrivateVisibilityConfigGKECluster
      type: object
      properties:
        kind:
          default: dns#managedZonePrivateVisibilityConfigGKECluster
          type: string
        gkeClusterName:
          type: string
          description: 'The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get'
    ManagedZoneForwardingConfigNameServerTarget:
      properties:
        forwardingPath:
          enumDescriptions:
            - 'Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses forward to the target through the VPC and non-RFC1918 addresses forward to the target through the internet'
            - Cloud DNS always forwards to this target through the VPC.
          enum:
            - default
            - private
          type: string
          description: 'Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.'
        ipv6Address:
          description: IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
          type: string
        ipv4Address:
          description: IPv4 address of a target name server.
          type: string
        kind:
          type: string
          default: dns#managedZoneForwardingConfigNameServerTarget
      id: ManagedZoneForwardingConfigNameServerTarget
      type: object
    ResponsePoliciesListResponse:
      type: object
      properties:
        header:
          $ref: '#/components/schemas/ResponseHeader'
        nextPageToken:
          type: string
          description: 'The presence of this field indicates that more results exist following your last page of results in pagination order. To fetch them, make another list request by using this value as your page token. This lets you view the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.'
        responsePolicies:
          description: The Response Policy resources.
          items:
            $ref: '#/components/schemas/ResponsePolicy'
          type: array
      id: ResponsePoliciesListResponse
    GoogleIamV1AuditLogConfig:
      id: GoogleIamV1AuditLogConfig
      type: object
      properties:
        exemptedMembers:
          type: array
          items:
            type: string
          description: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
        logType:
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          type: string
          description: The log type that this config enables.
      description: 'Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables ''DATA_READ'' and ''DATA_WRITE'' logging, while exempting jose@example.com from DATA_READ logging.'
    ManagedZoneForwardingConfig:
      type: object
      id: ManagedZoneForwardingConfig
      properties:
        kind:
          default: dns#managedZoneForwardingConfig
          type: string
        targetNameServers:
          items:
            $ref: '#/components/schemas/ManagedZoneForwardingConfigNameServerTarget'
          description: List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
          type: array
    ResponsePolicyNetwork:
      id: ResponsePolicyNetwork
      properties:
        kind:
          default: dns#responsePolicyNetwork
          type: string
        networkUrl:
          description: 'The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}'
          type: string
      type: object
    GoogleIamV1Policy:
      type: object
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
      properties:
        auditConfigs:
          items:
            $ref: '#/components/schemas/GoogleIamV1AuditConfig'
          description: Specifies cloud audit logging configuration for this policy.
          type: array
        bindings:
          items:
            $ref: '#/components/schemas/GoogleIamV1Binding'
          description: 'Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.'
          type: array
        version:
          format: int32
          type: integer
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
        etag:
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
          format: byte
          type: string
      id: GoogleIamV1Policy
    ManagedZonePrivateVisibilityConfigNetwork:
      id: ManagedZonePrivateVisibilityConfigNetwork
      type: object
      properties:
        networkUrl:
          type: string
          description: 'The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}'
        kind:
          type: string
          default: dns#managedZonePrivateVisibilityConfigNetwork
    RRSetRoutingPolicyHealthCheckTargets:
      description: HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response.
      id: RRSetRoutingPolicyHealthCheckTargets
      properties:
        internalLoadBalancers:
          items:
            $ref: '#/components/schemas/RRSetRoutingPolicyLoadBalancerTarget'
          type: array
      type: object
    GoogleIamV1SetIamPolicyRequest:
      properties:
        updateMask:
          format: google-fieldmask
          type: string
          description: 'OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`'
        policy:
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
          $ref: '#/components/schemas/GoogleIamV1Policy'
      id: GoogleIamV1SetIamPolicyRequest
      type: object
      description: Request message for `SetIamPolicy` method.
    ResponseHeader:
      id: ResponseHeader
      type: object
      description: Elements common to every response.
      properties:
        operationId:
          description: 'For mutating operation requests that completed successfully. This is the client_operation_id if the client specified it, otherwise it is generated by the server (output only).'
          type: string
    GoogleIamV1GetPolicyOptions:
      type: object
      id: GoogleIamV1GetPolicyOptions
      description: Encapsulates settings provided to GetIamPolicy.
      properties:
        requestedPolicyVersion:
          description: 'Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
          type: integer
          format: int32
    RRSetRoutingPolicyPrimaryBackupPolicy:
      id: RRSetRoutingPolicyPrimaryBackupPolicy
      properties:
        primaryTargets:
          $ref: '#/components/schemas/RRSetRoutingPolicyHealthCheckTargets'
        trickleTraffic:
          description: 'When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.'
          type: number
          format: double
        backupGeoTargets:
          description: 'Backup targets provide a regional failover policy for the otherwise global primary targets. If serving state is set to BACKUP, this policy essentially becomes a geo routing policy.'
          $ref: '#/components/schemas/RRSetRoutingPolicyGeoPolicy'
        kind:
          default: dns#rRSetRoutingPolicyPrimaryBackupPolicy
          type: string
      type: object
      description: 'Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.'
    Quota:
      description: Limits associated with a Project.
      type: object
      properties:
        resourceRecordsPerRrset:
          format: int32
          description: Maximum allowed number of ResourceRecords per ResourceRecordSet.
          type: integer
        targetNameServersPerPolicy:
          type: integer
          format: int32
          description: Maximum allowed number of alternative target name servers per policy.
        rrsetDeletionsPerChange:
          format: int32
          description: Maximum allowed number of ResourceRecordSets to delete per ChangesCreateRequest.
          type: integer
        kind:
          type: string
          default: dns#quota
        targetNameServersPerManagedZone:
          description: Maximum allowed number of target name servers per managed forwarding zone.
          type: integer
          format: int32
        gkeClustersPerPolicy:
          format: int32
          description: Maximum allowed number of GKE clusters per policy.
          type: integer
        responsePolicies:
          description: Maximum allowed number of response policies per project.
          format: int32
          type: integer
        whitelistedKeySpecs:
          type: array
          items:
            $ref: '#/components/schemas/DnsKeySpec'
          description: DNSSEC algorithm and key length types that can be used for DnsKeys.
        rrsetsPerManagedZone:
          description: Maximum allowed number of ResourceRecordSets per zone in the project.
          type: integer
          format: int32
        totalRrdataSizePerChange:
          format: int32
          type: integer
          description: Maximum allowed size for total rrdata in one ChangesCreateRequest in bytes.
        peeringZonesPerTargetNetwork:
          format: int32
          description: Maximum allowed number of consumer peering zones per target network owned by this producer project
          type: integer
        managedZones:
          format: int32
          description: Maximum allowed number of managed zones in the project.
          type: integer
        networksPerResponsePolicy:
          format: int32
          description: Maximum allowed number of networks per response policy.
          type: integer
        rrsetAdditionsPerChange:
          format: int32
          description: Maximum allowed number of ResourceRecordSets to add per ChangesCreateRequest.
          type: integer
        dnsKeysPerManagedZone:
          description: Maximum allowed number of DnsKeys per ManagedZone.
          format: int32
          type: integer
        networksPerManagedZone:
          type: integer
          description: Maximum allowed number of networks to which a privately scoped zone can be attached.
          format: int32
        managedZonesPerNetwork:
          description: Maximum allowed number of managed zones which can be attached to a network.
          format: int32
          type: integer
        itemsPerRoutingPolicy:
          format: int32
          type: integer
          description: Maximum allowed number of items per routing policy.
        networksPerPolicy:
          description: Maximum allowed number of networks per policy.
          format: int32
          type: integer
        managedZonesPerGkeCluster:
          description: Maximum allowed number of managed zones which can be attached to a GKE cluster.
          format: int32
          type: integer
        policies:
          description: Maximum allowed number of policies per project.
          type: integer
          format: int32
        gkeClustersPerResponsePolicy:
          format: int32
          type: integer
          description: Maximum allowed number of GKE clusters per response policy.
        responsePolicyRulesPerResponsePolicy:
          description: Maximum allowed number of rules per response policy.
          type: integer
          format: int32
        gkeClustersPerManagedZone:
          format: int32
          description: Maximum allowed number of GKE clusters to which a privately scoped zone can be attached.
          type: integer
      id: Quota
    ResourceRecordSetsListResponse:
      properties:
        header:
          $ref: '#/components/schemas/ResponseHeader'
        kind:
          type: string
          default: dns#resourceRecordSetsListResponse
          description: Type of resource.
        nextPageToken:
          type: string
          description: 'The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token. This lets you retrieve complete contents of even larger collections, one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.'
        rrsets:
          description: The resource record set resources.
          type: array
          items:
            $ref: '#/components/schemas/ResourceRecordSet'
      id: ResourceRecordSetsListResponse
      type: object
    ResourceRecordSet:
      id: ResourceRecordSet
      properties:
        kind:
          type: string
          default: dns#resourceRecordSet
        routingPolicy:
          description: Configures dynamic query responses based on geo location of querying user or a weighted round robin based routing policy. A ResourceRecordSet should only have either rrdata (static) or routing_policy (dynamic). An error is returned otherwise.
          $ref: '#/components/schemas/RRSetRoutingPolicy'
        type:
          description: The identifier of a supported record type. See the list of Supported DNS record types.
          type: string
        name:
          description: 'For example, www.example.com.'
          type: string
        signatureRrdatas:
          type: array
          description: As defined in RFC 4034 (section 3.2).
          items:
            type: string
        ttl:
          format: int32
          type: integer
          description: Number of seconds that this ResourceRecordSet can be cached by resolvers.
        rrdatas:
          items:
            type: string
          type: array
          description: As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
      description: A unit of data that is returned by the DNS servers.
      type: object
    ResponsePolicyGKECluster:
      type: object
      properties:
        kind:
          default: dns#responsePolicyGKECluster
          type: string
        gkeClusterName:
          description: 'The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get'
          type: string
      id: ResponsePolicyGKECluster
    ResponsePolicyRulesUpdateResponse:
      id: ResponsePolicyRulesUpdateResponse
      type: object
      properties:
        header:
          $ref: '#/components/schemas/ResponseHeader'
        responsePolicyRule:
          $ref: '#/components/schemas/ResponsePolicyRule'
    Expr:
      type: object
      id: Expr
      properties:
        location:
          type: string
          description: 'Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.'
        description:
          description: 'Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.'
          type: string
        expression:
          description: Textual representation of an expression in Common Expression Language syntax.
          type: string
        title:
          description: 'Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.'
          type: string
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
    ResponsePolicyRuleLocalData:
      properties:
        localDatas:
          description: 'All resource record sets for this selector, one per resource record type. The name must match the dns_name.'
          items:
            $ref: '#/components/schemas/ResourceRecordSet'
          type: array
      id: ResponsePolicyRuleLocalData
      type: object
    PolicyNetwork:
      type: object
      properties:
        networkUrl:
          type: string
          description: 'The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}'
        kind:
          type: string
          default: dns#policyNetwork
      id: PolicyNetwork
    ManagedZonePrivateVisibilityConfig:
      type: object
      id: ManagedZonePrivateVisibilityConfig
      properties:
        kind:
          default: dns#managedZonePrivateVisibilityConfig
          type: string
        gkeClusters:
          description: The list of Google Kubernetes Engine clusters that can see this zone.
          type: array
          items:
            $ref: '#/components/schemas/ManagedZonePrivateVisibilityConfigGKECluster'
        networks:
          type: array
          description: The list of VPC networks that can see this zone.
          items:
            $ref: '#/components/schemas/ManagedZonePrivateVisibilityConfigNetwork'
    DnsKey:
      type: object
      id: DnsKey
      description: A DNSSEC key pair.
      properties:
        isActive:
          type: boolean
          description: Active keys are used to sign subsequent changes to the ManagedZone. Inactive keys are still present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
        id:
          type: string
          description: Unique identifier for the resource; defined by the server (output only).
        type:
          type: string
          enumDescriptions:
            - ''
            - ''
          enum:
            - keySigning
            - zoneSigning
          description: 'One of "KEY_SIGNING" or "ZONE_SIGNING". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, are used to sign only resource record sets of type DNSKEY. Otherwise, the Secure Entry Point flag is cleared, and this key is used to sign only resource record sets of other types. Immutable after creation time.'
        description:
          type: string
          description: A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the resource's function.
        kind:
          default: dns#dnsKey
          type: string
        keyTag:
          format: int32
          type: integer
          description: 'The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone''s DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B. Output only.'
        keyLength:
          description: 'Length of the key in bits. Specified at creation time, and then immutable.'
          type: integer
          format: uint32
        algorithm:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
          description: String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time.
          enum:
            - rsasha1
            - rsasha256
            - rsasha512
            - ecdsap256sha256
            - ecdsap384sha384
        digests:
          items:
            $ref: '#/components/schemas/DnsKeyDigest'
          description: Cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Output only.
          type: array
        creationTime:
          description: The time that this resource was created in the control plane. This is in RFC3339 text format. Output only.
          type: string
        publicKey:
          description: Base64 encoded public half of this key. Output only.
          type: string
    Change:
      type: object
      properties:
        status:
          enumDescriptions:
            - ''
            - ''
          enum:
            - pending
            - done
          type: string
          description: 'Status of the operation (output only). A status of "done" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.'
        id:
          type: string
          description: Unique identifier for the resource; defined by the server (output only).
        isServing:
          type: boolean
          description: If the DNS queries for the zone will be served.
        kind:
          default: dns#change
          type: string
        startTime:
          description: The time that this operation was started by the server (output only). This is in RFC3339 text format.
          type: string
        deletions:
          type: array
          description: Which ResourceRecordSets to remove? Must match existing data exactly.
          items:
            $ref: '#/components/schemas/ResourceRecordSet'
        additions:
          description: Which ResourceRecordSets to add?
          items:
            $ref: '#/components/schemas/ResourceRecordSet'
          type: array
      description: A Change represents a set of ResourceRecordSet additions and deletions applied atomically to a ManagedZone. ResourceRecordSets within a ManagedZone are modified by creating a new Change element in the Changes collection. In turn the Changes collection also records the past modifications to the ResourceRecordSets in a ManagedZone. The current state of the ManagedZone is the sum effect of applying all Change elements in the Changes collection in sequence.
      id: Change
    ResponsePoliciesUpdateResponse:
      properties:
        responsePolicy:
          $ref: '#/components/schemas/ResponsePolicy'
        header:
          $ref: '#/components/schemas/ResponseHeader'
      type: object
      id: ResponsePoliciesUpdateResponse
    PolicyAlternativeNameServerConfig:
      type: object
      id: PolicyAlternativeNameServerConfig
      properties:
        kind:
          type: string
          default: dns#policyAlternativeNameServerConfig
        targetNameServers:
          items:
            $ref: '#/components/schemas/PolicyAlternativeNameServerConfigTargetNameServer'
          type: array
          description: 'Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.'
    ManagedZoneCloudLoggingConfig:
      type: object
      id: ManagedZoneCloudLoggingConfig
      properties:
        kind:
          type: string
          default: dns#managedZoneCloudLoggingConfig
        enableLogging:
          description: 'If set, enable query logging for this ManagedZone. False by default, making logging opt-in.'
          type: boolean
      description: Cloud Logging configurations for publicly visible zones.
    ManagedZonePeeringConfigTargetNetwork:
      id: ManagedZonePeeringConfigTargetNetwork
      properties:
        deactivateTime:
          description: 'The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.'
          type: string
        networkUrl:
          description: 'The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}'
          type: string
        kind:
          type: string
          default: dns#managedZonePeeringConfigTargetNetwork
      type: object
    ManagedZoneDnsSecConfig:
      id: ManagedZoneDnsSecConfig
      type: object
      properties:
        defaultKeySpecs:
          items:
            $ref: '#/components/schemas/DnsKeySpec'
          description: Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
          type: array
        kind:
          default: dns#managedZoneDnsSecConfig
          type: string
        state:
          type: string
          enumDescriptions:
            - DNSSEC is disabled; the zone is not signed.
            - DNSSEC is enabled; the zone is signed and fully managed.
            - 'DNSSEC is enabled, but in a "transfer" mode.'
          description: 'Specifies whether DNSSEC is enabled, and what mode it is in.'
          enum:
            - 'off'
            - 'on'
            - transfer
        nonExistence:
          type: string
          description: Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
          enumDescriptions:
            - ''
            - ''
          enum:
            - nsec
            - nsec3
    ResponsePolicyRulesListResponse:
      type: object
      properties:
        responsePolicyRules:
          description: The Response Policy Rule resources.
          type: array
          items:
            $ref: '#/components/schemas/ResponsePolicyRule'
        nextPageToken:
          description: 'The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token. This lets you the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.'
          type: string
        header:
          $ref: '#/components/schemas/ResponseHeader'
      id: ResponsePolicyRulesListResponse
    RRSetRoutingPolicyWrrPolicy:
      description: Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
      properties:
        kind:
          type: string
          default: dns#rRSetRoutingPolicyWrrPolicy
        items:
          type: array
          items:
            $ref: '#/components/schemas/RRSetRoutingPolicyWrrPolicyWrrPolicyItem'
      type: object
      id: RRSetRoutingPolicyWrrPolicy
    PolicyAlternativeNameServerConfigTargetNameServer:
      id: PolicyAlternativeNameServerConfigTargetNameServer
      type: object
      properties:
        forwardingPath:
          enumDescriptions:
            - 'Cloud DNS makes forwarding decision based on IP address ranges; that is, RFC1918 addresses forward to the target through the VPC and non-RFC1918 addresses forward to the target through the internet'
            - Cloud DNS always forwards to this target through the VPC.
          enum:
            - default
            - private
          description: 'Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.'
          type: string
        kind:
          default: dns#policyAlternativeNameServerConfigTargetNameServer
          type: string
        ipv6Address:
          description: IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
          type: string
        ipv4Address:
          type: string
          description: IPv4 address to forward queries to.
    GoogleIamV1AuditConfig:
      description: 'Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.'
      id: GoogleIamV1AuditConfig
      properties:
        auditLogConfigs:
          description: The configuration for logging of each type of permission.
          items:
            $ref: '#/components/schemas/GoogleIamV1AuditLogConfig'
          type: array
        service:
          type: string
          description: 'Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.'
      type: object
    ChangesListResponse:
      description: The response to a request to enumerate Changes to a ResourceRecordSets collection.
      properties:
        changes:
          type: array
          description: The requested changes.
          items:
            $ref: '#/components/schemas/Change'
        header:
          $ref: '#/components/schemas/ResponseHeader'
        nextPageToken:
          description: 'The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token. This lets you retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a "snapshot" of collections larger than the maximum page size.'
          type: string
        kind:
          type: string
          default: dns#changesListResponse
          description: Type of resource.
      id: ChangesListResponse
      type: object
    RRSetRoutingPolicy:
      id: RRSetRoutingPolicy
      properties:
        geo:
          $ref: '#/components/schemas/RRSetRoutingPolicyGeoPolicy'
        kind:
          default: dns#rRSetRoutingPolicy
          type: string
        primaryBackup:
          $ref: '#/components/schemas/RRSetRoutingPolicyPrimaryBackupPolicy'
        wrr:
          $ref: '#/components/schemas/RRSetRoutingPolicyWrrPolicy'
      description: A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
      type: object
    RRSetRoutingPolicyWrrPolicyWrrPolicyItem:
      type: object
      description: A routing block which contains the routing information for one WRR item.
      id: RRSetRoutingPolicyWrrPolicyWrrPolicyItem
      properties:
        signatureRrdatas:
          description: 'DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there''s a restriction of 1 ip per item. .'
          items:
            type: string
          type: array
        kind:
          type: string
          default: dns#rRSetRoutingPolicyWrrPolicyWrrPolicyItem
        healthCheckedTargets:
          $ref: '#/components/schemas/RRSetRoutingPolicyHealthCheckTargets'
          description: 'endpoints that need to be health checked before making the routing decision. The unhealthy endpoints will be omitted from the result. If all endpoints within a buckete are unhealthy, we''ll choose a different bucket (sampled w.r.t. its weight) for responding. Note that if DNSSEC is enabled for this zone, only one of rrdata or health_checked_targets can be set.'
        weight:
          type: number
          format: double
          description: 'The weight corresponding to this subset of rrdata. When multiple WeightedRoundRobinPolicyItems are configured, the probability of returning an rrset is proportional to its weight relative to the sum of weights configured for all items. This weight should be non-negative.'
        rrdatas:
          items:
            type: string
          type: array
    Project:
      description: 'A project resource. The project is a top level container for resources including Cloud DNS ManagedZones. Projects can be created only in the APIs console. Next tag: 7.'
      properties:
        quota:
          $ref: '#/components/schemas/Quota'
          description: Quotas assigned to this project (output only).
        number:
          description: Unique numeric identifier for the resource; defined by the server (output only).
          format: uint64
          type: string
        id:
          type: string
          description: User assigned unique identifier for the resource (output only).
        kind:
          default: dns#project
          type: string
      type: object
      id: Project
    OperationManagedZoneContext:
      type: object
      id: OperationManagedZoneContext
      properties:
        oldValue:
          $ref: '#/components/schemas/ManagedZone'
          description: The pre-operation ManagedZone resource.
        newValue:
          description: The post-operation ManagedZone resource.
          $ref: '#/components/schemas/ManagedZone'
    DnsKeysListResponse:
      type: object
      id: DnsKeysListResponse
      description: The response to a request to enumerate DnsKeys in a ManagedZone.
      properties:
        dnsKeys:
          items:
            $ref: '#/components/schemas/DnsKey'
          description: The requested resources.
          type: array
        header:
          $ref: '#/components/schemas/ResponseHeader'
        kind:
          description: Type of resource.
          default: dns#dnsKeysListResponse
          type: string
        nextPageToken:
          description: 'The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token. In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. There is no way to retrieve a "snapshot" of collections larger than the maximum page size.'
          type: string
    Operation:
      description: 'An operation represents a successful mutation performed on a Cloud DNS resource. Operations provide: - An audit log of server resource mutations. - A way to recover/retry API calls in the case where the response is never received by the caller. Use the caller specified client_operation_id.'
      type: object
      properties:
        id:
          description: 'Unique identifier for the resource. This is the client_operation_id if the client specified it when the mutation was initiated, otherwise, it is generated by the server. The name must be 1-63 characters long and match the regular expression [-a-z0-9]? (output only)'
          type: string
        user:
          type: string
          description: 'User who requested the operation, for example: user@example.com. cloud-dns-system for operations automatically done by the system. (output only)'
        startTime:
          type: string
          description: The time that this operation was started by the server. This is in RFC3339 text format (output only).
        kind:
          type: string
          default: dns#operation
        dnsKeyContext:
          $ref: '#/components/schemas/OperationDnsKeyContext'
          description: Only populated if the operation targeted a DnsKey (output only).
        status:
          enum:
            - pending
            - done
          enumDescriptions:
            - ''
            - ''
          description: 'Status of the operation. Can be one of the following: "PENDING" or "DONE" (output only). A status of "DONE" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.'
          type: string
        type:
          description: 'Type of the operation. Operations include insert, update, and delete (output only).'
          type: string
        zoneContext:
          description: Only populated if the operation targeted a ManagedZone (output only).
          $ref: '#/components/schemas/OperationManagedZoneContext'
      id: Operation
    GoogleIamV1GetIamPolicyRequest:
      type: object
      id: GoogleIamV1GetIamPolicyRequest
      properties:
        options:
          description: 'OPTIONAL: A `GetPolicyOptions` object for specifying options to `GetIamPolicy`.'
          $ref: '#/components/schemas/GoogleIamV1GetPolicyOptions'
      description: Request message for `GetIamPolicy` method.
    OperationDnsKeyContext:
      id: OperationDnsKeyContext
      properties:
        newValue:
          description: The post-operation DnsKey resource.
          $ref: '#/components/schemas/DnsKey'
        oldValue:
          description: The pre-operation DnsKey resource.
          $ref: '#/components/schemas/DnsKey'
      type: object
    RRSetRoutingPolicyGeoPolicy:
      properties:
        kind:
          default: dns#rRSetRoutingPolicyGeoPolicy
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/RRSetRoutingPolicyGeoPolicyGeoPolicyItem'
          description: 'The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.'
        enableFencing:
          description: 'Without fencing, if health check fails for all configured items in the current geo bucket, we''ll failover to the next nearest geo bucket. With fencing, if health check is enabled, as long as some targets in the current geo bucket are healthy, we''ll return only the healthy targets. However, if they''re all unhealthy, we won''t failover to the next nearest bucket, we''ll simply return all the items in the current bucket even though they''re unhealthy.'
          type: boolean
      description: Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
      type: object
      id: RRSetRoutingPolicyGeoPolicy
    ResponsePolicyRulesPatchResponse:
      type: object
      id: ResponsePolicyRulesPatchResponse
      properties:
        responsePolicyRule:
          $ref: '#/components/schemas/ResponsePolicyRule'
        header:
          $ref: '#/components/schemas/ResponseHeader'
    ManagedZoneReverseLookupConfig:
      properties:
        kind:
          default: dns#managedZoneReverseLookupConfig
          type: string
      type: object
      id: ManagedZoneReverseLookupConfig
    ResponsePolicyRule:
      type: object
      id: ResponsePolicyRule
      description: 'A Response Policy Rule is a selector that applies its behavior to queries that match the selector. Selectors are DNS names, which may be wildcards or exact matches. Each DNS query subject to a Response Policy matches at most one ResponsePolicyRule, as identified by the dns_name field with the longest matching suffix.'
      properties:
        kind:
          type: string
          default: dns#responsePolicyRule
        dnsName:
          description: The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
          type: string
        behavior:
          type: string
          description: Answer this query with a behavior rather than DNS data.
          enum:
            - behaviorUnspecified
            - bypassResponsePolicy
          enumDescriptions:
            - ''
            - 'Skip a less-specific ResponsePolicyRule and continue normal query logic. This can be used with a less-specific wildcard selector to exempt a subset of the wildcard ResponsePolicyRule from the ResponsePolicy behavior and query the public Internet instead. For instance, if these rules exist: *.example.com -> LocalData 1.2.3.4 foo.example.com -> Behavior ''bypassResponsePolicy'' Then a query for ''foo.example.com'' skips the wildcard. This additionally functions to facilitate the allowlist feature. RPZs can be applied to multiple levels in the (eventually org, folder, project, network) hierarchy. If a rule is applied at a higher level of the hierarchy, adding a passthru rule at a lower level will supersede that, and a query from an affected vm to that domain will be exempt from the RPZ and proceed to normal resolution behavior.'
        localData:
          $ref: '#/components/schemas/ResponsePolicyRuleLocalData'
          description: 'Answer this query directly with DNS data. These ResourceRecordSets override any other DNS behavior for the matched name; in particular they override private zones, the public internet, and GCP internal DNS. No SOA nor NS types are allowed.'
        ruleName:
          description: An identifier for this rule. Must be unique with the ResponsePolicy.
          type: string
    GoogleIamV1Binding:
      id: GoogleIamV1Binding
      description: 'Associates `members`, or principals, with a `role`.'
      type: object
      properties:
        role:
          type: string
          description: 'Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.'
        condition:
          description: 'The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
          $ref: '#/components/schemas/Expr'
        members:
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.'
          items:
            type: string
          type: array
    ManagedZoneOperationsListResponse:
      id: ManagedZoneOperationsListResponse
      properties:
        header:
          $ref: '#/components/schemas/ResponseHeader'
        kind:
          default: dns#managedZoneOperationsListResponse
          description: Type of resource.
          type: string
        nextPageToken:
          description: 'The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token. This lets you retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.'
          type: string
        operations:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
          description: The operation resources.
      type: object
    ResponsePolicy:
      id: ResponsePolicy
      type: object
      properties:
        id:
          format: int64
          description: Unique identifier for the resource; defined by the server (output only).
          type: string
        description:
          description: User-provided description for this Response Policy.
          type: string
        responsePolicyName:
          description: User assigned name for this Response Policy.
          type: string
        kind:
          type: string
          default: dns#responsePolicy
        gkeClusters:
          description: The list of Google Kubernetes Engine clusters to which this response policy is applied.
          type: array
          items:
            $ref: '#/components/schemas/ResponsePolicyGKECluster'
        networks:
          items:
            $ref: '#/components/schemas/ResponsePolicyNetwork'
          type: array
          description: List of network names specifying networks to which this policy is applied.
        labels:
          description: User labels.
          additionalProperties:
            type: string
          type: object
      description: A Response Policy is a collection of selectors that apply to queries made against one or more Virtual Private Cloud networks.
    ResourceRecordSetsDeleteResponse:
      id: ResourceRecordSetsDeleteResponse
      properties: {}
      type: object
    ManagedZoneServiceDirectoryConfigNamespace:
      properties:
        deletionTime:
          type: string
          description: The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
        namespaceUrl:
          type: string
          description: 'The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}'
        kind:
          default: dns#managedZoneServiceDirectoryConfigNamespace
          type: string
      type: object
      id: ManagedZoneServiceDirectoryConfigNamespace
    ManagedZonePeeringConfig:
      properties:
        kind:
          type: string
          default: dns#managedZonePeeringConfig
        targetNetwork:
          description: The network with which to peer.
          $ref: '#/components/schemas/ManagedZonePeeringConfigTargetNetwork'
      id: ManagedZonePeeringConfig
      type: object
    PoliciesListResponse:
      type: object
      id: PoliciesListResponse
      properties:
        nextPageToken:
          type: string
          description: 'The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token. This lets you the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.'
        policies:
          items:
            $ref: '#/components/schemas/Policy'
          type: array
          description: The policy resources.
        kind:
          type: string
          default: dns#policiesListResponse
          description: Type of resource.
        header:
          $ref: '#/components/schemas/ResponseHeader'
    DnsKeySpec:
      properties:
        keyType:
          description: 'Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.'
          enumDescriptions:
            - ''
            - ''
          type: string
          enum:
            - keySigning
            - zoneSigning
        algorithm:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
          description: String mnemonic specifying the DNSSEC algorithm of this key.
          enum:
            - rsasha1
            - rsasha256
            - rsasha512
            - ecdsap256sha256
            - ecdsap384sha384
          type: string
        kind:
          default: dns#dnsKeySpec
          type: string
        keyLength:
          description: Length of the keys in bits.
          format: uint32
          type: integer
      id: DnsKeySpec
      type: object
      description: Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
    Policy:
      id: Policy
      properties:
        description:
          type: string
          description: A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function.
        enableLogging:
          description: Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
          type: boolean
        enableInboundForwarding:
          type: boolean
          description: 'Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.'
        networks:
          items:
            $ref: '#/components/schemas/PolicyNetwork'
          description: List of network names specifying networks to which this policy is applied.
          type: array
        alternativeNameServerConfig:
          $ref: '#/components/schemas/PolicyAlternativeNameServerConfig'
          description: 'Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.'
        name:
          type: string
          description: User-assigned name for this policy.
        id:
          type: string
          description: Unique identifier for the resource; defined by the server (output only).
          format: uint64
        kind:
          type: string
          default: dns#policy
      description: A policy is a collection of DNS rules applied to one or more Virtual Private Cloud resources.
      type: object
    ResponsePoliciesPatchResponse:
      type: object
      properties:
        responsePolicy:
          $ref: '#/components/schemas/ResponsePolicy'
        header:
          $ref: '#/components/schemas/ResponseHeader'
      id: ResponsePoliciesPatchResponse
    PoliciesUpdateResponse:
      properties:
        policy:
          $ref: '#/components/schemas/Policy'
        header:
          $ref: '#/components/schemas/ResponseHeader'
      type: object
      id: PoliciesUpdateResponse
    ManagedZone:
      properties:
        description:
          type: string
          description: A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the managed zone's function.
        nameServers:
          type: array
          items:
            type: string
          description: Delegate your managed_zone to these virtual name servers; defined by the server (output only)
        privateVisibilityConfig:
          $ref: '#/components/schemas/ManagedZonePrivateVisibilityConfig'
          description: 'For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.'
        kind:
          default: dns#managedZone
          type: string
        name:
          description: 'User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.'
          type: string
        peeringConfig:
          description: The presence of this field indicates that DNS Peering is enabled for this zone. The value of this field contains the network to peer with.
          $ref: '#/components/schemas/ManagedZonePeeringConfig'
        visibility:
          enum:
            - public
            - private
          type: string
          enumDescriptions:
            - ''
            - ''
          description: 'The zone''s visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.'
        id:
          description: Unique identifier for the resource; defined by the server (output only)
          format: uint64
          type: string
        forwardingConfig:
          $ref: '#/components/schemas/ManagedZoneForwardingConfig'
          description: The presence for this field indicates that outbound forwarding is enabled for this zone. The value of this field contains the set of destinations to forward to.
        dnssecConfig:
          $ref: '#/components/schemas/ManagedZoneDnsSecConfig'
          description: DNSSEC configuration.
        reverseLookupConfig:
          $ref: '#/components/schemas/ManagedZoneReverseLookupConfig'
          description: The presence of this field indicates that this is a managed reverse lookup zone and Cloud DNS resolves reverse lookup queries using automatically configured records for VPC resources. This only applies to networks listed under private_visibility_config.
        serviceDirectoryConfig:
          description: This field links to the associated service directory namespace. Do not set this field for public zones or forwarding zones.
          $ref: '#/components/schemas/ManagedZoneServiceDirectoryConfig'
        cloudLoggingConfig:
          $ref: '#/components/schemas/ManagedZoneCloudLoggingConfig'
        dnsName:
          type: string
          description: 'The DNS name of this managed zone, for instance "example.com.".'
        creationTime:
          type: string
          description: The time that this resource was created on the server. This is in RFC3339 text format. Output only.
        nameServerSet:
          description: 'Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users leave this field unset. If you need to use this field, contact your account team.'
          type: string
        labels:
          description: User labels.
          type: object
          additionalProperties:
            type: string
      id: ManagedZone
      description: A zone is a subtree of the DNS namespace under one administrative responsibility. A ManagedZone is a resource that represents a DNS zone hosted by the Cloud DNS service.
      type: object
    GoogleIamV1TestIamPermissionsRequest:
      id: GoogleIamV1TestIamPermissionsRequest
      type: object
      properties:
        permissions:
          description: 'The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).'
          items:
            type: string
          type: array
      description: Request message for `TestIamPermissions` method.
    DnsKeyDigest:
      id: DnsKeyDigest
      type: object
      properties:
        type:
          type: string
          description: Specifies the algorithm used to calculate this digest.
          enumDescriptions:
            - ''
            - ''
            - ''
          enum:
            - sha1
            - sha256
            - sha384
        digest:
          type: string
          description: The base-16 encoded bytes of this digest. Suitable for use in a DS resource record.
    ManagedZonesListResponse:
      properties:
        managedZones:
          type: array
          description: The managed zone resources.
          items:
            $ref: '#/components/schemas/ManagedZone'
        nextPageToken:
          type: string
          description: 'The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token. This lets you the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.'
        header:
          $ref: '#/components/schemas/ResponseHeader'
        kind:
          type: string
          default: dns#managedZonesListResponse
          description: Type of resource.
      type: object
      id: ManagedZonesListResponse
  parameters:
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
  x-stackQL-resources:
    managed_zones:
      id: google.dns.managed_zones
      name: managed_zones
      title: Managed Zones
      methods:
        update:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        get:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.managedZones
        _list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_zones/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_zones/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/managed_zones/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/managed_zones/methods/delete'
    managed_zones_iam_policies:
      id: google.dns.managed_zones_iam_policies
      name: managed_zones_iam_policies
      title: Managed Zones Iam Policies
      methods:
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{projectsId}~1managedZones~1{managedZonesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{projectsId}~1managedZones~1{managedZonesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{projectsId}~1managedZones~1{managedZonesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{projectsId}~1managedZones~1{managedZonesId}:getIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_zones_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    managed_zone_operations:
      id: google.dns.managed_zone_operations
      name: managed_zone_operations
      title: Managed Zone Operations
      methods:
        get:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1operations~1{operation}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        _list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/managed_zone_operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/managed_zone_operations/methods/list'
        insert: []
        update: []
        delete: []
    response_policies:
      id: google.dns.response_policies
      name: response_policies
      title: Response Policies
      methods:
        get:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies~1{responsePolicy}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies~1{responsePolicy}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies~1{responsePolicy}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies~1{responsePolicy}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.responsePolicies
        _list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/response_policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/response_policies/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/response_policies/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/response_policies/methods/delete'
    changes:
      id: google.dns.changes
      name: changes
      title: Changes
      methods:
        list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1changes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.changes
        _list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1changes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1changes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1changes~1{changeId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/changes/methods/get'
          - $ref: '#/components/x-stackQL-resources/changes/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/changes/methods/create'
        update: []
        delete: []
    resource_record_sets:
      id: google.dns.resource_record_sets
      name: resource_record_sets
      title: Resource Record Sets
      methods:
        patch:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1rrsets~1{name}~1{type}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1rrsets~1{name}~1{type}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1rrsets~1{name}~1{type}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1rrsets/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1rrsets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.rrsets
        _list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1rrsets/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/resource_record_sets/methods/get'
          - $ref: '#/components/x-stackQL-resources/resource_record_sets/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/resource_record_sets/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/resource_record_sets/methods/delete'
    dns_keys:
      id: google.dns.dns_keys
      name: dns_keys
      title: Dns Keys
      methods:
        get:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1dnsKeys~1{dnsKeyId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1dnsKeys/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.dnsKeys
        _list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1managedZones~1{managedZone}~1dnsKeys/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/dns_keys/methods/get'
          - $ref: '#/components/x-stackQL-resources/dns_keys/methods/list'
        insert: []
        update: []
        delete: []
    response_policy_rules:
      id: google.dns.response_policy_rules
      name: response_policy_rules
      title: Response Policy Rules
      methods:
        get:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies~1{responsePolicy}~1rules~1{responsePolicyRule}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies~1{responsePolicy}~1rules~1{responsePolicyRule}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies~1{responsePolicy}~1rules~1{responsePolicyRule}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
        update:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies~1{responsePolicy}~1rules~1{responsePolicyRule}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies~1{responsePolicy}~1rules/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.responsePolicyRules
        _list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies~1{responsePolicy}~1rules/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1responsePolicies~1{responsePolicy}~1rules/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/response_policy_rules/methods/get'
          - $ref: '#/components/x-stackQL-resources/response_policy_rules/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/response_policy_rules/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/response_policy_rules/methods/delete'
    policies:
      id: google.dns.policies
      name: policies
      title: Policies
      methods:
        list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1policies/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.policies
        _list:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1policies/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1policies/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1policies~1{policy}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1policies~1{policy}/put'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1policies~1{policy}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}~1policies~1{policy}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '204'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/policies/methods/get'
          - $ref: '#/components/x-stackQL-resources/policies/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/policies/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/policies/methods/delete'
    projects:
      id: google.dns.projects
      name: projects
      title: Projects
      methods:
        get:
          operation:
            $ref: '#/paths/~1dns~1v1~1projects~1{project}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/projects/methods/get'
        insert: []
        update: []
        delete: []
paths:
  '/dns/v1/projects/{project}/managedZones/{managedZone}':
    parameters: &ref_1
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/callback'
    put:
      description: Updates an existing ManagedZone.
      operationId: dns.managedZones.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedZone'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: managed_zones
      x-stackQL-method: update
      x-stackQL-verb: exec
    delete:
      description: Deletes a previously created ManagedZone.
      operationId: dns.managedZones.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: managed_zones
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Fetches the representation of an existing ManagedZone.
      operationId: dns.managedZones.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedZone'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: managed_zones
      x-stackQL-method: get
      x-stackQL-verb: select
    patch:
      description: Applies a partial update to an existing ManagedZone.
      operationId: dns.managedZones.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedZone'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: managed_zones
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/dns/v1/projects/{project}/managedZones':
    parameters: *ref_1
    post:
      description: Creates a new ManagedZone.
      operationId: dns.managedZones.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManagedZone'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedZone'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: managed_zones
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Enumerates ManagedZones that have been created but not yet deleted.
      operationId: dns.managedZones.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedZonesListResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: dnsName
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: managed_zones
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.managedZones
  '/dns/v1/projects/{projectsId}/managedZones/{managedZonesId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this returns an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: dns.managedZones.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleIamV1TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleIamV1TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: managedZonesId
          required: true
          schema:
            type: string
      x-stackQL-resource: managed_zones_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/dns/v1/projects/{projectsId}/managedZones/{managedZonesId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: dns.managedZones.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleIamV1SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleIamV1Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: managedZonesId
          required: true
          schema:
            type: string
      x-stackQL-resource: managed_zones_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/dns/v1/projects/{projectsId}/managedZones/{managedZonesId}:getIamPolicy':
    parameters: *ref_1
    post:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: dns.managedZones.getIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleIamV1GetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleIamV1Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: managedZonesId
          required: true
          schema:
            type: string
      x-stackQL-resource: managed_zones_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/dns/v1/projects/{project}/managedZones/{managedZone}/operations/{operation}':
    parameters: *ref_1
    get:
      description: Fetches the representation of an existing Operation.
      operationId: dns.managedZoneOperations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: path
          name: operation
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: managed_zone_operations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/dns/v1/projects/{project}/managedZones/{managedZone}/operations':
    parameters: *ref_1
    get:
      description: Enumerates Operations for the given ManagedZone.
      operationId: dns.managedZoneOperations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManagedZoneOperationsListResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: sortBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: managed_zone_operations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.operations
  '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}':
    parameters: *ref_1
    get:
      description: Fetches the representation of an existing Response Policy.
      operationId: dns.responsePolicies.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePolicy'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicy
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: response_policies
      x-stackQL-method: get
      x-stackQL-verb: select
    put:
      description: Updates an existing Response Policy.
      operationId: dns.responsePolicies.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponsePolicy'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePoliciesUpdateResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicy
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: response_policies
      x-stackQL-method: update
      x-stackQL-verb: exec
    patch:
      description: Applies a partial update to an existing Response Policy.
      operationId: dns.responsePolicies.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponsePolicy'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePoliciesPatchResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicy
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: response_policies
      x-stackQL-method: patch
      x-stackQL-verb: exec
    delete:
      description: Deletes a previously created Response Policy. Fails if the response policy is non-empty or still being referenced by a network.
      operationId: dns.responsePolicies.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicy
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: response_policies
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/dns/v1/projects/{project}/responsePolicies':
    parameters: *ref_1
    get:
      description: Enumerates all Response Policies associated with a project.
      operationId: dns.responsePolicies.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePoliciesListResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: response_policies
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.responsePolicies
    post:
      description: Creates a new Response Policy
      operationId: dns.responsePolicies.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponsePolicy'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePolicy'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: response_policies
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/dns/v1/projects/{project}/managedZones/{managedZone}/changes':
    parameters: *ref_1
    get:
      description: Enumerates Changes to a ResourceRecordSet collection.
      operationId: dns.changes.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangesListResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: sortBy
          schema:
            type: string
        - in: query
          name: sortOrder
          schema:
            type: string
      x-stackQL-resource: changes
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.changes
    post:
      description: Atomically updates the ResourceRecordSet collection.
      operationId: dns.changes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Change'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Change'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: changes
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/dns/v1/projects/{project}/managedZones/{managedZone}/changes/{changeId}':
    parameters: *ref_1
    get:
      description: Fetches the representation of an existing Change.
      operationId: dns.changes.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Change'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: path
          name: changeId
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: changes
      x-stackQL-method: get
      x-stackQL-verb: select
  '/dns/v1/projects/{project}/managedZones/{managedZone}/rrsets/{name}/{type}':
    parameters: *ref_1
    patch:
      description: Applies a partial update to an existing ResourceRecordSet.
      operationId: dns.resourceRecordSets.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceRecordSet'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceRecordSet'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: type
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: resource_record_sets
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Fetches the representation of an existing ResourceRecordSet.
      operationId: dns.resourceRecordSets.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceRecordSet'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: type
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: resource_record_sets
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: Deletes a previously created ResourceRecordSet.
      operationId: dns.resourceRecordSets.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceRecordSetsDeleteResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: path
          name: name
          required: true
          schema:
            type: string
        - in: path
          name: type
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: resource_record_sets
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/dns/v1/projects/{project}/managedZones/{managedZone}/rrsets':
    parameters: *ref_1
    post:
      description: Creates a new ResourceRecordSet.
      operationId: dns.resourceRecordSets.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceRecordSet'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceRecordSet'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: resource_record_sets
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Enumerates ResourceRecordSets that you have created but not yet deleted.
      operationId: dns.resourceRecordSets.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceRecordSetsListResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
      x-stackQL-resource: resource_record_sets
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.rrsets
  '/dns/v1/projects/{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}':
    parameters: *ref_1
    get:
      description: Fetches the representation of an existing DnsKey.
      operationId: dns.dnsKeys.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsKey'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: path
          name: dnsKeyId
          required: true
          schema:
            type: string
        - in: query
          name: digestType
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: dns_keys
      x-stackQL-method: get
      x-stackQL-verb: select
  '/dns/v1/projects/{project}/managedZones/{managedZone}/dnsKeys':
    parameters: *ref_1
    get:
      description: Enumerates DnsKeys to a ResourceRecordSet collection.
      operationId: dns.dnsKeys.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DnsKeysListResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: managedZone
          required: true
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
        - in: query
          name: digestType
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: dns_keys
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.dnsKeys
  '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}':
    parameters: *ref_1
    get:
      description: Fetches the representation of an existing Response Policy Rule.
      operationId: dns.responsePolicyRules.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePolicyRule'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicy
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicyRule
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: response_policy_rules
      x-stackQL-method: get
      x-stackQL-verb: select
    patch:
      description: Applies a partial update to an existing Response Policy Rule.
      operationId: dns.responsePolicyRules.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponsePolicyRule'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePolicyRulesPatchResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicy
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicyRule
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: response_policy_rules
      x-stackQL-method: patch
      x-stackQL-verb: exec
    delete:
      description: Deletes a previously created Response Policy Rule.
      operationId: dns.responsePolicyRules.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicy
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicyRule
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: response_policy_rules
      x-stackQL-method: delete
      x-stackQL-verb: delete
    put:
      description: Updates an existing Response Policy Rule.
      operationId: dns.responsePolicyRules.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponsePolicyRule'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePolicyRulesUpdateResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicy
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicyRule
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: response_policy_rules
      x-stackQL-method: update
      x-stackQL-verb: exec
  '/dns/v1/projects/{project}/responsePolicies/{responsePolicy}/rules':
    parameters: *ref_1
    get:
      description: Enumerates all Response Policy Rules associated with a project.
      operationId: dns.responsePolicyRules.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePolicyRulesListResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicy
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: response_policy_rules
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.responsePolicyRules
    post:
      description: Creates a new Response Policy Rule.
      operationId: dns.responsePolicyRules.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResponsePolicyRule'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponsePolicyRule'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: responsePolicy
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: response_policy_rules
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/dns/v1/projects/{project}/policies':
    parameters: *ref_1
    get:
      description: Enumerates all Policies associated with a project.
      operationId: dns.policies.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoliciesListResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: maxResults
          schema:
            type: integer
      x-stackQL-resource: policies
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.policies
    post:
      description: Creates a new Policy.
      operationId: dns.policies.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/dns/v1/projects/{project}/policies/{policy}':
    parameters: *ref_1
    get:
      description: Fetches the representation of an existing Policy.
      operationId: dns.policies.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: policy
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-method: get
      x-stackQL-verb: select
    put:
      description: Updates an existing Policy.
      operationId: dns.policies.update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoliciesUpdateResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: policy
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-method: update
      x-stackQL-verb: exec
    patch:
      description: Applies a partial update to an existing Policy.
      operationId: dns.policies.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policy'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PoliciesPatchResponse'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: policy
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-method: patch
      x-stackQL-verb: exec
    delete:
      description: Deletes a previously created Policy. Fails if the policy is still being referenced by a network.
      operationId: dns.policies.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '204':
          description: No Content
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: path
          name: policy
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: policies
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/dns/v1/projects/{project}':
    parameters: *ref_1
    get:
      description: Fetches the representation of an existing Project.
      operationId: dns.projects.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform.read-only'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readonly'
        - Oauth2:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
          Oauth2c:
            - 'https://www.googleapis.com/auth/ndev.clouddns.readwrite'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      parameters:
        - in: path
          name: project
          required: true
          schema:
            type: string
        - in: query
          name: clientOperationId
          schema:
            type: string
      x-stackQL-resource: projects
      x-stackQL-method: get
      x-stackQL-verb: select
