openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Cloud Life Sciences API
  description: 'Cloud Life Sciences is a suite of services and tools for managing, processing, and transforming life sciences data.'
  version: v2beta
  x-discovery-doc-revision: '20230818'
  x-generated-date: '2023-09-01'
externalDocs:
  url: 'https://cloud.google.com/life-sciences'
servers:
  - url: 'https://lifesciences.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    Network:
      description: VM networking options.
      id: Network
      properties:
        subnetwork:
          type: string
          description: 'If the specified network is configured for custom subnet creation, the name of the subnetwork to attach the instance to must be specified here. The value is prefixed with `regions/*/subnetworks/` unless it contains a `/`, in which case it is assumed to be a fully specified subnetwork resource URL. If the `*` character appears in the value, it is replaced with the region that the virtual machine has been allocated in.'
        network:
          description: 'The network name to attach the VM''s network interface to. The value will be prefixed with `global/networks/` unless it contains a `/`, in which case it is assumed to be a fully specified network resource URL. If unspecified, the global default network is used.'
          type: string
        usePrivateAddress:
          type: boolean
          description: 'If set to true, do not attach a public IP address to the VM. Note that without a public IP address, additional configuration is required to allow the VM to access Google services. See https://cloud.google.com/vpc/docs/configure-private-google-access for more information.'
      type: object
    Empty:
      properties: {}
      id: Empty
      type: object
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
    Volume:
      description: 'Carries information about storage that can be attached to a VM. Specify either `Volume` or `Disk`, but not both.'
      id: Volume
      properties:
        nfsMount:
          $ref: '#/components/schemas/NFSMount'
          description: Configuration for an NFS mount.
        existingDisk:
          $ref: '#/components/schemas/ExistingDisk'
          description: Configuration for a existing disk.
        persistentDisk:
          description: Configuration for a persistent disk.
          $ref: '#/components/schemas/PersistentDisk'
        volume:
          type: string
          description: A user-supplied name for the volume. Used when mounting the volume into `Actions`. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.
      type: object
    Action:
      properties:
        labels:
          description: 'Labels to associate with the action. This field is provided to assist workflow engine authors in identifying actions (for example, to indicate what sort of action they perform, such as localization or debugging). They are returned in the operation metadata, but are otherwise ignored.'
          additionalProperties:
            type: string
          type: object
        disableStandardErrorCapture:
          description: A small portion of the container's standard error stream is typically captured and returned inside the `ContainerStoppedEvent`. Setting this flag disables this functionality.
          type: boolean
        encryptedEnvironment:
          $ref: '#/components/schemas/Secret'
          description: 'The encrypted environment to pass into the container. This environment is merged with values specified in the google.cloud.lifesciences.v2beta.Pipeline message, overwriting any duplicate values. The secret must decrypt to a JSON-encoded dictionary where key-value pairs serve as environment variable names and their values. The decoded environment variables can overwrite the values specified by the `environment` field.'
        mounts:
          description: 'A list of mounts to make available to the action. In addition to the values specified here, every action has a special virtual disk mounted under `/google` that contains log files and other operational components. - /google/logs All logs written during the pipeline execution. - /google/logs/output The combined standard output and standard error of all actions run as part of the pipeline execution. - /google/logs/action/*/stdout The complete contents of each individual action''s standard output. - /google/logs/action/*/stderr The complete contents of each individual action''s standard error output. '
          type: array
          items:
            $ref: '#/components/schemas/Mount'
        blockExternalNetwork:
          type: boolean
          description: Prevents the container from accessing the external network.
        pidNamespace:
          type: string
          description: 'An optional identifier for a PID namespace to run the action inside. Multiple actions should use the same string to share a namespace. If unspecified, a separate isolated namespace is used.'
        credentials:
          description: 'If the specified image is hosted on a private registry other than Google Container Registry, the credentials required to pull the image must be specified here as an encrypted secret. The secret must decrypt to a JSON-encoded dictionary containing both `username` and `password` keys.'
          $ref: '#/components/schemas/Secret'
        portMappings:
          description: 'A map of containers to host port mappings for this container. If the container already specifies exposed ports, use the `PUBLISH_EXPOSED_PORTS` flag instead. The host port number must be less than 65536. If it is zero, an unused random port is assigned. To determine the resulting port number, consult the `ContainerStartedEvent` in the operation metadata.'
          additionalProperties:
            type: integer
            format: int32
          type: object
        alwaysRun:
          type: boolean
          description: 'By default, after an action fails, no further actions are run. This flag indicates that this action must be run even if the pipeline has already failed. This is useful for actions that copy output files off of the VM or for debugging. Note that no actions will be run if image prefetching fails.'
        imageUri:
          type: string
          description: 'Required. The URI to pull the container image from. Note that all images referenced by actions in the pipeline are pulled before the first action runs. If multiple actions reference the same image, it is only pulled once, ensuring that the same image is used for all actions in a single pipeline. The image URI can be either a complete host and image specification (e.g., quay.io/biocontainers/samtools), a library and image name (e.g., google/cloud-sdk) or a bare image name (''bash'') to pull from the default library. No schema is required in any of these cases. If the specified image is not public, the service account specified for the Virtual Machine must have access to pull the images from GCR, or appropriate credentials must be specified in the google.cloud.lifesciences.v2beta.Action.credentials field.'
        timeout:
          type: string
          description: 'The maximum amount of time to give the action to complete. If the action fails to complete before the timeout, it will be terminated and the exit status will be non-zero. The pipeline will continue or terminate based on the rules defined by the `ALWAYS_RUN` and `IGNORE_EXIT_STATUS` flags.'
          format: google-duration
        commands:
          items:
            type: string
          description: 'If specified, overrides the `CMD` specified in the container. If the container also has an `ENTRYPOINT` the values are used as entrypoint arguments. Otherwise, they are used as a command and arguments to run inside the container.'
          type: array
        publishExposedPorts:
          type: boolean
          description: 'Exposes all ports specified by `EXPOSE` statements in the container. To discover the host side port numbers, consult the `ACTION_STARTED` event in the operation metadata.'
        enableFuse:
          description: 'Enable access to the FUSE device for this action. Filesystems can then be mounted into disks shared with other actions. The other actions do not need the `enable_fuse` flag to access the mounted filesystem. This has the effect of causing the container to be executed with `CAP_SYS_ADMIN` and exposes `/dev/fuse` to the container, so use it only for containers you trust.'
          type: boolean
        entrypoint:
          type: string
          description: 'If specified, overrides the `ENTRYPOINT` specified in the container.'
        environment:
          type: object
          additionalProperties:
            type: string
          description: 'The environment to pass into the container. This environment is merged with values specified in the google.cloud.lifesciences.v2beta.Pipeline message, overwriting any duplicate values. In addition to the values passed here, a few other values are automatically injected into the environment. These cannot be hidden or overwritten. `GOOGLE_PIPELINE_FAILED` will be set to "1" if the pipeline failed because an action has exited with a non-zero status (and did not have the `IGNORE_EXIT_STATUS` flag set). This can be used to determine if additional debug or logging actions should execute. `GOOGLE_LAST_EXIT_STATUS` will be set to the exit status of the last non-background action that executed. This can be used by workflow engine authors to determine whether an individual action has succeeded or failed.'
        runInBackground:
          description: This flag allows an action to continue running in the background while executing subsequent actions. This is useful to provide services to other actions (or to provide debugging support tools like SSH servers).
          type: boolean
        disableImagePrefetch:
          type: boolean
          description: 'All container images are typically downloaded before any actions are executed. This helps prevent typos in URIs or issues like lack of disk space from wasting large amounts of compute resources. If set, this flag prevents the worker from downloading the image until just before the action is executed.'
        containerName:
          type: string
          description: 'An optional name for the container. The container hostname will be set to this name, making it useful for inter-container communication. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.'
        ignoreExitStatus:
          description: 'Normally, a non-zero exit status causes the pipeline to fail. This flag allows execution of other actions to continue instead.'
          type: boolean
      description: Specifies a single action that runs a Docker container.
      type: object
      id: Action
    Resources:
      type: object
      id: Resources
      description: The system resources for the pipeline run. At least one zone or region must be specified or the pipeline run will fail.
      properties:
        zones:
          type: array
          description: 'The list of zones allowed for VM allocation. If set, the `regions` field must not be set.'
          items:
            type: string
        virtualMachine:
          $ref: '#/components/schemas/VirtualMachine'
          description: The virtual machine specification.
        regions:
          description: 'The list of regions allowed for VM allocation. If set, the `zones` field must not be set.'
          type: array
          items:
            type: string
    ExistingDisk:
      type: object
      id: ExistingDisk
      description: Configuration for an existing disk to be attached to the VM.
      properties:
        disk:
          description: 'If `disk` contains slashes, the Cloud Life Sciences API assumes that it is a complete URL for the disk. If `disk` does not contain slashes, the Cloud Life Sciences API assumes that the disk is a zonal disk and a URL will be generated of the form `zones//disks/`, where `` is the zone in which the instance is allocated. The disk must be ext4 formatted. If all `Mount` references to this disk have the `read_only` flag set to true, the disk will be attached in `read-only` mode and can be shared with other instances. Otherwise, the disk will be available for writing but cannot be shared.'
          type: string
    Secret:
      type: object
      id: Secret
      description: Holds encrypted information that is only decrypted and stored in RAM by the worker VM when running the pipeline.
      properties:
        cipherText:
          description: The value of the cipherText response from the `encrypt` method. This field is intentionally unaudited.
          type: string
        keyName:
          type: string
          description: The name of the Cloud KMS key that will be used to decrypt the secret value. The VM service account must have the required permissions and authentication scopes to invoke the `decrypt` method on the specified key.
    PullStartedEvent:
      properties:
        imageUri:
          description: The URI of the image that was pulled.
          type: string
      type: object
      description: An event generated when the worker starts pulling an image.
      id: PullStartedEvent
    Event:
      description: Carries information about events that occur during pipeline execution.
      type: object
      id: Event
      properties:
        containerStarted:
          $ref: '#/components/schemas/ContainerStartedEvent'
          description: See google.cloud.lifesciences.v2beta.ContainerStartedEvent.
        delayed:
          $ref: '#/components/schemas/DelayedEvent'
          description: See google.cloud.lifesciences.v2beta.DelayedEvent.
        timestamp:
          type: string
          format: google-datetime
          description: The time at which the event occurred.
        containerKilled:
          $ref: '#/components/schemas/ContainerKilledEvent'
          description: See google.cloud.lifesciences.v2beta.ContainerKilledEvent.
        unexpectedExitStatus:
          description: See google.cloud.lifesciences.v2beta.UnexpectedExitStatusEvent.
          $ref: '#/components/schemas/UnexpectedExitStatusEvent'
        description:
          type: string
          description: A human-readable description of the event. Note that these strings can change at any time without notice. Any application logic must use the information in the `details` field.
        workerAssigned:
          $ref: '#/components/schemas/WorkerAssignedEvent'
          description: See google.cloud.lifesciences.v2beta.WorkerAssignedEvent.
        pullStopped:
          $ref: '#/components/schemas/PullStoppedEvent'
          description: See google.cloud.lifesciences.v2beta.PullStoppedEvent.
        workerReleased:
          description: See google.cloud.lifesciences.v2beta.WorkerReleasedEvent.
          $ref: '#/components/schemas/WorkerReleasedEvent'
        containerStopped:
          $ref: '#/components/schemas/ContainerStoppedEvent'
          description: See google.cloud.lifesciences.v2beta.ContainerStoppedEvent.
        failed:
          description: See google.cloud.lifesciences.v2beta.FailedEvent.
          $ref: '#/components/schemas/FailedEvent'
        pullStarted:
          $ref: '#/components/schemas/PullStartedEvent'
          description: See google.cloud.lifesciences.v2beta.PullStartedEvent.
    Operation:
      description: This resource represents a long-running operation that is the result of a network API call.
      id: Operation
      type: object
      properties:
        done:
          type: boolean
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
        error:
          $ref: '#/components/schemas/Status'
          description: The error result of the operation in case of failure or cancellation.
        response:
          description: An Empty object.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        metadata:
          type: object
          description: An Metadata object. This will always be returned with the Operation.
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        name:
          description: The server-assigned name for the operation. This may be passed to the other operation methods to retrieve information about the operation's status.
          type: string
    Status:
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      id: Status
      type: object
      properties:
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          type: array
        code:
          format: int32
          type: integer
          description: 'The status code, which should be an enum value of google.rpc.Code.'
        message:
          type: string
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
    Disk:
      properties:
        name:
          type: string
          description: A user-supplied name for the disk. Used when mounting the disk into actions. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.
        sourceImage:
          description: An optional image to put on the disk before attaching it to the VM.
          type: string
        type:
          description: 'The Compute Engine disk type. If unspecified, `pd-standard` is used.'
          type: string
        sizeGb:
          type: integer
          description: 'The size, in GB, of the disk to attach. If the size is not specified, a default is chosen to ensure reasonable I/O performance. If the disk type is specified as `local-ssd`, multiple local drives are automatically combined to provide the requested size. Note, however, that each physical SSD is 375GB in size, and no more than 8 drives can be attached to a single instance.'
          format: int32
      type: object
      id: Disk
      description: 'Carries information about a disk that can be attached to a VM. See https://cloud.google.com/compute/docs/disks/performance for more information about disk type, size, and performance considerations. Specify either `Volume` or `Disk`, but not both.'
    PullStoppedEvent:
      type: object
      properties:
        imageUri:
          description: The URI of the image that was pulled.
          type: string
      description: An event generated when the worker stops pulling an image.
      id: PullStoppedEvent
    VirtualMachine:
      description: Carries information about a Compute Engine VM resource.
      id: VirtualMachine
      type: object
      properties:
        enableStackdriverMonitoring:
          description: Whether Stackdriver monitoring should be enabled on the VM.
          type: boolean
        serviceAccount:
          description: The service account to install on the VM. This account does not need any permissions other than those required by the pipeline.
          $ref: '#/components/schemas/ServiceAccount'
        cpuPlatform:
          type: string
          description: 'The CPU platform to request. An instance based on a newer platform can be allocated, but never one with fewer capabilities. The value of this parameter must be a valid Compute Engine CPU platform name (such as "Intel Skylake"). This parameter is only useful for carefully optimized work loads where the CPU platform has a significant impact. For more information about the effect of this parameter, see https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.'
        accelerators:
          items:
            $ref: '#/components/schemas/Accelerator'
          description: The list of accelerators to attach to the VM.
          type: array
        disks:
          description: 'The list of disks to create and attach to the VM. Specify either the `volumes[]` field or the `disks[]` field, but not both.'
          items:
            $ref: '#/components/schemas/Disk'
          type: array
        labels:
          type: object
          description: 'Optional set of labels to apply to the VM and any attached disk resources. These labels must adhere to the [name and value restrictions](https://cloud.google.com/compute/docs/labeling-resources) on VM labels imposed by Compute Engine. Labels keys with the prefix ''google-'' are reserved for use by Google. Labels applied at creation time to the VM. Applied on a best-effort basis to attached disk resources shortly after VM creation.'
          additionalProperties:
            type: string
        bootImage:
          type: string
          description: 'The host operating system image to use. Currently, only Container-Optimized OS images can be used. The default value is `projects/cos-cloud/global/images/family/cos-stable`, which selects the latest stable release of Container-Optimized OS. This option is provided to allow testing against the beta release of the operating system to ensure that the new version does not interact negatively with production pipelines. To test a pipeline against the beta release of Container-Optimized OS, use the value `projects/cos-cloud/global/images/family/cos-beta`.'
        reservation:
          type: string
          description: 'If specified, the VM will only be allocated inside the matching reservation. It will fail if the VM parameters don''t match the reservation.'
        bootDiskSizeGb:
          type: integer
          format: int32
          description: 'The size of the boot disk, in GB. The boot disk must be large enough to accommodate all of the Docker images from each action in the pipeline at the same time. If not specified, a small but reasonable default value is used.'
        dockerCacheImages:
          items:
            type: string
          type: array
          description: The Compute Engine Disk Images to use as a Docker cache. The disks will be mounted into the Docker folder in a way that the images present in the cache will not need to be pulled. The digests of the cached images must match those of the tags used or the latest version will still be pulled. The root directory of the ext4 image must contain `image` and `overlay2` directories copied from the Docker directory of a VM where the desired Docker images have already been pulled. Any images pulled that are not cached will be stored on the first cache disk instead of the boot disk. Only a single image is supported.
        preemptible:
          description: 'If true, allocate a preemptible VM.'
          type: boolean
        nvidiaDriverVersion:
          description: 'The NVIDIA driver version to use when attaching an NVIDIA GPU accelerator. The version specified here must be compatible with the GPU libraries contained in the container being executed, and must be one of the drivers hosted in the `nvidia-drivers-us-public` bucket on Google Cloud Storage.'
          type: string
          deprecated: true
        volumes:
          description: 'The list of disks and other storage to create or attach to the VM. Specify either the `volumes[]` field or the `disks[]` field, but not both.'
          items:
            $ref: '#/components/schemas/Volume'
          type: array
        machineType:
          description: 'Required. The machine type of the virtual machine to create. Must be the short name of a standard machine type (such as "n1-standard-1") or a custom machine type (such as "custom-1-4096", where "1" indicates the number of vCPUs and "4096" indicates the memory in MB). See [Creating an instance with a custom machine type](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) for more specifications on creating a custom machine type.'
          type: string
        network:
          $ref: '#/components/schemas/Network'
          description: The VM network configuration.
    Pipeline:
      description: 'Specifies a series of actions to execute, expressed as Docker containers.'
      id: Pipeline
      properties:
        timeout:
          description: 'The maximum amount of time to give the pipeline to complete. This includes the time spent waiting for a worker to be allocated. If the pipeline fails to complete before the timeout, it will be cancelled and the error code will be set to DEADLINE_EXCEEDED. If unspecified, it will default to 7 days.'
          type: string
          format: google-duration
        resources:
          $ref: '#/components/schemas/Resources'
          description: The resources required for execution.
        environment:
          additionalProperties:
            type: string
          description: The environment to pass into every action. Each action can also specify additional environment variables but cannot delete an entry from this map (though they can overwrite it with a different value).
          type: object
        encryptedEnvironment:
          $ref: '#/components/schemas/Secret'
          description: The encrypted environment to pass into every action. Each action can also specify its own encrypted environment. The secret must decrypt to a JSON-encoded dictionary where key-value pairs serve as environment variable names and their values. The decoded environment variables can overwrite the values specified by the `environment` field.
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
          description: 'The list of actions to execute, in the order they are specified.'
      type: object
    CancelOperationRequest:
      type: object
      id: CancelOperationRequest
      description: The request message for Operations.CancelOperation.
      properties: {}
    WorkerReleasedEvent:
      type: object
      properties:
        instance:
          type: string
          description: The worker's instance name.
        zone:
          type: string
          description: The zone the worker was running in.
      description: An event generated when the worker VM that was assigned to the pipeline has been released (deleted).
      id: WorkerReleasedEvent
    RunPipelineResponse:
      description: 'The response to the RunPipeline method, returned in the operation''s result field on success.'
      type: object
      properties: {}
      id: RunPipelineResponse
    RunPipelineRequest:
      id: RunPipelineRequest
      description: The arguments to the `RunPipeline` method. The requesting user must have the `iam.serviceAccounts.actAs` permission for the Cloud Life Sciences service account or the request will fail.
      type: object
      properties:
        pubSubTopic:
          description: The name of an existing Pub/Sub topic. The server will publish messages to this topic whenever the status of the operation changes. The Life Sciences Service Agent account must have publisher permissions to the specified topic or notifications will not be sent.
          type: string
        pipeline:
          $ref: '#/components/schemas/Pipeline'
          description: Required. The description of the pipeline to run.
        labels:
          description: 'User-defined labels to associate with the returned operation. These labels are not propagated to any Google Cloud Platform resources used by the operation, and can be modified at any time. To associate labels with resources created while executing the operation, see the appropriate resource message (for example, `VirtualMachine`).'
          additionalProperties:
            type: string
          type: object
    ContainerKilledEvent:
      properties:
        actionId:
          type: integer
          description: The numeric ID of the action that started the container.
          format: int32
      description: 'An event generated when a container is forcibly terminated by the worker. Currently, this only occurs when the container outlives the timeout specified by the user.'
      type: object
      id: ContainerKilledEvent
    UnexpectedExitStatusEvent:
      type: object
      properties:
        actionId:
          description: The numeric ID of the action that started the container.
          type: integer
          format: int32
        exitStatus:
          format: int32
          description: The exit status of the container.
          type: integer
      description: 'An event generated when the execution of a container results in a non-zero exit status that was not otherwise ignored. Execution will continue, but only actions that are flagged as `ALWAYS_RUN` will be executed. Other actions will be skipped.'
      id: UnexpectedExitStatusEvent
    Location:
      type: object
      properties:
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        displayName:
          type: string
          description: 'The friendly name for this location, typically a nearby city name. For example, "Tokyo".'
        name:
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
          type: string
        metadata:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
          description: Service-specific metadata. For example the available capacity at the given location.
        labels:
          type: object
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
          additionalProperties:
            type: string
      id: Location
      description: A resource that represents a Google Cloud location.
    Metadata:
      properties:
        events:
          type: array
          description: The list of events that have happened so far during the execution of this operation.
          items:
            $ref: '#/components/schemas/Event'
        pipeline:
          description: The pipeline this operation represents.
          $ref: '#/components/schemas/Pipeline'
        labels:
          description: The user-defined labels associated with this operation.
          type: object
          additionalProperties:
            type: string
        createTime:
          format: google-datetime
          description: The time at which the operation was created by the API.
          type: string
        endTime:
          type: string
          description: The time at which execution was completed and resources were cleaned up.
          format: google-datetime
        pubSubTopic:
          type: string
          description: The name of the Cloud Pub/Sub topic where notifications of operation status changes are sent.
        startTime:
          format: google-datetime
          description: The first time at which resources were allocated to execute the pipeline.
          type: string
      id: Metadata
      description: Carries information about the pipeline execution that is returned in the long running operation's metadata field.
      type: object
    FailedEvent:
      type: object
      description: An event generated when the execution of a pipeline has failed. Note that other events can continue to occur after this event.
      id: FailedEvent
      properties:
        code:
          description: The Google standard error code that best describes this failure.
          enumDescriptions:
            - 'Not an error; returned on success. HTTP Mapping: 200 OK'
            - 'The operation was cancelled, typically by the caller. HTTP Mapping: 499 Client Closed Request'
            - 'Unknown error. For example, this error may be returned when a `Status` value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error. HTTP Mapping: 500 Internal Server Error'
            - 'The client specified an invalid argument. Note that this differs from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name). HTTP Mapping: 400 Bad Request'
            - 'The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire. HTTP Mapping: 504 Gateway Timeout'
            - 'Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If a request is denied for some users within a class of users, such as user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found'
            - 'The entity that a client attempted to create (e.g., file or directory) already exists. HTTP Mapping: 409 Conflict'
            - 'The caller does not have permission to execute the specified operation. `PERMISSION_DENIED` must not be used for rejections caused by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those errors). `PERMISSION_DENIED` must not be used if the caller can not be identified (use `UNAUTHENTICATED` instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden'
            - 'The request does not have valid authentication credentials for the operation. HTTP Mapping: 401 Unauthorized'
            - 'Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space. HTTP Mapping: 429 Too Many Requests'
            - 'The operation was rejected because the system is not in a state required for the operation''s execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the failing call. (b) Use `ABORTED` if the client should retry at a higher level. For example, when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until the system state has been explicitly fixed. For example, if an "rmdir" fails because the directory is non-empty, `FAILED_PRECONDITION` should be returned since the client should not retry unless the files are deleted from the directory. HTTP Mapping: 400 Bad Request'
            - 'The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict'
            - 'The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate `INVALID_ARGUMENT` if asked to read at an offset that is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked to read from an offset past the current file size. There is a fair bit of overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific error) when it applies so that callers who are iterating through a space can easily look for an `OUT_OF_RANGE` error to detect when they are done. HTTP Mapping: 400 Bad Request'
            - 'The operation is not implemented or is not supported/enabled in this service. HTTP Mapping: 501 Not Implemented'
            - 'Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors. HTTP Mapping: 500 Internal Server Error'
            - 'The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations. See the guidelines above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable'
            - 'Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server Error'
          enum:
            - OK
            - CANCELLED
            - UNKNOWN
            - INVALID_ARGUMENT
            - DEADLINE_EXCEEDED
            - NOT_FOUND
            - ALREADY_EXISTS
            - PERMISSION_DENIED
            - UNAUTHENTICATED
            - RESOURCE_EXHAUSTED
            - FAILED_PRECONDITION
            - ABORTED
            - OUT_OF_RANGE
            - UNIMPLEMENTED
            - INTERNAL
            - UNAVAILABLE
            - DATA_LOSS
          type: string
        cause:
          description: The human-readable description of the cause of the failure.
          type: string
    WorkerAssignedEvent:
      type: object
      properties:
        zone:
          type: string
          description: The zone the worker is running in.
        instance:
          description: The worker's instance name.
          type: string
        machineType:
          type: string
          description: The machine type that was assigned for the worker.
      description: An event generated after a worker VM has been assigned to run the pipeline.
      id: WorkerAssignedEvent
    ServiceAccount:
      id: ServiceAccount
      type: object
      description: Carries information about a Google Cloud service account.
      properties:
        email:
          type: string
          description: 'Email address of the service account. If not specified, the default Compute Engine service account for the project will be used.'
        scopes:
          description: 'List of scopes to be enabled for this service account on the VM, in addition to the cloud-platform API scope that will be added by default.'
          items:
            type: string
          type: array
    NFSMount:
      type: object
      properties:
        target:
          type: string
          description: 'A target NFS mount. The target must be specified as `address:/mount".'
      description: Configuration for an `NFSMount` to be attached to the VM.
      id: NFSMount
    DelayedEvent:
      description: An event generated whenever a resource limitation or transient error delays execution of a pipeline that was otherwise ready to run.
      id: DelayedEvent
      type: object
      properties:
        cause:
          type: string
          description: A textual description of the cause of the delay. The string can change without notice because it is often generated by another service (such as Compute Engine).
        metrics:
          type: array
          items:
            type: string
          description: 'If the delay was caused by a resource shortage, this field lists the Compute Engine metrics that are preventing this operation from running (for example, `CPUS` or `INSTANCES`). If the particular metric is not known, a single `UNKNOWN` metric will be present.'
    ContainerStartedEvent:
      type: object
      properties:
        ipAddress:
          type: string
          description: 'The public IP address that can be used to connect to the container. This field is only populated when at least one port mapping is present. If the instance was created with a private address, this field will be empty even if port mappings exist.'
        portMappings:
          additionalProperties:
            format: int32
            type: integer
          description: The container-to-host port mappings installed for this container. This set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag as well as any specified in the `Action` definition.
          type: object
        actionId:
          description: The numeric ID of the action that started this container.
          format: int32
          type: integer
      id: ContainerStartedEvent
      description: An event generated when a container starts.
    ContainerStoppedEvent:
      properties:
        stderr:
          description: 'The tail end of any content written to standard error by the container. If the content emits large amounts of debugging noise or contains sensitive information, you can prevent the content from being printed by setting the `DISABLE_STANDARD_ERROR_CAPTURE` flag. Note that only a small amount of the end of the stream is captured here. The entire stream is stored in the `/google/logs` directory mounted into each action, and can be copied off the machine as described elsewhere.'
          type: string
        exitStatus:
          description: The exit status of the container.
          type: integer
          format: int32
        actionId:
          description: The numeric ID of the action that started this container.
          type: integer
          format: int32
      type: object
      id: ContainerStoppedEvent
      description: An event generated when a container exits.
    ListLocationsResponse:
      description: The response message for Locations.ListLocations.
      id: ListLocationsResponse
      properties:
        locations:
          description: A list of locations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/Location'
          type: array
        nextPageToken:
          description: The standard List next-page token.
          type: string
      type: object
    Mount:
      type: object
      properties:
        disk:
          description: 'The name of the disk to mount, as specified in the resources section.'
          type: string
        readOnly:
          type: boolean
          description: 'If true, the disk is mounted read-only inside the container.'
        path:
          type: string
          description: The path to mount the disk inside the container.
      description: Carries information about a particular disk mount inside a container.
      id: Mount
    PersistentDisk:
      type: object
      properties:
        sizeGb:
          type: integer
          format: int32
          description: 'The size, in GB, of the disk to attach. If the size is not specified, a default is chosen to ensure reasonable I/O performance. If the disk type is specified as `local-ssd`, multiple local drives are automatically combined to provide the requested size. Note, however, that each physical SSD is 375GB in size, and no more than 8 drives can be attached to a single instance.'
        type:
          description: 'The Compute Engine disk type. If unspecified, `pd-standard` is used.'
          type: string
        sourceImage:
          description: An image to put on the disk before attaching it to the VM.
          type: string
      description: 'Configuration for a persistent disk to be attached to the VM. See https://cloud.google.com/compute/docs/disks/performance for more information about disk type, size, and performance considerations.'
      id: PersistentDisk
    ListOperationsResponse:
      id: ListOperationsResponse
      description: The response message for Operations.ListOperations.
      properties:
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          description: A list of operations that matches the specified filter in the request.
          type: array
        nextPageToken:
          description: The standard List next-page token.
          type: string
      type: object
    Accelerator:
      description: Carries information about an accelerator that can be attached to a VM.
      id: Accelerator
      properties:
        type:
          description: 'The accelerator type string (for example, "nvidia-tesla-k80"). Only NVIDIA GPU accelerators are currently supported. If an NVIDIA GPU is attached, the required runtime libraries will be made available to all containers under `/usr/local/nvidia`. The driver version to install must be specified using the NVIDIA driver version parameter on the virtual machine specification. Note that attaching a GPU increases the worker VM startup time by a few minutes.'
          type: string
        count:
          format: int64
          description: How many accelerators of this type to attach.
          type: string
      type: object
  parameters:
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
  x-stackQL-resources:
    pipelines:
      id: google.lifesciences.pipelines
      name: pipelines
      title: Pipelines
      methods:
        run:
          operation:
            $ref: '#/paths/~1v2beta~1projects~1{projectsId}~1locations~1{locationsId}~1pipelines:run/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    operations:
      id: google.lifesciences.operations
      name: operations
      title: Operations
      methods:
        cancel:
          operation:
            $ref: '#/paths/~1v2beta~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v2beta~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        _list:
          operation:
            $ref: '#/paths/~1v2beta~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v2beta~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        delete: []
    locations:
      id: google.lifesciences.locations
      name: locations
      title: Locations
      methods:
        get:
          operation:
            $ref: '#/paths/~1v2beta~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v2beta~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        _list:
          operation:
            $ref: '#/paths/~1v2beta~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        delete: []
paths:
  '/v2beta/projects/{projectsId}/locations/{locationsId}/pipelines:run':
    parameters: &ref_1
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/access_token'
    post:
      description: 'Runs a pipeline. The returned Operation''s metadata field will contain a google.cloud.lifesciences.v2beta.Metadata object describing the status of the pipeline execution. The response field will contain a google.cloud.lifesciences.v2beta.RunPipelineResponse object if the pipeline completes successfully. **Note:** Before you can use this method, the *Life Sciences Service Agent* must have access to your project. This is done automatically when the Cloud Life Sciences API is first enabled, but if you delete this permission you must disable and re-enable the API to grant the Life Sciences Service Agent the required permissions. Authorization requires the following [Google IAM](https://cloud.google.com/iam/) permission: * `lifesciences.workflows.run`'
      operationId: lifesciences.projects.locations.pipelines.run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunPipelineRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: pipelines
      x-stackQL-method: run
      x-stackQL-verb: exec
  '/v2beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel':
    parameters: *ref_1
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `lifesciences.operations.cancel`'
      operationId: lifesciences.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: cancel
      x-stackQL-verb: exec
  '/v2beta/projects/{projectsId}/locations/{locationsId}/operations':
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `lifesciences.operations.list`'
      operationId: lifesciences.projects.locations.operations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.operations
  '/v2beta/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}':
    parameters: *ref_1
    get:
      description: 'Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `lifesciences.operations.get`'
      operationId: lifesciences.projects.locations.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v2beta/projects/{projectsId}/locations/{locationsId}':
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: lifesciences.projects.locations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v2beta/projects/{projectsId}/locations':
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: lifesciences.projects.locations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.locations
