openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Cloud TPU API
  description: TPU API provides customers with access to Google TPU technology.
  version: v2
  x-discovery-doc-revision: '20241025'
  x-generated-date: '2024-11-06'
externalDocs:
  url: https://cloud.google.com/tpu/
servers:
  - url: https://tpu.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    ListLocationsResponse:
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      type: object
      properties:
        locations:
          description: >-
            A list of locations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Location:
      id: Location
      description: A resource that represents a Google Cloud location.
      type: object
      properties:
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            `"projects/example-project/locations/us-east1"`
          type: string
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        labels:
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"}
          type: object
          additionalProperties:
            type: string
        metadata:
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    ListOperationsResponse:
      id: ListOperationsResponse
      description: The response message for Operations.ListOperations.
      type: object
      properties:
        operations:
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Operation:
      id: Operation
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      type: object
      properties:
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
          type: string
        metadata:
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
          type: boolean
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/Status'
        response:
          description: >-
            The normal, successful response of the operation. If the original
            method returns no data on success, such as `Delete`, the response is
            `google.protobuf.Empty`. If the original method is standard
            `Get`/`Create`/`Update`, the response should be the resource. For
            other methods, the response should have the type `XxxResponse`,
            where `Xxx` is the original method name. For example, if the
            original method name is `TakeSnapshot()`, the inferred response type
            is `TakeSnapshotResponse`.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    Status:
      id: Status
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      type: object
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    ListNodesResponse:
      id: ListNodesResponse
      description: Response for ListNodes.
      type: object
      properties:
        nodes:
          description: The listed nodes.
          type: array
          items:
            $ref: '#/components/schemas/Node'
        nextPageToken:
          description: The next page token or empty if none.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    Node:
      id: Node
      description: A TPU instance.
      type: object
      properties:
        name:
          description: Output only. Immutable. The name of the TPU.
          readOnly: true
          type: string
        description:
          description: The user-supplied description of the TPU. Maximum of 512 characters.
          type: string
        acceleratorType:
          description: >-
            Optional. The type of hardware accelerators associated with this
            node.
          type: string
        state:
          description: Output only. The current state for the TPU Node.
          readOnly: true
          type: string
          enumDescriptions:
            - TPU node state is not known/set.
            - TPU node is being created.
            - TPU node has been created.
            - TPU node is restarting.
            - TPU node is undergoing reimaging.
            - TPU node is being deleted.
            - >-
              TPU node is being repaired and may be unusable. Details can be
              found in the 'help_description' field.
            - TPU node is stopped.
            - TPU node is currently stopping.
            - TPU node is currently starting.
            - >-
              TPU node has been preempted. Only applies to Preemptible TPU
              Nodes.
            - >-
              TPU node has been terminated due to maintenance or has reached the
              end of its life cycle (for preemptible nodes).
            - TPU node is currently hiding.
            - TPU node has been hidden.
            - TPU node is currently unhiding.
            - TPU node has unknown state after a failed repair.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - READY
            - RESTARTING
            - REIMAGING
            - DELETING
            - REPAIRING
            - STOPPED
            - STOPPING
            - STARTING
            - PREEMPTED
            - TERMINATED
            - HIDING
            - HIDDEN
            - UNHIDING
            - UNKNOWN
        healthDescription:
          description: >-
            Output only. If this field is populated, it contains a description
            of why the TPU Node is unhealthy.
          readOnly: true
          type: string
        runtimeVersion:
          description: Required. The runtime version running in the Node.
          type: string
        networkConfig:
          description: Network configurations for the TPU node.
          $ref: '#/components/schemas/NetworkConfig'
        cidrBlock:
          description: >-
            The CIDR block that the TPU node will use when selecting an IP
            address. This CIDR block must be a /29 block; the Compute Engine
            networks API forbids a smaller block, and using a larger block would
            be wasteful (a node can only consume one IP address). Errors will
            occur if the CIDR block has already been used for a currently
            existing TPU node, the CIDR block conflicts with any subnetworks in
            the user's provided network, or the provided network is peered with
            another network that is using that CIDR block.
          type: string
        serviceAccount:
          description: >-
            The Google Cloud Platform Service Account to be used by the TPU node
            VMs. If None is specified, the default compute service account will
            be used.
          $ref: '#/components/schemas/ServiceAccount'
        createTime:
          description: Output only. The time when the node was created.
          readOnly: true
          type: string
          format: google-datetime
        schedulingConfig:
          description: The scheduling options for this node.
          $ref: '#/components/schemas/SchedulingConfig'
        networkEndpoints:
          description: >-
            Output only. The network endpoints where TPU workers can be accessed
            and sent work. It is recommended that runtime clients of the node
            reach out to the 0th entry in this map first.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/NetworkEndpoint'
        health:
          description: The health status of the TPU node.
          type: string
          enumDescriptions:
            - 'Health status is unknown: not initialized or failed to retrieve.'
            - The resource is healthy.
            - The resource is unresponsive.
            - The in-guest ML stack is unhealthy.
            - >-
              The node is under maintenance/priority boost caused rescheduling
              and will resume running once rescheduled.
          enum:
            - HEALTH_UNSPECIFIED
            - HEALTHY
            - TIMEOUT
            - UNHEALTHY_TENSORFLOW
            - UNHEALTHY_MAINTENANCE
        labels:
          description: Resource labels to represent user-provided metadata.
          type: object
          additionalProperties:
            type: string
        metadata:
          description: >-
            Custom metadata to apply to the TPU Node. Can set startup-script and
            shutdown-script
          type: object
          additionalProperties:
            type: string
        tags:
          description: >-
            Tags to apply to the TPU Node. Tags are used to identify valid
            sources or targets for network firewalls.
          type: array
          items:
            type: string
        id:
          description: Output only. The unique identifier for the TPU Node.
          readOnly: true
          type: string
          format: int64
        dataDisks:
          description: The additional data disks for the Node.
          type: array
          items:
            $ref: '#/components/schemas/AttachedDisk'
        apiVersion:
          description: Output only. The API version that created this Node.
          readOnly: true
          type: string
          enumDescriptions:
            - API version is unknown.
            - TPU API V1Alpha1 version.
            - TPU API V1 version.
            - TPU API V2Alpha1 version.
            - TPU API V2 version.
          enum:
            - API_VERSION_UNSPECIFIED
            - V1_ALPHA1
            - V1
            - V2_ALPHA1
            - V2
        symptoms:
          description: Output only. The Symptoms that have occurred to the TPU Node.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/Symptom'
        shieldedInstanceConfig:
          description: Shielded Instance options.
          $ref: '#/components/schemas/ShieldedInstanceConfig'
        acceleratorConfig:
          description: The AccleratorConfig for the TPU Node.
          $ref: '#/components/schemas/AcceleratorConfig'
        queuedResource:
          description: >-
            Output only. The qualified name of the QueuedResource that requested
            this Node.
          readOnly: true
          type: string
        multisliceNode:
          description: Output only. Whether the Node belongs to a Multislice group.
          readOnly: true
          type: boolean
    NetworkConfig:
      id: NetworkConfig
      description: Network related configurations.
      type: object
      properties:
        network:
          description: >-
            The name of the network for the TPU node. It must be a preexisting
            Google Compute Engine network. If none is provided, "default" will
            be used.
          type: string
        subnetwork:
          description: >-
            The name of the subnetwork for the TPU node. It must be a
            preexisting Google Compute Engine subnetwork. If none is provided,
            "default" will be used.
          type: string
        enableExternalIps:
          description: >-
            Indicates that external IP addresses would be associated with the
            TPU workers. If set to false, the specified subnetwork or network
            should have Private Google Access enabled.
          type: boolean
        canIpForward:
          description: >-
            Allows the TPU node to send and receive packets with non-matching
            destination or source IPs. This is required if you plan to use the
            TPU workers to forward routes.
          type: boolean
        queueCount:
          description: >-
            Optional. Specifies networking queue count for TPU VM instance's
            network interface.
          type: integer
          format: int32
    ServiceAccount:
      id: ServiceAccount
      description: A service account.
      type: object
      properties:
        email:
          description: >-
            Email address of the service account. If empty, default Compute
            service account will be used.
          type: string
        scope:
          description: >-
            The list of scopes to be made available for this service account. If
            empty, access to all Cloud APIs will be allowed.
          type: array
          items:
            type: string
    SchedulingConfig:
      id: SchedulingConfig
      description: Sets the scheduling options for this node.
      type: object
      properties:
        preemptible:
          description: Defines whether the node is preemptible.
          type: boolean
        reserved:
          description: Whether the node is created under a reservation.
          type: boolean
        spot:
          description: Optional. Defines whether the node is Spot VM.
          type: boolean
    NetworkEndpoint:
      id: NetworkEndpoint
      description: A network endpoint over which a TPU worker can be reached.
      type: object
      properties:
        ipAddress:
          description: The internal IP address of this network endpoint.
          type: string
        port:
          description: The port of this network endpoint.
          type: integer
          format: int32
        accessConfig:
          description: The access config for the TPU worker.
          $ref: '#/components/schemas/AccessConfig'
    AccessConfig:
      id: AccessConfig
      description: An access config attached to the TPU worker.
      type: object
      properties:
        externalIp:
          description: Output only. An external IP address associated with the TPU worker.
          readOnly: true
          type: string
    AttachedDisk:
      id: AttachedDisk
      description: 'A node-attached disk resource. Next ID: 8;'
      type: object
      properties:
        sourceDisk:
          description: >-
            Specifies the full path to an existing disk. For example:
            "projects/my-project/zones/us-central1-c/disks/my-disk".
          type: string
        mode:
          description: >-
            The mode in which to attach this disk. If not specified, the default
            is READ_WRITE mode. Only applicable to data_disks.
          type: string
          enumDescriptions:
            - The disk mode is not known/set.
            - >-
              Attaches the disk in read-write mode. Only one TPU node can attach
              a disk in read-write mode at a time.
            - >-
              Attaches the disk in read-only mode. Multiple TPU nodes can attach
              a disk in read-only mode at a time.
          enum:
            - DISK_MODE_UNSPECIFIED
            - READ_WRITE
            - READ_ONLY
    Symptom:
      id: Symptom
      description: A Symptom instance.
      type: object
      properties:
        createTime:
          description: Timestamp when the Symptom is created.
          type: string
          format: google-datetime
        symptomType:
          description: Type of the Symptom.
          type: string
          enumDescriptions:
            - Unspecified symptom.
            - TPU VM memory is low.
            - TPU runtime is out of memory.
            - TPU runtime execution has timed out.
            - >-
              TPU runtime fails to construct a mesh that recognizes each TPU
              device's neighbors.
            - TPU HBM is out of memory.
            - Abusive behaviors have been identified on the current project.
          enum:
            - SYMPTOM_TYPE_UNSPECIFIED
            - LOW_MEMORY
            - OUT_OF_MEMORY
            - EXECUTE_TIMED_OUT
            - MESH_BUILD_FAIL
            - HBM_OUT_OF_MEMORY
            - PROJECT_ABUSE
        details:
          description: Detailed information of the current Symptom.
          type: string
        workerId:
          description: A string used to uniquely distinguish a worker within a TPU node.
          type: string
    ShieldedInstanceConfig:
      id: ShieldedInstanceConfig
      description: A set of Shielded Instance options.
      type: object
      properties:
        enableSecureBoot:
          description: Defines whether the instance has Secure Boot enabled.
          type: boolean
    AcceleratorConfig:
      id: AcceleratorConfig
      description: A TPU accelerator configuration.
      type: object
      properties:
        type:
          description: Required. Type of TPU.
          type: string
          enumDescriptions:
            - Unspecified version.
            - TPU v2.
            - TPU v3.
            - TPU v4.
            - TPU v5lite pod.
            - TPU v5p
          enum:
            - TYPE_UNSPECIFIED
            - V2
            - V3
            - V4
            - V5LITE_POD
            - V5P
        topology:
          description: Required. Topology of TPU in chips.
          type: string
    StopNodeRequest:
      id: StopNodeRequest
      description: Request for StopNode.
      type: object
      properties: {}
    StartNodeRequest:
      id: StartNodeRequest
      description: Request for StartNode.
      type: object
      properties: {}
    ListQueuedResourcesResponse:
      id: ListQueuedResourcesResponse
      description: Response for ListQueuedResources.
      type: object
      properties:
        queuedResources:
          description: The listed queued resources.
          type: array
          items:
            $ref: '#/components/schemas/QueuedResource'
        nextPageToken:
          description: The next page token or empty if none.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    QueuedResource:
      id: QueuedResource
      description: >-
        A QueuedResource represents a request for resources that will be placed
        in a queue and fulfilled when the necessary resources are available.
      type: object
      properties:
        name:
          description: Output only. Immutable. The name of the QueuedResource.
          readOnly: true
          type: string
        createTime:
          description: Output only. The time when the QueuedResource was created.
          readOnly: true
          type: string
          format: google-datetime
        tpu:
          description: Optional. Defines a TPU resource.
          $ref: '#/components/schemas/Tpu'
        spot:
          description: Optional. The Spot tier.
          $ref: '#/components/schemas/Spot'
        guaranteed:
          description: Optional. The Guaranteed tier
          $ref: '#/components/schemas/Guaranteed'
        queueingPolicy:
          description: Optional. The queueing policy of the QueuedRequest.
          $ref: '#/components/schemas/QueueingPolicy'
        state:
          description: Output only. State of the QueuedResource request.
          readOnly: true
          $ref: '#/components/schemas/QueuedResourceState'
        reservationName:
          description: >-
            Optional. Name of the reservation in which the resource should be
            provisioned. Format:
            projects/{project}/locations/{zone}/reservations/{reservation}
          type: string
    Tpu:
      id: Tpu
      description: Details of the TPU resource(s) being requested.
      type: object
      properties:
        nodeSpec:
          description: Optional. The TPU node(s) being requested.
          type: array
          items:
            $ref: '#/components/schemas/NodeSpec'
    NodeSpec:
      id: NodeSpec
      description: >-
        Details of the TPU node(s) being requested. Users can request either a
        single node or multiple nodes. NodeSpec provides the specification for
        node(s) to be created.
      type: object
      properties:
        parent:
          description: Required. The parent resource name.
          type: string
        nodeId:
          description: >-
            Optional. The unqualified resource name. Should follow the
            `^[A-Za-z0-9_.~+%-]+$` regex format. This is only specified when
            requesting a single node. In case of multislice requests,
            multislice_params must be populated instead.
          type: string
        multisliceParams:
          description: Optional. Fields to specify in case of multislice request.
          $ref: '#/components/schemas/MultisliceParams'
        node:
          description: Required. The node.
          $ref: '#/components/schemas/Node'
    MultisliceParams:
      id: MultisliceParams
      description: >-
        Parameters to specify for multislice QueuedResource requests. This
        message must be populated in case of multislice requests instead of
        node_id.
      type: object
      properties:
        nodeCount:
          description: >-
            Required. Number of nodes with this spec. The system will attempt to
            provison "node_count" nodes as part of the request. This needs to be
            > 1.
          type: integer
          format: int32
        nodeIdPrefix:
          description: >-
            Optional. Prefix of node_ids in case of multislice request. Should
            follow the `^[A-Za-z0-9_.~+%-]+$` regex format. If node_count = 3
            and node_id_prefix = "np", node ids of nodes created will be "np-0",
            "np-1", "np-2". If this field is not provided we use
            queued_resource_id as the node_id_prefix.
          type: string
    Spot:
      id: Spot
      description: Spot tier definition.
      type: object
      properties: {}
    Guaranteed:
      id: Guaranteed
      description: Guaranteed tier definition.
      type: object
      properties:
        minDuration:
          description: >-
            Optional. Defines the minimum duration of the guarantee. If
            specified, the requested resources will only be provisioned if they
            can be allocated for at least the given duration.
          type: string
          format: google-duration
    QueueingPolicy:
      id: QueueingPolicy
      description: Defines the policy of the QueuedRequest.
      type: object
      properties:
        validUntilDuration:
          description: >-
            Optional. A relative time after which resources should not be
            created. If the request cannot be fulfilled by this time the request
            will be failed.
          type: string
          format: google-duration
        validUntilTime:
          description: >-
            Optional. An absolute time after which resources should not be
            created. If the request cannot be fulfilled by this time the request
            will be failed.
          type: string
          format: google-datetime
        validAfterDuration:
          description: Optional. A relative time after which resources may be created.
          type: string
          format: google-duration
        validAfterTime:
          description: Optional. An absolute time after which resources may be created.
          type: string
          format: google-datetime
        validInterval:
          description: >-
            Optional. An absolute time interval within which resources may be
            created.
          $ref: '#/components/schemas/Interval'
    Interval:
      id: Interval
      description: >-
        Represents a time interval, encoded as a Timestamp start (inclusive) and
        a Timestamp end (exclusive). The start must be less than or equal to the
        end. When the start equals the end, the interval is empty (matches no
        time). When both start and end are unspecified, the interval matches any
        time.
      type: object
      properties:
        startTime:
          description: >-
            Optional. Inclusive start of the interval. If specified, a Timestamp
            matching this interval will have to be the same or after the start.
          type: string
          format: google-datetime
        endTime:
          description: >-
            Optional. Exclusive end of the interval. If specified, a Timestamp
            matching this interval will have to be before the end.
          type: string
          format: google-datetime
    QueuedResourceState:
      id: QueuedResourceState
      description: QueuedResourceState defines the details of the QueuedResource request.
      type: object
      properties:
        state:
          description: Output only. State of the QueuedResource request.
          readOnly: true
          type: string
          enumDescriptions:
            - State of the QueuedResource request is not known/set.
            - >-
              The QueuedResource request has been received. We're still working
              on determining if we will be able to honor this request.
            - >-
              The QueuedResource request has passed initial validation/admission
              control and has been persisted in the queue.
            - >-
              The QueuedResource request has been selected. The associated
              resources are currently being provisioned (or very soon will begin
              provisioning).
            - >-
              The request could not be completed. This may be due to some
              late-discovered problem with the request itself, or due to
              unavailability of resources within the constraints of the request
              (e.g., the 'valid until' start timing constraint expired).
            - The QueuedResource is being deleted.
            - >-
              The resources specified in the QueuedResource request have been
              provisioned and are ready for use by the end-user/consumer.
            - >-
              The resources specified in the QueuedResource request are being
              deleted. This may have been initiated by the user, or the Cloud
              TPU service. Inspect the state data for more details.
            - >-
              The resources specified in the QueuedResource request have been
              deleted.
            - >-
              The QueuedResource request has passed initial validation and has
              been persisted in the queue. It will remain in this state until
              there are sufficient free resources to begin provisioning your
              request. Wait times will vary significantly depending on demand
              levels. When demand is high, not all requests can be immediately
              provisioned. If you need more reliable obtainability of TPUs
              consider purchasing a reservation. To put a limit on how long you
              are willing to wait, use [timing
              constraints](https://cloud.google.com/tpu/docs/queued-resources#request_a_queued_resource_before_a_specified_time).
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - ACCEPTED
            - PROVISIONING
            - FAILED
            - DELETING
            - ACTIVE
            - SUSPENDING
            - SUSPENDED
            - WAITING_FOR_RESOURCES
        creatingData:
          description: Output only. Further data for the creating state.
          readOnly: true
          $ref: '#/components/schemas/CreatingData'
        acceptedData:
          description: Output only. Further data for the accepted state.
          readOnly: true
          $ref: '#/components/schemas/AcceptedData'
        provisioningData:
          description: Output only. Further data for the provisioning state.
          readOnly: true
          $ref: '#/components/schemas/ProvisioningData'
        failedData:
          description: Output only. Further data for the failed state.
          readOnly: true
          $ref: '#/components/schemas/FailedData'
        deletingData:
          description: Output only. Further data for the deleting state.
          readOnly: true
          $ref: '#/components/schemas/DeletingData'
        activeData:
          description: Output only. Further data for the active state.
          readOnly: true
          $ref: '#/components/schemas/ActiveData'
        suspendingData:
          description: Output only. Further data for the suspending state.
          readOnly: true
          $ref: '#/components/schemas/SuspendingData'
        suspendedData:
          description: Output only. Further data for the suspended state.
          readOnly: true
          $ref: '#/components/schemas/SuspendedData'
        stateInitiator:
          description: >-
            Output only. The initiator of the QueuedResources's current state.
            Used to indicate whether the SUSPENDING/SUSPENDED state was
            initiated by the user or the service.
          readOnly: true
          type: string
          enumDescriptions:
            - The state initiator is unspecified.
            - The current QueuedResource state was initiated by the user.
            - The current QueuedResource state was initiated by the service.
          enum:
            - STATE_INITIATOR_UNSPECIFIED
            - USER
            - SERVICE
    CreatingData:
      id: CreatingData
      description: Further data for the creating state.
      type: object
      properties: {}
    AcceptedData:
      id: AcceptedData
      description: Further data for the accepted state.
      type: object
      properties: {}
    ProvisioningData:
      id: ProvisioningData
      description: Further data for the provisioning state.
      type: object
      properties: {}
    FailedData:
      id: FailedData
      description: Further data for the failed state.
      type: object
      properties:
        error:
          description: >-
            Output only. The error that caused the queued resource to enter the
            FAILED state.
          readOnly: true
          $ref: '#/components/schemas/Status'
    DeletingData:
      id: DeletingData
      description: Further data for the deleting state.
      type: object
      properties: {}
    ActiveData:
      id: ActiveData
      description: Further data for the active state.
      type: object
      properties: {}
    SuspendingData:
      id: SuspendingData
      description: Further data for the suspending state.
      type: object
      properties: {}
    SuspendedData:
      id: SuspendedData
      description: Further data for the suspended state.
      type: object
      properties: {}
    ResetQueuedResourceRequest:
      id: ResetQueuedResourceRequest
      description: Request for ResetQueuedResource.
      type: object
      properties: {}
    GenerateServiceIdentityRequest:
      id: GenerateServiceIdentityRequest
      description: Request for GenerateServiceIdentity.
      type: object
      properties: {}
    GenerateServiceIdentityResponse:
      id: GenerateServiceIdentityResponse
      description: Response for GenerateServiceIdentity.
      type: object
      properties:
        identity:
          description: ServiceIdentity that was created or retrieved.
          $ref: '#/components/schemas/ServiceIdentity'
    ServiceIdentity:
      id: ServiceIdentity
      description: The per-product per-project service identity for Cloud TPU service.
      type: object
      properties:
        email:
          description: The email address of the service identity.
          type: string
    ListAcceleratorTypesResponse:
      id: ListAcceleratorTypesResponse
      description: Response for ListAcceleratorTypes.
      type: object
      properties:
        acceleratorTypes:
          description: The listed nodes.
          type: array
          items:
            $ref: '#/components/schemas/AcceleratorType'
        nextPageToken:
          description: The next page token or empty if none.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    AcceleratorType:
      id: AcceleratorType
      description: A accelerator type that a Node can be configured with.
      type: object
      properties:
        name:
          description: The resource name.
          type: string
        type:
          description: The accelerator type.
          type: string
        acceleratorConfigs:
          description: The accelerator config.
          type: array
          items:
            $ref: '#/components/schemas/AcceleratorConfig'
    ListRuntimeVersionsResponse:
      id: ListRuntimeVersionsResponse
      description: Response for ListRuntimeVersions.
      type: object
      properties:
        runtimeVersions:
          description: The listed nodes.
          type: array
          items:
            $ref: '#/components/schemas/RuntimeVersion'
        nextPageToken:
          description: The next page token or empty if none.
          type: string
        unreachable:
          description: Locations that could not be reached.
          type: array
          items:
            type: string
    RuntimeVersion:
      id: RuntimeVersion
      description: A runtime version that a Node can be configured with.
      type: object
      properties:
        name:
          description: The resource name.
          type: string
        version:
          description: The runtime version.
          type: string
    GetGuestAttributesRequest:
      id: GetGuestAttributesRequest
      description: Request for GetGuestAttributes.
      type: object
      properties:
        queryPath:
          description: The guest attributes path to be queried.
          type: string
        workerIds:
          description: >-
            The 0-based worker ID. If it is empty, all workers' GuestAttributes
            will be returned.
          type: array
          items:
            type: string
    GetGuestAttributesResponse:
      id: GetGuestAttributesResponse
      description: Response for GetGuestAttributes.
      type: object
      properties:
        guestAttributes:
          description: The guest attributes for the TPU workers.
          type: array
          items:
            $ref: '#/components/schemas/GuestAttributes'
    GuestAttributes:
      id: GuestAttributes
      description: A guest attributes.
      type: object
      properties:
        queryPath:
          description: >-
            The path to be queried. This can be the default namespace ('/') or a
            nested namespace ('/\/') or a specified key ('/\/\')
          type: string
        queryValue:
          description: The value of the requested queried path.
          $ref: '#/components/schemas/GuestAttributesValue'
    GuestAttributesValue:
      id: GuestAttributesValue
      description: Array of guest attribute namespace/key/value tuples.
      type: object
      properties:
        items:
          description: The list of guest attributes entries.
          type: array
          items:
            $ref: '#/components/schemas/GuestAttributesEntry'
    GuestAttributesEntry:
      id: GuestAttributesEntry
      description: A guest attributes namespace/key/value entry.
      type: object
      properties:
        namespace:
          description: Namespace for the guest attribute entry.
          type: string
        key:
          description: Key for the guest attribute entry.
          type: string
        value:
          description: Value for the guest attribute entry.
          type: string
    OperationMetadata:
      id: OperationMetadata
      description: Metadata describing an Operation
      type: object
      properties:
        createTime:
          description: The time the operation was created.
          type: string
          format: google-datetime
        endTime:
          description: The time the operation finished running.
          type: string
          format: google-datetime
        target:
          description: >-
            Target of the operation - for example
            projects/project-1/connectivityTests/test-1
          type: string
        verb:
          description: Name of the verb executed by the operation.
          type: string
        statusDetail:
          description: Human-readable status of the operation, if any.
          type: string
        cancelRequested:
          description: Specifies if cancellation was requested for the operation.
          type: boolean
        apiVersion:
          description: API version.
          type: string
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    locations:
      id: google.tpu.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v2~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        get:
          operation:
            $ref: '#/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        generate_service_identity:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}:generateServiceIdentity/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    operations:
      id: google.tpu.operations
      name: operations
      title: Operations
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        get:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    nodes:
      id: google.tpu.nodes
      name: nodes
      title: Nodes
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1nodes/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.nodes
        create:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1nodes/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1nodes~1{nodesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1nodes~1{nodesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1nodes~1{nodesId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        stop:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1nodes~1{nodesId}:stop/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        start:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1nodes~1{nodesId}:start/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/nodes/methods/get'
          - $ref: '#/components/x-stackQL-resources/nodes/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/nodes/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/nodes/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/nodes/methods/delete'
    nodes_guest_attributes:
      id: google.tpu.nodes_guest_attributes
      name: nodes_guest_attributes
      title: Nodes_guest_attributes
      methods:
        get_guest_attributes:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1nodes~1{nodesId}:getGuestAttributes/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/nodes_guest_attributes/methods/get_guest_attributes
        insert: []
        update: []
        replace: []
        delete: []
    queued_resources:
      id: google.tpu.queued_resources
      name: queued_resources
      title: Queued_resources
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1queuedResources/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.queuedResources
        create:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1queuedResources/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1queuedResources~1{queuedResourcesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1queuedResources~1{queuedResourcesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        reset:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1queuedResources~1{queuedResourcesId}:reset/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/queued_resources/methods/get'
          - $ref: '#/components/x-stackQL-resources/queued_resources/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/queued_resources/methods/create'
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/queued_resources/methods/delete'
    accelerator_types:
      id: google.tpu.accelerator_types
      name: accelerator_types
      title: Accelerator_types
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1acceleratorTypes/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.acceleratorTypes
        get:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1acceleratorTypes~1{acceleratorTypesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/accelerator_types/methods/get'
          - $ref: '#/components/x-stackQL-resources/accelerator_types/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    runtime_versions:
      id: google.tpu.runtime_versions
      name: runtime_versions
      title: Runtime_versions
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1runtimeVersions/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.runtimeVersions
        get:
          operation:
            $ref: >-
              #/paths/~1v2~1projects~1{projectsId}~1locations~1{locationsId}~1runtimeVersions~1{runtimeVersionsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/runtime_versions/methods/get'
          - $ref: '#/components/x-stackQL-resources/runtime_versions/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
paths:
  /v2/projects/{projectsId}/locations:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: Lists information about the supported locations for this service.
      operationId: tpu.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: tpu.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}:generateServiceIdentity:
    parameters: *ref_1
    post:
      description: Generates the Cloud TPU service identity for the project.
      operationId: tpu.projects.locations.generateServiceIdentity
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateServiceIdentityRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateServiceIdentityResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: tpu.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: tpu.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: tpu.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        1, corresponding to `Code.CANCELLED`.
      operationId: tpu.projects.locations.operations.cancel
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/nodes:
    parameters: *ref_1
    get:
      description: Lists nodes.
      operationId: tpu.projects.locations.nodes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNodesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
    post:
      description: Creates a node.
      operationId: tpu.projects.locations.nodes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: nodeId
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:
    parameters: *ref_1
    get:
      description: Gets the details of a node.
      operationId: tpu.projects.locations.nodes.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: nodesId
          required: true
          schema:
            type: string
    delete:
      description: Deletes a node.
      operationId: tpu.projects.locations.nodes.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: nodesId
          required: true
          schema:
            type: string
    patch:
      description: Updates the configurations of a node.
      operationId: tpu.projects.locations.nodes.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: nodesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v2/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:stop:
    parameters: *ref_1
    post:
      description: Stops a node. This operation is only available with single TPU nodes.
      operationId: tpu.projects.locations.nodes.stop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopNodeRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: nodesId
          required: true
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:start:
    parameters: *ref_1
    post:
      description: Starts a node.
      operationId: tpu.projects.locations.nodes.start
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartNodeRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: nodesId
          required: true
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/nodes/{nodesId}:getGuestAttributes:
    parameters: *ref_1
    post:
      description: Retrieves the guest attributes for the node.
      operationId: tpu.projects.locations.nodes.getGuestAttributes
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetGuestAttributesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGuestAttributesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: nodesId
          required: true
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/queuedResources:
    parameters: *ref_1
    get:
      description: Lists queued resources.
      operationId: tpu.projects.locations.queuedResources.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListQueuedResourcesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
    post:
      description: Creates a QueuedResource TPU instance.
      operationId: tpu.projects.locations.queuedResources.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueuedResource'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: queuedResourceId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/queuedResources/{queuedResourcesId}:
    parameters: *ref_1
    get:
      description: Gets details of a queued resource.
      operationId: tpu.projects.locations.queuedResources.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuedResource'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: queuedResourcesId
          required: true
          schema:
            type: string
    delete:
      description: Deletes a QueuedResource TPU instance.
      operationId: tpu.projects.locations.queuedResources.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: queuedResourcesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
  /v2/projects/{projectsId}/locations/{locationsId}/queuedResources/{queuedResourcesId}:reset:
    parameters: *ref_1
    post:
      description: Resets a QueuedResource TPU instance
      operationId: tpu.projects.locations.queuedResources.reset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetQueuedResourceRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: queuedResourcesId
          required: true
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/acceleratorTypes:
    parameters: *ref_1
    get:
      description: Lists accelerator types supported by this API.
      operationId: tpu.projects.locations.acceleratorTypes.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAcceleratorTypesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/acceleratorTypes/{acceleratorTypesId}:
    parameters: *ref_1
    get:
      description: Gets AcceleratorType.
      operationId: tpu.projects.locations.acceleratorTypes.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AcceleratorType'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: acceleratorTypesId
          required: true
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/runtimeVersions:
    parameters: *ref_1
    get:
      description: Lists runtime versions supported by this API.
      operationId: tpu.projects.locations.runtimeVersions.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRuntimeVersionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
  /v2/projects/{projectsId}/locations/{locationsId}/runtimeVersions/{runtimeVersionsId}:
    parameters: *ref_1
    get:
      description: Gets a runtime version.
      operationId: tpu.projects.locations.runtimeVersions.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuntimeVersion'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: runtimeVersionsId
          required: true
          schema:
            type: string
