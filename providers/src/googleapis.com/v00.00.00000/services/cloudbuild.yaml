openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Cloud Build API
  description: Creates and manages builds on Google Cloud Platform.
  version: v1
  x-discovery-doc-revision: '20230811'
  x-generated-date: '2023-08-23'
externalDocs:
  url: 'https://cloud.google.com/cloud-build/docs/'
servers:
  - url: 'https://cloudbuild.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    BitbucketServerTriggerConfig:
      type: object
      description: BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
      properties:
        pullRequest:
          $ref: '#/components/schemas/PullRequestFilter'
          description: Filter to match changes in pull requests.
        bitbucketServerConfig:
          readOnly: true
          description: Output only. The BitbucketServerConfig specified in the bitbucket_server_config_resource field.
          $ref: '#/components/schemas/BitbucketServerConfig'
        repoSlug:
          description: 'Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is ''test repo'', in the URL it would become ''test-repo'' as in https://mybitbucket.server/projects/TEST/repos/test-repo.'
          type: string
        projectKey:
          type: string
          description: 'Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".'
        bitbucketServerConfigResource:
          description: Required. The Bitbucket server config resource that this trigger config maps to.
          type: string
        push:
          $ref: '#/components/schemas/PushFilter'
          description: 'Filter to match changes in refs like branches, tags.'
      id: BitbucketServerTriggerConfig
    GitLabRepository:
      properties:
        repositoryId:
          description: Identifier for a repository
          $ref: '#/components/schemas/GitLabRepositoryId'
        description:
          description: Description of the repository
          type: string
        browseUri:
          type: string
          description: Link to the browse repo page on the GitLab instance
        name:
          description: The resource name of the repository
          type: string
        displayName:
          type: string
          description: Display name of the repository
      description: Proto Representing a GitLabRepository
      id: GitLabRepository
      type: object
    UploadedNpmPackage:
      type: object
      id: UploadedNpmPackage
      properties:
        fileHashes:
          $ref: '#/components/schemas/FileHashes'
          description: Hash types and values of the npm package.
        uri:
          type: string
          description: URI of the uploaded npm package.
        pushTiming:
          $ref: '#/components/schemas/TimeSpan'
          readOnly: true
          description: Output only. Stores timing information for pushing the specified artifact.
      description: An npm package uploaded to Artifact Registry using the NpmPackage directive.
    RetryBuildRequest:
      properties:
        id:
          type: string
          description: Required. Build ID of the original build.
        projectId:
          type: string
          description: Required. ID of the project.
        name:
          type: string
          description: 'The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`'
      type: object
      description: Specifies a build to retry.
      id: RetryBuildRequest
    ListGithubEnterpriseConfigsResponse:
      description: RPC response object returned by ListGithubEnterpriseConfigs RPC method.
      properties:
        configs:
          type: array
          items:
            $ref: '#/components/schemas/GitHubEnterpriseConfig'
          description: A list of GitHubEnterpriseConfigs
      type: object
      id: ListGithubEnterpriseConfigsResponse
    GitSource:
      type: object
      description: Location of the source in any accessible Git repository.
      properties:
        url:
          description: 'Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote.'
          type: string
        dir:
          description: 'Directory, relative to the source root, in which to run the build. This must be a relative path. If a step''s `dir` is specified and is an absolute path, this value is ignored for that step''s execution.'
          type: string
        revision:
          description: 'The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.'
          type: string
      id: GitSource
    DeleteGitLabConfigOperationMetadata:
      description: Metadata for `DeleteGitLabConfig` operation.
      id: DeleteGitLabConfigOperationMetadata
      type: object
      properties:
        gitlabConfig:
          type: string
          description: 'The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.'
        completeTime:
          description: Time the operation was completed.
          format: google-datetime
          type: string
        createTime:
          format: google-datetime
          type: string
          description: Time the operation was created.
    BitbucketServerRepository:
      id: BitbucketServerRepository
      type: object
      description: BitbucketServerRepository represents a repository hosted on a Bitbucket Server.
      properties:
        name:
          description: The resource name of the repository.
          type: string
        description:
          description: Description of the repository.
          type: string
        browseUri:
          type: string
          description: Link to the browse repo page on the Bitbucket Server instance.
        repoId:
          description: Identifier for a repository hosted on a Bitbucket Server.
          $ref: '#/components/schemas/BitbucketServerRepositoryId'
        displayName:
          description: Display name of the repository.
          type: string
    Results:
      description: Artifacts created by the build pipeline.
      type: object
      id: Results
      properties:
        artifactManifest:
          type: string
          description: Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
        buildStepOutputs:
          description: 'List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 4KB of data is stored.'
          items:
            format: byte
            type: string
          type: array
        artifactTiming:
          description: Time to push all non-container artifacts to Cloud Storage.
          $ref: '#/components/schemas/TimeSpan'
        images:
          description: Container images that were built as a part of the build.
          items:
            $ref: '#/components/schemas/BuiltImage'
          type: array
        pythonPackages:
          type: array
          description: Python artifacts uploaded to Artifact Registry at the end of the build.
          items:
            $ref: '#/components/schemas/UploadedPythonPackage'
        npmPackages:
          type: array
          description: Npm packages uploaded to Artifact Registry at the end of the build.
          items:
            $ref: '#/components/schemas/UploadedNpmPackage'
        mavenArtifacts:
          type: array
          description: Maven artifacts uploaded to Artifact Registry at the end of the build.
          items:
            $ref: '#/components/schemas/UploadedMavenArtifact'
        numArtifacts:
          description: Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
          format: int64
          type: string
        buildStepImages:
          description: 'List of build step digests, in the order corresponding to build step indices.'
          type: array
          items:
            type: string
    WorkerConfig:
      properties:
        machineType:
          description: 'Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.'
          type: string
        diskSizeGb:
          description: 'Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 2000. If `0` is specified, Cloud Build will use a standard disk size.'
          format: int64
          type: string
      description: Defines the configuration to be used for creating workers in the pool.
      id: WorkerConfig
      type: object
    ServiceDirectoryConfig:
      id: ServiceDirectoryConfig
      properties:
        service:
          description: 'The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.'
          type: string
      type: object
      description: ServiceDirectoryConfig represents Service Directory configuration for a SCM host connection.
    PoolOption:
      properties:
        name:
          description: 'The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}'
          type: string
      type: object
      description: 'Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.'
      id: PoolOption
    GitFileSource:
      properties:
        githubEnterpriseConfig:
          type: string
          description: 'The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.'
        repoType:
          enumDescriptions:
            - 'The default, unknown repo type. Don''t use it, instead use one of the other repo types.'
            - A Google Cloud Source Repositories-hosted repo.
            - A GitHub-hosted repo not necessarily on "github.com" (i.e. GitHub Enterprise).
            - A Bitbucket Server-hosted repo.
            - A GitLab-hosted repo.
          enum:
            - UNKNOWN
            - CLOUD_SOURCE_REPOSITORIES
            - GITHUB
            - BITBUCKET_SERVER
            - GITLAB
          description: See RepoType above.
          type: string
        uri:
          description: 'The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.'
          type: string
        bitbucketServerConfig:
          description: 'The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.'
          type: string
        repository:
          description: 'The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.'
          type: string
        revision:
          description: 'The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.'
          type: string
        path:
          type: string
          description: 'The path of the file, with the repo root as the root of the path.'
      description: GitFileSource describes a file within a (possibly remote) code repository.
      type: object
      id: GitFileSource
    CancelBuildRequest:
      id: CancelBuildRequest
      type: object
      properties:
        name:
          description: 'The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`'
          type: string
        id:
          type: string
          description: Required. ID of the build.
        projectId:
          description: Required. ID of the project.
          type: string
      description: Request to cancel an ongoing build.
    ArtifactObjects:
      id: ArtifactObjects
      properties:
        paths:
          items:
            type: string
          type: array
          description: Path globs used to match files in the build's workspace.
        timing:
          description: Output only. Stores timing information for pushing all artifact objects.
          $ref: '#/components/schemas/TimeSpan'
          readOnly: true
        location:
          description: 'Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.'
          type: string
      type: object
      description: Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
    GitLabSecrets:
      type: object
      id: GitLabSecrets
      properties:
        apiAccessTokenVersion:
          type: string
          description: Required. The resource name for the api access token’s secret version
        apiKeyVersion:
          type: string
          description: Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build.
        readAccessTokenVersion:
          type: string
          description: Required. The resource name for the read access token’s secret version
        webhookSecretVersion:
          description: 'Required. Immutable. The resource name for the webhook secret’s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig.'
          type: string
      description: GitLabSecrets represents the secrets in Secret Manager for a GitLab integration.
    InlineSecret:
      id: InlineSecret
      type: object
      description: Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
      properties:
        kmsKeyName:
          description: 'Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*'
          type: string
        envMap:
          description: 'Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build''s secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build''s secrets.'
          type: object
          additionalProperties:
            type: string
            format: byte
    SourceProvenance:
      id: SourceProvenance
      type: object
      properties:
        resolvedRepoSource:
          $ref: '#/components/schemas/RepoSource'
          description: 'A copy of the build''s `source.repo_source`, if exists, with any revisions resolved.'
        fileHashes:
          readOnly: true
          description: 'Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.'
          additionalProperties:
            $ref: '#/components/schemas/FileHashes'
          type: object
        resolvedStorageSourceManifest:
          description: 'A copy of the build''s `source.storage_source_manifest`, if exists, with any revisions resolved. This feature is in Preview.'
          $ref: '#/components/schemas/StorageSourceManifest'
        resolvedStorageSource:
          description: 'A copy of the build''s `source.storage_source`, if exists, with any generations resolved.'
          $ref: '#/components/schemas/StorageSource'
      description: 'Provenance of the source. Ways to find the original source, or verify that some source was used for this build.'
    ApproveBuildRequest:
      description: Request to approve or reject a pending build.
      properties:
        approvalResult:
          $ref: '#/components/schemas/ApprovalResult'
          description: Approval decision and metadata.
      id: ApproveBuildRequest
      type: object
    BuildApproval:
      properties:
        state:
          readOnly: true
          type: string
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build approval is pending.
            - Build approval has been approved.
            - Build approval has been rejected.
            - Build was cancelled while it was still pending approval.
          description: Output only. The state of this build's approval.
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - APPROVED
            - REJECTED
            - CANCELLED
        config:
          $ref: '#/components/schemas/ApprovalConfig'
          description: Output only. Configuration for manual approval of this build.
          readOnly: true
        result:
          $ref: '#/components/schemas/ApprovalResult'
          description: Output only. Result of manual approval for this Build.
          readOnly: true
      description: 'BuildApproval describes a build''s approval configuration, state, and result.'
      type: object
      id: BuildApproval
    BuildStep:
      properties:
        entrypoint:
          type: string
          description: 'Entrypoint to be used instead of the build step image''s default entrypoint. If unset, the image''s default entrypoint is used.'
        script:
          type: string
          description: 'A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.'
        env:
          type: array
          description: A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
          items:
            type: string
        exitCode:
          readOnly: true
          format: int32
          type: integer
          description: Output only. Return code from running the step.
        waitFor:
          type: array
          description: 'The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.'
          items:
            type: string
        id:
          type: string
          description: 'Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.'
        allowFailure:
          type: boolean
          description: 'Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.'
        dir:
          type: string
          description: 'Working directory to use when running this step''s container. If this value is a relative path, it is relative to the build''s working directory. If this value is absolute, it may be outside the build''s working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step''s execution.'
        status:
          description: 'Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.'
          enumDescriptions:
            - Status of the build is unknown.
            - Build has been created and is pending execution and queuing. It has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
          type: string
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          readOnly: true
        volumes:
          description: 'List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.'
          type: array
          items:
            $ref: '#/components/schemas/Volume'
        pullTiming:
          readOnly: true
          description: Output only. Stores timing information for pulling this build step's builder image only.
          $ref: '#/components/schemas/TimeSpan'
        allowExitCodes:
          description: 'Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.'
          items:
            format: int32
            type: integer
          type: array
        timing:
          readOnly: true
          description: Output only. Stores timing information for executing this build step.
          $ref: '#/components/schemas/TimeSpan'
        args:
          description: 'A list of arguments that will be presented to the step when it is started. If the image used to run the step''s container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.'
          type: array
          items:
            type: string
        name:
          description: 'Required. The name of the container image that will run this particular build step. If the image is available in the host''s Docker daemon''s cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account''s credentials if necessary. The Docker daemon''s cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host''s Docker daemon''s cache and is available to use as the name for a later build step.'
          type: string
        secretEnv:
          description: A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
          items:
            type: string
          type: array
        timeout:
          type: string
          format: google-duration
          description: 'Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.'
        automapSubstitutions:
          type: boolean
          description: Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
      description: A step in the build pipeline.
      id: BuildStep
      type: object
    CreateGitLabConfigOperationMetadata:
      properties:
        completeTime:
          description: Time the operation was completed.
          type: string
          format: google-datetime
        createTime:
          description: Time the operation was created.
          type: string
          format: google-datetime
        gitlabConfig:
          type: string
          description: 'The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.'
      type: object
      id: CreateGitLabConfigOperationMetadata
      description: Metadata for `CreateGitLabConfig` operation.
    GitHubEnterpriseConfig:
      description: GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server.
      properties:
        hostUrl:
          description: The URL of the github enterprise host the configuration is for.
          type: string
        sslCa:
          type: string
          description: Optional. SSL certificate to use for requests to GitHub Enterprise.
        name:
          type: string
          description: 'Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"'
        secrets:
          description: Names of secrets in Secret Manager.
          $ref: '#/components/schemas/GitHubEnterpriseSecrets'
        displayName:
          type: string
          description: Name to display for this config.
        appId:
          description: Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
          type: string
          format: int64
        createTime:
          type: string
          format: google-datetime
          description: Output only. Time when the installation was associated with the project.
          readOnly: true
        peeredNetwork:
          type: string
          description: 'Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.'
        webhookKey:
          type: string
          description: The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
      id: GitHubEnterpriseConfig
      type: object
    StorageSource:
      description: Location of the source in an archive file in Cloud Storage.
      type: object
      id: StorageSource
      properties:
        generation:
          description: 'Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.'
          format: int64
          type: string
        bucket:
          description: 'Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).'
          type: string
        object:
          type: string
          description: Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
    PushFilter:
      properties:
        branch:
          description: 'Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax'
          type: string
        invertRegex:
          type: boolean
          description: 'When true, only trigger a build if the revision regex does NOT match the git_ref regex.'
        tag:
          description: 'Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax'
          type: string
      id: PushFilter
      type: object
      description: Push contains filter properties for matching GitHub git pushes.
    DeleteBitbucketServerConfigOperationMetadata:
      description: Metadata for `DeleteBitbucketServerConfig` operation.
      properties:
        bitbucketServerConfig:
          type: string
          description: 'The resource name of the BitbucketServerConfig to be deleted. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.'
        createTime:
          type: string
          description: Time the operation was created.
          format: google-datetime
        completeTime:
          type: string
          format: google-datetime
          description: Time the operation was completed.
      type: object
      id: DeleteBitbucketServerConfigOperationMetadata
    GitHubEventsConfig:
      type: object
      properties:
        owner:
          type: string
          description: 'Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".'
        push:
          $ref: '#/components/schemas/PushFilter'
          description: 'filter to match changes in refs like branches, tags.'
        pullRequest:
          description: filter to match changes in pull requests.
          $ref: '#/components/schemas/PullRequestFilter'
        name:
          type: string
          description: 'Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".'
        enterpriseConfigResourceName:
          type: string
          description: 'Optional. The resource name of the github enterprise config that should be applied to this installation. For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"'
        installationId:
          format: int64
          description: The installationID that emits the GitHub event.
          deprecated: true
          type: string
      description: GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.
      id: GitHubEventsConfig
    CreateBitbucketServerConfigOperationMetadata:
      id: CreateBitbucketServerConfigOperationMetadata
      type: object
      description: Metadata for `CreateBitbucketServerConfig` operation.
      properties:
        createTime:
          type: string
          description: Time the operation was created.
          format: google-datetime
        completeTime:
          description: Time the operation was completed.
          format: google-datetime
          type: string
        bitbucketServerConfig:
          description: 'The resource name of the BitbucketServerConfig to be created. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.'
          type: string
    DeleteWorkerPoolOperationMetadata:
      id: DeleteWorkerPoolOperationMetadata
      description: Metadata for the `DeleteWorkerPool` operation.
      properties:
        workerPool:
          type: string
          description: 'The resource name of the `WorkerPool` being deleted. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.'
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        completeTime:
          description: Time the operation was completed.
          type: string
          format: google-datetime
      type: object
    GitLabConfig:
      properties:
        name:
          description: The resource name for the config.
          type: string
        createTime:
          description: Output only. Time when the config was created.
          format: google-datetime
          readOnly: true
          type: string
        connectedRepositories:
          type: array
          items:
            $ref: '#/components/schemas/GitLabRepositoryId'
          description: Connected GitLab.com or GitLabEnterprise repositories for this config.
        secrets:
          description: Required. Secret Manager secrets needed by the config.
          $ref: '#/components/schemas/GitLabSecrets'
        username:
          description: Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
          type: string
        webhookKey:
          readOnly: true
          type: string
          description: Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.
        enterpriseConfig:
          $ref: '#/components/schemas/GitLabEnterpriseConfig'
          description: Optional. GitLabEnterprise config.
      type: object
      description: GitLabConfig represents the configuration for a GitLab integration.
      id: GitLabConfig
    GitLabEventsConfig:
      description: GitLabEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab event is received.
      type: object
      id: GitLabEventsConfig
      properties:
        pullRequest:
          $ref: '#/components/schemas/PullRequestFilter'
          description: Filter to match changes in pull requests.
        push:
          $ref: '#/components/schemas/PushFilter'
          description: 'Filter to match changes in refs like branches, tags.'
        gitlabConfig:
          readOnly: true
          $ref: '#/components/schemas/GitLabConfig'
          description: Output only. The GitLabConfig specified in the gitlab_config_resource field.
        gitlabConfigResource:
          type: string
          description: The GitLab config resource that this trigger config maps to.
        projectNamespace:
          type: string
          description: Namespace of the GitLab project.
    CancelOperationRequest:
      description: The request message for Operations.CancelOperation.
      type: object
      id: CancelOperationRequest
      properties: {}
    ListBitbucketServerRepositoriesResponse:
      properties:
        nextPageToken:
          description: 'A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
        bitbucketServerRepositories:
          type: array
          items:
            $ref: '#/components/schemas/BitbucketServerRepository'
          description: List of Bitbucket Server repositories.
      id: ListBitbucketServerRepositoriesResponse
      description: RPC response object returned by the ListBitbucketServerRepositories RPC method.
      type: object
    GitRepoSource:
      description: GitRepoSource describes a repo and ref of a code repository.
      id: GitRepoSource
      properties:
        repoType:
          enumDescriptions:
            - 'The default, unknown repo type. Don''t use it, instead use one of the other repo types.'
            - A Google Cloud Source Repositories-hosted repo.
            - A GitHub-hosted repo not necessarily on "github.com" (i.e. GitHub Enterprise).
            - A Bitbucket Server-hosted repo.
            - A GitLab-hosted repo.
          type: string
          description: See RepoType below.
          enum:
            - UNKNOWN
            - CLOUD_SOURCE_REPOSITORIES
            - GITHUB
            - BITBUCKET_SERVER
            - GITLAB
        bitbucketServerConfig:
          description: 'The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.'
          type: string
        repository:
          description: 'The connected repository resource name, in the format `projects/*/locations/*/connections/*/repositories/*`. Either `uri` or `repository` can be specified and is required.'
          type: string
        ref:
          description: The branch or tag to use. Must start with "refs/" (required).
          type: string
        githubEnterpriseConfig:
          description: 'The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.'
          type: string
        uri:
          description: 'The URI of the repo (e.g. https://github.com/user/repo.git). Either `uri` or `repository` can be specified and is required.'
          type: string
      type: object
    BuildOperationMetadata:
      type: object
      description: Metadata for build operations.
      id: BuildOperationMetadata
      properties:
        build:
          description: The build that the operation is tracking.
          $ref: '#/components/schemas/Build'
    RunBuildTriggerRequest:
      id: RunBuildTriggerRequest
      type: object
      properties:
        projectId:
          description: Required. ID of the project.
          type: string
        triggerId:
          description: Required. ID of the trigger.
          type: string
        source:
          description: Source to build against this trigger. Branch and tag names cannot consist of regular expressions.
          $ref: '#/components/schemas/RepoSource'
      description: Specifies a build trigger to run and the source to use.
    GitLabRepositoryId:
      type: object
      properties:
        webhookId:
          format: int32
          readOnly: true
          type: integer
          description: Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
        id:
          type: string
          description: 'Required. Identifier for the repository. example: "namespace/project-slug", namespace is usually the username or group ID'
      id: GitLabRepositoryId
      description: GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise
    UpdateWorkerPoolOperationMetadata:
      id: UpdateWorkerPoolOperationMetadata
      type: object
      description: Metadata for the `UpdateWorkerPool` operation.
      properties:
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        completeTime:
          format: google-datetime
          type: string
          description: Time the operation was completed.
        workerPool:
          type: string
          description: 'The resource name of the `WorkerPool` being updated. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.'
    Empty:
      id: Empty
      properties: {}
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      type: object
    HttpBody:
      id: HttpBody
      type: object
      description: 'Message that represents an arbitrary HTTP body. It should only be used for payload formats that can''t be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.'
      properties:
        data:
          format: byte
          type: string
          description: The HTTP request/response body as raw binary.
        extensions:
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
          type: array
          description: Application specific response metadata. Must be set in the first response for streaming APIs.
        contentType:
          type: string
          description: The HTTP Content-Type header value specifying the content type of the body.
    CreateWorkerPoolOperationMetadata:
      type: object
      description: Metadata for the `CreateWorkerPool` operation.
      id: CreateWorkerPoolOperationMetadata
      properties:
        completeTime:
          description: Time the operation was completed.
          type: string
          format: google-datetime
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        workerPool:
          description: 'The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.'
          type: string
    BatchCreateGitLabConnectedRepositoriesResponse:
      id: BatchCreateGitLabConnectedRepositoriesResponse
      type: object
      description: Response of BatchCreateGitLabConnectedRepositories RPC method.
      properties:
        gitlabConnectedRepositories:
          items:
            $ref: '#/components/schemas/GitLabConnectedRepository'
          type: array
          description: The GitLab connected repository requests' responses.
    PubsubConfig:
      properties:
        state:
          enumDescriptions:
            - The subscription configuration has not been checked.
            - The Pub/Sub subscription is properly configured.
            - The subscription has been deleted.
            - The topic has been deleted.
            - Some of the subscription's field are misconfigured.
          enum:
            - STATE_UNSPECIFIED
            - OK
            - SUBSCRIPTION_DELETED
            - TOPIC_DELETED
            - SUBSCRIPTION_MISCONFIGURED
          description: Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
          type: string
        topic:
          description: 'The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.'
          type: string
        serviceAccountEmail:
          type: string
          description: Service account that will make the push request.
        subscription:
          readOnly: true
          type: string
          description: 'Output only. Name of the subscription. Format is `projects/{project}/subscriptions/{subscription}`.'
      description: PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
      id: PubsubConfig
      type: object
    StorageSourceManifest:
      description: 'Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).'
      type: object
      properties:
        generation:
          type: string
          format: int64
          description: 'Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.'
        bucket:
          type: string
          description: 'Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).'
        object:
          description: Cloud Storage object containing the source manifest. This object must be a JSON file.
          type: string
      id: StorageSourceManifest
    BatchCreateGitLabConnectedRepositoriesRequest:
      properties:
        requests:
          items:
            $ref: '#/components/schemas/CreateGitLabConnectedRepositoryRequest'
          description: Required. Requests to connect GitLab repositories.
          type: array
      type: object
      id: BatchCreateGitLabConnectedRepositoriesRequest
      description: RPC request object accepted by BatchCreateGitLabConnectedRepositories RPC method.
    UpdateGitLabConfigOperationMetadata:
      id: UpdateGitLabConfigOperationMetadata
      type: object
      properties:
        completeTime:
          type: string
          description: Time the operation was completed.
          format: google-datetime
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        gitlabConfig:
          description: 'The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.'
          type: string
      description: Metadata for `UpdateGitLabConfig` operation.
    ListGitLabConfigsResponse:
      properties:
        nextPageToken:
          type: string
          description: 'A token that can be sent as `page_token` to retrieve the next page If this field is omitted, there are no subsequent pages.'
        gitlabConfigs:
          items:
            $ref: '#/components/schemas/GitLabConfig'
          type: array
          description: A list of GitLabConfigs
      type: object
      description: RPC response object returned by ListGitLabConfigs RPC method.
      id: ListGitLabConfigsResponse
    WorkerPool:
      description: 'Configuration for a `WorkerPool`. Cloud Build owns and maintains a pool of workers for general use and have no access to a project''s private network. By default, builds submitted to Cloud Build will use a worker from this pool. If your build needs access to resources on a private network, create and use a `WorkerPool` to run your builds. Private `WorkerPool`s give your builds access to any single VPC network that you administer, including any on-prem resources connected to that VPC network. For an overview of private pools, see [Private pools overview](https://cloud.google.com/build/docs/private-pools/private-pools-overview).'
      id: WorkerPool
      properties:
        etag:
          description: Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
          type: string
          readOnly: true
        deleteTime:
          readOnly: true
          format: google-datetime
          type: string
          description: Output only. Time at which the request to delete the `WorkerPool` was received.
        name:
          description: 'Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.'
          readOnly: true
          type: string
        privatePoolV1Config:
          $ref: '#/components/schemas/PrivatePoolV1Config'
          description: Legacy Private Pool configuration.
        createTime:
          type: string
          description: Output only. Time at which the request to create the `WorkerPool` was received.
          readOnly: true
          format: google-datetime
        annotations:
          description: 'User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations.'
          type: object
          additionalProperties:
            type: string
        updateTime:
          type: string
          description: Output only. Time at which the request to update the `WorkerPool` was received.
          readOnly: true
          format: google-datetime
        displayName:
          description: 'A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.'
          type: string
        state:
          readOnly: true
          type: string
          description: Output only. `WorkerPool` state.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - RUNNING
            - DELETING
            - DELETED
            - UPDATING
          enumDescriptions:
            - State of the `WorkerPool` is unknown.
            - '`WorkerPool` is being created.'
            - '`WorkerPool` is running.'
            - '`WorkerPool` is being deleted: cancelling builds and draining workers.'
            - '`WorkerPool` is deleted.'
            - '`WorkerPool` is being updated; new builds cannot be run.'
        uid:
          type: string
          description: Output only. A unique identifier for the `WorkerPool`.
          readOnly: true
      type: object
    NpmPackage:
      description: Npm package to upload to Artifact Registry upon successful completion of all build steps.
      id: NpmPackage
      properties:
        repository:
          type: string
          description: 'Artifact Registry repository, in the form "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.'
        packagePath:
          description: Path to the package.json. e.g. workspace/path/to/package
          type: string
      type: object
    BitbucketServerConfig:
      type: object
      description: BitbucketServerConfig represents the configuration for a Bitbucket Server.
      properties:
        apiKey:
          description: 'Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.'
          type: string
        webhookKey:
          description: Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.
          readOnly: true
          type: string
        username:
          type: string
          description: Username of the account Cloud Build will use on Bitbucket Server.
        connectedRepositories:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/BitbucketServerRepositoryId'
          description: Output only. Connected Bitbucket Server repositories for this config.
        name:
          type: string
          description: The resource name for the config.
        peeredNetwork:
          type: string
          description: 'Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.'
        sslCa:
          description: 'Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.'
          type: string
        createTime:
          format: google-datetime
          type: string
          description: Time when the config was created.
        hostUri:
          type: string
          description: 'Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.'
        secrets:
          $ref: '#/components/schemas/BitbucketServerSecrets'
          description: Required. Secret Manager secrets needed by the config.
      id: BitbucketServerConfig
    ApprovalConfig:
      type: object
      description: ApprovalConfig describes configuration for manual approval of a build.
      id: ApprovalConfig
      properties:
        approvalRequired:
          description: 'Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.'
          type: boolean
    PullRequestFilter:
      properties:
        branch:
          description: 'Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax'
          type: string
        commentControl:
          enum:
            - COMMENTS_DISABLED
            - COMMENTS_ENABLED
            - COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY
          enumDescriptions:
            - Do not require comments on Pull Requests before builds are triggered.
            - Enforce that repository owners or collaborators must comment on Pull Requests before builds are triggered.
            - Enforce that repository owners or collaborators must comment on external contributors' Pull Requests before builds are triggered.
          description: Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
          type: string
        invertRegex:
          type: boolean
          description: 'If true, branches that do NOT match the git_ref will trigger a build.'
      type: object
      description: PullRequestFilter contains filter properties for matching GitHub Pull Requests.
      id: PullRequestFilter
    CreateGitHubEnterpriseConfigOperationMetadata:
      properties:
        completeTime:
          type: string
          format: google-datetime
          description: Time the operation was completed.
        githubEnterpriseConfig:
          type: string
          description: 'The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.'
        createTime:
          description: Time the operation was created.
          type: string
          format: google-datetime
      type: object
      description: Metadata for `CreateGithubEnterpriseConfig` operation.
      id: CreateGitHubEnterpriseConfigOperationMetadata
    CreateGitLabConnectedRepositoryRequest:
      description: Request to connect a repository from a connected GitLab host.
      properties:
        parent:
          description: 'Required. The name of the `GitLabConfig` that adds connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`'
          type: string
        gitlabConnectedRepository:
          $ref: '#/components/schemas/GitLabConnectedRepository'
          description: Required. The GitLab repository to connect.
      type: object
      id: CreateGitLabConnectedRepositoryRequest
    BatchCreateBitbucketServerConnectedRepositoriesRequest:
      description: RPC request object accepted by BatchCreateBitbucketServerConnectedRepositories RPC method.
      id: BatchCreateBitbucketServerConnectedRepositoriesRequest
      properties:
        requests:
          type: array
          description: Required. Requests to connect Bitbucket Server repositories.
          items:
            $ref: '#/components/schemas/CreateBitbucketServerConnectedRepositoryRequest'
      type: object
    BuildTrigger:
      type: object
      properties:
        bitbucketServerTriggerConfig:
          description: BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
          $ref: '#/components/schemas/BitbucketServerTriggerConfig'
        filename:
          description: 'Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).'
          type: string
        autodetect:
          type: boolean
          description: 'Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.'
        id:
          type: string
          readOnly: true
          description: Output only. Unique identifier of the trigger.
        triggerTemplate:
          $ref: '#/components/schemas/RepoSource'
          description: Template describing the types of source changes to trigger a build. Branch and tag names in trigger templates are interpreted as regular expressions. Any branch or tag change that matches that regular expression will trigger a build. Mutually exclusive with `github`.
        description:
          type: string
          description: Human-readable description of this trigger.
        name:
          description: 'User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.'
          type: string
        pubsubConfig:
          description: PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
          $ref: '#/components/schemas/PubsubConfig'
        disabled:
          description: 'If true, the trigger will never automatically execute a build.'
          type: boolean
        sourceToBuild:
          description: 'The repo and ref of the repository from which to build. This field is used only for those triggers that do not respond to SCM events. Triggers that respond to such events build source at whatever commit caused the event. This field is currently only used by Webhook, Pub/Sub, Manual, and Cron triggers.'
          $ref: '#/components/schemas/GitRepoSource'
        serviceAccount:
          description: 'The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`'
          type: string
        includedFiles:
          items:
            type: string
          description: 'If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.'
          type: array
        gitlabEnterpriseEventsConfig:
          description: GitLabEnterpriseEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab Enterprise event is received.
          $ref: '#/components/schemas/GitLabEventsConfig'
        substitutions:
          type: object
          description: 'Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.'
          additionalProperties:
            type: string
        build:
          description: Contents of the build template.
          $ref: '#/components/schemas/Build'
        ignoredFiles:
          description: 'ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.'
          type: array
          items:
            type: string
        eventType:
          type: string
          description: EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.
          enum:
            - EVENT_TYPE_UNSPECIFIED
            - REPO
            - WEBHOOK
            - PUBSUB
            - MANUAL
          enumDescriptions:
            - EVENT_TYPE_UNSPECIFIED event_types are ignored.
            - REPO corresponds to the supported VCS integrations.
            - WEBHOOK corresponds to webhook triggers.
            - PUBSUB corresponds to pubsub triggers.
            - MANUAL corresponds to manual-only invoked triggers.
        approvalConfig:
          $ref: '#/components/schemas/ApprovalConfig'
          description: Configuration for manual approval to start a build invocation of this BuildTrigger.
        repositoryEventConfig:
          $ref: '#/components/schemas/RepositoryEventConfig'
          description: The configuration of a trigger that creates a build whenever an event from Repo API is received.
        tags:
          description: Tags for annotation of a `BuildTrigger`
          items:
            type: string
          type: array
        resourceName:
          type: string
          description: 'The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.'
        gitFileSource:
          $ref: '#/components/schemas/GitFileSource'
          description: The file source describing the local or remote Build template.
        filter:
          type: string
          description: A Common Expression Language string.
        webhookConfig:
          $ref: '#/components/schemas/WebhookConfig'
          description: WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
        createTime:
          format: google-datetime
          type: string
          description: Output only. Time when the trigger was created.
          readOnly: true
        github:
          $ref: '#/components/schemas/GitHubEventsConfig'
          description: GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received. Mutually exclusive with `trigger_template`.
        includeBuildLogs:
          enumDescriptions:
            - Build logs will not be shown on GitHub.
            - Build logs will be shown on GitHub.
          description: 'If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error.'
          type: string
          enum:
            - INCLUDE_BUILD_LOGS_UNSPECIFIED
            - INCLUDE_BUILD_LOGS_WITH_STATUS
      id: BuildTrigger
      description: Configuration for an automated build in response to source repository changes.
    MavenArtifact:
      id: MavenArtifact
      description: A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
      properties:
        repository:
          type: string
          description: 'Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.'
        version:
          description: Maven `version` value used when uploading the artifact to Artifact Registry.
          type: string
        groupId:
          description: Maven `groupId` value used when uploading the artifact to Artifact Registry.
          type: string
        artifactId:
          type: string
          description: Maven `artifactId` value used when uploading the artifact to Artifact Registry.
        path:
          description: 'Path to an artifact in the build''s workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.'
          type: string
      type: object
    ConnectedRepository:
      properties:
        revision:
          type: string
          description: 'The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref.'
        dir:
          description: 'Directory, relative to the source root, in which to run the build.'
          type: string
        repository:
          description: 'Required. Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`.'
          type: string
      id: ConnectedRepository
      type: object
      description: Location of the source in a 2nd-gen Google Cloud Build repository resource.
    GitLabConnectedRepository:
      description: GitLabConnectedRepository represents a GitLab connected repository request response.
      properties:
        status:
          $ref: '#/components/schemas/Status'
          description: Output only. The status of the repo connection request.
          readOnly: true
        parent:
          description: 'The name of the `GitLabConfig` that added connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`'
          type: string
        repo:
          description: The GitLab repositories to connect.
          $ref: '#/components/schemas/GitLabRepositoryId'
      type: object
      id: GitLabConnectedRepository
    UploadedMavenArtifact:
      properties:
        uri:
          description: URI of the uploaded artifact.
          type: string
        pushTiming:
          readOnly: true
          $ref: '#/components/schemas/TimeSpan'
          description: Output only. Stores timing information for pushing the specified artifact.
        fileHashes:
          $ref: '#/components/schemas/FileHashes'
          description: Hash types and values of the Maven Artifact.
      id: UploadedMavenArtifact
      description: A Maven artifact uploaded using the MavenArtifact directive.
      type: object
    ListBitbucketServerConfigsResponse:
      description: RPC response object returned by ListBitbucketServerConfigs RPC method.
      type: object
      properties:
        nextPageToken:
          description: 'A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
        bitbucketServerConfigs:
          type: array
          items:
            $ref: '#/components/schemas/BitbucketServerConfig'
          description: A list of BitbucketServerConfigs
      id: ListBitbucketServerConfigsResponse
    ListBuildsResponse:
      properties:
        nextPageToken:
          description: Token to receive the next page of results. This will be absent if the end of the response list has been reached.
          type: string
        builds:
          type: array
          items:
            $ref: '#/components/schemas/Build'
          description: 'Builds will be sorted by `create_time`, descending.'
      id: ListBuildsResponse
      type: object
      description: Response including listed builds.
    DeleteGitHubEnterpriseConfigOperationMetadata:
      id: DeleteGitHubEnterpriseConfigOperationMetadata
      properties:
        githubEnterpriseConfig:
          type: string
          description: 'The resource name of the GitHubEnterprise to be deleted. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.'
        completeTime:
          format: google-datetime
          type: string
          description: Time the operation was completed.
        createTime:
          format: google-datetime
          type: string
          description: Time the operation was created.
      description: Metadata for `DeleteGitHubEnterpriseConfig` operation.
      type: object
    PythonPackage:
      id: PythonPackage
      type: object
      description: Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
      properties:
        repository:
          type: string
          description: 'Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.'
        paths:
          type: array
          description: 'Path globs used to match files in the build''s workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.'
          items:
            type: string
    UpdateBitbucketServerConfigOperationMetadata:
      id: UpdateBitbucketServerConfigOperationMetadata
      properties:
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        completeTime:
          type: string
          description: Time the operation was completed.
          format: google-datetime
        bitbucketServerConfig:
          type: string
          description: 'The resource name of the BitbucketServerConfig to be updated. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.'
      type: object
      description: Metadata for `UpdateBitbucketServerConfig` operation.
    Secrets:
      id: Secrets
      type: object
      description: Secrets and secret environment variables.
      properties:
        inline:
          type: array
          description: Secrets encrypted with KMS key and the associated secret environment variable.
          items:
            $ref: '#/components/schemas/InlineSecret'
        secretManager:
          type: array
          description: Secrets in Secret Manager and associated secret environment variable.
          items:
            $ref: '#/components/schemas/SecretManagerSecret'
    BitbucketServerSecrets:
      description: BitbucketServerSecrets represents the secrets in Secret Manager for a Bitbucket Server.
      properties:
        readAccessTokenVersionName:
          description: Required. The resource name for the read access token's secret version.
          type: string
        adminAccessTokenVersionName:
          type: string
          description: Required. The resource name for the admin access token's secret version.
        webhookSecretVersionName:
          type: string
          description: 'Required. Immutable. The resource name for the webhook secret''s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.'
      type: object
      id: BitbucketServerSecrets
    BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata:
      type: object
      id: BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata
      properties:
        config:
          description: 'The name of the `BitbucketServerConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`'
          type: string
        completeTime:
          description: Time the operation was completed.
          format: google-datetime
          type: string
        createTime:
          description: Time the operation was created.
          type: string
          format: google-datetime
      description: Metadata for `BatchCreateBitbucketServerConnectedRepositories` operation.
    RepoSource:
      type: object
      properties:
        tagName:
          description: 'Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax'
          type: string
        repoName:
          type: string
          description: Name of the Cloud Source Repository.
        branchName:
          description: 'Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax'
          type: string
        invertRegex:
          type: boolean
          description: Only trigger a build if the revision regex does NOT match the revision regex.
        substitutions:
          type: object
          description: Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
          additionalProperties:
            type: string
        projectId:
          type: string
          description: 'ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.'
        dir:
          type: string
          description: 'Directory, relative to the source root, in which to run the build. This must be a relative path. If a step''s `dir` is specified and is an absolute path, this value is ignored for that step''s execution.'
        commitSha:
          description: Explicit commit SHA to build.
          type: string
      description: Location of the source in a Google Cloud Source Repository.
      id: RepoSource
    PrivatePoolV1Config:
      description: Configuration for a V1 `PrivatePool`.
      id: PrivatePoolV1Config
      properties:
        workerConfig:
          description: Machine configuration for the workers in the pool.
          $ref: '#/components/schemas/WorkerConfig'
        networkConfig:
          description: Network configuration for the pool.
          $ref: '#/components/schemas/NetworkConfig'
      type: object
    GitHubEnterpriseSecrets:
      id: GitHubEnterpriseSecrets
      description: 'GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.'
      properties:
        oauthSecretName:
          type: string
          description: The resource name for the OAuth secret in Secret Manager.
          deprecated: true
        oauthSecretVersionName:
          description: The resource name for the OAuth secret secret version in Secret Manager.
          type: string
        privateKeyName:
          deprecated: true
          description: The resource name for the private key secret.
          type: string
        oauthClientIdName:
          deprecated: true
          description: The resource name for the OAuth client ID secret in Secret Manager.
          type: string
        oauthClientIdVersionName:
          description: The resource name for the OAuth client ID secret version in Secret Manager.
          type: string
        webhookSecretName:
          deprecated: true
          type: string
          description: The resource name for the webhook secret in Secret Manager.
        privateKeyVersionName:
          description: The resource name for the private key secret version.
          type: string
        webhookSecretVersionName:
          description: The resource name for the webhook secret secret version in Secret Manager.
          type: string
      type: object
    Operation:
      properties:
        metadata:
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
        error:
          $ref: '#/components/schemas/Status'
          description: The error result of the operation in case of failure or cancellation.
        response:
          description: 'The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.'
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
          type: boolean
        name:
          type: string
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.'
      id: Operation
      type: object
      description: This resource represents a long-running operation that is the result of a network API call.
    ListBuildTriggersResponse:
      description: Response containing existing `BuildTriggers`.
      type: object
      id: ListBuildTriggersResponse
      properties:
        nextPageToken:
          type: string
          description: Token to receive the next page of results.
        triggers:
          type: array
          description: '`BuildTriggers` for the project, sorted by `create_time` descending.'
          items:
            $ref: '#/components/schemas/BuildTrigger'
    TimeSpan:
      description: Start and end times for a build execution phase.
      type: object
      id: TimeSpan
      properties:
        endTime:
          format: google-datetime
          type: string
          description: End of time span.
        startTime:
          format: google-datetime
          type: string
          description: Start of time span.
    RemoveGitLabConnectedRepositoryRequest:
      properties:
        connectedRepository:
          $ref: '#/components/schemas/GitLabRepositoryId'
          description: The connected repository to remove.
      id: RemoveGitLabConnectedRepositoryRequest
      type: object
      description: RPC request object accepted by RemoveGitLabConnectedRepository RPC method.
    GitLabEnterpriseConfig:
      properties:
        serviceDirectoryConfig:
          $ref: '#/components/schemas/ServiceDirectoryConfig'
          description: The Service Directory configuration to be used when reaching out to the GitLab Enterprise instance.
        hostUri:
          description: Immutable. The URI of the GitlabEnterprise host.
          type: string
        sslCa:
          type: string
          description: The SSL certificate to use in requests to GitLab Enterprise instances.
      id: GitLabEnterpriseConfig
      description: GitLabEnterpriseConfig represents the configuration for a GitLabEnterprise integration.
      type: object
    ApprovalResult:
      properties:
        url:
          type: string
          description: 'Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.'
        approverAccount:
          type: string
          readOnly: true
          description: Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.
        approvalTime:
          description: Output only. The time when the approval decision was made.
          format: google-datetime
          type: string
          readOnly: true
        comment:
          type: string
          description: Optional. An optional comment for this manual approval result.
        decision:
          type: string
          enum:
            - DECISION_UNSPECIFIED
            - APPROVED
            - REJECTED
          enumDescriptions:
            - Default enum type. This should not be used.
            - Build is approved.
            - Build is rejected.
          description: Required. The decision of this manual approval.
      type: object
      description: ApprovalResult describes the decision and associated metadata of a manual approval of a build.
      id: ApprovalResult
    CreateBitbucketServerConnectedRepositoryRequest:
      id: CreateBitbucketServerConnectedRepositoryRequest
      properties:
        bitbucketServerConnectedRepository:
          $ref: '#/components/schemas/BitbucketServerConnectedRepository'
          description: Required. The Bitbucket Server repository to connect.
        parent:
          type: string
          description: 'Required. The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`'
      description: Request to connect a repository from a connected Bitbucket Server host.
      type: object
    Volume:
      description: Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
      type: object
      id: Volume
      properties:
        path:
          type: string
          description: Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
        name:
          description: Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
          type: string
    OperationMetadata:
      id: OperationMetadata
      properties:
        verb:
          readOnly: true
          type: string
          description: Output only. Name of the verb executed by the operation.
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
        cancelRequested:
          description: 'Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
          readOnly: true
          type: boolean
        createTime:
          type: string
          description: Output only. The time the operation was created.
          format: google-datetime
          readOnly: true
        target:
          readOnly: true
          type: string
          description: Output only. Server-defined resource path for the target of the operation.
        statusDetail:
          type: string
          readOnly: true
          description: 'Output only. Human-readable status of the operation, if any.'
        endTime:
          description: Output only. The time the operation finished running.
          format: google-datetime
          type: string
          readOnly: true
      description: Represents the metadata of the long-running operation.
      type: object
    RemoveBitbucketServerConnectedRepositoryRequest:
      description: RPC request object accepted by RemoveBitbucketServerConnectedRepository RPC method.
      id: RemoveBitbucketServerConnectedRepositoryRequest
      type: object
      properties:
        connectedRepository:
          $ref: '#/components/schemas/BitbucketServerRepositoryId'
          description: The connected repository to remove.
    ArtifactResult:
      id: ArtifactResult
      description: An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file.
      type: object
      properties:
        fileHash:
          type: array
          description: The file hash of the artifact.
          items:
            $ref: '#/components/schemas/FileHashes'
        location:
          description: 'The path of an artifact in a Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`.'
          type: string
    BuildOptions:
      type: object
      description: Optional arguments to enable specific features of builds.
      id: BuildOptions
      properties:
        logging:
          enumDeprecated:
            - false
            - false
            - false
            - true
            - false
            - false
          description: 'Option to specify the logging mode, which determines if and where build logs are stored.'
          enumDescriptions:
            - The service determines the logging mode. The default is `LEGACY`. Do not rely on the default logging behavior as it may change in the future.
            - Build logs are stored in Cloud Logging and Cloud Storage.
            - Build logs are stored in Cloud Storage.
            - This option is the same as CLOUD_LOGGING_ONLY.
            - 'Build logs are stored in Cloud Logging. Selecting this option will not allow [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).'
            - Turn off all logging. No build logs will be captured.
          type: string
          enum:
            - LOGGING_UNSPECIFIED
            - LEGACY
            - GCS_ONLY
            - STACKDRIVER_ONLY
            - CLOUD_LOGGING_ONLY
            - NONE
        automapSubstitutions:
          description: Option to include built-in and custom substitutions as env variables for all build steps.
          type: boolean
        requestedVerifyOption:
          type: string
          description: Requested verifiability options.
          enumDescriptions:
            - Not a verifiable build (the default).
            - Build must be verified.
          enum:
            - NOT_VERIFIED
            - VERIFIED
        sourceProvenanceHash:
          description: Requested hash for SourceProvenance.
          type: array
          items:
            type: string
            enumDescriptions:
              - No hash requested.
              - Use a sha256 hash.
              - Use a md5 hash.
              - Use a sha512 hash.
            enum:
              - NONE
              - SHA256
              - MD5
              - SHA512
        volumes:
          items:
            $ref: '#/components/schemas/Volume'
          type: array
          description: 'Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.'
        secretEnv:
          description: 'A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build''s `Secret`. These variables will be available to all build steps in this build.'
          type: array
          items:
            type: string
        machineType:
          description: Compute Engine machine type on which to run the build.
          enumDescriptions:
            - Standard machine type.
            - Highcpu machine with 8 CPUs.
            - Highcpu machine with 32 CPUs.
            - Highcpu e2 machine with 8 CPUs.
            - Highcpu e2 machine with 32 CPUs.
            - E2 machine with 1 CPU.
          enum:
            - UNSPECIFIED
            - N1_HIGHCPU_8
            - N1_HIGHCPU_32
            - E2_HIGHCPU_8
            - E2_HIGHCPU_32
            - E2_MEDIUM
          type: string
        diskSizeGb:
          description: 'Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.'
          format: int64
          type: string
        defaultLogsBucketBehavior:
          description: Optional. Option to specify how default logs buckets are setup.
          enum:
            - DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED
            - REGIONAL_USER_OWNED_BUCKET
          enumDescriptions:
            - Unspecified.
            - Bucket is located in user-owned project in the same region as the build. The builder service account must have access to create and write to Cloud Storage buckets in the build project.
          type: string
        pool:
          $ref: '#/components/schemas/PoolOption'
          description: 'Optional. Specification for execution on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.'
        dynamicSubstitutions:
          description: 'Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.'
          type: boolean
        env:
          items:
            type: string
          description: 'A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".'
          type: array
        workerPool:
          deprecated: true
          description: This field deprecated; please use `pool.name` instead.
          type: string
        substitutionOption:
          description: 'Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.'
          type: string
          enumDescriptions:
            - 'Fails the build if error in substitutions checks, like missing a substitution in the template or in the map.'
            - Do not fail the build if error in substitutions checks.
          enum:
            - MUST_MATCH
            - ALLOW_LOOSE
        logStreamingOption:
          description: Option to define build log streaming behavior to Cloud Storage.
          enumDescriptions:
            - Service may automatically determine build log streaming behavior.
            - Build logs should be streamed to Cloud Storage.
            - Build logs should not be streamed to Cloud Storage; they will be written when the build is completed.
          type: string
          enum:
            - STREAM_DEFAULT
            - STREAM_ON
            - STREAM_OFF
    Artifacts:
      description: Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
      id: Artifacts
      type: object
      properties:
        npmPackages:
          description: 'A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account''s credentials. If any packages fail to be pushed, the build is marked FAILURE.'
          items:
            $ref: '#/components/schemas/NpmPackage'
          type: array
        mavenArtifacts:
          items:
            $ref: '#/components/schemas/MavenArtifact'
          type: array
          description: 'A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account''s credentials. If any artifacts fail to be pushed, the build is marked FAILURE.'
        images:
          description: 'A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account''s credentials. The digests of the pushed images will be stored in the Build resource''s results field. If any of the images fail to be pushed, the build is marked FAILURE.'
          type: array
          items:
            type: string
        objects:
          $ref: '#/components/schemas/ArtifactObjects'
          description: 'A list of objects to be uploaded to Cloud Storage upon successful completion of all build steps. Files in the workspace matching specified paths globs will be uploaded to the specified Cloud Storage location using the builder service account''s credentials. The location and generation of the uploaded objects will be stored in the Build resource''s results field. If any objects fail to be pushed, the build is marked FAILURE.'
        pythonPackages:
          items:
            $ref: '#/components/schemas/PythonPackage'
          type: array
          description: 'A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.'
    UploadedPythonPackage:
      id: UploadedPythonPackage
      type: object
      description: Artifact uploaded using the PythonPackage directive.
      properties:
        pushTiming:
          description: Output only. Stores timing information for pushing the specified artifact.
          $ref: '#/components/schemas/TimeSpan'
          readOnly: true
        fileHashes:
          $ref: '#/components/schemas/FileHashes'
          description: Hash types and values of the Python Artifact.
        uri:
          description: URI of the uploaded artifact.
          type: string
    FailureInfo:
      type: object
      id: FailureInfo
      description: A fatal problem encountered during the execution of the build.
      properties:
        detail:
          type: string
          description: Explains the failure issue in more detail using hard-coded text.
        type:
          enumDescriptions:
            - Type unspecified
            - Unable to push the image to the repository.
            - Final image not found.
            - Unauthorized push of the final image.
            - Backend logging failures. Should retry.
            - A build step has failed.
            - The source fetching has failed.
          description: The name of the failure.
          type: string
          enum:
            - FAILURE_TYPE_UNSPECIFIED
            - PUSH_FAILED
            - PUSH_IMAGE_NOT_FOUND
            - PUSH_NOT_AUTHORIZED
            - LOGGING_FAILURE
            - USER_BUILD_STEP
            - FETCH_SOURCE_FAILED
    UpdateGitHubEnterpriseConfigOperationMetadata:
      id: UpdateGitHubEnterpriseConfigOperationMetadata
      description: Metadata for `UpdateGitHubEnterpriseConfig` operation.
      type: object
      properties:
        createTime:
          type: string
          description: Time the operation was created.
          format: google-datetime
        githubEnterpriseConfig:
          type: string
          description: 'The resource name of the GitHubEnterprise to be updated. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.'
        completeTime:
          description: Time the operation was completed.
          format: google-datetime
          type: string
    ProcessAppManifestCallbackOperationMetadata:
      description: Metadata for `ProcessAppManifestCallback` operation.
      type: object
      properties:
        createTime:
          description: Time the operation was created.
          format: google-datetime
          type: string
        completeTime:
          format: google-datetime
          type: string
          description: Time the operation was completed.
        githubEnterpriseConfig:
          description: 'The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.'
          type: string
      id: ProcessAppManifestCallbackOperationMetadata
    ListGitLabRepositoriesResponse:
      properties:
        gitlabRepositories:
          description: List of GitLab repositories
          type: array
          items:
            $ref: '#/components/schemas/GitLabRepository'
        nextPageToken:
          description: 'A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
      description: RPC response object returned by the ListGitLabRepositories RPC method.
      type: object
      id: ListGitLabRepositoriesResponse
    Source:
      description: Location of the source in a supported storage service.
      properties:
        gitSource:
          description: 'If provided, get the source from this Git repository.'
          $ref: '#/components/schemas/GitSource'
        storageSourceManifest:
          description: 'If provided, get the source from this manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).'
          $ref: '#/components/schemas/StorageSourceManifest'
        connectedRepository:
          description: 'Optional. If provided, get the source from this 2nd-gen Google Cloud Build repository resource.'
          $ref: '#/components/schemas/ConnectedRepository'
        storageSource:
          $ref: '#/components/schemas/StorageSource'
          description: 'If provided, get the source from this location in Cloud Storage.'
        repoSource:
          description: 'If provided, get the source from this location in a Cloud Source Repository.'
          $ref: '#/components/schemas/RepoSource'
      type: object
      id: Source
    BuiltImage:
      id: BuiltImage
      type: object
      description: An image built by the pipeline.
      properties:
        digest:
          type: string
          description: Docker Registry 2.0 digest.
        name:
          description: 'Name used to push the container image to Google Container Registry, as presented to `docker push`.'
          type: string
        pushTiming:
          description: Output only. Stores timing information for pushing the specified image.
          readOnly: true
          $ref: '#/components/schemas/TimeSpan'
    Status:
      id: Status
      properties:
        details:
          type: array
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
        code:
          format: int32
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          type: integer
        message:
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
          type: string
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      type: object
    Warning:
      type: object
      id: Warning
      properties:
        text:
          description: Explanation of the warning generated.
          type: string
        priority:
          enum:
            - PRIORITY_UNSPECIFIED
            - INFO
            - WARNING
            - ALERT
          enumDescriptions:
            - Should not be used.
            - e.g. deprecation warnings and alternative feature highlights.
            - e.g. automated detection of possible issues with the build.
            - e.g. alerts that a feature used in the build is pending removal
          type: string
          description: The priority for this warning.
      description: A non-fatal problem encountered during the execution of the build.
    WebhookConfig:
      type: object
      properties:
        secret:
          type: string
          description: Required. Resource name for the secret required as a URL parameter.
        state:
          enumDescriptions:
            - The webhook auth configuration not been checked.
            - The auth configuration is properly setup.
            - The secret provided in auth_method has been deleted.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - OK
            - SECRET_DELETED
          description: Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
      id: WebhookConfig
      description: WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
    ListWorkerPoolsResponse:
      id: ListWorkerPoolsResponse
      description: Response containing existing `WorkerPools`.
      type: object
      properties:
        nextPageToken:
          description: Continuation token used to page through large result sets. Provide this value in a subsequent ListWorkerPoolsRequest to return the next page of results.
          type: string
        workerPools:
          items:
            $ref: '#/components/schemas/WorkerPool'
          type: array
          description: '`WorkerPools` for the specified project.'
    ReceiveTriggerWebhookResponse:
      id: ReceiveTriggerWebhookResponse
      description: 'ReceiveTriggerWebhookResponse [Experimental] is the response object for the ReceiveTriggerWebhook method.'
      type: object
      properties: {}
    Hash:
      id: Hash
      properties:
        value:
          format: byte
          type: string
          description: The hash value.
        type:
          type: string
          description: The type of hash that was performed.
          enumDescriptions:
            - No hash requested.
            - Use a sha256 hash.
            - Use a md5 hash.
            - Use a sha512 hash.
          enum:
            - NONE
            - SHA256
            - MD5
            - SHA512
      type: object
      description: Container message for hash values.
    BatchCreateBitbucketServerConnectedRepositoriesResponse:
      type: object
      id: BatchCreateBitbucketServerConnectedRepositoriesResponse
      description: Response of BatchCreateBitbucketServerConnectedRepositories RPC method including all successfully connected Bitbucket Server repositories.
      properties:
        bitbucketServerConnectedRepositories:
          description: The connected Bitbucket Server repositories.
          items:
            $ref: '#/components/schemas/BitbucketServerConnectedRepository'
          type: array
    NetworkConfig:
      description: Defines the network configuration for the pool.
      type: object
      properties:
        peeredNetworkIpRange:
          type: string
          description: 'Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used.'
        egressOption:
          enumDescriptions:
            - 'If set, defaults to PUBLIC_EGRESS.'
            - 'If set, workers are created without any public address, which prevents network egress to public IPs unless a network proxy is configured.'
            - 'If set, workers are created with a public address which allows for public internet egress.'
          enum:
            - EGRESS_OPTION_UNSPECIFIED
            - NO_PUBLIC_EGRESS
            - PUBLIC_EGRESS
          description: Option to configure network egress for the workers.
          type: string
        peeredNetwork:
          description: 'Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)'
          type: string
      id: NetworkConfig
    SecretManagerSecret:
      description: Pairs a secret environment variable with a SecretVersion in Secret Manager.
      id: SecretManagerSecret
      type: object
      properties:
        versionName:
          description: 'Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*'
          type: string
        env:
          type: string
          description: 'Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build''s secrets, and must be used by at least one build step.'
    BitbucketServerConnectedRepository:
      id: BitbucketServerConnectedRepository
      properties:
        parent:
          type: string
          description: 'The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`'
        status:
          description: Output only. The status of the repo connection request.
          readOnly: true
          $ref: '#/components/schemas/Status'
        repo:
          $ref: '#/components/schemas/BitbucketServerRepositoryId'
          description: The Bitbucket Server repositories to connect.
      type: object
      description: / BitbucketServerConnectedRepository represents a connected Bitbucket Server / repository.
    Secret:
      id: Secret
      description: 'Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.'
      type: object
      properties:
        kmsKeyName:
          type: string
          description: Cloud KMS key name to use to decrypt these envs.
        secretEnv:
          additionalProperties:
            type: string
            format: byte
          description: 'Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build''s secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build''s secrets.'
          type: object
    RepositoryEventConfig:
      id: RepositoryEventConfig
      description: The configuration of a trigger that creates a build whenever an event from Repo API is received.
      type: object
      properties:
        repository:
          type: string
          description: The resource name of the Repo API resource.
        push:
          $ref: '#/components/schemas/PushFilter'
          description: 'Filter to match changes in refs like branches, tags.'
        repositoryType:
          enum:
            - REPOSITORY_TYPE_UNSPECIFIED
            - GITHUB
            - GITHUB_ENTERPRISE
            - GITLAB_ENTERPRISE
          description: Output only. The type of the SCM vendor the repository points to.
          enumDescriptions:
            - 'If unspecified, RepositoryType defaults to GITHUB.'
            - The SCM repo is GITHUB.
            - The SCM repo is GITHUB Enterprise.
            - The SCM repo is GITLAB Enterprise.
          readOnly: true
          type: string
        pullRequest:
          description: Filter to match changes in pull requests.
          $ref: '#/components/schemas/PullRequestFilter'
    BatchCreateGitLabConnectedRepositoriesResponseMetadata:
      properties:
        completeTime:
          type: string
          format: google-datetime
          description: Time the operation was completed.
        config:
          type: string
          description: 'The name of the `GitLabConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`'
        createTime:
          format: google-datetime
          type: string
          description: Time the operation was created.
      id: BatchCreateGitLabConnectedRepositoriesResponseMetadata
      description: Metadata for `BatchCreateGitLabConnectedRepositories` operation.
      type: object
    FileHashes:
      description: 'Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.'
      type: object
      properties:
        fileHash:
          type: array
          items:
            $ref: '#/components/schemas/Hash'
          description: Collection of file hashes.
      id: FileHashes
    BitbucketServerRepositoryId:
      type: object
      description: BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.
      properties:
        repoSlug:
          type: string
          description: Required. Identifier for the repository.
        webhookId:
          readOnly: true
          type: integer
          format: int32
          description: Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
        projectKey:
          type: string
          description: Required. Identifier for the project storing the repository.
      id: BitbucketServerRepositoryId
    Build:
      id: Build
      description: 'A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.'
      properties:
        projectId:
          readOnly: true
          type: string
          description: Output only. ID of the project.
        approval:
          description: 'Output only. Describes this build''s approval configuration, status, and result.'
          readOnly: true
          $ref: '#/components/schemas/BuildApproval'
        tags:
          type: array
          description: Tags for annotation of a `Build`. These are not docker tags.
          items:
            type: string
        startTime:
          readOnly: true
          description: Output only. Time at which execution of the build was started.
          type: string
          format: google-datetime
        timing:
          description: 'Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.'
          additionalProperties:
            $ref: '#/components/schemas/TimeSpan'
          type: object
          readOnly: true
        queueTtl:
          type: string
          description: 'TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.'
          format: google-duration
        name:
          type: string
          readOnly: true
          description: 'Output only. The ''Build'' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.'
        availableSecrets:
          description: Secrets and secret environment variables.
          $ref: '#/components/schemas/Secrets'
        createTime:
          type: string
          format: google-datetime
          readOnly: true
          description: Output only. Time at which the request to create the build was received.
        failureInfo:
          description: Output only. Contains information about the build when status=FAILURE.
          $ref: '#/components/schemas/FailureInfo'
          readOnly: true
        timeout:
          format: google-duration
          type: string
          description: 'Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.'
        statusDetail:
          description: Output only. Customer-readable message about the current status.
          type: string
          readOnly: true
        source:
          description: The location of the source files to build.
          $ref: '#/components/schemas/Source'
        options:
          $ref: '#/components/schemas/BuildOptions'
          description: Special options for this build.
        images:
          items:
            type: string
          description: 'A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account''s credentials. The digests of the pushed images will be stored in the `Build` resource''s results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.'
          type: array
        sourceProvenance:
          description: Output only. A permanent fixed identifier for source.
          readOnly: true
          $ref: '#/components/schemas/SourceProvenance'
        finishTime:
          readOnly: true
          type: string
          format: google-datetime
          description: Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
        serviceAccount:
          description: 'IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. '
          type: string
        logUrl:
          readOnly: true
          description: Output only. URL to logs for this build in Google Cloud Console.
          type: string
        warnings:
          description: Output only. Non-fatal problems encountered during the execution of the build.
          items:
            $ref: '#/components/schemas/Warning'
          readOnly: true
          type: array
        artifacts:
          $ref: '#/components/schemas/Artifacts'
          description: Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
        steps:
          description: Required. The operations to be performed on the workspace.
          items:
            $ref: '#/components/schemas/BuildStep'
          type: array
        id:
          description: Output only. Unique identifier of the build.
          type: string
          readOnly: true
        secrets:
          type: array
          description: 'Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets'
          items:
            $ref: '#/components/schemas/Secret'
        results:
          readOnly: true
          $ref: '#/components/schemas/Results'
          description: Output only. Results of the build.
        logsBucket:
          description: 'Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.'
          type: string
        buildTriggerId:
          readOnly: true
          description: 'Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.'
          type: string
        status:
          readOnly: true
          description: Output only. Status of the build.
          type: string
          enum:
            - STATUS_UNKNOWN
            - PENDING
            - QUEUED
            - WORKING
            - SUCCESS
            - FAILURE
            - INTERNAL_ERROR
            - TIMEOUT
            - CANCELLED
            - EXPIRED
          enumDescriptions:
            - Status of the build is unknown.
            - Build has been created and is pending execution and queuing. It has not been queued.
            - Build or step is queued; work has not yet begun.
            - Build or step is being executed.
            - Build or step finished successfully.
            - Build or step failed to complete successfully.
            - Build or step failed due to an internal cause.
            - Build or step took longer than was allowed.
            - Build or step was canceled by a user.
            - Build was enqueued for longer than the value of `queue_ttl`.
        substitutions:
          description: Substitutions data for `Build` resource.
          type: object
          additionalProperties:
            type: string
      type: object
  parameters:
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
  x-stackQL-resources:
    operations:
      id: google.cloudbuild.operations
      name: operations
      title: Operations
      methods:
        operations_cancel:
          operation:
            $ref: '#/paths/~1v1~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        operations_get:
          operation:
            $ref: '#/paths/~1v1~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/operations_get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_get'
        insert: []
        update: []
        delete: []
    triggers:
      id: google.cloudbuild.triggers
      name: triggers
      title: Triggers
      methods:
        projects_triggers_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1triggers~1{triggerId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_triggers_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1triggers~1{triggerId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_triggers_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1triggers~1{triggerId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_triggers_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1triggers/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_triggers_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1triggers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.triggers
        _projects_triggers_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1triggers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_triggers_webhook:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1triggers~1{trigger}:webhook/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_triggers_run:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1triggers~1{triggerId}:run/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_triggers_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.triggers
        _projects_locations_triggers_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_triggers_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_triggers_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers~1{triggersId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_triggers_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers~1{triggersId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_triggers_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers~1{triggersId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_triggers_webhook:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers~1{triggersId}:webhook/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_triggers_run:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers~1{triggersId}:run/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/triggers/methods/projects_triggers_get'
          - $ref: '#/components/x-stackQL-resources/triggers/methods/projects_triggers_list'
          - $ref: '#/components/x-stackQL-resources/triggers/methods/projects_locations_triggers_list'
          - $ref: '#/components/x-stackQL-resources/triggers/methods/projects_locations_triggers_get'
        insert:
          - $ref: '#/components/x-stackQL-resources/triggers/methods/projects_triggers_create'
          - $ref: '#/components/x-stackQL-resources/triggers/methods/projects_locations_triggers_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/triggers/methods/projects_triggers_delete'
          - $ref: '#/components/x-stackQL-resources/triggers/methods/projects_locations_triggers_delete'
    github_enterprise_configs:
      id: google.cloudbuild.github_enterprise_configs
      name: github_enterprise_configs
      title: Github Enterprise Configs
      methods:
        projects_github_enterprise_configs_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1githubEnterpriseConfigs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_github_enterprise_configs_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1githubEnterpriseConfigs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_github_enterprise_configs_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1githubEnterpriseConfigs~1{githubEnterpriseConfigsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_github_enterprise_configs_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1githubEnterpriseConfigs~1{githubEnterpriseConfigsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_github_enterprise_configs_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1githubEnterpriseConfigs~1{githubEnterpriseConfigsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_github_enterprise_configs_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1githubEnterpriseConfigs~1{githubEnterpriseConfigsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_github_enterprise_configs_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1githubEnterpriseConfigs~1{githubEnterpriseConfigsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_github_enterprise_configs_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1githubEnterpriseConfigs~1{githubEnterpriseConfigsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_github_enterprise_configs_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1githubEnterpriseConfigs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_github_enterprise_configs_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1githubEnterpriseConfigs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/github_enterprise_configs/methods/projects_github_enterprise_configs_list'
          - $ref: '#/components/x-stackQL-resources/github_enterprise_configs/methods/projects_github_enterprise_configs_get'
          - $ref: '#/components/x-stackQL-resources/github_enterprise_configs/methods/projects_locations_github_enterprise_configs_get'
          - $ref: '#/components/x-stackQL-resources/github_enterprise_configs/methods/projects_locations_github_enterprise_configs_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/github_enterprise_configs/methods/projects_github_enterprise_configs_create'
          - $ref: '#/components/x-stackQL-resources/github_enterprise_configs/methods/projects_locations_github_enterprise_configs_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/github_enterprise_configs/methods/projects_github_enterprise_configs_delete'
          - $ref: '#/components/x-stackQL-resources/github_enterprise_configs/methods/projects_locations_github_enterprise_configs_delete'
    builds:
      id: google.cloudbuild.builds
      name: builds
      title: Builds
      methods:
        projects_builds_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1builds~1{id}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_builds_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1builds/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.builds
        _projects_builds_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1builds/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_builds_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1builds/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_builds_retry:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1builds~1{id}:retry/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_builds_approve:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1builds~1{buildsId}:approve/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_builds_cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectId}~1builds~1{id}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_builds_approve:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1builds~1{buildsId}:approve/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_builds_cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1builds~1{buildsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_builds_retry:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1builds~1{buildsId}:retry/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_builds_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1builds~1{buildsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_builds_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1builds/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_builds_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1builds/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.builds
        _projects_locations_builds_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1builds/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/builds/methods/projects_builds_get'
          - $ref: '#/components/x-stackQL-resources/builds/methods/projects_builds_list'
          - $ref: '#/components/x-stackQL-resources/builds/methods/projects_locations_builds_get'
          - $ref: '#/components/x-stackQL-resources/builds/methods/projects_locations_builds_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/builds/methods/projects_builds_create'
          - $ref: '#/components/x-stackQL-resources/builds/methods/projects_locations_builds_create'
        update: []
        delete: []
    connected_repositories:
      id: google.cloudbuild.connected_repositories
      name: connected_repositories
      title: Connected Repositories
      methods:
        projects_locations_gitlab_configs_connected_repositories_batch_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1gitLabConfigs~1{gitLabConfigsId}~1connectedRepositories:batchCreate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_bitbucket_server_configs_connected_repositories_batch_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1bitbucketServerConfigs~1{bitbucketServerConfigsId}~1connectedRepositories:batchCreate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    gitlab_repos:
      id: google.cloudbuild.gitlab_repos
      name: gitlab_repos
      title: Gitlab Repos
      methods:
        projects_locations_gitlab_configs_repos_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1gitLabConfigs~1{gitLabConfigsId}~1repos/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.gitlabRepositories
        _projects_locations_gitlab_configs_repos_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1gitLabConfigs~1{gitLabConfigsId}~1repos/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/gitlab_repos/methods/projects_locations_gitlab_configs_repos_list'
        insert: []
        update: []
        delete: []
    gitlab_configs:
      id: google.cloudbuild.gitlab_configs
      name: gitlab_configs
      title: Gitlab Configs
      methods:
        projects_locations_gitlab_configs_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1gitLabConfigs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_gitlab_configs_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1gitLabConfigs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.gitlabConfigs
        _projects_locations_gitlab_configs_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1gitLabConfigs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_gitlab_configs_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1gitLabConfigs~1{gitLabConfigsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_gitlab_configs_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1gitLabConfigs~1{gitLabConfigsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_gitlab_configs_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1gitLabConfigs~1{gitLabConfigsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/gitlab_configs/methods/projects_locations_gitlab_configs_list'
          - $ref: '#/components/x-stackQL-resources/gitlab_configs/methods/projects_locations_gitlab_configs_get'
        insert:
          - $ref: '#/components/x-stackQL-resources/gitlab_configs/methods/projects_locations_gitlab_configs_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/gitlab_configs/methods/projects_locations_gitlab_configs_delete'
    gitlab_configs_gitlab_connected_repository:
      id: google.cloudbuild.gitlab_configs_gitlab_connected_repository
      name: gitlab_configs_gitlab_connected_repository
      title: Gitlab Configs Gitlab Connected Repository
      methods:
        projects_locations_gitlab_configs_removegitlab_connected_repository:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1gitLabConfigs~1{gitLabConfigsId}:removeGitLabConnectedRepository/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    bitbucket_server_configs:
      id: google.cloudbuild.bitbucket_server_configs
      name: bitbucket_server_configs
      title: Bitbucket Server Configs
      methods:
        projects_locations_bitbucket_server_configs_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1bitbucketServerConfigs~1{bitbucketServerConfigsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_bitbucket_server_configs_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1bitbucketServerConfigs~1{bitbucketServerConfigsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_bitbucket_server_configs_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1bitbucketServerConfigs~1{bitbucketServerConfigsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_bitbucket_server_configs_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1bitbucketServerConfigs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bitbucketServerConfigs
        _projects_locations_bitbucket_server_configs_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1bitbucketServerConfigs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_bitbucket_server_configs_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1bitbucketServerConfigs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/bitbucket_server_configs/methods/projects_locations_bitbucket_server_configs_get'
          - $ref: '#/components/x-stackQL-resources/bitbucket_server_configs/methods/projects_locations_bitbucket_server_configs_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/bitbucket_server_configs/methods/projects_locations_bitbucket_server_configs_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/bitbucket_server_configs/methods/projects_locations_bitbucket_server_configs_delete'
    bitbucket_server_configs_bitbucket_server_connected_repository:
      id: google.cloudbuild.bitbucket_server_configs_bitbucket_server_connected_repository
      name: bitbucket_server_configs_bitbucket_server_connected_repository
      title: Bitbucket Server Configs Bitbucket Server Connected Repository
      methods:
        projects_locations_bitbucket_server_configs_remove_bitbucket_server_connected_repository:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1bitbucketServerConfigs~1{bitbucketServerConfigsId}:removeBitbucketServerConnectedRepository/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    bitbucket_repos:
      id: google.cloudbuild.bitbucket_repos
      name: bitbucket_repos
      title: Bitbucket Repos
      methods:
        projects_locations_bitbucket_server_configs_repos_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1bitbucketServerConfigs~1{bitbucketServerConfigsId}~1repos/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bitbucketServerRepositories
        _projects_locations_bitbucket_server_configs_repos_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1bitbucketServerConfigs~1{bitbucketServerConfigsId}~1repos/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/bitbucket_repos/methods/projects_locations_bitbucket_server_configs_repos_list'
        insert: []
        update: []
        delete: []
    worker_pools:
      id: google.cloudbuild.worker_pools
      name: worker_pools
      title: Worker Pools
      methods:
        projects_locations_worker_pools_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1workerPools/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.workerPools
        _projects_locations_worker_pools_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1workerPools/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_worker_pools_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1workerPools/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_worker_pools_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1workerPools~1{workerPoolsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_worker_pools_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1workerPools~1{workerPoolsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_worker_pools_patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1workerPools~1{workerPoolsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/worker_pools/methods/projects_locations_worker_pools_list'
          - $ref: '#/components/x-stackQL-resources/worker_pools/methods/projects_locations_worker_pools_get'
        insert:
          - $ref: '#/components/x-stackQL-resources/worker_pools/methods/projects_locations_worker_pools_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/worker_pools/methods/projects_locations_worker_pools_delete'
    cloudbuild:
      id: google.cloudbuild.cloudbuild
      name: cloudbuild
      title: Cloudbuild
      methods:
        webhook:
          operation:
            $ref: '#/paths/~1v1~1webhook/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    locations:
      id: google.cloudbuild.locations
      name: locations
      title: Locations
      methods:
        locations_regional_webhook:
          operation:
            $ref: '#/paths/~1v1~1locations~1{locationsId}~1regionalWebhook/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    githubdotcom_webhook:
      id: google.cloudbuild.githubdotcom_webhook
      name: githubdotcom_webhook
      title: Githubdotcom Webhook
      methods:
        githubdotcom_webhook_receive:
          operation:
            $ref: '#/paths/~1v1~1githubDotComWebhook:receive/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
paths:
  '/v1/operations/{operationsId}:cancel':
    parameters: &ref_1
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/key'
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
      operationId: cloudbuild.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: operations_cancel
      x-stackQL-verb: exec
  '/v1/operations/{operationsId}':
    parameters: *ref_1
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: cloudbuild.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: operations_get
      x-stackQL-verb: select
  '/v1/projects/{projectId}/triggers/{triggerId}':
    parameters: *ref_1
    patch:
      description: Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental.
      operationId: cloudbuild.projects.triggers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildTrigger'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildTrigger'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: triggerId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_triggers_patch
      x-stackQL-verb: exec
    get:
      description: Returns information about a `BuildTrigger`. This API is experimental.
      operationId: cloudbuild.projects.triggers.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildTrigger'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: triggerId
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_triggers_get
      x-stackQL-verb: select
    delete:
      description: Deletes a `BuildTrigger` by its project ID and trigger ID. This API is experimental.
      operationId: cloudbuild.projects.triggers.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: triggerId
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_triggers_delete
      x-stackQL-verb: delete
  '/v1/projects/{projectId}/triggers':
    parameters: *ref_1
    post:
      description: Creates a new `BuildTrigger`. This API is experimental.
      operationId: cloudbuild.projects.triggers.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildTrigger'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildTrigger'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: query
          name: parent
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_triggers_create
      x-stackQL-verb: insert
    get:
      description: Lists existing `BuildTrigger`s. This API is experimental.
      operationId: cloudbuild.projects.triggers.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuildTriggersResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: parent
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_triggers_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.triggers
  '/v1/projects/{projectId}/triggers/{trigger}:webhook':
    parameters: *ref_1
    post:
      description: 'ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.'
      operationId: cloudbuild.projects.triggers.webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiveTriggerWebhookResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: trigger
          required: true
          schema:
            type: string
        - in: query
          name: secret
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_triggers_webhook
      x-stackQL-verb: exec
  '/v1/projects/{projectId}/triggers/{triggerId}:run':
    parameters: *ref_1
    post:
      description: 'Runs a `BuildTrigger` at a particular source revision. To run a regional or global trigger, use the POST request that includes the location endpoint in the path (ex. v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The POST request that does not include the location endpoint in the path can only be used when running global triggers.'
      operationId: cloudbuild.projects.triggers.run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepoSource'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: triggerId
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_triggers_run
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/githubEnterpriseConfigs':
    parameters: *ref_1
    get:
      description: List all GitHubEnterpriseConfigs for a given project.
      operationId: cloudbuild.projects.githubEnterpriseConfigs.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGithubEnterpriseConfigsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-method: projects_github_enterprise_configs_list
      x-stackQL-verb: select
    post:
      description: Create an association between a GCP project and a GitHub Enterprise server.
      operationId: cloudbuild.projects.githubEnterpriseConfigs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitHubEnterpriseConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: gheConfigId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-method: projects_github_enterprise_configs_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}':
    parameters: *ref_1
    patch:
      description: Update an association between a GCP project and a GitHub Enterprise server.
      operationId: cloudbuild.projects.githubEnterpriseConfigs.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitHubEnterpriseConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: githubEnterpriseConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-method: projects_github_enterprise_configs_patch
      x-stackQL-verb: exec
    get:
      description: Retrieve a GitHubEnterpriseConfig.
      operationId: cloudbuild.projects.githubEnterpriseConfigs.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubEnterpriseConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: githubEnterpriseConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: configId
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-method: projects_github_enterprise_configs_get
      x-stackQL-verb: select
    delete:
      description: Delete an association between a GCP project and a GitHub Enterprise server.
      operationId: cloudbuild.projects.githubEnterpriseConfigs.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: githubEnterpriseConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: configId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-method: projects_github_enterprise_configs_delete
      x-stackQL-verb: delete
  '/v1/projects/{projectId}/builds/{id}':
    parameters: *ref_1
    get:
      description: 'Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.'
      operationId: cloudbuild.projects.builds.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: name
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-method: projects_builds_get
      x-stackQL-verb: select
  '/v1/projects/{projectId}/builds':
    parameters: *ref_1
    get:
      description: 'Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.'
      operationId: cloudbuild.projects.builds.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuildsResponse'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: parent
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-method: projects_builds_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.builds
    post:
      description: 'Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).'
      operationId: cloudbuild.projects.builds.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Build'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: query
          name: parent
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-method: projects_builds_create
      x-stackQL-verb: insert
  '/v1/projects/{projectId}/builds/{id}:retry':
    parameters: *ref_1
    post:
      description: 'Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket''s lifecycle management settings.'
      operationId: cloudbuild.projects.builds.retry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetryBuildRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-method: projects_builds_retry
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/builds/{buildsId}:approve':
    parameters: *ref_1
    post:
      description: 'Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.'
      operationId: cloudbuild.projects.builds.approve
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveBuildRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: buildsId
          required: true
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-method: projects_builds_approve
      x-stackQL-verb: exec
  '/v1/projects/{projectId}/builds/{id}:cancel':
    parameters: *ref_1
    post:
      description: Cancels a build in progress.
      operationId: cloudbuild.projects.builds.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelBuildRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: string
        - in: path
          name: id
          required: true
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-method: projects_builds_cancel
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}':
    parameters: *ref_1
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: cloudbuild.projects.locations.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: projects_locations_operations_get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel':
    parameters: *ref_1
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
      operationId: cloudbuild.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: projects_locations_operations_cancel
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}/connectedRepositories:batchCreate':
    parameters: *ref_1
    post:
      description: Batch connecting GitLab repositories to Cloud Build. This API is experimental.
      operationId: cloudbuild.projects.locations.gitLabConfigs.connectedRepositories.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateGitLabConnectedRepositoriesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: gitLabConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: connected_repositories
      x-stackQL-method: projects_locations_gitlab_configs_connected_repositories_batch_create
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}/repos':
    parameters: *ref_1
    get:
      description: List all repositories for a given `GitLabConfig`. This API is experimental
      operationId: cloudbuild.projects.locations.gitLabConfigs.repos.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGitLabRepositoriesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: gitLabConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: gitlab_repos
      x-stackQL-method: projects_locations_gitlab_configs_repos_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.gitlabRepositories
  '/v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs':
    parameters: *ref_1
    post:
      description: Creates a new `GitLabConfig`. This API is experimental
      operationId: cloudbuild.projects.locations.gitLabConfigs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitLabConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: gitlabConfigId
          schema:
            type: string
      x-stackQL-resource: gitlab_configs
      x-stackQL-method: projects_locations_gitlab_configs_create
      x-stackQL-verb: insert
    get:
      description: List all `GitLabConfigs` for a given project. This API is experimental
      operationId: cloudbuild.projects.locations.gitLabConfigs.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGitLabConfigsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: gitlab_configs
      x-stackQL-method: projects_locations_gitlab_configs_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.gitlabConfigs
  '/v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}:removeGitLabConnectedRepository':
    parameters: *ref_1
    post:
      description: Remove a GitLab repository from a given GitLabConfig's connected repositories. This API is experimental.
      operationId: cloudbuild.projects.locations.gitLabConfigs.removeGitLabConnectedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveGitLabConnectedRepositoryRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: gitLabConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: gitlab_configs_gitlab_connected_repository
      x-stackQL-method: projects_locations_gitlab_configs_removegitlab_connected_repository
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/gitLabConfigs/{gitLabConfigsId}':
    parameters: *ref_1
    delete:
      description: Delete a `GitLabConfig`. This API is experimental
      operationId: cloudbuild.projects.locations.gitLabConfigs.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: gitLabConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: gitlab_configs
      x-stackQL-method: projects_locations_gitlab_configs_delete
      x-stackQL-verb: delete
    get:
      description: Retrieves a `GitLabConfig`. This API is experimental
      operationId: cloudbuild.projects.locations.gitLabConfigs.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitLabConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: gitLabConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: gitlab_configs
      x-stackQL-method: projects_locations_gitlab_configs_get
      x-stackQL-verb: select
    patch:
      description: Updates an existing `GitLabConfig`. This API is experimental
      operationId: cloudbuild.projects.locations.gitLabConfigs.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitLabConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: gitLabConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: gitlab_configs
      x-stackQL-method: projects_locations_gitlab_configs_patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs/{githubEnterpriseConfigsId}':
    parameters: *ref_1
    patch:
      description: Update an association between a GCP project and a GitHub Enterprise server.
      operationId: cloudbuild.projects.locations.githubEnterpriseConfigs.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitHubEnterpriseConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: githubEnterpriseConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-method: projects_locations_github_enterprise_configs_patch
      x-stackQL-verb: exec
    delete:
      description: Delete an association between a GCP project and a GitHub Enterprise server.
      operationId: cloudbuild.projects.locations.githubEnterpriseConfigs.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: githubEnterpriseConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: configId
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-method: projects_locations_github_enterprise_configs_delete
      x-stackQL-verb: delete
    get:
      description: Retrieve a GitHubEnterpriseConfig.
      operationId: cloudbuild.projects.locations.githubEnterpriseConfigs.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GitHubEnterpriseConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: githubEnterpriseConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: configId
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-method: projects_locations_github_enterprise_configs_get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/githubEnterpriseConfigs':
    parameters: *ref_1
    get:
      description: List all GitHubEnterpriseConfigs for a given project.
      operationId: cloudbuild.projects.locations.githubEnterpriseConfigs.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGithubEnterpriseConfigsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-method: projects_locations_github_enterprise_configs_list
      x-stackQL-verb: select
    post:
      description: Create an association between a GCP project and a GitHub Enterprise server.
      operationId: cloudbuild.projects.locations.githubEnterpriseConfigs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GitHubEnterpriseConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: gheConfigId
          schema:
            type: string
      x-stackQL-resource: github_enterprise_configs
      x-stackQL-method: projects_locations_github_enterprise_configs_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}':
    parameters: *ref_1
    delete:
      description: Delete a `BitbucketServerConfig`. This API is experimental.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: bitbucket_server_configs
      x-stackQL-method: projects_locations_bitbucket_server_configs_delete
      x-stackQL-verb: delete
    patch:
      description: Updates an existing `BitbucketServerConfig`. This API is experimental.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BitbucketServerConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: bitbucket_server_configs
      x-stackQL-method: projects_locations_bitbucket_server_configs_patch
      x-stackQL-verb: exec
    get:
      description: Retrieve a `BitbucketServerConfig`. This API is experimental.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BitbucketServerConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: bitbucket_server_configs
      x-stackQL-method: projects_locations_bitbucket_server_configs_get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}:removeBitbucketServerConnectedRepository':
    parameters: *ref_1
    post:
      description: Remove a Bitbucket Server repository from a given BitbucketServerConfig's connected repositories. This API is experimental.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.removeBitbucketServerConnectedRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveBitbucketServerConnectedRepositoryRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: bitbucket_server_configs_bitbucket_server_connected_repository
      x-stackQL-method: projects_locations_bitbucket_server_configs_remove_bitbucket_server_connected_repository
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs':
    parameters: *ref_1
    get:
      description: List all `BitbucketServerConfigs` for a given project. This API is experimental.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBitbucketServerConfigsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: bitbucket_server_configs
      x-stackQL-method: projects_locations_bitbucket_server_configs_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bitbucketServerConfigs
    post:
      description: Creates a new `BitbucketServerConfig`. This API is experimental.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BitbucketServerConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: bitbucketServerConfigId
          schema:
            type: string
      x-stackQL-resource: bitbucket_server_configs
      x-stackQL-method: projects_locations_bitbucket_server_configs_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}/repos':
    parameters: *ref_1
    get:
      description: List all repositories for a given `BitbucketServerConfig`. This API is experimental.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.repos.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBitbucketServerRepositoriesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: bitbucket_repos
      x-stackQL-method: projects_locations_bitbucket_server_configs_repos_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bitbucketServerRepositories
  '/v1/projects/{projectsId}/locations/{locationsId}/bitbucketServerConfigs/{bitbucketServerConfigsId}/connectedRepositories:batchCreate':
    parameters: *ref_1
    post:
      description: Batch connecting Bitbucket Server repositories to Cloud Build.
      operationId: cloudbuild.projects.locations.bitbucketServerConfigs.connectedRepositories.batchCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchCreateBitbucketServerConnectedRepositoriesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: bitbucketServerConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: connected_repositories
      x-stackQL-method: projects_locations_bitbucket_server_configs_connected_repositories_batch_create
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/workerPools':
    parameters: *ref_1
    get:
      description: Lists `WorkerPool`s.
      operationId: cloudbuild.projects.locations.workerPools.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkerPoolsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: worker_pools
      x-stackQL-method: projects_locations_worker_pools_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.workerPools
    post:
      description: Creates a `WorkerPool`.
      operationId: cloudbuild.projects.locations.workerPools.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkerPool'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: workerPoolId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
      x-stackQL-resource: worker_pools
      x-stackQL-method: projects_locations_worker_pools_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/workerPools/{workerPoolsId}':
    parameters: *ref_1
    delete:
      description: Deletes a `WorkerPool`.
      operationId: cloudbuild.projects.locations.workerPools.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: workerPoolsId
          required: true
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: etag
          schema:
            type: string
        - in: query
          name: allowMissing
          schema:
            type: boolean
      x-stackQL-resource: worker_pools
      x-stackQL-method: projects_locations_worker_pools_delete
      x-stackQL-verb: delete
    get:
      description: Returns details of a `WorkerPool`.
      operationId: cloudbuild.projects.locations.workerPools.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerPool'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: workerPoolsId
          required: true
          schema:
            type: string
      x-stackQL-resource: worker_pools
      x-stackQL-method: projects_locations_worker_pools_get
      x-stackQL-verb: select
    patch:
      description: Updates a `WorkerPool`.
      operationId: cloudbuild.projects.locations.workerPools.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkerPool'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: workerPoolsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
      x-stackQL-resource: worker_pools
      x-stackQL-method: projects_locations_worker_pools_patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:approve':
    parameters: *ref_1
    post:
      description: 'Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.'
      operationId: cloudbuild.projects.locations.builds.approve
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApproveBuildRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: buildsId
          required: true
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-method: projects_locations_builds_approve
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:cancel':
    parameters: *ref_1
    post:
      description: Cancels a build in progress.
      operationId: cloudbuild.projects.locations.builds.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelBuildRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: buildsId
          required: true
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-method: projects_locations_builds_cancel
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}:retry':
    parameters: *ref_1
    post:
      description: 'Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket''s lifecycle management settings.'
      operationId: cloudbuild.projects.locations.builds.retry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetryBuildRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: buildsId
          required: true
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-method: projects_locations_builds_retry
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/builds/{buildsId}':
    parameters: *ref_1
    get:
      description: 'Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.'
      operationId: cloudbuild.projects.locations.builds.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Build'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: buildsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: id
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-method: projects_locations_builds_get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/builds':
    parameters: *ref_1
    post:
      description: 'Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).'
      operationId: cloudbuild.projects.locations.builds.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Build'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-method: projects_locations_builds_create
      x-stackQL-verb: insert
    get:
      description: 'Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.'
      operationId: cloudbuild.projects.locations.builds.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuildsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: builds
      x-stackQL-method: projects_locations_builds_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.builds
  '/v1/projects/{projectsId}/locations/{locationsId}/triggers':
    parameters: *ref_1
    get:
      description: Lists existing `BuildTrigger`s. This API is experimental.
      operationId: cloudbuild.projects.locations.triggers.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBuildTriggersResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_locations_triggers_list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.triggers
    post:
      description: Creates a new `BuildTrigger`. This API is experimental.
      operationId: cloudbuild.projects.locations.triggers.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildTrigger'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildTrigger'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_locations_triggers_create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}':
    parameters: *ref_1
    get:
      description: Returns information about a `BuildTrigger`. This API is experimental.
      operationId: cloudbuild.projects.locations.triggers.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildTrigger'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
        - in: query
          name: triggerId
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_locations_triggers_get
      x-stackQL-verb: select
    patch:
      description: Updates a `BuildTrigger` by its project ID and trigger ID. This API is experimental.
      operationId: cloudbuild.projects.locations.triggers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildTrigger'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildTrigger'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: triggerId
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_locations_triggers_patch
      x-stackQL-verb: exec
    delete:
      description: Deletes a `BuildTrigger` by its project ID and trigger ID. This API is experimental.
      operationId: cloudbuild.projects.locations.triggers.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
        - in: query
          name: triggerId
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_locations_triggers_delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:webhook':
    parameters: *ref_1
    post:
      description: 'ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.'
      operationId: cloudbuild.projects.locations.triggers.webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiveTriggerWebhookResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
        - in: query
          name: trigger
          schema:
            type: string
        - in: query
          name: secret
          schema:
            type: string
        - in: query
          name: projectId
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_locations_triggers_webhook
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:run':
    parameters: *ref_1
    post:
      description: 'Runs a `BuildTrigger` at a particular source revision. To run a regional or global trigger, use the POST request that includes the location endpoint in the path (ex. v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The POST request that does not include the location endpoint in the path can only be used when running global triggers.'
      operationId: cloudbuild.projects.locations.triggers.run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RunBuildTriggerRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
      x-stackQL-resource: triggers
      x-stackQL-method: projects_locations_triggers_run
      x-stackQL-verb: exec
  /v1/webhook:
    parameters: *ref_1
    post:
      description: ReceiveWebhook is called when the API receives a GitHub webhook.
      operationId: cloudbuild.webhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: query
          name: webhookKey
          schema:
            type: string
      x-stackQL-resource: cloudbuild
      x-stackQL-method: webhook
      x-stackQL-verb: exec
  '/v1/locations/{locationsId}/regionalWebhook':
    parameters: *ref_1
    post:
      description: ReceiveRegionalWebhook is called when the API receives a regional GitHub webhook.
      operationId: cloudbuild.locations.regionalWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: webhookKey
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: locations_regional_webhook
      x-stackQL-verb: exec
  '/v1/githubDotComWebhook:receive':
    parameters: *ref_1
    post:
      description: ReceiveGitHubDotComWebhook is called when the API receives a github.com webhook.
      operationId: cloudbuild.githubDotComWebhook.receive
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HttpBody'
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: query
          name: webhookKey
          schema:
            type: string
      x-stackQL-resource: githubdotcom_webhook
      x-stackQL-method: githubdotcom_webhook_receive
      x-stackQL-verb: exec
