openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Blockchain Node Engine API
  description: ''
  version: v1
  x-discovery-doc-revision: '20230712'
  x-generated-date: '2023-08-22'
externalDocs:
  url: 'https://cloud.google.com/blockchain-node-engine'
servers:
  - url: 'https://blockchainnodeengine.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    Status:
      type: object
      id: Status
      properties:
        details:
          type: array
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
        code:
          format: int32
          type: integer
          description: 'The status code, which should be an enum value of google.rpc.Code.'
        message:
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
          type: string
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
    EthereumEndpoints:
      properties:
        beaconApiEndpoint:
          type: string
          description: Output only. The assigned URL for the node's Beacon API endpoint.
          readOnly: true
        executionClientPrometheusMetricsApiEndpoint:
          type: string
          description: Output only. The assigned URL for the node's execution client's Prometheus metrics endpoint.
          readOnly: true
        beaconPrometheusMetricsApiEndpoint:
          readOnly: true
          description: 'Output only. The assigned URL for the node''s Beacon Prometheus metrics endpoint. See [Prometheus Metrics](https://lighthouse-book.sigmaprime.io/advanced_metrics.html) for more details.'
          type: string
      id: EthereumEndpoints
      description: Contains endpoint information specific to Ethereum nodes.
      type: object
    ListBlockchainNodesResponse:
      type: object
      id: ListBlockchainNodesResponse
      properties:
        blockchainNodes:
          description: The list of nodes
          items:
            $ref: '#/components/schemas/BlockchainNode'
          type: array
        nextPageToken:
          type: string
          description: A token identifying a page of results the server should return.
        unreachable:
          type: array
          items:
            type: string
          description: Locations that could not be reached.
      description: Message for response to listing blockchain nodes.
    EthereumDetails:
      id: EthereumDetails
      type: object
      description: Ethereum-specific blockchain node details.
      properties:
        additionalEndpoints:
          description: Output only. Ethereum-specific endpoint information.
          readOnly: true
          $ref: '#/components/schemas/EthereumEndpoints'
        apiEnableAdmin:
          description: Immutable. Enables JSON-RPC access to functions in the `admin` namespace. Defaults to `false`.
          type: boolean
        executionClient:
          enum:
            - EXECUTION_CLIENT_UNSPECIFIED
            - GETH
            - ERIGON
          description: Immutable. The execution client
          type: string
          enumDescriptions:
            - 'Execution client has not been specified, but should be.'
            - 'Official Go implementation of the Ethereum protocol. See [go-ethereum](https://geth.ethereum.org/) for details.'
            - 'An implementation of Ethereum (execution client), on the efficiency frontier, written in Go. See [Erigon on GitHub](https://github.com/ledgerwatch/erigon) for details.'
        nodeType:
          type: string
          enumDescriptions:
            - 'Node type has not been specified, but should be.'
            - An Ethereum node that only downloads Ethereum block headers.
            - 'Keeps a complete copy of the blockchain data, and contributes to the network by receiving, validating, and forwarding transactions.'
            - Holds the same data as full node as well as all of the blockchain's history state data dating back to the Genesis Block.
          description: Immutable. The type of Ethereum node.
          enum:
            - NODE_TYPE_UNSPECIFIED
            - LIGHT
            - FULL
            - ARCHIVE
        gethDetails:
          description: Details for the Geth execution client.
          $ref: '#/components/schemas/GethDetails'
        network:
          enum:
            - NETWORK_UNSPECIFIED
            - MAINNET
            - TESTNET_GOERLI_PRATER
            - TESTNET_SEPOLIA
          enumDescriptions:
            - 'The network has not been specified, but should be.'
            - The Ethereum Mainnet.
            - The Ethereum Testnet based on Goerli protocol.
            - The Ethereum Testnet based on Sepolia/Bepolia protocol.
          type: string
          description: Immutable. The Ethereum environment being accessed.
        apiEnableDebug:
          description: Immutable. Enables JSON-RPC access to functions in the `debug` namespace. Defaults to `false`.
          type: boolean
        consensusClient:
          enum:
            - CONSENSUS_CLIENT_UNSPECIFIED
            - LIGHTHOUSE
            - ERIGON_EMBEDDED_CONSENSUS_LAYER
          description: Immutable. The consensus client.
          enumDeprecated:
            - false
            - false
            - true
          enumDescriptions:
            - 'Consensus client has not been specified, but should be.'
            - 'Consensus client implementation written in Rust, maintained by Sigma Prime. See [Lighthouse - Sigma Prime](https://lighthouse.sigmaprime.io/) for details.'
            - 'Erigon''s embedded consensus client embedded in the execution client. Note this option is not currently available when creating new blockchain nodes. See [Erigon on GitHub](https://github.com/ledgerwatch/erigon#embedded-consensus-layer) for details.'
          type: string
    EndpointInfo:
      description: Contains endpoint information through which to interact with a blockchain node.
      type: object
      id: EndpointInfo
      properties:
        jsonRpcApiEndpoint:
          description: Output only. The assigned URL for the node JSON-RPC API endpoint.
          readOnly: true
          type: string
        websocketsApiEndpoint:
          readOnly: true
          description: Output only. The assigned URL for the node WebSockets API endpoint.
          type: string
    GoogleProtobufEmpty:
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      type: object
      id: GoogleProtobufEmpty
      properties: {}
    OperationMetadata:
      description: Represents the metadata of the long-running operation.
      properties:
        statusMessage:
          description: 'Output only. Human-readable status of the operation, if any.'
          type: string
          readOnly: true
        verb:
          type: string
          readOnly: true
          description: Output only. Name of the verb executed by the operation.
        createTime:
          description: Output only. The time the operation was created.
          format: google-datetime
          readOnly: true
          type: string
        apiVersion:
          type: string
          description: Output only. API version used to start the operation.
          readOnly: true
        target:
          readOnly: true
          description: Output only. Server-defined resource path for the target of the operation.
          type: string
        endTime:
          type: string
          readOnly: true
          format: google-datetime
          description: Output only. The time the operation finished running.
        requestedCancellation:
          readOnly: true
          description: 'Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have `Operation.error` value with a `google.rpc.Status.code` of `1`, corresponding to `Code.CANCELLED`.'
          type: boolean
      id: OperationMetadata
      type: object
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      type: object
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          type: array
          description: A list of operations that matches the specified filter in the request.
      id: ListOperationsResponse
    Location:
      type: object
      description: A resource that represents a Google Cloud location.
      properties:
        metadata:
          description: Service-specific metadata. For example the available capacity at the given location.
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
        labels:
          type: object
          additionalProperties:
            type: string
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
        name:
          type: string
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
        locationId:
          type: string
          description: 'The canonical id for this location. For example: `"us-east1"`.'
        displayName:
          description: 'The friendly name for this location, typically a nearby city name. For example, "Tokyo".'
          type: string
      id: Location
    Operation:
      description: This resource represents a long-running operation that is the result of a network API call.
      properties:
        name:
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.'
          type: string
        done:
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
          type: boolean
        metadata:
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        response:
          description: 'The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.'
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
        error:
          $ref: '#/components/schemas/Status'
          description: The error result of the operation in case of failure or cancellation.
      id: Operation
      type: object
    GethDetails:
      type: object
      id: GethDetails
      properties:
        garbageCollectionMode:
          enum:
            - GARBAGE_COLLECTION_MODE_UNSPECIFIED
            - FULL
            - ARCHIVE
          type: string
          description: Immutable. Blockchain garbage collection mode.
          enumDescriptions:
            - The garbage collection has not been specified.
            - Configures Geth's garbage collection so that older data not needed for a full node is deleted. This is the default mode when creating a full node.
            - 'Configures Geth''s garbage collection so that old data is never deleted. This is the default mode when creating an archive node. This value can also be chosen when creating a full node in order to create a partial/recent archive node. See [Sync modes](https://geth.ethereum.org/docs/fundamentals/sync-modes) for more details.'
      description: 'Options for the Geth execution client. See [Command-line Options](https://geth.ethereum.org/docs/fundamentals/command-line-options) for more details.'
    CancelOperationRequest:
      type: object
      description: The request message for Operations.CancelOperation.
      id: CancelOperationRequest
      properties: {}
    BlockchainNode:
      id: BlockchainNode
      type: object
      properties:
        ethereumDetails:
          $ref: '#/components/schemas/EthereumDetails'
          description: Ethereum-specific blockchain node details.
        updateTime:
          readOnly: true
          description: Output only. The timestamp at which the blockchain node was last updated.
          type: string
          format: google-datetime
        createTime:
          type: string
          format: google-datetime
          description: Output only. The timestamp at which the blockchain node was first created.
          readOnly: true
        connectionInfo:
          readOnly: true
          description: Output only. The connection information used to interact with a blockchain node.
          $ref: '#/components/schemas/ConnectionInfo'
        labels:
          type: object
          additionalProperties:
            type: string
          description: User-provided key-value pairs.
        name:
          description: Output only. The fully qualified name of the blockchain node. e.g. `projects/my-project/locations/us-central1/blockchainNodes/my-node`.
          type: string
          readOnly: true
        state:
          description: Output only. A status representing the state of the node.
          enum:
            - STATE_UNSPECIFIED
            - CREATING
            - DELETING
            - RUNNING
            - ERROR
            - UPDATING
            - REPAIRING
            - RECONCILING
          enumDescriptions:
            - The state has not been specified.
            - The node has been requested and is in the process of being created.
            - 'The existing node is undergoing deletion, but is not yet finished.'
            - The node is running and ready for use.
            - The node is in an unexpected or errored state.
            - The node is currently being updated.
            - The node is currently being repaired.
            - The node is currently being reconciled.
          readOnly: true
          type: string
        blockchainType:
          enumDescriptions:
            - 'Blockchain type has not been specified, but should be.'
            - The blockchain type is Ethereum.
          type: string
          description: Immutable. The blockchain type of the node.
          enum:
            - BLOCKCHAIN_TYPE_UNSPECIFIED
            - ETHEREUM
      description: A representation of a blockchain node.
    ConnectionInfo:
      description: The connection information through which to interact with a blockchain node.
      properties:
        endpointInfo:
          readOnly: true
          description: Output only. The endpoint information through which to interact with a blockchain node.
          $ref: '#/components/schemas/EndpointInfo'
      id: ConnectionInfo
      type: object
    ListLocationsResponse:
      properties:
        locations:
          description: A list of locations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/Location'
          type: array
        nextPageToken:
          type: string
          description: The standard List next-page token.
      type: object
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
  parameters:
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
  x-stackQL-resources:
    operations:
      id: google.blockchainnodeengine.operations
      name: operations
      title: Operations
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    blockchain_nodes:
      id: google.blockchainnodeengine.blockchain_nodes
      name: blockchain_nodes
      title: Blockchain Nodes
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1blockchainNodes~1{blockchainNodesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1blockchainNodes~1{blockchainNodesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1blockchainNodes~1{blockchainNodesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1blockchainNodes/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1blockchainNodes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.blockchainNodes
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1blockchainNodes/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/blockchain_nodes/methods/get'
          - $ref: '#/components/x-stackQL-resources/blockchain_nodes/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/blockchain_nodes/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/blockchain_nodes/methods/delete'
    locations:
      id: google.blockchainnodeengine.locations
      name: locations
      title: Locations
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}':
    parameters: &ref_1
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/upload_protocol'
    delete:
      description: 'Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.'
      operationId: blockchainnodeengine.projects.locations.operations.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: blockchainnodeengine.projects.locations.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/operations':
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`.'
      operationId: blockchainnodeengine.projects.locations.operations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.operations
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel':
    parameters: *ref_1
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
      operationId: blockchainnodeengine.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleProtobufEmpty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: cancel
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/blockchainNodes/{blockchainNodesId}':
    parameters: *ref_1
    get:
      description: Gets details of a single blockchain node.
      operationId: blockchainnodeengine.projects.locations.blockchainNodes.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainNode'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: blockchainNodesId
          required: true
          schema:
            type: string
      x-stackQL-resource: blockchain_nodes
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: Deletes a single blockchain node.
      operationId: blockchainnodeengine.projects.locations.blockchainNodes.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: blockchainNodesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: blockchain_nodes
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Updates the parameters of a single blockchain node.
      operationId: blockchainnodeengine.projects.locations.blockchainNodes.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockchainNode'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: blockchainNodesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: blockchain_nodes
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/blockchainNodes':
    parameters: *ref_1
    post:
      description: Creates a new blockchain node in a given project and location.
      operationId: blockchainnodeengine.projects.locations.blockchainNodes.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockchainNode'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: blockchainNodeId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: blockchain_nodes
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists blockchain nodes in a given project and location.
      operationId: blockchainnodeengine.projects.locations.blockchainNodes.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBlockchainNodesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: blockchain_nodes
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.blockchainNodes
  '/v1/projects/{projectsId}/locations/{locationsId}':
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: blockchainnodeengine.projects.locations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations':
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: blockchainnodeengine.projects.locations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.locations
