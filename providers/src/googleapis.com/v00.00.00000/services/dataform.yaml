openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Dataform API
  description: ''
  version: v1beta1
  x-discovery-doc-revision: '20230812'
  x-generated-date: '2023-09-01'
externalDocs:
  url: 'https://cloud.google.com/dataform/docs'
servers:
  - url: 'https://dataform.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    OperationMetadata:
      properties:
        apiVersion:
          readOnly: true
          type: string
          description: Output only. API version used to start the operation.
        target:
          type: string
          description: Output only. Server-defined resource path for the target of the operation.
          readOnly: true
        cancelRequested:
          type: boolean
          readOnly: true
          description: 'Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
        verb:
          type: string
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
        endTime:
          type: string
          format: google-datetime
          description: Output only. The time the operation finished running.
          readOnly: true
        statusDetail:
          description: 'Output only. Human-readable status of the operation, if any.'
          type: string
          readOnly: true
        createTime:
          type: string
          description: Output only. The time the operation was created.
          readOnly: true
          format: google-datetime
      description: Represents the metadata of the long-running operation.
      type: object
      id: OperationMetadata
    WorkflowInvocationAction:
      id: WorkflowInvocationAction
      type: object
      description: Represents a single action in a workflow invocation.
      properties:
        bigqueryAction:
          $ref: '#/components/schemas/BigQueryAction'
          description: Output only. The workflow action's bigquery action details.
          readOnly: true
        invocationTiming:
          $ref: '#/components/schemas/Interval'
          description: 'Output only. This action''s timing details. `start_time` will be set if the action is in [RUNNING, SUCCEEDED, CANCELLED, FAILED] state. `end_time` will be set if the action is in [SUCCEEDED, CANCELLED, FAILED] state.'
          readOnly: true
        failureReason:
          readOnly: true
          description: Output only. If and only if action's state is FAILED a failure reason is set.
          type: string
        canonicalTarget:
          description: Output only. The action's identifier if the project had been compiled without any overrides configured. Unique within the compilation result.
          $ref: '#/components/schemas/Target'
          readOnly: true
        target:
          $ref: '#/components/schemas/Target'
          description: Output only. This action's identifier. Unique within the workflow invocation.
          readOnly: true
        state:
          description: Output only. This action's current state.
          enumDescriptions:
            - The action has not yet been considered for invocation.
            - The action is currently running.
            - Execution of the action was skipped because upstream dependencies did not all complete successfully. A terminal state.
            - Execution of the action was disabled as per the configuration of the corresponding compilation result action. A terminal state.
            - The action succeeded. A terminal state.
            - The action was cancelled. A terminal state.
            - The action failed. A terminal state.
          readOnly: true
          type: string
          enum:
            - PENDING
            - RUNNING
            - SKIPPED
            - DISABLED
            - SUCCEEDED
            - CANCELLED
            - FAILED
    Repository:
      id: Repository
      description: Represents a Dataform Git repository.
      properties:
        setAuthenticatedUserAdmin:
          description: 'Optional. Input only. If set to true, the authenticated user will be granted the roles/dataform.admin role on the created repository. To modify access to the created repository later apply setIamPolicy from https://cloud.google.com/dataform/reference/rest#rest-resource:-v1beta1.projects.locations.repositories'
          type: boolean
        npmrcEnvironmentVariablesSecretVersion:
          description: Optional. The name of the Secret Manager secret version to be used to interpolate variables into the .npmrc file for package installation operations. Must be in the format `projects/*/secrets/*/versions/*`. The file itself must be in a JSON format.
          type: string
        gitRemoteSettings:
          description: 'Optional. If set, configures this repository to be linked to a Git remote.'
          $ref: '#/components/schemas/GitRemoteSettings'
        labels:
          additionalProperties:
            type: string
          description: Optional. Repository user labels.
          type: object
        serviceAccount:
          description: Optional. The service account to run workflow invocations under.
          type: string
        displayName:
          description: Optional. The repository's user-friendly name.
          type: string
        name:
          description: Output only. The repository's name.
          type: string
          readOnly: true
        workspaceCompilationOverrides:
          $ref: '#/components/schemas/WorkspaceCompilationOverrides'
          description: 'Optional. If set, fields of `workspace_compilation_overrides` override the default compilation settings that are specified in dataform.json when creating workspace-scoped compilation results. See documentation for `WorkspaceCompilationOverrides` for more information.'
      type: object
    CompilationError:
      description: An error encountered when attempting to compile a Dataform project.
      id: CompilationError
      type: object
      properties:
        actionTarget:
          readOnly: true
          description: 'Output only. The identifier of the action where this error occurred, if available.'
          $ref: '#/components/schemas/Target'
        path:
          type: string
          description: 'Output only. The path of the file where this error occurred, if available, relative to the project root.'
          readOnly: true
        stack:
          readOnly: true
          type: string
          description: Output only. The error's full stack trace.
        message:
          description: Output only. The error's top level message.
          readOnly: true
          type: string
    ReadFileResponse:
      type: object
      id: ReadFileResponse
      properties:
        fileContents:
          description: The file's contents.
          type: string
          format: byte
      description: '`ReadFile` response message.'
    ScheduledExecutionRecord:
      id: ScheduledExecutionRecord
      type: object
      properties:
        executionTime:
          format: google-datetime
          type: string
          description: The timestamp of this execution attempt.
        workflowInvocation:
          description: 'The name of the created workflow invocation, if one was successfully created. Must be in the format `projects/*/locations/*/repositories/*/workflowInvocations/*`.'
          type: string
        errorStatus:
          description: 'The error status encountered upon this attempt to create the workflow invocation, if the attempt was unsuccessful.'
          $ref: '#/components/schemas/Status'
      description: A record of an attempt to create a workflow invocation for this workflow config.
    Declaration:
      type: object
      id: Declaration
      description: Represents a relation which is not managed by Dataform but which may be referenced by Dataform actions.
      properties:
        relationDescriptor:
          description: 'Descriptor for the relation and its columns. Used as documentation only, i.e. values here will result in no changes to the relation''s metadata.'
          $ref: '#/components/schemas/RelationDescriptor'
    PullGitCommitsRequest:
      id: PullGitCommitsRequest
      description: '`PullGitCommits` request message.'
      properties:
        remoteBranch:
          description: 'Optional. The name of the branch in the Git remote from which to pull commits. If left unset, the repository''s default branch name will be used.'
          type: string
        author:
          $ref: '#/components/schemas/CommitAuthor'
          description: Required. The author of any merge commit which may be created as a result of merging fetched Git commits into this workspace.
      type: object
    Operations:
      id: Operations
      description: Represents a list of arbitrary database operations.
      type: object
      properties:
        queries:
          type: array
          description: A list of arbitrary SQL statements that will be executed without alteration.
          items:
            type: string
        hasOutput:
          type: boolean
          description: Whether these operations produce an output relation.
        dependencyTargets:
          items:
            $ref: '#/components/schemas/Target'
          description: A list of actions that this action depends on.
          type: array
        relationDescriptor:
          $ref: '#/components/schemas/RelationDescriptor'
          description: Descriptor for any output relation and its columns. Only set if `has_output` is true.
        tags:
          items:
            type: string
          description: 'Arbitrary, user-defined tags on this action.'
          type: array
        disabled:
          description: Whether this action is disabled (i.e. should not be run).
          type: boolean
    Policy:
      type: object
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
      id: Policy
      properties:
        version:
          type: integer
          format: int32
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
        bindings:
          type: array
          items:
            $ref: '#/components/schemas/Binding'
          description: 'Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.'
        etag:
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
          type: string
          format: byte
    WorkflowConfig:
      id: WorkflowConfig
      description: Represents a Dataform workflow configuration.
      type: object
      properties:
        invocationConfig:
          description: 'Optional. If left unset, a default InvocationConfig will be used.'
          $ref: '#/components/schemas/InvocationConfig'
        timeZone:
          type: string
          description: 'Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.'
        recentScheduledExecutionRecords:
          description: 'Output only. Records of the 10 most recent scheduled execution attempts, ordered in in descending order of `execution_time`. Updated whenever automatic creation of a workflow invocation is triggered by cron_schedule.'
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/ScheduledExecutionRecord'
        releaseConfig:
          type: string
          description: Required. The name of the release config whose release_compilation_result should be executed. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.
        name:
          readOnly: true
          type: string
          description: Output only. The workflow config's name.
        cronSchedule:
          type: string
          description: Optional. Optional schedule (in cron format) for automatic execution of this workflow config.
    CommitLogEntry:
      properties:
        commitMessage:
          type: string
          description: The commit message for this commit log entry.
        commitTime:
          type: string
          description: Commit timestamp.
          format: google-datetime
        commitSha:
          description: The commit SHA for this commit log entry.
          type: string
        author:
          $ref: '#/components/schemas/CommitAuthor'
          description: The commit author for this commit log entry.
      id: CommitLogEntry
      type: object
      description: Represents a single commit log.
    ResetWorkspaceChangesRequest:
      id: ResetWorkspaceChangesRequest
      type: object
      properties:
        clean:
          type: boolean
          description: 'Optional. If set to true, untracked files will be deleted.'
        paths:
          items:
            type: string
          type: array
          description: 'Optional. Full file paths to reset back to their committed state including filename, rooted at workspace root. If left empty, all files will be reset.'
      description: '`ResetWorkspaceChanges` request message.'
    MoveFileRequest:
      properties:
        path:
          type: string
          description: 'Required. The file''s full path including filename, relative to the workspace root.'
        newPath:
          type: string
          description: 'Required. The file''s new path including filename, relative to the workspace root.'
      id: MoveFileRequest
      type: object
      description: '`MoveFile` request message.'
    FetchFileGitStatusesResponse:
      description: '`FetchFileGitStatuses` response message.'
      properties:
        uncommittedFileChanges:
          items:
            $ref: '#/components/schemas/UncommittedFileChange'
          description: A list of all files which have uncommitted Git changes. There will only be a single entry for any given file.
          type: array
      id: FetchFileGitStatusesResponse
      type: object
    ListRepositoriesResponse:
      description: '`ListRepositories` response message.'
      id: ListRepositoriesResponse
      type: object
      properties:
        nextPageToken:
          description: 'A token which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
        unreachable:
          type: array
          items:
            type: string
          description: Locations which could not be reached.
        repositories:
          type: array
          items:
            $ref: '#/components/schemas/Repository'
          description: List of repositories.
    ListLocationsResponse:
      description: The response message for Locations.ListLocations.
      type: object
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        locations:
          description: A list of locations that matches the specified filter in the request.
          type: array
          items:
            $ref: '#/components/schemas/Location'
      id: ListLocationsResponse
    MoveDirectoryRequest:
      properties:
        path:
          type: string
          description: 'Required. The directory''s full path including directory name, relative to the workspace root.'
        newPath:
          type: string
          description: 'Required. The new path for the directory including directory name, rooted at workspace root.'
      description: '`MoveDirectory` request message.'
      id: MoveDirectoryRequest
      type: object
    ListReleaseConfigsResponse:
      id: ListReleaseConfigsResponse
      type: object
      properties:
        nextPageToken:
          type: string
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
        unreachable:
          items:
            type: string
          type: array
          description: Locations which could not be reached.
        releaseConfigs:
          type: array
          items:
            $ref: '#/components/schemas/ReleaseConfig'
          description: List of release configs.
      description: '`ListReleaseConfigs` response message.'
    SshAuthenticationConfig:
      id: SshAuthenticationConfig
      description: Configures fields for performing SSH authentication.
      properties:
        hostPublicKey:
          description: Required. Content of a public SSH key to verify an identity of a remote Git host.
          type: string
        userPrivateKeySecretVersion:
          type: string
          description: Required. The name of the Secret Manager secret version to use as a ssh private key for Git operations. Must be in the format `projects/*/secrets/*/versions/*`.
      type: object
    ComputeRepositoryAccessTokenStatusResponse:
      type: object
      id: ComputeRepositoryAccessTokenStatusResponse
      description: '`ComputeRepositoryAccessTokenStatus` response message.'
      properties:
        tokenStatus:
          enum:
            - TOKEN_STATUS_UNSPECIFIED
            - NOT_FOUND
            - INVALID
            - VALID
          description: Indicates the status of the Git access token.
          type: string
          enumDescriptions:
            - Default value. This value is unused.
            - The token could not be found in Secret Manager (or the Dataform Service Account did not have permission to access it).
            - The token could not be used to authenticate against the Git remote.
            - The token was used successfully to authenticate against the Git remote.
    QueryWorkflowInvocationActionsResponse:
      id: QueryWorkflowInvocationActionsResponse
      type: object
      properties:
        nextPageToken:
          type: string
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
        workflowInvocationActions:
          description: List of workflow invocation actions.
          items:
            $ref: '#/components/schemas/WorkflowInvocationAction'
          type: array
      description: '`QueryWorkflowInvocationActions` response message.'
    MakeDirectoryRequest:
      properties:
        path:
          type: string
          description: 'Required. The directory''s full path including directory name, relative to the workspace root.'
      description: '`MakeDirectory` request message.'
      id: MakeDirectoryRequest
      type: object
    DeleteFile:
      id: DeleteFile
      properties: {}
      type: object
      description: Represents the delete file operation.
    FetchFileDiffResponse:
      description: '`FetchFileDiff` response message.'
      id: FetchFileDiffResponse
      type: object
      properties:
        formattedDiff:
          type: string
          description: The raw formatted Git diff for the file.
    ListWorkflowInvocationsResponse:
      id: ListWorkflowInvocationsResponse
      properties:
        nextPageToken:
          type: string
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
        unreachable:
          description: Locations which could not be reached.
          type: array
          items:
            type: string
        workflowInvocations:
          items:
            $ref: '#/components/schemas/WorkflowInvocation'
          type: array
          description: List of workflow invocations.
      description: '`ListWorkflowInvocations` response message.'
      type: object
    DirectoryEntry:
      description: Represents a single entry in a directory.
      id: DirectoryEntry
      type: object
      properties:
        file:
          description: A file in the directory.
          type: string
        directory:
          type: string
          description: A child directory in the directory.
    ReadRepositoryFileResponse:
      properties:
        contents:
          format: byte
          type: string
          description: The file's contents.
      type: object
      description: '`ReadRepositoryFile` response message.'
      id: ReadRepositoryFileResponse
    InstallNpmPackagesResponse:
      properties: {}
      description: '`InstallNpmPackages` response message.'
      id: InstallNpmPackagesResponse
      type: object
    SetIamPolicyRequest:
      properties:
        policy:
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
          $ref: '#/components/schemas/Policy'
      id: SetIamPolicyRequest
      description: Request message for `SetIamPolicy` method.
      type: object
    Relation:
      properties:
        postOperations:
          type: array
          items:
            type: string
          description: SQL statements to be executed after creating the relation.
        requirePartitionFilter:
          description: Specifies whether queries on this table must include a predicate filter that filters on the partitioning column.
          type: boolean
        selectQuery:
          description: The SELECT query which returns rows which this relation should contain.
          type: string
        disabled:
          description: Whether this action is disabled (i.e. should not be run).
          type: boolean
        incrementalTableConfig:
          $ref: '#/components/schemas/IncrementalTableConfig'
          description: Configures `INCREMENTAL_TABLE` settings for this relation. Only set if `relation_type` is `INCREMENTAL_TABLE`.
        clusterExpressions:
          description: A list of columns or SQL expressions used to cluster the table.
          type: array
          items:
            type: string
        preOperations:
          items:
            type: string
          description: SQL statements to be executed before creating the relation.
          type: array
        relationDescriptor:
          description: Descriptor for the relation and its columns.
          $ref: '#/components/schemas/RelationDescriptor'
        tags:
          items:
            type: string
          type: array
          description: 'Arbitrary, user-defined tags on this action.'
        relationType:
          type: string
          enum:
            - RELATION_TYPE_UNSPECIFIED
            - TABLE
            - VIEW
            - INCREMENTAL_TABLE
            - MATERIALIZED_VIEW
          description: The type of this relation.
          enumDescriptions:
            - Default value. This value is unused.
            - The relation is a table.
            - The relation is a view.
            - The relation is an incrementalized table.
            - The relation is a materialized view.
        partitionExpirationDays:
          type: integer
          format: int32
          description: Sets the partition expiration in days.
        dependencyTargets:
          type: array
          items:
            $ref: '#/components/schemas/Target'
          description: A list of actions that this action depends on.
        additionalOptions:
          additionalProperties:
            type: string
          description: 'Additional options that will be provided as key/value pairs into the options clause of a create table/view statement. See https://cloud.google.com/bigquery/docs/reference/standard-sql/data-definition-language for more information on which options are supported.'
          type: object
        partitionExpression:
          description: The SQL expression used to partition the relation.
          type: string
      id: Relation
      description: Represents a database relation.
      type: object
    TestIamPermissionsRequest:
      type: object
      description: Request message for `TestIamPermissions` method.
      properties:
        permissions:
          type: array
          items:
            type: string
          description: 'The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).'
      id: TestIamPermissionsRequest
    TestIamPermissionsResponse:
      properties:
        permissions:
          type: array
          items:
            type: string
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
      description: Response message for `TestIamPermissions` method.
      id: TestIamPermissionsResponse
      type: object
    RemoveFileRequest:
      description: '`RemoveFile` request message.'
      properties:
        path:
          type: string
          description: 'Required. The file''s full path including filename, relative to the workspace root.'
      id: RemoveFileRequest
      type: object
    Expr:
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
      type: object
      id: Expr
      properties:
        expression:
          description: Textual representation of an expression in Common Expression Language syntax.
          type: string
        location:
          type: string
          description: 'Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.'
        description:
          description: 'Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.'
          type: string
        title:
          type: string
          description: 'Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.'
    IncrementalTableConfig:
      description: Contains settings for relations of type `INCREMENTAL_TABLE`.
      id: IncrementalTableConfig
      type: object
      properties:
        incrementalPostOperations:
          items:
            type: string
          description: SQL statements to be executed after inserting new rows into the relation.
          type: array
        updatePartitionFilter:
          type: string
          description: A SQL expression conditional used to limit the set of existing rows considered for a merge operation (see `unique_key_parts` for more information).
        incrementalPreOperations:
          description: SQL statements to be executed before inserting new rows into the relation.
          type: array
          items:
            type: string
        refreshDisabled:
          type: boolean
          description: Whether this table should be protected from being refreshed.
        uniqueKeyParts:
          type: array
          items:
            type: string
          description: 'A set of columns or SQL expressions used to define row uniqueness. If any duplicates are discovered (as defined by `unique_key_parts`), only the newly selected rows (as defined by `incremental_select_query`) will be included in the relation.'
        incrementalSelectQuery:
          description: The SELECT query which returns rows which should be inserted into the relation if it already exists and is not being refreshed.
          type: string
    ListWorkspacesResponse:
      type: object
      id: ListWorkspacesResponse
      properties:
        unreachable:
          description: Locations which could not be reached.
          items:
            type: string
          type: array
        workspaces:
          type: array
          items:
            $ref: '#/components/schemas/Workspace'
          description: List of workspaces.
        nextPageToken:
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
      description: '`ListWorkspaces` response message.'
    ColumnDescriptor:
      id: ColumnDescriptor
      description: Describes a column.
      properties:
        bigqueryPolicyTags:
          type: array
          description: A list of BigQuery policy tags that will be applied to the column.
          items:
            type: string
        description:
          type: string
          description: A textual description of the column.
        path:
          type: array
          items:
            type: string
          description: The identifier for the column. Each entry in `path` represents one level of nesting.
      type: object
    Empty:
      id: Empty
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      properties: {}
      type: object
    ReleaseConfig:
      properties:
        gitCommitish:
          description: 'Required. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`'
          type: string
        timeZone:
          description: 'Optional. Specifies the time zone to be used when interpreting cron_schedule. Must be a time zone name from the time zone database (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). If left unspecified, the default is UTC.'
          type: string
        name:
          type: string
          readOnly: true
          description: Output only. The release config's name.
        cronSchedule:
          description: Optional. Optional schedule (in cron format) for automatic creation of compilation results.
          type: string
        recentScheduledReleaseRecords:
          description: 'Output only. Records of the 10 most recent scheduled release attempts, ordered in in descending order of `release_time`. Updated whenever automatic creation of a compilation result is triggered by cron_schedule.'
          items:
            $ref: '#/components/schemas/ScheduledReleaseRecord'
          type: array
          readOnly: true
        codeCompilationConfig:
          description: 'Optional. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.'
          $ref: '#/components/schemas/CodeCompilationConfig'
        releaseCompilationResult:
          description: 'Optional. The name of the currently released compilation result for this release config. This value is updated when a compilation result is created from this release config, or when this resource is updated by API call (perhaps to roll back to an earlier release). The compilation result must have been created using this release config. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.'
          type: string
      id: ReleaseConfig
      description: Represents a Dataform release configuration.
      type: object
    MoveFileResponse:
      id: MoveFileResponse
      type: object
      properties: {}
      description: '`MoveFile` response message.'
    MakeDirectoryResponse:
      id: MakeDirectoryResponse
      properties: {}
      type: object
      description: '`MakeDirectory` response message.'
    QueryRepositoryDirectoryContentsResponse:
      properties:
        nextPageToken:
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
        directoryEntries:
          items:
            $ref: '#/components/schemas/DirectoryEntry'
          type: array
          description: List of entries in the directory.
      type: object
      id: QueryRepositoryDirectoryContentsResponse
      description: '`QueryRepositoryDirectoryContents` response message.'
    Interval:
      type: object
      description: 'Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.'
      properties:
        startTime:
          type: string
          format: google-datetime
          description: 'Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.'
        endTime:
          type: string
          format: google-datetime
          description: 'Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.'
      id: Interval
    CommitMetadata:
      properties:
        author:
          description: Required. The commit's author.
          $ref: '#/components/schemas/CommitAuthor'
        commitMessage:
          type: string
          description: Optional. The commit's message.
      id: CommitMetadata
      description: Represents a Dataform Git commit.
      type: object
    ScheduledReleaseRecord:
      description: A record of an attempt to create a compilation result for this release config.
      id: ScheduledReleaseRecord
      properties:
        releaseTime:
          description: The timestamp of this release attempt.
          type: string
          format: google-datetime
        compilationResult:
          description: 'The name of the created compilation result, if one was successfully created. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.'
          type: string
        errorStatus:
          $ref: '#/components/schemas/Status'
          description: 'The error status encountered upon this attempt to create the compilation result, if the attempt was unsuccessful.'
      type: object
    InstallNpmPackagesRequest:
      properties: {}
      id: InstallNpmPackagesRequest
      description: '`InstallNpmPackages` request message.'
      type: object
    WriteFile:
      properties:
        contents:
          format: byte
          description: The file's contents.
          type: string
      type: object
      description: Represents the write file operation (for files added or modified).
      id: WriteFile
    Workspace:
      properties:
        name:
          type: string
          readOnly: true
          description: Output only. The workspace's name.
      description: Represents a Dataform Git workspace.
      id: Workspace
      type: object
    WorkflowInvocation:
      description: Represents a single invocation of a compilation result.
      properties:
        invocationConfig:
          $ref: '#/components/schemas/InvocationConfig'
          description: 'Immutable. If left unset, a default InvocationConfig will be used.'
        compilationResult:
          type: string
          description: Immutable. The name of the compilation result to use for this invocation. Must be in the format `projects/*/locations/*/repositories/*/compilationResults/*`.
        name:
          readOnly: true
          type: string
          description: Output only. The workflow invocation's name.
        state:
          description: Output only. This workflow invocation's current state.
          enumDescriptions:
            - Default value. This value is unused.
            - The workflow invocation is currently running.
            - The workflow invocation succeeded. A terminal state.
            - The workflow invocation was cancelled. A terminal state.
            - The workflow invocation failed. A terminal state.
            - 'The workflow invocation is being cancelled, but some actions are still running.'
          enum:
            - STATE_UNSPECIFIED
            - RUNNING
            - SUCCEEDED
            - CANCELLED
            - FAILED
            - CANCELING
          type: string
          readOnly: true
        invocationTiming:
          $ref: '#/components/schemas/Interval'
          readOnly: true
          description: Output only. This workflow invocation's timing details.
        workflowConfig:
          description: Immutable. The name of the workflow config to invoke. Must be in the format `projects/*/locations/*/repositories/*/workflowConfigs/*`.
          type: string
      type: object
      id: WorkflowInvocation
    CancelWorkflowInvocationRequest:
      id: CancelWorkflowInvocationRequest
      type: object
      description: '`CancelWorkflowInvocation` request message.'
      properties: {}
    Target:
      type: object
      description: 'Represents an action identifier. If the action writes output, the output will be written to the referenced database object.'
      id: Target
      properties:
        database:
          type: string
          description: The action's database (Google Cloud project ID) .
        name:
          description: 'The action''s name, within `database` and `schema`.'
          type: string
        schema:
          type: string
          description: 'The action''s schema (BigQuery dataset ID), within `database`.'
    InvocationConfig:
      description: 'Includes various configuration options for a workflow invocation. If both `included_targets` and `included_tags` are unset, all actions will be included.'
      type: object
      id: InvocationConfig
      properties:
        includedTags:
          description: Optional. The set of tags to include.
          type: array
          items:
            type: string
        includedTargets:
          type: array
          description: Optional. The set of action identifiers to include.
          items:
            $ref: '#/components/schemas/Target'
        transitiveDependenciesIncluded:
          description: 'Optional. When set to true, transitive dependencies of included actions will be executed.'
          type: boolean
        serviceAccount:
          description: Optional. The service account to run workflow invocations under.
          type: string
        fullyRefreshIncrementalTablesEnabled:
          type: boolean
          description: 'Optional. When set to true, any incremental tables will be fully refreshed.'
        transitiveDependentsIncluded:
          description: 'Optional. When set to true, transitive dependents of included actions will be executed.'
          type: boolean
    CodeCompilationConfig:
      description: Configures various aspects of Dataform code compilation.
      properties:
        defaultDatabase:
          type: string
          description: Optional. The default database (Google Cloud project ID).
        defaultLocation:
          type: string
          description: 'Optional. The default BigQuery location to use. Defaults to "US". See the BigQuery docs for a full list of locations: https://cloud.google.com/bigquery/docs/locations.'
        vars:
          additionalProperties:
            type: string
          description: Optional. User-defined variables that are made available to project code during compilation.
          type: object
        defaultSchema:
          type: string
          description: Optional. The default schema (BigQuery dataset ID).
        schemaSuffix:
          type: string
          description: Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.
        databaseSuffix:
          type: string
          description: Optional. The suffix that should be appended to all database (Google Cloud project ID) names.
        assertionSchema:
          type: string
          description: Optional. The default schema (BigQuery dataset ID) for assertions.
        tablePrefix:
          description: Optional. The prefix that should be prepended to all table names.
          type: string
      id: CodeCompilationConfig
      type: object
    CommitAuthor:
      description: Represents the author of a Git commit.
      properties:
        name:
          description: Required. The commit author's name.
          type: string
        emailAddress:
          type: string
          description: Required. The commit author's email address.
      id: CommitAuthor
      type: object
    Assertion:
      id: Assertion
      properties:
        dependencyTargets:
          description: A list of actions that this action depends on.
          type: array
          items:
            $ref: '#/components/schemas/Target'
        selectQuery:
          type: string
          description: The SELECT query which must return zero rows in order for this assertion to succeed.
        relationDescriptor:
          description: Descriptor for the assertion's automatically-generated view and its columns.
          $ref: '#/components/schemas/RelationDescriptor'
        parentAction:
          description: The parent action of this assertion. Only set if this assertion was automatically generated.
          $ref: '#/components/schemas/Target'
        tags:
          description: 'Arbitrary, user-defined tags on this action.'
          type: array
          items:
            type: string
        disabled:
          type: boolean
          description: Whether this action is disabled (i.e. should not be run).
      type: object
      description: Represents an assertion upon a SQL query which is required return zero rows.
    CompilationResult:
      description: Represents the result of compiling a Dataform project.
      type: object
      id: CompilationResult
      properties:
        releaseConfig:
          type: string
          description: Immutable. The name of the release config to compile. The release config's 'current_compilation_result' field will be updated to this compilation result. Must be in the format `projects/*/locations/*/repositories/*/releaseConfigs/*`.
        gitCommitish:
          description: 'Immutable. Git commit/tag/branch name at which the repository should be compiled. Must exist in the remote repository. Examples: - a commit SHA: `12ade345` - a tag: `tag1` - a branch name: `branch1`'
          type: string
        compilationErrors:
          description: Output only. Errors encountered during project compilation.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/CompilationError'
        resolvedGitCommitSha:
          readOnly: true
          description: Output only. The fully resolved Git commit SHA of the code that was compiled. Not set for compilation results whose source is a workspace.
          type: string
        codeCompilationConfig:
          $ref: '#/components/schemas/CodeCompilationConfig'
          description: 'Immutable. If set, fields of `code_compilation_config` override the default compilation settings that are specified in dataform.json.'
        name:
          type: string
          readOnly: true
          description: Output only. The compilation result's name.
        workspace:
          description: Immutable. The name of the workspace to compile. Must be in the format `projects/*/locations/*/repositories/*/workspaces/*`.
          type: string
        dataformCoreVersion:
          readOnly: true
          description: Output only. The version of `@dataform/core` that was used for compilation.
          type: string
    MoveDirectoryResponse:
      id: MoveDirectoryResponse
      type: object
      properties: {}
      description: '`MoveDirectory` response message.'
    FetchGitAheadBehindResponse:
      id: FetchGitAheadBehindResponse
      type: object
      properties:
        commitsAhead:
          description: The number of commits in the remote branch that are not in the workspace.
          format: int32
          type: integer
        commitsBehind:
          description: The number of commits in the workspace that are not in the remote branch.
          type: integer
          format: int32
      description: '`FetchGitAheadBehind` response message.'
    GitRemoteSettings:
      type: object
      description: Controls Git remote configuration for a repository.
      properties:
        sshAuthenticationConfig:
          $ref: '#/components/schemas/SshAuthenticationConfig'
          description: Optional. Authentication fields for remote uris using SSH protocol.
        defaultBranch:
          description: Required. The Git remote's default branch name.
          type: string
        url:
          description: Required. The Git remote's URL.
          type: string
        authenticationTokenSecretVersion:
          description: Optional. The name of the Secret Manager secret version to use as an authentication token for Git operations. Must be in the format `projects/*/secrets/*/versions/*`.
          type: string
        tokenStatus:
          description: 'Output only. Deprecated: The field does not contain any token status information. Instead use https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories/computeAccessTokenStatus'
          readOnly: true
          enumDescriptions:
            - Default value. This value is unused.
            - The token could not be found in Secret Manager (or the Dataform Service Account did not have permission to access it).
            - The token could not be used to authenticate against the Git remote.
            - The token was used successfully to authenticate against the Git remote.
          type: string
          deprecated: true
          enum:
            - TOKEN_STATUS_UNSPECIFIED
            - NOT_FOUND
            - INVALID
            - VALID
      id: GitRemoteSettings
    CommitWorkspaceChangesRequest:
      id: CommitWorkspaceChangesRequest
      type: object
      properties:
        commitMessage:
          description: Optional. The commit's message.
          type: string
        author:
          description: Required. The commit's author.
          $ref: '#/components/schemas/CommitAuthor'
        paths:
          type: array
          items:
            type: string
          description: 'Optional. Full file paths to commit including filename, rooted at workspace root. If left empty, all files will be committed.'
      description: '`CommitWorkspaceChanges` request message.'
    Location:
      description: A resource that represents a Google Cloud location.
      type: object
      id: Location
      properties:
        name:
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
          type: string
        metadata:
          description: Service-specific metadata. For example the available capacity at the given location.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        labels:
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
          type: object
          additionalProperties:
            type: string
        displayName:
          type: string
          description: 'The friendly name for this location, typically a nearby city name. For example, "Tokyo".'
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
    WorkspaceCompilationOverrides:
      id: WorkspaceCompilationOverrides
      description: 'Configures workspace compilation overrides for a repository. Primarily used by the UI (`console.cloud.google.com`). `schema_suffix` and `table_prefix` can have a special expression - `${workspaceName}`, which refers to the workspace name from which the compilation results will be created. API callers are expected to resolve the expression in these overrides and provide them explicitly in `code_compilation_config` (https://cloud.google.com/dataform/reference/rest/v1beta1/projects.locations.repositories.compilationResults#codecompilationconfig) when creating workspace-scoped compilation results.'
      properties:
        tablePrefix:
          description: Optional. The prefix that should be prepended to all table names.
          type: string
        schemaSuffix:
          description: Optional. The suffix that should be appended to all schema (BigQuery dataset ID) names.
          type: string
        defaultDatabase:
          description: Optional. The default database (Google Cloud project ID).
          type: string
      type: object
    RemoveDirectoryRequest:
      description: '`RemoveDirectory` request message.'
      id: RemoveDirectoryRequest
      properties:
        path:
          description: 'Required. The directory''s full path including directory name, relative to the workspace root.'
          type: string
      type: object
    QueryCompilationResultActionsResponse:
      id: QueryCompilationResultActionsResponse
      description: '`QueryCompilationResultActions` response message.'
      properties:
        nextPageToken:
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
        compilationResultActions:
          type: array
          items:
            $ref: '#/components/schemas/CompilationResultAction'
          description: List of compilation result actions.
      type: object
    WriteFileResponse:
      type: object
      properties: {}
      id: WriteFileResponse
      description: '`WriteFile` response message.'
    WriteFileRequest:
      type: object
      properties:
        path:
          type: string
          description: Required. The file.
        contents:
          format: byte
          type: string
          description: Required. The file's contents.
      id: WriteFileRequest
      description: '`WriteFile` request message.'
    Status:
      id: Status
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: 'The status code, which should be an enum value of google.rpc.Code.'
        message:
          type: string
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          type: array
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
    CompilationResultAction:
      id: CompilationResultAction
      type: object
      description: Represents a single Dataform action in a compilation result.
      properties:
        operations:
          description: The database operations executed by this action.
          $ref: '#/components/schemas/Operations'
        canonicalTarget:
          description: The action's identifier if the project had been compiled without any overrides configured. Unique within the compilation result.
          $ref: '#/components/schemas/Target'
        declaration:
          description: The declaration declared by this action.
          $ref: '#/components/schemas/Declaration'
        target:
          description: This action's identifier. Unique within the compilation result.
          $ref: '#/components/schemas/Target'
        filePath:
          description: 'The full path including filename in which this action is located, relative to the workspace root.'
          type: string
        assertion:
          $ref: '#/components/schemas/Assertion'
          description: The assertion executed by this action.
        relation:
          description: The database relation created/updated by this action.
          $ref: '#/components/schemas/Relation'
    FileOperation:
      id: FileOperation
      properties:
        deleteFile:
          description: Represents the delete operation.
          $ref: '#/components/schemas/DeleteFile'
        writeFile:
          description: Represents the write operation.
          $ref: '#/components/schemas/WriteFile'
      type: object
      description: Represents a single file operation to the repository.
    ListWorkflowConfigsResponse:
      properties:
        nextPageToken:
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
        unreachable:
          items:
            type: string
          description: Locations which could not be reached.
          type: array
        workflowConfigs:
          type: array
          description: List of workflow configs.
          items:
            $ref: '#/components/schemas/WorkflowConfig'
      description: '`ListWorkflowConfigs` response message.'
      id: ListWorkflowConfigsResponse
      type: object
    UncommittedFileChange:
      type: object
      properties:
        state:
          enum:
            - STATE_UNSPECIFIED
            - ADDED
            - DELETED
            - MODIFIED
            - HAS_CONFLICTS
          description: Indicates the status of the file.
          enumDescriptions:
            - Default value. This value is unused.
            - The file has been newly added.
            - The file has been deleted.
            - The file has been modified.
            - The file contains merge conflicts.
          type: string
        path:
          description: 'The file''s full path including filename, relative to the workspace root.'
          type: string
      description: Represents the Git state of a file with uncommitted changes.
      id: UncommittedFileChange
    FetchRemoteBranchesResponse:
      type: object
      description: '`FetchRemoteBranches` response message.'
      id: FetchRemoteBranchesResponse
      properties:
        branches:
          items:
            type: string
          description: The remote repository's branch names.
          type: array
    FetchRepositoryHistoryResponse:
      id: FetchRepositoryHistoryResponse
      type: object
      description: '`FetchRepositoryHistory` response message.'
      properties:
        commits:
          description: 'A list of commit logs, ordered by ''git log'' default order.'
          type: array
          items:
            $ref: '#/components/schemas/CommitLogEntry'
        nextPageToken:
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
    QueryDirectoryContentsResponse:
      properties:
        directoryEntries:
          description: List of entries in the directory.
          type: array
          items:
            $ref: '#/components/schemas/DirectoryEntry'
        nextPageToken:
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
          type: string
      id: QueryDirectoryContentsResponse
      type: object
      description: '`QueryDirectoryContents` response message.'
    PushGitCommitsRequest:
      description: '`PushGitCommits` request message.'
      type: object
      id: PushGitCommitsRequest
      properties:
        remoteBranch:
          type: string
          description: 'Optional. The name of the branch in the Git remote to which commits should be pushed. If left unset, the repository''s default branch name will be used.'
    ListCompilationResultsResponse:
      properties:
        compilationResults:
          type: array
          description: List of compilation results.
          items:
            $ref: '#/components/schemas/CompilationResult'
        nextPageToken:
          type: string
          description: 'A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.'
        unreachable:
          items:
            type: string
          description: Locations which could not be reached.
          type: array
      type: object
      description: '`ListCompilationResults` response message.'
      id: ListCompilationResultsResponse
    RelationDescriptor:
      type: object
      id: RelationDescriptor
      description: Describes a relation and its columns.
      properties:
        bigqueryLabels:
          type: object
          description: A set of BigQuery labels that should be applied to the relation.
          additionalProperties:
            type: string
        columns:
          description: A list of descriptions of columns within the relation.
          items:
            $ref: '#/components/schemas/ColumnDescriptor'
          type: array
        description:
          type: string
          description: A text description of the relation.
    CommitRepositoryChangesRequest:
      properties:
        fileOperations:
          description: 'A map to the path of the file to the operation. The path is the ull file path including filename, from repository root.'
          type: object
          additionalProperties:
            $ref: '#/components/schemas/FileOperation'
        commitMetadata:
          $ref: '#/components/schemas/CommitMetadata'
          description: Required. The changes to commit to the repository.
        requiredHeadCommitSha:
          type: string
          description: 'Optional. The commit SHA which must be the repository''s current HEAD before applying this commit; otherwise this request will fail. If unset, no validation on the current HEAD commit SHA is performed.'
      id: CommitRepositoryChangesRequest
      description: '`CommitRepositoryChanges` request message.'
      type: object
    BigQueryAction:
      description: Represents a workflow action that will run against BigQuery.
      id: BigQueryAction
      type: object
      properties:
        sqlScript:
          type: string
          readOnly: true
          description: Output only. The generated BigQuery SQL script that will be executed.
    Binding:
      properties:
        role:
          description: 'Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.'
          type: string
        members:
          items:
            type: string
          type: array
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.'
        condition:
          $ref: '#/components/schemas/Expr'
          description: 'The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
      description: 'Associates `members`, or principals, with a `role`.'
      id: Binding
      type: object
  parameters:
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
  x-stackQL-resources:
    locations:
      id: google.dataform.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        _list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        delete: []
    repositories:
      id: google.dataform.repositories
      name: repositories
      title: Repositories
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.repositories
        _list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        commit:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:commit/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        read_file:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:readFile/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        compute_access_token_status:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:computeAccessTokenStatus/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        query_directory_contents:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:queryDirectoryContents/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/get'
          - $ref: '#/components/x-stackQL-resources/repositories/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/repositories/methods/delete'
    repositories_iam_policies:
      id: google.dataform.repositories_iam_policies
      name: repositories_iam_policies
      title: Repositories Iam Policies
      methods:
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/repositories_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    repositories_remote_branches:
      id: google.dataform.repositories_remote_branches
      name: repositories_remote_branches
      title: Repositories Remote Branches
      methods:
        fetch_remote_branches:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:fetchRemoteBranches/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    repositories_history:
      id: google.dataform.repositories_history
      name: repositories_history
      title: Repositories History
      methods:
        fetch_history:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}:fetchHistory/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    workspaces_iam_policies:
      id: google.dataform.workspaces_iam_policies
      name: workspaces_iam_policies
      title: Workspaces Iam Policies
      methods:
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        _get_iam_policy:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/workspaces_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    workspaces:
      id: google.dataform.workspaces
      name: workspaces
      title: Workspaces
      methods:
        make_directory:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:makeDirectory/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.workspaces
        _list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        move_file:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:moveFile/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        query_directory_contents:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:queryDirectoryContents/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        install_npm_packages:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:installNpmPackages/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        move_directory:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:moveDirectory/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        pull:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:pull/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        write_file:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:writeFile/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        push:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:push/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        read_file:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:readFile/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        commit:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:commit/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        reset:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:reset/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/workspaces/methods/get'
          - $ref: '#/components/x-stackQL-resources/workspaces/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/workspaces/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/workspaces/methods/delete'
    workspaces_directory:
      id: google.dataform.workspaces_directory
      name: workspaces_directory
      title: Workspaces Directory
      methods:
        remove_directory:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:removeDirectory/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    workspaces_git_ahead_behind:
      id: google.dataform.workspaces_git_ahead_behind
      name: workspaces_git_ahead_behind
      title: Workspaces Git Ahead Behind
      methods:
        fetch_git_ahead_behind:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:fetchGitAheadBehind/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    workspaces_file_diff:
      id: google.dataform.workspaces_file_diff
      name: workspaces_file_diff
      title: Workspaces File Diff
      methods:
        fetch_file_diff:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:fetchFileDiff/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    workspaces_file_git_statuses:
      id: google.dataform.workspaces_file_git_statuses
      name: workspaces_file_git_statuses
      title: Workspaces File Git Statuses
      methods:
        fetch_file_git_statuses:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:fetchFileGitStatuses/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    workspaces_file:
      id: google.dataform.workspaces_file
      name: workspaces_file
      title: Workspaces File
      methods:
        remove_file:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workspaces~1{workspacesId}:removeFile/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    workflow_invocations:
      id: google.dataform.workflow_invocations
      name: workflow_invocations
      title: Workflow Invocations
      methods:
        cancel:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workflowInvocations~1{workflowInvocationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workflowInvocations/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workflowInvocations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.workflowInvocations
        _list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workflowInvocations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        query:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workflowInvocations~1{workflowInvocationsId}:query/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workflowInvocations~1{workflowInvocationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workflowInvocations~1{workflowInvocationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/workflow_invocations/methods/get'
          - $ref: '#/components/x-stackQL-resources/workflow_invocations/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/workflow_invocations/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/workflow_invocations/methods/delete'
    release_configs:
      id: google.dataform.release_configs
      name: release_configs
      title: Release Configs
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1releaseConfigs~1{releaseConfigsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1releaseConfigs~1{releaseConfigsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1releaseConfigs~1{releaseConfigsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1releaseConfigs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.releaseConfigs
        _list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1releaseConfigs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1releaseConfigs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/release_configs/methods/get'
          - $ref: '#/components/x-stackQL-resources/release_configs/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/release_configs/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/release_configs/methods/delete'
    workflow_configs:
      id: google.dataform.workflow_configs
      name: workflow_configs
      title: Workflow Configs
      methods:
        patch:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workflowConfigs~1{workflowConfigsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workflowConfigs~1{workflowConfigsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workflowConfigs~1{workflowConfigsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workflowConfigs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workflowConfigs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.workflowConfigs
        _list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1workflowConfigs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/workflow_configs/methods/get'
          - $ref: '#/components/x-stackQL-resources/workflow_configs/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/workflow_configs/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/workflow_configs/methods/delete'
    compilation_results:
      id: google.dataform.compilation_results
      name: compilation_results
      title: Compilation Results
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1compilationResults/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.compilationResults
        _list:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1compilationResults/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1compilationResults/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        query:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1compilationResults~1{compilationResultsId}:query/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1beta1~1projects~1{projectsId}~1locations~1{locationsId}~1repositories~1{repositoriesId}~1compilationResults~1{compilationResultsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/compilation_results/methods/get'
          - $ref: '#/components/x-stackQL-resources/compilation_results/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/compilation_results/methods/create'
        update: []
        delete: []
paths:
  '/v1beta1/projects/{projectsId}/locations':
    parameters: &ref_1
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/uploadType'
    get:
      description: Lists information about the supported locations for this service.
      operationId: dataform.projects.locations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.locations
  '/v1beta1/projects/{projectsId}/locations/{locationsId}':
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: dataform.projects.locations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}':
    parameters: *ref_1
    delete:
      description: Deletes a single Repository.
      operationId: dataform.projects.locations.repositories.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: force
          schema:
            type: boolean
      x-stackQL-resource: repositories
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Updates a single Repository.
      operationId: dataform.projects.locations.repositories.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Fetches a single Repository.
      operationId: dataform.projects.locations.repositories.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: dataform.projects.locations.repositories.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: repositories_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories':
    parameters: *ref_1
    post:
      description: Creates a new Repository in a given project and location.
      operationId: dataform.projects.locations.repositories.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Repository'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: repositoryId
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists Repositories in a given project and location.
      operationId: dataform.projects.locations.repositories.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRepositoriesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.repositories
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: dataform.projects.locations.repositories.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:fetchRemoteBranches':
    parameters: *ref_1
    get:
      description: Fetches a Repository's remote branches.
      operationId: dataform.projects.locations.repositories.fetchRemoteBranches
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchRemoteBranchesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories_remote_branches
      x-stackQL-method: fetch_remote_branches
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: dataform.projects.locations.repositories.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:commit':
    parameters: *ref_1
    post:
      description: Applies a Git commit to a Repository. The Repository must not have a value for `git_remote_settings.url`.
      operationId: dataform.projects.locations.repositories.commit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitRepositoryChangesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: commit
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:fetchHistory':
    parameters: *ref_1
    get:
      description: Fetches a Repository's history of commits. The Repository must not have a value for `git_remote_settings.url`.
      operationId: dataform.projects.locations.repositories.fetchHistory
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchRepositoryHistoryResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: repositories_history
      x-stackQL-method: fetch_history
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:readFile':
    parameters: *ref_1
    get:
      description: Returns the contents of a file (inside a Repository). The Repository must not have a value for `git_remote_settings.url`.
      operationId: dataform.projects.locations.repositories.readFile
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadRepositoryFileResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: path
          schema:
            type: string
        - in: query
          name: commitSha
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: read_file
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:computeAccessTokenStatus':
    parameters: *ref_1
    get:
      description: Computes a Repository's Git access token status.
      operationId: dataform.projects.locations.repositories.computeAccessTokenStatus
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComputeRepositoryAccessTokenStatusResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: compute_access_token_status
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}:queryDirectoryContents':
    parameters: *ref_1
    get:
      description: Returns the contents of a given Repository directory. The Repository must not have a value for `git_remote_settings.url`.
      operationId: dataform.projects.locations.repositories.queryDirectoryContents
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryRepositoryDirectoryContentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: path
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: commitSha
          schema:
            type: string
      x-stackQL-resource: repositories
      x-stackQL-method: query_directory_contents
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: dataform.projects.locations.repositories.workspaces.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:makeDirectory':
    parameters: *ref_1
    post:
      description: Creates a directory inside a Workspace.
      operationId: dataform.projects.locations.repositories.workspaces.makeDirectory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MakeDirectoryRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MakeDirectoryResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: make_directory
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces':
    parameters: *ref_1
    get:
      description: Lists Workspaces in a given Repository.
      operationId: dataform.projects.locations.repositories.workspaces.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkspacesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.workspaces
    post:
      description: Creates a new Workspace in a given Repository.
      operationId: dataform.projects.locations.repositories.workspaces.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: workspaceId
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:moveFile':
    parameters: *ref_1
    post:
      description: Moves a file (inside a Workspace) to a new location.
      operationId: dataform.projects.locations.repositories.workspaces.moveFile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveFileRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoveFileResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: move_file
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:removeDirectory':
    parameters: *ref_1
    post:
      description: Deletes a directory (inside a Workspace) and all of its contents.
      operationId: dataform.projects.locations.repositories.workspaces.removeDirectory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveDirectoryRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces_directory
      x-stackQL-method: remove_directory
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:fetchGitAheadBehind':
    parameters: *ref_1
    get:
      description: Fetches Git ahead/behind against a remote branch.
      operationId: dataform.projects.locations.repositories.workspaces.fetchGitAheadBehind
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchGitAheadBehindResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
        - in: query
          name: remoteBranch
          schema:
            type: string
      x-stackQL-resource: workspaces_git_ahead_behind
      x-stackQL-method: fetch_git_ahead_behind
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:queryDirectoryContents':
    parameters: *ref_1
    get:
      description: Returns the contents of a given Workspace directory.
      operationId: dataform.projects.locations.repositories.workspaces.queryDirectoryContents
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryDirectoryContentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: path
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: query_directory_contents
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: dataform.projects.locations.repositories.workspaces.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:installNpmPackages':
    parameters: *ref_1
    post:
      description: Installs dependency NPM packages (inside a Workspace).
      operationId: dataform.projects.locations.repositories.workspaces.installNpmPackages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstallNpmPackagesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstallNpmPackagesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: install_npm_packages
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:moveDirectory':
    parameters: *ref_1
    post:
      description: 'Moves a directory (inside a Workspace), and all of its contents, to a new location.'
      operationId: dataform.projects.locations.repositories.workspaces.moveDirectory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveDirectoryRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoveDirectoryResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: move_directory
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:pull':
    parameters: *ref_1
    post:
      description: Pulls Git commits from the Repository's remote into a Workspace.
      operationId: dataform.projects.locations.repositories.workspaces.pull
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PullGitCommitsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: pull
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:fetchFileDiff':
    parameters: *ref_1
    get:
      description: Fetches Git diff for an uncommitted file in a Workspace.
      operationId: dataform.projects.locations.repositories.workspaces.fetchFileDiff
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchFileDiffResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
        - in: query
          name: path
          schema:
            type: string
      x-stackQL-resource: workspaces_file_diff
      x-stackQL-method: fetch_file_diff
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}':
    parameters: *ref_1
    get:
      description: Fetches a single Workspace.
      operationId: dataform.projects.locations.repositories.workspaces.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: Deletes a single Workspace.
      operationId: dataform.projects.locations.repositories.workspaces.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:writeFile':
    parameters: *ref_1
    post:
      description: Writes to a file (inside a Workspace).
      operationId: dataform.projects.locations.repositories.workspaces.writeFile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteFileRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WriteFileResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: write_file
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:push':
    parameters: *ref_1
    post:
      description: Pushes Git commits from a Workspace to the Repository's remote.
      operationId: dataform.projects.locations.repositories.workspaces.push
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushGitCommitsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: push
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: dataform.projects.locations.repositories.workspaces.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: workspaces_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
      x-stackQL-objectKey: $.bindings
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:readFile':
    parameters: *ref_1
    get:
      description: Returns the contents of a file (inside a Workspace).
      operationId: dataform.projects.locations.repositories.workspaces.readFile
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadFileResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
        - in: query
          name: path
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: read_file
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:commit':
    parameters: *ref_1
    post:
      description: Applies a Git commit for uncommitted files in a Workspace.
      operationId: dataform.projects.locations.repositories.workspaces.commit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommitWorkspaceChangesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: commit
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:fetchFileGitStatuses':
    parameters: *ref_1
    get:
      description: Fetches Git statuses for the files in a Workspace.
      operationId: dataform.projects.locations.repositories.workspaces.fetchFileGitStatuses
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchFileGitStatusesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces_file_git_statuses
      x-stackQL-method: fetch_file_git_statuses
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:reset':
    parameters: *ref_1
    post:
      description: Performs a Git reset for uncommitted files in a Workspace.
      operationId: dataform.projects.locations.repositories.workspaces.reset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetWorkspaceChangesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces
      x-stackQL-method: reset
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workspaces/{workspacesId}:removeFile':
    parameters: *ref_1
    post:
      description: Deletes a file (inside a Workspace).
      operationId: dataform.projects.locations.repositories.workspaces.removeFile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveFileRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workspacesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workspaces_file
      x-stackQL-method: remove_file
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations/{workflowInvocationsId}:cancel':
    parameters: *ref_1
    post:
      description: Requests cancellation of a running WorkflowInvocation.
      operationId: dataform.projects.locations.repositories.workflowInvocations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelWorkflowInvocationRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workflowInvocationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: workflow_invocations
      x-stackQL-method: cancel
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations':
    parameters: *ref_1
    post:
      description: Creates a new WorkflowInvocation in a given Repository.
      operationId: dataform.projects.locations.repositories.workflowInvocations.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowInvocation'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowInvocation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: workflow_invocations
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists WorkflowInvocations in a given Repository.
      operationId: dataform.projects.locations.repositories.workflowInvocations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkflowInvocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: workflow_invocations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.workflowInvocations
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations/{workflowInvocationsId}:query':
    parameters: *ref_1
    get:
      description: Returns WorkflowInvocationActions in a given WorkflowInvocation.
      operationId: dataform.projects.locations.repositories.workflowInvocations.query
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryWorkflowInvocationActionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workflowInvocationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: workflow_invocations
      x-stackQL-method: query
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowInvocations/{workflowInvocationsId}':
    parameters: *ref_1
    get:
      description: Fetches a single WorkflowInvocation.
      operationId: dataform.projects.locations.repositories.workflowInvocations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowInvocation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workflowInvocationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: workflow_invocations
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: Deletes a single WorkflowInvocation.
      operationId: dataform.projects.locations.repositories.workflowInvocations.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workflowInvocationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: workflow_invocations
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/releaseConfigs/{releaseConfigsId}':
    parameters: *ref_1
    delete:
      description: Deletes a single ReleaseConfig.
      operationId: dataform.projects.locations.repositories.releaseConfigs.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: releaseConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: release_configs
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Fetches a single ReleaseConfig.
      operationId: dataform.projects.locations.repositories.releaseConfigs.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: releaseConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: release_configs
      x-stackQL-method: get
      x-stackQL-verb: select
    patch:
      description: Updates a single ReleaseConfig.
      operationId: dataform.projects.locations.repositories.releaseConfigs.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: releaseConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: release_configs
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/releaseConfigs':
    parameters: *ref_1
    get:
      description: Lists ReleaseConfigs in a given Repository.
      operationId: dataform.projects.locations.repositories.releaseConfigs.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReleaseConfigsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: release_configs
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.releaseConfigs
    post:
      description: Creates a new ReleaseConfig in a given Repository.
      operationId: dataform.projects.locations.repositories.releaseConfigs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReleaseConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReleaseConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: releaseConfigId
          schema:
            type: string
      x-stackQL-resource: release_configs
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowConfigs/{workflowConfigsId}':
    parameters: *ref_1
    patch:
      description: Updates a single WorkflowConfig.
      operationId: dataform.projects.locations.repositories.workflowConfigs.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workflowConfigsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: workflow_configs
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Fetches a single WorkflowConfig.
      operationId: dataform.projects.locations.repositories.workflowConfigs.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workflowConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: workflow_configs
      x-stackQL-method: get
      x-stackQL-verb: select
    delete:
      description: Deletes a single WorkflowConfig.
      operationId: dataform.projects.locations.repositories.workflowConfigs.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: workflowConfigsId
          required: true
          schema:
            type: string
      x-stackQL-resource: workflow_configs
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/workflowConfigs':
    parameters: *ref_1
    post:
      description: Creates a new WorkflowConfig in a given Repository.
      operationId: dataform.projects.locations.repositories.workflowConfigs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowConfig'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: workflowConfigId
          schema:
            type: string
      x-stackQL-resource: workflow_configs
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists WorkflowConfigs in a given Repository.
      operationId: dataform.projects.locations.repositories.workflowConfigs.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkflowConfigsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: workflow_configs
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.workflowConfigs
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/compilationResults':
    parameters: *ref_1
    get:
      description: Lists CompilationResults in a given Repository.
      operationId: dataform.projects.locations.repositories.compilationResults.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCompilationResultsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: compilation_results
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.compilationResults
    post:
      description: Creates a new CompilationResult in a given project and location.
      operationId: dataform.projects.locations.repositories.compilationResults.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompilationResult'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompilationResult'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
      x-stackQL-resource: compilation_results
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/compilationResults/{compilationResultsId}:query':
    parameters: *ref_1
    get:
      description: Returns CompilationResultActions in a given CompilationResult.
      operationId: dataform.projects.locations.repositories.compilationResults.query
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryCompilationResultActionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: compilationResultsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: compilation_results
      x-stackQL-method: query
      x-stackQL-verb: exec
  '/v1beta1/projects/{projectsId}/locations/{locationsId}/repositories/{repositoriesId}/compilationResults/{compilationResultsId}':
    parameters: *ref_1
    get:
      description: Fetches a single CompilationResult.
      operationId: dataform.projects.locations.repositories.compilationResults.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompilationResult'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: repositoriesId
          required: true
          schema:
            type: string
        - in: path
          name: compilationResultsId
          required: true
          schema:
            type: string
      x-stackQL-resource: compilation_results
      x-stackQL-method: get
      x-stackQL-verb: select
