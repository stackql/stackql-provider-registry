openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Pollen API
  description: 'The Pollen API. '
  version: v1
  x-discovery-doc-revision: '20240917'
  x-generated-date: '2024-09-19'
externalDocs:
  url: https://developers.google.com/maps/documentation/pollen
servers:
  - url: https://pollen.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    Color:
      type: object
      description: >-
        Represents a color in the RGBA color space. This representation is
        designed for simplicity of conversion to and from color representations
        in various languages over compactness. For example, the fields of this
        representation can be trivially provided to the constructor of
        `java.awt.Color` in Java; it can also be trivially provided to UIColor's
        `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little
        work, it can be easily formatted into a CSS `rgba()` string in
        JavaScript. This reference page doesn't have information about the
        absolute color space that should be used to interpret the RGB valueâ€”for
        example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications
        should assume the sRGB color space. When color equality needs to be
        decided, implementations, unless documented otherwise, treat two colors
        as equal if all their red, green, blue, and alpha values each differ by
        at most `1e-5`. Example (Java): import com.google.type.Color; // ...
        public static java.awt.Color fromProto(Color protocolor) { float alpha =
        protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return
        new java.awt.Color( protocolor.getRed(), protocolor.getGreen(),
        protocolor.getBlue(), alpha); } public static Color
        toProto(java.awt.Color color) { float red = (float) color.getRed();
        float green = (float) color.getGreen(); float blue = (float)
        color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder
        = Color .newBuilder() .setRed(red / denominator) .setGreen(green /
        denominator) .setBlue(blue / denominator); int alpha = color.getAlpha();
        if (alpha != 255) { result.setAlpha( FloatValue .newBuilder()
        .setValue(((float) alpha) / denominator) .build()); } return
        resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static
        UIColor* fromProto(Color* protocolor) { float red = [protocolor red];
        float green = [protocolor green]; float blue = [protocolor blue];
        FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if
        (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return
        [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static
        Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if
        (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return
        nil; } Color* result = [[Color alloc] init]; [result setRed:red];
        [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) {
        [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease];
        return result; } // ... Example (JavaScript): // ... var protoToCssColor
        = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var
        greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue ||
        0.0; var red = Math.floor(redFrac * 255); var green =
        Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if
        (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); }
        var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red,
        green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac,
        ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var
        rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString
        = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var
        resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) {
        resultBuilder.push('0'); } resultBuilder.push(hexString); return
        resultBuilder.join(''); }; // ...
      id: Color
      properties:
        alpha:
          description: >-
            The fraction of this color that should be applied to the pixel. That
            is, the final pixel color is defined by the equation: `pixel color =
            alpha * (this color) + (1.0 - alpha) * (background color)` This
            means that a value of 1.0 corresponds to a solid color, whereas a
            value of 0.0 corresponds to a completely transparent color. This
            uses a wrapper message rather than a simple float scalar so that it
            is possible to distinguish between a default value and the value
            being unset. If omitted, this color object is rendered as a solid
            color (as if the alpha value had been explicitly given a value of
            1.0).
          type: number
          format: float
        blue:
          type: number
          description: The amount of blue in the color as a value in the interval [0, 1].
          format: float
        red:
          type: number
          description: The amount of red in the color as a value in the interval [0, 1].
          format: float
        green:
          format: float
          type: number
          description: The amount of green in the color as a value in the interval [0, 1].
    PlantDescription:
      description: >-
        Contains general information about plants, including details on their
        seasonality, special shapes and colors, information about allergic
        cross-reactions, and plant photos.
      properties:
        specialColors:
          type: string
          description: >-
            Textual description of the plants' colors of leaves, bark, flowers
            or seeds that helps identify the plant.
        crossReaction:
          description: >-
            Textual description of pollen cross reaction plants. Example: Alder,
            Hazel, Hornbeam, Beech, Willow, and Oak pollen.
          type: string
        picture:
          description: Link to the picture of the plant.
          type: string
        season:
          type: string
          description: >-
            Textual list of explanations of seasons where the pollen is active.
            Example: "Late winter, spring".
        pictureCloseup:
          description: Link to a closeup picture of the plant.
          type: string
        specialShapes:
          type: string
          description: >-
            Textual description of the plants' shapes of leaves, bark, flowers
            or seeds that helps identify the plant.
        family:
          type: string
          description: >-
            A human readable representation of the plant family name. Example:
            "Betulaceae (the Birch family)".
        type:
          description: >-
            The plant's pollen type. For example: "GRASS". A list of all
            available codes could be found here.
          type: string
          enum:
            - POLLEN_TYPE_UNSPECIFIED
            - GRASS
            - TREE
            - WEED
          enumDescriptions:
            - Unspecified plant type.
            - Grass pollen type.
            - Tree pollen type.
            - Weed pollen type.
      type: object
      id: PlantDescription
    IndexInfo:
      type: object
      id: IndexInfo
      description: >-
        This object contains data representing specific pollen index value,
        category and description.
      properties:
        value:
          description: The index's numeric score. Numeric range is between 0 and 5.
          format: int32
          type: integer
        color:
          description: The color used to represent the Pollen Index numeric score.
          $ref: '#/components/schemas/Color'
        indexDescription:
          type: string
          description: Textual explanation of current index level.
        category:
          description: >-
            Text classification of index numerical score interpretation. The
            index consists of six categories: * 0: "None" * 1: "Very low" * 2:
            "Low" * 3: "Moderate" * 4: "High" * 5: "Very high
          type: string
        displayName:
          type: string
          description: >-
            A human readable representation of the index name. Example:
            "Universal Pollen Index".
        code:
          enum:
            - INDEX_UNSPECIFIED
            - UPI
          enumDescriptions:
            - Unspecified index.
            - Universal Pollen Index.
          type: string
          description: >-
            The index's code. This field represents the index for programming
            purposes by using snake cases instead of spaces. Example: "UPI".
    DayInfo:
      properties:
        pollenTypeInfo:
          items:
            $ref: '#/components/schemas/PollenTypeInfo'
          type: array
          description: >-
            This list will include up to three pollen types (GRASS, WEED, TREE)
            affecting the location specified in the request.
        plantInfo:
          description: >-
            This list will include up to 15 pollen species affecting the
            location specified in the request.
          type: array
          items:
            $ref: '#/components/schemas/PlantInfo'
        date:
          description: The date in UTC at which the pollen forecast data is represented.
          $ref: '#/components/schemas/Date'
      id: DayInfo
      description: >-
        This object contains the daily forecast information for each day
        requested.
      type: object
    PollenTypeInfo:
      description: >-
        This object contains the pollen type index and health recommendation
        information on specific pollen type.
      properties:
        inSeason:
          type: boolean
          description: Indication whether the plant is in season or not.
        code:
          enumDescriptions:
            - Unspecified plant type.
            - Grass pollen type.
            - Tree pollen type.
            - Weed pollen type.
          enum:
            - POLLEN_TYPE_UNSPECIFIED
            - GRASS
            - TREE
            - WEED
          type: string
          description: 'The pollen type''s code name. For example: "GRASS"'
        indexInfo:
          description: Contains the Universal Pollen Index (UPI) data for the pollen type.
          $ref: '#/components/schemas/IndexInfo'
        healthRecommendations:
          description: >-
            Textual list of explanations, related to health insights based on
            the current pollen levels.
          items:
            type: string
          type: array
        displayName:
          description: >-
            A human readable representation of the pollen type name. Example:
            "Grass"
          type: string
      id: PollenTypeInfo
      type: object
    LookupForecastResponse:
      id: LookupForecastResponse
      type: object
      properties:
        regionCode:
          description: >-
            The ISO_3166-1 alpha-2 code of the country/region corresponding to
            the location provided in the request. This field might be omitted
            from the response if the location provided in the request resides in
            a disputed territory.
          type: string
        dailyInfo:
          items:
            $ref: '#/components/schemas/DayInfo'
          description: >-
            Required. This object contains the daily forecast information for
            each day requested.
          type: array
        nextPageToken:
          type: string
          description: Optional. The token to retrieve the next page.
    PlantInfo:
      properties:
        displayName:
          type: string
          description: >-
            A human readable representation of the plant name. Example:
            â€œCottonwood".
        indexInfo:
          $ref: '#/components/schemas/IndexInfo'
          description: >-
            This object contains data representing specific pollen index value,
            category and description.
        code:
          description: >-
            The plant code name. For example: "COTTONWOOD". A list of all
            available codes could be found here.
          enum:
            - PLANT_UNSPECIFIED
            - ALDER
            - ASH
            - BIRCH
            - COTTONWOOD
            - ELM
            - MAPLE
            - OLIVE
            - JUNIPER
            - OAK
            - PINE
            - CYPRESS_PINE
            - HAZEL
            - GRAMINALES
            - RAGWEED
            - MUGWORT
            - JAPANESE_CEDAR
            - JAPANESE_CYPRESS
          type: string
          enumDescriptions:
            - Unspecified plant code.
            - Alder is classified as a tree pollen type.
            - Ash is classified as a tree pollen type.
            - Birch is classified as a tree pollen type.
            - Cottonwood is classified as a tree pollen type.
            - Elm is classified as a tree pollen type.
            - Maple is classified as a tree pollen type.
            - Olive is classified as a tree pollen type.
            - Juniper is classified as a tree pollen type.
            - Oak is classified as a tree pollen type.
            - Pine is classified as a tree pollen type.
            - Cypress pine is classified as a tree pollen type.
            - Hazel is classified as a tree pollen type.
            - Graminales is classified as a grass pollen type.
            - Ragweed is classified as a weed pollen type.
            - Mugwort is classified as a weed pollen type.
            - Japanese cedar is classified as a tree pollen type.
            - Japanese cypress is classified as a tree pollen type.
        plantDescription:
          $ref: '#/components/schemas/PlantDescription'
          description: >-
            Contains general information about plants, including details on
            their seasonality, special shapes and colors, information about
            allergic cross-reactions, and plant photos.
        inSeason:
          type: boolean
          description: Indication of either the plant is in season or not.
      description: This object contains the daily information on specific plant.
      type: object
      id: PlantInfo
    Date:
      description: >-
        Represents a whole or partial calendar date, such as a birthday. The
        time of day and time zone are either specified elsewhere or are
        insignificant. The date is relative to the Gregorian Calendar. This can
        represent one of the following: * A full date, with non-zero year,
        month, and day values. * A month and day, with a zero year (for example,
        an anniversary). * A year on its own, with a zero month and a zero day.
        * A year and month, with a zero day (for example, a credit card
        expiration date). Related types: * google.type.TimeOfDay *
        google.type.DateTime * google.protobuf.Timestamp
      properties:
        month:
          description: >-
            Month of a year. Must be from 1 to 12, or 0 to specify a year
            without a month and day.
          type: integer
          format: int32
        day:
          format: int32
          description: >-
            Day of a month. Must be from 1 to 31 and valid for the year and
            month, or 0 to specify a year by itself or a year and month where
            the day isn't significant.
          type: integer
        year:
          description: >-
            Year of the date. Must be from 1 to 9999, or 0 to specify a date
            without a year.
          type: integer
          format: int32
      id: Date
      type: object
    HttpBody:
      properties:
        contentType:
          type: string
          description: >-
            The HTTP Content-Type header value specifying the content type of
            the body.
        data:
          type: string
          description: The HTTP request/response body as raw binary.
          format: byte
        extensions:
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          description: >-
            Application specific response metadata. Must be set in the first
            response for streaming APIs.
          type: array
      type: object
      id: HttpBody
      description: >-
        Message that represents an arbitrary HTTP body. It should only be used
        for payload formats that can't be represented as JSON, such as raw
        binary or an HTML page. This message can be used both in streaming and
        non-streaming API methods in the request as well as the response. It can
        be used as a top-level request field, which is convenient if one wants
        to extract parameters from either the URL or HTTP template into the
        request fields and also want access to the raw HTTP body. Example:
        message GetResourceRequest { // A unique request id. string request_id =
        1; // The raw HTTP body is bound to this field. google.api.HttpBody
        http_body = 2; } service ResourceService { rpc
        GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc
        UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); }
        Example with streaming methods: service CaldavService { rpc
        GetCalendar(stream google.api.HttpBody) returns (stream
        google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody)
        returns (stream google.api.HttpBody); } Use of this type only changes
        how the request and response bodies are handled, all other features will
        continue to work unchanged.
  parameters:
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
  x-stackQL-resources:
    forecast:
      id: google.pollen.forecast
      name: forecast
      title: Forecast
      methods:
        lookup:
          operation:
            $ref: '#/paths/~1v1~1forecast:lookup/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
    heatmap_tiles:
      id: google.pollen.heatmap_tiles
      name: heatmap_tiles
      title: Heatmap_tiles
      methods:
        lookup_heatmap_tile:
          operation:
            $ref: >-
              #/paths/~1v1~1mapTypes~1{mapType}~1heatmapTiles~1{zoom}~1{x}~1{y}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
paths:
  /v1/forecast:lookup:
    parameters: &ref_1
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/alt'
    get:
      description: >-
        Returns up to 5 days of daily pollen information in more than 65
        countries, up to 1km resolution.
      operationId: pollen.forecast.lookup
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LookupForecastResponse'
      parameters:
        - in: query
          name: languageCode
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: location.latitude
          schema:
            type: number
            format: double
        - in: query
          name: location.longitude
          schema:
            type: number
            format: double
        - in: query
          name: days
          schema:
            type: integer
            format: int32
        - in: query
          name: plantsDescription
          schema:
            type: boolean
  /v1/mapTypes/{mapType}/heatmapTiles/{zoom}/{x}/{y}:
    parameters: *ref_1
    get:
      description: Returns a byte array containing the data of the tile PNG image.
      operationId: pollen.mapTypes.heatmapTiles.lookupHeatmapTile
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpBody'
      parameters:
        - in: path
          name: mapType
          required: true
          schema:
            type: string
        - in: path
          name: zoom
          required: true
          schema:
            type: string
        - in: path
          name: x
          required: true
          schema:
            type: string
        - in: path
          name: 'y'
          required: true
          schema:
            type: string
