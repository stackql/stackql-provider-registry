openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Eventarc API
  description: Build event-driven applications on Google Cloud Platform.
  version: v1
  x-discovery-doc-revision: '20241029'
  x-generated-date: '2024-11-06'
externalDocs:
  url: https://cloud.google.com/eventarc
servers:
  - url: https://eventarc.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    GoogleLongrunningListOperationsResponse:
      id: GoogleLongrunningListOperationsResponse
      description: The response message for Operations.ListOperations.
      type: object
      properties:
        operations:
          description: >-
            A list of operations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/GoogleLongrunningOperation'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    GoogleLongrunningOperation:
      id: GoogleLongrunningOperation
      description: >-
        This resource represents a long-running operation that is the result of
        a network API call.
      type: object
      properties:
        name:
          description: >-
            The server-assigned name, which is only unique within the same
            service that originally returns it. If you use the default HTTP
            mapping, the `name` should be a resource name ending with
            `operations/{unique_id}`.
          type: string
        metadata:
          description: >-
            Service-specific metadata associated with the operation. It
            typically contains progress information and common metadata such as
            create time. Some services might not provide such metadata. Any
            method that returns a long-running operation should document the
            metadata type, if any.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
        done:
          description: >-
            If the value is `false`, it means the operation is still in
            progress. If `true`, the operation is completed, and either `error`
            or `response` is available.
          type: boolean
        error:
          description: >-
            The error result of the operation in case of failure or
            cancellation.
          $ref: '#/components/schemas/GoogleRpcStatus'
        response:
          description: >-
            The normal, successful response of the operation. If the original
            method returns no data on success, such as `Delete`, the response is
            `google.protobuf.Empty`. If the original method is standard
            `Get`/`Create`/`Update`, the response should be the resource. For
            other methods, the response should have the type `XxxResponse`,
            where `Xxx` is the original method name. For example, if the
            original method name is `TakeSnapshot()`, the inferred response type
            is `TakeSnapshotResponse`.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    GoogleRpcStatus:
      id: GoogleRpcStatus
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      type: object
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          type: integer
          format: int32
        message:
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
          type: string
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          type: array
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
    Empty:
      id: Empty
      description: >-
        A generic empty message that you can re-use to avoid defining duplicated
        empty messages in your APIs. A typical example is to use it as the
        request or the response type of an API method. For instance: service Foo
        { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
      type: object
      properties: {}
    GoogleLongrunningCancelOperationRequest:
      id: GoogleLongrunningCancelOperationRequest
      description: The request message for Operations.CancelOperation.
      type: object
      properties: {}
    Trigger:
      id: Trigger
      description: A representation of the trigger resource.
      type: object
      properties:
        name:
          description: >-
            Required. The resource name of the trigger. Must be unique within
            the location of the project and must be in
            `projects/{project}/locations/{location}/triggers/{trigger}` format.
          type: string
        uid:
          description: >-
            Output only. Server-assigned unique identifier for the trigger. The
            value is a UUID4 string and guaranteed to remain unchanged until the
            resource is deleted.
          readOnly: true
          type: string
        createTime:
          description: Output only. The creation time.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The last-modified time.
          readOnly: true
          type: string
          format: google-datetime
        eventFilters:
          description: >-
            Required. Unordered list. The list of filters that applies to event
            attributes. Only events that match all the provided filters are sent
            to the destination.
          type: array
          items:
            $ref: '#/components/schemas/EventFilter'
        serviceAccount:
          description: >-
            Optional. The IAM service account email associated with the trigger.
            The service account represents the identity of the trigger. The
            `iam.serviceAccounts.actAs` permission must be granted on the
            service account to allow a principal to impersonate the service
            account. For more information, see the [Roles and
            permissions](/eventarc/docs/all-roles-permissions) page specific to
            the trigger destination.
          type: string
        destination:
          description: Required. Destination specifies where the events should be sent to.
          $ref: '#/components/schemas/Destination'
        transport:
          description: >-
            Optional. To deliver messages, Eventarc might use other Google Cloud
            products as a transport intermediary. This field contains a
            reference to that transport intermediary. This information can be
            used for debugging purposes.
          $ref: '#/components/schemas/Transport'
        labels:
          description: >-
            Optional. User labels attached to the triggers that can be used to
            group resources.
          type: object
          additionalProperties:
            type: string
        channel:
          description: >-
            Optional. The name of the channel associated with the trigger in
            `projects/{project}/locations/{location}/channels/{channel}` format.
            You must provide a channel to receive events from Eventarc SaaS
            partners.
          type: string
        conditions:
          description: Output only. The reason(s) why a trigger is in FAILED state.
          readOnly: true
          type: object
          additionalProperties:
            $ref: '#/components/schemas/StateCondition'
        eventDataContentType:
          description: >-
            Optional. EventDataContentType specifies the type of payload in MIME
            format that is expected from the CloudEvent data field. This is set
            to `application/json` if the value is not defined.
          type: string
        satisfiesPzs:
          description: >-
            Output only. Whether or not this Trigger satisfies the requirements
            of physical zone separation
          readOnly: true
          type: boolean
        etag:
          description: >-
            Output only. This checksum is computed by the server based on the
            value of other fields, and might be sent only on create requests to
            ensure that the client has an up-to-date value before proceeding.
          readOnly: true
          type: string
    EventFilter:
      id: EventFilter
      description: Filters events based on exact matches on the CloudEvents attributes.
      type: object
      properties:
        attribute:
          description: >-
            Required. The name of a CloudEvents attribute. Currently, only a
            subset of attributes are supported for filtering. You can [retrieve
            a specific provider's supported event
            types](/eventarc/docs/list-providers#describe-provider). All
            triggers MUST provide a filter for the 'type' attribute.
          type: string
        value:
          description: Required. The value for the attribute.
          type: string
        operator:
          description: >-
            Optional. The operator used for matching the events with the value
            of the filter. If not specified, only events that have an exact
            key-value pair specified in the filter are matched. The allowed
            values are `path_pattern` and `match-path-pattern`. `path_pattern`
            is only allowed for GCFv1 triggers.
          type: string
    Destination:
      id: Destination
      description: Represents a target of an invocation over HTTP.
      type: object
      properties:
        cloudRun:
          description: >-
            Cloud Run fully-managed resource that receives the events. The
            resource should be in the same project as the trigger.
          $ref: '#/components/schemas/CloudRun'
        cloudFunction:
          description: >-
            The Cloud Function resource name. Cloud Functions V1 and V2 are
            supported. Format:
            `projects/{project}/locations/{location}/functions/{function}` This
            is a read-only field. Creating Cloud Functions V1/V2 triggers is
            only supported via the Cloud Functions product. An error will be
            returned if the user sets this value.
          type: string
        gke:
          description: >-
            A GKE service capable of receiving events. The service should be
            running in the same project as the trigger.
          $ref: '#/components/schemas/GKE'
        workflow:
          description: >-
            The resource name of the Workflow whose Executions are triggered by
            the events. The Workflow resource should be deployed in the same
            project as the trigger. Format:
            `projects/{project}/locations/{location}/workflows/{workflow}`
          type: string
        httpEndpoint:
          description: An HTTP endpoint destination described by an URI.
          $ref: '#/components/schemas/HttpEndpoint'
        networkConfig:
          description: >-
            Optional. Network config is used to configure how Eventarc resolves
            and connect to a destination. This should only be used with
            HttpEndpoint destination type.
          $ref: '#/components/schemas/NetworkConfig'
    CloudRun:
      id: CloudRun
      description: Represents a Cloud Run destination.
      type: object
      properties:
        service:
          description: >-
            Required. The name of the Cloud Run service being addressed. See
            https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services.
            Only services located in the same project as the trigger object can
            be addressed.
          type: string
        path:
          description: >-
            Optional. The relative path on the Cloud Run service the events
            should be sent to. The value must conform to the definition of a URI
            path segment (section 3.3 of RFC2396). Examples: "/route", "route",
            "route/subroute".
          type: string
        region:
          description: Required. The region the Cloud Run service is deployed in.
          type: string
    GKE:
      id: GKE
      description: Represents a GKE destination.
      type: object
      properties:
        cluster:
          description: >-
            Required. The name of the cluster the GKE service is running in. The
            cluster must be running in the same project as the trigger being
            created.
          type: string
        location:
          description: >-
            Required. The name of the Google Compute Engine in which the cluster
            resides, which can either be compute zone (for example,
            us-central1-a) for the zonal clusters or region (for example,
            us-central1) for regional clusters.
          type: string
        namespace:
          description: Required. The namespace the GKE service is running in.
          type: string
        service:
          description: Required. Name of the GKE service.
          type: string
        path:
          description: >-
            Optional. The relative path on the GKE service the events should be
            sent to. The value must conform to the definition of a URI path
            segment (section 3.3 of RFC2396). Examples: "/route", "route",
            "route/subroute".
          type: string
    HttpEndpoint:
      id: HttpEndpoint
      description: Represents a HTTP endpoint destination.
      type: object
      properties:
        uri:
          description: >-
            Required. The URI of the HTTP enpdoint. The value must be a RFC2396
            URI string. Examples: `http://10.10.10.8:80/route`,
            `http://svc.us-central1.p.local:8080/`. Only HTTP and HTTPS
            protocols are supported. The host can be either a static IP
            addressable from the VPC specified by the network config, or an
            internal DNS hostname of the service resolvable via Cloud DNS.
          type: string
    NetworkConfig:
      id: NetworkConfig
      description: Network Configuration that can be inherited by other protos.
      type: object
      properties:
        networkAttachment:
          description: >-
            Required. Name of the NetworkAttachment that allows access to the
            customer's VPC. Format:
            `projects/{PROJECT_ID}/regions/{REGION}/networkAttachments/{NETWORK_ATTACHMENT_NAME}`
          type: string
    Transport:
      id: Transport
      description: >-
        Represents the transport intermediaries created for the trigger to
        deliver events.
      type: object
      properties:
        pubsub:
          description: >-
            The Pub/Sub topic and subscription used by Eventarc as a transport
            intermediary.
          $ref: '#/components/schemas/Pubsub'
    Pubsub:
      id: Pubsub
      description: Represents a Pub/Sub transport.
      type: object
      properties:
        topic:
          description: >-
            Optional. The name of the Pub/Sub topic created and managed by
            Eventarc as a transport for the event delivery. Format:
            `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`. You can set an existing
            topic for triggers of the type
            `google.cloud.pubsub.topic.v1.messagePublished`. The topic you
            provide here is not deleted by Eventarc at trigger deletion.
          type: string
        subscription:
          description: >-
            Output only. The name of the Pub/Sub subscription created and
            managed by Eventarc as a transport for the event delivery. Format:
            `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
          readOnly: true
          type: string
    StateCondition:
      id: StateCondition
      description: A condition that is part of the trigger state computation.
      type: object
      properties:
        code:
          description: The canonical code of the condition.
          type: string
          enumDescriptions:
            - 'Not an error; returned on success. HTTP Mapping: 200 OK'
            - >-
              The operation was cancelled, typically by the caller. HTTP
              Mapping: 499 Client Closed Request
            - >-
              Unknown error. For example, this error may be returned when a
              `Status` value received from another address space belongs to an
              error space that is not known in this address space. Also errors
              raised by APIs that do not return enough error information may be
              converted to this error. HTTP Mapping: 500 Internal Server Error
            - >-
              The client specified an invalid argument. Note that this differs
              from `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments
              that are problematic regardless of the state of the system (e.g.,
              a malformed file name). HTTP Mapping: 400 Bad Request
            - >-
              The deadline expired before the operation could complete. For
              operations that change the state of the system, this error may be
              returned even if the operation has completed successfully. For
              example, a successful response from a server could have been
              delayed long enough for the deadline to expire. HTTP Mapping: 504
              Gateway Timeout
            - >-
              Some requested entity (e.g., file or directory) was not found.
              Note to server developers: if a request is denied for an entire
              class of users, such as gradual feature rollout or undocumented
              allowlist, `NOT_FOUND` may be used. If a request is denied for
              some users within a class of users, such as user-based access
              control, `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not
              Found
            - >-
              The entity that a client attempted to create (e.g., file or
              directory) already exists. HTTP Mapping: 409 Conflict
            - >-
              The caller does not have permission to execute the specified
              operation. `PERMISSION_DENIED` must not be used for rejections
              caused by exhausting some resource (use `RESOURCE_EXHAUSTED`
              instead for those errors). `PERMISSION_DENIED` must not be used if
              the caller can not be identified (use `UNAUTHENTICATED` instead
              for those errors). This error code does not imply the request is
              valid or the requested entity exists or satisfies other
              pre-conditions. HTTP Mapping: 403 Forbidden
            - >-
              The request does not have valid authentication credentials for the
              operation. HTTP Mapping: 401 Unauthorized
            - >-
              Some resource has been exhausted, perhaps a per-user quota, or
              perhaps the entire file system is out of space. HTTP Mapping: 429
              Too Many Requests
            - >-
              The operation was rejected because the system is not in a state
              required for the operation's execution. For example, the directory
              to be deleted is non-empty, an rmdir operation is applied to a
              non-directory, etc. Service implementors can use the following
              guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and
              `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just
              the failing call. (b) Use `ABORTED` if the client should retry at
              a higher level. For example, when a client-specified test-and-set
              fails, indicating the client should restart a read-modify-write
              sequence. (c) Use `FAILED_PRECONDITION` if the client should not
              retry until the system state has been explicitly fixed. For
              example, if an "rmdir" fails because the directory is non-empty,
              `FAILED_PRECONDITION` should be returned since the client should
              not retry unless the files are deleted from the directory. HTTP
              Mapping: 400 Bad Request
            - >-
              The operation was aborted, typically due to a concurrency issue
              such as a sequencer check failure or transaction abort. See the
              guidelines above for deciding between `FAILED_PRECONDITION`,
              `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 409 Conflict
            - >-
              The operation was attempted past the valid range. E.g., seeking or
              reading past end-of-file. Unlike `INVALID_ARGUMENT`, this error
              indicates a problem that may be fixed if the system state changes.
              For example, a 32-bit file system will generate `INVALID_ARGUMENT`
              if asked to read at an offset that is not in the range [0,2^32-1],
              but it will generate `OUT_OF_RANGE` if asked to read from an
              offset past the current file size. There is a fair bit of overlap
              between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend
              using `OUT_OF_RANGE` (the more specific error) when it applies so
              that callers who are iterating through a space can easily look for
              an `OUT_OF_RANGE` error to detect when they are done. HTTP
              Mapping: 400 Bad Request
            - >-
              The operation is not implemented or is not supported/enabled in
              this service. HTTP Mapping: 501 Not Implemented
            - >-
              Internal errors. This means that some invariants expected by the
              underlying system have been broken. This error code is reserved
              for serious errors. HTTP Mapping: 500 Internal Server Error
            - >-
              The service is currently unavailable. This is most likely a
              transient condition, which can be corrected by retrying with a
              backoff. Note that it is not always safe to retry non-idempotent
              operations. See the guidelines above for deciding between
              `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP Mapping:
              503 Service Unavailable
            - >-
              Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal
              Server Error
          enum:
            - OK
            - CANCELLED
            - UNKNOWN
            - INVALID_ARGUMENT
            - DEADLINE_EXCEEDED
            - NOT_FOUND
            - ALREADY_EXISTS
            - PERMISSION_DENIED
            - UNAUTHENTICATED
            - RESOURCE_EXHAUSTED
            - FAILED_PRECONDITION
            - ABORTED
            - OUT_OF_RANGE
            - UNIMPLEMENTED
            - INTERNAL
            - UNAVAILABLE
            - DATA_LOSS
        message:
          description: Human-readable message.
          type: string
    ListTriggersResponse:
      id: ListTriggersResponse
      description: The response message for the `ListTriggers` method.
      type: object
      properties:
        triggers:
          description: The requested triggers, up to the number specified in `page_size`.
          type: array
          items:
            $ref: '#/components/schemas/Trigger'
        nextPageToken:
          description: >-
            A page token that can be sent to `ListTriggers` to request the next
            page. If this is empty, then there are no more pages.
          type: string
        unreachable:
          description: Unreachable resources, if any.
          type: array
          items:
            type: string
    Channel:
      id: Channel
      description: >-
        A representation of the Channel resource. A Channel is a resource on
        which event providers publish their events. The published events are
        delivered through the transport associated with the channel. Note that a
        channel is associated with exactly one event provider.
      type: object
      properties:
        name:
          description: >-
            Required. The resource name of the channel. Must be unique within
            the location on the project and must be in
            `projects/{project}/locations/{location}/channels/{channel_id}`
            format.
          type: string
        uid:
          description: >-
            Output only. Server assigned unique identifier for the channel. The
            value is a UUID4 string and guaranteed to remain unchanged until the
            resource is deleted.
          readOnly: true
          type: string
        createTime:
          description: Output only. The creation time.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The last-modified time.
          readOnly: true
          type: string
          format: google-datetime
        provider:
          description: >-
            The name of the event provider (e.g. Eventarc SaaS partner)
            associated with the channel. This provider will be granted
            permissions to publish events to the channel. Format:
            `projects/{project}/locations/{location}/providers/{provider_id}`.
          type: string
        pubsubTopic:
          description: >-
            Output only. The name of the Pub/Sub topic created and managed by
            Eventarc system as a transport for the event delivery. Format:
            `projects/{project}/topics/{topic_id}`.
          readOnly: true
          type: string
        state:
          description: Output only. The state of a Channel.
          readOnly: true
          type: string
          enumDescriptions:
            - Default value. This value is unused.
            - >-
              The PENDING state indicates that a Channel has been created
              successfully and there is a new activation token available for the
              subscriber to use to convey the Channel to the provider in order
              to create a Connection.
            - >-
              The ACTIVE state indicates that a Channel has been successfully
              connected with the event provider. An ACTIVE Channel is ready to
              receive and route events from the event provider.
            - >-
              The INACTIVE state indicates that the Channel cannot receive
              events permanently. There are two possible cases this state can
              happen: 1. The SaaS provider disconnected from this Channel. 2.
              The Channel activation token has expired but the SaaS provider
              wasn't connected. To re-establish a Connection with a provider,
              the subscriber should create a new Channel and give it to the
              provider.
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - ACTIVE
            - INACTIVE
        activationToken:
          description: >-
            Output only. The activation token for the channel. The token must be
            used by the provider to register the channel for publishing.
          readOnly: true
          type: string
        cryptoKeyName:
          description: >-
            Resource name of a KMS crypto key (managed by the user) used to
            encrypt/decrypt their event data. It must match the pattern
            `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
          type: string
        satisfiesPzs:
          description: >-
            Output only. Whether or not this Channel satisfies the requirements
            of physical zone separation
          readOnly: true
          type: boolean
    ListChannelsResponse:
      id: ListChannelsResponse
      description: The response message for the `ListChannels` method.
      type: object
      properties:
        channels:
          description: The requested channels, up to the number specified in `page_size`.
          type: array
          items:
            $ref: '#/components/schemas/Channel'
        nextPageToken:
          description: >-
            A page token that can be sent to `ListChannels` to request the next
            page. If this is empty, then there are no more pages.
          type: string
        unreachable:
          description: Unreachable resources, if any.
          type: array
          items:
            type: string
    Provider:
      id: Provider
      description: A representation of the Provider resource.
      type: object
      properties:
        name:
          description: >-
            Output only. In
            `projects/{project}/locations/{location}/providers/{provider_id}`
            format.
          readOnly: true
          type: string
        displayName:
          description: >-
            Output only. Human friendly name for the Provider. For example
            "Cloud Storage".
          readOnly: true
          type: string
        eventTypes:
          description: Output only. Event types for this provider.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/EventType'
    EventType:
      id: EventType
      description: A representation of the event type resource.
      type: object
      properties:
        type:
          description: >-
            Output only. The full name of the event type (for example,
            "google.cloud.storage.object.v1.finalized"). In the form of
            {provider-specific-prefix}.{resource}.{version}.{verb}. Types MUST
            be versioned and event schemas are guaranteed to remain backward
            compatible within one version. Note that event type versions and API
            versions do not need to match.
          readOnly: true
          type: string
        description:
          description: >-
            Output only. Human friendly description of what the event type is
            about. For example "Bucket created in Cloud Storage".
          readOnly: true
          type: string
        filteringAttributes:
          description: Output only. Filtering attributes for the event type.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/FilteringAttribute'
        eventSchemaUri:
          description: >-
            Output only. URI for the event schema. For example
            "https://github.com/googleapis/google-cloudevents/blob/master/proto/google/events/cloud/storage/v1/events.proto"
          readOnly: true
          type: string
    FilteringAttribute:
      id: FilteringAttribute
      description: >-
        A representation of the FilteringAttribute resource. Filtering
        attributes are per event type.
      type: object
      properties:
        attribute:
          description: Output only. Attribute used for filtering the event type.
          readOnly: true
          type: string
        description:
          description: Output only. Description of the purpose of the attribute.
          readOnly: true
          type: string
        required:
          description: >-
            Output only. If true, the triggers for this provider should always
            specify a filter on these attributes. Trigger creation will fail
            otherwise.
          readOnly: true
          type: boolean
        pathPatternSupported:
          description: >-
            Output only. If true, the attribute accepts matching expressions in
            the Eventarc PathPattern format.
          readOnly: true
          type: boolean
    ListProvidersResponse:
      id: ListProvidersResponse
      description: The response message for the `ListProviders` method.
      type: object
      properties:
        providers:
          description: The requested providers, up to the number specified in `page_size`.
          type: array
          items:
            $ref: '#/components/schemas/Provider'
        nextPageToken:
          description: >-
            A page token that can be sent to `ListProviders` to request the next
            page. If this is empty, then there are no more pages.
          type: string
        unreachable:
          description: Unreachable resources, if any.
          type: array
          items:
            type: string
    ChannelConnection:
      id: ChannelConnection
      description: >-
        A representation of the ChannelConnection resource. A ChannelConnection
        is a resource which event providers create during the activation process
        to establish a connection between the provider and the subscriber
        channel.
      type: object
      properties:
        name:
          description: Required. The name of the connection.
          type: string
        uid:
          description: >-
            Output only. Server assigned ID of the resource. The server
            guarantees uniqueness and immutability until deleted.
          readOnly: true
          type: string
        channel:
          description: >-
            Required. The name of the connected subscriber Channel. This is a
            weak reference to avoid cross project and cross accounts references.
            This must be in
            `projects/{project}/location/{location}/channels/{channel_id}`
            format.
          type: string
        createTime:
          description: Output only. The creation time.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The last-modified time.
          readOnly: true
          type: string
          format: google-datetime
        activationToken:
          description: >-
            Input only. Activation token for the channel. The token will be used
            during the creation of ChannelConnection to bind the channel with
            the provider project. This field will not be stored in the provider
            resource.
          type: string
    ListChannelConnectionsResponse:
      id: ListChannelConnectionsResponse
      description: The response message for the `ListChannelConnections` method.
      type: object
      properties:
        channelConnections:
          description: >-
            The requested channel connections, up to the number specified in
            `page_size`.
          type: array
          items:
            $ref: '#/components/schemas/ChannelConnection'
        nextPageToken:
          description: >-
            A page token that can be sent to `ListChannelConnections` to request
            the next page. If this is empty, then there are no more pages.
          type: string
        unreachable:
          description: Unreachable resources, if any.
          type: array
          items:
            type: string
    GoogleChannelConfig:
      id: GoogleChannelConfig
      description: >-
        A GoogleChannelConfig is a resource that stores the custom settings
        respected by Eventarc first-party triggers in the matching region. Once
        configured, first-party event data will be protected using the specified
        custom managed encryption key instead of Google-managed encryption keys.
      type: object
      properties:
        name:
          description: >-
            Required. The resource name of the config. Must be in the format of,
            `projects/{project}/locations/{location}/googleChannelConfig`.
          type: string
        updateTime:
          description: Output only. The last-modified time.
          readOnly: true
          type: string
          format: google-datetime
        cryptoKeyName:
          description: >-
            Optional. Resource name of a KMS crypto key (managed by the user)
            used to encrypt/decrypt their event data. It must match the pattern
            `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
          type: string
    MessageBus:
      id: MessageBus
      description: >-
        MessageBus for the messages flowing through the system. The admin has
        visibility and control over the messages being published and consumed
        and can restrict publishers and subscribers to only a subset of data
        available in the system by defining authorization policies.
      type: object
      properties:
        name:
          description: >-
            Identifier. Resource name of the form
            projects/{project}/locations/{location}/messageBuses/{message_bus}
          type: string
        uid:
          description: >-
            Output only. Server assigned unique identifier for the channel. The
            value is a UUID4 string and guaranteed to remain unchanged until the
            resource is deleted.
          readOnly: true
          type: string
        etag:
          description: >-
            Output only. This checksum is computed by the server based on the
            value of other fields, and might be sent only on update and delete
            requests to ensure that the client has an up-to-date value before
            proceeding.
          readOnly: true
          type: string
        createTime:
          description: Output only. The creation time.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The last-modified time.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: Optional. Resource labels.
          type: object
          additionalProperties:
            type: string
        annotations:
          description: Optional. Resource annotations.
          type: object
          additionalProperties:
            type: string
        displayName:
          description: Optional. Resource display name.
          type: string
        cryptoKeyName:
          description: >-
            Optional. Resource name of a KMS crypto key (managed by the user)
            used to encrypt/decrypt their event data. It must match the pattern
            `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
          type: string
        loggingConfig:
          description: >-
            Optional. Config to control Platform logging for the Message Bus.
            This log configuration is applied to the Message Bus itself, and all
            the Enrollments attached to it.
          $ref: '#/components/schemas/LoggingConfig'
    LoggingConfig:
      id: LoggingConfig
      description: >-
        The configuration for Platform Telemetry logging for Eventarc Avdvanced
        resources.
      type: object
      properties:
        logSeverity:
          description: >-
            Optional. The minimum severity of logs that will be sent to
            Stackdriver/Platform Telemetry. Logs at severitiy ≥ this value will
            be sent, unless it is NONE.
          type: string
          enumDescriptions:
            - >-
              Log severity is not specified. This value is treated the same as
              NONE, but is used to distinguish between no update and update to
              NONE in update_masks.
            - >-
              Default value at resource creation, presence of this value must be
              treated as no logging/disable logging.
            - Debug or trace level logging.
            - Routine information, such as ongoing status or performance.
            - >-
              Normal but significant events, such as start up, shut down, or a
              configuration change.
            - Warning events might cause problems.
            - Error events are likely to cause problems.
            - Critical events cause more severe problems or outages.
            - A person must take action immediately.
            - One or more systems are unusable.
          enum:
            - LOG_SEVERITY_UNSPECIFIED
            - NONE
            - DEBUG
            - INFO
            - NOTICE
            - WARNING
            - ERROR
            - CRITICAL
            - ALERT
            - EMERGENCY
    ListMessageBusesResponse:
      id: ListMessageBusesResponse
      description: The response message for the `ListMessageBuses` method.
      type: object
      properties:
        messageBuses:
          description: >-
            The requested message buses, up to the number specified in
            `page_size`.
          type: array
          items:
            $ref: '#/components/schemas/MessageBus'
        nextPageToken:
          description: >-
            A page token that can be sent to `ListMessageBuses` to request the
            next page. If this is empty, then there are no more pages.
          type: string
        unreachable:
          description: Unreachable resources, if any.
          type: array
          items:
            type: string
    ListMessageBusEnrollmentsResponse:
      id: ListMessageBusEnrollmentsResponse
      description: The response message for the `ListMessageBusEnrollments` method.`
      type: object
      properties:
        enrollments:
          description: >-
            The requested enrollments, up to the number specified in
            `page_size`.
          type: array
          items:
            type: string
        nextPageToken:
          description: >-
            A page token that can be sent to `ListMessageBusEnrollments` to
            request the next page. If this is empty, then there are no more
            pages.
          type: string
        unreachable:
          description: Unreachable resources, if any.
          type: array
          items:
            type: string
    Enrollment:
      id: Enrollment
      description: >-
        An enrollment represents a subscription for messages on a particular
        message bus. It defines a matching criteria for messages on the bus and
        the subscriber endpoint where matched messages should be delivered.
      type: object
      properties:
        name:
          description: >-
            Identifier. Resource name of the form
            projects/{project}/locations/{location}/enrollments/{enrollment}
          type: string
        uid:
          description: >-
            Output only. Server assigned unique identifier for the channel. The
            value is a UUID4 string and guaranteed to remain unchanged until the
            resource is deleted.
          readOnly: true
          type: string
        etag:
          description: >-
            Output only. This checksum is computed by the server based on the
            value of other fields, and might be sent only on update and delete
            requests to ensure that the client has an up-to-date value before
            proceeding.
          readOnly: true
          type: string
        createTime:
          description: Output only. The creation time.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The last-modified time.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: Optional. Resource labels.
          type: object
          additionalProperties:
            type: string
        annotations:
          description: Optional. Resource annotations.
          type: object
          additionalProperties:
            type: string
        displayName:
          description: Optional. Resource display name.
          type: string
        celMatch:
          description: >-
            Required. A CEL expression identifying which messages this
            enrollment applies to.
          type: string
        messageBus:
          description: >-
            Required. Resource name of the message bus identifying the source of
            the messages. It matches the form
            projects/{project}/locations/{location}/messageBuses/{messageBus}.
          type: string
        destination:
          description: >-
            Required. Destination is the Pipeline that the Enrollment is
            delivering to. It must point to the full resource name of a
            Pipeline. Format:
            "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
          type: string
    ListEnrollmentsResponse:
      id: ListEnrollmentsResponse
      description: The response message for the `ListEnrollments` method.
      type: object
      properties:
        enrollments:
          description: >-
            The requested Enrollments, up to the number specified in
            `page_size`.
          type: array
          items:
            $ref: '#/components/schemas/Enrollment'
        nextPageToken:
          description: >-
            A page token that can be sent to `ListEnrollments` to request the
            next page. If this is empty, then there are no more pages.
          type: string
        unreachable:
          description: Unreachable resources, if any.
          type: array
          items:
            type: string
    Pipeline:
      id: Pipeline
      description: A representation of the Pipeline resource.
      type: object
      properties:
        name:
          description: >-
            Identifier. The resource name of the Pipeline. Must be unique within
            the location of the project and must be in
            `projects/{project}/locations/{location}/pipelines/{pipeline}`
            format.
          type: string
        createTime:
          description: >-
            Output only. The creation time. A timestamp in RFC3339 UTC "Zulu"
            format, with nanosecond resolution and up to nine fractional digits.
            Examples: "2014-10-02T15:01:23Z" and
            "2014-10-02T15:01:23.045123456Z".
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: >-
            Output only. The last-modified time. A timestamp in RFC3339 UTC
            "Zulu" format, with nanosecond resolution and up to nine fractional
            digits. Examples: "2014-10-02T15:01:23Z" and
            "2014-10-02T15:01:23.045123456Z".
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: >-
            Optional. User labels attached to the Pipeline that can be used to
            group resources. An object containing a list of "key": value pairs.
            Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
          type: object
          additionalProperties:
            type: string
        uid:
          description: >-
            Output only. Server-assigned unique identifier for the Pipeline. The
            value is a UUID4 string and guaranteed to remain unchanged until the
            resource is deleted.
          readOnly: true
          type: string
        annotations:
          description: >-
            Optional. User-defined annotations. See
            https://google.aip.dev/128#annotations.
          type: object
          additionalProperties:
            type: string
        displayName:
          description: Optional. Display name of resource.
          type: string
        destinations:
          description: >-
            Required. List of destinations to which messages will be forwarded.
            Currently, exactly one destination is supported per Pipeline.
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudEventarcV1PipelineDestination'
        mediations:
          description: >-
            Optional. List of mediation operations to be performed on the
            message. Currently, only one Transformation operation is allowed in
            each Pipeline.
          type: array
          items:
            $ref: '#/components/schemas/GoogleCloudEventarcV1PipelineMediation'
        cryptoKeyName:
          description: >-
            Optional. Resource name of a KMS crypto key (managed by the user)
            used to encrypt/decrypt the event data. If not set, an internal
            Google-owned key will be used to encrypt messages. It must match the
            pattern
            "projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}".
          type: string
        inputPayloadFormat:
          description: >-
            Optional. The payload format expected for the messages received by
            the Pipeline. If input_payload_format is set then any messages not
            matching this format will be treated as persistent errors. If
            input_payload_format is not set, then the message data will be
            treated as an opaque binary and no output format can be set on the
            Pipeline through the Pipeline.Destination.output_payload_format
            field. Any Mediations on the Pipeline that involve access to the
            data field will fail as persistent errors.
          $ref: >-
            #/components/schemas/GoogleCloudEventarcV1PipelineMessagePayloadFormat
        loggingConfig:
          description: Optional. Config to control Platform Logging for Pipelines.
          $ref: '#/components/schemas/LoggingConfig'
        retryPolicy:
          description: Optional. The retry policy to use in the pipeline.
          $ref: '#/components/schemas/GoogleCloudEventarcV1PipelineRetryPolicy'
        etag:
          description: >-
            Output only. This checksum is computed by the server based on the
            value of other fields, and might be sent only on create requests to
            ensure that the client has an up-to-date value before proceeding.
          type: string
    GoogleCloudEventarcV1PipelineDestination:
      id: GoogleCloudEventarcV1PipelineDestination
      description: Represents a target of an invocation over HTTP.
      type: object
      properties:
        networkConfig:
          description: >-
            Optional. Network config is used to configure how Pipeline resolves
            and connects to a destination.
          $ref: >-
            #/components/schemas/GoogleCloudEventarcV1PipelineDestinationNetworkConfig
        httpEndpoint:
          description: >-
            Optional. An HTTP endpoint destination described by an URI. If a DNS
            FQDN is provided as the endpoint, Pipeline will create a peering
            zone to the consumer VPC and forward DNS requests to the VPC
            specified by network config to resolve the service endpoint. See:
            https://cloud.google.com/dns/docs/zones/zones-overview#peering_zones
          $ref: >-
            #/components/schemas/GoogleCloudEventarcV1PipelineDestinationHttpEndpoint
        workflow:
          description: >-
            Optional. The resource name of the Workflow whose Executions are
            triggered by the events. The Workflow resource should be deployed in
            the same project as the Pipeline. Format:
            `projects/{project}/locations/{location}/workflows/{workflow}`
          type: string
        messageBus:
          description: >-
            Optional. The resource name of the Message Bus to which events
            should be published. The Message Bus resource should exist in the
            same project as the Pipeline. Format:
            `projects/{project}/locations/{location}/messageBuses/{message_bus}`
          type: string
        topic:
          description: >-
            Optional. The resource name of the Pub/Sub topic to which events
            should be published. Format:
            `projects/{project}/locations/{location}/topics/{topic}`
          type: string
        authenticationConfig:
          description: >-
            Optional. An authentication config used to authenticate message
            requests, such that destinations can verify the source. For example,
            this can be used with private GCP destinations that require GCP
            credentials to access like Cloud Run. This field is optional and
            should be set only by users interested in authenticated push
          $ref: >-
            #/components/schemas/GoogleCloudEventarcV1PipelineDestinationAuthenticationConfig
        outputPayloadFormat:
          description: >-
            Optional. The message format before it is delivered to the
            destination. If not set, the message will be delivered in the format
            it was originally delivered to the Pipeline. This field can only be
            set if Pipeline.input_payload_format is also set.
          $ref: >-
            #/components/schemas/GoogleCloudEventarcV1PipelineMessagePayloadFormat
    GoogleCloudEventarcV1PipelineDestinationNetworkConfig:
      id: GoogleCloudEventarcV1PipelineDestinationNetworkConfig
      description: >-
        Represents a network config to be used for destination resolution and
        connectivity.
      type: object
      properties:
        networkAttachment:
          description: >-
            Required. Name of the NetworkAttachment that allows access to the
            consumer VPC. Format:
            `projects/{PROJECT_ID}/regions/{REGION}/networkAttachments/{NETWORK_ATTACHMENT_NAME}`
          type: string
    GoogleCloudEventarcV1PipelineDestinationHttpEndpoint:
      id: GoogleCloudEventarcV1PipelineDestinationHttpEndpoint
      description: Represents a HTTP endpoint destination.
      type: object
      properties:
        uri:
          description: >-
            Required. The URI of the HTTP enpdoint. The value must be a RFC2396
            URI string. Examples: `https://svc.us-central1.p.local:8080/route`.
            Only the HTTPS protocol is supported.
          type: string
        messageBindingTemplate:
          description: >-
            Optional. The CEL expression used to modify how the
            destination-bound HTTP request is constructed. If a binding
            expression is not specified here, the message is treated as a
            CloudEvent and is mapped to the HTTP request according to the
            CloudEvent HTTP Protocol Binding Binary Content Mode. In this
            representation, all fields except the `data` and `datacontenttype`
            field on the message are mapped to HTTP request headers with a
            prefix of `ce-`. To construct the HTTP request payload and the value
            of the content-type HTTP header, the payload format is defined as
            follows: 1) Use the output_payload_format_type on the
            Pipeline.Destination if it is set, else: 2) Use the
            input_payload_format_type on the Pipeline if it is set, else: 3)
            Treat the payload as opaque binary data. The `data` field of the
            message is converted to the payload format or left as-is for case 3)
            and then attached as the payload of the HTTP request. The
            `content-type` header on the HTTP request is set to the payload
            format type or left empty for case 3). However, if a mediation has
            updated the `datacontenttype` field on the message so that it is not
            the same as the payload format type but it is still a prefix of the
            payload format type, then the `content-type` header on the HTTP
            request is set to this `datacontenttype` value. For example, if the
            `datacontenttype` is "application/json" and the payload format type
            is "application/json; charset=utf-8", then the `content-type` header
            on the HTTP request is set to "application/json; charset=utf-8". If
            a non-empty binding expression is specified then this expression is
            used to modify the default CloudEvent HTTP Protocol Binding Binary
            Content representation. The result of the CEL expression must be a
            map of key/value pairs which is used as follows: - If a map named
            `headers` exists on the result of the expression, then its key/value
            pairs are directly mapped to the HTTP request headers. The headers
            values are constructed from the corresponding value type's canonical
            representation. If the `headers` field doesn't exist then the
            resulting HTTP request will be the headers of the CloudEvent HTTP
            Binding Binary Content Mode representation of the final message.
            Note: If the specified binding expression, has updated the
            `datacontenttype` field on the message so that it is not the same as
            the payload format type but it is still a prefix of the payload
            format type, then the `content-type` header in the `headers` map is
            set to this `datacontenttype` value. - If a field named `body`
            exists on the result of the expression then its value is directly
            mapped to the body of the request. If the value of the `body` field
            is of type bytes or string then it is used for the HTTP request body
            as-is, with no conversion. If the body field is of any other type
            then it is converted to a JSON string. If the body field does not
            exist then the resulting payload of the HTTP request will be data
            value of the CloudEvent HTTP Binding Binary Content Mode
            representation of the final message as described earlier. - Any
            other fields in the resulting expression will be ignored. The CEL
            expression may access the incoming CloudEvent message in its
            definition, as follows: - The `data` field of the incoming
            CloudEvent message can be accessed using the `message.data` value.
            Subfields of `message.data` may also be accessed if an
            input_payload_format has been specified on the Pipeline. - Each
            attribute of the incoming CloudEvent message can be accessed using
            the `message.` value, where is replaced with the name of the
            attribute. - Existing headers can be accessed in the CEL expression
            using the `headers` variable. The `headers` variable defines a map
            of key/value pairs corresponding to the HTTP headers of the
            CloudEvent HTTP Binding Binary Content Mode representation of the
            final message as described earlier. For example, the following CEL
            expression can be used to construct an HTTP request by adding an
            additional header to the HTTP headers of the CloudEvent HTTP Binding
            Binary Content Mode representation of the final message and by
            overwriting the body of the request: ``` { "headers":
            headers.merge({"new-header-key": "new-header-value"}), "body":
            "new-body" } ``` Additionally, the following CEL extension functions
            are provided for use in this CEL expression: - toBase64Url:
            map.toBase64Url() -> string - Converts a CelValue to a base64url
            encoded string - toJsonString: map.toJsonString() -> string -
            Converts a CelValue to a JSON string - merge: map1.merge(map2) ->
            map3 - Merges the passed CEL map with the existing CEL map the
            function is applied to. - If the same key exists in both maps, if
            the key's value is type map both maps are merged else the value from
            the passed map is used. - denormalize: map.denormalize() -> map -
            Denormalizes a CEL map such that every value of type map or key in
            the map is expanded to return a single level map. - The resulting
            keys are "." separated indices of the map keys. - For example: {
            "a": 1, "b": { "c": 2, "d": 3 } "e": [4, 5] } .denormalize() -> {
            "a": 1, "b.c": 2, "b.d": 3, "e.0": 4, "e.1": 5 } - setField:
            map.setField(key, value) -> message - Sets the field of the message
            with the given key to the given value. - If the field is not present
            it will be added. - If the field is present it will be overwritten.
            - The key can be a dot separated path to set a field in a nested
            message. - Key must be of type string. - Value may be any valid
            type. - removeFields: map.removeFields([key1, key2, ...]) -> message
            - Removes the fields of the map with the given keys. - The keys can
            be a dot separated path to remove a field in a nested message. - If
            a key is not found it will be ignored. - Keys must be of type
            string. - toMap: [map1, map2, ...].toMap() -> map - Converts a CEL
            list of CEL maps to a single CEL map - toDestinationPayloadFormat():
            message.data.toDestinationPayloadFormat() -> string or bytes -
            Converts the message data to the destination payload format
            specified in Pipeline.Destination.output_payload_format - This
            function is meant to be applied to the message.data field. - If the
            destination payload format is not set, the function will return the
            message data unchanged. - toCloudEventJsonWithPayloadFormat:
            message.toCloudEventJsonWithPayloadFormat() -> map - Converts a
            message to the corresponding structure of JSON format for
            CloudEvents - This function applies toDestinationPayloadFormat() to
            the message data. It also sets the corresponding datacontenttype of
            the CloudEvent, as indicated by
            Pipeline.Destination.output_payload_format. If no
            output_payload_format is set it will use the existing
            datacontenttype on the CloudEvent if present, else leave
            datacontenttype absent. - This function expects that the content of
            the message will adhere to the standard CloudEvent format. If it
            doesn't then this function will fail. - The result is a CEL map that
            corresponds to the JSON representation of the CloudEvent. To convert
            that data to a JSON string it can be chained with the toJsonString
            function. The Pipeline expects that the message it receives adheres
            to the standard CloudEvent format. If it doesn't then the outgoing
            message request may fail with a persistent error.
          type: string
    GoogleCloudEventarcV1PipelineDestinationAuthenticationConfig:
      id: GoogleCloudEventarcV1PipelineDestinationAuthenticationConfig
      description: Represents a config used to authenticate message requests.
      type: object
      properties:
        googleOidc:
          description: >-
            Optional. This authenticate method will apply Google OIDC tokens
            signed by a GCP service account to the requests.
          $ref: >-
            #/components/schemas/GoogleCloudEventarcV1PipelineDestinationAuthenticationConfigOidcToken
        oauthToken:
          description: >-
            Optional. If specified, an [OAuth
            token](https://developers.google.com/identity/protocols/OAuth2) will
            be generated and attached as an `Authorization` header in the HTTP
            request. This type of authorization should generally only be used
            when calling Google APIs hosted on *.googleapis.com.
          $ref: >-
            #/components/schemas/GoogleCloudEventarcV1PipelineDestinationAuthenticationConfigOAuthToken
    GoogleCloudEventarcV1PipelineDestinationAuthenticationConfigOidcToken:
      id: GoogleCloudEventarcV1PipelineDestinationAuthenticationConfigOidcToken
      description: >-
        Represents a config used to authenticate with a Google OIDC token using
        a GCP service account. Use this authentication method to invoke your
        Cloud Run and Cloud Functions destinations or HTTP endpoints that
        support Google OIDC.
      type: object
      properties:
        serviceAccount:
          description: >-
            Required. Service account email used to generate the OIDC Token. The
            principal who calls this API must have iam.serviceAccounts.actAs
            permission in the service account. See
            https://cloud.google.com/iam/docs/understanding-service-accounts for
            more information. Eventarc service agents must have
            roles/roles/iam.serviceAccountTokenCreator role to allow the
            Pipeline to create OpenID tokens for authenticated requests.
          type: string
        audience:
          description: >-
            Optional. Audience to be used to generate the OIDC Token. The
            audience claim identifies the recipient that the JWT is intended
            for. If unspecified, the destination URI will be used.
          type: string
    GoogleCloudEventarcV1PipelineDestinationAuthenticationConfigOAuthToken:
      id: GoogleCloudEventarcV1PipelineDestinationAuthenticationConfigOAuthToken
      description: >-
        Contains information needed for generating an [OAuth
        token](https://developers.google.com/identity/protocols/OAuth2). This
        type of authorization should generally only be used when calling Google
        APIs hosted on *.googleapis.com.
      type: object
      properties:
        serviceAccount:
          description: >-
            Required. Service account email used to generate the [OAuth
            token](https://developers.google.com/identity/protocols/OAuth2). The
            principal who calls this API must have iam.serviceAccounts.actAs
            permission in the service account. See
            https://cloud.google.com/iam/docs/understanding-service-accounts for
            more information. Eventarc service agents must have
            roles/roles/iam.serviceAccountTokenCreator role to allow Pipeline to
            create OAuth2 tokens for authenticated requests.
          type: string
        scope:
          description: >-
            Optional. OAuth scope to be used for generating OAuth access token.
            If not specified, "https://www.googleapis.com/auth/cloud-platform"
            will be used.
          type: string
    GoogleCloudEventarcV1PipelineMessagePayloadFormat:
      id: GoogleCloudEventarcV1PipelineMessagePayloadFormat
      description: Represents the format of message data.
      type: object
      properties:
        protobuf:
          description: Optional. Protobuf format.
          $ref: >-
            #/components/schemas/GoogleCloudEventarcV1PipelineMessagePayloadFormatProtobufFormat
        avro:
          description: Optional. Avro format.
          $ref: >-
            #/components/schemas/GoogleCloudEventarcV1PipelineMessagePayloadFormatAvroFormat
        json:
          description: Optional. JSON format.
          $ref: >-
            #/components/schemas/GoogleCloudEventarcV1PipelineMessagePayloadFormatJsonFormat
    GoogleCloudEventarcV1PipelineMessagePayloadFormatProtobufFormat:
      id: GoogleCloudEventarcV1PipelineMessagePayloadFormatProtobufFormat
      description: The format of a Protobuf message payload.
      type: object
      properties:
        schemaDefinition:
          description: Optional. The entire schema definition is stored in this field.
          type: string
    GoogleCloudEventarcV1PipelineMessagePayloadFormatAvroFormat:
      id: GoogleCloudEventarcV1PipelineMessagePayloadFormatAvroFormat
      description: The format of an AVRO message payload.
      type: object
      properties:
        schemaDefinition:
          description: Optional. The entire schema definition is stored in this field.
          type: string
    GoogleCloudEventarcV1PipelineMessagePayloadFormatJsonFormat:
      id: GoogleCloudEventarcV1PipelineMessagePayloadFormatJsonFormat
      description: The format of a JSON message payload.
      type: object
      properties: {}
    GoogleCloudEventarcV1PipelineMediation:
      id: GoogleCloudEventarcV1PipelineMediation
      description: Mediation defines different ways to modify the Pipeline.
      type: object
      properties:
        transformation:
          description: Optional. How the Pipeline is to transform messages
          $ref: >-
            #/components/schemas/GoogleCloudEventarcV1PipelineMediationTransformation
    GoogleCloudEventarcV1PipelineMediationTransformation:
      id: GoogleCloudEventarcV1PipelineMediationTransformation
      description: Transformation defines the way to transform an incoming message.
      type: object
      properties:
        transformationTemplate:
          description: >-
            Optional. The CEL expression template to apply to transform
            messages. The following CEL extension functions are provided for use
            in this CEL expression: - merge: map1.merge(map2) -> map3 - Merges
            the passed CEL map with the existing CEL map the function is applied
            to. - If the same key exists in both maps, if the key's value is
            type map both maps are merged else the value from the passed map is
            used. - denormalize: map.denormalize() -> map - Denormalizes a CEL
            map such that every value of type map or key in the map is expanded
            to return a single level map. - The resulting keys are "." separated
            indices of the map keys. - For example: { "a": 1, "b": { "c": 2,
            "d": 3 } "e": [4, 5] } .denormalize() -> { "a": 1, "b.c": 2, "b.d":
            3, "e.0": 4, "e.1": 5 } - setField: map.setField(key, value) ->
            message - Sets the field of the message with the given key to the
            given value. - If the field is not present it will be added. - If
            the field is present it will be overwritten. - The key can be a dot
            separated path to set a field in a nested message. - Key must be of
            type string. - Value may be any valid type. - removeFields:
            map.removeFields([key1, key2, ...]) -> message - Removes the fields
            of the map with the given keys. - The keys can be a dot separated
            path to remove a field in a nested message. - If a key is not found
            it will be ignored. - Keys must be of type string. - toMap: [map1,
            map2, ...].toMap() -> map - Converts a CEL list of CEL maps to a
            single CEL map - toDestinationPayloadFormat():
            message.data.toDestinationPayloadFormat() -> string or bytes -
            Converts the message data to the destination payload format
            specified in Pipeline.Destination.output_payload_format - This
            function is meant to be applied to the message.data field. - If the
            destination payload format is not set, the function will return the
            message data unchanged. - toCloudEventJsonWithPayloadFormat:
            message.toCloudEventJsonWithPayloadFormat() -> map - Converts a
            message to the corresponding structure of JSON format for
            CloudEvents - This function applies toDestinationPayloadFormat() to
            the message data. It also sets the corresponding datacontenttype of
            the CloudEvent, as indicated by
            Pipeline.Destination.output_payload_format. If no
            output_payload_format is set it will use the existing
            datacontenttype on the CloudEvent if present, else leave
            datacontenttype absent. - This function expects that the content of
            the message will adhere to the standard CloudEvent format. If it
            doesn't then this function will fail. - The result is a CEL map that
            corresponds to the JSON representation of the CloudEvent. To convert
            that data to a JSON string it can be chained with the toJsonString
            function.
          type: string
    GoogleCloudEventarcV1PipelineRetryPolicy:
      id: GoogleCloudEventarcV1PipelineRetryPolicy
      description: >-
        The retry policy configuration for the Pipeline. The pipeline
        exponentially backs off in case the destination is non responsive or
        returns a retryable error code. The default semantics are as follows:
        The backoff starts with a 5 second delay and doubles the delay after
        each failed attempt (10 seconds, 20 seconds, 40 seconds, etc.). The
        delay is capped at 60 seconds by default. Please note that if you set
        the min_retry_delay and max_retry_delay fields to the same value this
        will make the duration between retries constant.
      type: object
      properties:
        maxAttempts:
          description: >-
            Optional. The maximum number of delivery attempts for any message.
            The value must be between 1 and 100. The default value for this
            field is 5.
          type: integer
          format: int32
        minRetryDelay:
          description: >-
            Optional. The minimum amount of seconds to wait between retry
            attempts. The value must be between 1 and 600. The default value for
            this field is 5.
          type: string
          format: google-duration
        maxRetryDelay:
          description: >-
            Optional. The maximum amount of seconds to wait between retry
            attempts. The value must be between 1 and 600. The default value for
            this field is 60.
          type: string
          format: google-duration
    ListPipelinesResponse:
      id: ListPipelinesResponse
      description: The response message for the ListPipelines method.
      type: object
      properties:
        pipelines:
          description: The requested pipelines, up to the number specified in `page_size`.
          type: array
          items:
            $ref: '#/components/schemas/Pipeline'
        nextPageToken:
          description: >-
            A page token that can be sent to `ListPipelines` to request the next
            page. If this is empty, then there are no more pages.
          type: string
        unreachable:
          description: Unreachable resources, if any.
          type: array
          items:
            type: string
    GoogleApiSource:
      id: GoogleApiSource
      description: >-
        A GoogleApiSource represents a subscription of 1P events from a
        MessageBus.
      type: object
      properties:
        name:
          description: >-
            Identifier. Resource name of the form
            projects/{project}/locations/{location}/googleApiSources/{google_api_source}
          type: string
        uid:
          description: >-
            Output only. Server assigned unique identifier for the channel. The
            value is a UUID4 string and guaranteed to remain unchanged until the
            resource is deleted.
          readOnly: true
          type: string
        etag:
          description: >-
            Output only. This checksum is computed by the server based on the
            value of other fields, and might be sent only on update and delete
            requests to ensure that the client has an up-to-date value before
            proceeding.
          readOnly: true
          type: string
        createTime:
          description: Output only. The creation time.
          readOnly: true
          type: string
          format: google-datetime
        updateTime:
          description: Output only. The last-modified time.
          readOnly: true
          type: string
          format: google-datetime
        labels:
          description: Optional. Resource labels.
          type: object
          additionalProperties:
            type: string
        annotations:
          description: Optional. Resource annotations.
          type: object
          additionalProperties:
            type: string
        displayName:
          description: Optional. Resource display name.
          type: string
        destination:
          description: >-
            Required. Destination is the message bus that the GoogleApiSource is
            delivering to. It must be point to the full resource name of a
            MessageBus. Format:
            "projects/{PROJECT_ID}/locations/{region}/messagesBuses/{MESSAGE_BUS_ID)
          type: string
        cryptoKeyName:
          description: >-
            Optional. Resource name of a KMS crypto key (managed by the user)
            used to encrypt/decrypt their event data. It must match the pattern
            `projects/*/locations/*/keyRings/*/cryptoKeys/*`.
          type: string
        loggingConfig:
          description: >-
            Optional. Config to control Platform logging for the
            GoogleApiSource.
          $ref: '#/components/schemas/LoggingConfig'
    ListGoogleApiSourcesResponse:
      id: ListGoogleApiSourcesResponse
      description: The response message for the `ListGoogleApiSources` method.
      type: object
      properties:
        googleApiSources:
          description: >-
            The requested GoogleApiSources, up to the number specified in
            `page_size`.
          type: array
          items:
            $ref: '#/components/schemas/GoogleApiSource'
        nextPageToken:
          description: >-
            A page token that can be sent to `ListMessageBusEnrollments` to
            request the next page. If this is empty, then there are no more
            pages.
          type: string
        unreachable:
          description: Unreachable resources, if any.
          type: array
          items:
            type: string
    ListLocationsResponse:
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      type: object
      properties:
        locations:
          description: >-
            A list of locations that matches the specified filter in the
            request.
          type: array
          items:
            $ref: '#/components/schemas/Location'
        nextPageToken:
          description: The standard List next-page token.
          type: string
    Location:
      id: Location
      description: A resource that represents a Google Cloud location.
      type: object
      properties:
        name:
          description: >-
            Resource name for the location, which may vary between
            implementations. For example:
            `"projects/example-project/locations/us-east1"`
          type: string
        locationId:
          description: 'The canonical id for this location. For example: `"us-east1"`.'
          type: string
        displayName:
          description: >-
            The friendly name for this location, typically a nearby city name.
            For example, "Tokyo".
          type: string
        labels:
          description: >-
            Cross-service attributes for the location. For example
            {"cloud.googleapis.com/region": "us-east1"}
          type: object
          additionalProperties:
            type: string
        metadata:
          description: >-
            Service-specific metadata. For example the available capacity at the
            given location.
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
    SetIamPolicyRequest:
      id: SetIamPolicyRequest
      description: Request message for `SetIamPolicy` method.
      type: object
      properties:
        policy:
          description: >-
            REQUIRED: The complete policy to be applied to the `resource`. The
            size of the policy is limited to a few 10s of KB. An empty policy is
            a valid policy but certain Google Cloud services (such as Projects)
            might reject them.
          $ref: '#/components/schemas/Policy'
        updateMask:
          description: >-
            OPTIONAL: A FieldMask specifying which fields of the policy to
            modify. Only the fields in the mask will be modified. If no mask is
            provided, the following default mask is used: `paths: "bindings,
            etag"`
          type: string
          format: google-fieldmask
    Policy:
      id: Policy
      description: >-
        An Identity and Access Management (IAM) policy, which specifies access
        controls for Google Cloud resources. A `Policy` is a collection of
        `bindings`. A `binding` binds one or more `members`, or principals, to a
        single `role`. Principals can be user accounts, service accounts, Google
        groups, and domains (such as G Suite). A `role` is a named list of
        permissions; each `role` can be an IAM predefined role or a user-created
        custom role. For some types of Google Cloud resources, a `binding` can
        also specify a `condition`, which is a logical expression that allows
        access to a resource only if the expression evaluates to `true`. A
        condition can add constraints based on attributes of the request, the
        resource, or both. To learn which resources support conditions in their
        IAM policies, see the [IAM
        documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        **JSON example:** ``` { "bindings": [ { "role":
        "roles/resourcemanager.organizationAdmin", "members": [
        "user:mike@example.com", "group:admins@example.com",
        "domain:google.com",
        "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, {
        "role": "roles/resourcemanager.organizationViewer", "members": [
        "user:eve@example.com" ], "condition": { "title": "expirable access",
        "description": "Does not grant access after Sep 2020", "expression":
        "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
        "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
        members: - user:mike@example.com - group:admins@example.com -
        domain:google.com -
        serviceAccount:my-project-id@appspot.gserviceaccount.com role:
        roles/resourcemanager.organizationAdmin - members: -
        user:eve@example.com role: roles/resourcemanager.organizationViewer
        condition: title: expirable access description: Does not grant access
        after Sep 2020 expression: request.time <
        timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ```
        For a description of IAM and its features, see the [IAM
        documentation](https://cloud.google.com/iam/docs/).
      type: object
      properties:
        version:
          description: >-
            Specifies the format of the policy. Valid values are `0`, `1`, and
            `3`. Requests that specify an invalid value are rejected. Any
            operation that affects conditional role bindings must specify
            version `3`. This requirement applies to the following operations: *
            Getting a policy that includes a conditional role binding * Adding a
            conditional role binding to a policy * Changing a conditional role
            binding in a policy * Removing any role binding, with or without a
            condition, from a policy that includes conditions **Important:** If
            you use IAM Conditions, you must include the `etag` field whenever
            you call `setIamPolicy`. If you omit this field, then IAM allows you
            to overwrite a version `3` policy with a version `1` policy, and all
            of the conditions in the version `3` policy are lost. If a policy
            does not include any conditions, operations on that policy may
            specify any valid version or leave the field unset. To learn which
            resources support conditions in their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          type: integer
          format: int32
        bindings:
          description: >-
            Associates a list of `members`, or principals, with a `role`.
            Optionally, may specify a `condition` that determines how and when
            the `bindings` are applied. Each of the `bindings` must contain at
            least one principal. The `bindings` in a `Policy` can refer to up to
            1,500 principals; up to 250 of these principals can be Google
            groups. Each occurrence of a principal counts towards these limits.
            For example, if the `bindings` grant 50 different roles to
            `user:alice@example.com`, and not to any other principal, then you
            can add another 1,450 principals to the `bindings` in the `Policy`.
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        auditConfigs:
          description: Specifies cloud audit logging configuration for this policy.
          type: array
          items:
            $ref: '#/components/schemas/AuditConfig'
        etag:
          description: >-
            `etag` is used for optimistic concurrency control as a way to help
            prevent simultaneous updates of a policy from overwriting each
            other. It is strongly suggested that systems make use of the `etag`
            in the read-modify-write cycle to perform policy updates in order to
            avoid race conditions: An `etag` is returned in the response to
            `getIamPolicy`, and systems are expected to put that etag in the
            request to `setIamPolicy` to ensure that their change will be
            applied to the same version of the policy. **Important:** If you use
            IAM Conditions, you must include the `etag` field whenever you call
            `setIamPolicy`. If you omit this field, then IAM allows you to
            overwrite a version `3` policy with a version `1` policy, and all of
            the conditions in the version `3` policy are lost.
          type: string
          format: byte
    Binding:
      id: Binding
      description: Associates `members`, or principals, with a `role`.
      type: object
      properties:
        role:
          description: >-
            Role that is assigned to the list of `members`, or principals. For
            example, `roles/viewer`, `roles/editor`, or `roles/owner`. For an
            overview of the IAM roles and permissions, see the [IAM
            documentation](https://cloud.google.com/iam/docs/roles-overview).
            For a list of the available pre-defined roles, see
            [here](https://cloud.google.com/iam/docs/understanding-roles).
          type: string
        members:
          description: >-
            Specifies the principals requesting access for a Google Cloud
            resource. `members` can have the following values: * `allUsers`: A
            special identifier that represents anyone who is on the internet;
            with or without a Google account. * `allAuthenticatedUsers`: A
            special identifier that represents anyone who is authenticated with
            a Google account or a service account. Does not include identities
            that come from external identity providers (IdPs) through identity
            federation. * `user:{emailid}`: An email address that represents a
            specific Google account. For example, `alice@example.com` . *
            `serviceAccount:{emailid}`: An email address that represents a
            Google service account. For example,
            `my-other-app@appspot.gserviceaccount.com`. *
            `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`:
            An identifier for a [Kubernetes service
            account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
            For example,
            `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
            `group:{emailid}`: An email address that represents a Google group.
            For example, `admins@example.com`. * `domain:{domain}`: The G Suite
            domain (primary) that represents all the users of that domain. For
            example, `google.com` or `example.com`. *
            `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
            A single identity in a workforce identity pool. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
            All workforce identities in a group. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
            All workforce identities with a specific attribute value. *
            `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`:
            All identities in a workforce identity pool. *
            `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
            A single identity in a workload identity pool. *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
            A workload identity pool group. *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
            All identities in a workload identity pool with a certain attribute.
            *
            `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`:
            All identities in a workload identity pool. *
            `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus
            unique identifier) representing a user that has been recently
            deleted. For example, `alice@example.com?uid=123456789012345678901`.
            If the user is recovered, this value reverts to `user:{emailid}` and
            the recovered user retains the role in the binding. *
            `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address
            (plus unique identifier) representing a service account that has
            been recently deleted. For example,
            `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.
            If the service account is undeleted, this value reverts to
            `serviceAccount:{emailid}` and the undeleted service account retains
            the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`:
            An email address (plus unique identifier) representing a Google
            group that has been recently deleted. For example,
            `admins@example.com?uid=123456789012345678901`. If the group is
            recovered, this value reverts to `group:{emailid}` and the recovered
            group retains the role in the binding. *
            `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
            Deleted single identity in a workforce identity pool. For example,
            `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
          type: array
          items:
            type: string
        condition:
          description: >-
            The condition that is associated with this binding. If the condition
            evaluates to `true`, then this binding applies to the current
            request. If the condition evaluates to `false`, then this binding
            does not apply to the current request. However, a different role
            binding might grant the same role to one or more of the principals
            in this binding. To learn which resources support conditions in
            their IAM policies, see the [IAM
            documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
          $ref: '#/components/schemas/Expr'
    Expr:
      id: Expr
      description: >-
        Represents a textual expression in the Common Expression Language (CEL)
        syntax. CEL is a C-like expression language. The syntax and semantics of
        CEL are documented at https://github.com/google/cel-spec. Example
        (Comparison): title: "Summary size limit" description: "Determines if a
        summary is less than 100 chars" expression: "document.summary.size() <
        100" Example (Equality): title: "Requestor is owner" description:
        "Determines if requestor is the document owner" expression:
        "document.owner == request.auth.claims.email" Example (Logic): title:
        "Public documents" description: "Determine whether the document should
        be publicly visible" expression: "document.type != 'private' &&
        document.type != 'internal'" Example (Data Manipulation): title:
        "Notification string" description: "Create a notification string with a
        timestamp." expression: "'New message received at ' +
        string(document.create_time)" The exact variables and functions that may
        be referenced within an expression are determined by the service that
        evaluates it. See the service documentation for additional information.
      type: object
      properties:
        expression:
          description: >-
            Textual representation of an expression in Common Expression
            Language syntax.
          type: string
        title:
          description: >-
            Optional. Title for the expression, i.e. a short string describing
            its purpose. This can be used e.g. in UIs which allow to enter the
            expression.
          type: string
        description:
          description: >-
            Optional. Description of the expression. This is a longer text which
            describes the expression, e.g. when hovered over it in a UI.
          type: string
        location:
          description: >-
            Optional. String indicating the location of the expression for error
            reporting, e.g. a file name and a position in the file.
          type: string
    AuditConfig:
      id: AuditConfig
      description: >-
        Specifies the audit configuration for a service. The configuration
        determines which permission types are logged, and what identities, if
        any, are exempted from logging. An AuditConfig must have one or more
        AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
        specific service, the union of the two AuditConfigs is used for that
        service: the log_types specified in each AuditConfig are enabled, and
        the exempted_members in each AuditLogConfig are exempted. Example Policy
        with multiple AuditConfigs: { "audit_configs": [ { "service":
        "allServices", "audit_log_configs": [ { "log_type": "DATA_READ",
        "exempted_members": [ "user:jose@example.com" ] }, { "log_type":
        "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service":
        "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type":
        "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [
        "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy
        enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts
        `jose@example.com` from DATA_READ logging, and `aliya@example.com` from
        DATA_WRITE logging.
      type: object
      properties:
        service:
          description: >-
            Specifies a service that will be enabled for audit logging. For
            example, `storage.googleapis.com`, `cloudsql.googleapis.com`.
            `allServices` is a special value that covers all services.
          type: string
        auditLogConfigs:
          description: The configuration for logging of each type of permission.
          type: array
          items:
            $ref: '#/components/schemas/AuditLogConfig'
    AuditLogConfig:
      id: AuditLogConfig
      description: >-
        Provides the configuration for logging a type of permissions. Example: {
        "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
        "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This
        enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting
        jose@example.com from DATA_READ logging.
      type: object
      properties:
        logType:
          description: The log type that this config enables.
          type: string
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
        exemptedMembers:
          description: >-
            Specifies the identities that do not cause logging for this type of
            permission. Follows the same format of Binding.members.
          type: array
          items:
            type: string
    TestIamPermissionsRequest:
      id: TestIamPermissionsRequest
      description: Request message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          description: >-
            The set of permissions to check for the `resource`. Permissions with
            wildcards (such as `*` or `storage.*`) are not allowed. For more
            information see [IAM
            Overview](https://cloud.google.com/iam/docs/overview#permissions).
          type: array
          items:
            type: string
    TestIamPermissionsResponse:
      id: TestIamPermissionsResponse
      description: Response message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          description: >-
            A subset of `TestPermissionsRequest.permissions` that the caller is
            allowed.
          type: array
          items:
            type: string
    OperationMetadata:
      id: OperationMetadata
      description: Represents the metadata of the long-running operation.
      type: object
      properties:
        createTime:
          description: Output only. The time the operation was created.
          readOnly: true
          type: string
          format: google-datetime
        endTime:
          description: Output only. The time the operation finished running.
          readOnly: true
          type: string
          format: google-datetime
        target:
          description: >-
            Output only. Server-defined resource path for the target of the
            operation.
          readOnly: true
          type: string
        verb:
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
          type: string
        statusMessage:
          description: Output only. Human-readable status of the operation, if any.
          readOnly: true
          type: string
        requestedCancellation:
          description: >-
            Output only. Identifies whether the user has requested cancellation
            of the operation. Operations that have successfully been cancelled
            have Operation.error value with a google.rpc.Status.code of 1,
            corresponding to `Code.CANCELLED`.
          readOnly: true
          type: boolean
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  x-stackQL-resources:
    google_channel_config:
      id: google.eventarc.google_channel_config
      name: google_channel_config
      title: Google_channel_config
      methods:
        get_google_channel_config:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1googleChannelConfig/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        update_google_channel_config:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1googleChannelConfig/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/google_channel_config/methods/get_google_channel_config
        insert: []
        update:
          - $ref: >-
              #/components/x-stackQL-resources/google_channel_config/methods/update_google_channel_config
        replace: []
        delete: []
    locations:
      id: google.eventarc.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    operations:
      id: google.eventarc.operations
      name: operations
      title: Operations
      methods:
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    triggers:
      id: google.eventarc.triggers
      name: triggers
      title: Triggers
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers~1{triggersId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers~1{triggersId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers~1{triggersId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.triggers
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/triggers/methods/get'
          - $ref: '#/components/x-stackQL-resources/triggers/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/triggers/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/triggers/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/triggers/methods/delete'
    triggers_iam_policies:
      id: google.eventarc.triggers_iam_policies
      name: triggers_iam_policies
      title: Triggers_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers~1{triggersId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers~1{triggersId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1triggers~1{triggersId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/triggers_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/triggers_iam_policies/methods/set_iam_policy
        delete: []
    channels:
      id: google.eventarc.channels
      name: channels
      title: Channels
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channels~1{channelsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channels~1{channelsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channels~1{channelsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channels/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.channels
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channels/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/channels/methods/get'
          - $ref: '#/components/x-stackQL-resources/channels/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/channels/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/channels/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/channels/methods/delete'
    channels_iam_policies:
      id: google.eventarc.channels_iam_policies
      name: channels_iam_policies
      title: Channels_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channels~1{channelsId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channels~1{channelsId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channels~1{channelsId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/channels_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/channels_iam_policies/methods/set_iam_policy
        delete: []
    providers:
      id: google.eventarc.providers
      name: providers
      title: Providers
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1providers~1{providersId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1providers/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.providers
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/providers/methods/get'
          - $ref: '#/components/x-stackQL-resources/providers/methods/list'
        insert: []
        update: []
        replace: []
        delete: []
    channel_connections:
      id: google.eventarc.channel_connections
      name: channel_connections
      title: Channel_connections
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channelConnections~1{channelConnectionsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channelConnections~1{channelConnectionsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channelConnections/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.channelConnections
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channelConnections/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/channel_connections/methods/get'
          - $ref: '#/components/x-stackQL-resources/channel_connections/methods/list'
        insert:
          - $ref: >-
              #/components/x-stackQL-resources/channel_connections/methods/create
        update: []
        replace: []
        delete:
          - $ref: >-
              #/components/x-stackQL-resources/channel_connections/methods/delete
    channel_connections_iam_policies:
      id: google.eventarc.channel_connections_iam_policies
      name: channel_connections_iam_policies
      title: Channel_connections_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channelConnections~1{channelConnectionsId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channelConnections~1{channelConnectionsId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1channelConnections~1{channelConnectionsId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/channel_connections_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/channel_connections_iam_policies/methods/set_iam_policy
        delete: []
    message_buses:
      id: google.eventarc.message_buses
      name: message_buses
      title: Message_buses
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1messageBuses~1{messageBusesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1messageBuses~1{messageBusesId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1messageBuses~1{messageBusesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1messageBuses/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.messageBuses
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1messageBuses/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/message_buses/methods/get'
          - $ref: '#/components/x-stackQL-resources/message_buses/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/message_buses/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/message_buses/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/message_buses/methods/delete'
    message_buses_enrollments:
      id: google.eventarc.message_buses_enrollments
      name: message_buses_enrollments
      title: Message_buses_enrollments
      methods:
        list_enrollments:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1messageBuses~1{messageBusesId}:listEnrollments/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.enrollments
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/message_buses_enrollments/methods/list_enrollments
        insert: []
        update: []
        replace: []
        delete: []
    message_buses_iam_policies:
      id: google.eventarc.message_buses_iam_policies
      name: message_buses_iam_policies
      title: Message_buses_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1messageBuses~1{messageBusesId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1messageBuses~1{messageBusesId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1messageBuses~1{messageBusesId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/message_buses_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/message_buses_iam_policies/methods/set_iam_policy
        delete: []
    enrollments:
      id: google.eventarc.enrollments
      name: enrollments
      title: Enrollments
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1enrollments~1{enrollmentsId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1enrollments~1{enrollmentsId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1enrollments~1{enrollmentsId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1enrollments/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.enrollments
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1enrollments/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/enrollments/methods/get'
          - $ref: '#/components/x-stackQL-resources/enrollments/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/enrollments/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/enrollments/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/enrollments/methods/delete'
    enrollments_iam_policies:
      id: google.eventarc.enrollments_iam_policies
      name: enrollments_iam_policies
      title: Enrollments_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1enrollments~1{enrollmentsId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1enrollments~1{enrollmentsId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1enrollments~1{enrollmentsId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/enrollments_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/enrollments_iam_policies/methods/set_iam_policy
        delete: []
    pipelines:
      id: google.eventarc.pipelines
      name: pipelines
      title: Pipelines
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1pipelines~1{pipelinesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1pipelines~1{pipelinesId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1pipelines~1{pipelinesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1pipelines/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.pipelines
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1pipelines/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/pipelines/methods/get'
          - $ref: '#/components/x-stackQL-resources/pipelines/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/pipelines/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/pipelines/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/pipelines/methods/delete'
    pipelines_iam_policies:
      id: google.eventarc.pipelines_iam_policies
      name: pipelines_iam_policies
      title: Pipelines_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1pipelines~1{pipelinesId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1pipelines~1{pipelinesId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1pipelines~1{pipelinesId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/pipelines_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/pipelines_iam_policies/methods/set_iam_policy
        delete: []
    google_api_sources:
      id: google.eventarc.google_api_sources
      name: google_api_sources
      title: Google_api_sources
      methods:
        get:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1googleApiSources~1{googleApiSourcesId}/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1googleApiSources~1{googleApiSourcesId}/patch
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1googleApiSources~1{googleApiSourcesId}/delete
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1googleApiSources/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.googleApiSources
        create:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1googleApiSources/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/google_api_sources/methods/get'
          - $ref: '#/components/x-stackQL-resources/google_api_sources/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/google_api_sources/methods/create'
        update:
          - $ref: '#/components/x-stackQL-resources/google_api_sources/methods/patch'
        replace: []
        delete:
          - $ref: '#/components/x-stackQL-resources/google_api_sources/methods/delete'
    google_api_sources_iam_policies:
      id: google.eventarc.google_api_sources_iam_policies
      name: google_api_sources_iam_policies
      title: Google_api_sources_iam_policies
      methods:
        set_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1googleApiSources~1{googleApiSourcesId}:setIamPolicy/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1googleApiSources~1{googleApiSourcesId}:getIamPolicy/get
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.bindings
        test_iam_permissions:
          operation:
            $ref: >-
              #/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1googleApiSources~1{googleApiSourcesId}:testIamPermissions/post
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: >-
              #/components/x-stackQL-resources/google_api_sources_iam_policies/methods/get_iam_policy
        insert: []
        update: []
        replace:
          - $ref: >-
              #/components/x-stackQL-resources/google_api_sources_iam_policies/methods/set_iam_policy
        delete: []
paths:
  /v1/projects/{projectsId}/locations/{locationsId}/googleChannelConfig:
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: Get a GoogleChannelConfig
      operationId: eventarc.projects.locations.getGoogleChannelConfig
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleChannelConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
    patch:
      description: Update a single GoogleChannelConfig
      operationId: eventarc.projects.locations.updateGoogleChannelConfig
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleChannelConfig'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleChannelConfig'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
  /v1/projects/{projectsId}/locations:
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: eventarc.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: eventarc.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: >-
        Lists operations that match the specified filter in the request. If the
        server doesn't support this method, it returns `UNIMPLEMENTED`.
      operationId: eventarc.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: >-
        Gets the latest state of a long-running operation. Clients can use this
        method to poll the operation result at intervals as recommended by the
        API service.
      operationId: eventarc.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
    delete:
      description: >-
        Deletes a long-running operation. This method indicates that the client
        is no longer interested in the operation result. It does not cancel the
        operation. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`.
      operationId: eventarc.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: >-
        Starts asynchronous cancellation on a long-running operation. The server
        makes a best effort to cancel the operation, but success is not
        guaranteed. If the server doesn't support this method, it returns
        `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation
        or other methods to check whether the cancellation succeeded or whether
        the operation completed despite cancellation. On successful
        cancellation, the operation is not deleted; instead, it becomes an
        operation with an Operation.error value with a google.rpc.Status.code of
        1, corresponding to `Code.CANCELLED`.
      operationId: eventarc.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleLongrunningCancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:
    parameters: *ref_1
    get:
      description: Get a single trigger.
      operationId: eventarc.projects.locations.triggers.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
    patch:
      description: Update a single trigger.
      operationId: eventarc.projects.locations.triggers.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
    delete:
      description: Delete a single trigger.
      operationId: eventarc.projects.locations.triggers.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
        - in: query
          name: etag
          schema:
            type: string
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/triggers:
    parameters: *ref_1
    get:
      description: List triggers.
      operationId: eventarc.projects.locations.triggers.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTriggersResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
    post:
      description: Create a new trigger in a particular project and location.
      operationId: eventarc.projects.locations.triggers.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: triggerId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: eventarc.projects.locations.triggers.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: eventarc.projects.locations.triggers.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/triggers/{triggersId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: eventarc.projects.locations.triggers.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: triggersId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/channels/{channelsId}:
    parameters: *ref_1
    get:
      description: Get a single Channel.
      operationId: eventarc.projects.locations.channels.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: channelsId
          required: true
          schema:
            type: string
    patch:
      description: Update a single channel.
      operationId: eventarc.projects.locations.channels.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: channelsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: validateOnly
          schema:
            type: boolean
    delete:
      description: Delete a single channel.
      operationId: eventarc.projects.locations.channels.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: channelsId
          required: true
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/channels:
    parameters: *ref_1
    get:
      description: List channels.
      operationId: eventarc.projects.locations.channels.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChannelsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
    post:
      description: Create a new channel in a particular project and location.
      operationId: eventarc.projects.locations.channels.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Channel'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: channelId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/channels/{channelsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: eventarc.projects.locations.channels.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: channelsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/channels/{channelsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: eventarc.projects.locations.channels.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: channelsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/channels/{channelsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: eventarc.projects.locations.channels.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: channelsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/providers/{providersId}:
    parameters: *ref_1
    get:
      description: Get a single Provider.
      operationId: eventarc.projects.locations.providers.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: providersId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/providers:
    parameters: *ref_1
    get:
      description: List providers.
      operationId: eventarc.projects.locations.providers.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProvidersResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/channelConnections/{channelConnectionsId}:
    parameters: *ref_1
    get:
      description: Get a single ChannelConnection.
      operationId: eventarc.projects.locations.channelConnections.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelConnection'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: channelConnectionsId
          required: true
          schema:
            type: string
    delete:
      description: Delete a single ChannelConnection.
      operationId: eventarc.projects.locations.channelConnections.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: channelConnectionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/channelConnections:
    parameters: *ref_1
    get:
      description: List channel connections.
      operationId: eventarc.projects.locations.channelConnections.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListChannelConnectionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
    post:
      description: Create a new ChannelConnection in a particular project and location.
      operationId: eventarc.projects.locations.channelConnections.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelConnection'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: channelConnectionId
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/channelConnections/{channelConnectionsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: eventarc.projects.locations.channelConnections.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: channelConnectionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/channelConnections/{channelConnectionsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: eventarc.projects.locations.channelConnections.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: channelConnectionsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/channelConnections/{channelConnectionsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: eventarc.projects.locations.channelConnections.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: channelConnectionsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/messageBuses/{messageBusesId}:
    parameters: *ref_1
    get:
      description: Get a single MessageBus.
      operationId: eventarc.projects.locations.messageBuses.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBus'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: messageBusesId
          required: true
          schema:
            type: string
    patch:
      description: Update a single message bus.
      operationId: eventarc.projects.locations.messageBuses.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBus'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: messageBusesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
    delete:
      description: Delete a single message bus.
      operationId: eventarc.projects.locations.messageBuses.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: messageBusesId
          required: true
          schema:
            type: string
        - in: query
          name: etag
          schema:
            type: string
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/messageBuses:
    parameters: *ref_1
    get:
      description: List message buses.
      operationId: eventarc.projects.locations.messageBuses.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessageBusesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
    post:
      description: Create a new MessageBus in a particular project and location.
      operationId: eventarc.projects.locations.messageBuses.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBus'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: messageBusId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/messageBuses/{messageBusesId}:listEnrollments:
    parameters: *ref_1
    get:
      description: List message bus enrollments.
      operationId: eventarc.projects.locations.messageBuses.listEnrollments
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessageBusEnrollmentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: messageBusesId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/messageBuses/{messageBusesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: eventarc.projects.locations.messageBuses.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: messageBusesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/messageBuses/{messageBusesId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: eventarc.projects.locations.messageBuses.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: messageBusesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/messageBuses/{messageBusesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: eventarc.projects.locations.messageBuses.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: messageBusesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/enrollments/{enrollmentsId}:
    parameters: *ref_1
    get:
      description: Get a single Enrollment.
      operationId: eventarc.projects.locations.enrollments.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Enrollment'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: enrollmentsId
          required: true
          schema:
            type: string
    patch:
      description: Update a single Enrollment.
      operationId: eventarc.projects.locations.enrollments.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrollment'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: enrollmentsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
    delete:
      description: Delete a single Enrollment.
      operationId: eventarc.projects.locations.enrollments.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: enrollmentsId
          required: true
          schema:
            type: string
        - in: query
          name: etag
          schema:
            type: string
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/enrollments:
    parameters: *ref_1
    get:
      description: List Enrollments.
      operationId: eventarc.projects.locations.enrollments.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEnrollmentsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
    post:
      description: Create a new Enrollment in a particular project and location.
      operationId: eventarc.projects.locations.enrollments.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Enrollment'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: enrollmentId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/enrollments/{enrollmentsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: eventarc.projects.locations.enrollments.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: enrollmentsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/enrollments/{enrollmentsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: eventarc.projects.locations.enrollments.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: enrollmentsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/enrollments/{enrollmentsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: eventarc.projects.locations.enrollments.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: enrollmentsId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/pipelines/{pipelinesId}:
    parameters: *ref_1
    get:
      description: Get a single Pipeline.
      operationId: eventarc.projects.locations.pipelines.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pipeline'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: pipelinesId
          required: true
          schema:
            type: string
    patch:
      description: Update a single pipeline.
      operationId: eventarc.projects.locations.pipelines.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: pipelinesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
    delete:
      description: Delete a single pipeline.
      operationId: eventarc.projects.locations.pipelines.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: pipelinesId
          required: true
          schema:
            type: string
        - in: query
          name: etag
          schema:
            type: string
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/pipelines:
    parameters: *ref_1
    get:
      description: List pipelines.
      operationId: eventarc.projects.locations.pipelines.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPipelinesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
    post:
      description: Create a new Pipeline in a particular project and location.
      operationId: eventarc.projects.locations.pipelines.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pipeline'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pipelineId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/pipelines/{pipelinesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: eventarc.projects.locations.pipelines.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: pipelinesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/pipelines/{pipelinesId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: eventarc.projects.locations.pipelines.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: pipelinesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/pipelines/{pipelinesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: eventarc.projects.locations.pipelines.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: pipelinesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/googleApiSources/{googleApiSourcesId}:
    parameters: *ref_1
    get:
      description: Get a single GoogleApiSource.
      operationId: eventarc.projects.locations.googleApiSources.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleApiSource'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: googleApiSourcesId
          required: true
          schema:
            type: string
    patch:
      description: Update a single GoogleApiSource.
      operationId: eventarc.projects.locations.googleApiSources.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleApiSource'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: googleApiSourcesId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
            format: google-fieldmask
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
    delete:
      description: Delete a single GoogleApiSource.
      operationId: eventarc.projects.locations.googleApiSources.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: googleApiSourcesId
          required: true
          schema:
            type: string
        - in: query
          name: etag
          schema:
            type: string
        - in: query
          name: allowMissing
          schema:
            type: boolean
        - in: query
          name: validateOnly
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/googleApiSources:
    parameters: *ref_1
    get:
      description: List GoogleApiSources.
      operationId: eventarc.projects.locations.googleApiSources.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGoogleApiSourcesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
            format: int32
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
    post:
      description: Create a new GoogleApiSource in a particular project and location.
      operationId: eventarc.projects.locations.googleApiSources.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleApiSource'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleLongrunningOperation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: googleApiSourceId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
  /v1/projects/{projectsId}/locations/{locationsId}/googleApiSources/{googleApiSourcesId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: >-
        Sets the access control policy on the specified resource. Replaces any
        existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
        `PERMISSION_DENIED` errors.
      operationId: eventarc.projects.locations.googleApiSources.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: googleApiSourcesId
          required: true
          schema:
            type: string
  /v1/projects/{projectsId}/locations/{locationsId}/googleApiSources/{googleApiSourcesId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: >-
        Gets the access control policy for a resource. Returns an empty policy
        if the resource exists and does not have a policy set.
      operationId: eventarc.projects.locations.googleApiSources.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: googleApiSourcesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
            format: int32
  /v1/projects/{projectsId}/locations/{locationsId}/googleApiSources/{googleApiSourcesId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: >-
        Returns permissions that a caller has on the specified resource. If the
        resource does not exist, this will return an empty set of permissions,
        not a `NOT_FOUND` error. Note: This operation is designed to be used for
        building permission-aware UIs and command-line tools, not for
        authorization checking. This operation may "fail open" without warning.
      operationId: eventarc.projects.locations.googleApiSources.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: googleApiSourcesId
          required: true
          schema:
            type: string
