openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Certificate Authority API
  description: 'The Certificate Authority Service API is a highly-available, scalable service that enables you to simplify and automate the management of private certificate authorities (CAs) while staying in control of your private keys. '
  version: v1
  x-discovery-doc-revision: '20230726'
  x-generated-date: '2023-08-10'
externalDocs:
  url: 'https://cloud.google.com/'
servers:
  - url: 'https://privateca.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    Status:
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      id: Status
      properties:
        message:
          type: string
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
        code:
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          format: int32
          type: integer
        details:
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          type: array
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
      type: object
    RevokedCertificate:
      id: RevokedCertificate
      type: object
      description: Describes a revoked Certificate.
      properties:
        revocationReason:
          description: The reason the Certificate was revoked.
          enumDescriptions:
            - 'Default unspecified value. This value does indicate that a Certificate has been revoked, but that a reason has not been recorded.'
            - Key material for this Certificate may have leaked.
            - The key material for a certificate authority in the issuing path may have leaked.
            - The subject or other attributes in this Certificate have changed.
            - This Certificate has been superseded.
            - This Certificate or entities in the issuing path have ceased to operate.
            - 'This Certificate should not be considered valid, it is expected that it may become valid in the future.'
            - This Certificate no longer has permission to assert the listed attributes.
            - The authority which determines appropriate attributes for a Certificate may have been compromised.
          type: string
          enum:
            - REVOCATION_REASON_UNSPECIFIED
            - KEY_COMPROMISE
            - CERTIFICATE_AUTHORITY_COMPROMISE
            - AFFILIATION_CHANGED
            - SUPERSEDED
            - CESSATION_OF_OPERATION
            - CERTIFICATE_HOLD
            - PRIVILEGE_WITHDRAWN
            - ATTRIBUTE_AUTHORITY_COMPROMISE
        certificate:
          description: The resource name for the Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.
          type: string
        hexSerialNumber:
          description: The serial number of the Certificate.
          type: string
    Operation:
      id: Operation
      type: object
      properties:
        response:
          type: object
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: 'The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.'
        name:
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.'
          type: string
        metadata:
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
        done:
          type: boolean
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
        error:
          $ref: '#/components/schemas/Status'
          description: The error result of the operation in case of failure or cancellation.
      description: This resource represents a long-running operation that is the result of a network API call.
    CertificateDescription:
      id: CertificateDescription
      description: 'A CertificateDescription describes an X.509 certificate or CSR that has been issued, as an alternative to using ASN.1 / X.509.'
      properties:
        subjectKeyId:
          $ref: '#/components/schemas/KeyId'
          description: 'Provides a means of identifiying certificates that contain a particular public key, per https://tools.ietf.org/html/rfc5280#section-4.2.1.2.'
        certFingerprint:
          description: The hash of the x.509 certificate.
          $ref: '#/components/schemas/CertificateFingerprint'
        subjectDescription:
          description: Describes some of the values in a certificate that are related to the subject and lifetime.
          $ref: '#/components/schemas/SubjectDescription'
        authorityKeyId:
          $ref: '#/components/schemas/KeyId'
          description: 'Identifies the subject_key_id of the parent certificate, per https://tools.ietf.org/html/rfc5280#section-4.2.1.1'
        x509Description:
          description: Describes some of the technical X.509 fields in a certificate.
          $ref: '#/components/schemas/X509Parameters'
        publicKey:
          $ref: '#/components/schemas/PublicKey'
          description: The public key that corresponds to an issued certificate.
        aiaIssuingCertificateUrls:
          description: Describes lists of issuer CA certificate URLs that appear in the "Authority Information Access" extension in the certificate.
          items:
            type: string
          type: array
        crlDistributionPoints:
          description: 'Describes a list of locations to obtain CRL information, i.e. the DistributionPoint.fullName described by https://tools.ietf.org/html/rfc5280#section-4.2.1.13'
          type: array
          items:
            type: string
      type: object
    Certificate:
      description: A Certificate corresponds to a signed X.509 certificate issued by a CertificateAuthority.
      type: object
      properties:
        updateTime:
          readOnly: true
          type: string
          format: google-datetime
          description: Output only. The time at which this Certificate was updated.
        lifetime:
          format: google-duration
          description: Required. Immutable. The desired lifetime of a certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate. Note that the lifetime may be truncated if it would extend past the life of any certificate authority in the issuing chain.
          type: string
        name:
          readOnly: true
          description: Output only. The resource name for this Certificate in the format `projects/*/locations/*/caPools/*/certificates/*`.
          type: string
        pemCertificateChain:
          items:
            type: string
          type: array
          description: Output only. The chain that may be used to verify the X.509 certificate. Expected to be in issuer-to-root order according to RFC 5246.
          readOnly: true
        pemCertificate:
          readOnly: true
          description: 'Output only. The pem-encoded, signed X.509 certificate.'
          type: string
        createTime:
          readOnly: true
          format: google-datetime
          type: string
          description: Output only. The time at which this Certificate was created.
        certificateDescription:
          $ref: '#/components/schemas/CertificateDescription'
          description: Output only. A structured description of the issued X.509 certificate.
          readOnly: true
        config:
          $ref: '#/components/schemas/CertificateConfig'
          description: Immutable. A description of the certificate and key that does not require X.509 or ASN.1.
        subjectMode:
          description: 'Immutable. Specifies how the Certificate''s identity fields are to be decided. If this is omitted, the `DEFAULT` subject mode will be used.'
          type: string
          enum:
            - SUBJECT_REQUEST_MODE_UNSPECIFIED
            - DEFAULT
            - REFLECTED_SPIFFE
          enumDescriptions:
            - Not specified.
            - The default mode used in most cases. Indicates that the certificate's Subject and/or SubjectAltNames are specified in the certificate request. This mode requires the caller to have the `privateca.certificates.create` permission.
            - A mode reserved for special cases. Indicates that the certificate should have one SPIFFE SubjectAltNames set by the service based on the caller's identity. This mode will ignore any explicitly specified Subject and/or SubjectAltNames in the certificate request. This mode requires the caller to have the `privateca.certificates.createForSelf` permission.
        pemCsr:
          type: string
          description: Immutable. A pem-encoded X.509 certificate signing request (CSR).
        issuerCertificateAuthority:
          type: string
          readOnly: true
          description: Output only. The resource name of the issuing CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
        revocationDetails:
          readOnly: true
          $ref: '#/components/schemas/RevocationDetails'
          description: Output only. Details regarding the revocation of this Certificate. This Certificate is considered revoked if and only if this field is present.
        labels:
          type: object
          description: Optional. Labels with user-defined metadata.
          additionalProperties:
            type: string
        certificateTemplate:
          type: string
          description: 'Immutable. The resource name for a CertificateTemplate used to issue this certificate, in the format `projects/*/locations/*/certificateTemplates/*`. If this is specified, the caller must have the necessary permission to use this template. If this is omitted, no template will be used. This template must be in the same location as the Certificate.'
      id: Certificate
    FetchCaCertsRequest:
      properties:
        requestId:
          type: string
          description: 'Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).'
      id: FetchCaCertsRequest
      type: object
      description: Request message for CertificateAuthorityService.FetchCaCerts.
    SubjectDescription:
      properties:
        subjectAltName:
          description: The subject alternative name fields.
          $ref: '#/components/schemas/SubjectAltNames'
        lifetime:
          type: string
          description: 'For convenience, the actual lifetime of an issued certificate.'
          format: google-duration
        hexSerialNumber:
          description: The serial number encoded in lowercase hexadecimal.
          type: string
        notAfterTime:
          description: 'The time after which the certificate is expired. Per RFC 5280, the validity period for a certificate is the period of time from not_before_time through not_after_time, inclusive. Corresponds to ''not_before_time'' + ''lifetime'' - 1 second.'
          type: string
          format: google-datetime
        subject:
          $ref: '#/components/schemas/Subject'
          description: 'Contains distinguished name fields such as the common name, location and / organization.'
        notBeforeTime:
          format: google-datetime
          type: string
          description: The time at which the certificate becomes valid.
      id: SubjectDescription
      description: 'These values describe fields in an issued X.509 certificate such as the distinguished name, subject alternative names, serial number, and lifetime.'
      type: object
    AllowedKeyType:
      description: 'Describes a "type" of key that may be used in a Certificate issued from a CaPool. Note that a single AllowedKeyType may refer to either a fully-qualified key algorithm, such as RSA 4096, or a family of key algorithms, such as any RSA key.'
      properties:
        rsa:
          $ref: '#/components/schemas/RsaKeyType'
          description: Represents an allowed RSA key type.
        ellipticCurve:
          $ref: '#/components/schemas/EcKeyType'
          description: Represents an allowed Elliptic Curve key type.
      type: object
      id: AllowedKeyType
    SubjectAltNames:
      id: SubjectAltNames
      properties:
        dnsNames:
          type: array
          items:
            type: string
          description: 'Contains only valid, fully-qualified host names.'
        ipAddresses:
          description: Contains only valid 32-bit IPv4 addresses or RFC 4291 IPv6 addresses.
          items:
            type: string
          type: array
        customSans:
          description: 'Contains additional subject alternative name values. For each custom_san, the `value` field must contain an ASN.1 encoded UTF8String.'
          type: array
          items:
            $ref: '#/components/schemas/X509Extension'
        emailAddresses:
          items:
            type: string
          description: Contains only valid RFC 2822 E-mail addresses.
          type: array
        uris:
          type: array
          description: Contains only valid RFC 3986 URIs.
          items:
            type: string
      description: 'SubjectAltNames corresponds to a more modern way of listing what the asserted identity is in a certificate (i.e., compared to the "common name" in the distinguished name).'
      type: object
    CertificateRevocationList:
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
          description: Optional. Labels with user-defined metadata.
        sequenceNumber:
          readOnly: true
          description: Output only. The CRL sequence number that appears in pem_crl.
          format: int64
          type: string
        state:
          enumDescriptions:
            - Not specified.
            - The CertificateRevocationList is up to date.
            - The CertificateRevocationList is no longer current.
          enum:
            - STATE_UNSPECIFIED
            - ACTIVE
            - SUPERSEDED
          readOnly: true
          type: string
          description: Output only. The State for this CertificateRevocationList.
        updateTime:
          type: string
          format: google-datetime
          readOnly: true
          description: Output only. The time at which this CertificateRevocationList was updated.
        revokedCertificates:
          description: Output only. The revoked serial numbers that appear in pem_crl.
          readOnly: true
          items:
            $ref: '#/components/schemas/RevokedCertificate'
          type: array
        revisionId:
          type: string
          description: Output only. The revision ID of this CertificateRevocationList. A new revision is committed whenever a new CRL is published. The format is an 8-character hexadecimal string.
          readOnly: true
        createTime:
          description: Output only. The time at which this CertificateRevocationList was created.
          readOnly: true
          format: google-datetime
          type: string
        name:
          type: string
          description: Output only. The resource name for this CertificateRevocationList in the format `projects/*/locations/*/caPools/*certificateAuthorities/*/ certificateRevocationLists/*`.
          readOnly: true
        accessUrl:
          readOnly: true
          description: Output only. The location where 'pem_crl' can be accessed.
          type: string
        pemCrl:
          type: string
          description: Output only. The PEM-encoded X.509 CRL.
          readOnly: true
      type: object
      description: A CertificateRevocationList corresponds to a signed X.509 certificate Revocation List (CRL). A CRL contains the serial numbers of certificates that should no longer be trusted.
      id: CertificateRevocationList
    ListCaPoolsResponse:
      properties:
        unreachable:
          items:
            type: string
          type: array
          description: A list of locations (e.g. "us-west1") that could not be reached.
        caPools:
          type: array
          description: The list of CaPools.
          items:
            $ref: '#/components/schemas/CaPool'
        nextPageToken:
          type: string
          description: A token to retrieve next page of results. Pass this value in ListCertificateAuthoritiesRequest.next_page_token to retrieve the next page of results.
      id: ListCaPoolsResponse
      description: Response message for CertificateAuthorityService.ListCaPools.
      type: object
    Expr:
      id: Expr
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
      properties:
        description:
          description: 'Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.'
          type: string
        title:
          description: 'Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.'
          type: string
        location:
          description: 'Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.'
          type: string
        expression:
          description: Textual representation of an expression in Common Expression Language syntax.
          type: string
      type: object
    CertChain:
      type: object
      id: CertChain
      properties:
        certificates:
          description: 'The certificates that form the CA chain, from leaf to root order.'
          items:
            type: string
          type: array
    CertificateTemplate:
      properties:
        predefinedValues:
          description: 'Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool''s IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.'
          $ref: '#/components/schemas/X509Parameters'
        name:
          description: Output only. The resource name for this CertificateTemplate in the format `projects/*/locations/*/certificateTemplates/*`.
          type: string
          readOnly: true
        passthroughExtensions:
          $ref: '#/components/schemas/CertificateExtensionConstraints'
          description: 'Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don''t appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool''s IssuancePolicy defines baseline_values that don''t appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate''s X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate''s predefined_values.'
        updateTime:
          description: Output only. The time at which this CertificateTemplate was updated.
          format: google-datetime
          type: string
          readOnly: true
        description:
          description: Optional. A human-readable description of scenarios this template is intended for.
          type: string
        createTime:
          description: Output only. The time at which this CertificateTemplate was created.
          readOnly: true
          format: google-datetime
          type: string
        labels:
          description: Optional. Labels with user-defined metadata.
          type: object
          additionalProperties:
            type: string
        identityConstraints:
          description: 'Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate''s identity.'
          $ref: '#/components/schemas/CertificateIdentityConstraints'
      type: object
      id: CertificateTemplate
      description: A CertificateTemplate refers to a managed template for certificate issuance.
    ListLocationsResponse:
      id: ListLocationsResponse
      type: object
      properties:
        nextPageToken:
          type: string
          description: The standard List next-page token.
        locations:
          type: array
          items:
            $ref: '#/components/schemas/Location'
          description: A list of locations that matches the specified filter in the request.
      description: The response message for Locations.ListLocations.
    ActivateCertificateAuthorityRequest:
      type: object
      id: ActivateCertificateAuthorityRequest
      properties:
        pemCaCertificate:
          description: Required. The signed CA certificate issued from FetchCertificateAuthorityCsrResponse.pem_csr.
          type: string
        requestId:
          type: string
          description: 'Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).'
        subordinateConfig:
          description: 'Required. Must include information about the issuer of ''pem_ca_certificate'', and any further issuers until the self-signed CA.'
          $ref: '#/components/schemas/SubordinateConfig'
      description: Request message for CertificateAuthorityService.ActivateCertificateAuthority.
    SetIamPolicyRequest:
      properties:
        policy:
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
          $ref: '#/components/schemas/Policy'
        updateMask:
          type: string
          description: 'OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`'
          format: google-fieldmask
      type: object
      description: Request message for `SetIamPolicy` method.
      id: SetIamPolicyRequest
    Policy:
      id: Policy
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
      properties:
        version:
          type: integer
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
          format: int32
        etag:
          type: string
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
          format: byte
        bindings:
          description: 'Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.'
          type: array
          items:
            $ref: '#/components/schemas/Binding'
        auditConfigs:
          items:
            $ref: '#/components/schemas/AuditConfig'
          type: array
          description: Specifies cloud audit logging configuration for this policy.
      type: object
    Binding:
      properties:
        members:
          type: array
          items:
            type: string
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.'
        condition:
          $ref: '#/components/schemas/Expr'
          description: 'The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
        role:
          type: string
          description: 'Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.'
      id: Binding
      type: object
      description: 'Associates `members`, or principals, with a `role`.'
    CaPool:
      type: object
      properties:
        issuancePolicy:
          $ref: '#/components/schemas/IssuancePolicy'
          description: Optional. The IssuancePolicy to control how Certificates will be issued from this CaPool.
        name:
          type: string
          readOnly: true
          description: Output only. The resource name for this CaPool in the format `projects/*/locations/*/caPools/*`.
        labels:
          description: Optional. Labels with user-defined metadata.
          additionalProperties:
            type: string
          type: object
        publishingOptions:
          $ref: '#/components/schemas/PublishingOptions'
          description: Optional. The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
        tier:
          type: string
          enumDescriptions:
            - Not specified.
            - Enterprise tier.
            - DevOps tier.
          description: Required. Immutable. The Tier of this CaPool.
          enum:
            - TIER_UNSPECIFIED
            - ENTERPRISE
            - DEVOPS
      id: CaPool
      description: A CaPool represents a group of CertificateAuthorities that form a trust anchor. A CaPool can be used to manage issuance policies for one or more CertificateAuthority resources and to rotate CA certificates in and out of the trust anchor.
    X509Extension:
      description: 'An X509Extension specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.'
      type: object
      id: X509Extension
      properties:
        critical:
          description: 'Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).'
          type: boolean
        objectId:
          $ref: '#/components/schemas/ObjectId'
          description: Required. The OID for this X.509 extension.
        value:
          type: string
          format: byte
          description: Required. The value of this X.509 extension.
    Empty:
      type: object
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      id: Empty
      properties: {}
    ReconciliationOperationMetadata:
      id: ReconciliationOperationMetadata
      properties:
        exclusiveAction:
          enumDeprecated:
            - false
            - true
            - false
          description: Excluisive action returned by the CLH.
          enum:
            - UNKNOWN_REPAIR_ACTION
            - DELETE
            - RETRY
          type: string
          enumDescriptions:
            - Unknown repair action.
            - 'The resource has to be deleted. When using this bit, the CLH should fail the operation. DEPRECATED. Instead use DELETE_RESOURCE OperationSignal in SideChannel.'
            - This resource could not be repaired but the repair should be tried again at a later time. This can happen if there is a dependency that needs to be resolved first- e.g. if a parent resource must be repaired before a child resource.
        deleteResource:
          type: boolean
          description: DEPRECATED. Use exclusive_action instead.
          deprecated: true
      description: Operation metadata returned by the CLH during resource state reconciliation.
      type: object
    ListCertificateAuthoritiesResponse:
      description: Response message for CertificateAuthorityService.ListCertificateAuthorities.
      id: ListCertificateAuthoritiesResponse
      type: object
      properties:
        certificateAuthorities:
          description: The list of CertificateAuthorities.
          type: array
          items:
            $ref: '#/components/schemas/CertificateAuthority'
        nextPageToken:
          type: string
          description: A token to retrieve next page of results. Pass this value in ListCertificateAuthoritiesRequest.next_page_token to retrieve the next page of results.
        unreachable:
          items:
            type: string
          description: A list of locations (e.g. "us-west1") that could not be reached.
          type: array
    NameConstraints:
      id: NameConstraints
      properties:
        excludedUris:
          items:
            type: string
          type: array
          description: Contains the excluded URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)
        permittedUris:
          items:
            type: string
          type: array
          description: Contains the permitted URIs that apply to the host part of the name. The value can be a hostname or a domain with a leading period (like `.example.com`)
        excludedIpRanges:
          type: array
          items:
            type: string
          description: 'Contains the excluded IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.'
        excludedEmailAddresses:
          description: 'Contains the excluded email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.'
          type: array
          items:
            type: string
        permittedEmailAddresses:
          type: array
          description: 'Contains the permitted email addresses. The value can be a particular email address, a hostname to indicate all email addresses on that host or a domain with a leading period (e.g. `.example.com`) to indicate all email addresses in that domain.'
          items:
            type: string
        excludedDnsNames:
          description: 'Contains excluded DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.'
          items:
            type: string
          type: array
        permittedDnsNames:
          items:
            type: string
          type: array
          description: 'Contains permitted DNS names. Any DNS name that can be constructed by simply adding zero or more labels to the left-hand side of the name satisfies the name constraint. For example, `example.com`, `www.example.com`, `www.sub.example.com` would satisfy `example.com` while `example1.com` does not.'
        critical:
          description: Indicates whether or not the name constraints are marked critical.
          type: boolean
        permittedIpRanges:
          type: array
          items:
            type: string
          description: 'Contains the permitted IP ranges. For IPv4 addresses, the ranges are expressed using CIDR notation as specified in RFC 4632. For IPv6 addresses, the ranges are expressed in similar encoding as IPv4 addresses.'
      type: object
      description: 'Describes the X.509 name constraints extension, per https://tools.ietf.org/html/rfc5280#section-4.2.1.10'
    PublishingOptions:
      properties:
        publishCaCert:
          type: boolean
          description: 'Optional. When true, publishes each CertificateAuthority''s CA certificate and includes its URL in the "Authority Information Access" X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding X.509 extension will not be written in issued certificates.'
        publishCrl:
          description: 'Optional. When true, publishes each CertificateAuthority''s CRL and includes its URL in the "CRL Distribution Points" X.509 extension in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are also rebuilt shortly after a certificate is revoked.'
          type: boolean
        encodingFormat:
          enumDescriptions:
            - 'Not specified. By default, PEM format will be used.'
            - The CertificateAuthority's CA certificate and CRLs will be published in PEM format.
            - The CertificateAuthority's CA certificate and CRLs will be published in DER format.
          description: 'Optional. Specifies the encoding format of each CertificateAuthority''s CA certificate and CRLs. If this is omitted, CA certificates and CRLs will be published in PEM.'
          enum:
            - ENCODING_FORMAT_UNSPECIFIED
            - PEM
            - DER
          type: string
      id: PublishingOptions
      description: Options relating to the publication of each CertificateAuthority's CA certificate and CRLs and their inclusion as extensions in issued Certificates. The options set here apply to certificates issued by any CertificateAuthority in the CaPool.
      type: object
    CertificateIdentityConstraints:
      type: object
      properties:
        allowSubjectAltNamesPassthrough:
          description: 'Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.'
          type: boolean
        celExpression:
          $ref: '#/components/schemas/Expr'
          description: 'Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel'
        allowSubjectPassthrough:
          type: boolean
          description: 'Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.'
      id: CertificateIdentityConstraints
      description: Describes constraints on a Certificate's Subject and SubjectAltNames.
    KeyUsage:
      id: KeyUsage
      properties:
        unknownExtendedKeyUsages:
          items:
            $ref: '#/components/schemas/ObjectId'
          type: array
          description: Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
        baseKeyUsage:
          $ref: '#/components/schemas/KeyUsageOptions'
          description: Describes high-level ways in which a key may be used.
        extendedKeyUsage:
          $ref: '#/components/schemas/ExtendedKeyUsageOptions'
          description: Detailed scenarios in which a key may be used.
      type: object
      description: A KeyUsage describes key usage values that may appear in an X.509 certificate.
    SubjectConfig:
      description: These values are used to create the distinguished name and subject alternative name fields in an X.509 certificate.
      type: object
      id: SubjectConfig
      properties:
        subjectAltName:
          $ref: '#/components/schemas/SubjectAltNames'
          description: Optional. The subject alternative name fields.
        subject:
          $ref: '#/components/schemas/Subject'
          description: 'Required. Contains distinguished name fields such as the common name, location and organization.'
    IssuancePolicy:
      type: object
      properties:
        allowedIssuanceModes:
          $ref: '#/components/schemas/IssuanceModes'
          description: 'Optional. If specified, then only methods allowed in the IssuanceModes may be used to issue Certificates.'
        maximumLifetime:
          type: string
          description: 'Optional. The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority expires before a Certificate''s requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.'
          format: google-duration
        allowedKeyTypes:
          type: array
          description: 'Optional. If any AllowedKeyType is specified, then the certificate request''s public key must match one of the key types listed here. Otherwise, any key may be used.'
          items:
            $ref: '#/components/schemas/AllowedKeyType'
        passthroughExtensions:
          $ref: '#/components/schemas/CertificateExtensionConstraints'
          description: 'Optional. Describes the set of X.509 extensions that may appear in a Certificate issued through this CaPool. If a certificate request sets extensions that don''t appear in the passthrough_extensions, those extensions will be dropped. If a certificate request uses a CertificateTemplate with predefined_values that don''t appear here, the certificate issuance request will fail. If this is omitted, then this CaPool will not add restrictions on a certificate''s X.509 extensions. These constraints do not apply to X.509 extensions set in this CaPool''s baseline_values.'
        identityConstraints:
          description: 'Optional. Describes constraints on identities that may appear in Certificates issued through this CaPool. If this is omitted, then this CaPool will not add restrictions on a certificate''s identity.'
          $ref: '#/components/schemas/CertificateIdentityConstraints'
        baselineValues:
          description: 'Optional. A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate request uses a CertificateTemplate that defines conflicting predefined_values for the same properties, the certificate issuance request will fail.'
          $ref: '#/components/schemas/X509Parameters'
      id: IssuancePolicy
      description: Defines controls over all certificate issuance within a CaPool.
    CertificateExtensionConstraints:
      properties:
        knownExtensions:
          type: array
          items:
            type: string
            enum:
              - KNOWN_CERTIFICATE_EXTENSION_UNSPECIFIED
              - BASE_KEY_USAGE
              - EXTENDED_KEY_USAGE
              - CA_OPTIONS
              - POLICY_IDS
              - AIA_OCSP_SERVERS
              - NAME_CONSTRAINTS
            enumDescriptions:
              - Not specified.
              - 'Refers to a certificate''s Key Usage extension, as described in [RFC 5280 section 4.2.1.3](https://tools.ietf.org/html/rfc5280#section-4.2.1.3). This corresponds to the KeyUsage.base_key_usage field.'
              - 'Refers to a certificate''s Extended Key Usage extension, as described in [RFC 5280 section 4.2.1.12](https://tools.ietf.org/html/rfc5280#section-4.2.1.12). This corresponds to the KeyUsage.extended_key_usage message.'
              - 'Refers to a certificate''s Basic Constraints extension, as described in [RFC 5280 section 4.2.1.9](https://tools.ietf.org/html/rfc5280#section-4.2.1.9). This corresponds to the X509Parameters.ca_options field.'
              - 'Refers to a certificate''s Policy object identifiers, as described in [RFC 5280 section 4.2.1.4](https://tools.ietf.org/html/rfc5280#section-4.2.1.4). This corresponds to the X509Parameters.policy_ids field.'
              - 'Refers to OCSP servers in a certificate''s Authority Information Access extension, as described in [RFC 5280 section 4.2.2.1](https://tools.ietf.org/html/rfc5280#section-4.2.2.1), This corresponds to the X509Parameters.aia_ocsp_servers field.'
              - 'Refers to Name Constraints extension as described in [RFC 5280 section 4.2.1.10](https://tools.ietf.org/html/rfc5280#section-4.2.1.10)'
          description: Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
        additionalExtensions:
          items:
            $ref: '#/components/schemas/ObjectId'
          type: array
          description: Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
      description: Describes a set of X.509 extensions that may be part of some certificate issuance controls.
      type: object
      id: CertificateExtensionConstraints
    FetchCertificateAuthorityCsrResponse:
      properties:
        pemCsr:
          description: Output only. The PEM-encoded signed certificate signing request (CSR).
          type: string
          readOnly: true
      description: Response message for CertificateAuthorityService.FetchCertificateAuthorityCsr.
      type: object
      id: FetchCertificateAuthorityCsrResponse
    OperationMetadata:
      properties:
        target:
          description: Output only. Server-defined resource path for the target of the operation.
          readOnly: true
          type: string
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
        requestedCancellation:
          description: 'Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
          readOnly: true
          type: boolean
        statusMessage:
          description: 'Output only. Human-readable status of the operation, if any.'
          type: string
          readOnly: true
        createTime:
          format: google-datetime
          description: Output only. The time the operation was created.
          readOnly: true
          type: string
        verb:
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
          type: string
        endTime:
          type: string
          format: google-datetime
          description: Output only. The time the operation finished running.
          readOnly: true
      id: OperationMetadata
      type: object
      description: Represents the metadata of the long-running operation.
    ListCertificateTemplatesResponse:
      id: ListCertificateTemplatesResponse
      type: object
      properties:
        certificateTemplates:
          items:
            $ref: '#/components/schemas/CertificateTemplate'
          type: array
          description: The list of CertificateTemplates.
        nextPageToken:
          type: string
          description: A token to retrieve next page of results. Pass this value in ListCertificateTemplatesRequest.next_page_token to retrieve the next page of results.
        unreachable:
          type: array
          items:
            type: string
          description: A list of locations (e.g. "us-west1") that could not be reached.
      description: Response message for CertificateAuthorityService.ListCertificateTemplates.
    CertificateConfig:
      type: object
      id: CertificateConfig
      properties:
        x509Config:
          description: Required. Describes how some of the technical X.509 fields in a certificate should be populated.
          $ref: '#/components/schemas/X509Parameters'
        publicKey:
          description: 'Optional. The public key that corresponds to this config. This is, for example, used when issuing Certificates, but not when creating a self-signed CertificateAuthority or CertificateAuthority CSR.'
          $ref: '#/components/schemas/PublicKey'
        subjectConfig:
          $ref: '#/components/schemas/SubjectConfig'
          description: Required. Specifies some of the values in a certificate that are related to the subject.
      description: 'A CertificateConfig describes an X.509 certificate or CSR that is to be created, as an alternative to using ASN.1.'
    KeyId:
      description: 'A KeyId identifies a specific public key, usually by hashing the public key.'
      properties:
        keyId:
          type: string
          description: Optional. The value of this KeyId encoded in lowercase hexadecimal. This is most likely the 160 bit SHA-1 hash of the public key.
      id: KeyId
      type: object
    RsaKeyType:
      description: Describes an RSA key that may be used in a Certificate issued from a CaPool.
      type: object
      id: RsaKeyType
      properties:
        maxModulusSize:
          description: 'Optional. The maximum allowed RSA modulus size (inclusive), in bits. If this is not set, or if set to zero, the service will not enforce an explicit upper bound on RSA modulus sizes.'
          type: string
          format: int64
        minModulusSize:
          format: int64
          type: string
          description: 'Optional. The minimum allowed RSA modulus size (inclusive), in bits. If this is not set, or if set to zero, the service-level min RSA modulus size will continue to apply.'
    EnableCertificateAuthorityRequest:
      type: object
      description: Request message for CertificateAuthorityService.EnableCertificateAuthority.
      properties:
        requestId:
          type: string
          description: 'Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).'
      id: EnableCertificateAuthorityRequest
    X509Parameters:
      properties:
        keyUsage:
          description: Optional. Indicates the intended use for keys that correspond to a certificate.
          $ref: '#/components/schemas/KeyUsage'
        nameConstraints:
          description: Optional. Describes the X.509 name constraints extension.
          $ref: '#/components/schemas/NameConstraints'
        caOptions:
          $ref: '#/components/schemas/CaOptions'
          description: Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
        aiaOcspServers:
          type: array
          description: Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
          items:
            type: string
        additionalExtensions:
          type: array
          description: Optional. Describes custom X.509 extensions.
          items:
            $ref: '#/components/schemas/X509Extension'
        policyIds:
          type: array
          items:
            $ref: '#/components/schemas/ObjectId'
          description: 'Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.'
      type: object
      id: X509Parameters
      description: 'An X509Parameters is used to describe certain fields of an X.509 certificate, such as the key usage fields, fields specific to CA certificates, certificate policy extensions and custom extensions.'
    FetchCaCertsResponse:
      type: object
      id: FetchCaCertsResponse
      properties:
        caCerts:
          items:
            $ref: '#/components/schemas/CertChain'
          description: The PEM encoded CA certificate chains of all ACTIVE CertificateAuthority resources in this CaPool.
          type: array
      description: Response message for CertificateAuthorityService.FetchCaCerts.
    CertificateFingerprint:
      id: CertificateFingerprint
      type: object
      properties:
        sha256Hash:
          type: string
          description: 'The SHA 256 hash, encoded in hexadecimal, of the DER x509 certificate.'
      description: A group of fingerprints for the x509 certificate.
    ListCertificatesResponse:
      properties:
        unreachable:
          type: array
          description: A list of locations (e.g. "us-west1") that could not be reached.
          items:
            type: string
        certificates:
          description: The list of Certificates.
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
        nextPageToken:
          type: string
          description: A token to retrieve next page of results. Pass this value in ListCertificatesRequest.next_page_token to retrieve the next page of results.
      type: object
      id: ListCertificatesResponse
      description: Response message for CertificateAuthorityService.ListCertificates.
    TestIamPermissionsRequest:
      properties:
        permissions:
          items:
            type: string
          description: 'The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).'
          type: array
      type: object
      id: TestIamPermissionsRequest
      description: Request message for `TestIamPermissions` method.
    CaOptions:
      id: CaOptions
      type: object
      properties:
        isCa:
          description: 'Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.'
          type: boolean
        maxIssuerPathLength:
          type: integer
          description: 'Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.'
          format: int32
      description: Describes values that are relevant in a CA certificate.
    TestIamPermissionsResponse:
      description: Response message for `TestIamPermissions` method.
      properties:
        permissions:
          items:
            type: string
          type: array
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
      type: object
      id: TestIamPermissionsResponse
    UndeleteCertificateAuthorityRequest:
      properties:
        requestId:
          type: string
          description: 'Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).'
      description: Request message for CertificateAuthorityService.UndeleteCertificateAuthority.
      type: object
      id: UndeleteCertificateAuthorityRequest
    SubordinateConfigChain:
      properties:
        pemCertificates:
          items:
            type: string
          description: Required. Expected to be in leaf-to-root order according to RFC 5246.
          type: array
      id: SubordinateConfigChain
      description: This message describes a subordinate CA's issuer certificate chain. This wrapper exists for compatibility reasons.
      type: object
    ListCertificateRevocationListsResponse:
      description: Response message for CertificateAuthorityService.ListCertificateRevocationLists.
      properties:
        nextPageToken:
          description: A token to retrieve next page of results. Pass this value in ListCertificateRevocationListsRequest.next_page_token to retrieve the next page of results.
          type: string
        certificateRevocationLists:
          description: The list of CertificateRevocationLists.
          type: array
          items:
            $ref: '#/components/schemas/CertificateRevocationList'
        unreachable:
          items:
            type: string
          type: array
          description: A list of locations (e.g. "us-west1") that could not be reached.
      type: object
      id: ListCertificateRevocationListsResponse
    RevocationDetails:
      type: object
      id: RevocationDetails
      description: Describes fields that are relavent to the revocation of a Certificate.
      properties:
        revocationTime:
          description: The time at which this Certificate was revoked.
          type: string
          format: google-datetime
        revocationState:
          enumDescriptions:
            - 'Default unspecified value. This value does indicate that a Certificate has been revoked, but that a reason has not been recorded.'
            - Key material for this Certificate may have leaked.
            - The key material for a certificate authority in the issuing path may have leaked.
            - The subject or other attributes in this Certificate have changed.
            - This Certificate has been superseded.
            - This Certificate or entities in the issuing path have ceased to operate.
            - 'This Certificate should not be considered valid, it is expected that it may become valid in the future.'
            - This Certificate no longer has permission to assert the listed attributes.
            - The authority which determines appropriate attributes for a Certificate may have been compromised.
          description: Indicates why a Certificate was revoked.
          type: string
          enum:
            - REVOCATION_REASON_UNSPECIFIED
            - KEY_COMPROMISE
            - CERTIFICATE_AUTHORITY_COMPROMISE
            - AFFILIATION_CHANGED
            - SUPERSEDED
            - CESSATION_OF_OPERATION
            - CERTIFICATE_HOLD
            - PRIVILEGE_WITHDRAWN
            - ATTRIBUTE_AUTHORITY_COMPROMISE
    RevokeCertificateRequest:
      id: RevokeCertificateRequest
      type: object
      description: Request message for CertificateAuthorityService.RevokeCertificate.
      properties:
        requestId:
          description: 'Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).'
          type: string
        reason:
          enumDescriptions:
            - 'Default unspecified value. This value does indicate that a Certificate has been revoked, but that a reason has not been recorded.'
            - Key material for this Certificate may have leaked.
            - The key material for a certificate authority in the issuing path may have leaked.
            - The subject or other attributes in this Certificate have changed.
            - This Certificate has been superseded.
            - This Certificate or entities in the issuing path have ceased to operate.
            - 'This Certificate should not be considered valid, it is expected that it may become valid in the future.'
            - This Certificate no longer has permission to assert the listed attributes.
            - The authority which determines appropriate attributes for a Certificate may have been compromised.
          type: string
          enum:
            - REVOCATION_REASON_UNSPECIFIED
            - KEY_COMPROMISE
            - CERTIFICATE_AUTHORITY_COMPROMISE
            - AFFILIATION_CHANGED
            - SUPERSEDED
            - CESSATION_OF_OPERATION
            - CERTIFICATE_HOLD
            - PRIVILEGE_WITHDRAWN
            - ATTRIBUTE_AUTHORITY_COMPROMISE
          description: Required. The RevocationReason for revoking this certificate.
    ObjectId:
      properties:
        objectIdPath:
          items:
            type: integer
            format: int32
          type: array
          description: Required. The parts of an OID path. The most significant parts of the path come first.
      id: ObjectId
      type: object
      description: An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    DisableCertificateAuthorityRequest:
      type: object
      properties:
        ignoreDependentResources:
          type: boolean
          description: 'Optional. This field allows this CA to be disabled even if it''s being depended on by another resource. However, doing so may result in unintended and unrecoverable effects on any dependent resource(s) since the CA will no longer be able to issue certificates.'
        requestId:
          description: 'Optional. An ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).'
          type: string
      id: DisableCertificateAuthorityRequest
      description: Request message for CertificateAuthorityService.DisableCertificateAuthority.
    CertificateAuthority:
      id: CertificateAuthority
      description: A CertificateAuthority represents an individual Certificate Authority. A CertificateAuthority can be used to create Certificates.
      type: object
      properties:
        state:
          enum:
            - STATE_UNSPECIFIED
            - ENABLED
            - DISABLED
            - STAGED
            - AWAITING_USER_ACTIVATION
            - DELETED
          description: Output only. The State for this CertificateAuthority.
          enumDescriptions:
            - Not specified.
            - 'Certificates can be issued from this CA. CRLs will be generated for this CA. The CA will be part of the CaPool''s trust anchor, and will be used to issue certificates from the CaPool.'
            - 'Certificates cannot be issued from this CA. CRLs will still be generated. The CA will be part of the CaPool''s trust anchor, but will not be used to issue certificates from the CaPool.'
            - 'Certificates can be issued from this CA. CRLs will be generated for this CA. The CA will be part of the CaPool''s trust anchor, but will not be used to issue certificates from the CaPool.'
            - 'Certificates cannot be issued from this CA. CRLs will not be generated. The CA will not be part of the CaPool''s trust anchor, and will not be used to issue certificates from the CaPool.'
            - 'Certificates cannot be issued from this CA. CRLs will not be generated. The CA may still be recovered by calling CertificateAuthorityService.UndeleteCertificateAuthority before expire_time. The CA will not be part of the CaPool''s trust anchor, and will not be used to issue certificates from the CaPool.'
          type: string
          readOnly: true
        updateTime:
          format: google-datetime
          type: string
          readOnly: true
          description: Output only. The time at which this CertificateAuthority was last updated.
        tier:
          type: string
          readOnly: true
          enumDescriptions:
            - Not specified.
            - Enterprise tier.
            - DevOps tier.
          description: Output only. The CaPool.Tier of the CaPool that includes this CertificateAuthority.
          enum:
            - TIER_UNSPECIFIED
            - ENTERPRISE
            - DEVOPS
        deleteTime:
          readOnly: true
          format: google-datetime
          description: 'Output only. The time at which this CertificateAuthority was soft deleted, if it is in the DELETED state.'
          type: string
        gcsBucket:
          type: string
          description: 'Immutable. The name of a Cloud Storage bucket where this CertificateAuthority will publish content, such as the CA certificate and CRLs. This must be a bucket name, without any prefixes (such as `gs://`) or suffixes (such as `.googleapis.com`). For example, to use a bucket named `my-bucket`, you would simply specify `my-bucket`. If not specified, a managed bucket will be created.'
        lifetime:
          format: google-duration
          description: Required. Immutable. The desired lifetime of the CA certificate. Used to create the "not_before_time" and "not_after_time" fields inside an X.509 certificate.
          type: string
        accessUrls:
          readOnly: true
          description: 'Output only. URLs for accessing content published by this CA, such as the CA certificate and CRLs.'
          $ref: '#/components/schemas/AccessUrls'
        config:
          $ref: '#/components/schemas/CertificateConfig'
          description: Required. Immutable. The config used to create a self-signed X.509 certificate or CSR.
        name:
          type: string
          description: Output only. The resource name for this CertificateAuthority in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
          readOnly: true
        labels:
          description: Optional. Labels with user-defined metadata.
          additionalProperties:
            type: string
          type: object
        pemCaCertificates:
          readOnly: true
          items:
            type: string
          type: array
          description: 'Output only. This CertificateAuthority''s certificate chain, including the current CertificateAuthority''s certificate. Ordered such that the root issuer is the final element (consistent with RFC 5246). For a self-signed CA, this will only list the current CertificateAuthority''s certificate.'
        keySpec:
          description: 'Required. Immutable. Used when issuing certificates for this CertificateAuthority. If this CertificateAuthority is a self-signed CertificateAuthority, this key is also used to sign the self-signed CA certificate. Otherwise, it is used to sign a CSR.'
          $ref: '#/components/schemas/KeyVersionSpec'
        caCertificateDescriptions:
          description: Output only. A structured description of this CertificateAuthority's CA certificate and its issuers. Ordered as self-to-root.
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/CertificateDescription'
        type:
          enum:
            - TYPE_UNSPECIFIED
            - SELF_SIGNED
            - SUBORDINATE
          description: Required. Immutable. The Type of this CertificateAuthority.
          type: string
          enumDescriptions:
            - Not specified.
            - Self-signed CA.
            - Subordinate CA. Could be issued by a Private CA CertificateAuthority or an unmanaged CA.
        expireTime:
          readOnly: true
          type: string
          description: 'Output only. The time at which this CertificateAuthority will be permanently purged, if it is in the DELETED state.'
          format: google-datetime
        createTime:
          description: Output only. The time at which this CertificateAuthority was created.
          format: google-datetime
          type: string
          readOnly: true
        subordinateConfig:
          $ref: '#/components/schemas/SubordinateConfig'
          description: 'Optional. If this is a subordinate CertificateAuthority, this field will be set with the subordinate configuration, which describes its issuers. This may be updated, but this CertificateAuthority must continue to validate.'
    KeyUsageOptions:
      properties:
        crlSign:
          type: boolean
          description: The key may be used sign certificate revocation lists.
        digitalSignature:
          description: The key may be used for digital signatures.
          type: boolean
        keyEncipherment:
          type: boolean
          description: The key may be used to encipher other keys.
        contentCommitment:
          type: boolean
          description: The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
        encipherOnly:
          type: boolean
          description: The key may be used to encipher only.
        decipherOnly:
          type: boolean
          description: The key may be used to decipher only.
        certSign:
          type: boolean
          description: The key may be used to sign certificates.
        keyAgreement:
          type: boolean
          description: The key may be used in a key agreement protocol.
        dataEncipherment:
          description: The key may be used to encipher data.
          type: boolean
      description: 'KeyUsage.KeyUsageOptions corresponds to the key usage values described in https://tools.ietf.org/html/rfc5280#section-4.2.1.3.'
      id: KeyUsageOptions
      type: object
    AccessUrls:
      type: object
      id: AccessUrls
      description: URLs where a CertificateAuthority will publish content.
      properties:
        caCertificateAccessUrl:
          description: The URL where this CertificateAuthority's CA certificate is published. This will only be set for CAs that have been activated.
          type: string
        crlAccessUrls:
          type: array
          items:
            type: string
          description: The URLs where this CertificateAuthority's CRLs are published. This will only be set for CAs that have been activated.
    AuditConfig:
      properties:
        service:
          type: string
          description: 'Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.'
        auditLogConfigs:
          items:
            $ref: '#/components/schemas/AuditLogConfig'
          description: The configuration for logging of each type of permission.
          type: array
      type: object
      id: AuditConfig
      description: 'Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.'
    KeyVersionSpec:
      id: KeyVersionSpec
      properties:
        cloudKmsKeyVersion:
          type: string
          description: The resource name for an existing Cloud KMS CryptoKeyVersion in the format `projects/*/locations/*/keyRings/*/cryptoKeys/*/cryptoKeyVersions/*`. This option enables full flexibility in the key's capabilities and properties.
        algorithm:
          type: string
          description: The algorithm to use for creating a managed Cloud KMS key for a for a simplified experience. All managed keys will be have their ProtectionLevel as `HSM`.
          enum:
            - SIGN_HASH_ALGORITHM_UNSPECIFIED
            - RSA_PSS_2048_SHA256
            - RSA_PSS_3072_SHA256
            - RSA_PSS_4096_SHA256
            - RSA_PKCS1_2048_SHA256
            - RSA_PKCS1_3072_SHA256
            - RSA_PKCS1_4096_SHA256
            - EC_P256_SHA256
            - EC_P384_SHA384
          enumDescriptions:
            - Not specified.
            - maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PSS_2048_SHA256
            - maps to CryptoKeyVersionAlgorithm. RSA_SIGN_PSS_3072_SHA256
            - maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PSS_4096_SHA256
            - maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_2048_SHA256
            - maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_3072_SHA256
            - maps to CryptoKeyVersionAlgorithm.RSA_SIGN_PKCS1_4096_SHA256
            - maps to CryptoKeyVersionAlgorithm.EC_SIGN_P256_SHA256
            - maps to CryptoKeyVersionAlgorithm.EC_SIGN_P384_SHA384
      description: A Cloud KMS key configuration that a CertificateAuthority will use.
      type: object
    ExtendedKeyUsageOptions:
      id: ExtendedKeyUsageOptions
      properties:
        serverAuth:
          type: boolean
          description: 'Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.'
        emailProtection:
          description: Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
          type: boolean
        clientAuth:
          type: boolean
          description: 'Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.'
        timeStamping:
          description: Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
          type: boolean
        ocspSigning:
          type: boolean
          description: Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
        codeSigning:
          description: Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
          type: boolean
      description: KeyUsage.ExtendedKeyUsageOptions has fields that correspond to certain common OIDs that could be specified as an extended key usage value.
      type: object
    CancelOperationRequest:
      type: object
      description: The request message for Operations.CancelOperation.
      properties: {}
      id: CancelOperationRequest
    IssuanceModes:
      id: IssuanceModes
      type: object
      properties:
        allowConfigBasedIssuance:
          description: 'Optional. When true, allows callers to create Certificates by specifying a CertificateConfig.'
          type: boolean
        allowCsrBasedIssuance:
          type: boolean
          description: 'Optional. When true, allows callers to create Certificates by specifying a CSR.'
      description: IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
    ListOperationsResponse:
      properties:
        operations:
          type: array
          description: A list of operations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/Operation'
        nextPageToken:
          description: The standard List next-page token.
          type: string
      type: object
      id: ListOperationsResponse
      description: The response message for Operations.ListOperations.
    PublicKey:
      properties:
        format:
          enum:
            - KEY_FORMAT_UNSPECIFIED
            - PEM
          type: string
          enumDescriptions:
            - Default unspecified value.
            - 'The key is PEM-encoded as defined in [RFC 7468](https://tools.ietf.org/html/rfc7468). It can be any of the following: a PEM-encoded PKCS#1/RFC 3447 RSAPublicKey structure, an RFC 5280 [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) or a PEM-encoded X.509 certificate signing request (CSR). If a [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) is specified, it can contain a A PEM-encoded PKCS#1/RFC 3447 RSAPublicKey or a NIST P-256/secp256r1/prime256v1 or P-384 key. If a CSR is specified, it will used solely for the purpose of extracting the public key. When generated by the service, it will always be an RFC 5280 [SubjectPublicKeyInfo](https://tools.ietf.org/html/rfc5280#section-4.1) structure containing an algorithm identifier and a key.'
          description: Required. The format of the public key.
        key:
          format: byte
          type: string
          description: Required. A public key. The padding and encoding must match with the `KeyFormat` value specified for the `format` field.
      type: object
      description: A PublicKey describes a public key.
      id: PublicKey
    SubordinateConfig:
      description: 'Describes a subordinate CA''s issuers. This is either a resource name to a known issuing CertificateAuthority, or a PEM issuer certificate chain.'
      type: object
      id: SubordinateConfig
      properties:
        pemIssuerChain:
          $ref: '#/components/schemas/SubordinateConfigChain'
          description: 'Required. Contains the PEM certificate chain for the issuers of this CertificateAuthority, but not pem certificate for this CA itself.'
        certificateAuthority:
          description: Required. This can refer to a CertificateAuthority that was used to create a subordinate CertificateAuthority. This field is used for information and usability purposes only. The resource name is in the format `projects/*/locations/*/caPools/*/certificateAuthorities/*`.
          type: string
    EcKeyType:
      id: EcKeyType
      type: object
      properties:
        signatureAlgorithm:
          enumDescriptions:
            - Not specified. Signifies that any signature algorithm may be used.
            - Refers to the Elliptic Curve Digital Signature Algorithm over the NIST P-256 curve.
            - Refers to the Elliptic Curve Digital Signature Algorithm over the NIST P-384 curve.
            - 'Refers to the Edwards-curve Digital Signature Algorithm over curve 25519, as described in RFC 8410.'
          description: 'Optional. A signature algorithm that must be used. If this is omitted, any EC-based signature algorithm will be allowed.'
          type: string
          enum:
            - EC_SIGNATURE_ALGORITHM_UNSPECIFIED
            - ECDSA_P256
            - ECDSA_P384
            - EDDSA_25519
      description: Describes an Elliptic Curve key that may be used in a Certificate issued from a CaPool.
    Location:
      description: A resource that represents a Google Cloud location.
      properties:
        labels:
          additionalProperties:
            type: string
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
          type: object
        name:
          type: string
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
        displayName:
          description: 'The friendly name for this location, typically a nearby city name. For example, "Tokyo".'
          type: string
        metadata:
          type: object
          description: Service-specific metadata. For example the available capacity at the given location.
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
        locationId:
          type: string
          description: 'The canonical id for this location. For example: `"us-east1"`.'
      type: object
      id: Location
    AuditLogConfig:
      properties:
        exemptedMembers:
          type: array
          description: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
          items:
            type: string
        logType:
          type: string
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
          description: The log type that this config enables.
      id: AuditLogConfig
      description: 'Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables ''DATA_READ'' and ''DATA_WRITE'' logging, while exempting jose@example.com from DATA_READ logging.'
      type: object
    Subject:
      description: 'Subject describes parts of a distinguished name that, in turn, describes the subject of the certificate.'
      properties:
        organizationalUnit:
          type: string
          description: The organizational_unit of the subject.
        countryCode:
          description: The country code of the subject.
          type: string
        streetAddress:
          type: string
          description: The street address of the subject.
        province:
          type: string
          description: 'The province, territory, or regional state of the subject.'
        organization:
          type: string
          description: The organization of the subject.
        commonName:
          type: string
          description: The "common name" of the subject.
        locality:
          type: string
          description: The locality or city of the subject.
        postalCode:
          description: The postal code of the subject.
          type: string
      type: object
      id: Subject
  parameters:
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
  x-stackQL-resources:
    certificate_templates:
      id: google.privateca.certificate_templates
      name: certificate_templates
      title: Certificate Templates
      methods:
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1certificateTemplates~1{certificateTemplatesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1certificateTemplates~1{certificateTemplatesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1certificateTemplates~1{certificateTemplatesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1certificateTemplates/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1certificateTemplates/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.certificateTemplates
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1certificateTemplates/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/certificate_templates/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/certificate_templates/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/certificate_templates/methods/delete'
    certificate_templates_iam_policies:
      id: google.privateca.certificate_templates_iam_policies
      name: certificate_templates_iam_policies
      title: Certificate Templates Iam Policies
      methods:
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1certificateTemplates~1{certificateTemplatesId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1certificateTemplates~1{certificateTemplatesId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1certificateTemplates~1{certificateTemplatesId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/certificate_templates_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    operations:
      id: google.privateca.operations
      name: operations
      title: Operations
      methods:
        cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    ca_pools:
      id: google.privateca.ca_pools
      name: ca_pools
      title: Ca Pools
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.caPools
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/ca_pools/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/ca_pools/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/ca_pools/methods/delete'
    ca_pools_iam_policies:
      id: google.privateca.ca_pools_iam_policies
      name: ca_pools_iam_policies
      title: Ca Pools Iam Policies
      methods:
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/ca_pools_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    ca_pools_ca_certs:
      id: google.privateca.ca_pools_ca_certs
      name: ca_pools_ca_certs
      title: Ca Pools Ca Certs
      methods:
        fetch_ca_certs:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}:fetchCaCerts/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    certificate_revocation_lists:
      id: google.privateca.certificate_revocation_lists
      name: certificate_revocation_lists
      title: Certificate Revocation Lists
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}~1certificateRevocationLists~1{certificateRevocationListsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}~1certificateRevocationLists~1{certificateRevocationListsId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}~1certificateRevocationLists/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.certificateRevocationLists
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}~1certificateRevocationLists/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/certificate_revocation_lists/methods/list'
        insert: []
        update: []
        delete: []
    certificate_revocation_lists_iam_policies:
      id: google.privateca.certificate_revocation_lists_iam_policies
      name: certificate_revocation_lists_iam_policies
      title: Certificate Revocation Lists Iam Policies
      methods:
        set_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}~1certificateRevocationLists~1{certificateRevocationListsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        test_iam_permissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}~1certificateRevocationLists~1{certificateRevocationListsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get_iam_policy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}~1certificateRevocationLists~1{certificateRevocationListsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/certificate_revocation_lists_iam_policies/methods/get_iam_policy'
        insert: []
        update: []
        delete: []
    certificate_authorities:
      id: google.privateca.certificate_authorities
      name: certificate_authorities
      title: Certificate Authorities
      methods:
        fetch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}:fetch/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        enable:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}:enable/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        undelete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}:undelete/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        disable:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}:disable/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.certificateAuthorities
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        activate:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificateAuthorities~1{certificateAuthoritiesId}:activate/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/certificate_authorities/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/certificate_authorities/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/certificate_authorities/methods/delete'
    certificates:
      id: google.privateca.certificates
      name: certificates
      title: Certificates
      methods:
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificates/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificates/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.certificates
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificates/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        patch:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificates~1{certificatesId}/patch'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificates~1{certificatesId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        revoke:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1caPools~1{caPoolsId}~1certificates~1{certificatesId}:revoke/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/certificates/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/certificates/methods/create'
        update: []
        delete: []
    locations:
      id: google.privateca.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/locations/{locationsId}/certificateTemplates/{certificateTemplatesId}':
    parameters: &ref_1
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/access_token'
    patch:
      description: Update a CertificateTemplate.
      operationId: privateca.projects.locations.certificateTemplates.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateTemplate'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateTemplatesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: certificate_templates
      x-stackQL-method: patch
      x-stackQL-verb: exec
    delete:
      description: DeleteCertificateTemplate deletes a CertificateTemplate.
      operationId: privateca.projects.locations.certificateTemplates.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateTemplatesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: certificate_templates
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Returns a CertificateTemplate.
      operationId: privateca.projects.locations.certificateTemplates.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateTemplate'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateTemplatesId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificate_templates
      x-stackQL-method: get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/certificateTemplates':
    parameters: *ref_1
    post:
      description: Create a new CertificateTemplate in a given Project and Location.
      operationId: privateca.projects.locations.certificateTemplates.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateTemplate'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: certificateTemplateId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: certificate_templates
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists CertificateTemplates.
      operationId: privateca.projects.locations.certificateTemplates.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCertificateTemplatesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: certificate_templates
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.certificateTemplates
  '/v1/projects/{projectsId}/locations/{locationsId}/certificateTemplates/{certificateTemplatesId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: privateca.projects.locations.certificateTemplates.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateTemplatesId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: certificate_templates_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/certificateTemplates/{certificateTemplatesId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: privateca.projects.locations.certificateTemplates.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateTemplatesId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificate_templates_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/certificateTemplates/{certificateTemplatesId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: privateca.projects.locations.certificateTemplates.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateTemplatesId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificate_templates_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel':
    parameters: *ref_1
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
      operationId: privateca.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: cancel
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}':
    parameters: *ref_1
    delete:
      description: 'Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.'
      operationId: privateca.projects.locations.operations.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: privateca.projects.locations.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/operations':
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`.'
      operationId: privateca.projects.locations.operations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: operations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.operations
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}':
    parameters: *ref_1
    get:
      description: Returns a CaPool.
      operationId: privateca.projects.locations.caPools.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaPool'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
      x-stackQL-resource: ca_pools
      x-stackQL-method: get
      x-stackQL-verb: exec
    patch:
      description: Update a CaPool.
      operationId: privateca.projects.locations.caPools.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaPool'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: ca_pools
      x-stackQL-method: patch
      x-stackQL-verb: exec
    delete:
      description: Delete a CaPool.
      operationId: privateca.projects.locations.caPools.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: query
          name: ignoreDependentResources
          schema:
            type: boolean
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: ca_pools
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: privateca.projects.locations.caPools.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
      x-stackQL-resource: ca_pools_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools':
    parameters: *ref_1
    post:
      description: Create a CaPool.
      operationId: privateca.projects.locations.caPools.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaPool'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: caPoolId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: ca_pools
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists CaPools.
      operationId: privateca.projects.locations.caPools.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCaPoolsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: ca_pools
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.caPools
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: privateca.projects.locations.caPools.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
      x-stackQL-resource: ca_pools_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: privateca.projects.locations.caPools.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: ca_pools_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}:fetchCaCerts':
    parameters: *ref_1
    post:
      description: FetchCaCerts returns the current trust anchor for the CaPool. This will include CA certificate chains for all ACTIVE CertificateAuthority resources in the CaPool.
      operationId: privateca.projects.locations.caPools.fetchCaCerts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FetchCaCertsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchCaCertsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
      x-stackQL-resource: ca_pools_ca_certs
      x-stackQL-method: fetch_ca_certs
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}':
    parameters: *ref_1
    get:
      description: Returns a CertificateRevocationList.
      operationId: privateca.projects.locations.caPools.certificateAuthorities.certificateRevocationLists.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateRevocationList'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
        - in: path
          name: certificateRevocationListsId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificate_revocation_lists
      x-stackQL-method: get
      x-stackQL-verb: exec
    patch:
      description: Update a CertificateRevocationList.
      operationId: privateca.projects.locations.caPools.certificateAuthorities.certificateRevocationLists.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateRevocationList'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
        - in: path
          name: certificateRevocationListsId
          required: true
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: certificate_revocation_lists
      x-stackQL-method: patch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}:setIamPolicy':
    parameters: *ref_1
    post:
      description: 'Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.'
      operationId: privateca.projects.locations.caPools.certificateAuthorities.certificateRevocationLists.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
        - in: path
          name: certificateRevocationListsId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificate_revocation_lists_iam_policies
      x-stackQL-method: set_iam_policy
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists':
    parameters: *ref_1
    get:
      description: Lists CertificateRevocationLists.
      operationId: privateca.projects.locations.caPools.certificateAuthorities.certificateRevocationLists.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCertificateRevocationListsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: certificate_revocation_lists
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.certificateRevocationLists
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}:testIamPermissions':
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: privateca.projects.locations.caPools.certificateAuthorities.certificateRevocationLists.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
        - in: path
          name: certificateRevocationListsId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificate_revocation_lists_iam_policies
      x-stackQL-method: test_iam_permissions
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}/certificateRevocationLists/{certificateRevocationListsId}:getIamPolicy':
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: privateca.projects.locations.caPools.certificateAuthorities.certificateRevocationLists.getIamPolicy
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
        - in: path
          name: certificateRevocationListsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: certificate_revocation_lists_iam_policies
      x-stackQL-method: get_iam_policy
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}:fetch':
    parameters: *ref_1
    get:
      description: 'Fetch a certificate signing request (CSR) from a CertificateAuthority that is in state AWAITING_USER_ACTIVATION and is of type SUBORDINATE. The CSR must then be signed by the desired parent Certificate Authority, which could be another CertificateAuthority resource, or could be an on-prem certificate authority. See also ActivateCertificateAuthority.'
      operationId: privateca.projects.locations.caPools.certificateAuthorities.fetch
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchCertificateAuthorityCsrResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificate_authorities
      x-stackQL-method: fetch
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}:enable':
    parameters: *ref_1
    post:
      description: Enable a CertificateAuthority.
      operationId: privateca.projects.locations.caPools.certificateAuthorities.enable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnableCertificateAuthorityRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificate_authorities
      x-stackQL-method: enable
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}':
    parameters: *ref_1
    delete:
      description: Delete a CertificateAuthority.
      operationId: privateca.projects.locations.caPools.certificateAuthorities.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
        - in: query
          name: skipGracePeriod
          schema:
            type: boolean
        - in: query
          name: ignoreDependentResources
          schema:
            type: boolean
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: ignoreActiveCertificates
          schema:
            type: boolean
      x-stackQL-resource: certificate_authorities
      x-stackQL-method: delete
      x-stackQL-verb: delete
    patch:
      description: Update a CertificateAuthority.
      operationId: privateca.projects.locations.caPools.certificateAuthorities.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateAuthority'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: certificate_authorities
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Returns a CertificateAuthority.
      operationId: privateca.projects.locations.caPools.certificateAuthorities.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateAuthority'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificate_authorities
      x-stackQL-method: get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}:undelete':
    parameters: *ref_1
    post:
      description: Undelete a CertificateAuthority that has been deleted.
      operationId: privateca.projects.locations.caPools.certificateAuthorities.undelete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UndeleteCertificateAuthorityRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificate_authorities
      x-stackQL-method: undelete
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}:disable':
    parameters: *ref_1
    post:
      description: Disable a CertificateAuthority.
      operationId: privateca.projects.locations.caPools.certificateAuthorities.disable
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisableCertificateAuthorityRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificate_authorities
      x-stackQL-method: disable
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities':
    parameters: *ref_1
    get:
      description: Lists CertificateAuthorities.
      operationId: privateca.projects.locations.caPools.certificateAuthorities.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCertificateAuthoritiesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
      x-stackQL-resource: certificate_authorities
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.certificateAuthorities
    post:
      description: Create a new CertificateAuthority in a given Project and Location.
      operationId: privateca.projects.locations.caPools.certificateAuthorities.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateAuthority'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: certificateAuthorityId
          schema:
            type: string
      x-stackQL-resource: certificate_authorities
      x-stackQL-method: create
      x-stackQL-verb: insert
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificateAuthorities/{certificateAuthoritiesId}:activate':
    parameters: *ref_1
    post:
      description: 'Activate a CertificateAuthority that is in state AWAITING_USER_ACTIVATION and is of type SUBORDINATE. After the parent Certificate Authority signs a certificate signing request from FetchCertificateAuthorityCsr, this method can complete the activation process.'
      operationId: privateca.projects.locations.caPools.certificateAuthorities.activate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActivateCertificateAuthorityRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificateAuthoritiesId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificate_authorities
      x-stackQL-method: activate
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificates':
    parameters: *ref_1
    post:
      description: 'Create a new Certificate in a given Project, Location from a particular CaPool.'
      operationId: privateca.projects.locations.caPools.certificates.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: query
          name: issuingCertificateAuthorityId
          schema:
            type: string
        - in: query
          name: validateOnly
          schema:
            type: boolean
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: certificateId
          schema:
            type: string
      x-stackQL-resource: certificates
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: Lists Certificates.
      operationId: privateca.projects.locations.caPools.certificates.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListCertificatesResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: certificates
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.certificates
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificates/{certificatesId}':
    parameters: *ref_1
    patch:
      description: 'Update a Certificate. Currently, the only field you can update is the labels field.'
      operationId: privateca.projects.locations.caPools.certificates.patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Certificate'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificatesId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: updateMask
          schema:
            type: string
      x-stackQL-resource: certificates
      x-stackQL-method: patch
      x-stackQL-verb: exec
    get:
      description: Returns a Certificate.
      operationId: privateca.projects.locations.caPools.certificates.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificatesId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificates
      x-stackQL-method: get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/caPools/{caPoolsId}/certificates/{certificatesId}:revoke':
    parameters: *ref_1
    post:
      description: Revoke a Certificate.
      operationId: privateca.projects.locations.caPools.certificates.revoke
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeCertificateRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: caPoolsId
          required: true
          schema:
            type: string
        - in: path
          name: certificatesId
          required: true
          schema:
            type: string
      x-stackQL-resource: certificates
      x-stackQL-method: revoke
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations':
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: privateca.projects.locations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.locations
  '/v1/projects/{projectsId}/locations/{locationsId}':
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: privateca.projects.locations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: get
      x-stackQL-verb: exec
