openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Batch API
  description: An API to manage the running of batch jobs on Google Cloud Platform.
  version: v1
  x-discovery-doc-revision: '20230726'
  x-generated-date: '2023-08-10'
externalDocs:
  url: 'https://cloud.google.com/batch/'
servers:
  - url: 'https://batch.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    ListTasksResponse:
      type: object
      description: ListTasks Response.
      properties:
        unreachable:
          description: Locations that could not be reached.
          items:
            type: string
          type: array
        tasks:
          items:
            $ref: '#/components/schemas/Task'
          description: Tasks.
          type: array
        nextPageToken:
          description: Next page token.
          type: string
      id: ListTasksResponse
    GCS:
      type: object
      properties:
        remotePath:
          type: string
          description: 'Remote path, either a bucket name or a subdirectory of a bucket, e.g.: bucket_name, bucket_name/subdirectory/'
      description: Represents a Google Cloud Storage volume.
      id: GCS
    InstancePolicy:
      properties:
        provisioningModel:
          description: The provisioning model.
          type: string
          enum:
            - PROVISIONING_MODEL_UNSPECIFIED
            - STANDARD
            - SPOT
            - PREEMPTIBLE
          enumDescriptions:
            - Unspecified.
            - Standard VM.
            - SPOT VM.
            - 'Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible VM instances: the old preemptible VM model (indicated by this field) is the older model, and has been migrated to use the SPOT model as the underlying technology. This old model will still be supported.'
        bootDisk:
          $ref: '#/components/schemas/Disk'
          description: Boot disk to be created and attached to each VM by this InstancePolicy. Boot disk will be deleted when the VM is deleted. Batch API now only supports booting from image.
        disks:
          items:
            $ref: '#/components/schemas/AttachedDisk'
          description: Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the VM is deleted. A non bootable disk is a disk that can be of a device with a file system or a raw storage drive that is not ready for data storage and accessing.
          type: array
        machineType:
          description: The Compute Engine machine type.
          type: string
        accelerators:
          description: The accelerators attached to each VM instance.
          items:
            $ref: '#/components/schemas/Accelerator'
          type: array
        minCpuPlatform:
          description: 'The minimum CPU platform. See https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.'
          type: string
      type: object
      id: InstancePolicy
      description: InstancePolicy describes an instance type and resources attached to each VM created by this InstancePolicy.
    InstancePolicyOrTemplate:
      id: InstancePolicyOrTemplate
      description: 'InstancePolicyOrTemplate lets you define the type of resources to use for this job either with an InstancePolicy or an instance template. If undefined, Batch picks the type of VM to use and doesn''t include optional VM resources such as GPUs and extra disks.'
      type: object
      properties:
        policy:
          $ref: '#/components/schemas/InstancePolicy'
          description: InstancePolicy.
        instanceTemplate:
          type: string
          description: Name of an instance template used to create VMs. Named the field as 'instance_template' instead of 'template' to avoid c++ keyword conflict.
        installGpuDrivers:
          type: boolean
          description: 'Set this field true if users want Batch to help fetch drivers from a third party location and install them for GPUs specified in policy.accelerators or instance_template on their behalf. Default is false. For Container-Optimized Image cases, Batch will install the accelerator driver following milestones of https://cloud.google.com/container-optimized-os/docs/release-notes. For non Container-Optimized Image cases, following https://github.com/GoogleCloudPlatform/compute-gpu-installation/blob/main/linux/install_gpu_driver.py.'
    Task:
      properties:
        name:
          type: string
          description: 'Task name. The name is generated from the parent TaskGroup name and ''id'' field. For example: "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01/tasks/task01".'
        status:
          $ref: '#/components/schemas/TaskStatus'
          description: Task Status.
      id: Task
      type: object
      description: A Cloud Batch task.
    Barrier:
      id: Barrier
      type: object
      properties:
        name:
          description: 'Barriers are identified by their index in runnable list. Names are not required, but if present should be an identifier.'
          type: string
      description: Barrier runnable blocks until all tasks in a taskgroup reach it.
    ActionCondition:
      id: ActionCondition
      properties:
        exitCodes:
          items:
            type: integer
            format: int32
          type: array
          description: 'Exit codes of a task execution. If there are more than 1 exit codes, when task executes with any of the exit code in the list, the condition is met and the action will be executed.'
      type: object
      description: Conditions for actions to deal with task failures.
    LocationPolicy:
      properties:
        allowedLocations:
          type: array
          items:
            type: string
          description: 'A list of allowed location names represented by internal URLs. Each location can be a region or a zone. Only one region or multiple zones in one region is supported now. For example, ["regions/us-central1"] allow VMs in any zones in region us-central1. ["zones/us-central1-a", "zones/us-central1-c"] only allow VMs in zones us-central1-a and us-central1-c. All locations end up in different regions would cause errors. For example, ["regions/us-central1", "zones/us-central1-a", "zones/us-central1-b", "zones/us-west1-a"] contains 2 regions "us-central1" and "us-west1". An error is expected in this case.'
      id: LocationPolicy
      type: object
    Job:
      description: The Cloud Batch Job description.
      properties:
        status:
          readOnly: true
          $ref: '#/components/schemas/JobStatus'
          description: Output only. Job status. It is read only for users.
        createTime:
          readOnly: true
          type: string
          format: google-datetime
          description: Output only. When the Job was created.
        logsPolicy:
          description: Log preservation policy for the Job.
          $ref: '#/components/schemas/LogsPolicy'
        taskGroups:
          description: Required. TaskGroups in the Job. Only one TaskGroup is supported now.
          items:
            $ref: '#/components/schemas/TaskGroup'
          type: array
        name:
          readOnly: true
          type: string
          description: 'Output only. Job name. For example: "projects/123456/locations/us-central1/jobs/job01".'
        updateTime:
          description: Output only. The last time the Job was updated.
          type: string
          readOnly: true
          format: google-datetime
        notifications:
          description: Notification configurations.
          type: array
          items:
            $ref: '#/components/schemas/JobNotification'
        labels:
          description: 'Labels for the Job. Labels could be user provided or system generated. For example, "labels": { "department": "finance", "environment": "test" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.'
          type: object
          additionalProperties:
            type: string
        priority:
          format: int64
          description: 'Priority of the Job. The valid value range is [0, 100). Default value is 0. Higher value indicates higher priority. A job with higher priority value is more likely to run earlier if all other requirements are satisfied.'
          type: string
        allocationPolicy:
          $ref: '#/components/schemas/AllocationPolicy'
          description: Compute resource allocation for all TaskGroups in the Job.
        uid:
          readOnly: true
          type: string
          description: Output only. A system generated unique ID (in UUID4 format) for the Job.
      id: Job
      type: object
    NetworkInterface:
      id: NetworkInterface
      description: A network interface.
      properties:
        network:
          type: string
          description: 'The URL of an existing network resource. You can specify the network as a full or partial URL. For example, the following are all valid URLs: https://www.googleapis.com/compute/v1/projects/project/global/networks/network projects/project/global/networks/network global/networks/network '
        noExternalIpAddress:
          description: 'Default is false (with an external IP address). Required if no external public IP address is attached to the VM. If no external public IP address, additional configuration is required to allow the VM to access Google Services. See https://cloud.google.com/vpc/docs/configure-private-google-access and https://cloud.google.com/nat/docs/gce-example#create-nat for more information.'
          type: boolean
        subnetwork:
          description: 'The URL of an existing subnetwork resource in the network. You can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: https://www.googleapis.com/compute/v1/projects/project/regions/region/subnetworks/subnetwork projects/project/regions/region/subnetworks/subnetwork regions/region/subnetworks/subnetwork '
          type: string
      type: object
    Accelerator:
      properties:
        type:
          description: 'The accelerator type. For example, "nvidia-tesla-t4". See `gcloud compute accelerator-types list`.'
          type: string
        count:
          format: int64
          description: The number of accelerators of this type.
          type: string
        installGpuDrivers:
          type: boolean
          description: 'Deprecated: please use instances[0].install_gpu_drivers instead.'
          deprecated: true
        driverVersion:
          type: string
          description: 'Optional. The NVIDIA GPU driver version that should be installed for this type. You can define the specific driver version such as "470.103.01", following the driver version requirements in https://cloud.google.com/compute/docs/gpus/install-drivers-gpu#minimum-driver. Batch will install the specific accelerator driver if qualified.'
      type: object
      description: Accelerator describes Compute Engine accelerators to be attached to the VM.
      id: Accelerator
    TaskGroupStatus:
      description: Aggregated task status for a TaskGroup.
      properties:
        counts:
          description: Count of task in each state in the TaskGroup. The map key is task state name.
          additionalProperties:
            format: int64
            type: string
          type: object
        instances:
          description: Status of instances allocated for the TaskGroup.
          type: array
          items:
            $ref: '#/components/schemas/InstanceStatus'
      type: object
      id: TaskGroupStatus
    InstanceStatus:
      id: InstanceStatus
      description: VM instance status.
      properties:
        provisioningModel:
          enum:
            - PROVISIONING_MODEL_UNSPECIFIED
            - STANDARD
            - SPOT
            - PREEMPTIBLE
          enumDescriptions:
            - Unspecified.
            - Standard VM.
            - SPOT VM.
            - 'Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible VM instances: the old preemptible VM model (indicated by this field) is the older model, and has been migrated to use the SPOT model as the underlying technology. This old model will still be supported.'
          description: The VM instance provisioning model.
          type: string
        taskPack:
          format: int64
          description: The max number of tasks can be assigned to this instance type.
          type: string
        bootDisk:
          description: The VM boot disk.
          $ref: '#/components/schemas/Disk'
        machineType:
          type: string
          description: The Compute Engine machine type.
      type: object
    TaskSpec:
      type: object
      properties:
        environments:
          description: 'Deprecated: please use environment(non-plural) instead.'
          deprecated: true
          type: object
          additionalProperties:
            type: string
        maxRetryCount:
          type: integer
          format: int32
          description: 'Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].'
        volumes:
          items:
            $ref: '#/components/schemas/Volume'
          description: Volumes to mount before running Tasks using this TaskSpec.
          type: array
        runnables:
          description: 'The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures.'
          type: array
          items:
            $ref: '#/components/schemas/Runnable'
        maxRunDuration:
          type: string
          description: Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.
          format: google-duration
        environment:
          description: Environment variables to set before running the Task.
          $ref: '#/components/schemas/Environment'
        computeResource:
          $ref: '#/components/schemas/ComputeResource'
          description: ComputeResource requirements.
        lifecyclePolicies:
          description: 'Lifecycle management schema when any task in a task group is failed. Currently we only support one lifecycle policy. When the lifecycle policy condition is met, the action in the policy will execute. If task execution result does not meet with the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.'
          items:
            $ref: '#/components/schemas/LifecyclePolicy'
          type: array
      id: TaskSpec
      description: Spec of a task
    LifecyclePolicy:
      properties:
        actionCondition:
          $ref: '#/components/schemas/ActionCondition'
          description: Conditions that decide why a task failure is dealt with a specific action.
        action:
          description: 'Action to execute when ActionCondition is true. When RETRY_TASK is specified, we will retry failed tasks if we notice any exit code match and fail tasks if no match is found. Likewise, when FAIL_TASK is specified, we will fail tasks if we notice any exit code match and retry tasks if no match is found.'
          type: string
          enumDescriptions:
            - Action unspecified.
            - Action that tasks in the group will be scheduled to re-execute.
            - Action that tasks in the group will be stopped immediately.
          enum:
            - ACTION_UNSPECIFIED
            - RETRY_TASK
            - FAIL_TASK
      description: LifecyclePolicy describes how to deal with task failures based on different conditions.
      type: object
      id: LifecyclePolicy
    Status:
      properties:
        details:
          items:
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
            type: object
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          type: array
        code:
          description: 'The status code, which should be an enum value of google.rpc.Code.'
          format: int32
          type: integer
        message:
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
          type: string
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      type: object
      id: Status
    AgentTaskSpec:
      type: object
      properties:
        environment:
          description: Environment variables to set before running the Task.
          $ref: '#/components/schemas/AgentEnvironment'
        runnables:
          type: array
          description: AgentTaskRunnable is runanbles that will be executed on the agent.
          items:
            $ref: '#/components/schemas/AgentTaskRunnable'
        maxRunDuration:
          format: google-duration
          description: Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.
          type: string
      id: AgentTaskSpec
      description: AgentTaskSpec is the user's TaskSpec representation between Agent and CLH communication.
    AgentScript:
      id: AgentScript
      type: object
      description: Script runnable representation on the agent side.
      properties:
        path:
          description: 'Script file path on the host VM. To specify an interpreter, please add a `#!`(also known as [shebang line](https://en.wikipedia.org/wiki/Shebang_(Unix))) as the first line of the file.(For example, to execute the script using bash, `#!/bin/bash` should be the first line of the file. To execute the script using`Python3`, `#!/usr/bin/env python3` should be the first line of the file.) Otherwise, the file will by default be excuted by `/bin/sh`.'
          type: string
        text:
          type: string
          description: 'Shell script text. To specify an interpreter, please add a `#!\n` at the beginning of the text.(For example, to execute the script using bash, `#!/bin/bash\n` should be added. To execute the script using`Python3`, `#!/usr/bin/env python3\n` should be added.) Otherwise, the script will by default be excuted by `/bin/sh`.'
    AllocationPolicy:
      description: 'A Job''s resource allocation policy describes when, where, and how compute resources should be allocated for the Job.'
      properties:
        instances:
          type: array
          description: 'Describe instances that can be created by this AllocationPolicy. Only instances[0] is supported now.'
          items:
            $ref: '#/components/schemas/InstancePolicyOrTemplate'
        serviceAccount:
          description: Service account that VMs will run as.
          $ref: '#/components/schemas/ServiceAccount'
        placement:
          $ref: '#/components/schemas/PlacementPolicy'
          description: The placement policy.
        location:
          $ref: '#/components/schemas/LocationPolicy'
          description: Location where compute resources should be allocated for the Job.
        labels:
          type: object
          additionalProperties:
            type: string
          description: 'Labels applied to all VM instances and other resources created by AllocationPolicy. Labels could be user provided or system generated. You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.'
        network:
          $ref: '#/components/schemas/NetworkPolicy'
          description: The network policy.
      type: object
      id: AllocationPolicy
    LogsPolicy:
      description: LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be preserved.
      type: object
      properties:
        logsPath:
          type: string
          description: 'The path to which logs are saved when the destination = PATH. This can be a local file path on the VM, or under the mount point of a Persistent Disk or Filestore, or a Cloud Storage path.'
        destination:
          description: Where logs should be saved.
          enum:
            - DESTINATION_UNSPECIFIED
            - CLOUD_LOGGING
            - PATH
          enumDescriptions:
            - Logs are not preserved.
            - Logs are streamed to Cloud Logging.
            - Logs are saved to a file path.
          type: string
      id: LogsPolicy
    ReportAgentStateResponse:
      properties:
        tasks:
          items:
            $ref: '#/components/schemas/AgentTask'
          description: Tasks assigned to the agent
          type: array
        minReportInterval:
          type: string
          description: Minimum report interval override
          format: google-duration
        defaultReportInterval:
          type: string
          description: Default report interval override
          format: google-duration
      id: ReportAgentStateResponse
      type: object
      description: Response to ReportAgentStateRequest.
    Script:
      description: Script runnable.
      id: Script
      type: object
      properties:
        text:
          description: 'Shell script text. To specify an interpreter, please add a `#!\n` at the beginning of the text.(For example, to execute the script using bash, `#!/bin/bash\n` should be added. To execute the script using`Python3`, `#!/usr/bin/env python3\n` should be added.) Otherwise, the script will by default be excuted by `/bin/sh`.'
          type: string
        path:
          type: string
          description: 'Script file path on the host VM. To specify an interpreter, please add a `#!`(also known as [shebang line](https://en.wikipedia.org/wiki/Shebang_(Unix))) as the first line of the file.(For example, to execute the script using bash, `#!/bin/bash` should be the first line of the file. To execute the script using`Python3`, `#!/usr/bin/env python3` should be the first line of the file.) Otherwise, the file will by default be excuted by `/bin/sh`.'
    ServiceAccount:
      properties:
        scopes:
          type: array
          description: 'List of scopes to be enabled for this service account on the VM, in addition to the cloud-platform API scope that will be added by default.'
          items:
            type: string
        email:
          type: string
          description: 'Email address of the service account. If not specified, the default Compute Engine service account for the project will be used. If instance template is being used, the service account has to be specified in the instance template and it has to match the email field here.'
      id: ServiceAccount
      type: object
      description: Carries information about a Google Cloud service account.
    ReportAgentStateRequest:
      description: Request to report agent's state. The Request itself implies the agent is healthy.
      type: object
      id: ReportAgentStateRequest
      properties:
        agentInfo:
          description: Agent info.
          $ref: '#/components/schemas/AgentInfo'
        agentTimingInfo:
          description: Agent timing info.
          $ref: '#/components/schemas/AgentTimingInfo'
        metadata:
          $ref: '#/components/schemas/AgentMetadata'
          description: Agent metadata.
    Location:
      properties:
        metadata:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: Service-specific metadata. For example the available capacity at the given location.
          type: object
        name:
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
          type: string
        labels:
          type: object
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
          additionalProperties:
            type: string
        locationId:
          type: string
          description: 'The canonical id for this location. For example: `"us-east1"`.'
        displayName:
          type: string
          description: 'The friendly name for this location, typically a nearby city name. For example, "Tokyo".'
      type: object
      description: A resource that represents a Google Cloud location.
      id: Location
    AgentTask:
      type: object
      id: AgentTask
      properties:
        agentTaskSpec:
          description: AgentTaskSpec is the taskSpec representation between Agent and CLH communication. This field will replace the TaskSpec field above in future to have a better separation between user-facaing API and internal API.
          $ref: '#/components/schemas/AgentTaskSpec'
        spec:
          $ref: '#/components/schemas/TaskSpec'
          description: Task Spec. This field will be replaced by agent_task_spec below in future.
        intendedState:
          enumDescriptions:
            - Unspecified state.
            - Assigned state (includes running and finished).
            - The agent should cancel the execution of this task.
            - 'Delete task from agent storage, stop reporting its state.'
          enum:
            - INTENDED_STATE_UNSPECIFIED
            - ASSIGNED
            - CANCELLED
            - DELETED
          type: string
          description: The intended state of the task.
        task:
          type: string
          description: Task name.
        status:
          $ref: '#/components/schemas/TaskStatus'
          description: Task status.
        reachedBarrier:
          description: The highest barrier reached by all tasks in the task's TaskGroup.
          type: string
          format: int64
        taskSource:
          description: TaskSource represents the source of the task.
          enumDescriptions:
            - Unspecified task source.
            - 'The AgentTask from this source is generated by Batch server. E.g. all the VMActions are from this source. When Batch Agent execute AgentTask from BATCH_INTERNAL, it will log stdout/err with "batch_agent_logs" log name.'
            - 'The AgentTask from this source is provided by Batch users. When Batch Agent execute AgentTask from USER, it will log stdout/err with "batch_task_logs" log name.'
          type: string
          enum:
            - TASK_SOURCE_UNSPECIFIED
            - BATCH_INTERNAL
            - USER
      description: TODO(b/182501497) The message needs to be redefined when the Agent API server updates data in storage per the backend design.
    Runnable:
      id: Runnable
      type: object
      description: Runnable describes instructions for executing a specific script or container as part of a Task.
      properties:
        labels:
          additionalProperties:
            type: string
          type: object
          description: Labels for this Runnable.
        barrier:
          description: Barrier runnable.
          $ref: '#/components/schemas/Barrier'
        timeout:
          description: Timeout for this Runnable.
          format: google-duration
          type: string
        alwaysRun:
          description: 'By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task''s overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.'
          type: boolean
        environment:
          description: Environment variables for this Runnable (overrides variables set for the whole Task or TaskGroup).
          $ref: '#/components/schemas/Environment'
        script:
          $ref: '#/components/schemas/Script'
          description: Script runnable.
        background:
          type: boolean
          description: This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).
        container:
          description: Container runnable.
          $ref: '#/components/schemas/Container'
        ignoreExitStatus:
          description: 'Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.'
          type: boolean
    StatusEvent:
      properties:
        taskState:
          description: Task State
          enumDescriptions:
            - Unknown state.
            - The Task is created and waiting for resources.
            - The Task is assigned to at least one VM.
            - The Task is running.
            - The Task has failed.
            - The Task has succeeded.
            - The Task has not been executed when the Job finishes.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - ASSIGNED
            - RUNNING
            - FAILED
            - SUCCEEDED
            - UNEXECUTED
        eventTime:
          type: string
          format: google-datetime
          description: The time this event occurred.
        type:
          type: string
          description: Type of the event.
        description:
          type: string
          description: Description of the event.
        taskExecution:
          description: Task Execution
          $ref: '#/components/schemas/TaskExecution'
      id: StatusEvent
      type: object
      description: Status event
    AgentTaskRunnable:
      type: object
      properties:
        ignoreExitStatus:
          description: 'Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.'
          type: boolean
        environment:
          description: Environment variables for this Runnable (overrides variables set for the whole Task or TaskGroup).
          $ref: '#/components/schemas/AgentEnvironment'
        script:
          description: Script runnable.
          $ref: '#/components/schemas/AgentScript'
        alwaysRun:
          description: 'By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task''s overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.'
          type: boolean
        container:
          $ref: '#/components/schemas/AgentContainer'
          description: Container runnable.
        timeout:
          format: google-duration
          type: string
          description: Timeout for this Runnable.
        background:
          description: This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).
          type: boolean
      description: AgentTaskRunnable is the Runnable representation between Agent and CLH communication.
      id: AgentTaskRunnable
    Disk:
      id: Disk
      description: 'A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. See https://cloud.google.com/compute/docs/disks#pdspecs and https://cloud.google.com/compute/docs/disks#localssds.'
      properties:
        sizeGb:
          type: string
          description: 'Disk size in GB. For persistent disk, this field is ignored if `data_source` is `image` or `snapshot`. For local SSD, size_gb should be a multiple of 375GB, otherwise, the final size will be the next greater multiple of 375 GB. For boot disk, Batch will calculate the boot disk size based on source image and task requirements if you do not speicify the size. If both this field and the boot_disk_mib field in task spec''s compute_resource are defined, Batch will only honor this field.'
          format: int64
        image:
          type: string
          description: 'Name of an image used as the data source. For example, the following are all valid URLs: * Specify the image by its family name: projects/project/global/images/family/image_family * Specify the image version: projects/project/global/images/image_version You can also use Batch customized image in short names. The following image values are supported for a boot disk: * `batch-debian`: use Batch Debian images. * `batch-centos`: use Batch CentOS images. * `batch-cos`: use Batch Container-Optimized images. * `batch-hpc-centos`: use Batch HPC CentOS images.'
        diskInterface:
          type: string
          description: 'Local SSDs are available through both "SCSI" and "NVMe" interfaces. If not indicated, "NVMe" will be the default one for local ssds. We only support "SCSI" for persistent disks now.'
        type:
          type: string
          description: 'Disk type as shown in `gcloud compute disk-types list`. For example, local SSD uses type "local-ssd". Persistent disks and boot disks use "pd-balanced", "pd-extreme", "pd-ssd" or "pd-standard".'
        snapshot:
          description: Name of a snapshot used as the data source. Snapshot is not supported as boot disk now.
          type: string
      type: object
    AgentKMSEnvMap:
      type: object
      properties:
        keyName:
          type: string
          description: The name of the KMS key that will be used to decrypt the cipher text.
        cipherText:
          type: string
          description: The value of the cipherText response from the `encrypt` method.
      id: AgentKMSEnvMap
      description: AgentKMSEnvMap contains the encrypted key/value pair to be used in the environment on the Agent side.
    Message:
      properties:
        newTaskState:
          description: The new task state.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - ASSIGNED
            - RUNNING
            - FAILED
            - SUCCEEDED
            - UNEXECUTED
          enumDescriptions:
            - Unknown state.
            - The Task is created and waiting for resources.
            - The Task is assigned to at least one VM.
            - The Task is running.
            - The Task has failed.
            - The Task has succeeded.
            - The Task has not been executed when the Job finishes.
        newJobState:
          enumDescriptions:
            - Job state unspecified.
            - Job is admitted (validated and persisted) and waiting for resources.
            - Job is scheduled to run as soon as resource allocation is ready. The resource allocation may happen at a later time but with a high chance to succeed.
            - Resource allocation has been successful. At least one Task in the Job is RUNNING.
            - All Tasks in the Job have finished successfully.
            - At least one Task in the Job has failed.
            - 'The Job will be deleted, but has not been deleted yet. Typically this is because resources used by the Job are still being cleaned up.'
          type: string
          description: The new job state.
          enum:
            - STATE_UNSPECIFIED
            - QUEUED
            - SCHEDULED
            - RUNNING
            - SUCCEEDED
            - FAILED
            - DELETION_IN_PROGRESS
        type:
          description: The message type.
          type: string
          enum:
            - TYPE_UNSPECIFIED
            - JOB_STATE_CHANGED
            - TASK_STATE_CHANGED
          enumDescriptions:
            - Unspecified.
            - Notify users that the job state has changed.
            - Notify users that the task state has changed.
      description: 'Message details. Describe the conditions under which messages will be sent. If no attribute is defined, no message will be sent by default. One message should specify either the job or the task level attributes, but not both. For example, job level: JOB_STATE_CHANGED and/or a specified new_job_state; task level: TASK_STATE_CHANGED and/or a specified new_task_state.'
      id: Message
      type: object
    JobNotification:
      properties:
        message:
          description: 'The attribute requirements of messages to be sent to this Pub/Sub topic. Without this field, no message will be sent.'
          $ref: '#/components/schemas/Message'
        pubsubTopic:
          description: 'The Pub/Sub topic where notifications like the job state changes will be published. The topic must exist in the same project as the job and billings will be charged to this project. If not specified, no Pub/Sub messages will be sent. Topic format: `projects/{project}/topics/{topic}`.'
          type: string
      description: Notification configurations.
      id: JobNotification
      type: object
    CancelOperationRequest:
      description: The request message for Operations.CancelOperation.
      properties: {}
      id: CancelOperationRequest
      type: object
    TaskExecution:
      type: object
      properties:
        exitCode:
          description: 'When task is completed as the status of FAILED or SUCCEEDED, exit code is for one task execution result, default is 0 as success.'
          type: integer
          format: int32
      id: TaskExecution
      description: 'This Task Execution field includes detail information for task execution procedures, based on StatusEvent types.'
    ListOperationsResponse:
      description: The response message for Operations.ListOperations.
      properties:
        operations:
          items:
            $ref: '#/components/schemas/Operation'
          type: array
          description: A list of operations that matches the specified filter in the request.
        nextPageToken:
          type: string
          description: The standard List next-page token.
      type: object
      id: ListOperationsResponse
    Volume:
      type: object
      properties:
        mountOptions:
          description: 'For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except writing are supported. This is due to restrictions of multi-writer mode (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached disks and Network File System (NFS), mount options are these supported by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html).'
          type: array
          items:
            type: string
        gcs:
          $ref: '#/components/schemas/GCS'
          description: A Google Cloud Storage (GCS) volume.
        mountPath:
          type: string
          description: 'The mount path for the volume, e.g. /mnt/disks/share.'
        nfs:
          $ref: '#/components/schemas/NFS'
          description: 'A Network File System (NFS) volume. For example, a Filestore file share.'
        deviceName:
          description: 'Device name of an attached disk volume, which should align with a device_name specified by job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance template in job.allocation_policy.instances[0].instance_template.'
          type: string
      id: Volume
      description: Volume describes a volume and parameters for it to be mounted to a VM.
    NFS:
      description: Represents an NFS volume.
      id: NFS
      type: object
      properties:
        remotePath:
          description: 'Remote source path exported from the NFS, e.g., "/share".'
          type: string
        server:
          type: string
          description: The IP address of the NFS.
    TaskGroup:
      description: A TaskGroup defines one or more Tasks that all share the same TaskSpec.
      type: object
      properties:
        name:
          type: string
          description: 'Output only. TaskGroup name. The system generates this field based on parent Job name. For example: "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01".'
          readOnly: true
        taskEnvironments:
          items:
            $ref: '#/components/schemas/Environment'
          type: array
          description: 'An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task''s parent TaskGroup, and the specific Task''s index in the TaskGroup (0 through BATCH_TASK_COUNT - 1).'
        taskCountPerNode:
          format: int64
          description: 'Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements.'
          type: string
        taskSpec:
          $ref: '#/components/schemas/TaskSpec'
          description: Required. Tasks in the group share the same task spec.
        permissiveSsh:
          description: 'When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup.'
          type: boolean
        schedulingPolicy:
          type: string
          enum:
            - SCHEDULING_POLICY_UNSPECIFIED
            - AS_SOON_AS_POSSIBLE
            - IN_ORDER
          enumDescriptions:
            - Unspecified.
            - Run Tasks as soon as resources are available. Tasks might be executed in parallel depending on parallelism and task_count values.
            - Run Tasks sequentially with increased task index.
          description: Scheduling policy for Tasks in the TaskGroup. The default value is AS_SOON_AS_POSSIBLE.
        taskCount:
          type: string
          format: int64
          description: Number of Tasks in the TaskGroup. Default is 1.
        parallelism:
          format: int64
          description: 'Max number of tasks that can run in parallel. Default to min(task_count, 1000). Field parallelism must be 1 if the scheduling_policy is IN_ORDER.'
          type: string
        requireHostsFile:
          description: 'When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false.'
          type: boolean
      id: TaskGroup
    AgentTimingInfo:
      properties:
        bootTime:
          type: string
          format: google-datetime
          description: Boot timestamp of the VM OS
        agentStartupTime:
          description: Agent startup time
          type: string
          format: google-datetime
        scriptStartupTime:
          description: Startup time of the Batch VM script.
          type: string
          format: google-datetime
      description: VM timing information
      id: AgentTimingInfo
      type: object
    Container:
      properties:
        entrypoint:
          type: string
          description: Overrides the `ENTRYPOINT` specified in the container.
        volumes:
          description: 'Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run''s --volume option, e.g. /foo:/bar, or /foo:/bar:ro'
          items:
            type: string
          type: array
        options:
          type: string
          description: 'Arbitrary additional options to include in the "docker run" command when running this container, e.g. "--network host".'
        imageUri:
          description: The URI to pull the container image from.
          type: string
        username:
          description: Optional username for logging in to a docker registry. If username matches `projects/*/secrets/*/versions/*` then Batch will read the username from the Secret Manager.
          type: string
        commands:
          description: Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.
          type: array
          items:
            type: string
        password:
          description: Optional password for logging in to a docker registry. If password matches `projects/*/secrets/*/versions/*` then Batch will read the password from the Secret Manager;
          type: string
        blockExternalNetwork:
          description: 'If set to true, external network access to and from container will be blocked, containers that are with block_external_network as true can still communicate with each other, network cannot be specified in the `container.options` field.'
          type: boolean
      description: Container runnable.
      id: Container
      type: object
    PlacementPolicy:
      id: PlacementPolicy
      description: PlacementPolicy describes a group placement policy for the VMs controlled by this AllocationPolicy.
      properties:
        maxDistance:
          format: int64
          type: string
          description: 'When specified, causes the job to fail if more than max_distance logical switches are required between VMs. Batch uses the most compact possible placement of VMs even when max_distance is not specified. An explicit max_distance makes that level of compactness a strict requirement. Not yet implemented'
        collocation:
          type: string
          description: UNSPECIFIED vs. COLLOCATED (default UNSPECIFIED). Use COLLOCATED when you want VMs to be located close to each other for low network latency between the VMs. No placement policy will be generated when collocation is UNSPECIFIED.
      type: object
    KMSEnvMap:
      id: KMSEnvMap
      type: object
      properties:
        cipherText:
          type: string
          description: The value of the cipherText response from the `encrypt` method.
        keyName:
          type: string
          description: The name of the KMS key that will be used to decrypt the cipher text.
    NetworkPolicy:
      type: object
      description: NetworkPolicy describes VM instance network configurations.
      properties:
        networkInterfaces:
          items:
            $ref: '#/components/schemas/NetworkInterface'
          type: array
          description: Network configurations.
      id: NetworkPolicy
    AgentInfo:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/AgentTaskInfo'
          description: Task Info.
        reportTime:
          format: google-datetime
          description: When the AgentInfo is generated.
          type: string
        taskGroupId:
          description: The assigned task group ID.
          type: string
        state:
          enumDescriptions:
            - Unspecified state.
            - The agent is starting on the VM instance.
            - The agent is running. The agent in the RUNNING state can never go back to the STARTING state.
            - 'The agent has stopped, either on request or due to a failure.'
          description: Agent state.
          type: string
          enum:
            - AGENT_STATE_UNSPECIFIED
            - AGENT_STARTING
            - AGENT_RUNNING
            - AGENT_STOPPED
        jobId:
          description: Optional. The assigned Job ID
          type: string
      id: AgentInfo
      description: VM Agent Info.
    ListLocationsResponse:
      id: ListLocationsResponse
      description: The response message for Locations.ListLocations.
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        locations:
          items:
            $ref: '#/components/schemas/Location'
          description: A list of locations that matches the specified filter in the request.
          type: array
      type: object
    JobStatus:
      description: Job status.
      properties:
        runDuration:
          type: string
          format: google-duration
          description: The duration of time that the Job spent in status RUNNING.
        state:
          type: string
          enum:
            - STATE_UNSPECIFIED
            - QUEUED
            - SCHEDULED
            - RUNNING
            - SUCCEEDED
            - FAILED
            - DELETION_IN_PROGRESS
          description: Job state
          enumDescriptions:
            - Job state unspecified.
            - Job is admitted (validated and persisted) and waiting for resources.
            - Job is scheduled to run as soon as resource allocation is ready. The resource allocation may happen at a later time but with a high chance to succeed.
            - Resource allocation has been successful. At least one Task in the Job is RUNNING.
            - All Tasks in the Job have finished successfully.
            - At least one Task in the Job has failed.
            - 'The Job will be deleted, but has not been deleted yet. Typically this is because resources used by the Job are still being cleaned up.'
        statusEvents:
          description: Job status events
          type: array
          items:
            $ref: '#/components/schemas/StatusEvent'
        taskGroups:
          additionalProperties:
            $ref: '#/components/schemas/TaskGroupStatus'
          type: object
          description: Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID.
      type: object
      id: JobStatus
    Empty:
      id: Empty
      type: object
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      properties: {}
    AttachedDisk:
      id: AttachedDisk
      description: A new or an existing persistent disk (PD) or a local ssd attached to a VM instance.
      type: object
      properties:
        newDisk:
          $ref: '#/components/schemas/Disk'
        deviceName:
          type: string
          description: 'Device name that the guest operating system will see. It is used by Runnable.volumes field to mount disks. So please specify the device_name if you want Batch to help mount the disk, and it should match the device_name field in volumes.'
        existingDisk:
          description: Name of an existing PD.
          type: string
    AgentTaskInfo:
      description: Task Info
      type: object
      properties:
        taskStatus:
          description: The status of the Task. If we need agent specific fields we should fork the public TaskStatus into an agent specific one. Or add them below.
          $ref: '#/components/schemas/TaskStatus'
        taskId:
          description: ID of the Task
          type: string
        runnable:
          format: int64
          description: The highest index of a runnable started by the agent for this task. The runnables are indexed from 1. Value 0 is undefined.
          type: string
      id: AgentTaskInfo
    ListJobsResponse:
      description: ListJob Response.
      id: ListJobsResponse
      type: object
      properties:
        unreachable:
          type: array
          items:
            type: string
          description: Locations that could not be reached.
        nextPageToken:
          type: string
          description: Next page token.
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
          description: Jobs.
    ComputeResource:
      properties:
        bootDiskMib:
          description: Extra boot disk size in MiB for each task.
          type: string
          format: int64
        cpuMilli:
          format: int64
          type: string
          description: 'The milliCPU count. `cpuMilli` defines the amount of CPU resources per task in milliCPU units. For example, `1000` corresponds to 1 vCPU per task. If undefined, the default value is `2000`. If you also define the VM''s machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the CPU resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 2 vCPUs each, you are recommended to set `cpuMilli` no more than `2000`, or you are recommended to run two tasks on the same VM if you set `cpuMilli` to `1000` or less.'
        memoryMib:
          format: int64
          type: string
          description: 'Memory in MiB. `memoryMib` defines the amount of memory per task in MiB units. If undefined, the default value is `2000`. If you also define the VM''s machine type using the `machineType` in [InstancePolicy](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicy) field or inside the `instanceTemplate` in the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure the memory resources for both fields are compatible with each other and with how many tasks you want to allow to run on the same VM at the same time. For example, if you specify the `n2-standard-2` machine type, which has 8 GiB each, you are recommended to set `memoryMib` to no more than `8192`, or you are recommended to run two tasks on the same VM if you set `memoryMib` to `4096` or less.'
      id: ComputeResource
      type: object
      description: 'Compute resource requirements. ComputeResource defines the amount of resources required for each task. Make sure your tasks have enough resources to successfully run. If you also define the types of resources for a job to use with the [InstancePolicyOrTemplate](https://cloud.google.com/batch/docs/reference/rest/v1/projects.locations.jobs#instancepolicyortemplate) field, make sure both fields are compatible with each other.'
    AgentEnvironment:
      type: object
      properties:
        encryptedVariables:
          $ref: '#/components/schemas/AgentKMSEnvMap'
          description: An encrypted JSON dictionary where the key/value pairs correspond to environment variable names and their values.
        variables:
          additionalProperties:
            type: string
          description: A map of environment variable names to values.
          type: object
        secretVariables:
          description: A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable.
          type: object
          additionalProperties:
            type: string
      id: AgentEnvironment
      description: AgentEnvironment is the Environment representation between Agent and CLH communication. The environment is used in both task level and agent level.
    Environment:
      id: Environment
      type: object
      properties:
        variables:
          type: object
          description: A map of environment variable names to values.
          additionalProperties:
            type: string
        encryptedVariables:
          description: An encrypted JSON dictionary where the key/value pairs correspond to environment variable names and their values.
          $ref: '#/components/schemas/KMSEnvMap'
        secretVariables:
          description: A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable.
          additionalProperties:
            type: string
          type: object
      description: An Environment describes a collection of environment variables to set when executing Tasks.
    AgentContainer:
      properties:
        commands:
          items:
            type: string
          description: Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.
          type: array
        imageUri:
          type: string
          description: The URI to pull the container image from.
        entrypoint:
          type: string
          description: Overrides the `ENTRYPOINT` specified in the container.
        volumes:
          items:
            type: string
          type: array
          description: 'Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run''s --volume option, e.g. /foo:/bar, or /foo:/bar:ro'
        options:
          description: 'Arbitrary additional options to include in the "docker run" command when running this container, e.g. "--network host".'
          type: string
      description: Container runnable representation on the agent side.
      type: object
      id: AgentContainer
    Operation:
      id: Operation
      properties:
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
          description: 'The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.'
        name:
          description: 'The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.'
          type: string
        error:
          $ref: '#/components/schemas/Status'
          description: The error result of the operation in case of failure or cancellation.
        done:
          type: boolean
          description: 'If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.'
        metadata:
          description: 'Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.'
          type: object
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
      type: object
      description: This resource represents a long-running operation that is the result of a network API call.
    OperationMetadata:
      type: object
      description: Represents the metadata of the long-running operation.
      properties:
        requestedCancellation:
          readOnly: true
          type: boolean
          description: 'Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
        target:
          type: string
          readOnly: true
          description: Output only. Server-defined resource path for the target of the operation.
        apiVersion:
          description: Output only. API version used to start the operation.
          type: string
          readOnly: true
        statusMessage:
          type: string
          readOnly: true
          description: 'Output only. Human-readable status of the operation, if any.'
        endTime:
          description: Output only. The time the operation finished running.
          type: string
          readOnly: true
          format: google-datetime
        createTime:
          format: google-datetime
          readOnly: true
          type: string
          description: Output only. The time the operation was created.
        verb:
          type: string
          readOnly: true
          description: Output only. Name of the verb executed by the operation.
      id: OperationMetadata
    TaskStatus:
      id: TaskStatus
      type: object
      properties:
        state:
          description: Task state
          enumDescriptions:
            - Unknown state.
            - The Task is created and waiting for resources.
            - The Task is assigned to at least one VM.
            - The Task is running.
            - The Task has failed.
            - The Task has succeeded.
            - The Task has not been executed when the Job finishes.
          type: string
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - ASSIGNED
            - RUNNING
            - FAILED
            - SUCCEEDED
            - UNEXECUTED
        statusEvents:
          items:
            $ref: '#/components/schemas/StatusEvent'
          type: array
          description: Detailed info about why the state is reached.
      description: Status of a task
    AgentMetadata:
      properties:
        instanceId:
          description: GCP instance ID (go/instance-id).
          type: string
          format: uint64
        creationTime:
          format: google-datetime
          description: When the VM agent started. Use agent_startup_time instead.
          deprecated: true
          type: string
        imageVersion:
          type: string
          description: image version for the VM that this agent is installed on.
        instancePreemptionNoticeReceived:
          type: boolean
          description: If the GCP instance has received preemption notice.
        instance:
          description: GCP instance name (go/instance-name).
          type: string
        zone:
          description: Agent zone.
          type: string
        osRelease:
          description: parsed contents of /etc/os-release
          type: object
          additionalProperties:
            type: string
        version:
          description: agent binary version running on VM
          type: string
        creator:
          description: 'Full name of the entity that created this vm. For MIG, this path is: projects/{project}/regions/{region}/InstanceGroupManagers/{igm} The value is retrieved from the vm metadata key of "created-by".'
          type: string
      type: object
      description: VM Agent Metadata.
      id: AgentMetadata
  parameters:
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
  x-stackQL-resources:
    locations:
      id: google.batch.locations
      name: locations
      title: Locations
      methods:
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.locations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/list'
        insert: []
        update: []
        delete: []
    tasks:
      id: google.batch.tasks
      name: tasks
      title: Tasks
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}~1taskGroups~1{taskGroupsId}~1tasks~1{tasksId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}~1taskGroups~1{taskGroupsId}~1tasks/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.tasks
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}~1taskGroups~1{taskGroupsId}~1tasks/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tasks/methods/get'
          - $ref: '#/components/x-stackQL-resources/tasks/methods/list'
        insert: []
        update: []
        delete: []
    jobs:
      id: google.batch.jobs
      name: jobs
      title: Jobs
      methods:
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.jobs
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/list'
        insert:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/delete'
    operations:
      id: google.batch.operations
      name: operations
      title: Operations
      methods:
        delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: $.operations
        _list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/delete'
    state:
      id: google.batch.state
      name: state
      title: State
      methods:
        report:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1state:report/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
paths:
  '/v1/projects/{projectsId}/locations':
    parameters: &ref_1
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/uploadType'
    get:
      description: Lists information about the supported locations for this service.
      operationId: batch.projects.locations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: locations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.locations
  '/v1/projects/{projectsId}/locations/{locationsId}':
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: batch.projects.locations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-method: get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}/taskGroups/{taskGroupsId}/tasks/{tasksId}':
    parameters: *ref_1
    get:
      description: Return a single Task.
      operationId: batch.projects.locations.jobs.taskGroups.tasks.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
        - in: path
          name: taskGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: tasksId
          required: true
          schema:
            type: string
      x-stackQL-resource: tasks
      x-stackQL-method: get
      x-stackQL-verb: select
  '/v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}/taskGroups/{taskGroupsId}/tasks':
    parameters: *ref_1
    get:
      description: List Tasks associated with a job.
      operationId: batch.projects.locations.jobs.taskGroups.tasks.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTasksResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
        - in: path
          name: taskGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: tasks
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.tasks
  '/v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}':
    parameters: *ref_1
    get:
      description: Get a Job specified by its resource name.
      operationId: batch.projects.locations.jobs.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
      x-stackQL-resource: jobs
      x-stackQL-method: get
      x-stackQL-verb: exec
    delete:
      description: Delete a Job.
      operationId: batch.projects.locations.jobs.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: reason
          schema:
            type: string
      x-stackQL-resource: jobs
      x-stackQL-method: delete
      x-stackQL-verb: delete
  '/v1/projects/{projectsId}/locations/{locationsId}/jobs':
    parameters: *ref_1
    post:
      description: Create a Job.
      operationId: batch.projects.locations.jobs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
        - in: query
          name: jobId
          schema:
            type: string
      x-stackQL-resource: jobs
      x-stackQL-method: create
      x-stackQL-verb: insert
    get:
      description: List all Jobs for a project within a region.
      operationId: batch.projects.locations.jobs.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListJobsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: orderBy
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: jobs
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.jobs
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}':
    parameters: *ref_1
    delete:
      description: 'Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.'
      operationId: batch.projects.locations.operations.delete
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: delete
      x-stackQL-verb: delete
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: batch.projects.locations.operations.get
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: get
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel':
    parameters: *ref_1
    post:
      description: 'Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn''t support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.'
      operationId: batch.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: cancel
      x-stackQL-verb: exec
  '/v1/projects/{projectsId}/locations/{locationsId}/operations':
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`.'
      operationId: batch.projects.locations.operations.list
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-method: list
      x-stackQL-verb: select
      x-stackQL-objectKey: $.operations
  '/v1/projects/{projectsId}/locations/{locationsId}/state:report':
    parameters: *ref_1
    post:
      description: 'Report agent''s state, e.g. agent status and tasks information'
      operationId: batch.projects.locations.state.report
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportAgentStateRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportAgentStateResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: state
      x-stackQL-method: report
      x-stackQL-verb: exec
