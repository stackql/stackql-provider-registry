openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Batch API
  description: An API to manage the running of batch jobs on Google Cloud Platform.
  version: v1
  x-discovery-doc-revision: '20221212'
  x-generated-date: '2023-01-06'
externalDocs:
  url: https://cloud.google.com/batch/
servers:
  - url: https://batch.googleapis.com
components:
  schemas:
    ServiceAccount:
      description: Carries information about a Google Cloud service account.
      type: object
      properties:
        email:
          description: Email address of the service account. If not specified, the default Compute Engine service account for the project will be used. If instance template is being used, the service account has to be specified in the instance template and it has to match the email field here.
          type: string
      id: ServiceAccount
    Message:
      type: object
      description: Message details. Describe the attribute that a message should have. Without specified message attributes, no message will be sent by default.
      id: Message
      properties:
        type:
          enum:
            - TYPE_UNSPECIFIED
            - JOB_STATE_CHANGED
            - TASK_STATE_CHANGED
          enumDescriptions:
            - Unspecified.
            - Notify users that the job state has changed.
            - Notify users that the task state has changed.
          type: string
          description: The message type.
        newJobState:
          type: string
          enumDescriptions:
            - ''
            - Job is admitted (validated and persisted) and waiting for resources.
            - Job is scheduled to run as soon as resource allocation is ready. The resource allocation may happen at a later time but with a high chance to succeed.
            - Resource allocation has been successful. At least one Task in the Job is RUNNING.
            - All Tasks in the Job have finished successfully.
            - At least one Task in the Job has failed.
            - The Job will be deleted, but has not been deleted yet. Typically this is because resources used by the Job are still being cleaned up.
          description: The new job state.
          enum:
            - STATE_UNSPECIFIED
            - QUEUED
            - SCHEDULED
            - RUNNING
            - SUCCEEDED
            - FAILED
            - DELETION_IN_PROGRESS
        newTaskState:
          type: string
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - ASSIGNED
            - RUNNING
            - FAILED
            - SUCCEEDED
          description: The new task state.
          enumDescriptions:
            - unknown state
            - The Task is created and waiting for resources.
            - The Task is assigned to at least one VM.
            - The Task is running.
            - The Task has failed.
            - The Task has succeeded.
    NFS:
      id: NFS
      properties:
        server:
          description: The IP address of the NFS.
          type: string
        remotePath:
          description: Remote source path exported from the NFS, e.g., "/share".
          type: string
      description: Represents an NFS volume.
      type: object
    AllocationPolicy:
      type: object
      description: A Job's resource allocation policy describes when, where, and how compute resources should be allocated for the Job.
      properties:
        network:
          description: The network policy.
          $ref: '#/components/schemas/NetworkPolicy'
        labels:
          type: object
          description: Labels applied to all VM instances and other resources created by AllocationPolicy. Labels could be user provided or system generated. You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.
          additionalProperties:
            type: string
        serviceAccount:
          $ref: '#/components/schemas/ServiceAccount'
          description: Service account that VMs will run as.
        location:
          $ref: '#/components/schemas/LocationPolicy'
          description: Location where compute resources should be allocated for the Job.
        instances:
          description: Describe instances that can be created by this AllocationPolicy. Only instances[0] is supported now.
          type: array
          items:
            $ref: '#/components/schemas/InstancePolicyOrTemplate'
      id: AllocationPolicy
    Runnable:
      type: object
      id: Runnable
      description: Runnable describes instructions for executing a specific script or container as part of a Task.
      properties:
        container:
          description: Container runnable.
          $ref: '#/components/schemas/Container'
        barrier:
          $ref: '#/components/schemas/Barrier'
          description: Barrier runnable.
        ignoreExitStatus:
          type: boolean
          description: Normally, a non-zero exit status causes the Task to fail. This flag allows execution of other Runnables to continue instead.
        timeout:
          type: string
          format: google-duration
          description: Timeout for this Runnable.
        environment:
          $ref: '#/components/schemas/Environment'
          description: Environment variables for this Runnable (overrides variables set for the whole Task or TaskGroup).
        alwaysRun:
          description: By default, after a Runnable fails, no further Runnable are executed. This flag indicates that this Runnable must be run even if the Task has already failed. This is useful for Runnables that copy output files off of the VM or for debugging. The always_run flag does not override the Task's overall max_run_duration. If the max_run_duration has expired then no further Runnables will execute, not even always_run Runnables.
          type: boolean
        script:
          $ref: '#/components/schemas/Script'
          description: Script runnable.
        background:
          description: This flag allows a Runnable to continue running in the background while the Task executes subsequent Runnables. This is useful to provide services to other Runnables (or to provide debugging support tools like SSH servers).
          type: boolean
    AgentTimingInfo:
      description: VM timing information
      id: AgentTimingInfo
      type: object
      properties:
        bootTime:
          format: google-datetime
          description: Boot timestamp of the VM OS
          type: string
        agentStartupTime:
          format: google-datetime
          description: Agent startup time
          type: string
        scriptStartupTime:
          type: string
          description: Startup time of the Batch VM script.
          format: google-datetime
    Expr:
      id: Expr
      description: 'Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != ''private'' && document.type != ''internal''" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "''New message received at '' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.'
      properties:
        location:
          type: string
          description: Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
        description:
          type: string
          description: Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
        title:
          type: string
          description: Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
        expression:
          description: Textual representation of an expression in Common Expression Language syntax.
          type: string
      type: object
    StatusEvent:
      id: StatusEvent
      description: Status event
      type: object
      properties:
        description:
          description: Description of the event.
          type: string
        eventTime:
          type: string
          format: google-datetime
          description: The time this event occurred.
        type:
          description: Type of the event.
          type: string
        taskExecution:
          description: Task Execution
          $ref: '#/components/schemas/TaskExecution'
    Job:
      id: Job
      description: The Cloud Batch Job description.
      properties:
        createTime:
          description: Output only. When the Job was created.
          type: string
          format: google-datetime
          readOnly: true
        allocationPolicy:
          $ref: '#/components/schemas/AllocationPolicy'
          description: Compute resource allocation for all TaskGroups in the Job.
        uid:
          readOnly: true
          type: string
          description: Output only. A system generated unique ID (in UUID4 format) for the Job.
        taskGroups:
          description: Required. TaskGroups in the Job. Only one TaskGroup is supported now.
          type: array
          items:
            $ref: '#/components/schemas/TaskGroup'
        notifications:
          items:
            $ref: '#/components/schemas/JobNotification'
          description: Notification configurations.
          type: array
        labels:
          type: object
          description: 'Labels for the Job. Labels could be user provided or system generated. For example, "labels": { "department": "finance", "environment": "test" } You can assign up to 64 labels. [Google Compute Engine label restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) apply. Label names that start with "goog-" or "google-" are reserved.'
          additionalProperties:
            type: string
        logsPolicy:
          $ref: '#/components/schemas/LogsPolicy'
          description: Log preservation policy for the Job.
        updateTime:
          format: google-datetime
          readOnly: true
          type: string
          description: Output only. The last time the Job was updated.
        name:
          description: 'Output only. Job name. For example: "projects/123456/locations/us-central1/jobs/job01".'
          type: string
          readOnly: true
        priority:
          description: Priority of the Job. The valid value range is [0, 100). A job with higher priority value is more likely to run earlier if all other requirements are satisfied.
          format: int64
          type: string
        status:
          readOnly: true
          $ref: '#/components/schemas/JobStatus'
          description: Output only. Job status. It is read only for users.
      type: object
    ListTasksResponse:
      id: ListTasksResponse
      description: ListTasks Response.
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
          description: Tasks.
        unreachable:
          items:
            type: string
          type: array
          description: Locations that could not be reached.
        nextPageToken:
          type: string
          description: Next page token.
      type: object
    Policy:
      id: Policy
      description: 'An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp(''2020-10-01T00:00:00.000Z'')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp(''2020-10-01T00:00:00.000Z'') etag: BwWWja0YfJA= version: 3 For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).'
      properties:
        bindings:
          description: Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
          items:
            $ref: '#/components/schemas/Binding'
          type: array
        auditConfigs:
          type: array
          description: Specifies cloud audit logging configuration for this policy.
          items:
            $ref: '#/components/schemas/AuditConfig'
        version:
          type: integer
          format: int32
          description: 'Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).'
        etag:
          format: byte
          type: string
          description: '`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.'
      type: object
    SetIamPolicyRequest:
      type: object
      description: Request message for `SetIamPolicy` method.
      id: SetIamPolicyRequest
      properties:
        policy:
          description: 'REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.'
          $ref: '#/components/schemas/Policy'
        updateMask:
          description: 'OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`'
          type: string
          format: google-fieldmask
    InstancePolicyOrTemplate:
      id: InstancePolicyOrTemplate
      properties:
        installGpuDrivers:
          description: Set this field true if users want Batch to help fetch drivers from a third party location and install them for GPUs specified in policy.accelerators or instance_template on their behalf. Default is false.
          type: boolean
        policy:
          description: InstancePolicy.
          $ref: '#/components/schemas/InstancePolicy'
        instanceTemplate:
          description: Name of an instance template used to create VMs. Named the field as 'instance_template' instead of 'template' to avoid c++ keyword conflict.
          type: string
      description: Either an InstancePolicy or an instance template.
      type: object
    Accelerator:
      type: object
      properties:
        count:
          type: string
          description: The number of accelerators of this type.
          format: int64
        installGpuDrivers:
          description: 'Deprecated: please use instances[0].install_gpu_drivers instead.'
          type: boolean
        type:
          description: The accelerator type. For example, "nvidia-tesla-t4". See `gcloud compute accelerator-types list`.
          type: string
      id: Accelerator
      description: Accelerator describes Compute Engine accelerators to be attached to the VM.
    LocationPolicy:
      properties:
        allowedLocations:
          description: A list of allowed location names represented by internal URLs. Each location can be a region or a zone. Only one region or multiple zones in one region is supported now. For example, ["regions/us-central1"] allow VMs in any zones in region us-central1. ["zones/us-central1-a", "zones/us-central1-c"] only allow VMs in zones us-central1-a and us-central1-c. All locations end up in different regions would cause errors. For example, ["regions/us-central1", "zones/us-central1-a", "zones/us-central1-b", "zones/us-west1-a"] contains 2 regions "us-central1" and "us-west1". An error is expected in this case.
          items:
            type: string
          type: array
      type: object
      id: LocationPolicy
    Empty:
      properties: {}
      id: Empty
      description: 'A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }'
      type: object
    AttachedDisk:
      description: A new or an existing persistent disk (PD) or a local ssd attached to a VM instance.
      id: AttachedDisk
      properties:
        deviceName:
          description: Device name that the guest operating system will see. It is used by Runnable.volumes field to mount disks. So please specify the device_name if you want Batch to help mount the disk, and it should match the device_name field in volumes.
          type: string
        existingDisk:
          type: string
          description: Name of an existing PD.
        newDisk:
          $ref: '#/components/schemas/Disk'
      type: object
    Environment:
      id: Environment
      description: An Environment describes a collection of environment variables to set when executing Tasks.
      type: object
      properties:
        encryptedVariables:
          $ref: '#/components/schemas/KMSEnvMap'
          description: An encrypted JSON dictionary where the key/value pairs correspond to environment variable names and their values.
        variables:
          description: A map of environment variable names to values.
          type: object
          additionalProperties:
            type: string
        secretVariables:
          additionalProperties:
            type: string
          description: A map of environment variable names to Secret Manager secret names. The VM will access the named secrets to set the value of each environment variable.
          type: object
    Operation:
      properties:
        metadata:
          description: Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          type: object
        name:
          type: string
          description: The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
        response:
          additionalProperties:
            description: Properties of the object. Contains field @type with type URL.
            type: any
          description: The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
          type: object
        done:
          description: If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
          type: boolean
        error:
          $ref: '#/components/schemas/Status'
          description: The error result of the operation in case of failure or cancellation.
      description: This resource represents a long-running operation that is the result of a network API call.
      id: Operation
      type: object
    Task:
      id: Task
      type: object
      description: A Cloud Batch task.
      properties:
        status:
          description: Task Status.
          $ref: '#/components/schemas/TaskStatus'
        name:
          description: 'Task name. The name is generated from the parent TaskGroup name and ''id'' field. For example: "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01/tasks/task01".'
          type: string
    Barrier:
      description: Barrier runnable blocks until all tasks in a taskgroup reach it.
      properties:
        name:
          description: Barriers are identified by their index in runnable list. Names are not required, but if present should be an identifier.
          type: string
      type: object
      id: Barrier
    LifecyclePolicy:
      description: LifecyclePolicy describes how to deal with task failures based on different conditions.
      type: object
      id: LifecyclePolicy
      properties:
        action:
          enum:
            - ACTION_UNSPECIFIED
            - RETRY_TASK
            - FAIL_TASK
          type: string
          description: Action to execute when ActionCondition is true.
          enumDescriptions:
            - Action unspecified.
            - Action that tasks in the group will be scheduled to re-execute.
            - Action that tasks in the group will be stopped immediately.
        actionCondition:
          $ref: '#/components/schemas/ActionCondition'
          description: Conditions that decide why a task failure is dealt with a specific action.
    AgentInfo:
      description: VM Agent Info.
      id: AgentInfo
      properties:
        tasks:
          type: array
          description: Task Info.
          items:
            $ref: '#/components/schemas/AgentTaskInfo'
        reportTime:
          type: string
          description: When the AgentInfo is generated.
          format: google-datetime
        state:
          type: string
          description: Agent state.
          enumDescriptions:
            - Unspecified state.
            - The agent is starting on the VM instance.
            - The agent is running. The agent in the RUNNING state can never go back to the STARTING state.
            - The agent has stopped, either on request or due to a failure.
          enum:
            - AGENT_STATE_UNSPECIFIED
            - AGENT_STARTING
            - AGENT_RUNNING
            - AGENT_STOPPED
        jobId:
          type: string
          description: The assigned Job ID
        taskGroupId:
          description: The assigned task group ID.
          type: string
      type: object
    Container:
      description: Container runnable.
      type: object
      properties:
        imageUri:
          description: The URI to pull the container image from.
          type: string
        volumes:
          description: Volumes to mount (bind mount) from the host machine files or directories into the container, formatted to match docker run's --volume option, e.g. /foo:/bar, or /foo:/bar:ro
          items:
            type: string
          type: array
        password:
          type: string
          description: Optional password for logging in to a docker registry. If password matches `projects/*/secrets/*/versions/*` then Batch will read the password from the Secret Manager;
        options:
          description: Arbitrary additional options to include in the "docker run" command when running this container, e.g. "--network host".
          type: string
        blockExternalNetwork:
          description: If set to true, external network access to and from container will be blocked. The container will use the default internal network 'goog-internal'.
          type: boolean
        commands:
          type: array
          description: Overrides the `CMD` specified in the container. If there is an ENTRYPOINT (either in the container image or with the entrypoint field below) then commands are appended as arguments to the ENTRYPOINT.
          items:
            type: string
        entrypoint:
          description: Overrides the `ENTRYPOINT` specified in the container.
          type: string
        username:
          type: string
          description: Optional username for logging in to a docker registry. If username matches `projects/*/secrets/*/versions/*` then Batch will read the username from the Secret Manager.
      id: Container
    GCS:
      id: GCS
      description: Represents a Google Cloud Storage volume.
      properties:
        remotePath:
          description: 'Remote path, either a bucket name or a subdirectory of a bucket, e.g.: bucket_name, bucket_name/subdirectory/'
          type: string
      type: object
    OperationMetadata:
      id: OperationMetadata
      type: object
      properties:
        requestedCancellation:
          readOnly: true
          description: Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
          type: boolean
        target:
          type: string
          readOnly: true
          description: Output only. Server-defined resource path for the target of the operation.
        endTime:
          type: string
          readOnly: true
          description: Output only. The time the operation finished running.
          format: google-datetime
        apiVersion:
          description: Output only. API version used to start the operation.
          readOnly: true
          type: string
        statusMessage:
          type: string
          readOnly: true
          description: Output only. Human-readable status of the operation, if any.
        verb:
          type: string
          description: Output only. Name of the verb executed by the operation.
          readOnly: true
        createTime:
          format: google-datetime
          type: string
          description: Output only. The time the operation was created.
          readOnly: true
      description: Represents the metadata of the long-running operation.
    Location:
      description: A resource that represents Google Cloud Platform location.
      id: Location
      type: object
      properties:
        name:
          type: string
          description: 'Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`'
        labels:
          additionalProperties:
            type: string
          description: 'Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}'
          type: object
        metadata:
          additionalProperties:
            type: any
            description: Properties of the object. Contains field @type with type URL.
          type: object
          description: Service-specific metadata. For example the available capacity at the given location.
        displayName:
          description: The friendly name for this location, typically a nearby city name. For example, "Tokyo".
          type: string
        locationId:
          type: string
          description: 'The canonical id for this location. For example: `"us-east1"`.'
    ReportAgentStateRequest:
      properties:
        agentInfo:
          $ref: '#/components/schemas/AgentInfo'
          description: Agent info.
        agentTimingInfo:
          description: Agent timing info.
          $ref: '#/components/schemas/AgentTimingInfo'
        metadata:
          $ref: '#/components/schemas/AgentMetadata'
          description: Agent metadata.
      type: object
      id: ReportAgentStateRequest
      description: Request to report agent's state. The Request itself implies the agent is healthy.
    TestIamPermissionsRequest:
      type: object
      description: Request message for `TestIamPermissions` method.
      properties:
        permissions:
          items:
            type: string
          type: array
          description: The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
      id: TestIamPermissionsRequest
    LogsPolicy:
      type: object
      properties:
        logsPath:
          description: The path to which logs are saved when the destination = PATH. This can be a local file path on the VM, or under the mount point of a Persistent Disk or Filestore, or a Cloud Storage path.
          type: string
        destination:
          type: string
          enum:
            - DESTINATION_UNSPECIFIED
            - CLOUD_LOGGING
            - PATH
          enumDescriptions:
            - Logs are not preserved.
            - Logs are streamed to Cloud Logging.
            - Logs are saved to a file path.
          description: Where logs should be saved.
      description: LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be preserved.
      id: LogsPolicy
    AgentTaskInfo:
      properties:
        taskStatus:
          description: The status of the Task. If we need agent specific fields we should fork the public TaskStatus into an agent specific one. Or add them below.
          $ref: '#/components/schemas/TaskStatus'
        taskId:
          type: string
          description: ID of the Task
        runnable:
          description: The highest index of a runnable started by the agent for this task. The runnables are indexed from 1. Value 0 is undefined.
          format: int64
          type: string
      id: AgentTaskInfo
      description: Task Info
      type: object
    ListLocationsResponse:
      description: The response message for Locations.ListLocations.
      type: object
      properties:
        nextPageToken:
          description: The standard List next-page token.
          type: string
        locations:
          type: array
          description: A list of locations that matches the specified filter in the request.
          items:
            $ref: '#/components/schemas/Location'
      id: ListLocationsResponse
    TaskSpec:
      description: Spec of a task
      properties:
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/Volume'
          description: Volumes to mount before running Tasks using this TaskSpec.
        runnables:
          description: The sequence of scripts or containers to run for this Task. Each Task using this TaskSpec executes its list of runnables in order. The Task succeeds if all of its runnables either exit with a zero status or any that exit with a non-zero status have the ignore_exit_status flag. Background runnables are killed automatically (if they have not already exited) a short time after all foreground runnables have completed. Even though this is likely to result in a non-zero exit status for the background runnable, these automatic kills are not treated as Task failures.
          items:
            $ref: '#/components/schemas/Runnable'
          type: array
        lifecyclePolicies:
          items:
            $ref: '#/components/schemas/LifecyclePolicy'
          description: Lifecycle management schema when any task in a task group is failed. The valid size of lifecycle policies are [0, 10]. For each lifecycle policy, when the condition is met, the action in that policy will execute. If there are multiple policies that the task execution result matches, we use the action from the first matched policy. If task execution result does not meet with any of the defined lifecycle policy, we consider it as the default policy. Default policy means if the exit code is 0, exit task. If task ends with non-zero exit code, retry the task with max_retry_count.
          type: array
        environments:
          type: object
          additionalProperties:
            type: string
          description: 'Deprecated: please use environment(non-plural) instead.'
        maxRunDuration:
          type: string
          description: Maximum duration the task should run. The task will be killed and marked as FAILED if over this limit.
          format: google-duration
        computeResource:
          $ref: '#/components/schemas/ComputeResource'
          description: ComputeResource requirements.
        maxRetryCount:
          format: int32
          type: integer
          description: Maximum number of retries on failures. The default, 0, which means never retry. The valid value range is [0, 10].
        environment:
          description: Environment variables to set before running the Task.
          $ref: '#/components/schemas/Environment'
      id: TaskSpec
      type: object
    ComputeResource:
      description: Compute resource requirements
      type: object
      id: ComputeResource
      properties:
        memoryMib:
          description: Memory in MiB.
          type: string
          format: int64
        bootDiskMib:
          type: string
          format: int64
          description: Extra boot disk size in MiB for each task.
        cpuMilli:
          format: int64
          description: The milliCPU count.
          type: string
    Disk:
      properties:
        image:
          description: Name of a public or custom image used as the data source.
          type: string
        snapshot:
          type: string
          description: Name of a snapshot used as the data source.
        sizeGb:
          format: int64
          type: string
          description: Disk size in GB. This field is ignored if `data_source` is `disk` or `image`. If `type` is `local-ssd`, size_gb should be a multiple of 375GB, otherwise, the final size will be the next greater multiple of 375 GB.
        type:
          description: Disk type as shown in `gcloud compute disk-types list` For example, "pd-ssd", "pd-standard", "pd-balanced", "local-ssd".
          type: string
        diskInterface:
          type: string
          description: Local SSDs are available through both "SCSI" and "NVMe" interfaces. If not indicated, "NVMe" will be the default one for local ssds. We only support "SCSI" for persistent disks now.
      description: A new persistent disk or a local ssd. A VM can only have one local SSD setting but multiple local SSD partitions. https://cloud.google.com/compute/docs/disks#pdspecs. https://cloud.google.com/compute/docs/disks#localssds.
      type: object
      id: Disk
    JobNotification:
      properties:
        pubsubTopic:
          type: string
          description: 'The Pub/Sub topic where notifications like the job state changes will be published. This topic exist in the same project as the job and billings will be charged to this project. If not specified, no Pub/Sub messages will be sent. Topic format: `projects/{project}/topics/{topic}`.'
        message:
          description: The attribute requirements of messages to be sent to this Pub/Sub topic. Without this field, no message will be sent.
          $ref: '#/components/schemas/Message'
      id: JobNotification
      description: Notification configurations.
      type: object
    KMSEnvMap:
      properties:
        cipherText:
          type: string
          description: The value of the cipherText response from the `encrypt` method.
        keyName:
          type: string
          description: The name of the KMS key that will be used to decrypt the cipher text.
      id: KMSEnvMap
      type: object
    ActionCondition:
      description: Conditions for actions to deal with task failures.
      properties:
        exitCodes:
          type: array
          description: Exit codes of a task execution. If there are more than 1 exit codes, when task executes with any of the exit code in the list, the condition is met and the action will be executed.
          items:
            type: integer
            format: int32
      id: ActionCondition
      type: object
    NetworkInterface:
      id: NetworkInterface
      type: object
      properties:
        noExternalIpAddress:
          description: Default is false (with an external IP address). Required if no external public IP address is attached to the VM. If no external public IP address, additional configuration is required to allow the VM to access Google Services. See https://cloud.google.com/vpc/docs/configure-private-google-access and https://cloud.google.com/nat/docs/gce-example#create-nat for more information.
          type: boolean
        subnetwork:
          type: string
          description: 'The URL of an existing subnetwork resource in the network. You can specify the subnetwork as a full or partial URL. For example, the following are all valid URLs: https://www.googleapis.com/compute/v1/projects/{project}/regions/{region}/subnetworks/{subnetwork} projects/{project}/regions/{region}/subnetworks/{subnetwork} regions/{region}/subnetworks/{subnetwork}'
        network:
          type: string
          description: 'The URL of an existing network resource. You can specify the network as a full or partial URL. For example, the following are all valid URLs: https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} projects/{project}/global/networks/{network} global/networks/{network}'
      description: A network interface.
    NetworkPolicy:
      properties:
        networkInterfaces:
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
          description: Network configurations.
      id: NetworkPolicy
      description: NetworkPolicy describes VM instance network configurations.
      type: object
    ListJobsResponse:
      properties:
        nextPageToken:
          description: Next page token.
          type: string
        unreachable:
          description: Locations that could not be reached.
          items:
            type: string
          type: array
        jobs:
          description: Jobs.
          type: array
          items:
            $ref: '#/components/schemas/Job'
      description: ListJob Response.
      type: object
      id: ListJobsResponse
    Volume:
      type: object
      properties:
        nfs:
          description: A Network File System (NFS) volume. For example, a Filestore file share.
          $ref: '#/components/schemas/NFS'
        mountPath:
          type: string
          description: The mount path for the volume, e.g. /mnt/disks/share.
        mountOptions:
          description: For Google Cloud Storage (GCS), mount options are the options supported by the gcsfuse tool (https://github.com/GoogleCloudPlatform/gcsfuse). For existing persistent disks, mount options provided by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html) except writing are supported. This is due to restrictions of multi-writer mode (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For other attached disks and Network File System (NFS), mount options are these supported by the mount command (https://man7.org/linux/man-pages/man8/mount.8.html).
          items:
            type: string
          type: array
        deviceName:
          description: Device name of an attached disk volume, which should align with a device_name specified by job.allocation_policy.instances[0].policy.disks[i].device_name or defined by the given instance template in job.allocation_policy.instances[0].instance_template.
          type: string
        gcs:
          $ref: '#/components/schemas/GCS'
          description: A Google Cloud Storage (GCS) volume.
      id: Volume
      description: Volume describes a volume and parameters for it to be mounted to a VM.
    InstanceStatus:
      description: VM instance status.
      properties:
        provisioningModel:
          enum:
            - PROVISIONING_MODEL_UNSPECIFIED
            - STANDARD
            - SPOT
            - PREEMPTIBLE
          description: The VM instance provisioning model.
          enumDescriptions:
            - Unspecified.
            - Standard VM.
            - SPOT VM.
            - 'Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible VM instances: the old preemptible VM model (indicated by this field) is the older model, and has been migrated to use the SPOT model as the underlying technology. This old model will still be supported.'
          type: string
        taskPack:
          format: int64
          type: string
          description: The max number of tasks can be assigned to this instance type.
        machineType:
          type: string
          description: The Compute Engine machine type.
      id: InstanceStatus
      type: object
    Script:
      description: Script runnable.
      id: Script
      type: object
      properties:
        text:
          description: Shell script text.
          type: string
        path:
          type: string
          description: Script file path on the host VM.
    AuditConfig:
      id: AuditConfig
      description: 'Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.'
      properties:
        service:
          description: Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
          type: string
        auditLogConfigs:
          items:
            $ref: '#/components/schemas/AuditLogConfig'
          description: The configuration for logging of each type of permission.
          type: array
      type: object
    TaskGroupStatus:
      type: object
      description: Aggregated task status for a TaskGroup.
      properties:
        counts:
          type: object
          additionalProperties:
            type: string
            format: int64
          description: Count of task in each state in the TaskGroup. The map key is task state name.
        instances:
          type: array
          items:
            $ref: '#/components/schemas/InstanceStatus'
          description: Status of instances allocated for the TaskGroup.
      id: TaskGroupStatus
    TestIamPermissionsResponse:
      id: TestIamPermissionsResponse
      description: Response message for `TestIamPermissions` method.
      type: object
      properties:
        permissions:
          items:
            type: string
          type: array
          description: A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
    AgentTask:
      properties:
        reachedBarrier:
          type: string
          description: The highest barrier reached by all tasks in the task's TaskGroup.
          format: int64
        task:
          type: string
          description: Task name.
        spec:
          $ref: '#/components/schemas/TaskSpec'
          description: Task Spec.
        intendedState:
          description: The intended state of the task.
          type: string
          enumDescriptions:
            - Unspecified state.
            - Assigned state (includes running and finished).
            - The agent should cancel the execution of this task.
            - Delete task from agent storage, stop reporting its state.
          enum:
            - INTENDED_STATE_UNSPECIFIED
            - ASSIGNED
            - CANCELLED
            - DELETED
        status:
          description: Task status.
          $ref: '#/components/schemas/TaskStatus'
      description: TODO(b/182501497) The message needs to be redefined when the Agent API server updates data in storage per the backend design.
      id: AgentTask
      type: object
    TaskStatus:
      type: object
      properties:
        statusEvents:
          items:
            $ref: '#/components/schemas/StatusEvent'
          type: array
          description: Detailed info about why the state is reached.
        state:
          enum:
            - STATE_UNSPECIFIED
            - PENDING
            - ASSIGNED
            - RUNNING
            - FAILED
            - SUCCEEDED
          enumDescriptions:
            - unknown state
            - The Task is created and waiting for resources.
            - The Task is assigned to at least one VM.
            - The Task is running.
            - The Task has failed.
            - The Task has succeeded.
          description: Task state
          type: string
      id: TaskStatus
      description: Status of a task
    Status:
      id: Status
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      type: object
      properties:
        code:
          type: integer
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
        details:
          items:
            type: object
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          type: array
    TaskExecution:
      properties:
        exitCode:
          type: integer
          description: When task is completed as the status of FAILED or SUCCEEDED, exit code is for one task execution result, default is 0 as success.
          format: int32
      id: TaskExecution
      description: This Task Execution field includes detail information for task execution procedures, based on StatusEvent types.
      type: object
    TaskGroup:
      properties:
        taskEnvironments:
          description: An array of environment variable mappings, which are passed to Tasks with matching indices. If task_environments is used then task_count should not be specified in the request (and will be ignored). Task count will be the length of task_environments. Tasks get a BATCH_TASK_INDEX and BATCH_TASK_COUNT environment variable, in addition to any environment variables set in task_environments, specifying the number of Tasks in the Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0 through BATCH_TASK_COUNT - 1). task_environments supports up to 200 entries.
          items:
            $ref: '#/components/schemas/Environment'
          type: array
        permissiveSsh:
          description: When true, Batch will configure SSH to allow passwordless login between VMs running the Batch tasks in the same TaskGroup.
          type: boolean
        requireHostsFile:
          description: When true, Batch will populate a file with a list of all VMs assigned to the TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of that file. Defaults to false.
          type: boolean
        taskCountPerNode:
          description: Max number of tasks that can be run on a VM at the same time. If not specified, the system will decide a value based on available compute resources on a VM and task requirements.
          type: string
          format: int64
        taskSpec:
          $ref: '#/components/schemas/TaskSpec'
          description: Required. Tasks in the group share the same task spec.
        name:
          type: string
          readOnly: true
          description: 'Output only. TaskGroup name. The system generates this field based on parent Job name. For example: "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01".'
        taskCount:
          type: string
          description: Number of Tasks in the TaskGroup. default is 1
          format: int64
        parallelism:
          description: Max number of tasks that can run in parallel. Default to min(task_count, 1000).
          format: int64
          type: string
      id: TaskGroup
      type: object
      description: A TaskGroup contains one or multiple Tasks that share the same Runnable but with different runtime parameters.
    AgentMetadata:
      type: object
      properties:
        instance:
          description: GCP instance name (go/instance-name).
          type: string
        creator:
          description: 'Full name of the entity that created this vm. For MIG, this path is: projects/{project}/regions/{region}/InstanceGroupManagers/{igm} The value is retrieved from the vm metadata key of "created-by".'
          type: string
        zone:
          type: string
          description: Agent zone.
        instanceId:
          format: uint64
          type: string
          description: GCP instance ID (go/instance-id).
        creationTime:
          type: string
          format: google-datetime
          description: When the VM agent started. Use agent_startup_time instead.
        version:
          type: string
          description: agent binary version running on VM
        imageVersion:
          type: string
          description: image version for the VM that this agent is installed on.
        instancePreemptionNoticeReceived:
          type: boolean
          description: If the GCP instance has received preemption notice.
        osRelease:
          additionalProperties:
            type: string
          description: parsed contents of /etc/os-release
          type: object
      id: AgentMetadata
      description: VM Agent Metadata.
    ReportAgentStateResponse:
      id: ReportAgentStateResponse
      description: Response to ReportAgentStateRequest.
      properties:
        tasks:
          items:
            $ref: '#/components/schemas/AgentTask'
          description: Tasks assigned to the agent
          type: array
        minReportInterval:
          type: string
          format: google-duration
          description: Minimum report interval override
        defaultReportInterval:
          type: string
          format: google-duration
          description: Default report interval override
      type: object
    JobStatus:
      type: object
      id: JobStatus
      description: Job status.
      properties:
        taskGroups:
          type: object
          description: Aggregated task status for each TaskGroup in the Job. The map key is TaskGroup ID.
          additionalProperties:
            $ref: '#/components/schemas/TaskGroupStatus'
        runDuration:
          format: google-duration
          type: string
          description: The duration of time that the Job spent in status RUNNING.
        state:
          enum:
            - STATE_UNSPECIFIED
            - QUEUED
            - SCHEDULED
            - RUNNING
            - SUCCEEDED
            - FAILED
            - DELETION_IN_PROGRESS
          description: Job state
          enumDescriptions:
            - ''
            - Job is admitted (validated and persisted) and waiting for resources.
            - Job is scheduled to run as soon as resource allocation is ready. The resource allocation may happen at a later time but with a high chance to succeed.
            - Resource allocation has been successful. At least one Task in the Job is RUNNING.
            - All Tasks in the Job have finished successfully.
            - At least one Task in the Job has failed.
            - The Job will be deleted, but has not been deleted yet. Typically this is because resources used by the Job are still being cleaned up.
          type: string
        statusEvents:
          type: array
          description: Job status events
          items:
            $ref: '#/components/schemas/StatusEvent'
    Binding:
      id: Binding
      type: object
      description: Associates `members`, or principals, with a `role`.
      properties:
        condition:
          $ref: '#/components/schemas/Expr'
          description: The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
        members:
          items:
            type: string
          description: 'Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. '
          type: array
        role:
          type: string
          description: Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
    AuditLogConfig:
      description: 'Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables ''DATA_READ'' and ''DATA_WRITE'' logging, while exempting jose@example.com from DATA_READ logging.'
      properties:
        logType:
          enumDescriptions:
            - Default case. Should never be this.
            - 'Admin reads. Example: CloudIAM getIamPolicy'
            - 'Data writes. Example: CloudSQL Users create'
            - 'Data reads. Example: CloudSQL Users list'
          type: string
          enum:
            - LOG_TYPE_UNSPECIFIED
            - ADMIN_READ
            - DATA_WRITE
            - DATA_READ
          description: The log type that this config enables.
        exemptedMembers:
          description: Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
          type: array
          items:
            type: string
      id: AuditLogConfig
      type: object
    InstancePolicy:
      id: InstancePolicy
      type: object
      properties:
        accelerators:
          description: The accelerators attached to each VM instance.
          items:
            $ref: '#/components/schemas/Accelerator'
          type: array
        disks:
          type: array
          items:
            $ref: '#/components/schemas/AttachedDisk'
          description: Non-boot disks to be attached for each VM created by this InstancePolicy. New disks will be deleted when the VM is deleted.
        machineType:
          description: The Compute Engine machine type.
          type: string
        minCpuPlatform:
          type: string
          description: The minimum CPU platform. See `https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform`. Not yet implemented.
        provisioningModel:
          type: string
          description: The provisioning model.
          enum:
            - PROVISIONING_MODEL_UNSPECIFIED
            - STANDARD
            - SPOT
            - PREEMPTIBLE
          enumDescriptions:
            - Unspecified.
            - Standard VM.
            - SPOT VM.
            - 'Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible VM instances: the old preemptible VM model (indicated by this field) is the older model, and has been migrated to use the SPOT model as the underlying technology. This old model will still be supported.'
      description: InstancePolicy describes an instance type and resources attached to each VM created by this InstancePolicy.
    ListOperationsResponse:
      id: ListOperationsResponse
      type: object
      description: The response message for Operations.ListOperations.
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/Operation'
          description: A list of operations that matches the specified filter in the request.
        nextPageToken:
          type: string
          description: The standard List next-page token.
    CancelOperationRequest:
      id: CancelOperationRequest
      type: object
      properties: {}
      description: The request message for Operations.CancelOperation.
  parameters:
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    key:
      description: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
      in: query
      name: key
      schema:
        type: string
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    quotaUser:
      description: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
      in: query
      name: quotaUser
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-platform: See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  x-stackQL-resources:
    tasks:
      id: google.batch.tasks
      name: tasks
      title: Tasks
      methods:
        projects_locations_jobs_taskGroups_tasks_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}~1taskGroups~1{taskGroupsId}~1tasks~1{tasksId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_jobs_taskGroups_tasks_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}~1taskGroups~1{taskGroupsId}~1tasks/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/tasks/methods/projects_locations_jobs_taskGroups_tasks_get'
          - $ref: '#/components/x-stackQL-resources/tasks/methods/projects_locations_jobs_taskGroups_tasks_list'
        insert: []
        update: []
        delete: []
    jobs:
      id: google.batch.jobs
      name: jobs
      title: Jobs
      methods:
        projects_locations_jobs_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_jobs_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_jobs_create:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_jobs_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/projects_locations_jobs_get'
          - $ref: '#/components/x-stackQL-resources/jobs/methods/projects_locations_jobs_list'
        insert:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/projects_locations_jobs_create'
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/jobs/methods/projects_locations_jobs_delete'
    jobs_iam_policies:
      id: google.batch.jobs_iam_policies
      name: jobs_iam_policies
      title: Jobs_iam_policies
      methods:
        projects_locations_jobs_setIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}:setIamPolicy/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_jobs_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_jobs_testIamPermissions:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}:testIamPermissions/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/jobs_iam_policies/methods/projects_locations_jobs_getIamPolicy'
        insert: []
        update: []
        delete: []
    operations:
      id: google.batch.operations
      name: operations
      title: Operations
      methods:
        projects_locations_operations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_delete:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}/delete'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_operations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: operations
        projects_locations_operations_cancel:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1operations~1{operationsId}:cancel/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_get'
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_list'
        insert: []
        update: []
        delete:
          - $ref: '#/components/x-stackQL-resources/operations/methods/projects_locations_operations_delete'
    state:
      id: google.batch.state
      name: state
      title: State
      methods:
        projects_locations_state_report:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1state:report/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
    locations:
      id: google.batch.locations
      name: locations
      title: Locations
      methods:
        projects_locations_get:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        projects_locations_list:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: locations
      sqlVerbs:
        select:
          - $ref: '#/components/x-stackQL-resources/locations/methods/projects_locations_get'
          - $ref: '#/components/x-stackQL-resources/locations/methods/projects_locations_list'
        insert: []
        update: []
        delete: []
    jobs_iam_bindings:
      id: google.batch.jobs_iam_bindings
      name: jobs_iam_bindings
      title: jobs_iam_bindings
      methods:
        projects_locations_jobs_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: bindings
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/jobs_iam_bindings/methods/projects_locations_jobs_getIamPolicy'
    jobs_iam_audit_configs:
      id: google.batch.jobs_iam_audit_configs
      name: jobs_iam_audit_configs
      title: jobs_iam_audit_configs
      methods:
        projects_locations_jobs_getIamPolicy:
          operation:
            $ref: '#/paths/~1v1~1projects~1{projectsId}~1locations~1{locationsId}~1jobs~1{jobsId}:getIamPolicy/get'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
            objectKey: auditConfigs
      sqlVerbs:
        insert: []
        update: []
        delete: []
        select:
          - $ref: '#/components/x-stackQL-resources/jobs_iam_audit_configs/methods/projects_locations_jobs_getIamPolicy'
paths:
  /v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}/taskGroups/{taskGroupsId}/tasks/{tasksId}:
    parameters: &ref_1
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
    get:
      description: Return a single Task.
      operationId: batch.projects.locations.jobs.taskGroups.tasks.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
        - in: path
          name: taskGroupsId
          required: true
          schema:
            type: string
        - in: path
          name: tasksId
          required: true
          schema:
            type: string
      x-stackQL-resource: tasks
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}/taskGroups/{taskGroupsId}/tasks:
    parameters: *ref_1
    get:
      description: List Tasks associated with a job.
      operationId: batch.projects.locations.jobs.taskGroups.tasks.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTasksResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
        - in: path
          name: taskGroupsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: tasks
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}:
    parameters: *ref_1
    get:
      description: Get a Job specified by its resource name.
      operationId: batch.projects.locations.jobs.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
      x-stackQL-resource: jobs
      x-stackQL-verb: select
    delete:
      description: Delete a Job.
      operationId: batch.projects.locations.jobs.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
        - in: query
          name: reason
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: jobs
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}:setIamPolicy:
    parameters: *ref_1
    post:
      description: Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
      operationId: batch.projects.locations.jobs.setIamPolicy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetIamPolicyRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
      x-stackQL-resource: jobs_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/jobs:
    parameters: *ref_1
    post:
      description: Create a Job.
      operationId: batch.projects.locations.jobs.create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: jobId
          schema:
            type: string
        - in: query
          name: requestId
          schema:
            type: string
      x-stackQL-resource: jobs
      x-stackQL-verb: insert
    get:
      description: List all Jobs for a project within a region.
      operationId: batch.projects.locations.jobs.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListJobsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: jobs
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}:getIamPolicy:
    parameters: *ref_1
    get:
      description: Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
      operationId: batch.projects.locations.jobs.getIamPolicy
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
        - in: query
          name: options.requestedPolicyVersion
          schema:
            type: integer
      x-stackQL-resource: jobs_iam_policies
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/jobs/{jobsId}:testIamPermissions:
    parameters: *ref_1
    post:
      description: 'Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.'
      operationId: batch.projects.locations.jobs.testIamPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestIamPermissionsRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestIamPermissionsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: jobsId
          required: true
          schema:
            type: string
      x-stackQL-resource: jobs_iam_policies
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:
    parameters: *ref_1
    get:
      description: Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
      operationId: batch.projects.locations.operations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
    delete:
      description: Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
      operationId: batch.projects.locations.operations.delete
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: delete
  /v1/projects/{projectsId}/locations/{locationsId}/operations:
    parameters: *ref_1
    get:
      description: 'Lists operations that match the specified filter in the request. If the server doesn''t support this method, it returns `UNIMPLEMENTED`. NOTE: the `name` binding allows API services to override the binding to use different resource name schemes, such as `users/*/operations`. To override the binding, API services can add a binding such as `"/v1/{name=users/*}/operations"` to their service configuration. For backwards compatibility, the default name includes the operations collection id, however overriding users must ensure the name binding is the parent resource, without the operations collection id.'
      operationId: batch.projects.locations.operations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
        - in: query
          name: filter
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations/{locationsId}/operations/{operationsId}:cancel:
    parameters: *ref_1
    post:
      description: Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
      operationId: batch.projects.locations.operations.cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelOperationRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
        - in: path
          name: operationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: operations
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}/state:report:
    parameters: *ref_1
    post:
      description: Report agent's state, e.g. agent status and tasks information
      operationId: batch.projects.locations.state.report
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportAgentStateRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportAgentStateResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: state
      x-stackQL-verb: exec
  /v1/projects/{projectsId}/locations/{locationsId}:
    parameters: *ref_1
    get:
      description: Gets information about a location.
      operationId: batch.projects.locations.get
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: path
          name: locationsId
          required: true
          schema:
            type: string
      x-stackQL-resource: locations
      x-stackQL-verb: select
  /v1/projects/{projectsId}/locations:
    parameters: *ref_1
    get:
      description: Lists information about the supported locations for this service.
      operationId: batch.projects.locations.list
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
      parameters:
        - in: path
          name: projectsId
          required: true
          schema:
            type: string
        - in: query
          name: filter
          schema:
            type: string
        - in: query
          name: pageToken
          schema:
            type: string
        - in: query
          name: pageSize
          schema:
            type: integer
      x-stackQL-resource: locations
      x-stackQL-verb: select
