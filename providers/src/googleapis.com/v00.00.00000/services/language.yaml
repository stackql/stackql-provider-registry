openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: https://github.com/stackql/google-discovery-to-openapi
    email: info@stackql.io
  title: Cloud Natural Language API
  description: >-
    Provides natural language understanding technologies, such as sentiment
    analysis, entity recognition, entity sentiment analysis, and other text
    annotations, to developers.
  version: v2
  x-discovery-doc-revision: '20240908'
  x-generated-date: '2024-09-19'
externalDocs:
  url: https://cloud.google.com/natural-language/
servers:
  - url: https://language.googleapis.com
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes: &ref_0
            https://www.googleapis.com/auth/cloud-language: >-
              Apply machine learning models to reveal the structure and meaning
              of text
            https://www.googleapis.com/auth/cloud-platform: >-
              See, edit, configure, and delete your Google Cloud data and see
              the email address for your Google Account.
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://accounts.google.com/o/oauth2/token
          scopes: *ref_0
  schemas:
    XPSFloat64Stats:
      id: XPSFloat64Stats
      properties:
        commonStats:
          $ref: '#/components/schemas/XPSCommonStats'
        histogramBuckets:
          description: >-
            Histogram buckets of the data series. Sorted by the min value of the
            bucket, ascendingly, and the number of the buckets is dynamically
            generated. The buckets are non-overlapping and completely cover
            whole FLOAT64 range with min of first bucket being `"-Infinity"`,
            and max of the last one being `"Infinity"`.
          type: array
          items:
            $ref: '#/components/schemas/XPSFloat64StatsHistogramBucket'
        quantiles:
          description: >-
            Ordered from 0 to k k-quantile values of the data series of n
            values. The value at index i is, approximately, the i*n/k-th
            smallest value in the series; for i = 0 and i = k these are,
            respectively, the min and max values.
          type: array
          items:
            format: double
            type: number
        standardDeviation:
          format: double
          description: The standard deviation of the series.
          type: number
        mean:
          format: double
          type: number
          description: The mean of the series.
      description: The data statistics of a series of FLOAT64 values.
      type: object
    XPSTfJsFormat:
      description: >-
        A [TensorFlow.js](https://www.tensorflow.org/js) model that can be used
        in the browser and in Node.js using JavaScript.
      id: XPSTfJsFormat
      properties: {}
      type: object
    XPSFloat64StatsHistogramBucket:
      id: XPSFloat64StatsHistogramBucket
      description: A bucket of a histogram.
      properties:
        max:
          type: number
          format: double
          description: >-
            The maximum value of the bucket, exclusive unless max =
            `"Infinity"`, in which case it's inclusive.
        min:
          description: The minimum value of the bucket, inclusive.
          type: number
          format: double
        count:
          description: >-
            The number of data values that are in the bucket, i.e. are between
            min and max values.
          type: string
          format: int64
      type: object
    CpuMetric:
      type: object
      id: CpuMetric
      properties:
        machineSpec:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          enum:
            - UNKNOWN_MACHINE_SPEC
            - N1_STANDARD_2
            - N1_STANDARD_4
            - N1_STANDARD_8
            - N1_STANDARD_16
            - N1_STANDARD_32
            - N1_STANDARD_64
            - N1_STANDARD_96
            - N1_HIGHMEM_2
            - N1_HIGHMEM_4
            - N1_HIGHMEM_8
            - N1_HIGHMEM_16
            - N1_HIGHMEM_32
            - N1_HIGHMEM_64
            - N1_HIGHMEM_96
            - N1_HIGHCPU_2
            - N1_HIGHCPU_4
            - N1_HIGHCPU_8
            - N1_HIGHCPU_16
            - N1_HIGHCPU_32
            - N1_HIGHCPU_64
            - N1_HIGHCPU_96
            - A2_HIGHGPU_1G
            - A2_HIGHGPU_2G
            - A2_HIGHGPU_4G
            - A2_HIGHGPU_8G
            - A2_MEGAGPU_16G
            - A2_ULTRAGPU_1G
            - A2_ULTRAGPU_2G
            - A2_ULTRAGPU_4G
            - A2_ULTRAGPU_8G
            - A3_HIGHGPU_2G
            - A3_HIGHGPU_4G
            - A3_HIGHGPU_8G
            - A3_MEGAGPU_8G
            - E2_STANDARD_2
            - E2_STANDARD_4
            - E2_STANDARD_8
            - E2_STANDARD_16
            - E2_STANDARD_32
            - E2_HIGHMEM_2
            - E2_HIGHMEM_4
            - E2_HIGHMEM_8
            - E2_HIGHMEM_16
            - E2_HIGHCPU_2
            - E2_HIGHCPU_4
            - E2_HIGHCPU_8
            - E2_HIGHCPU_16
            - E2_HIGHCPU_32
            - N2_STANDARD_2
            - N2_STANDARD_4
            - N2_STANDARD_8
            - N2_STANDARD_16
            - N2_STANDARD_32
            - N2_STANDARD_48
            - N2_STANDARD_64
            - N2_STANDARD_80
            - N2_STANDARD_96
            - N2_STANDARD_128
            - N2_HIGHMEM_2
            - N2_HIGHMEM_4
            - N2_HIGHMEM_8
            - N2_HIGHMEM_16
            - N2_HIGHMEM_32
            - N2_HIGHMEM_48
            - N2_HIGHMEM_64
            - N2_HIGHMEM_80
            - N2_HIGHMEM_96
            - N2_HIGHMEM_128
            - N2_HIGHCPU_2
            - N2_HIGHCPU_4
            - N2_HIGHCPU_8
            - N2_HIGHCPU_16
            - N2_HIGHCPU_32
            - N2_HIGHCPU_48
            - N2_HIGHCPU_64
            - N2_HIGHCPU_80
            - N2_HIGHCPU_96
            - N2D_STANDARD_2
            - N2D_STANDARD_4
            - N2D_STANDARD_8
            - N2D_STANDARD_16
            - N2D_STANDARD_32
            - N2D_STANDARD_48
            - N2D_STANDARD_64
            - N2D_STANDARD_80
            - N2D_STANDARD_96
            - N2D_STANDARD_128
            - N2D_STANDARD_224
            - N2D_HIGHMEM_2
            - N2D_HIGHMEM_4
            - N2D_HIGHMEM_8
            - N2D_HIGHMEM_16
            - N2D_HIGHMEM_32
            - N2D_HIGHMEM_48
            - N2D_HIGHMEM_64
            - N2D_HIGHMEM_80
            - N2D_HIGHMEM_96
            - N2D_HIGHCPU_2
            - N2D_HIGHCPU_4
            - N2D_HIGHCPU_8
            - N2D_HIGHCPU_16
            - N2D_HIGHCPU_32
            - N2D_HIGHCPU_48
            - N2D_HIGHCPU_64
            - N2D_HIGHCPU_80
            - N2D_HIGHCPU_96
            - N2D_HIGHCPU_128
            - N2D_HIGHCPU_224
            - C2_STANDARD_4
            - C2_STANDARD_8
            - C2_STANDARD_16
            - C2_STANDARD_30
            - C2_STANDARD_60
            - C2D_STANDARD_2
            - C2D_STANDARD_4
            - C2D_STANDARD_8
            - C2D_STANDARD_16
            - C2D_STANDARD_32
            - C2D_STANDARD_56
            - C2D_STANDARD_112
            - C2D_HIGHCPU_2
            - C2D_HIGHCPU_4
            - C2D_HIGHCPU_8
            - C2D_HIGHCPU_16
            - C2D_HIGHCPU_32
            - C2D_HIGHCPU_56
            - C2D_HIGHCPU_112
            - C2D_HIGHMEM_2
            - C2D_HIGHMEM_4
            - C2D_HIGHMEM_8
            - C2D_HIGHMEM_16
            - C2D_HIGHMEM_32
            - C2D_HIGHMEM_56
            - C2D_HIGHMEM_112
            - G2_STANDARD_4
            - G2_STANDARD_8
            - G2_STANDARD_12
            - G2_STANDARD_16
            - G2_STANDARD_24
            - G2_STANDARD_32
            - G2_STANDARD_48
            - G2_STANDARD_96
            - C3_STANDARD_4
            - C3_STANDARD_8
            - C3_STANDARD_22
            - C3_STANDARD_44
            - C3_STANDARD_88
            - C3_STANDARD_176
            - C3_HIGHCPU_4
            - C3_HIGHCPU_8
            - C3_HIGHCPU_22
            - C3_HIGHCPU_44
            - C3_HIGHCPU_88
            - C3_HIGHCPU_176
            - C3_HIGHMEM_4
            - C3_HIGHMEM_8
            - C3_HIGHMEM_22
            - C3_HIGHMEM_44
            - C3_HIGHMEM_88
            - C3_HIGHMEM_176
          description: Required. Machine spec, e.g. N1_STANDARD_4.
          type: string
        coreNumber:
          format: int64
          type: string
          description: Required. Number of CPU cores.
        cpuType:
          enum:
            - UNKNOWN_CPU_TYPE
            - A2
            - A3
            - C2
            - C2D
            - CUSTOM
            - E2
            - G2
            - C3
            - M2
            - M1
            - N1
            - N2_CUSTOM
            - N2
            - N2D
          type: string
          description: Required. Type of cpu, e.g. N2.
          enumDescriptions:
            - ''
            - GPU-based machine, skip quota reporting.
            - GPU-based machine, skip quota reporting.
            - COMPUTE_OPTIMIZED
            - ''
            - ''
            - ''
            - GPU-based machine, skip quota reporting.
            - ''
            - MEMORY_OPTIMIZED_UPGRADE_PREMIUM
            - MEMORY_OPTIMIZED
            - ''
            - ''
            - ''
            - ''
        trackingLabels:
          type: object
          additionalProperties:
            type: string
          description: >-
            Billing tracking labels. They do not contain any user data but only
            the labels set by Vertex Core Infra itself. Tracking labels' keys
            are defined with special format: goog-[\p{Ll}\p{N}]+ E.g. "key":
            "goog-k8s-cluster-name","value": "us-east1-b4rk"
        coreSec:
          type: string
          description: Required. Total seconds of core usage, e.g. 4.
          format: int64
      description: Metric for billing reports.
    XPSTablesClassificationMetricsCurveMetrics:
      id: XPSTablesClassificationMetricsCurveMetrics
      description: Metrics curve data point for a single value.
      properties:
        aucRoc:
          format: double
          description: The area under receiver operating characteristic curve.
          type: number
        confidenceMetricsEntries:
          items:
            $ref: '#/components/schemas/XPSTablesConfidenceMetricsEntry'
          description: >-
            Metrics that have confidence thresholds. Precision-recall curve and
            ROC curve can be derived from them.
          type: array
        positionThreshold:
          type: integer
          format: int32
          description: The position threshold value used to compute the metrics.
        aucPr:
          type: number
          format: double
          description: The area under the precision-recall curve.
        value:
          type: string
          description: >-
            The CATEGORY row value (for ARRAY unnested) the curve metrics are
            for.
        logLoss:
          format: double
          type: number
          description: The Log loss metric.
      type: object
    XPSTimestampStatsGranularStats:
      type: object
      properties:
        buckets:
          description: >-
            A map from granularity key to example count for that key. E.g. for
            hour_of_day `13` means 1pm, or for month_of_year `5` means May).
          additionalProperties:
            format: int64
            type: string
          type: object
      description: Stats split by a defined in context granularity.
      id: XPSTimestampStatsGranularStats
    Status:
      description: >-
        The `Status` type defines a logical error model that is suitable for
        different programming environments, including REST APIs and RPC APIs. It
        is used by [gRPC](https://github.com/grpc). Each `Status` message
        contains three pieces of data: error code, error message, and error
        details. You can find out more about this error model and how to work
        with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).
      id: Status
      properties:
        code:
          description: The status code, which should be an enum value of google.rpc.Code.
          format: int32
          type: integer
        details:
          description: >-
            A list of messages that carry the error details. There is a common
            set of message types for APIs to use.
          items:
            type: object
            additionalProperties:
              type: any
              description: Properties of the object. Contains field @type with type URL.
          type: array
        message:
          type: string
          description: >-
            A developer-facing error message, which should be in English. Any
            user-facing error message should be localized and sent in the
            google.rpc.Status.details field, or localized by the client.
      type: object
    DiskMetric:
      type: object
      id: DiskMetric
      properties:
        gibSec:
          description: Required. Seconds of physical disk usage, e.g. 3600.
          format: int64
          type: string
        diskType:
          enum:
            - UNKNOWN_DISK_TYPE
            - REGIONAL_SSD
            - REGIONAL_STORAGE
            - PD_SSD
            - PD_STANDARD
            - STORAGE_SNAPSHOT
          description: Required. Type of Disk, e.g. REGIONAL_SSD.
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          type: string
    XPSImageSegmentationEvaluationMetricsConfidenceMetricsEntry:
      type: object
      properties:
        diceScoreCoefficient:
          type: number
          format: float
          description: 'DSC or the F1 score: The harmonic mean of recall and precision.'
        iouScore:
          description: IOU score.
          format: float
          type: number
        confidenceThreshold:
          type: number
          format: float
          description: The confidence threshold value used to compute the metrics.
        recall:
          type: number
          description: Recall for the given confidence threshold.
          format: float
        precision:
          description: Precision for the given confidence threshold.
          format: float
          type: number
        confusionMatrix:
          $ref: '#/components/schemas/XPSConfusionMatrix'
          description: >-
            Confusion matrix of the per confidence_threshold evaluation. Pixel
            counts are set here. Only set for model level evaluation, not for
            evaluation per label.
      description: Metrics for a single confidence threshold.
      id: XPSImageSegmentationEvaluationMetricsConfidenceMetricsEntry
    XPSTextComponentModel:
      type: object
      description: 'Component model. Next ID: 10'
      id: XPSTextComponentModel
      properties:
        tfRuntimeVersion:
          description: >-
            ## The fields below are only populated under uCAIP request scope.
            https://cloud.google.com/ml-engine/docs/runtime-version-list
          type: string
        onlinePredictionModelGcsUri:
          description: The Cloud Storage resource path to hold online prediction model.
          type: string
        servoModelName:
          type: string
          description: >-
            The name of servo model. Populated by uCAIP BE as part of online
            PredictRequest.
        servingArtifact:
          description: >-
            The default model binary file used for serving (e.g. online predict,
            batch predict) via public Cloud Ai Platform API.
          $ref: '#/components/schemas/XPSModelArtifactItem'
        versionNumber:
          description: >-
            The servomatic model version number. Populated by uCAIP BE as part
            of online PredictRequest.
          format: int64
          type: string
        submodelName:
          description: The name of the trained NL submodel.
          type: string
        partition:
          type: string
          description: >-
            The partition where the model is deployed. Populated by uCAIP BE as
            part of online PredictRequest.
          enumDescriptions:
            - ''
            - The default partition.
            - >-
              It has significantly lower replication than partition-0 and is
              located in the US only. It also has a larger model size limit and
              higher default RAM quota than partition-0. Customers with batch
              traffic, US-based traffic, or very large models should use this
              partition. Capacity in this partition is significantly cheaper
              than partition-0.
            - >-
              To be used by customers with Jellyfish-accelerated ops. See
              go/servomatic-jellyfish for details.
            - The partition used by regionalized servomatic cloud regions.
            - The partition used for loading models from custom storage.
          enum:
            - PARTITION_TYPE_UNSPECIFIED
            - PARTITION_ZERO
            - PARTITION_REDUCED_HOMING
            - PARTITION_JELLYFISH
            - PARTITION_CPU
            - PARTITION_CUSTOM_STORAGE_CPU
        submodelType:
          enum:
            - TEXT_MODEL_TYPE_UNSPECIFIED
            - TEXT_MODEL_TYPE_DEFAULT
            - TEXT_MODEL_TYPE_META_ARCHITECT
            - TEXT_MODEL_TYPE_ATC
            - TEXT_MODEL_TYPE_CLARA2
            - TEXT_MODEL_TYPE_CHATBASE
            - TEXT_MODEL_TYPE_SAFT_SPAN_LABELING
            - TEXT_MODEL_TYPE_TEXT_EXTRACTION
            - TEXT_MODEL_TYPE_RELATIONSHIP_EXTRACTION
            - TEXT_MODEL_TYPE_COMPOSITE
            - TEXT_MODEL_TYPE_ALL_MODELS
            - TEXT_MODEL_TYPE_BERT
            - TEXT_MODEL_TYPE_ENC_PALM
          type: string
          description: The type of trained NL submodel
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - Model type for entity extraction.
            - Model type for relationship extraction.
            - >-
              A composite model represents a set of component models that have
              to be used together for prediction. A composite model appears to
              be a single model to the model user. It may contain only one
              component model. Please refer to go/cnl-composite-models for more
              information.
            - >-
              Model type used to train default, MA, and ATC models in a single
              batch worker pipeline.
            - >-
              BERT pipeline needs a specific model type, since it uses a
              different TFX configuration compared with DEFAULT (despite sharing
              most of the code).
            - Model type for EncPaLM.
        batchPredictionModelGcsUri:
          type: string
          description: The Cloud Storage resource path to hold batch prediction model.
    XPSDataStats:
      properties:
        timestampStats:
          $ref: '#/components/schemas/XPSTimestampStats'
          description: The statistics for TIMESTAMP DataType.
        structStats:
          description: The statistics for STRUCT DataType.
          $ref: '#/components/schemas/XPSStructStats'
        validValueCount:
          format: int64
          description: The number of values that are valid.
          type: string
        distinctValueCount:
          type: string
          description: The number of distinct values.
          format: int64
        arrayStats:
          $ref: '#/components/schemas/XPSArrayStats'
          description: The statistics for ARRAY DataType.
        nullValueCount:
          format: int64
          type: string
          description: The number of values that are null.
        stringStats:
          description: The statistics for STRING DataType.
          $ref: '#/components/schemas/XPSStringStats'
        categoryStats:
          description: The statistics for CATEGORY DataType.
          $ref: '#/components/schemas/XPSCategoryStats'
        float64Stats:
          description: The statistics for FLOAT64 DataType.
          $ref: '#/components/schemas/XPSFloat64Stats'
      type: object
      description: The data statistics of a series of values that share the same DataType.
      id: XPSDataStats
    AnalyzeSentimentRequest:
      id: AnalyzeSentimentRequest
      description: The sentiment analysis request message.
      properties:
        encodingType:
          type: string
          enumDescriptions:
            - >-
              If `EncodingType` is not specified, encoding-dependent information
              (such as `begin_offset`) will be set at `-1`.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-8 encoding of the input. C++ and Go
              are examples of languages that use this encoding natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-16 encoding of the input. Java and
              JavaScript are examples of languages that use this encoding
              natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-32 encoding of the input. Python is an
              example of a language that uses this encoding natively.
          description: The encoding type used by the API to calculate sentence offsets.
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
        document:
          $ref: '#/components/schemas/Document'
          description: Required. Input document.
      type: object
    XPSDataType:
      properties:
        timeFormat:
          description: >-
            If type_code == TIMESTAMP then `time_format` provides the format in
            which that time field is expressed. The time_format must be written
            in `strftime` syntax. If time_format is not set, then the default
            format as described on the field is used.
          type: string
        typeCode:
          enum:
            - TYPE_CODE_UNSPECIFIED
            - FLOAT64
            - TIMESTAMP
            - STRING
            - ARRAY
            - STRUCT
            - CATEGORY
          enumDescriptions:
            - Not specified. Should not be used.
            - >-
              Encoded as `number`, or the strings `"NaN"`, `"Infinity"`, or
              `"-Infinity"`.
            - >-
              Must be between 0AD and 9999AD. Encoded as `string` according to
              time_format, or, if that format is not set, then in RFC 3339
              `date-time` format, where `time-offset` = `"Z"` (e.g.
              1985-04-12T23:20:50.52Z).
            - Encoded as `string`.
            - >-
              Encoded as `list`, where the list elements are represented
              according to list_element_type.
            - >-
              Encoded as `struct`, where field values are represented according
              to struct_type.
            - >-
              Values of this type are not further understood by AutoML, e.g.
              AutoML is unable to tell the order of values (as it could with
              FLOAT64), or is unable to say if one value contains another (as it
              could with STRING). Encoded as `string` (bytes should be
              base64-encoded, as described in RFC 4648, section 4).
          type: string
          description: Required. The TypeCode for this type.
        structType:
          description: >-
            If type_code == STRUCT, then `struct_type` provides type information
            for the struct's fields.
          $ref: '#/components/schemas/XPSStructType'
        nullable:
          type: boolean
          description: If true, this DataType can also be `null`.
        compatibleDataTypes:
          type: array
          items:
            $ref: '#/components/schemas/XPSDataType'
          description: The highly compatible data types to this data type.
        listElementType:
          $ref: '#/components/schemas/XPSDataType'
          description: >-
            If type_code == ARRAY, then `list_element_type` is the type of the
            elements.
      type: object
      id: XPSDataType
      description: >-
        Indicated the type of data that can be stored in a structured data
        entity (e.g. a table).
    XPSVideoActionMetricsEntryConfidenceMetricsEntry:
      id: XPSVideoActionMetricsEntryConfidenceMetricsEntry
      type: object
      properties:
        recall:
          format: float
          type: number
          description: Output only. Recall for the given confidence threshold.
        confidenceThreshold:
          format: float
          description: >-
            Output only. The confidence threshold value used to compute the
            metrics.
          type: number
        precision:
          description: Output only. Precision for the given confidence threshold.
          format: float
          type: number
        f1Score:
          format: float
          type: number
          description: Output only. The harmonic mean of recall and precision.
      description: Metrics for a single confidence threshold.
    XPSRow:
      id: XPSRow
      properties:
        values:
          description: >-
            The values of the row cells, given in the same order as the
            column_ids. If column_ids is not set, then in the same order as the
            input_feature_column_ids in TablesModelMetadata.
          items:
            type: any
          type: array
        columnIds:
          description: >-
            The ids of the columns. Note: The below `values` field must match
            order of this field, if this field is set.
          items:
            type: integer
            format: int32
          type: array
      type: object
    XPSImageSegmentationTrainResponse:
      properties:
        trainCostNodeSeconds:
          type: string
          format: int64
          description: >-
            The actual train cost of creating this model, expressed in node
            seconds, i.e. 3,600 value in this field means 1 node hour.
        modelArtifactSpec:
          $ref: '#/components/schemas/XPSImageModelArtifactSpec'
          description: >-
            ## The fields below are only populated under uCAIP request scope.
            Model artifact spec stores and model gcs pathes and related metadata
        stopReason:
          type: string
          enum:
            - TRAIN_STOP_REASON_UNSPECIFIED
            - TRAIN_STOP_REASON_BUDGET_REACHED
            - TRAIN_STOP_REASON_MODEL_CONVERGED
            - TRAIN_STOP_REASON_MODEL_EARLY_STOPPED
          enumDescriptions:
            - ''
            - ''
            - Model fully converged, can not be resumbed training.
            - >-
              Model early converged, can be further trained till full
              convergency.
          description: >-
            Stop reason for training job, e.g. 'TRAIN_BUDGET_REACHED',
            'MODEL_CONVERGED'.
        modelServingSpec:
          $ref: '#/components/schemas/XPSImageModelServingSpec'
        colorMaps:
          description: Color map of the model.
          type: array
          items:
            $ref: '#/components/schemas/XPSColorMap'
        exportModelSpec:
          description: 'NOTE: These fields are not used/needed in EAP but will be set later.'
          $ref: '#/components/schemas/XPSImageExportModelSpec'
      type: object
      id: XPSImageSegmentationTrainResponse
    XPSImageModelArtifactSpec:
      id: XPSImageModelArtifactSpec
      type: object
      properties:
        checkpointArtifact:
          $ref: '#/components/schemas/XPSModelArtifactItem'
          description: The Tensorflow checkpoint files. e.g. Used for resumable training.
        servingArtifact:
          description: >-
            The default model binary file used for serving (e.g. online predict,
            batch predict) via public Cloud AI Platform API.
          $ref: '#/components/schemas/XPSModelArtifactItem'
        tfLiteMetadataGcsUri:
          description: GCS uri of Tensorflow Lite metadata 'tflite_metadata.json'.
          type: string
        exportArtifact:
          items:
            $ref: '#/components/schemas/XPSModelArtifactItem'
          type: array
          description: The model binary files in different formats for model export.
        labelGcsUri:
          type: string
          description: GCS uri of decoded labels file for model export 'dict.txt'.
        tfJsBinaryGcsPrefix:
          description: >-
            GCS uri prefix of Tensorflow JavaScript binary files
            'groupX-shardXofX.bin' Deprecated.
          type: string
      description: >-
        Stores the locations and related metadata of the model artifacts.
        Populated for uCAIP requests only.
    XPSBoundingBoxMetricsEntryConfidenceMetricsEntry:
      properties:
        recall:
          description: Recall for the given confidence threshold.
          type: number
          format: float
        precision:
          format: float
          type: number
          description: Precision for the given confidence threshold.
        f1Score:
          type: number
          description: The harmonic mean of recall and precision.
          format: float
        confidenceThreshold:
          type: number
          format: float
          description: The confidence threshold value used to compute the metrics.
      description: Metrics for a single confidence threshold.
      id: XPSBoundingBoxMetricsEntryConfidenceMetricsEntry
      type: object
    XPSDataErrors:
      type: object
      id: XPSDataErrors
      description: Different types of errors and the stats associatesd with each error.
      properties:
        errorType:
          type: string
          description: Type of the error.
          enumDescriptions:
            - Not specified.
            - >-
              Audio format not in the formats by cloud-speech AutoML. Currently
              only wav and flac file formats are supported.
            - >-
              File format differnt from what is specified in the file name
              extension.
            - File too large. Maximum allowed size is 50 MB.
            - Transcript is missing.
          enum:
            - ERROR_TYPE_UNSPECIFIED
            - UNSUPPORTED_AUDIO_FORMAT
            - FILE_EXTENSION_MISMATCH_WITH_AUDIO_FORMAT
            - FILE_TOO_LARGE
            - MISSING_TRANSCRIPTION
        count:
          type: integer
          format: int32
          description: Number of records having errors associated with the enum.
    XPSEvaluationMetrics:
      type: object
      id: XPSEvaluationMetrics
      description: >-
        Contains xPS-specific model evaluation metrics either for a single
        annotation spec (label), or for the model overall. Next tag: 18.
      properties:
        imageObjectDetectionEvalMetrics:
          $ref: '#/components/schemas/XPSImageObjectDetectionEvaluationMetrics'
        tablesEvalMetrics:
          $ref: '#/components/schemas/XPSTablesEvaluationMetrics'
        videoClassificationEvalMetrics:
          $ref: '#/components/schemas/XPSClassificationEvaluationMetrics'
        videoActionRecognitionEvalMetrics:
          $ref: '#/components/schemas/XPSVideoActionRecognitionEvaluationMetrics'
        annotationSpecIdToken:
          type: string
          description: >-
            The annotation_spec for which this evaluation metrics instance had
            been created. Empty iff this is an overall model evaluation (like
            Tables evaluation metrics), i.e. aggregated across all labels. The
            value comes from the input annotations in AnnotatedExample. For MVP
            product or for text sentiment models where annotation_spec_id_token
            is not available, set label instead.
        videoObjectTrackingEvalMetrics:
          $ref: '#/components/schemas/XPSVideoObjectTrackingEvaluationMetrics'
        textClassificationEvalMetrics:
          $ref: '#/components/schemas/XPSClassificationEvaluationMetrics'
        regressionEvalMetrics:
          $ref: '#/components/schemas/XPSRegressionEvaluationMetrics'
        translationEvalMetrics:
          $ref: '#/components/schemas/XPSTranslationEvaluationMetrics'
        category:
          type: integer
          format: int32
          description: >-
            The integer category label for which this evaluation metric instance
            had been created. Valid categories are 0 or higher. Overall model
            evaluation should set this to negative values (rather than implicit
            zero). Only used for Image Segmentation (prefer to set
            annotation_spec_id_token instead). Note: uCAIP Image Segmentation
            should use annotation_spec_id_token.
        tablesClassificationEvalMetrics:
          $ref: '#/components/schemas/XPSClassificationEvaluationMetrics'
        imageSegmentationEvalMetrics:
          $ref: '#/components/schemas/XPSImageSegmentationEvaluationMetrics'
        label:
          description: >-
            The label for which this evaluation metrics instance had been
            created. Empty iff this is an overall model evaluation (like Tables
            evaluation metrics), i.e. aggregated across all labels. The label
            maps to AnnotationSpec.display_name in Public API protos. Only used
            by MVP implementation and text sentiment FULL implementation.
          type: string
        textExtractionEvalMetrics:
          $ref: '#/components/schemas/XPSTextExtractionEvaluationMetrics'
        textSentimentEvalMetrics:
          $ref: '#/components/schemas/XPSTextSentimentEvaluationMetrics'
        imageClassificationEvalMetrics:
          $ref: '#/components/schemas/XPSClassificationEvaluationMetrics'
        evaluatedExampleCount:
          description: >-
            The number of examples used to create this evaluation metrics
            instance.
          format: int32
          type: integer
    XPSTablesDatasetMetadata:
      properties:
        primaryTableSpec:
          description: Primary table.
          $ref: '#/components/schemas/XPSTableSpec'
        mlUseColumnId:
          format: int32
          description: Id the column to split the table.
          type: integer
        weightColumnId:
          format: int32
          description: >-
            Id of the primary table column that should be used as the weight
            column.
          type: integer
        targetColumnCorrelations:
          description: '(the column id : its CorrelationStats with target column).'
          additionalProperties:
            $ref: '#/components/schemas/XPSCorrelationStats'
          type: object
        targetColumnId:
          description: >-
            Id of the primary table column that should be used as the training
            label.
          type: integer
          format: int32
      id: XPSTablesDatasetMetadata
      type: object
      description: 'Metadata for a dataset used for AutoML Tables. Next ID: 6'
    Color:
      id: Color
      type: object
      description: >-
        Represents a color in the RGBA color space. This representation is
        designed for simplicity of conversion to and from color representations
        in various languages over compactness. For example, the fields of this
        representation can be trivially provided to the constructor of
        `java.awt.Color` in Java; it can also be trivially provided to UIColor's
        `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little
        work, it can be easily formatted into a CSS `rgba()` string in
        JavaScript. This reference page doesn't have information about the
        absolute color space that should be used to interpret the RGB value—for
        example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications
        should assume the sRGB color space. When color equality needs to be
        decided, implementations, unless documented otherwise, treat two colors
        as equal if all their red, green, blue, and alpha values each differ by
        at most `1e-5`. Example (Java): import com.google.type.Color; // ...
        public static java.awt.Color fromProto(Color protocolor) { float alpha =
        protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return
        new java.awt.Color( protocolor.getRed(), protocolor.getGreen(),
        protocolor.getBlue(), alpha); } public static Color
        toProto(java.awt.Color color) { float red = (float) color.getRed();
        float green = (float) color.getGreen(); float blue = (float)
        color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder
        = Color .newBuilder() .setRed(red / denominator) .setGreen(green /
        denominator) .setBlue(blue / denominator); int alpha = color.getAlpha();
        if (alpha != 255) { result.setAlpha( FloatValue .newBuilder()
        .setValue(((float) alpha) / denominator) .build()); } return
        resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static
        UIColor* fromProto(Color* protocolor) { float red = [protocolor red];
        float green = [protocolor green]; float blue = [protocolor blue];
        FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if
        (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return
        [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static
        Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if
        (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return
        nil; } Color* result = [[Color alloc] init]; [result setRed:red];
        [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) {
        [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease];
        return result; } // ... Example (JavaScript): // ... var protoToCssColor
        = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var
        greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue ||
        0.0; var red = Math.floor(redFrac * 255); var green =
        Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if
        (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); }
        var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red,
        green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac,
        ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var
        rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString
        = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var
        resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) {
        resultBuilder.push('0'); } resultBuilder.push(hexString); return
        resultBuilder.join(''); }; // ...
      properties:
        green:
          type: number
          format: float
          description: The amount of green in the color as a value in the interval [0, 1].
        blue:
          type: number
          format: float
          description: The amount of blue in the color as a value in the interval [0, 1].
        alpha:
          type: number
          format: float
          description: >-
            The fraction of this color that should be applied to the pixel. That
            is, the final pixel color is defined by the equation: `pixel color =
            alpha * (this color) + (1.0 - alpha) * (background color)` This
            means that a value of 1.0 corresponds to a solid color, whereas a
            value of 0.0 corresponds to a completely transparent color. This
            uses a wrapper message rather than a simple float scalar so that it
            is possible to distinguish between a default value and the value
            being unset. If omitted, this color object is rendered as a solid
            color (as if the alpha value had been explicitly given a value of
            1.0).
        red:
          description: The amount of red in the color as a value in the interval [0, 1].
          type: number
          format: float
    XPSTablesTrainResponse:
      properties:
        predictionSampleRows:
          type: array
          description: Sample rows from the dataset this model was trained.
          items:
            $ref: '#/components/schemas/XPSRow'
        trainCostMilliNodeHours:
          type: string
          description: >-
            The actual training cost of the model, expressed in milli node
            hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed
            to not exceed the train budget.
          format: int64
        tablesModelColumnInfo:
          description: >-
            Output only. Auxiliary information for each of the
            input_feature_column_specs, with respect to this particular model.
          items:
            $ref: '#/components/schemas/XPSTablesModelColumnInfo'
          type: array
        modelStructure:
          $ref: '#/components/schemas/XPSTablesModelStructure'
      type: object
      id: XPSTablesTrainResponse
    XPSTablesClassificationMetrics:
      id: XPSTablesClassificationMetrics
      type: object
      description: Metrics for Tables classification problems.
      properties:
        curveMetrics:
          description: Metrics building a curve.
          type: array
          items:
            $ref: '#/components/schemas/XPSTablesClassificationMetricsCurveMetrics'
    XPSModelArtifactItem:
      type: object
      description: A single model artifact item.
      id: XPSModelArtifactItem
      properties:
        gcsUri:
          type: string
          description: >-
            The Google Cloud Storage (GCS) uri that stores the model binary
            files.
        artifactFormat:
          description: The model artifact format.
          enumDescriptions:
            - Should not be used.
            - >-
              The Tensorflow checkpoints. See
              https://www.tensorflow.org/guide/checkpoint.
            - The Tensorflow SavedModel binary.
            - >-
              Model artifact in generic TensorFlow Lite (.tflite) format. See
              https://www.tensorflow.org/lite.
            - Used for [Edge TPU](https://cloud.google.com/edge-tpu/) devices.
            - >-
              A [TensorFlow.js](https://www.tensorflow.org/js) model that can be
              used in the browser and in Node.js using JavaScript.
            - >-
              Used for iOS mobile devices in (.mlmodel) format. See
              https://developer.apple.com/documentation/coreml
          type: string
          enum:
            - ARTIFACT_FORMAT_UNSPECIFIED
            - TF_CHECKPOINT
            - TF_SAVED_MODEL
            - TF_LITE
            - EDGE_TPU_TF_LITE
            - TF_JS
            - CORE_ML
    XPSImageSegmentationEvaluationMetrics:
      description: 'Model evaluation metrics for image segmentation problems. Next tag: 4.'
      properties:
        confidenceMetricsEntries:
          items:
            $ref: >-
              #/components/schemas/XPSImageSegmentationEvaluationMetricsConfidenceMetricsEntry
          description: >-
            Metrics that have confidence thresholds. Precision-recall curve can
            be derived from it.
          type: array
      id: XPSImageSegmentationEvaluationMetrics
      type: object
    XPSRegressionEvaluationMetrics:
      description: >-
        Model evaluation metrics for regression problems. It can be used for
        Tables.
      id: XPSRegressionEvaluationMetrics
      type: object
      properties:
        rootMeanSquaredError:
          description: Root Mean Squared Error (RMSE).
          type: number
          format: float
        regressionMetricsEntries:
          items:
            $ref: '#/components/schemas/XPSRegressionMetricsEntry'
          type: array
          description: >-
            A list of actual versus predicted points for the model being
            evaluated.
        rSquared:
          description: R squared.
          type: number
          format: float
        meanAbsoluteError:
          format: float
          type: number
          description: Mean Absolute Error (MAE).
        rootMeanSquaredLogError:
          type: number
          description: Root mean squared log error.
          format: float
        meanAbsolutePercentageError:
          description: >-
            Mean absolute percentage error. Only set if all ground truth values
            are positive.
          type: number
          format: float
    XPSXpsOperationMetadata:
      type: object
      id: XPSXpsOperationMetadata
      properties:
        videoBatchPredictOperationMetadata:
          $ref: '#/components/schemas/XPSVideoBatchPredictOperationMetadata'
        videoTrainingOperationMetadata:
          $ref: '#/components/schemas/XPSVideoTrainingOperationMetadata'
        reportingMetrics:
          $ref: '#/components/schemas/XPSReportingMetrics'
          description: >-
            Metrics for the operation. By the time the operation is terminated
            (whether succeeded or failed) as returned from XPS, AutoML BE
            assumes the metrics are finalized. AutoML BE transparently posts the
            metrics to Chemist if it's not empty, regardless of the response
            content or error type. If user is supposed to be charged in case of
            cancellation/error, this field should be set. In the case where the
            type of LRO doesn't require any billing, this field should be left
            unset.
        exampleCount:
          format: int64
          description: >-
            Optional. XPS server can opt to provide example count of the long
            running operation (e.g. training, data importing, batch prediction).
          type: string
        tablesTrainingOperationMetadata:
          $ref: '#/components/schemas/XPSTablesTrainingOperationMetadata'
        visionTrainingOperationMetadata:
          $ref: '#/components/schemas/XPSVisionTrainingOperationMetadata'
    XPSTablesConfidenceMetricsEntry:
      type: object
      properties:
        falseNegativeCount:
          format: int64
          description: False negative count.
          type: string
        trueNegativeCount:
          description: True negative count.
          type: string
          format: int64
        f1Score:
          type: number
          format: double
          description: >-
            The harmonic mean of recall and precision. (2 * precision * recall)
            / (precision + recall)
        confidenceThreshold:
          type: number
          format: double
          description: The confidence threshold value used to compute the metrics.
        precision:
          type: number
          format: double
          description: 'Precision = #true positives / (#true positives + #false positives).'
        falsePositiveCount:
          type: string
          description: False positive count.
          format: int64
        recall:
          description: 'Recall = #true positives / (#true positives + #false negatives).'
          type: number
          format: double
        falsePositiveRate:
          type: number
          format: double
          description: 'FPR = #false positives / (#false positives + #true negatives)'
        truePositiveCount:
          format: int64
          type: string
          description: True positive count.
        truePositiveRate:
          format: double
          description: 'TPR = #true positives / (#true positives + #false negatvies)'
          type: number
      id: XPSTablesConfidenceMetricsEntry
      description: Metrics for a single confidence threshold.
    AnalyzeEntitiesResponse:
      description: The entity analysis response message.
      properties:
        languageSupported:
          type: boolean
          description: >-
            Whether the language is officially supported. The API may still
            return a response when the language is not supported, but it is on a
            best effort basis.
        languageCode:
          type: string
          description: >-
            The language of the text, which will be the same as the language
            specified in the request or, if not specified, the
            automatically-detected language. See Document.language field for
            more details.
        entities:
          items:
            $ref: '#/components/schemas/Entity'
          description: The recognized entities in the input document.
          type: array
      type: object
      id: AnalyzeEntitiesResponse
    XPSVisualization:
      description: Visualization configurations for image explanation.
      deprecated: true
      properties:
        colorMap:
          description: >-
            The color scheme used for the highlighted areas. Defaults to
            PINK_GREEN for Integrated Gradients attribution, which shows
            positive attributions in green and negative in pink. Defaults to
            VIRIDIS for XRAI attribution, which highlights the most influential
            regions in yellow and the least influential in blue.
          enumDescriptions:
            - Should not be used.
            - 'Positive: green. Negative: pink.'
            - >-
              Viridis color map: A perceptually uniform color mapping which is
              easier to see by those with colorblindness and progresses from
              yellow to green to blue. Positive: yellow. Negative: blue.
            - 'Positive: red. Negative: red.'
            - 'Positive: green. Negative: green.'
            - 'Positive: green. Negative: red.'
            - PiYG palette.
          type: string
          enum:
            - COLOR_MAP_UNSPECIFIED
            - PINK_GREEN
            - VIRIDIS
            - RED
            - GREEN
            - RED_GREEN
            - PINK_WHITE_GREEN
        clipPercentLowerbound:
          format: float
          type: number
          description: >-
            Excludes attributions below the specified percentile, from the
            highlighted areas. Defaults to 62.
        type:
          type: string
          description: >-
            Type of the image visualization. Only applicable to Integrated
            Gradients attribution. OUTLINES shows regions of attribution, while
            PIXELS shows per-pixel attribution. Defaults to OUTLINES.
          enumDescriptions:
            - Should not be used.
            - Shows which pixel contributed to the image prediction.
            - >-
              Shows which region contributed to the image prediction by
              outlining the region.
          enum:
            - TYPE_UNSPECIFIED
            - PIXELS
            - OUTLINES
        clipPercentUpperbound:
          description: >-
            Excludes attributions above the specified percentile from the
            highlighted areas. Using the clip_percent_upperbound and
            clip_percent_lowerbound together can be useful for filtering out
            noise and making it easier to see areas of strong attribution.
            Defaults to 99.9.
          type: number
          format: float
        overlayType:
          description: >-
            How the original image is displayed in the visualization. Adjusting
            the overlay can help increase visual clarity if the original image
            makes it difficult to view the visualization. Defaults to NONE.
          type: string
          enum:
            - OVERLAY_TYPE_UNSPECIFIED
            - NONE
            - ORIGINAL
            - GRAYSCALE
            - MASK_BLACK
          enumDescriptions:
            - Default value. This is the same as NONE.
            - No overlay.
            - The attributions are shown on top of the original image.
            - >-
              The attributions are shown on top of grayscaled version of the
              original image.
            - >-
              The attributions are used as a mask to reveal predictive parts of
              the image and hide the un-predictive parts.
        polarity:
          description: >-
            Whether to only highlight pixels with positive contributions,
            negative or both. Defaults to POSITIVE.
          type: string
          enumDescriptions:
            - Default value. This is the same as POSITIVE.
            - >-
              Highlights the pixels/outlines that were most influential to the
              model's prediction.
            - >-
              Setting polarity to negative highlights areas that does not lead
              to the models's current prediction.
            - Shows both positive and negative attributions.
          enum:
            - POLARITY_UNSPECIFIED
            - POSITIVE
            - NEGATIVE
            - BOTH
      type: object
      id: XPSVisualization
    XPSStructStats:
      properties:
        commonStats:
          $ref: '#/components/schemas/XPSCommonStats'
        fieldStats:
          type: object
          description: >-
            Map from a field name of the struct to data stats aggregated over
            series of all data in that field across all the structs.
          additionalProperties:
            $ref: '#/components/schemas/XPSDataStats'
      type: object
      description: The data statistics of a series of STRUCT values.
      id: XPSStructStats
    XPSPreprocessResponse:
      properties:
        speechPreprocessResp:
          $ref: '#/components/schemas/XPSSpeechPreprocessResponse'
        translationPreprocessResp:
          $ref: '#/components/schemas/XPSTranslationPreprocessResponse'
        outputExampleSet:
          $ref: '#/components/schemas/XPSExampleSet'
          description: >-
            Preprocessed examples, that are to be imported into AutoML storage.
            This should point to RecordIO file(s) of PreprocessedExample
            messages. The PreprocessedExample.mvp_training_data-s returned here
            are later verbatim passed to Train() call in
            TrainExample.mvp_training_data.
        tablesPreprocessResponse:
          $ref: '#/components/schemas/XPSTablesPreprocessResponse'
      id: XPSPreprocessResponse
      type: object
      description: 'Next ID: 8'
    XPSImageModelServingSpecModelThroughputEstimation:
      type: object
      id: XPSImageModelServingSpecModelThroughputEstimation
      properties:
        computeEngineAcceleratorType:
          enum:
            - UNSPECIFIED
            - NVIDIA_TESLA_K80
            - NVIDIA_TESLA_P100
            - NVIDIA_TESLA_V100
            - NVIDIA_TESLA_P4
            - NVIDIA_TESLA_T4
            - NVIDIA_TESLA_A100
            - NVIDIA_A100_80GB
            - NVIDIA_L4
            - NVIDIA_H100_80GB
            - NVIDIA_H100_MEGA_80GB
            - TPU_V2
            - TPU_V3
            - TPU_V4_POD
            - TPU_V5_LITEPOD
          type: string
          enumDescriptions:
            - ''
            - Nvidia Tesla K80 GPU.
            - Nvidia Tesla P100 GPU.
            - Nvidia Tesla V100 GPU.
            - Nvidia Tesla P4 GPU.
            - Nvidia Tesla T4 GPU.
            - Nvidia Tesla A100 GPU.
            - Nvidia A100 80GB GPU.
            - Nvidia L4 GPU.
            - Nvidia H100 80Gb GPU.
            - Nvidia H100 80Gb GPU.
            - TPU v2 (JellyFish).
            - TPU v3 (DragonFish).
            - TPU_v4 (PufferFish).
            - TPU v5 Lite Pods.
        latencyInMilliseconds:
          format: double
          description: Estimated latency.
          type: number
        nodeQps:
          type: number
          description: The approximate qps a deployed node can serve.
          format: double
        servomaticPartitionType:
          enum:
            - PARTITION_TYPE_UNSPECIFIED
            - PARTITION_ZERO
            - PARTITION_REDUCED_HOMING
            - PARTITION_JELLYFISH
            - PARTITION_CPU
            - PARTITION_CUSTOM_STORAGE_CPU
          enumDescriptions:
            - ''
            - The default partition.
            - >-
              It has significantly lower replication than partition-0 and is
              located in the US only. It also has a larger model size limit and
              higher default RAM quota than partition-0. Customers with batch
              traffic, US-based traffic, or very large models should use this
              partition. Capacity in this partition is significantly cheaper
              than partition-0.
            - >-
              To be used by customers with Jellyfish-accelerated ops. See
              go/servomatic-jellyfish for details.
            - The partition used by regionalized servomatic cloud regions.
            - The partition used for loading models from custom storage.
          type: string
    XPSTablesModelStructureModelParameters:
      description: Model hyper-parameters for a model.
      type: object
      id: XPSTablesModelStructureModelParameters
      properties:
        hyperparameters:
          type: array
          items:
            $ref: >-
              #/components/schemas/XPSTablesModelStructureModelParametersParameter
    XPSTfLiteFormat:
      properties: {}
      id: XPSTfLiteFormat
      type: object
      description: >-
        LINT.IfChange A model format used for mobile and IoT devices. See
        https://www.tensorflow.org/lite.
    XPSConfusionMatrix:
      type: object
      id: XPSConfusionMatrix
      description: Confusion matrix of the model running the classification.
      properties:
        sentimentLabel:
          description: >-
            Sentiment labels used in the confusion matrix. Set only for text
            sentiment models. For AutoML Text Revamp, use
            `annotation_spec_id_token` instead and leave this field empty.
          type: array
          items:
            format: int32
            type: integer
        category:
          items:
            format: int32
            type: integer
          description: >-
            Category (mainly for segmentation). Set only for image segmentation
            models. Note: uCAIP Image Segmentation should use
            annotation_spec_id_token.
          type: array
        annotationSpecIdToken:
          type: array
          items:
            type: string
          description: >-
            For the following three repeated fields, only one is intended to be
            set. annotation_spec_id_token is preferable to be set. ID tokens of
            the annotation specs used in the confusion matrix.
        row:
          type: array
          items:
            $ref: '#/components/schemas/XPSConfusionMatrixRow'
          description: >-
            Rows in the confusion matrix. The number of rows is equal to the
            size of `annotation_spec_id_token`. `row[i].value[j]` is the number
            of examples that have ground truth of the
            `annotation_spec_id_token[i]` and are predicted as
            `annotation_spec_id_token[j]` by the model being evaluated.
    XPSResponseExplanationParameters:
      type: object
      id: XPSResponseExplanationParameters
      deprecated: true
      properties:
        xraiAttribution:
          $ref: '#/components/schemas/XPSXraiAttribution'
          description: >-
            An attribution method that redistributes Integrated Gradients
            attribution to segmented regions, taking advantage of the model's
            fully differentiable structure. Refer to this paper for more
            details: https://arxiv.org/abs/1906.02825 XRAI currently performs
            better on natural images, like a picture of a house or an animal. If
            the images are taken in artificial environments, like a lab or
            manufacturing line, or from diagnostic equipment, like x-rays or
            quality-control cameras, use Integrated Gradients instead.
        integratedGradientsAttribution:
          $ref: '#/components/schemas/XPSIntegratedGradientsAttribution'
          description: >-
            An attribution method that computes Aumann-Shapley values taking
            advantage of the model's fully differentiable structure. Refer to
            this paper for more details: https://arxiv.org/abs/1703.01365
    ModerateTextRequest:
      properties:
        document:
          $ref: '#/components/schemas/Document'
          description: Required. Input document.
        modelVersion:
          type: string
          enumDescriptions:
            - The default model version.
            - >-
              Use the v1 model, this model is used by default when not provided.
              The v1 model only returns probability (confidence) score for each
              category.
            - >-
              Use the v2 model. The v2 model only returns probability
              (confidence) score for each category, and returns severity score
              for a subset of the categories.
          description: Optional. The model version to use for ModerateText.
          enum:
            - MODEL_VERSION_UNSPECIFIED
            - MODEL_VERSION_1
            - MODEL_VERSION_2
      id: ModerateTextRequest
      type: object
      description: The document moderation request message.
    XPSImageObjectDetectionModelSpec:
      id: XPSImageObjectDetectionModelSpec
      properties:
        exportModelSpec:
          $ref: '#/components/schemas/XPSImageExportModelSpec'
        maxBoundingBoxCount:
          type: string
          format: int64
          description: Max number of bounding box.
        modelServingSpec:
          $ref: '#/components/schemas/XPSImageModelServingSpec'
        classCount:
          format: int64
          description: Total number of classes.
          type: string
        trainCostNodeSeconds:
          description: >-
            The actual train cost of creating this model, expressed in node
            seconds, i.e. 3,600 value in this field means 1 node hour.
          format: int64
          type: string
        modelArtifactSpec:
          description: '## The fields below are only populated under uCAIP request scope.'
          $ref: '#/components/schemas/XPSImageModelArtifactSpec'
        stopReason:
          type: string
          description: >-
            Stop reason for training job, e.g. 'TRAIN_BUDGET_REACHED',
            'MODEL_CONVERGED'.
          enumDescriptions:
            - ''
            - ''
            - Model fully converged, can not be resumbed training.
            - >-
              Model early converged, can be further trained till full
              convergency.
          enum:
            - TRAIN_STOP_REASON_UNSPECIFIED
            - TRAIN_STOP_REASON_BUDGET_REACHED
            - TRAIN_STOP_REASON_MODEL_CONVERGED
            - TRAIN_STOP_REASON_MODEL_EARLY_STOPPED
      type: object
    XPSTrainingObjectivePoint:
      type: object
      properties:
        createTime:
          type: string
          description: The time at which this point was recorded.
          format: google-datetime
        value:
          type: number
          description: The objective value when this point was recorded.
          format: float
      id: XPSTrainingObjectivePoint
    XPSMetricEntry:
      properties:
        doubleValue:
          format: double
          type: number
          description: A double value.
        int64Value:
          type: string
          description: A signed 64-bit integer value.
          format: int64
        systemLabels:
          type: array
          description: Billing system labels for this (metric, value) pair.
          items:
            $ref: '#/components/schemas/XPSMetricEntryLabel'
        metricName:
          description: The metric name defined in the service configuration.
          type: string
        argentumMetricId:
          type: string
          description: >-
            For billing metrics that are using legacy sku's, set the legacy
            billing metric id here. This will be sent to Chemist as the
            "cloudbilling.googleapis.com/argentum_metric_id" label. Otherwise
            leave empty.
      type: object
      id: XPSMetricEntry
    XPSStringStats:
      id: XPSStringStats
      properties:
        topUnigramStats:
          items:
            $ref: '#/components/schemas/XPSStringStatsUnigramStats'
          description: >-
            The statistics of the top 20 unigrams, ordered by
            StringStats.UnigramStats.count.
          type: array
        commonStats:
          $ref: '#/components/schemas/XPSCommonStats'
      description: The data statistics of a series of STRING values.
      type: object
    XPSSpeechEvaluationMetricsSubModelEvaluationMetric:
      id: XPSSpeechEvaluationMetricsSubModelEvaluationMetric
      type: object
      properties:
        isEnhancedModel:
          description: >-
            If true then it means we have an enhanced version of the biasing
            models.
          type: boolean
        numDeletions:
          format: int32
          type: integer
        numWords:
          description: Number of words over which the word error rate was computed.
          format: int32
          type: integer
        sentenceAccuracy:
          format: double
          type: number
          description: Below fields are used for debugging purposes
        wer:
          format: double
          type: number
          description: Word error rate (standard error metric used for speech recognition).
        numUtterances:
          description: Number of utterances used in the wer computation.
          format: int32
          type: integer
        numSubstitutions:
          format: int32
          type: integer
        numInsertions:
          type: integer
          format: int32
        biasingModelType:
          description: Type of the biasing model.
          enumDescriptions:
            - ''
            - Build biasing model on top of COMMAND_AND_SEARCH model
            - Build biasing model on top of PHONE_CALL model
            - Build biasing model on top of VIDEO model
            - Build biasing model on top of DEFAULT model
          enum:
            - BIASING_MODEL_TYPE_UNSPECIFIED
            - COMMAND_AND_SEARCH
            - PHONE_CALL
            - VIDEO
            - DEFAULT
          type: string
    AnalyzeEntitiesRequest:
      description: The entity analysis request message.
      id: AnalyzeEntitiesRequest
      properties:
        encodingType:
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
          description: The encoding type used by the API to calculate offsets.
          enumDescriptions:
            - >-
              If `EncodingType` is not specified, encoding-dependent information
              (such as `begin_offset`) will be set at `-1`.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-8 encoding of the input. C++ and Go
              are examples of languages that use this encoding natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-16 encoding of the input. Java and
              JavaScript are examples of languages that use this encoding
              natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-32 encoding of the input. Python is an
              example of a language that uses this encoding natively.
          type: string
        document:
          description: Required. Input document.
          $ref: '#/components/schemas/Document'
      type: object
    ClassifyTextRequest:
      id: ClassifyTextRequest
      description: The document classification request message.
      type: object
      properties:
        document:
          $ref: '#/components/schemas/Document'
          description: Required. Input document.
    XPSResponseExplanationMetadata:
      id: XPSResponseExplanationMetadata
      type: object
      properties:
        outputs:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/XPSResponseExplanationMetadataOutputMetadata'
          description: Metadata of the output.
        inputs:
          description: Metadata of the input.
          type: object
          additionalProperties:
            $ref: '#/components/schemas/XPSResponseExplanationMetadataInputMetadata'
      deprecated: true
    XPSImageObjectDetectionEvaluationMetrics:
      type: object
      description: >-
        Model evaluation metrics for image object detection problems. Evaluates
        prediction quality of labeled bounding boxes.
      id: XPSImageObjectDetectionEvaluationMetrics
      properties:
        boundingBoxMeanAveragePrecision:
          format: float
          type: number
          description: >-
            The single metric for bounding boxes evaluation: the
            mean_average_precision averaged over all
            bounding_box_metrics_entries.
        boundingBoxMetricsEntries:
          type: array
          items:
            $ref: '#/components/schemas/XPSBoundingBoxMetricsEntry'
          description: >-
            The bounding boxes match metrics for each Intersection-over-union
            threshold 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 and each label
            confidence threshold 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 pair.
        evaluatedBoundingBoxCount:
          description: >-
            The total number of bounding boxes (i.e. summed over all images) the
            ground truth used to create this evaluation had.
          type: integer
          format: int32
    XPSMetricEntryLabel:
      properties:
        labelName:
          type: string
          description: The name of the label.
        labelValue:
          type: string
          description: The value of the label.
      id: XPSMetricEntryLabel
      type: object
    XPSTablesModelStructureModelParametersParameter:
      properties:
        floatValue:
          type: number
          description: Float type parameter value.
          format: double
        name:
          description: Parameter name.
          type: string
        stringValue:
          description: String type parameter value.
          type: string
        intValue:
          type: string
          description: Integer type parameter value.
          format: int64
      id: XPSTablesModelStructureModelParametersParameter
      type: object
    AnnotateTextResponse:
      description: The text annotations response message.
      properties:
        languageSupported:
          type: boolean
          description: >-
            Whether the language is officially supported by all requested
            features. The API may still return a response when the language is
            not supported, but it is on a best effort basis.
        categories:
          items:
            $ref: '#/components/schemas/ClassificationCategory'
          description: Categories identified in the input document.
          type: array
        languageCode:
          type: string
          description: >-
            The language of the text, which will be the same as the language
            specified in the request or, if not specified, the
            automatically-detected language. See Document.language field for
            more details.
        documentSentiment:
          $ref: '#/components/schemas/Sentiment'
          description: >-
            The overall sentiment for the document. Populated if the user
            enables AnnotateTextRequest.Features.extract_document_sentiment.
        moderationCategories:
          items:
            $ref: '#/components/schemas/ClassificationCategory'
          description: Harmful and sensitive categories identified in the input document.
          type: array
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
          description: >-
            Entities, along with their semantic information, in the input
            document. Populated if the user enables
            AnnotateTextRequest.Features.extract_entities or
            AnnotateTextRequest.Features.extract_entity_sentiment.
        sentences:
          type: array
          items:
            $ref: '#/components/schemas/Sentence'
          description: >-
            Sentences in the input document. Populated if the user enables
            AnnotateTextRequest.Features.extract_document_sentiment.
      id: AnnotateTextResponse
      type: object
    XPSVideoBatchPredictOperationMetadata:
      id: XPSVideoBatchPredictOperationMetadata
      properties:
        outputExamples:
          items:
            type: string
          description: >-
            All the partial batch prediction results that are completed at the
            moment. Output examples are sorted by completion time. The order
            will not be changed. Each output example should be the path of a
            single RecordIO file of AnnotatedExamples.
          type: array
      type: object
    XPSEvaluationMetricsSet:
      id: XPSEvaluationMetricsSet
      properties:
        evaluationMetrics:
          items:
            $ref: '#/components/schemas/XPSEvaluationMetrics'
          type: array
          description: >-
            Inline EvaluationMetrics - should be relatively small. For passing
            large quantities of exhaustive metrics, use file_spec.
        numEvaluationMetrics:
          type: string
          format: int64
          description: >-
            Number of the evaluation metrics (usually one per label plus
            overall).
        fileSpec:
          $ref: '#/components/schemas/XPSFileSpec'
          description: >-
            File spec containing evaluation metrics of a model, must point to
            RecordIO file(s) of intelligence.cloud.automl.xps.EvaluationMetrics
            messages.
      description: Specifies location of model evaluation metrics.
      type: object
    XPSTranslationPreprocessResponse:
      description: Translation preprocess response.
      properties:
        validExampleCount:
          type: string
          description: Total valid example count.
          format: int64
        parsedExampleCount:
          type: string
          format: int64
          description: Total example count parsed.
      type: object
      id: XPSTranslationPreprocessResponse
    XPSVideoObjectTrackingEvaluationMetrics:
      properties:
        evaluatedBoundingboxCount:
          type: integer
          description: The number of bounding boxes used for model evaluation.
          format: int32
        boundingBoxMeanAveragePrecision:
          type: number
          description: >-
            Output only. The single metric for bounding boxes evaluation: the
            mean_average_precision averaged over all
            bounding_box_metrics_entries.
          format: float
        trackMeanMismatchRate:
          type: number
          format: float
          description: >-
            Output only. The single metric for tracking consistency evaluation:
            the mean_mismatch_rate averaged over all track_metrics_entries.
        trackMetricsEntries:
          description: >-
            Output only. The tracks match metrics for each
            Intersection-over-union threshold
            0.05,0.10,...,0.95,0.96,0.97,0.98,0.99.
          items:
            $ref: '#/components/schemas/XPSTrackMetricsEntry'
          type: array
        evaluatedTrackCount:
          format: int32
          description: The number of tracks used for model evaluation.
          type: integer
        trackMeanAveragePrecision:
          type: number
          description: >-
            Output only. The single metric for tracks accuracy evaluation: the
            mean_average_precision averaged over all track_metrics_entries.
          format: float
        boundingBoxMetricsEntries:
          items:
            $ref: '#/components/schemas/XPSBoundingBoxMetricsEntry'
          description: >-
            Output only. The bounding boxes match metrics for each
            Intersection-over-union threshold
            0.05,0.10,...,0.95,0.96,0.97,0.98,0.99.
          type: array
        evaluatedFrameCount:
          format: int32
          type: integer
          description: The number of video frames used for model evaluation.
        trackMeanBoundingBoxIou:
          description: >-
            Output only. The single metric for tracks bounding box iou
            evaluation: the mean_bounding_box_iou averaged over all
            track_metrics_entries.
          type: number
          format: float
      type: object
      description: 'Model evaluation metrics for ObjectTracking problems. Next tag: 10.'
      id: XPSVideoObjectTrackingEvaluationMetrics
    AnnotateTextRequestFeatures:
      description: >-
        All available features. Setting each one to true will enable that
        specific analysis for the input.
      type: object
      id: AnnotateTextRequestFeatures
      properties:
        classifyText:
          description: Optional. Classify the full document into categories.
          type: boolean
        extractEntities:
          type: boolean
          description: Optional. Extract entities.
        extractDocumentSentiment:
          type: boolean
          description: Optional. Extract document-level sentiment.
        moderateText:
          description: >-
            Optional. Moderate the document for harmful and sensitive
            categories.
          type: boolean
    XPSXraiAttribution:
      deprecated: true
      id: XPSXraiAttribution
      description: >-
        An explanation method that redistributes Integrated Gradients
        attributions to segmented regions, taking advantage of the model's fully
        differentiable structure. Refer to this paper for more details:
        https://arxiv.org/abs/1906.02825 Only supports image Models (modality is
        IMAGE).
      properties:
        stepCount:
          description: >-
            The number of steps for approximating the path integral. A good
            value to start is 50 and gradually increase until the sum to diff
            property is met within the desired error range. Valid range of its
            value is [1, 100], inclusively.
          format: int32
          type: integer
      type: object
    XPSExampleSet:
      properties:
        fingerprint:
          format: int64
          description: Fingerprint of the example set.
          type: string
        fileSpec:
          $ref: '#/components/schemas/XPSFileSpec'
          description: File spec of the examples or input sources.
        numInputSources:
          description: Number of input sources.
          type: string
          format: int64
        numExamples:
          type: string
          format: int64
          description: Number of examples.
      type: object
      id: XPSExampleSet
      description: Set of examples or input sources.
    XPSTableSpec:
      properties:
        rowCount:
          type: string
          description: The number of rows in the table.
          format: int64
        columnSpecs:
          additionalProperties:
            $ref: '#/components/schemas/XPSColumnSpec'
          description: Mapping from column id to column spec.
          type: object
        timeColumnId:
          format: int32
          type: integer
          description: The id of the time column.
        importedDataSizeInBytes:
          format: int64
          description: The total size of imported data of the table.
          type: string
        validRowCount:
          type: string
          format: int64
          description: The number of valid rows.
      type: object
      id: XPSTableSpec
    XPSRegressionMetricsEntry:
      description: A pair of actual & observed values for the model being evaluated.
      id: XPSRegressionMetricsEntry
      type: object
      properties:
        trueValue:
          type: number
          description: The actual target value for a row in the dataset.
          format: float
        predictedValue:
          description: The observed value for a row in the dataset.
          type: number
          format: float
    XPSReportingMetrics:
      properties:
        metricEntries:
          type: array
          description: >-
            One entry per metric name. The values must be aggregated per metric
            name.
          items:
            $ref: '#/components/schemas/XPSMetricEntry'
        effectiveTrainingDuration:
          format: google-duration
          description: >-
            The effective time training used. If set, this is used for quota
            management and billing. Deprecated. AutoML BE doesn't use this.
            Don't set.
          deprecated: true
          type: string
      type: object
      id: XPSReportingMetrics
    XPSIntegratedGradientsAttribution:
      id: XPSIntegratedGradientsAttribution
      description: >-
        An attribution method that computes the Aumann-Shapley value taking
        advantage of the model's fully differentiable structure. Refer to this
        paper for more details: https://arxiv.org/abs/1703.01365
      deprecated: true
      type: object
      properties:
        stepCount:
          format: int32
          type: integer
          description: >-
            The number of steps for approximating the path integral. A good
            value to start is 50 and gradually increase until the sum to diff
            property is within the desired error range. Valid range of its value
            is [1, 100], inclusively.
    XPSTuningTrial:
      id: XPSTuningTrial
      type: object
      description: >-
        Metrics for a tuning job generated, will get forwarded to Stackdriver as
        model tuning logs. Setting this as a standalone message out of
        CreateModelMetadata to avoid confusion as we expose this message only to
        users.
      properties:
        modelStructure:
          $ref: '#/components/schemas/XPSTablesModelStructure'
          description: Model parameters for the trial.
        trainingObjectivePoint:
          description: The optimization objective evaluation of the eval split data.
          $ref: '#/components/schemas/XPSTrainingObjectivePoint'
    XPSFileSpec:
      properties:
        fileFormat:
          type: string
          enumDeprecated:
            - false
            - true
            - false
            - false
            - false
            - false
          enum:
            - FILE_FORMAT_UNKNOWN
            - FILE_FORMAT_SSTABLE
            - FILE_FORMAT_TRANSLATION_RKV
            - FILE_FORMAT_RECORDIO
            - FILE_FORMAT_RAW_CSV
            - FILE_FORMAT_RAW_CAPACITOR
          enumDescriptions:
            - ''
            - ''
            - >-
              Internal format for parallel text data used by Google Translate.
              go/rkvtools
            - ''
            - >-
              Only the lexicographically first file described by the file_spec
              contains the header line.
            - ''
        singleFilePath:
          description: Deprecated. Use file_spec.
          type: string
          deprecated: true
        fileSpec:
          type: string
          description: >-
            Single file path, or file pattern of format
            "/path/to/file@shard_count". E.g. /cns/cell-d/somewhere/file@2 is
            expanded to two files: /cns/cell-d/somewhere/file-00000-of-00002 and
            /cns/cell-d/somewhere/file-00001-of-00002.
        directoryPath:
          type: string
          deprecated: true
          description: Deprecated. Use file_spec.
      description: >-
        Spec of input and output files, on external file systems (CNS, GCS,
        etc).
      type: object
      id: XPSFileSpec
    XPSSpeechModelSpecSubModelSpec:
      id: XPSSpeechModelSpecSubModelSpec
      properties:
        clientId:
          type: string
          description: In S3, Recognition ClientContextId.client_id
        isEnhancedModel:
          type: boolean
          description: >-
            If true then it means we have an enhanced version of the biasing
            models.
        contextId:
          type: string
          description: In S3, Recognition ClientContextId.context_id
        biasingModelType:
          type: string
          enumDescriptions:
            - ''
            - Build biasing model on top of COMMAND_AND_SEARCH model
            - Build biasing model on top of PHONE_CALL model
            - Build biasing model on top of VIDEO model
            - Build biasing model on top of DEFAULT model
          enum:
            - BIASING_MODEL_TYPE_UNSPECIFIED
            - COMMAND_AND_SEARCH
            - PHONE_CALL
            - VIDEO
            - DEFAULT
          description: Type of the biasing model.
      type: object
    XPSSpeechPreprocessResponse:
      type: object
      id: XPSSpeechPreprocessResponse
      properties:
        cnsTrainDataPath:
          type: string
          description: >-
            Location of shards of sstables (training data) of DataUtterance
            protos.
        speechPreprocessStats:
          description: Stats associated with the data.
          $ref: '#/components/schemas/XPSSpeechPreprocessStats'
        cnsTestDataPath:
          type: string
          description: Location od shards of sstables (test data) of DataUtterance protos.
        prebuiltModelEvaluationMetrics:
          $ref: '#/components/schemas/XPSSpeechEvaluationMetrics'
          description: >-
            The metrics for prebuilt speech models. They are included here
            because there is no prebuilt speech models stored in the AutoML.
    XPSVideoActionMetricsEntry:
      id: XPSVideoActionMetricsEntry
      properties:
        meanAveragePrecision:
          description: The mean average precision.
          type: number
          format: float
        confidenceMetricsEntries:
          description: >-
            Metrics for each label-match confidence_threshold from
            0.05,0.10,...,0.95,0.96,0.97,0.98,0.99.
          items:
            $ref: >-
              #/components/schemas/XPSVideoActionMetricsEntryConfidenceMetricsEntry
          type: array
        precisionWindowLength:
          type: string
          format: google-duration
          description: >-
            This VideoActionMetricsEntry is calculated based on this prediction
            window length. If the predicted action's timestamp is inside the
            time window whose center is the ground truth action's timestamp with
            this specific length, the prediction result is treated as a true
            positive.
      type: object
      description: The Evaluation metrics entry given a specific precision_window_length.
    XPSVideoActionRecognitionTrainResponse:
      properties:
        trainCostNodeSeconds:
          description: >-
            The actual train cost of creating this model, expressed in node
            seconds, i.e. 3,600 value in this field means 1 node hour.
          format: int64
          type: string
        modelArtifactSpec:
          $ref: '#/components/schemas/XPSVideoModelArtifactSpec'
          description: '## The fields below are only populated under uCAIP request scope.'
      id: XPSVideoActionRecognitionTrainResponse
      type: object
    XPSResponseExplanationMetadataOutputMetadata:
      type: object
      id: XPSResponseExplanationMetadataOutputMetadata
      properties:
        outputTensorName:
          type: string
          description: Name of the output tensor. Only needed in train response.
      description: Metadata of the prediction output to be explained.
    XPSResponseExplanationSpec:
      type: object
      properties:
        parameters:
          $ref: '#/components/schemas/XPSResponseExplanationParameters'
          description: Parameters that configure explaining of the Model's predictions.
        metadata:
          description: Metadata describing the Model's input and output for explanation.
          $ref: '#/components/schemas/XPSResponseExplanationMetadata'
        explanationType:
          type: string
          description: >-
            Explanation type. For AutoML Image Classification models, possible
            values are: * `image-integrated-gradients` * `image-xrai`
      id: XPSResponseExplanationSpec
      deprecated: true
      description: >-
        Specification of Model explanation. Feature-based XAI in AutoML Vision
        ICN is deprecated, see b/288407203 for context.
    TextSpan:
      properties:
        content:
          description: The content of the text span, which is a substring of the document.
          type: string
        beginOffset:
          description: >-
            The API calculates the beginning offset of the content in the
            original document according to the EncodingType specified in the API
            request.
          format: int32
          type: integer
      description: Represents a text span in the input document.
      type: object
      id: TextSpan
    XPSSpeechPreprocessStats:
      type: object
      properties:
        trainSentencesCount:
          type: integer
          description: The number of sentences in the training data set.
          format: int32
        numLogsExamples:
          format: int32
          description: The number of samples found in the previously recorded logs data.
          type: integer
        dataErrors:
          description: Different types of data errors and the counts associated with them.
          type: array
          items:
            $ref: '#/components/schemas/XPSDataErrors'
        trainExamplesCount:
          format: int32
          description: The number of examples labeled as TRAIN by Speech xps server.
          type: integer
        numMachineTranscribedExamples:
          description: The number of rows marked as MACHINE_TRANSCRIBED
          format: int32
          type: integer
        numHumanLabeledExamples:
          type: integer
          description: The number of rows marked HUMAN_LABELLED
          format: int32
        testWordsCount:
          description: The number of words in the test data set.
          format: int32
          type: integer
        trainWordsCount:
          type: integer
          format: int32
          description: The number of words in the training data set.
        testSentencesCount:
          description: The number of sentences in the test data set.
          format: int32
          type: integer
        testExamplesCount:
          type: integer
          description: The number of examples labelled as TEST by Speech xps server.
          format: int32
      id: XPSSpeechPreprocessStats
    GpuMetric:
      id: GpuMetric
      properties:
        gpuType:
          enum:
            - UNKNOWN_GPU_TYPE
            - NVIDIA_TESLA_A100
            - NVIDIA_A100_80GB
            - NVIDIA_TESLA_K80
            - NVIDIA_L4
            - NVIDIA_TESLA_P100
            - NVIDIA_TESLA_P4
            - NVIDIA_TESLA_T4
            - NVIDIA_TESLA_V100
            - NVIDIA_H100_80GB
          description: Required. Type of GPU, e.g. NVIDIA_TESLA_V100.
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
        gpuSec:
          description: Required. Seconds of GPU usage, e.g. 3600.
          format: int64
          type: string
        trackingLabels:
          type: object
          additionalProperties:
            type: string
          description: >-
            Billing tracking labels. They do not contain any user data but only
            the labels set by Vertex Core Infra itself. Tracking labels' keys
            are defined with special format: goog-[\p{Ll}\p{N}]+ E.g. "key":
            "goog-k8s-cluster-name","value": "us-east1-b4rk"
        machineSpec:
          description: Required. Machine spec, e.g. N1_STANDARD_4.
          type: string
          enum:
            - UNKNOWN_MACHINE_SPEC
            - N1_STANDARD_2
            - N1_STANDARD_4
            - N1_STANDARD_8
            - N1_STANDARD_16
            - N1_STANDARD_32
            - N1_STANDARD_64
            - N1_STANDARD_96
            - N1_HIGHMEM_2
            - N1_HIGHMEM_4
            - N1_HIGHMEM_8
            - N1_HIGHMEM_16
            - N1_HIGHMEM_32
            - N1_HIGHMEM_64
            - N1_HIGHMEM_96
            - N1_HIGHCPU_2
            - N1_HIGHCPU_4
            - N1_HIGHCPU_8
            - N1_HIGHCPU_16
            - N1_HIGHCPU_32
            - N1_HIGHCPU_64
            - N1_HIGHCPU_96
            - A2_HIGHGPU_1G
            - A2_HIGHGPU_2G
            - A2_HIGHGPU_4G
            - A2_HIGHGPU_8G
            - A2_MEGAGPU_16G
            - A2_ULTRAGPU_1G
            - A2_ULTRAGPU_2G
            - A2_ULTRAGPU_4G
            - A2_ULTRAGPU_8G
            - A3_HIGHGPU_2G
            - A3_HIGHGPU_4G
            - A3_HIGHGPU_8G
            - A3_MEGAGPU_8G
            - E2_STANDARD_2
            - E2_STANDARD_4
            - E2_STANDARD_8
            - E2_STANDARD_16
            - E2_STANDARD_32
            - E2_HIGHMEM_2
            - E2_HIGHMEM_4
            - E2_HIGHMEM_8
            - E2_HIGHMEM_16
            - E2_HIGHCPU_2
            - E2_HIGHCPU_4
            - E2_HIGHCPU_8
            - E2_HIGHCPU_16
            - E2_HIGHCPU_32
            - N2_STANDARD_2
            - N2_STANDARD_4
            - N2_STANDARD_8
            - N2_STANDARD_16
            - N2_STANDARD_32
            - N2_STANDARD_48
            - N2_STANDARD_64
            - N2_STANDARD_80
            - N2_STANDARD_96
            - N2_STANDARD_128
            - N2_HIGHMEM_2
            - N2_HIGHMEM_4
            - N2_HIGHMEM_8
            - N2_HIGHMEM_16
            - N2_HIGHMEM_32
            - N2_HIGHMEM_48
            - N2_HIGHMEM_64
            - N2_HIGHMEM_80
            - N2_HIGHMEM_96
            - N2_HIGHMEM_128
            - N2_HIGHCPU_2
            - N2_HIGHCPU_4
            - N2_HIGHCPU_8
            - N2_HIGHCPU_16
            - N2_HIGHCPU_32
            - N2_HIGHCPU_48
            - N2_HIGHCPU_64
            - N2_HIGHCPU_80
            - N2_HIGHCPU_96
            - N2D_STANDARD_2
            - N2D_STANDARD_4
            - N2D_STANDARD_8
            - N2D_STANDARD_16
            - N2D_STANDARD_32
            - N2D_STANDARD_48
            - N2D_STANDARD_64
            - N2D_STANDARD_80
            - N2D_STANDARD_96
            - N2D_STANDARD_128
            - N2D_STANDARD_224
            - N2D_HIGHMEM_2
            - N2D_HIGHMEM_4
            - N2D_HIGHMEM_8
            - N2D_HIGHMEM_16
            - N2D_HIGHMEM_32
            - N2D_HIGHMEM_48
            - N2D_HIGHMEM_64
            - N2D_HIGHMEM_80
            - N2D_HIGHMEM_96
            - N2D_HIGHCPU_2
            - N2D_HIGHCPU_4
            - N2D_HIGHCPU_8
            - N2D_HIGHCPU_16
            - N2D_HIGHCPU_32
            - N2D_HIGHCPU_48
            - N2D_HIGHCPU_64
            - N2D_HIGHCPU_80
            - N2D_HIGHCPU_96
            - N2D_HIGHCPU_128
            - N2D_HIGHCPU_224
            - C2_STANDARD_4
            - C2_STANDARD_8
            - C2_STANDARD_16
            - C2_STANDARD_30
            - C2_STANDARD_60
            - C2D_STANDARD_2
            - C2D_STANDARD_4
            - C2D_STANDARD_8
            - C2D_STANDARD_16
            - C2D_STANDARD_32
            - C2D_STANDARD_56
            - C2D_STANDARD_112
            - C2D_HIGHCPU_2
            - C2D_HIGHCPU_4
            - C2D_HIGHCPU_8
            - C2D_HIGHCPU_16
            - C2D_HIGHCPU_32
            - C2D_HIGHCPU_56
            - C2D_HIGHCPU_112
            - C2D_HIGHMEM_2
            - C2D_HIGHMEM_4
            - C2D_HIGHMEM_8
            - C2D_HIGHMEM_16
            - C2D_HIGHMEM_32
            - C2D_HIGHMEM_56
            - C2D_HIGHMEM_112
            - G2_STANDARD_4
            - G2_STANDARD_8
            - G2_STANDARD_12
            - G2_STANDARD_16
            - G2_STANDARD_24
            - G2_STANDARD_32
            - G2_STANDARD_48
            - G2_STANDARD_96
            - C3_STANDARD_4
            - C3_STANDARD_8
            - C3_STANDARD_22
            - C3_STANDARD_44
            - C3_STANDARD_88
            - C3_STANDARD_176
            - C3_HIGHCPU_4
            - C3_HIGHCPU_8
            - C3_HIGHCPU_22
            - C3_HIGHCPU_44
            - C3_HIGHCPU_88
            - C3_HIGHCPU_176
            - C3_HIGHMEM_4
            - C3_HIGHMEM_8
            - C3_HIGHMEM_22
            - C3_HIGHMEM_44
            - C3_HIGHMEM_88
            - C3_HIGHMEM_176
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
      type: object
    XPSImageClassificationTrainResponse:
      type: object
      properties:
        stopReason:
          enumDescriptions:
            - ''
            - ''
            - Model fully converged, can not be resumbed training.
            - >-
              Model early converged, can be further trained till full
              convergency.
          enum:
            - TRAIN_STOP_REASON_UNSPECIFIED
            - TRAIN_STOP_REASON_BUDGET_REACHED
            - TRAIN_STOP_REASON_MODEL_CONVERGED
            - TRAIN_STOP_REASON_MODEL_EARLY_STOPPED
          type: string
          description: >-
            Stop reason for training job, e.g. 'TRAIN_BUDGET_REACHED',
            'MODEL_CONVERGED', 'MODEL_EARLY_STOPPED'.
        modelServingSpec:
          $ref: '#/components/schemas/XPSImageModelServingSpec'
        modelArtifactSpec:
          $ref: '#/components/schemas/XPSImageModelArtifactSpec'
          description: '## The fields below are only populated under uCAIP request scope.'
        exportModelSpec:
          description: >-
            Information of downloadable models that are pre-generated as part of
            training flow and will be persisted in AutoMl backend. Populated for
            AutoMl requests.
          $ref: '#/components/schemas/XPSImageExportModelSpec'
        trainCostInNodeTime:
          description: >-
            The actual cost to create this model. - For edge type model, the
            cost is expressed in node hour. - For cloud type model,the cost is
            expressed in compute hour. - Populated for models created before GA.
            To be deprecated after GA.
          format: google-duration
          type: string
        classCount:
          description: Total number of classes.
          format: int64
          type: string
        trainCostNodeSeconds:
          format: int64
          description: >-
            The actual training cost, expressed in node seconds. Populated for
            models trained in node time.
          type: string
      id: XPSImageClassificationTrainResponse
    XPSBoundingBoxMetricsEntry:
      description: >-
        Bounding box matching model metrics for a single intersection-over-union
        threshold and multiple label match confidence thresholds.
      type: object
      properties:
        meanAveragePrecision:
          type: number
          format: float
          description: The mean average precision.
        iouThreshold:
          format: float
          type: number
          description: >-
            The intersection-over-union threshold value used to compute this
            metrics entry.
        confidenceMetricsEntries:
          items:
            $ref: >-
              #/components/schemas/XPSBoundingBoxMetricsEntryConfidenceMetricsEntry
          type: array
          description: >-
            Metrics for each label-match confidence_threshold from
            0.05,0.10,...,0.95,0.96,0.97,0.98,0.99.
      id: XPSBoundingBoxMetricsEntry
    XPSColumnSpecForecastingMetadata:
      type: object
      properties:
        columnType:
          enum:
            - COLUMN_TYPE_UNSPECIFIED
            - KEY
            - KEY_METADATA
            - TIME_SERIES_AVAILABLE_PAST_ONLY
            - TIME_SERIES_AVAILABLE_PAST_AND_FUTURE
          description: The type of the column for FORECASTING model training purposes.
          enumDescriptions:
            - An un-set value of this enum.
            - Key columns are used to identify timeseries.
            - >-
              This column contains information describing static properties of
              the entities identified by the key column(s) (e.g. city's ZIP
              code).
            - >-
              This column contains information for the given entity, at any time
              poinrt, they are only available in the time series before.
            - >-
              This column contains information for the given entity is known
              both for the past and the sufficiently far future.
          type: string
      id: XPSColumnSpecForecastingMetadata
      description: >-
        ===========================================================================
        # The fields below are used exclusively for Forecasting.
    XPSTfSavedModelFormat:
      description: A tensorflow model format in SavedModel format.
      properties: {}
      id: XPSTfSavedModelFormat
      type: object
    XPSSpeechModelSpec:
      id: XPSSpeechModelSpec
      type: object
      properties:
        language:
          type: string
        datasetId:
          format: int64
          type: string
          description: >-
            Required for speech xps backend. Speech xps has to use dataset_id
            and model_id as the primary key in db so that speech API can query
            the db directly.
        subModelSpecs:
          description: Model specs for all submodels contained in this model.
          type: array
          items:
            $ref: '#/components/schemas/XPSSpeechModelSpecSubModelSpec'
    XPSTablesRegressionMetrics:
      type: object
      description: Metrics for Tables regression problems.
      id: XPSTablesRegressionMetrics
      properties:
        regressionMetricsEntries:
          items:
            $ref: '#/components/schemas/XPSRegressionMetricsEntry'
          description: >-
            A list of actual versus predicted points for the model being
            evaluated.
          type: array
        meanAbsolutePercentageError:
          description: >-
            Mean absolute percentage error, only set if all of the target
            column's values are positive.
          format: double
          type: number
        rootMeanSquaredLogError:
          description: Root mean squared log error.
          format: double
          type: number
        meanAbsoluteError:
          description: Mean absolute error.
          format: double
          type: number
        rootMeanSquaredError:
          type: number
          format: double
          description: Root mean squared error.
        rSquared:
          description: R squared.
          type: number
          format: double
    XPSTablesModelColumnInfo:
      id: XPSTablesModelColumnInfo
      properties:
        columnId:
          format: int32
          description: The ID of the column.
          type: integer
        featureImportance:
          format: float
          type: number
          description: >-
            When given as part of a Model: Measurement of how much model
            predictions correctness on the TEST data depend on values in this
            column. A value between 0 and 1, higher means higher influence.
            These values are normalized - for all input feature columns of a
            given model they add to 1. When given back by Predict or Batch
            Predict: Measurement of how impactful for the prediction returned
            for the given row the value in this column was. Specifically, the
            feature importance specifies the marginal contribution that the
            feature made to the prediction score compared to the baseline score.
            These values are computed using the Sampled Shapley method.
      description: >-
        An information specific to given column and Tables Model, in context of
        the Model and the predictions created by it.
      type: object
    EntityMention:
      id: EntityMention
      type: object
      properties:
        probability:
          format: float
          description: >-
            Probability score associated with the entity. The score shows the
            probability of the entity mention being the entity type. The score
            is in (0, 1] range.
          type: number
        sentiment:
          $ref: '#/components/schemas/Sentiment'
          description: >-
            For calls to AnalyzeEntitySentiment or if
            AnnotateTextRequest.Features.extract_entity_sentiment is set to
            true, this field will contain the sentiment expressed for this
            mention of the entity in the provided document.
        text:
          $ref: '#/components/schemas/TextSpan'
          description: The mention text.
        type:
          description: The type of the entity mention.
          type: string
          enumDescriptions:
            - Unknown
            - Proper name
            - Common noun (or noun compound)
          enum:
            - TYPE_UNKNOWN
            - PROPER
            - COMMON
      description: >-
        Represents a mention for an entity in the text. Currently, proper noun
        mentions are supported.
    XPSTablesPreprocessResponse:
      properties:
        tablesDatasetMetadata:
          $ref: '#/components/schemas/XPSTablesDatasetMetadata'
          description: >-
            The table/column id, column_name and the DataTypes of the columns
            will be populated.
      type: object
      id: XPSTablesPreprocessResponse
    XPSVisionErrorAnalysisConfig:
      properties:
        queryType:
          description: >-
            The query type used in retrieval. The enum values are frozen in the
            foreseeable future.
          type: string
          enum:
            - QUERY_TYPE_UNSPECIFIED
            - QUERY_TYPE_ALL_SIMILAR
            - QUERY_TYPE_SAME_CLASS_SIMILAR
            - QUERY_TYPE_SAME_CLASS_DISSIMILAR
          enumDescriptions:
            - Unspecified query type for model error analysis.
            - Query similar samples across all classes in the dataset.
            - Query similar samples from the same class of the input sample.
            - Query dissimilar samples from the same class of the input sample.
        exampleCount:
          format: int32
          type: integer
          description: The number of query examples in error analysis.
      type: object
      id: XPSVisionErrorAnalysisConfig
      description: 'The vision model error analysis configuration. Next tag: 3'
    XPSResponseExplanationMetadataInputMetadata:
      id: XPSResponseExplanationMetadataInputMetadata
      description: Metadata of the input of a feature.
      type: object
      properties:
        inputTensorName:
          type: string
          description: >-
            Name of the input tensor for this model. Only needed in train
            response.
        visualizationConfig:
          $ref: '#/components/schemas/XPSVisualization'
          description: Visualization configurations for image explanation.
        modality:
          enum:
            - MODALITY_UNSPECIFIED
            - NUMERIC
            - IMAGE
            - CATEGORICAL
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
          type: string
          description: >-
            Modality of the feature. Valid values are: numeric, image. Defaults
            to numeric.
    ClassificationCategory:
      type: object
      id: ClassificationCategory
      properties:
        name:
          type: string
          description: The name of the category representing the document.
        severity:
          description: >-
            Optional. The classifier's severity of the category. This is only
            present when the ModerateTextRequest.ModelVersion is set to
            MODEL_VERSION_2, and the corresponding category has a severity
            score.
          type: number
          format: float
        confidence:
          description: >-
            The classifier's confidence of the category. Number represents how
            certain the classifier is that this category represents the given
            text.
          format: float
          type: number
      description: Represents a category returned from the text classifier.
    XPSCategoryStats:
      id: XPSCategoryStats
      type: object
      properties:
        topCategoryStats:
          type: array
          description: >-
            The statistics of the top 20 CATEGORY values, ordered by
            CategoryStats.SingleCategoryStats.count.
          items:
            $ref: '#/components/schemas/XPSCategoryStatsSingleCategoryStats'
        commonStats:
          $ref: '#/components/schemas/XPSCommonStats'
      description: The data statistics of a series of CATEGORY values.
    Document:
      type: object
      properties:
        gcsContentUri:
          type: string
          description: >-
            The Google Cloud Storage URI where the file content is located. This
            URI must be of the form: gs://bucket_name/object_name. For more
            details, see https://cloud.google.com/storage/docs/reference-uris.
            NOTE: Cloud Storage object versioning is not supported.
        type:
          enum:
            - TYPE_UNSPECIFIED
            - PLAIN_TEXT
            - HTML
          type: string
          description: >-
            Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns
            an `INVALID_ARGUMENT` error.
          enumDescriptions:
            - The content type is not specified.
            - Plain text
            - HTML
        content:
          type: string
          description: >-
            The content of the input in string format. Cloud audit logging
            exempt since it is based on user data.
        languageCode:
          type: string
          description: >-
            Optional. The language of the document (if not specified, the
            language is automatically detected). Both ISO and BCP-47 language
            codes are accepted. [Language
            Support](https://cloud.google.com/natural-language/docs/languages)
            lists currently supported languages for each API method. If the
            language (either specified by the caller or automatically detected)
            is not supported by the called API method, an `INVALID_ARGUMENT`
            error is returned.
      id: Document
      description: Represents the input to API methods.
    ModerateTextResponse:
      description: The document moderation response message.
      id: ModerateTextResponse
      properties:
        moderationCategories:
          description: Harmful and sensitive categories representing the input document.
          items:
            $ref: '#/components/schemas/ClassificationCategory'
          type: array
        languageSupported:
          type: boolean
          description: >-
            Whether the language is officially supported. The API may still
            return a response when the language is not supported, but it is on a
            best effort basis.
        languageCode:
          description: >-
            The language of the text, which will be the same as the language
            specified in the request or, if not specified, the
            automatically-detected language. See Document.language field for
            more details.
          type: string
      type: object
    XPSTrackMetricsEntry:
      id: XPSTrackMetricsEntry
      description: >-
        Track matching model metrics for a single track match threshold and
        multiple label match confidence thresholds. Next tag: 6.
      properties:
        meanTrackingAveragePrecision:
          description: >-
            Output only. The mean average precision over all confidence
            thresholds.
          format: float
          type: number
        meanMismatchRate:
          format: float
          description: Output only. The mean mismatch rate over all confidence thresholds.
          type: number
        confidenceMetricsEntries:
          items:
            $ref: '#/components/schemas/XPSTrackMetricsEntryConfidenceMetricsEntry'
          description: >-
            Output only. Metrics for each label-match confidence_threshold from
            0.05,0.10,...,0.95,0.96,0.97,0.98,0.99. Precision-recall curve is
            derived from them.
          type: array
        iouThreshold:
          format: float
          description: >-
            Output only. The intersection-over-union threshold value between
            bounding boxes across frames used to compute this metric entry.
          type: number
        meanBoundingBoxIou:
          format: float
          type: number
          description: >-
            Output only. The mean bounding box iou over all confidence
            thresholds.
      type: object
    XPSColumnSpecCorrelatedColumn:
      description: >-
        Identifies a table's column, and its correlation with the column this
        ColumnSpec describes.
      id: XPSColumnSpecCorrelatedColumn
      properties:
        correlationStats:
          $ref: '#/components/schemas/XPSCorrelationStats'
        columnId:
          type: integer
          format: int32
      type: object
    InfraUsage:
      type: object
      id: InfraUsage
      description: 'Infra Usage of billing metrics. Next ID: 6'
      properties:
        ramMetrics:
          description: Aggregated ram metrics since requested start_time.
          type: array
          items:
            $ref: '#/components/schemas/RamMetric'
        diskMetrics:
          description: Aggregated persistent disk metrics since requested start_time.
          type: array
          items:
            $ref: '#/components/schemas/DiskMetric'
        cpuMetrics:
          description: Aggregated core metrics since requested start_time.
          type: array
          items:
            $ref: '#/components/schemas/CpuMetric'
        gpuMetrics:
          items:
            $ref: '#/components/schemas/GpuMetric'
          description: Aggregated gpu metrics since requested start_time.
          type: array
        tpuMetrics:
          type: array
          items:
            $ref: '#/components/schemas/TpuMetric'
          description: Aggregated tpu metrics since requested start_time.
    XPSTimestampStats:
      properties:
        granularStats:
          description: >-
            The string key is the pre-defined granularity. Currently supported:
            hour_of_day, day_of_week, month_of_year. Granularities finer that
            the granularity of timestamp data are not populated (e.g. if
            timestamps are at day granularity, then hour_of_day is not
            populated).
          additionalProperties:
            $ref: '#/components/schemas/XPSTimestampStatsGranularStats'
          type: object
        commonStats:
          $ref: '#/components/schemas/XPSCommonStats'
        medianTimestampNanos:
          type: string
          format: int64
      id: XPSTimestampStats
      type: object
      description: The data statistics of a series of TIMESTAMP values.
    XPSArrayStats:
      properties:
        commonStats:
          $ref: '#/components/schemas/XPSCommonStats'
        memberStats:
          $ref: '#/components/schemas/XPSDataStats'
          description: >-
            Stats of all the values of all arrays, as if they were a single long
            series of data. The type depends on the element type of the array.
      type: object
      id: XPSArrayStats
      description: The data statistics of a series of ARRAY values.
    TpuMetric:
      id: TpuMetric
      type: object
      properties:
        tpuSec:
          format: int64
          type: string
          description: Required. Seconds of TPU usage, e.g. 3600.
        tpuType:
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          enum:
            - UNKNOWN_TPU_TYPE
            - TPU_V2_POD
            - TPU_V2
            - TPU_V3_POD
            - TPU_V3
            - TPU_V5_LITEPOD
          description: Required. Type of TPU, e.g. TPU_V2, TPU_V3_POD.
    XPSVideoModelArtifactSpec:
      id: XPSVideoModelArtifactSpec
      type: object
      properties:
        servingArtifact:
          $ref: '#/components/schemas/XPSModelArtifactItem'
          description: >-
            The default model binary file used for serving (e.g. batch predict)
            via public Cloud AI Platform API.
        exportArtifact:
          items:
            $ref: '#/components/schemas/XPSModelArtifactItem'
          type: array
          description: The model binary files in different formats for model export.
    XPSTrainResponse:
      properties:
        videoClassificationTrainResp:
          $ref: '#/components/schemas/XPSVideoClassificationTrainResponse'
        deployedModelSizeBytes:
          description: Estimated model size in bytes once deployed.
          type: string
          format: int64
        explanationConfigs:
          deprecated: true
          description: >-
            VisionExplanationConfig for XAI on test set. Optional for when XAI
            is enable in training request.
          items:
            $ref: '#/components/schemas/XPSResponseExplanationSpec'
          type: array
        evaluatedExampleSet:
          $ref: '#/components/schemas/XPSExampleSet'
          description: >-
            Examples used to evaluate the model (usually the test set), with the
            predicted annotations. The file_spec should point to recordio
            file(s) of AnnotatedExample. For each returned example, the
            example_id_token and annotations predicted by the model must be set.
            The example payload can and is recommended to be omitted.
        textToSpeechTrainResp:
          $ref: '#/components/schemas/XPSTextToSpeechTrainResponse'
        videoObjectTrackingTrainResp:
          $ref: '#/components/schemas/XPSVideoObjectTrackingTrainResponse'
        evaluationMetricsSet:
          $ref: '#/components/schemas/XPSEvaluationMetricsSet'
          description: >-
            The trained model evaluation metrics. This can be optionally
            returned.
        textTrainResp:
          $ref: '#/components/schemas/XPSTextTrainResponse'
          description: Will only be needed for uCAIP from Beta.
        translationTrainResp:
          $ref: '#/components/schemas/XPSTranslationTrainResponse'
        errorAnalysisConfigs:
          type: array
          description: >-
            Optional vision model error analysis configuration. The field is set
            when model error analysis is enabled in the training request. The
            results of error analysis will be binded together with evaluation
            results (in the format of AnnotatedExample).
          items:
            $ref: '#/components/schemas/XPSVisionErrorAnalysisConfig'
        imageClassificationTrainResp:
          $ref: '#/components/schemas/XPSImageClassificationTrainResponse'
        videoActionRecognitionTrainResp:
          $ref: '#/components/schemas/XPSVideoActionRecognitionTrainResponse'
        imageObjectDetectionTrainResp:
          $ref: '#/components/schemas/XPSImageObjectDetectionModelSpec'
        imageSegmentationTrainResp:
          $ref: '#/components/schemas/XPSImageSegmentationTrainResponse'
        tablesTrainResp:
          $ref: '#/components/schemas/XPSTablesTrainResponse'
        modelToken:
          description: >-
            Token that represents the trained model. This is considered
            immutable and is persisted in AutoML. xPS can put their own proto in
            the byte string, to e.g. point to the model checkpoints. The token
            is passed to other xPS APIs to refer to the model.
          type: string
          format: byte
        speechTrainResp:
          $ref: '#/components/schemas/XPSSpeechModelSpec'
      type: object
      id: XPSTrainResponse
      description: 'Next ID: 18'
    AnalyzeSentimentResponse:
      description: The sentiment analysis response message.
      type: object
      id: AnalyzeSentimentResponse
      properties:
        languageCode:
          type: string
          description: >-
            The language of the text, which will be the same as the language
            specified in the request or, if not specified, the
            automatically-detected language. See Document.language field for
            more details.
        languageSupported:
          type: boolean
          description: >-
            Whether the language is officially supported. The API may still
            return a response when the language is not supported, but it is on a
            best effort basis.
        sentences:
          items:
            $ref: '#/components/schemas/Sentence'
          type: array
          description: The sentiment for all the sentences in the document.
        documentSentiment:
          $ref: '#/components/schemas/Sentiment'
          description: The overall sentiment of the input document.
    XPSTextSentimentEvaluationMetrics:
      type: object
      properties:
        meanSquaredError:
          description: >-
            Output only. Mean squared error. Only set for the overall model
            evaluation, not for evaluation of a single annotation spec.
          format: float
          type: number
        precision:
          format: float
          description: Output only. Precision.
          type: number
        recall:
          format: float
          type: number
          description: Output only. Recall.
        f1Score:
          type: number
          format: float
          description: Output only. The harmonic mean of recall and precision.
        linearKappa:
          description: >-
            Output only. Linear weighted kappa. Only set for the overall model
            evaluation, not for evaluation of a single annotation spec.
          type: number
          format: float
        quadraticKappa:
          description: >-
            Output only. Quadratic weighted kappa. Only set for the overall
            model evaluation, not for evaluation of a single annotation spec.
          format: float
          type: number
        confusionMatrix:
          description: >-
            Output only. Confusion matrix of the evaluation. Only set for the
            overall model evaluation, not for evaluation of a single annotation
            spec.
          $ref: '#/components/schemas/XPSConfusionMatrix'
        meanAbsoluteError:
          type: number
          description: >-
            Output only. Mean absolute error. Only set for the overall model
            evaluation, not for evaluation of a single annotation spec.
          format: float
      id: XPSTextSentimentEvaluationMetrics
      description: Model evaluation metrics for text sentiment problems.
    XPSEdgeTpuTfLiteFormat:
      properties: {}
      description: >-
        A model format used for [Edge TPU](https://cloud.google.com/edge-tpu/)
        devices.
      type: object
      id: XPSEdgeTpuTfLiteFormat
    XPSColorMap:
      type: object
      description: >-
        Map from color to display name. Will only be used by Image Segmentation
        for uCAIP.
      id: XPSColorMap
      properties:
        annotationSpecIdToken:
          type: string
          description: Should be used during training.
        intColor:
          $ref: '#/components/schemas/XPSColorMapIntColor'
        color:
          description: >-
            This type is deprecated in favor of the IntColor below. This is
            because google.type.Color represent color has a float which
            semantically does not reflect discrete classes/categories concept.
            Moreover, to handle it well we need to have some tolerance when
            converting to a discretized color. As such, the recommendation is to
            have API surface still use google.type.Color while internally
            IntColor is used.
          $ref: '#/components/schemas/Color'
          deprecated: true
        displayName:
          type: string
          description: Should be used during preprocessing.
    XPSVideoTrainingOperationMetadata:
      id: XPSVideoTrainingOperationMetadata
      type: object
      properties:
        trainCostMilliNodeHour:
          description: >-
            This is an estimation of the node hours necessary for training a
            model, expressed in milli node hours (i.e. 1,000 value in this field
            means 1 node hour). A node hour represents the time a virtual
            machine spends running your training job. The cost of one node
            running for one hour is a node hour.
          format: int64
          type: string
    XPSImageModelServingSpec:
      type: object
      description: Serving specification for image models.
      id: XPSImageModelServingSpec
      properties:
        modelThroughputEstimation:
          type: array
          items:
            $ref: >-
              #/components/schemas/XPSImageModelServingSpecModelThroughputEstimation
          description: Populate under uCAIP request scope.
        nodeQps:
          type: number
          format: double
          description: >-
            An estimated value of how much traffic a node can serve. Populated
            for AutoMl request only.
        tfRuntimeVersion:
          description: >-
            ## The fields below are only populated under uCAIP request scope.
            https://cloud.google.com/ml-engine/docs/runtime-version-list
          type: string
    XPSColorMapIntColor:
      properties:
        red:
          format: int32
          description: The value should be in range of [0, 255].
          type: integer
        blue:
          description: The value should be in range of [0, 255].
          type: integer
          format: int32
        green:
          type: integer
          description: The value should be in range of [0, 255].
          format: int32
      id: XPSColorMapIntColor
      type: object
      description: RGB color and each channel is represented by an integer.
    XPSCorrelationStats:
      description: >-
        A correlation statistics between two series of DataType values. The
        series may have differing DataType-s, but within a single series the
        DataType must be the same.
      properties:
        cramersV:
          description: The correlation value using the Cramer's V measure.
          type: number
          format: double
      type: object
      id: XPSCorrelationStats
    ClassifyTextResponse:
      type: object
      properties:
        languageSupported:
          description: >-
            Whether the language is officially supported. The API may still
            return a response when the language is not supported, but it is on a
            best effort basis.
          type: boolean
        categories:
          items:
            $ref: '#/components/schemas/ClassificationCategory'
          type: array
          description: Categories representing the input document.
        languageCode:
          description: >-
            The language of the text, which will be the same as the language
            specified in the request or, if not specified, the
            automatically-detected language. See Document.language field for
            more details.
          type: string
      description: The document classification response message.
      id: ClassifyTextResponse
    XPSConfidenceMetricsEntry:
      id: XPSConfidenceMetricsEntry
      description: >-
        ConfidenceMetricsEntry includes generic precision, recall, f1 score etc.
        Next tag: 16.
      type: object
      properties:
        precisionAt1:
          description: >-
            The precision when only considering the label that has the highest
            prediction score and not below the confidence threshold for each
            example.
          format: float
          type: number
        confidenceThreshold:
          format: float
          type: number
          description: >-
            Metrics are computed with an assumption that the model never return
            predictions with score lower than this value.
        falsePositiveCount:
          description: >-
            The number of model created labels that do not match a ground truth
            label.
          type: string
          format: int64
        recall:
          description: Recall (true positive rate) for the given confidence threshold.
          format: float
          type: number
        falsePositiveRate:
          type: number
          description: False Positive Rate for the given confidence threshold.
          format: float
        falsePositiveRateAt1:
          type: number
          format: float
          description: >-
            The False Positive Rate when only considering the label that has the
            highest prediction score and not below the confidence threshold for
            each example.
        recallAt1:
          type: number
          format: float
          description: >-
            The recall (true positive rate) when only considering the label that
            has the highest prediction score and not below the confidence
            threshold for each example.
        truePositiveCount:
          description: The number of model created labels that match a ground truth label.
          format: int64
          type: string
        f1ScoreAt1:
          format: float
          description: The harmonic mean of recall_at1 and precision_at1.
          type: number
        precision:
          format: float
          description: Precision for the given confidence threshold.
          type: number
        positionThreshold:
          format: int32
          type: integer
          description: >-
            Metrics are computed with an assumption that the model always
            returns at most this many predictions (ordered by their score,
            descendingly), but they all still need to meet the
            confidence_threshold.
        falseNegativeCount:
          type: string
          format: int64
          description: >-
            The number of ground truth labels that are not matched by a model
            created label.
        trueNegativeCount:
          description: >-
            The number of labels that were not created by the model, but if they
            would, they would not match a ground truth label.
          type: string
          format: int64
        f1Score:
          type: number
          description: The harmonic mean of recall and precision.
          format: float
    XPSVideoClassificationTrainResponse:
      properties:
        trainCostNodeSeconds:
          format: int64
          type: string
          description: >-
            The actual train cost of creating this model, expressed in node
            seconds, i.e. 3,600 value in this field means 1 node hour.
        modelArtifactSpec:
          description: '## The fields below are only populated under uCAIP request scope.'
          $ref: '#/components/schemas/XPSVideoModelArtifactSpec'
      id: XPSVideoClassificationTrainResponse
      type: object
    XPSTextTrainResponse:
      id: XPSTextTrainResponse
      properties:
        componentModel:
          items:
            $ref: '#/components/schemas/XPSTextComponentModel'
          type: array
          description: Component submodels.
      type: object
    XPSTextExtractionEvaluationMetrics:
      type: object
      id: XPSTextExtractionEvaluationMetrics
      properties:
        bestF1ConfidenceMetrics:
          $ref: '#/components/schemas/XPSConfidenceMetricsEntry'
          deprecated: true
          description: >-
            Values are at the highest F1 score on the precision-recall curve.
            Only confidence_threshold, recall, precision, and f1_score will be
            set.
        perLabelConfidenceMetrics:
          description: Only recall, precision, and f1_score will be set.
          deprecated: true
          type: object
          additionalProperties:
            $ref: '#/components/schemas/XPSConfidenceMetricsEntry'
        confusionMatrix:
          $ref: '#/components/schemas/XPSConfusionMatrix'
          description: >-
            Confusion matrix of the model, at the default confidence threshold
            (0.0). Only set for whole-model evaluation, not for evaluation per
            label.
        confidenceMetricsEntries:
          type: array
          items:
            $ref: '#/components/schemas/XPSConfidenceMetricsEntry'
          description: >-
            If the enclosing EvaluationMetrics.label is empty,
            confidence_metrics_entries is an evaluation of the entire model
            across all labels. If the enclosing EvaluationMetrics.label is set,
            confidence_metrics_entries applies to that label.
    XPSBatchPredictResponse:
      type: object
      properties:
        exampleSet:
          description: >-
            Examples for batch prediction result. Under full API implementation,
            results are stored in shared RecordIO of AnnotatedExample protobufs,
            the annotations field of which is populated by XPS backend.
          $ref: '#/components/schemas/XPSExampleSet'
      id: XPSBatchPredictResponse
    XPSVideoActionRecognitionEvaluationMetrics:
      properties:
        videoActionMetricsEntries:
          description: >-
            Output only. The metric entries for precision window lengths:
            1s,2s,3s,4s, 5s.
          type: array
          items:
            $ref: '#/components/schemas/XPSVideoActionMetricsEntry'
        evaluatedActionCount:
          description: >-
            Output only. The number of ground truth actions used to create this
            evaluation.
          type: integer
          format: int32
      description: Model evaluation metrics for video action recognition.
      type: object
      id: XPSVideoActionRecognitionEvaluationMetrics
    XPSCategoryStatsSingleCategoryStats:
      description: The statistics of a single CATEGORY value.
      id: XPSCategoryStatsSingleCategoryStats
      properties:
        value:
          description: The CATEGORY value.
          type: string
        count:
          description: The number of occurrences of this value in the series.
          type: string
          format: int64
      type: object
    RamMetric:
      properties:
        machineSpec:
          enumDescriptions:
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
            - ''
          description: Required. Machine spec, e.g. N1_STANDARD_4.
          enum:
            - UNKNOWN_MACHINE_SPEC
            - N1_STANDARD_2
            - N1_STANDARD_4
            - N1_STANDARD_8
            - N1_STANDARD_16
            - N1_STANDARD_32
            - N1_STANDARD_64
            - N1_STANDARD_96
            - N1_HIGHMEM_2
            - N1_HIGHMEM_4
            - N1_HIGHMEM_8
            - N1_HIGHMEM_16
            - N1_HIGHMEM_32
            - N1_HIGHMEM_64
            - N1_HIGHMEM_96
            - N1_HIGHCPU_2
            - N1_HIGHCPU_4
            - N1_HIGHCPU_8
            - N1_HIGHCPU_16
            - N1_HIGHCPU_32
            - N1_HIGHCPU_64
            - N1_HIGHCPU_96
            - A2_HIGHGPU_1G
            - A2_HIGHGPU_2G
            - A2_HIGHGPU_4G
            - A2_HIGHGPU_8G
            - A2_MEGAGPU_16G
            - A2_ULTRAGPU_1G
            - A2_ULTRAGPU_2G
            - A2_ULTRAGPU_4G
            - A2_ULTRAGPU_8G
            - A3_HIGHGPU_2G
            - A3_HIGHGPU_4G
            - A3_HIGHGPU_8G
            - A3_MEGAGPU_8G
            - E2_STANDARD_2
            - E2_STANDARD_4
            - E2_STANDARD_8
            - E2_STANDARD_16
            - E2_STANDARD_32
            - E2_HIGHMEM_2
            - E2_HIGHMEM_4
            - E2_HIGHMEM_8
            - E2_HIGHMEM_16
            - E2_HIGHCPU_2
            - E2_HIGHCPU_4
            - E2_HIGHCPU_8
            - E2_HIGHCPU_16
            - E2_HIGHCPU_32
            - N2_STANDARD_2
            - N2_STANDARD_4
            - N2_STANDARD_8
            - N2_STANDARD_16
            - N2_STANDARD_32
            - N2_STANDARD_48
            - N2_STANDARD_64
            - N2_STANDARD_80
            - N2_STANDARD_96
            - N2_STANDARD_128
            - N2_HIGHMEM_2
            - N2_HIGHMEM_4
            - N2_HIGHMEM_8
            - N2_HIGHMEM_16
            - N2_HIGHMEM_32
            - N2_HIGHMEM_48
            - N2_HIGHMEM_64
            - N2_HIGHMEM_80
            - N2_HIGHMEM_96
            - N2_HIGHMEM_128
            - N2_HIGHCPU_2
            - N2_HIGHCPU_4
            - N2_HIGHCPU_8
            - N2_HIGHCPU_16
            - N2_HIGHCPU_32
            - N2_HIGHCPU_48
            - N2_HIGHCPU_64
            - N2_HIGHCPU_80
            - N2_HIGHCPU_96
            - N2D_STANDARD_2
            - N2D_STANDARD_4
            - N2D_STANDARD_8
            - N2D_STANDARD_16
            - N2D_STANDARD_32
            - N2D_STANDARD_48
            - N2D_STANDARD_64
            - N2D_STANDARD_80
            - N2D_STANDARD_96
            - N2D_STANDARD_128
            - N2D_STANDARD_224
            - N2D_HIGHMEM_2
            - N2D_HIGHMEM_4
            - N2D_HIGHMEM_8
            - N2D_HIGHMEM_16
            - N2D_HIGHMEM_32
            - N2D_HIGHMEM_48
            - N2D_HIGHMEM_64
            - N2D_HIGHMEM_80
            - N2D_HIGHMEM_96
            - N2D_HIGHCPU_2
            - N2D_HIGHCPU_4
            - N2D_HIGHCPU_8
            - N2D_HIGHCPU_16
            - N2D_HIGHCPU_32
            - N2D_HIGHCPU_48
            - N2D_HIGHCPU_64
            - N2D_HIGHCPU_80
            - N2D_HIGHCPU_96
            - N2D_HIGHCPU_128
            - N2D_HIGHCPU_224
            - C2_STANDARD_4
            - C2_STANDARD_8
            - C2_STANDARD_16
            - C2_STANDARD_30
            - C2_STANDARD_60
            - C2D_STANDARD_2
            - C2D_STANDARD_4
            - C2D_STANDARD_8
            - C2D_STANDARD_16
            - C2D_STANDARD_32
            - C2D_STANDARD_56
            - C2D_STANDARD_112
            - C2D_HIGHCPU_2
            - C2D_HIGHCPU_4
            - C2D_HIGHCPU_8
            - C2D_HIGHCPU_16
            - C2D_HIGHCPU_32
            - C2D_HIGHCPU_56
            - C2D_HIGHCPU_112
            - C2D_HIGHMEM_2
            - C2D_HIGHMEM_4
            - C2D_HIGHMEM_8
            - C2D_HIGHMEM_16
            - C2D_HIGHMEM_32
            - C2D_HIGHMEM_56
            - C2D_HIGHMEM_112
            - G2_STANDARD_4
            - G2_STANDARD_8
            - G2_STANDARD_12
            - G2_STANDARD_16
            - G2_STANDARD_24
            - G2_STANDARD_32
            - G2_STANDARD_48
            - G2_STANDARD_96
            - C3_STANDARD_4
            - C3_STANDARD_8
            - C3_STANDARD_22
            - C3_STANDARD_44
            - C3_STANDARD_88
            - C3_STANDARD_176
            - C3_HIGHCPU_4
            - C3_HIGHCPU_8
            - C3_HIGHCPU_22
            - C3_HIGHCPU_44
            - C3_HIGHCPU_88
            - C3_HIGHCPU_176
            - C3_HIGHMEM_4
            - C3_HIGHMEM_8
            - C3_HIGHMEM_22
            - C3_HIGHMEM_44
            - C3_HIGHMEM_88
            - C3_HIGHMEM_176
          type: string
        trackingLabels:
          additionalProperties:
            type: string
          description: >-
            Billing tracking labels. They do not contain any user data but only
            the labels set by Vertex Core Infra itself. Tracking labels' keys
            are defined with special format: goog-[\p{Ll}\p{N}]+ E.g. "key":
            "goog-k8s-cluster-name","value": "us-east1-b4rk"
          type: object
        ramType:
          enum:
            - UNKNOWN_RAM_TYPE
            - A2
            - A3
            - C2
            - C2D
            - CUSTOM
            - E2
            - G2
            - C3
            - M2
            - M1
            - N1
            - N2_CUSTOM
            - N2
            - N2D
          type: string
          enumDescriptions:
            - ''
            - ''
            - ''
            - COMPUTE_OPTIMIZED
            - ''
            - ''
            - ''
            - ''
            - ''
            - MEMORY_OPTIMIZED_UPGRADE_PREMIUM
            - MEMORY_OPTIMIZED
            - ''
            - ''
            - ''
            - ''
          description: Required. Type of ram.
        memories:
          format: double
          description: Required. VM memory in gb.
          type: number
        gibSec:
          description: >-
            Required. VM memory in Gigabyte second, e.g. 3600. Using int64 type
            to match billing metrics definition.
          format: int64
          type: string
      type: object
      id: RamMetric
    Sentiment:
      id: Sentiment
      description: >-
        Represents the feeling associated with the entire text or entities in
        the text.
      type: object
      properties:
        score:
          type: number
          format: float
          description: >-
            Sentiment score between -1.0 (negative sentiment) and 1.0 (positive
            sentiment).
        magnitude:
          description: >-
            A non-negative number in the [0, +inf) range, which represents the
            absolute magnitude of sentiment regardless of score (positive or
            negative).
          format: float
          type: number
    XPSExportModelOutputConfig:
      type: object
      properties:
        coreMlFormat:
          $ref: '#/components/schemas/XPSCoreMlFormat'
        tfSavedModelFormat:
          $ref: '#/components/schemas/XPSTfSavedModelFormat'
        outputGcrUri:
          type: string
          description: >-
            The Google Contained Registry (GCR) path the exported files to be
            pushed to. This location is set if the exported format is DOCKDER.
        outputGcsUri:
          description: >-
            The Google Cloud Storage (GCS) directory where XPS will output the
            exported models and related files. Format: gs://bucket/directory
          type: string
        tfJsFormat:
          $ref: '#/components/schemas/XPSTfJsFormat'
        tfLiteFormat:
          $ref: '#/components/schemas/XPSTfLiteFormat'
        exportFirebaseAuxiliaryInfo:
          type: boolean
          description: >-
            For any model and format: If true, will additionally export
            FirebaseExportedModelInfo in a firebase.txt file.
        edgeTpuTfLiteFormat:
          $ref: '#/components/schemas/XPSEdgeTpuTfLiteFormat'
        dockerFormat:
          $ref: '#/components/schemas/XPSDockerFormat'
      id: XPSExportModelOutputConfig
    XPSConfusionMatrixRow:
      id: XPSConfusionMatrixRow
      type: object
      properties:
        count:
          items:
            format: int64
            type: string
          description: >-
            Same as above except intended to represent other counts (for e.g.
            for segmentation this is pixel count). NOTE(params): Only
            example_count or count is set (oneoff does not support repeated
            fields unless they are embedded inside another message).
          type: array
        exampleCount:
          type: array
          description: >-
            Value of the specific cell in the confusion matrix. The number of
            values each row has (i.e. the length of the row) is equal to the
            length of the annotation_spec_id_token field.
          items:
            type: integer
            format: int32
      description: A row in the confusion matrix.
    XPSCommonStats:
      properties:
        validValueCount:
          type: string
          format: int64
        distinctValueCount:
          format: int64
          type: string
        nullValueCount:
          format: int64
          type: string
      description: Common statistics for a column with a specified data type.
      id: XPSCommonStats
      type: object
    XPSTrackMetricsEntryConfidenceMetricsEntry:
      id: XPSTrackMetricsEntryConfidenceMetricsEntry
      properties:
        trackingRecall:
          description: Output only. Tracking recall.
          type: number
          format: float
        trackingPrecision:
          format: float
          description: Output only. Tracking precision.
          type: number
        boundingBoxIou:
          description: >-
            Output only. Bounding box intersection-over-union precision.
            Measures how well the bounding boxes overlap between each other
            (e.g. complete overlap or just barely above iou_threshold).
          type: number
          format: float
        mismatchRate:
          type: number
          description: >-
            Output only. Mismatch rate, which measures the tracking consistency,
            i.e. correctness of instance ID continuity.
          format: float
        confidenceThreshold:
          type: number
          description: >-
            Output only. The confidence threshold value used to compute the
            metrics.
          format: float
      type: object
      description: 'Metrics for a single confidence threshold. Next tag: 6.'
    XPSTextToSpeechTrainResponse:
      description: TextToSpeech train response
      type: object
      properties: {}
      id: XPSTextToSpeechTrainResponse
    XPSVisionTrainingOperationMetadata:
      deprecated: true
      id: XPSVisionTrainingOperationMetadata
      properties:
        explanationUsage:
          description: >-
            Aggregated infra usage within certain time period, for billing
            report purpose if XAI is enable in training request.
          $ref: '#/components/schemas/InfraUsage'
      type: object
    XPSTranslationEvaluationMetrics:
      description: Evaluation metrics for the dataset.
      properties:
        baseBleuScore:
          format: double
          type: number
          description: BLEU score for base model.
        bleuScore:
          format: double
          description: BLEU score.
          type: number
      type: object
      id: XPSTranslationEvaluationMetrics
    XPSVideoExportModelSpec:
      type: object
      description: >-
        Information of downloadable models that are pre-generated as part of
        training flow and will be persisted in AutoMl backend. Upon receiving
        ExportModel request from user, AutoMl backend can serve the
        pre-generated models to user if exists (by copying the files from
        internal path to user provided location), otherwise, AutoMl backend will
        call xPS ExportModel API to generate the model on the fly with the
        requesting format.
      properties:
        exportModelOutputConfig:
          items:
            $ref: '#/components/schemas/XPSExportModelOutputConfig'
          type: array
          description: >-
            Contains the model format and internal location of the model files
            to be exported/downloaded. Use the GCS bucket name which is provided
            via TrainRequest.gcs_bucket_name to store the model files.
      id: XPSVideoExportModelSpec
    XPSClassificationEvaluationMetrics:
      type: object
      id: XPSClassificationEvaluationMetrics
      description: >-
        Model evaluation metrics for classification problems. It can be used for
        image and video classification. Next tag: 9.
      properties:
        logLoss:
          format: float
          type: number
          description: The Log Loss metric.
        auRoc:
          description: >-
            The Area Under Receiver Operating Characteristic curve metric.
            Micro-averaged for the overall evaluation.
          format: float
          type: number
        confusionMatrix:
          $ref: '#/components/schemas/XPSConfusionMatrix'
          description: >-
            Confusion matrix of the evaluation. Only set for MULTICLASS
            classification problems where number of annotation specs is no more
            than 10. Only set for model level evaluation, not for evaluation per
            label.
        auPrc:
          type: number
          format: float
          description: The Area under precision recall curve metric.
        confidenceMetricsEntries:
          items:
            $ref: '#/components/schemas/XPSConfidenceMetricsEntry'
          type: array
          description: >-
            Metrics that have confidence thresholds. Precision-recall curve can
            be derived from it.
        baseAuPrc:
          format: float
          description: The Area under precision recall curve metric based on priors.
          type: number
        evaluatedExamplesCount:
          format: int32
          description: The number of examples used for model evaluation.
          type: integer
    XPSTranslationTrainResponse:
      type: object
      properties:
        modelType:
          description: Type of the model.
          enum:
            - MODEL_TYPE_UNSPECIFIED
            - LEGACY
            - CURRENT
          enumDescriptions:
            - Default
            - Legacy model. Will be deprecated.
            - Current model.
          type: string
      description: Train response for translation.
      id: XPSTranslationTrainResponse
    XPSTablesEvaluationMetrics:
      properties:
        classificationMetrics:
          $ref: '#/components/schemas/XPSTablesClassificationMetrics'
          description: Classification metrics.
        regressionMetrics:
          $ref: '#/components/schemas/XPSTablesRegressionMetrics'
          description: Regression metrics.
      id: XPSTablesEvaluationMetrics
      type: object
    Entity:
      properties:
        sentiment:
          $ref: '#/components/schemas/Sentiment'
          description: >-
            For calls to AnalyzeEntitySentiment or if
            AnnotateTextRequest.Features.extract_entity_sentiment is set to
            true, this field will contain the aggregate sentiment expressed for
            this entity in the provided document.
        name:
          description: The representative name for the entity.
          type: string
        mentions:
          description: >-
            The mentions of this entity in the input document. The API currently
            supports proper noun mentions.
          type: array
          items:
            $ref: '#/components/schemas/EntityMention'
        metadata:
          type: object
          description: >-
            Metadata associated with the entity. For the metadata associated
            with other entity types, see the Type table below.
          additionalProperties:
            type: string
        type:
          type: string
          enum:
            - UNKNOWN
            - PERSON
            - LOCATION
            - ORGANIZATION
            - EVENT
            - WORK_OF_ART
            - CONSUMER_GOOD
            - OTHER
            - PHONE_NUMBER
            - ADDRESS
            - DATE
            - NUMBER
            - PRICE
          description: The entity type.
          enumDescriptions:
            - Unknown
            - Person
            - Location
            - Organization
            - Event
            - Artwork
            - Consumer product
            - Other types of entities
            - >-
              Phone number The metadata lists the phone number, formatted
              according to local convention, plus whichever additional elements
              appear in the text: * `number` - the actual number, broken down
              into sections as per local convention * `national_prefix` -
              country code, if detected * `area_code` - region or area code, if
              detected * `extension` - phone extension (to be dialed after
              connection), if detected
            - >-
              Address The metadata identifies the street number and locality
              plus whichever additional elements appear in the text: *
              `street_number` - street number * `locality` - city or town *
              `street_name` - street/route name, if detected * `postal_code` -
              postal code, if detected * `country` - country, if detected *
              `broad_region` - administrative area, such as the state, if
              detected * `narrow_region` - smaller administrative area, such as
              county, if detected * `sublocality` - used in Asian addresses to
              demark a district within a city, if detected
            - >-
              Date The metadata identifies the components of the date: * `year`
              - four digit year, if detected * `month` - two digit month number,
              if detected * `day` - two digit day number, if detected
            - Number The metadata is the number itself.
            - Price The metadata identifies the `value` and `currency`.
      id: Entity
      type: object
      description: >-
        Represents a phrase in the text that is a known entity, such as a
        person, an organization, or location. The API associates information,
        such as probability and mentions, with entities.
    XPSStructType:
      id: XPSStructType
      type: object
      description: '`StructType` defines the DataType-s of a STRUCT type.'
      properties:
        fields:
          additionalProperties:
            $ref: '#/components/schemas/XPSDataType'
          type: object
          description: Unordered map of struct field names to their data types.
    XPSColumnSpec:
      properties:
        displayName:
          description: >-
            The display name of the column. It's outputed in Preprocess and a
            required input for RefreshTablesStats and Train.
          type: string
        columnId:
          format: int32
          description: >-
            The unique id of the column. When Preprocess, the Tables BE will
            popuate the order id of the column, which reflects the order of the
            column inside the table, i.e. 0 means the first column in the table,
            N-1 means the last column. AutoML BE will persist this order id in
            Spanner and set the order id here when calling RefreshTablesStats
            and Train. Note: it's different than the column_spec_id that is
            generated in AutoML BE.
          type: integer
        topCorrelatedColumns:
          items:
            $ref: '#/components/schemas/XPSColumnSpecCorrelatedColumn'
          description: It's outputed in RefreshTablesStats, and a required input in Train.
          type: array
        dataStats:
          $ref: '#/components/schemas/XPSDataStats'
          description: >-
            The data stats of the column. It's outputed in RefreshTablesStats
            and a required input for Train.
        forecastingMetadata:
          $ref: '#/components/schemas/XPSColumnSpecForecastingMetadata'
        dataType:
          $ref: '#/components/schemas/XPSDataType'
          description: >-
            The data type of the column. It's outputed in Preprocess rpc and a
            required input for RefreshTablesStats and Train.
      type: object
      id: XPSColumnSpec
    AnnotateTextRequest:
      type: object
      properties:
        encodingType:
          enumDescriptions:
            - >-
              If `EncodingType` is not specified, encoding-dependent information
              (such as `begin_offset`) will be set at `-1`.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-8 encoding of the input. C++ and Go
              are examples of languages that use this encoding natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-16 encoding of the input. Java and
              JavaScript are examples of languages that use this encoding
              natively.
            - >-
              Encoding-dependent information (such as `begin_offset`) is
              calculated based on the UTF-32 encoding of the input. Python is an
              example of a language that uses this encoding natively.
          type: string
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
          description: The encoding type used by the API to calculate offsets.
        document:
          $ref: '#/components/schemas/Document'
          description: Required. Input document.
        features:
          $ref: '#/components/schemas/AnnotateTextRequestFeatures'
          description: Required. The enabled features.
      id: AnnotateTextRequest
      description: >-
        The request message for the text annotation API, which can perform
        multiple analysis types in one call.
    XPSTablesTrainingOperationMetadata:
      id: XPSTablesTrainingOperationMetadata
      type: object
      properties:
        trainBudgetMilliNodeHours:
          type: string
          description: Creating model budget.
          format: int64
        optimizationObjective:
          type: string
          description: The optimization objective for model.
        createModelStage:
          description: Current stage of creating model.
          enumDescriptions:
            - Unspecified stage.
            - Prepare the model training pipeline and run data processing.
            - Training model.
            - Run evaluation.
            - Finalizing model training pipeline.
          enum:
            - CREATE_MODEL_STAGE_UNSPECIFIED
            - DATA_PREPROCESSING
            - TRAINING
            - EVALUATING
            - MODEL_POST_PROCESSING
          type: string
        trainingObjectivePoints:
          items:
            $ref: '#/components/schemas/XPSTrainingObjectivePoint'
          type: array
          description: >-
            This field records the training objective value with respect to
            time, giving insight into how the model architecture search is
            performing as training time elapses.
        trainingStartTime:
          format: google-datetime
          description: Timestamp when training process starts.
          type: string
        topTrials:
          description: >-
            This field is for training. When the operation is terminated
            successfully, AutoML Backend post this field to operation metadata
            in spanner. If the metadata has no trials returned, the training
            operation is supposed to be a failure.
          type: array
          items:
            $ref: '#/components/schemas/XPSTuningTrial'
    XPSCoreMlFormat:
      description: A model format used for iOS mobile devices.
      properties: {}
      id: XPSCoreMlFormat
      type: object
    XPSStringStatsUnigramStats:
      properties:
        count:
          type: string
          description: The number of occurrences of this unigram in the series.
          format: int64
        value:
          type: string
          description: The unigram.
      type: object
      id: XPSStringStatsUnigramStats
      description: The statistics of a unigram.
    Sentence:
      properties:
        text:
          description: The sentence text.
          $ref: '#/components/schemas/TextSpan'
        sentiment:
          description: >-
            For calls to AnalyzeSentiment or if
            AnnotateTextRequest.Features.extract_document_sentiment is set to
            true, this field will contain the sentiment for the sentence.
          $ref: '#/components/schemas/Sentiment'
      id: Sentence
      type: object
      description: Represents a sentence in the input document.
    XPSTablesModelStructure:
      type: object
      description: A description of Tables model structure.
      properties:
        modelParameters:
          description: A list of models.
          type: array
          items:
            $ref: '#/components/schemas/XPSTablesModelStructureModelParameters'
      id: XPSTablesModelStructure
    XPSVideoObjectTrackingTrainResponse:
      id: XPSVideoObjectTrackingTrainResponse
      type: object
      properties:
        trainCostNodeSeconds:
          format: int64
          type: string
          description: >-
            The actual train cost of creating this model, expressed in node
            seconds, i.e. 3,600 value in this field means 1 node hour.
        modelArtifactSpec:
          $ref: '#/components/schemas/XPSVideoModelArtifactSpec'
          description: '## The fields below are only populated under uCAIP request scope.'
        exportModelSpec:
          $ref: '#/components/schemas/XPSVideoExportModelSpec'
          description: Populated for AutoML request only.
    XPSImageExportModelSpec:
      type: object
      properties:
        exportModelOutputConfig:
          description: >-
            Contains the model format and internal location of the model files
            to be exported/downloaded. Use the GCS bucket name which is provided
            via TrainRequest.gcs_bucket_name to store the model files.
          items:
            $ref: '#/components/schemas/XPSExportModelOutputConfig'
          type: array
      id: XPSImageExportModelSpec
      description: >-
        Information of downloadable models that are pre-generated as part of
        training flow and will be persisted in AutoMl backend. Upon receiving
        ExportModel request from user, AutoMl backend can serve the
        pre-generated models to user if exists (by copying the files from
        internal path to user provided location), otherwise, AutoMl backend will
        call xPS ExportModel API to generate the model on the fly with the
        requesting format.
    XPSDockerFormat:
      id: XPSDockerFormat
      description: >-
        A model format used for Docker containers. Use the params field to
        customize the container. The container is verified to work correctly on
        ubuntu 16.04 operating system.
      properties:
        gpuArchitecture:
          enumDescriptions:
            - ''
            - ''
          enum:
            - GPU_ARCHITECTURE_UNSPECIFIED
            - GPU_ARCHITECTURE_NVIDIA
          type: string
          description: >-
            Optional. Additional gpu information describing the requirements for
            the to be exported model files.
        cpuArchitecture:
          enum:
            - CPU_ARCHITECTURE_UNSPECIFIED
            - CPU_ARCHITECTURE_X86_64
          enumDescriptions:
            - ''
            - ''
          description: >-
            Optional. Additional cpu information describing the requirements for
            the to be exported model files.
          type: string
      type: object
    XPSSpeechEvaluationMetrics:
      properties:
        subModelEvaluationMetrics:
          items:
            $ref: >-
              #/components/schemas/XPSSpeechEvaluationMetricsSubModelEvaluationMetric
          type: array
          description: Evaluation metrics for all submodels contained in this model.
      id: XPSSpeechEvaluationMetrics
      type: object
  parameters:
    upload_protocol:
      description: Upload protocol for media (e.g. "raw", "multipart").
      in: query
      name: upload_protocol
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    quotaUser:
      description: >-
        Available to use for quota purposes for server-side applications. Can be
        any arbitrary string assigned to a user, but should not exceed 40
        characters.
      in: query
      name: quotaUser
      schema:
        type: string
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    key:
      description: >-
        API key. Your API key identifies your project and provides you with API
        access, quota, and reports. Required unless you provide an OAuth 2.0
        token.
      in: query
      name: key
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: $.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    uploadType:
      description: Legacy upload protocol for media (e.g. "media", "multipart").
      in: query
      name: uploadType
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
  x-stackQL-resources:
    documents:
      id: google.language.documents
      name: documents
      title: Documents
      methods:
        analyze_sentiment:
          operation:
            $ref: '#/paths/~1v2~1documents:analyzeSentiment/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        classify_text:
          operation:
            $ref: '#/paths/~1v2~1documents:classifyText/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        analyze_entities:
          operation:
            $ref: '#/paths/~1v2~1documents:analyzeEntities/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        annotate_text:
          operation:
            $ref: '#/paths/~1v2~1documents:annotateText/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        moderate_text:
          operation:
            $ref: '#/paths/~1v2~1documents:moderateText/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        replace: []
        delete: []
paths:
  /v2/documents:analyzeSentiment:
    parameters: &ref_1
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/callback'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/alt'
    post:
      description: Analyzes the sentiment of the provided text.
      operationId: language.documents.analyzeSentiment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeSentimentRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeSentimentResponse'
      parameters: []
  /v2/documents:classifyText:
    parameters: *ref_1
    post:
      description: Classifies a document into categories.
      operationId: language.documents.classifyText
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassifyTextRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassifyTextResponse'
      parameters: []
  /v2/documents:analyzeEntities:
    parameters: *ref_1
    post:
      description: >-
        Finds named entities (currently proper names and common nouns) in the
        text along with entity types, probability, mentions for each entity, and
        other properties.
      operationId: language.documents.analyzeEntities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeEntitiesRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeEntitiesResponse'
      parameters: []
  /v2/documents:annotateText:
    parameters: *ref_1
    post:
      description: A convenience method that provides all features in one call.
      operationId: language.documents.annotateText
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotateTextRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotateTextResponse'
      parameters: []
  /v2/documents:moderateText:
    parameters: *ref_1
    post:
      description: Moderates a document for harmful and sensitive categories.
      operationId: language.documents.moderateText
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModerateTextRequest'
      security:
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-language
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-language
        - Oauth2:
            - https://www.googleapis.com/auth/cloud-platform
          Oauth2c:
            - https://www.googleapis.com/auth/cloud-platform
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModerateTextResponse'
      parameters: []
