openapi: 3.1.0
info:
  contact:
    name: StackQL Studios
    url: 'https://github.com/stackql/google-discovery-to-openapi'
    email: info@stackql.io
  title: Cloud Natural Language API
  description: 'Provides natural language understanding technologies, such as sentiment analysis, entity recognition, entity sentiment analysis, and other text annotations, to developers.'
  version: v2
  x-discovery-doc-revision: '20230812'
  x-generated-date: '2023-08-23'
externalDocs:
  url: 'https://cloud.google.com/natural-language/'
servers:
  - url: 'https://language.googleapis.com'
components:
  securitySchemes:
    Oauth2:
      type: oauth2
      description: Oauth 2.0 implicit authentication
      flows:
        implicit:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          scopes: &ref_0
            'https://www.googleapis.com/auth/cloud-platform': 'See, edit, configure, and delete your Google Cloud data and see the email address for your Google Account.'
            'https://www.googleapis.com/auth/cloud-language': Apply machine learning models to reveal the structure and meaning of text
    Oauth2c:
      type: oauth2
      description: Oauth 2.0 authorization code authentication
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/auth'
          tokenUrl: 'https://accounts.google.com/o/oauth2/token'
          scopes: *ref_0
  schemas:
    Document:
      type: object
      properties:
        gcsContentUri:
          description: 'The Google Cloud Storage URI where the file content is located. This URI must be of the form: gs://bucket_name/object_name. For more details, see https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage object versioning is not supported.'
          type: string
        type:
          type: string
          description: 'Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an `INVALID_ARGUMENT` error.'
          enum:
            - TYPE_UNSPECIFIED
            - PLAIN_TEXT
            - HTML
          enumDescriptions:
            - The content type is not specified.
            - Plain text
            - HTML
        content:
          description: The content of the input in string format. Cloud audit logging exempt since it is based on user data.
          type: string
        languageCode:
          description: 'Optional. The language of the document (if not specified, the language is automatically detected). Both ISO and BCP-47 language codes are accepted. [Language Support](https://cloud.google.com/natural-language/docs/languages) lists currently supported languages for each API method. If the language (either specified by the caller or automatically detected) is not supported by the called API method, an `INVALID_ARGUMENT` error is returned.'
          type: string
      id: Document
      description: Represents the input to API methods.
    AnnotateTextRequest:
      description: 'The request message for the text annotation API, which can perform multiple analysis types in one call.'
      properties:
        encodingType:
          enumDescriptions:
            - 'If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`.'
            - Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively.
            - Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively.
            - Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively.
          description: The encoding type used by the API to calculate offsets.
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
          type: string
        document:
          $ref: '#/components/schemas/Document'
          description: Required. Input document.
        features:
          $ref: '#/components/schemas/Features'
          description: Required. The enabled features.
      type: object
      id: AnnotateTextRequest
    ClassifyTextRequest:
      type: object
      id: ClassifyTextRequest
      properties:
        document:
          description: Required. Input document.
          $ref: '#/components/schemas/Document'
      description: The document classification request message.
    AnnotateTextResponse:
      id: AnnotateTextResponse
      properties:
        moderationCategories:
          type: array
          description: Harmful and sensitive categories identified in the input document.
          items:
            $ref: '#/components/schemas/ClassificationCategory'
        entities:
          items:
            $ref: '#/components/schemas/Entity'
          description: 'Entities, along with their semantic information, in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_entities or AnnotateTextRequest.Features.extract_entity_sentiment.'
          type: array
        languageSupported:
          description: 'Whether the language is officially supported by all requested features. The API may still return a response when the language is not supported, but it is on a best effort basis.'
          type: boolean
        languageCode:
          description: 'The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.'
          type: string
        documentSentiment:
          $ref: '#/components/schemas/Sentiment'
          description: The overall sentiment for the document. Populated if the user enables AnnotateTextRequest.Features.extract_document_sentiment.
        sentences:
          type: array
          items:
            $ref: '#/components/schemas/Sentence'
          description: Sentences in the input document. Populated if the user enables AnnotateTextRequest.Features.extract_document_sentiment.
        categories:
          items:
            $ref: '#/components/schemas/ClassificationCategory'
          type: array
          description: Categories identified in the input document.
      description: The text annotations response message.
      type: object
    AnalyzeEntitiesResponse:
      description: The entity analysis response message.
      type: object
      properties:
        languageSupported:
          type: boolean
          description: 'Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis.'
        languageCode:
          description: 'The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.'
          type: string
        entities:
          items:
            $ref: '#/components/schemas/Entity'
          description: The recognized entities in the input document.
          type: array
      id: AnalyzeEntitiesResponse
    ModerateTextRequest:
      type: object
      description: The document moderation request message.
      properties:
        document:
          $ref: '#/components/schemas/Document'
          description: Required. Input document.
      id: ModerateTextRequest
    Status:
      type: object
      id: Status
      description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
      properties:
        code:
          format: int32
          type: integer
          description: 'The status code, which should be an enum value of google.rpc.Code.'
        message:
          description: 'A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.'
          type: string
        details:
          items:
            additionalProperties:
              description: Properties of the object. Contains field @type with type URL.
              type: any
            type: object
          description: A list of messages that carry the error details. There is a common set of message types for APIs to use.
          type: array
    ClassificationCategory:
      id: ClassificationCategory
      description: Represents a category returned from the text classifier.
      type: object
      properties:
        confidence:
          format: float
          description: The classifier's confidence of the category. Number represents how certain the classifier is that this category represents the given text.
          type: number
        name:
          type: string
          description: The name of the category representing the document.
    Features:
      properties:
        extractDocumentSentiment:
          description: Optional. Extract document-level sentiment.
          type: boolean
        classifyText:
          description: Optional. Classify the full document into categories.
          type: boolean
        moderateText:
          type: boolean
          description: Optional. Moderate the document for harmful and sensitive categories.
        extractEntities:
          type: boolean
          description: Optional. Extract entities.
      description: All available features. Setting each one to true will enable that specific analysis for the input.
      type: object
      id: Features
    ClassifyTextResponse:
      description: The document classification response message.
      id: ClassifyTextResponse
      type: object
      properties:
        languageCode:
          description: 'The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.'
          type: string
        languageSupported:
          description: 'Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis.'
          type: boolean
        categories:
          items:
            $ref: '#/components/schemas/ClassificationCategory'
          description: Categories representing the input document.
          type: array
    AnalyzeSentimentRequest:
      type: object
      description: The sentiment analysis request message.
      properties:
        encodingType:
          description: The encoding type used by the API to calculate sentence offsets.
          type: string
          enumDescriptions:
            - 'If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`.'
            - Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively.
            - Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively.
            - Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively.
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
        document:
          $ref: '#/components/schemas/Document'
          description: Required. Input document.
      id: AnalyzeSentimentRequest
    Sentiment:
      properties:
        magnitude:
          description: 'A non-negative number in the [0, +inf) range, which represents the absolute magnitude of sentiment regardless of score (positive or negative).'
          format: float
          type: number
        score:
          type: number
          format: float
          description: Sentiment score between -1.0 (negative sentiment) and 1.0 (positive sentiment).
      id: Sentiment
      type: object
      description: Represents the feeling associated with the entire text or entities in the text.
    AnalyzeEntitiesRequest:
      type: object
      id: AnalyzeEntitiesRequest
      description: The entity analysis request message.
      properties:
        encodingType:
          enumDescriptions:
            - 'If `EncodingType` is not specified, encoding-dependent information (such as `begin_offset`) will be set at `-1`.'
            - Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-8 encoding of the input. C++ and Go are examples of languages that use this encoding natively.
            - Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-16 encoding of the input. Java and JavaScript are examples of languages that use this encoding natively.
            - Encoding-dependent information (such as `begin_offset`) is calculated based on the UTF-32 encoding of the input. Python is an example of a language that uses this encoding natively.
          enum:
            - NONE
            - UTF8
            - UTF16
            - UTF32
          type: string
          description: The encoding type used by the API to calculate offsets.
        document:
          $ref: '#/components/schemas/Document'
          description: Required. Input document.
    AnalyzeSentimentResponse:
      properties:
        documentSentiment:
          description: The overall sentiment of the input document.
          $ref: '#/components/schemas/Sentiment'
        sentences:
          items:
            $ref: '#/components/schemas/Sentence'
          type: array
          description: The sentiment for all the sentences in the document.
        languageCode:
          type: string
          description: 'The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.'
        languageSupported:
          type: boolean
          description: 'Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis.'
      id: AnalyzeSentimentResponse
      type: object
      description: The sentiment analysis response message.
    TextSpan:
      type: object
      properties:
        beginOffset:
          format: int32
          description: The API calculates the beginning offset of the content in the original document according to the EncodingType specified in the API request.
          type: integer
        content:
          description: 'The content of the text span, which is a substring of the document.'
          type: string
      id: TextSpan
      description: Represents a text span in the input document.
    Entity:
      id: Entity
      type: object
      description: 'Represents a phrase in the text that is a known entity, such as a person, an organization, or location. The API associates information, such as probability and mentions, with entities.'
      properties:
        metadata:
          description: 'Metadata associated with the entity. For most entity types, the metadata is a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they are available. For the metadata associated with other entity types, see the Type table below.'
          additionalProperties:
            type: string
          type: object
        mentions:
          type: array
          items:
            $ref: '#/components/schemas/EntityMention'
          description: The mentions of this entity in the input document. The API currently supports proper noun mentions.
        sentiment:
          $ref: '#/components/schemas/Sentiment'
          description: 'For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the aggregate sentiment expressed for this entity in the provided document.'
        name:
          type: string
          description: The representative name for the entity.
        type:
          description: The entity type.
          type: string
          enumDescriptions:
            - Unknown
            - Person
            - Location
            - Organization
            - Event
            - Artwork
            - Consumer product
            - Other types of entities
            - 'Phone number The metadata lists the phone number, formatted according to local convention, plus whichever additional elements appear in the text: * `number` - the actual number, broken down into sections as per local convention * `national_prefix` - country code, if detected * `area_code` - region or area code, if detected * `extension` - phone extension (to be dialed after connection), if detected'
            - 'Address The metadata identifies the street number and locality plus whichever additional elements appear in the text: * `street_number` - street number * `locality` - city or town * `street_name` - street/route name, if detected * `postal_code` - postal code, if detected * `country` - country, if detected< * `broad_region` - administrative area, such as the state, if detected * `narrow_region` - smaller administrative area, such as county, if detected * `sublocality` - used in Asian addresses to demark a district within a city, if detected'
            - 'Date The metadata identifies the components of the date: * `year` - four digit year, if detected * `month` - two digit month number, if detected * `day` - two digit day number, if detected'
            - Number The metadata is the number itself.
            - Price The metadata identifies the `value` and `currency`.
          enum:
            - UNKNOWN
            - PERSON
            - LOCATION
            - ORGANIZATION
            - EVENT
            - WORK_OF_ART
            - CONSUMER_GOOD
            - OTHER
            - PHONE_NUMBER
            - ADDRESS
            - DATE
            - NUMBER
            - PRICE
    ModerateTextResponse:
      type: object
      description: The document moderation response message.
      properties:
        languageCode:
          description: 'The language of the text, which will be the same as the language specified in the request or, if not specified, the automatically-detected language. See Document.language field for more details.'
          type: string
        moderationCategories:
          type: array
          description: Harmful and sensitive categories representing the input document.
          items:
            $ref: '#/components/schemas/ClassificationCategory'
        languageSupported:
          type: boolean
          description: 'Whether the language is officially supported. The API may still return a response when the language is not supported, but it is on a best effort basis.'
      id: ModerateTextResponse
    Sentence:
      id: Sentence
      type: object
      description: Represents a sentence in the input document.
      properties:
        sentiment:
          description: 'For calls to AnalyzeSentiment or if AnnotateTextRequest.Features.extract_document_sentiment is set to true, this field will contain the sentiment for the sentence.'
          $ref: '#/components/schemas/Sentiment'
        text:
          $ref: '#/components/schemas/TextSpan'
          description: The sentence text.
    EntityMention:
      id: EntityMention
      properties:
        type:
          enumDescriptions:
            - Unknown
            - Proper name
            - Common noun (or noun compound)
          type: string
          enum:
            - TYPE_UNKNOWN
            - PROPER
            - COMMON
          description: The type of the entity mention.
        probability:
          format: float
          description: 'Probability score associated with the entity. The score shows the probability of the entity mention being the entity type. The score is in (0, 1] range.'
          type: number
        text:
          $ref: '#/components/schemas/TextSpan'
          description: The mention text.
        sentiment:
          $ref: '#/components/schemas/Sentiment'
          description: 'For calls to AnalyzeEntitySentiment or if AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this field will contain the sentiment expressed for this mention of the entity in the provided document.'
      type: object
      description: 'Represents a mention for an entity in the text. Currently, proper noun mentions are supported.'
  parameters:
    access_token:
      description: OAuth access token.
      in: query
      name: access_token
      schema:
        type: string
    key:
      description: 'API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.'
      in: query
      name: key
      schema:
        type: string
    quotaUser:
      description: 'Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.'
      in: query
      name: quotaUser
      schema:
        type: string
    prettyPrint:
      description: Returns response with indentations and line breaks.
      in: query
      name: prettyPrint
      schema:
        type: boolean
    fields:
      description: Selector specifying which fields to include in a partial response.
      in: query
      name: fields
      schema:
        type: string
    _.xgafv:
      description: V1 error format.
      in: query
      name: _.xgafv
      schema:
        type: string
        enum:
          - '1'
          - '2'
    oauth_token:
      description: OAuth 2.0 token for the current user.
      in: query
      name: oauth_token
      schema:
        type: string
    upload_protocol:
      description: 'Upload protocol for media (e.g. "raw", "multipart").'
      in: query
      name: upload_protocol
      schema:
        type: string
    alt:
      description: Data format for response.
      in: query
      name: alt
      schema:
        type: string
        enum:
          - json
          - media
          - proto
    uploadType:
      description: 'Legacy upload protocol for media (e.g. "media", "multipart").'
      in: query
      name: uploadType
      schema:
        type: string
    callback:
      description: JSONP
      in: query
      name: callback
      schema:
        type: string
  x-stackQL-resources:
    documents:
      id: google.language.documents
      name: documents
      title: Documents
      methods:
        analyze_entities:
          operation:
            $ref: '#/paths/~1v2~1documents:analyzeEntities/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        classify_text:
          operation:
            $ref: '#/paths/~1v2~1documents:classifyText/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        annotate_text:
          operation:
            $ref: '#/paths/~1v2~1documents:annotateText/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        analyze_sentiment:
          operation:
            $ref: '#/paths/~1v2~1documents:analyzeSentiment/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
        moderate_text:
          operation:
            $ref: '#/paths/~1v2~1documents:moderateText/post'
          response:
            mediaType: application/json
            openAPIDocKey: '200'
      sqlVerbs:
        select: []
        insert: []
        update: []
        delete: []
paths:
  '/v2/documents:analyzeEntities':
    parameters: &ref_1
      - $ref: '#/components/parameters/access_token'
      - $ref: '#/components/parameters/key'
      - $ref: '#/components/parameters/quotaUser'
      - $ref: '#/components/parameters/prettyPrint'
      - $ref: '#/components/parameters/fields'
      - $ref: '#/components/parameters/_.xgafv'
      - $ref: '#/components/parameters/oauth_token'
      - $ref: '#/components/parameters/upload_protocol'
      - $ref: '#/components/parameters/alt'
      - $ref: '#/components/parameters/uploadType'
      - $ref: '#/components/parameters/callback'
    post:
      description: 'Finds named entities (currently proper names and common nouns) in the text along with entity types, probability, mentions for each entity, and other properties.'
      operationId: language.documents.analyzeEntities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeEntitiesRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-language'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-language'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeEntitiesResponse'
      parameters: []
      x-stackQL-resource: documents
      x-stackQL-method: analyze_entities
      x-stackQL-verb: exec
  '/v2/documents:classifyText':
    parameters: *ref_1
    post:
      description: Classifies a document into categories.
      operationId: language.documents.classifyText
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassifyTextRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-language'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-language'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassifyTextResponse'
      parameters: []
      x-stackQL-resource: documents
      x-stackQL-method: classify_text
      x-stackQL-verb: exec
  '/v2/documents:annotateText':
    parameters: *ref_1
    post:
      description: A convenience method that provides all features in one call.
      operationId: language.documents.annotateText
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotateTextRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-language'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-language'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotateTextResponse'
      parameters: []
      x-stackQL-resource: documents
      x-stackQL-method: annotate_text
      x-stackQL-verb: exec
  '/v2/documents:analyzeSentiment':
    parameters: *ref_1
    post:
      description: Analyzes the sentiment of the provided text.
      operationId: language.documents.analyzeSentiment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeSentimentRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-language'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-language'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeSentimentResponse'
      parameters: []
      x-stackQL-resource: documents
      x-stackQL-method: analyze_sentiment
      x-stackQL-verb: exec
  '/v2/documents:moderateText':
    parameters: *ref_1
    post:
      description: Moderates a document for harmful and sensitive categories.
      operationId: language.documents.moderateText
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModerateTextRequest'
      security:
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-language'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-language'
        - Oauth2:
            - 'https://www.googleapis.com/auth/cloud-platform'
          Oauth2c:
            - 'https://www.googleapis.com/auth/cloud-platform'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModerateTextResponse'
      parameters: []
      x-stackQL-resource: documents
      x-stackQL-method: moderate_text
      x-stackQL-verb: exec
